
Tu_bu_moi_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad54  08080190  08080190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  0808aee8  0808aee8  0001aee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808b898  0808b898  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0808b898  0808b898  0001b898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808b8a0  0808b8a0  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808b8a0  0808b8a0  0001b8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808b8a4  0808b8a4  0001b8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0808b8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020254  2**0
                  CONTENTS
 10 .bss          00000974  20000254  20000254  00020254  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bc8  20000bc8  00020254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 14 .debug_info   000136ad  00000000  00000000  000202c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003267  00000000  00000000  00033974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00036be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c2d  00000000  00000000  00037be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002449e  00000000  00000000  00038815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e91  00000000  00000000  0005ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d197f  00000000  00000000  00071b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000051fc  00000000  00000000  001434c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001486c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080190 <__do_global_dtors_aux>:
 8080190:	b510      	push	{r4, lr}
 8080192:	4c05      	ldr	r4, [pc, #20]	; (80801a8 <__do_global_dtors_aux+0x18>)
 8080194:	7823      	ldrb	r3, [r4, #0]
 8080196:	b933      	cbnz	r3, 80801a6 <__do_global_dtors_aux+0x16>
 8080198:	4b04      	ldr	r3, [pc, #16]	; (80801ac <__do_global_dtors_aux+0x1c>)
 808019a:	b113      	cbz	r3, 80801a2 <__do_global_dtors_aux+0x12>
 808019c:	4804      	ldr	r0, [pc, #16]	; (80801b0 <__do_global_dtors_aux+0x20>)
 808019e:	f3af 8000 	nop.w
 80801a2:	2301      	movs	r3, #1
 80801a4:	7023      	strb	r3, [r4, #0]
 80801a6:	bd10      	pop	{r4, pc}
 80801a8:	20000254 	.word	0x20000254
 80801ac:	00000000 	.word	0x00000000
 80801b0:	0808aecc 	.word	0x0808aecc

080801b4 <frame_dummy>:
 80801b4:	b508      	push	{r3, lr}
 80801b6:	4b03      	ldr	r3, [pc, #12]	; (80801c4 <frame_dummy+0x10>)
 80801b8:	b11b      	cbz	r3, 80801c2 <frame_dummy+0xe>
 80801ba:	4903      	ldr	r1, [pc, #12]	; (80801c8 <frame_dummy+0x14>)
 80801bc:	4803      	ldr	r0, [pc, #12]	; (80801cc <frame_dummy+0x18>)
 80801be:	f3af 8000 	nop.w
 80801c2:	bd08      	pop	{r3, pc}
 80801c4:	00000000 	.word	0x00000000
 80801c8:	20000258 	.word	0x20000258
 80801cc:	0808aecc 	.word	0x0808aecc

080801d0 <memchr>:
 80801d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80801d4:	2a10      	cmp	r2, #16
 80801d6:	db2b      	blt.n	8080230 <memchr+0x60>
 80801d8:	f010 0f07 	tst.w	r0, #7
 80801dc:	d008      	beq.n	80801f0 <memchr+0x20>
 80801de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80801e2:	3a01      	subs	r2, #1
 80801e4:	428b      	cmp	r3, r1
 80801e6:	d02d      	beq.n	8080244 <memchr+0x74>
 80801e8:	f010 0f07 	tst.w	r0, #7
 80801ec:	b342      	cbz	r2, 8080240 <memchr+0x70>
 80801ee:	d1f6      	bne.n	80801de <memchr+0xe>
 80801f0:	b4f0      	push	{r4, r5, r6, r7}
 80801f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80801f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80801fa:	f022 0407 	bic.w	r4, r2, #7
 80801fe:	f07f 0700 	mvns.w	r7, #0
 8080202:	2300      	movs	r3, #0
 8080204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8080208:	3c08      	subs	r4, #8
 808020a:	ea85 0501 	eor.w	r5, r5, r1
 808020e:	ea86 0601 	eor.w	r6, r6, r1
 8080212:	fa85 f547 	uadd8	r5, r5, r7
 8080216:	faa3 f587 	sel	r5, r3, r7
 808021a:	fa86 f647 	uadd8	r6, r6, r7
 808021e:	faa5 f687 	sel	r6, r5, r7
 8080222:	b98e      	cbnz	r6, 8080248 <memchr+0x78>
 8080224:	d1ee      	bne.n	8080204 <memchr+0x34>
 8080226:	bcf0      	pop	{r4, r5, r6, r7}
 8080228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 808022c:	f002 0207 	and.w	r2, r2, #7
 8080230:	b132      	cbz	r2, 8080240 <memchr+0x70>
 8080232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8080236:	3a01      	subs	r2, #1
 8080238:	ea83 0301 	eor.w	r3, r3, r1
 808023c:	b113      	cbz	r3, 8080244 <memchr+0x74>
 808023e:	d1f8      	bne.n	8080232 <memchr+0x62>
 8080240:	2000      	movs	r0, #0
 8080242:	4770      	bx	lr
 8080244:	3801      	subs	r0, #1
 8080246:	4770      	bx	lr
 8080248:	2d00      	cmp	r5, #0
 808024a:	bf06      	itte	eq
 808024c:	4635      	moveq	r5, r6
 808024e:	3803      	subeq	r0, #3
 8080250:	3807      	subne	r0, #7
 8080252:	f015 0f01 	tst.w	r5, #1
 8080256:	d107      	bne.n	8080268 <memchr+0x98>
 8080258:	3001      	adds	r0, #1
 808025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 808025e:	bf02      	ittt	eq
 8080260:	3001      	addeq	r0, #1
 8080262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8080266:	3001      	addeq	r0, #1
 8080268:	bcf0      	pop	{r4, r5, r6, r7}
 808026a:	3801      	subs	r0, #1
 808026c:	4770      	bx	lr
 808026e:	bf00      	nop

08080270 <strlen>:
 8080270:	4603      	mov	r3, r0
 8080272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8080276:	2a00      	cmp	r2, #0
 8080278:	d1fb      	bne.n	8080272 <strlen+0x2>
 808027a:	1a18      	subs	r0, r3, r0
 808027c:	3801      	subs	r0, #1
 808027e:	4770      	bx	lr

08080280 <__aeabi_drsub>:
 8080280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8080284:	e002      	b.n	808028c <__adddf3>
 8080286:	bf00      	nop

08080288 <__aeabi_dsub>:
 8080288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808028c <__adddf3>:
 808028c:	b530      	push	{r4, r5, lr}
 808028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8080292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8080296:	ea94 0f05 	teq	r4, r5
 808029a:	bf08      	it	eq
 808029c:	ea90 0f02 	teqeq	r0, r2
 80802a0:	bf1f      	itttt	ne
 80802a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80802a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80802aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80802ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80802b2:	f000 80e2 	beq.w	808047a <__adddf3+0x1ee>
 80802b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80802ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80802be:	bfb8      	it	lt
 80802c0:	426d      	neglt	r5, r5
 80802c2:	dd0c      	ble.n	80802de <__adddf3+0x52>
 80802c4:	442c      	add	r4, r5
 80802c6:	ea80 0202 	eor.w	r2, r0, r2
 80802ca:	ea81 0303 	eor.w	r3, r1, r3
 80802ce:	ea82 0000 	eor.w	r0, r2, r0
 80802d2:	ea83 0101 	eor.w	r1, r3, r1
 80802d6:	ea80 0202 	eor.w	r2, r0, r2
 80802da:	ea81 0303 	eor.w	r3, r1, r3
 80802de:	2d36      	cmp	r5, #54	; 0x36
 80802e0:	bf88      	it	hi
 80802e2:	bd30      	pophi	{r4, r5, pc}
 80802e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80802e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80802ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80802f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80802f4:	d002      	beq.n	80802fc <__adddf3+0x70>
 80802f6:	4240      	negs	r0, r0
 80802f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80802fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8080300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8080308:	d002      	beq.n	8080310 <__adddf3+0x84>
 808030a:	4252      	negs	r2, r2
 808030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080310:	ea94 0f05 	teq	r4, r5
 8080314:	f000 80a7 	beq.w	8080466 <__adddf3+0x1da>
 8080318:	f1a4 0401 	sub.w	r4, r4, #1
 808031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8080320:	db0d      	blt.n	808033e <__adddf3+0xb2>
 8080322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8080326:	fa22 f205 	lsr.w	r2, r2, r5
 808032a:	1880      	adds	r0, r0, r2
 808032c:	f141 0100 	adc.w	r1, r1, #0
 8080330:	fa03 f20e 	lsl.w	r2, r3, lr
 8080334:	1880      	adds	r0, r0, r2
 8080336:	fa43 f305 	asr.w	r3, r3, r5
 808033a:	4159      	adcs	r1, r3
 808033c:	e00e      	b.n	808035c <__adddf3+0xd0>
 808033e:	f1a5 0520 	sub.w	r5, r5, #32
 8080342:	f10e 0e20 	add.w	lr, lr, #32
 8080346:	2a01      	cmp	r2, #1
 8080348:	fa03 fc0e 	lsl.w	ip, r3, lr
 808034c:	bf28      	it	cs
 808034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8080352:	fa43 f305 	asr.w	r3, r3, r5
 8080356:	18c0      	adds	r0, r0, r3
 8080358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8080360:	d507      	bpl.n	8080372 <__adddf3+0xe6>
 8080362:	f04f 0e00 	mov.w	lr, #0
 8080366:	f1dc 0c00 	rsbs	ip, ip, #0
 808036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8080372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8080376:	d31b      	bcc.n	80803b0 <__adddf3+0x124>
 8080378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808037c:	d30c      	bcc.n	8080398 <__adddf3+0x10c>
 808037e:	0849      	lsrs	r1, r1, #1
 8080380:	ea5f 0030 	movs.w	r0, r0, rrx
 8080384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8080388:	f104 0401 	add.w	r4, r4, #1
 808038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8080390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8080394:	f080 809a 	bcs.w	80804cc <__adddf3+0x240>
 8080398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808039c:	bf08      	it	eq
 808039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80803a2:	f150 0000 	adcs.w	r0, r0, #0
 80803a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80803aa:	ea41 0105 	orr.w	r1, r1, r5
 80803ae:	bd30      	pop	{r4, r5, pc}
 80803b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80803b4:	4140      	adcs	r0, r0
 80803b6:	eb41 0101 	adc.w	r1, r1, r1
 80803ba:	3c01      	subs	r4, #1
 80803bc:	bf28      	it	cs
 80803be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80803c2:	d2e9      	bcs.n	8080398 <__adddf3+0x10c>
 80803c4:	f091 0f00 	teq	r1, #0
 80803c8:	bf04      	itt	eq
 80803ca:	4601      	moveq	r1, r0
 80803cc:	2000      	moveq	r0, #0
 80803ce:	fab1 f381 	clz	r3, r1
 80803d2:	bf08      	it	eq
 80803d4:	3320      	addeq	r3, #32
 80803d6:	f1a3 030b 	sub.w	r3, r3, #11
 80803da:	f1b3 0220 	subs.w	r2, r3, #32
 80803de:	da0c      	bge.n	80803fa <__adddf3+0x16e>
 80803e0:	320c      	adds	r2, #12
 80803e2:	dd08      	ble.n	80803f6 <__adddf3+0x16a>
 80803e4:	f102 0c14 	add.w	ip, r2, #20
 80803e8:	f1c2 020c 	rsb	r2, r2, #12
 80803ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80803f0:	fa21 f102 	lsr.w	r1, r1, r2
 80803f4:	e00c      	b.n	8080410 <__adddf3+0x184>
 80803f6:	f102 0214 	add.w	r2, r2, #20
 80803fa:	bfd8      	it	le
 80803fc:	f1c2 0c20 	rsble	ip, r2, #32
 8080400:	fa01 f102 	lsl.w	r1, r1, r2
 8080404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8080408:	bfdc      	itt	le
 808040a:	ea41 010c 	orrle.w	r1, r1, ip
 808040e:	4090      	lslle	r0, r2
 8080410:	1ae4      	subs	r4, r4, r3
 8080412:	bfa2      	ittt	ge
 8080414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8080418:	4329      	orrge	r1, r5
 808041a:	bd30      	popge	{r4, r5, pc}
 808041c:	ea6f 0404 	mvn.w	r4, r4
 8080420:	3c1f      	subs	r4, #31
 8080422:	da1c      	bge.n	808045e <__adddf3+0x1d2>
 8080424:	340c      	adds	r4, #12
 8080426:	dc0e      	bgt.n	8080446 <__adddf3+0x1ba>
 8080428:	f104 0414 	add.w	r4, r4, #20
 808042c:	f1c4 0220 	rsb	r2, r4, #32
 8080430:	fa20 f004 	lsr.w	r0, r0, r4
 8080434:	fa01 f302 	lsl.w	r3, r1, r2
 8080438:	ea40 0003 	orr.w	r0, r0, r3
 808043c:	fa21 f304 	lsr.w	r3, r1, r4
 8080440:	ea45 0103 	orr.w	r1, r5, r3
 8080444:	bd30      	pop	{r4, r5, pc}
 8080446:	f1c4 040c 	rsb	r4, r4, #12
 808044a:	f1c4 0220 	rsb	r2, r4, #32
 808044e:	fa20 f002 	lsr.w	r0, r0, r2
 8080452:	fa01 f304 	lsl.w	r3, r1, r4
 8080456:	ea40 0003 	orr.w	r0, r0, r3
 808045a:	4629      	mov	r1, r5
 808045c:	bd30      	pop	{r4, r5, pc}
 808045e:	fa21 f004 	lsr.w	r0, r1, r4
 8080462:	4629      	mov	r1, r5
 8080464:	bd30      	pop	{r4, r5, pc}
 8080466:	f094 0f00 	teq	r4, #0
 808046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808046e:	bf06      	itte	eq
 8080470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8080474:	3401      	addeq	r4, #1
 8080476:	3d01      	subne	r5, #1
 8080478:	e74e      	b.n	8080318 <__adddf3+0x8c>
 808047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808047e:	bf18      	it	ne
 8080480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8080484:	d029      	beq.n	80804da <__adddf3+0x24e>
 8080486:	ea94 0f05 	teq	r4, r5
 808048a:	bf08      	it	eq
 808048c:	ea90 0f02 	teqeq	r0, r2
 8080490:	d005      	beq.n	808049e <__adddf3+0x212>
 8080492:	ea54 0c00 	orrs.w	ip, r4, r0
 8080496:	bf04      	itt	eq
 8080498:	4619      	moveq	r1, r3
 808049a:	4610      	moveq	r0, r2
 808049c:	bd30      	pop	{r4, r5, pc}
 808049e:	ea91 0f03 	teq	r1, r3
 80804a2:	bf1e      	ittt	ne
 80804a4:	2100      	movne	r1, #0
 80804a6:	2000      	movne	r0, #0
 80804a8:	bd30      	popne	{r4, r5, pc}
 80804aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80804ae:	d105      	bne.n	80804bc <__adddf3+0x230>
 80804b0:	0040      	lsls	r0, r0, #1
 80804b2:	4149      	adcs	r1, r1
 80804b4:	bf28      	it	cs
 80804b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80804ba:	bd30      	pop	{r4, r5, pc}
 80804bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80804c0:	bf3c      	itt	cc
 80804c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80804c6:	bd30      	popcc	{r4, r5, pc}
 80804c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80804cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80804d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80804d4:	f04f 0000 	mov.w	r0, #0
 80804d8:	bd30      	pop	{r4, r5, pc}
 80804da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80804de:	bf1a      	itte	ne
 80804e0:	4619      	movne	r1, r3
 80804e2:	4610      	movne	r0, r2
 80804e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80804e8:	bf1c      	itt	ne
 80804ea:	460b      	movne	r3, r1
 80804ec:	4602      	movne	r2, r0
 80804ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80804f2:	bf06      	itte	eq
 80804f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80804f8:	ea91 0f03 	teqeq	r1, r3
 80804fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8080500:	bd30      	pop	{r4, r5, pc}
 8080502:	bf00      	nop

08080504 <__aeabi_ui2d>:
 8080504:	f090 0f00 	teq	r0, #0
 8080508:	bf04      	itt	eq
 808050a:	2100      	moveq	r1, #0
 808050c:	4770      	bxeq	lr
 808050e:	b530      	push	{r4, r5, lr}
 8080510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8080518:	f04f 0500 	mov.w	r5, #0
 808051c:	f04f 0100 	mov.w	r1, #0
 8080520:	e750      	b.n	80803c4 <__adddf3+0x138>
 8080522:	bf00      	nop

08080524 <__aeabi_i2d>:
 8080524:	f090 0f00 	teq	r0, #0
 8080528:	bf04      	itt	eq
 808052a:	2100      	moveq	r1, #0
 808052c:	4770      	bxeq	lr
 808052e:	b530      	push	{r4, r5, lr}
 8080530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8080538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808053c:	bf48      	it	mi
 808053e:	4240      	negmi	r0, r0
 8080540:	f04f 0100 	mov.w	r1, #0
 8080544:	e73e      	b.n	80803c4 <__adddf3+0x138>
 8080546:	bf00      	nop

08080548 <__aeabi_f2d>:
 8080548:	0042      	lsls	r2, r0, #1
 808054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8080552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8080556:	bf1f      	itttt	ne
 8080558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8080560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8080564:	4770      	bxne	lr
 8080566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808056a:	bf08      	it	eq
 808056c:	4770      	bxeq	lr
 808056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8080572:	bf04      	itt	eq
 8080574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8080578:	4770      	bxeq	lr
 808057a:	b530      	push	{r4, r5, lr}
 808057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8080580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8080584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080588:	e71c      	b.n	80803c4 <__adddf3+0x138>
 808058a:	bf00      	nop

0808058c <__aeabi_ul2d>:
 808058c:	ea50 0201 	orrs.w	r2, r0, r1
 8080590:	bf08      	it	eq
 8080592:	4770      	bxeq	lr
 8080594:	b530      	push	{r4, r5, lr}
 8080596:	f04f 0500 	mov.w	r5, #0
 808059a:	e00a      	b.n	80805b2 <__aeabi_l2d+0x16>

0808059c <__aeabi_l2d>:
 808059c:	ea50 0201 	orrs.w	r2, r0, r1
 80805a0:	bf08      	it	eq
 80805a2:	4770      	bxeq	lr
 80805a4:	b530      	push	{r4, r5, lr}
 80805a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80805aa:	d502      	bpl.n	80805b2 <__aeabi_l2d+0x16>
 80805ac:	4240      	negs	r0, r0
 80805ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80805b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80805b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80805ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80805be:	f43f aed8 	beq.w	8080372 <__adddf3+0xe6>
 80805c2:	f04f 0203 	mov.w	r2, #3
 80805c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80805ca:	bf18      	it	ne
 80805cc:	3203      	addne	r2, #3
 80805ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80805d2:	bf18      	it	ne
 80805d4:	3203      	addne	r2, #3
 80805d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80805da:	f1c2 0320 	rsb	r3, r2, #32
 80805de:	fa00 fc03 	lsl.w	ip, r0, r3
 80805e2:	fa20 f002 	lsr.w	r0, r0, r2
 80805e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80805ea:	ea40 000e 	orr.w	r0, r0, lr
 80805ee:	fa21 f102 	lsr.w	r1, r1, r2
 80805f2:	4414      	add	r4, r2
 80805f4:	e6bd      	b.n	8080372 <__adddf3+0xe6>
 80805f6:	bf00      	nop

080805f8 <__aeabi_dmul>:
 80805f8:	b570      	push	{r4, r5, r6, lr}
 80805fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80805fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8080602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8080606:	bf1d      	ittte	ne
 8080608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808060c:	ea94 0f0c 	teqne	r4, ip
 8080610:	ea95 0f0c 	teqne	r5, ip
 8080614:	f000 f8de 	bleq	80807d4 <__aeabi_dmul+0x1dc>
 8080618:	442c      	add	r4, r5
 808061a:	ea81 0603 	eor.w	r6, r1, r3
 808061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8080622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8080626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808062a:	bf18      	it	ne
 808062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8080630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8080634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8080638:	d038      	beq.n	80806ac <__aeabi_dmul+0xb4>
 808063a:	fba0 ce02 	umull	ip, lr, r0, r2
 808063e:	f04f 0500 	mov.w	r5, #0
 8080642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8080646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808064e:	f04f 0600 	mov.w	r6, #0
 8080652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8080656:	f09c 0f00 	teq	ip, #0
 808065a:	bf18      	it	ne
 808065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8080660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8080664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8080668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808066c:	d204      	bcs.n	8080678 <__aeabi_dmul+0x80>
 808066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8080672:	416d      	adcs	r5, r5
 8080674:	eb46 0606 	adc.w	r6, r6, r6
 8080678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8080680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8080684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8080688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8080690:	bf88      	it	hi
 8080692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8080696:	d81e      	bhi.n	80806d6 <__aeabi_dmul+0xde>
 8080698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808069c:	bf08      	it	eq
 808069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80806a2:	f150 0000 	adcs.w	r0, r0, #0
 80806a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80806aa:	bd70      	pop	{r4, r5, r6, pc}
 80806ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80806b0:	ea46 0101 	orr.w	r1, r6, r1
 80806b4:	ea40 0002 	orr.w	r0, r0, r2
 80806b8:	ea81 0103 	eor.w	r1, r1, r3
 80806bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80806c0:	bfc2      	ittt	gt
 80806c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80806c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80806ca:	bd70      	popgt	{r4, r5, r6, pc}
 80806cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80806d0:	f04f 0e00 	mov.w	lr, #0
 80806d4:	3c01      	subs	r4, #1
 80806d6:	f300 80ab 	bgt.w	8080830 <__aeabi_dmul+0x238>
 80806da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80806de:	bfde      	ittt	le
 80806e0:	2000      	movle	r0, #0
 80806e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80806e6:	bd70      	pople	{r4, r5, r6, pc}
 80806e8:	f1c4 0400 	rsb	r4, r4, #0
 80806ec:	3c20      	subs	r4, #32
 80806ee:	da35      	bge.n	808075c <__aeabi_dmul+0x164>
 80806f0:	340c      	adds	r4, #12
 80806f2:	dc1b      	bgt.n	808072c <__aeabi_dmul+0x134>
 80806f4:	f104 0414 	add.w	r4, r4, #20
 80806f8:	f1c4 0520 	rsb	r5, r4, #32
 80806fc:	fa00 f305 	lsl.w	r3, r0, r5
 8080700:	fa20 f004 	lsr.w	r0, r0, r4
 8080704:	fa01 f205 	lsl.w	r2, r1, r5
 8080708:	ea40 0002 	orr.w	r0, r0, r2
 808070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8080710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8080718:	fa21 f604 	lsr.w	r6, r1, r4
 808071c:	eb42 0106 	adc.w	r1, r2, r6
 8080720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8080724:	bf08      	it	eq
 8080726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808072a:	bd70      	pop	{r4, r5, r6, pc}
 808072c:	f1c4 040c 	rsb	r4, r4, #12
 8080730:	f1c4 0520 	rsb	r5, r4, #32
 8080734:	fa00 f304 	lsl.w	r3, r0, r4
 8080738:	fa20 f005 	lsr.w	r0, r0, r5
 808073c:	fa01 f204 	lsl.w	r2, r1, r4
 8080740:	ea40 0002 	orr.w	r0, r0, r2
 8080744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8080748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808074c:	f141 0100 	adc.w	r1, r1, #0
 8080750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8080754:	bf08      	it	eq
 8080756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808075a:	bd70      	pop	{r4, r5, r6, pc}
 808075c:	f1c4 0520 	rsb	r5, r4, #32
 8080760:	fa00 f205 	lsl.w	r2, r0, r5
 8080764:	ea4e 0e02 	orr.w	lr, lr, r2
 8080768:	fa20 f304 	lsr.w	r3, r0, r4
 808076c:	fa01 f205 	lsl.w	r2, r1, r5
 8080770:	ea43 0302 	orr.w	r3, r3, r2
 8080774:	fa21 f004 	lsr.w	r0, r1, r4
 8080778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808077c:	fa21 f204 	lsr.w	r2, r1, r4
 8080780:	ea20 0002 	bic.w	r0, r0, r2
 8080784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8080788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808078c:	bf08      	it	eq
 808078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8080792:	bd70      	pop	{r4, r5, r6, pc}
 8080794:	f094 0f00 	teq	r4, #0
 8080798:	d10f      	bne.n	80807ba <__aeabi_dmul+0x1c2>
 808079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808079e:	0040      	lsls	r0, r0, #1
 80807a0:	eb41 0101 	adc.w	r1, r1, r1
 80807a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80807a8:	bf08      	it	eq
 80807aa:	3c01      	subeq	r4, #1
 80807ac:	d0f7      	beq.n	808079e <__aeabi_dmul+0x1a6>
 80807ae:	ea41 0106 	orr.w	r1, r1, r6
 80807b2:	f095 0f00 	teq	r5, #0
 80807b6:	bf18      	it	ne
 80807b8:	4770      	bxne	lr
 80807ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80807be:	0052      	lsls	r2, r2, #1
 80807c0:	eb43 0303 	adc.w	r3, r3, r3
 80807c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80807c8:	bf08      	it	eq
 80807ca:	3d01      	subeq	r5, #1
 80807cc:	d0f7      	beq.n	80807be <__aeabi_dmul+0x1c6>
 80807ce:	ea43 0306 	orr.w	r3, r3, r6
 80807d2:	4770      	bx	lr
 80807d4:	ea94 0f0c 	teq	r4, ip
 80807d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80807dc:	bf18      	it	ne
 80807de:	ea95 0f0c 	teqne	r5, ip
 80807e2:	d00c      	beq.n	80807fe <__aeabi_dmul+0x206>
 80807e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80807e8:	bf18      	it	ne
 80807ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80807ee:	d1d1      	bne.n	8080794 <__aeabi_dmul+0x19c>
 80807f0:	ea81 0103 	eor.w	r1, r1, r3
 80807f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80807f8:	f04f 0000 	mov.w	r0, #0
 80807fc:	bd70      	pop	{r4, r5, r6, pc}
 80807fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080802:	bf06      	itte	eq
 8080804:	4610      	moveq	r0, r2
 8080806:	4619      	moveq	r1, r3
 8080808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808080c:	d019      	beq.n	8080842 <__aeabi_dmul+0x24a>
 808080e:	ea94 0f0c 	teq	r4, ip
 8080812:	d102      	bne.n	808081a <__aeabi_dmul+0x222>
 8080814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8080818:	d113      	bne.n	8080842 <__aeabi_dmul+0x24a>
 808081a:	ea95 0f0c 	teq	r5, ip
 808081e:	d105      	bne.n	808082c <__aeabi_dmul+0x234>
 8080820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8080824:	bf1c      	itt	ne
 8080826:	4610      	movne	r0, r2
 8080828:	4619      	movne	r1, r3
 808082a:	d10a      	bne.n	8080842 <__aeabi_dmul+0x24a>
 808082c:	ea81 0103 	eor.w	r1, r1, r3
 8080830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8080834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8080838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808083c:	f04f 0000 	mov.w	r0, #0
 8080840:	bd70      	pop	{r4, r5, r6, pc}
 8080842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8080846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808084a:	bd70      	pop	{r4, r5, r6, pc}

0808084c <__aeabi_ddiv>:
 808084c:	b570      	push	{r4, r5, r6, lr}
 808084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8080852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8080856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808085a:	bf1d      	ittte	ne
 808085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8080860:	ea94 0f0c 	teqne	r4, ip
 8080864:	ea95 0f0c 	teqne	r5, ip
 8080868:	f000 f8a7 	bleq	80809ba <__aeabi_ddiv+0x16e>
 808086c:	eba4 0405 	sub.w	r4, r4, r5
 8080870:	ea81 0e03 	eor.w	lr, r1, r3
 8080874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8080878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808087c:	f000 8088 	beq.w	8080990 <__aeabi_ddiv+0x144>
 8080880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8080888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8080890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8080894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8080898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80808a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80808a4:	429d      	cmp	r5, r3
 80808a6:	bf08      	it	eq
 80808a8:	4296      	cmpeq	r6, r2
 80808aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80808ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80808b2:	d202      	bcs.n	80808ba <__aeabi_ddiv+0x6e>
 80808b4:	085b      	lsrs	r3, r3, #1
 80808b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80808ba:	1ab6      	subs	r6, r6, r2
 80808bc:	eb65 0503 	sbc.w	r5, r5, r3
 80808c0:	085b      	lsrs	r3, r3, #1
 80808c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80808c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80808ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80808ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80808d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80808d6:	bf22      	ittt	cs
 80808d8:	1ab6      	subcs	r6, r6, r2
 80808da:	4675      	movcs	r5, lr
 80808dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80808e0:	085b      	lsrs	r3, r3, #1
 80808e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80808e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80808ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80808ee:	bf22      	ittt	cs
 80808f0:	1ab6      	subcs	r6, r6, r2
 80808f2:	4675      	movcs	r5, lr
 80808f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80808f8:	085b      	lsrs	r3, r3, #1
 80808fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80808fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8080902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8080906:	bf22      	ittt	cs
 8080908:	1ab6      	subcs	r6, r6, r2
 808090a:	4675      	movcs	r5, lr
 808090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8080910:	085b      	lsrs	r3, r3, #1
 8080912:	ea4f 0232 	mov.w	r2, r2, rrx
 8080916:	ebb6 0e02 	subs.w	lr, r6, r2
 808091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808091e:	bf22      	ittt	cs
 8080920:	1ab6      	subcs	r6, r6, r2
 8080922:	4675      	movcs	r5, lr
 8080924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8080928:	ea55 0e06 	orrs.w	lr, r5, r6
 808092c:	d018      	beq.n	8080960 <__aeabi_ddiv+0x114>
 808092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8080932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8080936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8080942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8080946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808094a:	d1c0      	bne.n	80808ce <__aeabi_ddiv+0x82>
 808094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8080950:	d10b      	bne.n	808096a <__aeabi_ddiv+0x11e>
 8080952:	ea41 0100 	orr.w	r1, r1, r0
 8080956:	f04f 0000 	mov.w	r0, #0
 808095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808095e:	e7b6      	b.n	80808ce <__aeabi_ddiv+0x82>
 8080960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8080964:	bf04      	itt	eq
 8080966:	4301      	orreq	r1, r0
 8080968:	2000      	moveq	r0, #0
 808096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808096e:	bf88      	it	hi
 8080970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8080974:	f63f aeaf 	bhi.w	80806d6 <__aeabi_dmul+0xde>
 8080978:	ebb5 0c03 	subs.w	ip, r5, r3
 808097c:	bf04      	itt	eq
 808097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8080982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8080986:	f150 0000 	adcs.w	r0, r0, #0
 808098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808098e:	bd70      	pop	{r4, r5, r6, pc}
 8080990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8080994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8080998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808099c:	bfc2      	ittt	gt
 808099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80809a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80809a6:	bd70      	popgt	{r4, r5, r6, pc}
 80809a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80809ac:	f04f 0e00 	mov.w	lr, #0
 80809b0:	3c01      	subs	r4, #1
 80809b2:	e690      	b.n	80806d6 <__aeabi_dmul+0xde>
 80809b4:	ea45 0e06 	orr.w	lr, r5, r6
 80809b8:	e68d      	b.n	80806d6 <__aeabi_dmul+0xde>
 80809ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80809be:	ea94 0f0c 	teq	r4, ip
 80809c2:	bf08      	it	eq
 80809c4:	ea95 0f0c 	teqeq	r5, ip
 80809c8:	f43f af3b 	beq.w	8080842 <__aeabi_dmul+0x24a>
 80809cc:	ea94 0f0c 	teq	r4, ip
 80809d0:	d10a      	bne.n	80809e8 <__aeabi_ddiv+0x19c>
 80809d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80809d6:	f47f af34 	bne.w	8080842 <__aeabi_dmul+0x24a>
 80809da:	ea95 0f0c 	teq	r5, ip
 80809de:	f47f af25 	bne.w	808082c <__aeabi_dmul+0x234>
 80809e2:	4610      	mov	r0, r2
 80809e4:	4619      	mov	r1, r3
 80809e6:	e72c      	b.n	8080842 <__aeabi_dmul+0x24a>
 80809e8:	ea95 0f0c 	teq	r5, ip
 80809ec:	d106      	bne.n	80809fc <__aeabi_ddiv+0x1b0>
 80809ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80809f2:	f43f aefd 	beq.w	80807f0 <__aeabi_dmul+0x1f8>
 80809f6:	4610      	mov	r0, r2
 80809f8:	4619      	mov	r1, r3
 80809fa:	e722      	b.n	8080842 <__aeabi_dmul+0x24a>
 80809fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080a00:	bf18      	it	ne
 8080a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8080a06:	f47f aec5 	bne.w	8080794 <__aeabi_dmul+0x19c>
 8080a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8080a0e:	f47f af0d 	bne.w	808082c <__aeabi_dmul+0x234>
 8080a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8080a16:	f47f aeeb 	bne.w	80807f0 <__aeabi_dmul+0x1f8>
 8080a1a:	e712      	b.n	8080842 <__aeabi_dmul+0x24a>

08080a1c <__gedf2>:
 8080a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8080a20:	e006      	b.n	8080a30 <__cmpdf2+0x4>
 8080a22:	bf00      	nop

08080a24 <__ledf2>:
 8080a24:	f04f 0c01 	mov.w	ip, #1
 8080a28:	e002      	b.n	8080a30 <__cmpdf2+0x4>
 8080a2a:	bf00      	nop

08080a2c <__cmpdf2>:
 8080a2c:	f04f 0c01 	mov.w	ip, #1
 8080a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8080a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080a40:	bf18      	it	ne
 8080a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8080a46:	d01b      	beq.n	8080a80 <__cmpdf2+0x54>
 8080a48:	b001      	add	sp, #4
 8080a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8080a4e:	bf0c      	ite	eq
 8080a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8080a54:	ea91 0f03 	teqne	r1, r3
 8080a58:	bf02      	ittt	eq
 8080a5a:	ea90 0f02 	teqeq	r0, r2
 8080a5e:	2000      	moveq	r0, #0
 8080a60:	4770      	bxeq	lr
 8080a62:	f110 0f00 	cmn.w	r0, #0
 8080a66:	ea91 0f03 	teq	r1, r3
 8080a6a:	bf58      	it	pl
 8080a6c:	4299      	cmppl	r1, r3
 8080a6e:	bf08      	it	eq
 8080a70:	4290      	cmpeq	r0, r2
 8080a72:	bf2c      	ite	cs
 8080a74:	17d8      	asrcs	r0, r3, #31
 8080a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8080a7a:	f040 0001 	orr.w	r0, r0, #1
 8080a7e:	4770      	bx	lr
 8080a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a88:	d102      	bne.n	8080a90 <__cmpdf2+0x64>
 8080a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8080a8e:	d107      	bne.n	8080aa0 <__cmpdf2+0x74>
 8080a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a98:	d1d6      	bne.n	8080a48 <__cmpdf2+0x1c>
 8080a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8080a9e:	d0d3      	beq.n	8080a48 <__cmpdf2+0x1c>
 8080aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8080aa4:	4770      	bx	lr
 8080aa6:	bf00      	nop

08080aa8 <__aeabi_cdrcmple>:
 8080aa8:	4684      	mov	ip, r0
 8080aaa:	4610      	mov	r0, r2
 8080aac:	4662      	mov	r2, ip
 8080aae:	468c      	mov	ip, r1
 8080ab0:	4619      	mov	r1, r3
 8080ab2:	4663      	mov	r3, ip
 8080ab4:	e000      	b.n	8080ab8 <__aeabi_cdcmpeq>
 8080ab6:	bf00      	nop

08080ab8 <__aeabi_cdcmpeq>:
 8080ab8:	b501      	push	{r0, lr}
 8080aba:	f7ff ffb7 	bl	8080a2c <__cmpdf2>
 8080abe:	2800      	cmp	r0, #0
 8080ac0:	bf48      	it	mi
 8080ac2:	f110 0f00 	cmnmi.w	r0, #0
 8080ac6:	bd01      	pop	{r0, pc}

08080ac8 <__aeabi_dcmpeq>:
 8080ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080acc:	f7ff fff4 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080ad0:	bf0c      	ite	eq
 8080ad2:	2001      	moveq	r0, #1
 8080ad4:	2000      	movne	r0, #0
 8080ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8080ada:	bf00      	nop

08080adc <__aeabi_dcmplt>:
 8080adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080ae0:	f7ff ffea 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080ae4:	bf34      	ite	cc
 8080ae6:	2001      	movcc	r0, #1
 8080ae8:	2000      	movcs	r0, #0
 8080aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8080aee:	bf00      	nop

08080af0 <__aeabi_dcmple>:
 8080af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080af4:	f7ff ffe0 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080af8:	bf94      	ite	ls
 8080afa:	2001      	movls	r0, #1
 8080afc:	2000      	movhi	r0, #0
 8080afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b02:	bf00      	nop

08080b04 <__aeabi_dcmpge>:
 8080b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080b08:	f7ff ffce 	bl	8080aa8 <__aeabi_cdrcmple>
 8080b0c:	bf94      	ite	ls
 8080b0e:	2001      	movls	r0, #1
 8080b10:	2000      	movhi	r0, #0
 8080b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b16:	bf00      	nop

08080b18 <__aeabi_dcmpgt>:
 8080b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080b1c:	f7ff ffc4 	bl	8080aa8 <__aeabi_cdrcmple>
 8080b20:	bf34      	ite	cc
 8080b22:	2001      	movcc	r0, #1
 8080b24:	2000      	movcs	r0, #0
 8080b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b2a:	bf00      	nop

08080b2c <__aeabi_dcmpun>:
 8080b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080b34:	d102      	bne.n	8080b3c <__aeabi_dcmpun+0x10>
 8080b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8080b3a:	d10a      	bne.n	8080b52 <__aeabi_dcmpun+0x26>
 8080b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080b44:	d102      	bne.n	8080b4c <__aeabi_dcmpun+0x20>
 8080b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8080b4a:	d102      	bne.n	8080b52 <__aeabi_dcmpun+0x26>
 8080b4c:	f04f 0000 	mov.w	r0, #0
 8080b50:	4770      	bx	lr
 8080b52:	f04f 0001 	mov.w	r0, #1
 8080b56:	4770      	bx	lr

08080b58 <__aeabi_d2iz>:
 8080b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8080b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8080b60:	d215      	bcs.n	8080b8e <__aeabi_d2iz+0x36>
 8080b62:	d511      	bpl.n	8080b88 <__aeabi_d2iz+0x30>
 8080b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8080b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8080b6c:	d912      	bls.n	8080b94 <__aeabi_d2iz+0x3c>
 8080b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8080b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8080b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8080b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8080b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8080b82:	bf18      	it	ne
 8080b84:	4240      	negne	r0, r0
 8080b86:	4770      	bx	lr
 8080b88:	f04f 0000 	mov.w	r0, #0
 8080b8c:	4770      	bx	lr
 8080b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8080b92:	d105      	bne.n	8080ba0 <__aeabi_d2iz+0x48>
 8080b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8080b98:	bf08      	it	eq
 8080b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8080b9e:	4770      	bx	lr
 8080ba0:	f04f 0000 	mov.w	r0, #0
 8080ba4:	4770      	bx	lr
 8080ba6:	bf00      	nop

08080ba8 <__aeabi_uldivmod>:
 8080ba8:	b953      	cbnz	r3, 8080bc0 <__aeabi_uldivmod+0x18>
 8080baa:	b94a      	cbnz	r2, 8080bc0 <__aeabi_uldivmod+0x18>
 8080bac:	2900      	cmp	r1, #0
 8080bae:	bf08      	it	eq
 8080bb0:	2800      	cmpeq	r0, #0
 8080bb2:	bf1c      	itt	ne
 8080bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8080bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8080bbc:	f000 b970 	b.w	8080ea0 <__aeabi_idiv0>
 8080bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8080bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080bc8:	f000 f806 	bl	8080bd8 <__udivmoddi4>
 8080bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080bd4:	b004      	add	sp, #16
 8080bd6:	4770      	bx	lr

08080bd8 <__udivmoddi4>:
 8080bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080bdc:	9e08      	ldr	r6, [sp, #32]
 8080bde:	460d      	mov	r5, r1
 8080be0:	4604      	mov	r4, r0
 8080be2:	460f      	mov	r7, r1
 8080be4:	2b00      	cmp	r3, #0
 8080be6:	d14a      	bne.n	8080c7e <__udivmoddi4+0xa6>
 8080be8:	428a      	cmp	r2, r1
 8080bea:	4694      	mov	ip, r2
 8080bec:	d965      	bls.n	8080cba <__udivmoddi4+0xe2>
 8080bee:	fab2 f382 	clz	r3, r2
 8080bf2:	b143      	cbz	r3, 8080c06 <__udivmoddi4+0x2e>
 8080bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8080bf8:	f1c3 0220 	rsb	r2, r3, #32
 8080bfc:	409f      	lsls	r7, r3
 8080bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8080c02:	4317      	orrs	r7, r2
 8080c04:	409c      	lsls	r4, r3
 8080c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8080c0a:	fa1f f58c 	uxth.w	r5, ip
 8080c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8080c12:	0c22      	lsrs	r2, r4, #16
 8080c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8080c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8080c1c:	fb01 f005 	mul.w	r0, r1, r5
 8080c20:	4290      	cmp	r0, r2
 8080c22:	d90a      	bls.n	8080c3a <__udivmoddi4+0x62>
 8080c24:	eb1c 0202 	adds.w	r2, ip, r2
 8080c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8080c2c:	f080 811c 	bcs.w	8080e68 <__udivmoddi4+0x290>
 8080c30:	4290      	cmp	r0, r2
 8080c32:	f240 8119 	bls.w	8080e68 <__udivmoddi4+0x290>
 8080c36:	3902      	subs	r1, #2
 8080c38:	4462      	add	r2, ip
 8080c3a:	1a12      	subs	r2, r2, r0
 8080c3c:	b2a4      	uxth	r4, r4
 8080c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8080c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8080c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080c4a:	fb00 f505 	mul.w	r5, r0, r5
 8080c4e:	42a5      	cmp	r5, r4
 8080c50:	d90a      	bls.n	8080c68 <__udivmoddi4+0x90>
 8080c52:	eb1c 0404 	adds.w	r4, ip, r4
 8080c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8080c5a:	f080 8107 	bcs.w	8080e6c <__udivmoddi4+0x294>
 8080c5e:	42a5      	cmp	r5, r4
 8080c60:	f240 8104 	bls.w	8080e6c <__udivmoddi4+0x294>
 8080c64:	4464      	add	r4, ip
 8080c66:	3802      	subs	r0, #2
 8080c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8080c6c:	1b64      	subs	r4, r4, r5
 8080c6e:	2100      	movs	r1, #0
 8080c70:	b11e      	cbz	r6, 8080c7a <__udivmoddi4+0xa2>
 8080c72:	40dc      	lsrs	r4, r3
 8080c74:	2300      	movs	r3, #0
 8080c76:	e9c6 4300 	strd	r4, r3, [r6]
 8080c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080c7e:	428b      	cmp	r3, r1
 8080c80:	d908      	bls.n	8080c94 <__udivmoddi4+0xbc>
 8080c82:	2e00      	cmp	r6, #0
 8080c84:	f000 80ed 	beq.w	8080e62 <__udivmoddi4+0x28a>
 8080c88:	2100      	movs	r1, #0
 8080c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8080c8e:	4608      	mov	r0, r1
 8080c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080c94:	fab3 f183 	clz	r1, r3
 8080c98:	2900      	cmp	r1, #0
 8080c9a:	d149      	bne.n	8080d30 <__udivmoddi4+0x158>
 8080c9c:	42ab      	cmp	r3, r5
 8080c9e:	d302      	bcc.n	8080ca6 <__udivmoddi4+0xce>
 8080ca0:	4282      	cmp	r2, r0
 8080ca2:	f200 80f8 	bhi.w	8080e96 <__udivmoddi4+0x2be>
 8080ca6:	1a84      	subs	r4, r0, r2
 8080ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8080cac:	2001      	movs	r0, #1
 8080cae:	4617      	mov	r7, r2
 8080cb0:	2e00      	cmp	r6, #0
 8080cb2:	d0e2      	beq.n	8080c7a <__udivmoddi4+0xa2>
 8080cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8080cb8:	e7df      	b.n	8080c7a <__udivmoddi4+0xa2>
 8080cba:	b902      	cbnz	r2, 8080cbe <__udivmoddi4+0xe6>
 8080cbc:	deff      	udf	#255	; 0xff
 8080cbe:	fab2 f382 	clz	r3, r2
 8080cc2:	2b00      	cmp	r3, #0
 8080cc4:	f040 8090 	bne.w	8080de8 <__udivmoddi4+0x210>
 8080cc8:	1a8a      	subs	r2, r1, r2
 8080cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080cce:	fa1f fe8c 	uxth.w	lr, ip
 8080cd2:	2101      	movs	r1, #1
 8080cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8080cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8080cdc:	0c22      	lsrs	r2, r4, #16
 8080cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8080ce2:	fb0e f005 	mul.w	r0, lr, r5
 8080ce6:	4290      	cmp	r0, r2
 8080ce8:	d908      	bls.n	8080cfc <__udivmoddi4+0x124>
 8080cea:	eb1c 0202 	adds.w	r2, ip, r2
 8080cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8080cf2:	d202      	bcs.n	8080cfa <__udivmoddi4+0x122>
 8080cf4:	4290      	cmp	r0, r2
 8080cf6:	f200 80cb 	bhi.w	8080e90 <__udivmoddi4+0x2b8>
 8080cfa:	4645      	mov	r5, r8
 8080cfc:	1a12      	subs	r2, r2, r0
 8080cfe:	b2a4      	uxth	r4, r4
 8080d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8080d04:	fb07 2210 	mls	r2, r7, r0, r2
 8080d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8080d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8080d10:	45a6      	cmp	lr, r4
 8080d12:	d908      	bls.n	8080d26 <__udivmoddi4+0x14e>
 8080d14:	eb1c 0404 	adds.w	r4, ip, r4
 8080d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8080d1c:	d202      	bcs.n	8080d24 <__udivmoddi4+0x14c>
 8080d1e:	45a6      	cmp	lr, r4
 8080d20:	f200 80bb 	bhi.w	8080e9a <__udivmoddi4+0x2c2>
 8080d24:	4610      	mov	r0, r2
 8080d26:	eba4 040e 	sub.w	r4, r4, lr
 8080d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8080d2e:	e79f      	b.n	8080c70 <__udivmoddi4+0x98>
 8080d30:	f1c1 0720 	rsb	r7, r1, #32
 8080d34:	408b      	lsls	r3, r1
 8080d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8080d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8080d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8080d42:	fa20 f307 	lsr.w	r3, r0, r7
 8080d46:	40fd      	lsrs	r5, r7
 8080d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8080d4c:	4323      	orrs	r3, r4
 8080d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8080d52:	fa1f fe8c 	uxth.w	lr, ip
 8080d56:	fb09 5518 	mls	r5, r9, r8, r5
 8080d5a:	0c1c      	lsrs	r4, r3, #16
 8080d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8080d60:	fb08 f50e 	mul.w	r5, r8, lr
 8080d64:	42a5      	cmp	r5, r4
 8080d66:	fa02 f201 	lsl.w	r2, r2, r1
 8080d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8080d6e:	d90b      	bls.n	8080d88 <__udivmoddi4+0x1b0>
 8080d70:	eb1c 0404 	adds.w	r4, ip, r4
 8080d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8080d78:	f080 8088 	bcs.w	8080e8c <__udivmoddi4+0x2b4>
 8080d7c:	42a5      	cmp	r5, r4
 8080d7e:	f240 8085 	bls.w	8080e8c <__udivmoddi4+0x2b4>
 8080d82:	f1a8 0802 	sub.w	r8, r8, #2
 8080d86:	4464      	add	r4, ip
 8080d88:	1b64      	subs	r4, r4, r5
 8080d8a:	b29d      	uxth	r5, r3
 8080d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8080d90:	fb09 4413 	mls	r4, r9, r3, r4
 8080d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8080d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8080d9c:	45a6      	cmp	lr, r4
 8080d9e:	d908      	bls.n	8080db2 <__udivmoddi4+0x1da>
 8080da0:	eb1c 0404 	adds.w	r4, ip, r4
 8080da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8080da8:	d26c      	bcs.n	8080e84 <__udivmoddi4+0x2ac>
 8080daa:	45a6      	cmp	lr, r4
 8080dac:	d96a      	bls.n	8080e84 <__udivmoddi4+0x2ac>
 8080dae:	3b02      	subs	r3, #2
 8080db0:	4464      	add	r4, ip
 8080db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8080db6:	fba3 9502 	umull	r9, r5, r3, r2
 8080dba:	eba4 040e 	sub.w	r4, r4, lr
 8080dbe:	42ac      	cmp	r4, r5
 8080dc0:	46c8      	mov	r8, r9
 8080dc2:	46ae      	mov	lr, r5
 8080dc4:	d356      	bcc.n	8080e74 <__udivmoddi4+0x29c>
 8080dc6:	d053      	beq.n	8080e70 <__udivmoddi4+0x298>
 8080dc8:	b156      	cbz	r6, 8080de0 <__udivmoddi4+0x208>
 8080dca:	ebb0 0208 	subs.w	r2, r0, r8
 8080dce:	eb64 040e 	sbc.w	r4, r4, lr
 8080dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8080dd6:	40ca      	lsrs	r2, r1
 8080dd8:	40cc      	lsrs	r4, r1
 8080dda:	4317      	orrs	r7, r2
 8080ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8080de0:	4618      	mov	r0, r3
 8080de2:	2100      	movs	r1, #0
 8080de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080de8:	f1c3 0120 	rsb	r1, r3, #32
 8080dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8080df0:	fa20 f201 	lsr.w	r2, r0, r1
 8080df4:	fa25 f101 	lsr.w	r1, r5, r1
 8080df8:	409d      	lsls	r5, r3
 8080dfa:	432a      	orrs	r2, r5
 8080dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080e00:	fa1f fe8c 	uxth.w	lr, ip
 8080e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8080e08:	fb07 1510 	mls	r5, r7, r0, r1
 8080e0c:	0c11      	lsrs	r1, r2, #16
 8080e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8080e12:	fb00 f50e 	mul.w	r5, r0, lr
 8080e16:	428d      	cmp	r5, r1
 8080e18:	fa04 f403 	lsl.w	r4, r4, r3
 8080e1c:	d908      	bls.n	8080e30 <__udivmoddi4+0x258>
 8080e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8080e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8080e26:	d22f      	bcs.n	8080e88 <__udivmoddi4+0x2b0>
 8080e28:	428d      	cmp	r5, r1
 8080e2a:	d92d      	bls.n	8080e88 <__udivmoddi4+0x2b0>
 8080e2c:	3802      	subs	r0, #2
 8080e2e:	4461      	add	r1, ip
 8080e30:	1b49      	subs	r1, r1, r5
 8080e32:	b292      	uxth	r2, r2
 8080e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8080e38:	fb07 1115 	mls	r1, r7, r5, r1
 8080e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8080e40:	fb05 f10e 	mul.w	r1, r5, lr
 8080e44:	4291      	cmp	r1, r2
 8080e46:	d908      	bls.n	8080e5a <__udivmoddi4+0x282>
 8080e48:	eb1c 0202 	adds.w	r2, ip, r2
 8080e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8080e50:	d216      	bcs.n	8080e80 <__udivmoddi4+0x2a8>
 8080e52:	4291      	cmp	r1, r2
 8080e54:	d914      	bls.n	8080e80 <__udivmoddi4+0x2a8>
 8080e56:	3d02      	subs	r5, #2
 8080e58:	4462      	add	r2, ip
 8080e5a:	1a52      	subs	r2, r2, r1
 8080e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8080e60:	e738      	b.n	8080cd4 <__udivmoddi4+0xfc>
 8080e62:	4631      	mov	r1, r6
 8080e64:	4630      	mov	r0, r6
 8080e66:	e708      	b.n	8080c7a <__udivmoddi4+0xa2>
 8080e68:	4639      	mov	r1, r7
 8080e6a:	e6e6      	b.n	8080c3a <__udivmoddi4+0x62>
 8080e6c:	4610      	mov	r0, r2
 8080e6e:	e6fb      	b.n	8080c68 <__udivmoddi4+0x90>
 8080e70:	4548      	cmp	r0, r9
 8080e72:	d2a9      	bcs.n	8080dc8 <__udivmoddi4+0x1f0>
 8080e74:	ebb9 0802 	subs.w	r8, r9, r2
 8080e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8080e7c:	3b01      	subs	r3, #1
 8080e7e:	e7a3      	b.n	8080dc8 <__udivmoddi4+0x1f0>
 8080e80:	4645      	mov	r5, r8
 8080e82:	e7ea      	b.n	8080e5a <__udivmoddi4+0x282>
 8080e84:	462b      	mov	r3, r5
 8080e86:	e794      	b.n	8080db2 <__udivmoddi4+0x1da>
 8080e88:	4640      	mov	r0, r8
 8080e8a:	e7d1      	b.n	8080e30 <__udivmoddi4+0x258>
 8080e8c:	46d0      	mov	r8, sl
 8080e8e:	e77b      	b.n	8080d88 <__udivmoddi4+0x1b0>
 8080e90:	3d02      	subs	r5, #2
 8080e92:	4462      	add	r2, ip
 8080e94:	e732      	b.n	8080cfc <__udivmoddi4+0x124>
 8080e96:	4608      	mov	r0, r1
 8080e98:	e70a      	b.n	8080cb0 <__udivmoddi4+0xd8>
 8080e9a:	4464      	add	r4, ip
 8080e9c:	3802      	subs	r0, #2
 8080e9e:	e742      	b.n	8080d26 <__udivmoddi4+0x14e>

08080ea0 <__aeabi_idiv0>:
 8080ea0:	4770      	bx	lr
 8080ea2:	bf00      	nop

08080ea4 <HAL_UARTEx_RxEventCallback>:
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8080ea4:	b580      	push	{r7, lr}
 8080ea6:	b082      	sub	sp, #8
 8080ea8:	af00      	add	r7, sp, #0
 8080eaa:	6078      	str	r0, [r7, #4]
 8080eac:	460b      	mov	r3, r1
 8080eae:	807b      	strh	r3, [r7, #2]
  SIM_RxEvent();
 8080eb0:	f007 f944 	bl	808813c <SIM_RxEvent>
}
 8080eb4:	bf00      	nop
 8080eb6:	3708      	adds	r7, #8
 8080eb8:	46bd      	mov	sp, r7
 8080eba:	bd80      	pop	{r7, pc}

08080ebc <CONTACTOR_READ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CONTACTOR_READ()
{
 8080ebc:	b580      	push	{r7, lr}
 8080ebe:	af00      	add	r7, sp, #0
  IN[0] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8080ec0:	2180      	movs	r1, #128	; 0x80
 8080ec2:	484e      	ldr	r0, [pc, #312]	; (8080ffc <CONTACTOR_READ+0x140>)
 8080ec4:	f002 f9d0 	bl	8083268 <HAL_GPIO_ReadPin>
 8080ec8:	4603      	mov	r3, r0
 8080eca:	2b00      	cmp	r3, #0
 8080ecc:	bf14      	ite	ne
 8080ece:	2301      	movne	r3, #1
 8080ed0:	2300      	moveq	r3, #0
 8080ed2:	b2da      	uxtb	r2, r3
 8080ed4:	4b4a      	ldr	r3, [pc, #296]	; (8081000 <CONTACTOR_READ+0x144>)
 8080ed6:	701a      	strb	r2, [r3, #0]
  IN[1] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8080ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080edc:	4847      	ldr	r0, [pc, #284]	; (8080ffc <CONTACTOR_READ+0x140>)
 8080ede:	f002 f9c3 	bl	8083268 <HAL_GPIO_ReadPin>
 8080ee2:	4603      	mov	r3, r0
 8080ee4:	2b00      	cmp	r3, #0
 8080ee6:	bf14      	ite	ne
 8080ee8:	2301      	movne	r3, #1
 8080eea:	2300      	moveq	r3, #0
 8080eec:	b2da      	uxtb	r2, r3
 8080eee:	4b44      	ldr	r3, [pc, #272]	; (8081000 <CONTACTOR_READ+0x144>)
 8080ef0:	705a      	strb	r2, [r3, #1]
  IN[2] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8080ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8080ef6:	4841      	ldr	r0, [pc, #260]	; (8080ffc <CONTACTOR_READ+0x140>)
 8080ef8:	f002 f9b6 	bl	8083268 <HAL_GPIO_ReadPin>
 8080efc:	4603      	mov	r3, r0
 8080efe:	2b00      	cmp	r3, #0
 8080f00:	bf14      	ite	ne
 8080f02:	2301      	movne	r3, #1
 8080f04:	2300      	moveq	r3, #0
 8080f06:	b2da      	uxtb	r2, r3
 8080f08:	4b3d      	ldr	r3, [pc, #244]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f0a:	709a      	strb	r2, [r3, #2]
  IN[3] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8080f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8080f10:	483a      	ldr	r0, [pc, #232]	; (8080ffc <CONTACTOR_READ+0x140>)
 8080f12:	f002 f9a9 	bl	8083268 <HAL_GPIO_ReadPin>
 8080f16:	4603      	mov	r3, r0
 8080f18:	2b00      	cmp	r3, #0
 8080f1a:	bf14      	ite	ne
 8080f1c:	2301      	movne	r3, #1
 8080f1e:	2300      	moveq	r3, #0
 8080f20:	b2da      	uxtb	r2, r3
 8080f22:	4b37      	ldr	r3, [pc, #220]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f24:	70da      	strb	r2, [r3, #3]
  IN[4] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15);
 8080f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8080f2a:	4834      	ldr	r0, [pc, #208]	; (8080ffc <CONTACTOR_READ+0x140>)
 8080f2c:	f002 f99c 	bl	8083268 <HAL_GPIO_ReadPin>
 8080f30:	4603      	mov	r3, r0
 8080f32:	2b00      	cmp	r3, #0
 8080f34:	bf14      	ite	ne
 8080f36:	2301      	movne	r3, #1
 8080f38:	2300      	moveq	r3, #0
 8080f3a:	b2da      	uxtb	r2, r3
 8080f3c:	4b30      	ldr	r3, [pc, #192]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f3e:	711a      	strb	r2, [r3, #4]
  IN[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8080f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8080f44:	482f      	ldr	r0, [pc, #188]	; (8081004 <CONTACTOR_READ+0x148>)
 8080f46:	f002 f98f 	bl	8083268 <HAL_GPIO_ReadPin>
 8080f4a:	4603      	mov	r3, r0
 8080f4c:	2b00      	cmp	r3, #0
 8080f4e:	bf14      	ite	ne
 8080f50:	2301      	movne	r3, #1
 8080f52:	2300      	moveq	r3, #0
 8080f54:	b2da      	uxtb	r2, r3
 8080f56:	4b2a      	ldr	r3, [pc, #168]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f58:	715a      	strb	r2, [r3, #5]
  IN[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8080f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8080f5e:	4829      	ldr	r0, [pc, #164]	; (8081004 <CONTACTOR_READ+0x148>)
 8080f60:	f002 f982 	bl	8083268 <HAL_GPIO_ReadPin>
 8080f64:	4603      	mov	r3, r0
 8080f66:	2b00      	cmp	r3, #0
 8080f68:	bf14      	ite	ne
 8080f6a:	2301      	movne	r3, #1
 8080f6c:	2300      	moveq	r3, #0
 8080f6e:	b2da      	uxtb	r2, r3
 8080f70:	4b23      	ldr	r3, [pc, #140]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f72:	719a      	strb	r2, [r3, #6]
  IN[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8080f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080f78:	4823      	ldr	r0, [pc, #140]	; (8081008 <CONTACTOR_READ+0x14c>)
 8080f7a:	f002 f975 	bl	8083268 <HAL_GPIO_ReadPin>
 8080f7e:	4603      	mov	r3, r0
 8080f80:	2b00      	cmp	r3, #0
 8080f82:	bf14      	ite	ne
 8080f84:	2301      	movne	r3, #1
 8080f86:	2300      	moveq	r3, #0
 8080f88:	b2da      	uxtb	r2, r3
 8080f8a:	4b1d      	ldr	r3, [pc, #116]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f8c:	71da      	strb	r2, [r3, #7]
  CONTACTOR1 = ~((uint8_t)IN[4] << 3 | (uint8_t)IN[5] << 2 | (uint8_t)IN[6] << 1 | (uint8_t)IN[7]);
 8080f8e:	4b1c      	ldr	r3, [pc, #112]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f90:	791b      	ldrb	r3, [r3, #4]
 8080f92:	00db      	lsls	r3, r3, #3
 8080f94:	b25a      	sxtb	r2, r3
 8080f96:	4b1a      	ldr	r3, [pc, #104]	; (8081000 <CONTACTOR_READ+0x144>)
 8080f98:	795b      	ldrb	r3, [r3, #5]
 8080f9a:	009b      	lsls	r3, r3, #2
 8080f9c:	b25b      	sxtb	r3, r3
 8080f9e:	4313      	orrs	r3, r2
 8080fa0:	b25a      	sxtb	r2, r3
 8080fa2:	4b17      	ldr	r3, [pc, #92]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fa4:	799b      	ldrb	r3, [r3, #6]
 8080fa6:	005b      	lsls	r3, r3, #1
 8080fa8:	b25b      	sxtb	r3, r3
 8080faa:	4313      	orrs	r3, r2
 8080fac:	b25a      	sxtb	r2, r3
 8080fae:	4b14      	ldr	r3, [pc, #80]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fb0:	79db      	ldrb	r3, [r3, #7]
 8080fb2:	b25b      	sxtb	r3, r3
 8080fb4:	4313      	orrs	r3, r2
 8080fb6:	b25b      	sxtb	r3, r3
 8080fb8:	b2db      	uxtb	r3, r3
 8080fba:	43db      	mvns	r3, r3
 8080fbc:	b2da      	uxtb	r2, r3
 8080fbe:	4b13      	ldr	r3, [pc, #76]	; (808100c <CONTACTOR_READ+0x150>)
 8080fc0:	701a      	strb	r2, [r3, #0]
  CONTACTOR2 = ~((uint8_t)IN[0] << 3 | (uint8_t)IN[1] << 2 | (uint8_t)IN[2] << 1 | (uint8_t)IN[3]);
 8080fc2:	4b0f      	ldr	r3, [pc, #60]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fc4:	781b      	ldrb	r3, [r3, #0]
 8080fc6:	00db      	lsls	r3, r3, #3
 8080fc8:	b25a      	sxtb	r2, r3
 8080fca:	4b0d      	ldr	r3, [pc, #52]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fcc:	785b      	ldrb	r3, [r3, #1]
 8080fce:	009b      	lsls	r3, r3, #2
 8080fd0:	b25b      	sxtb	r3, r3
 8080fd2:	4313      	orrs	r3, r2
 8080fd4:	b25a      	sxtb	r2, r3
 8080fd6:	4b0a      	ldr	r3, [pc, #40]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fd8:	789b      	ldrb	r3, [r3, #2]
 8080fda:	005b      	lsls	r3, r3, #1
 8080fdc:	b25b      	sxtb	r3, r3
 8080fde:	4313      	orrs	r3, r2
 8080fe0:	b25a      	sxtb	r2, r3
 8080fe2:	4b07      	ldr	r3, [pc, #28]	; (8081000 <CONTACTOR_READ+0x144>)
 8080fe4:	78db      	ldrb	r3, [r3, #3]
 8080fe6:	b25b      	sxtb	r3, r3
 8080fe8:	4313      	orrs	r3, r2
 8080fea:	b25b      	sxtb	r3, r3
 8080fec:	b2db      	uxtb	r3, r3
 8080fee:	43db      	mvns	r3, r3
 8080ff0:	b2da      	uxtb	r2, r3
 8080ff2:	4b07      	ldr	r3, [pc, #28]	; (8081010 <CONTACTOR_READ+0x154>)
 8080ff4:	701a      	strb	r2, [r3, #0]
}
 8080ff6:	bf00      	nop
 8080ff8:	bd80      	pop	{r7, pc}
 8080ffa:	bf00      	nop
 8080ffc:	40021000 	.word	0x40021000
 8081000:	200007ec 	.word	0x200007ec
 8081004:	40020400 	.word	0x40020400
 8081008:	40020c00 	.word	0x40020c00
 808100c:	200007f4 	.word	0x200007f4
 8081010:	200007f5 	.word	0x200007f5

08081014 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8081014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081018:	b0d7      	sub	sp, #348	; 0x15c
 808101a:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */
  SCB->VTOR = (uint32_t)APP1_START_ADDR;
 808101c:	4b5a      	ldr	r3, [pc, #360]	; (8081188 <main+0x174>)
 808101e:	4a5b      	ldr	r2, [pc, #364]	; (808118c <main+0x178>)
 8081020:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8081022:	f001 f9db 	bl	80823dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8081026:	f000 f8d5 	bl	80811d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 808102a:	f000 fad1 	bl	80815d0 <MX_GPIO_Init>
  MX_DMA_Init();
 808102e:	f000 fa91 	bl	8081554 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8081032:	f000 fa11 	bl	8081458 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8081036:	f000 fa63 	bl	8081500 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 808103a:	f000 fa37 	bl	80814ac <MX_USART3_UART_Init>
  MX_RTC_Init();
 808103e:	f000 f933 	bl	80812a8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8081042:	f000 f9df 	bl	8081404 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 8081046:	f000 f9bd 	bl	80813c4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 808104a:	f006 fd19 	bl	8087a80 <MX_FATFS_Init>
  //SIM_Init(PWR_GPIO_Port, PWR_Pin);

  //HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"\r\nSIM_Init/102	 Connecting\r\n", 28, HAL_MAX_DELAY); // Truy�?n lệnh ATCommnd sang Sim
  //SIM_Config();
  //SIM_GetLocalTime(TimeString);
  HTTP_InfoTypeDef httpInfo = {0};
 808104e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8081052:	22cc      	movs	r2, #204	; 0xcc
 8081054:	2100      	movs	r1, #0
 8081056:	4618      	mov	r0, r3
 8081058:	f007 fe27 	bl	8088caa <memset>
  //SplitTime(&GetMinSec);
  //Set_Time(5, Timeptr->Minute, Timeptr->Second);
  //Set_Alarm(Timeptr->Minute);

  //SIM_GetLocalTime(TimeString);
  sprintf(jsonBuffer,
 808105c:	4b4c      	ldr	r3, [pc, #304]	; (8081190 <main+0x17c>)
 808105e:	681b      	ldr	r3, [r3, #0]
 8081060:	4618      	mov	r0, r3
 8081062:	f7ff fa71 	bl	8080548 <__aeabi_f2d>
 8081066:	4680      	mov	r8, r0
 8081068:	4689      	mov	r9, r1
 808106a:	4b4a      	ldr	r3, [pc, #296]	; (8081194 <main+0x180>)
 808106c:	681b      	ldr	r3, [r3, #0]
 808106e:	4618      	mov	r0, r3
 8081070:	f7ff fa6a 	bl	8080548 <__aeabi_f2d>
 8081074:	4682      	mov	sl, r0
 8081076:	468b      	mov	fp, r1
 8081078:	4b47      	ldr	r3, [pc, #284]	; (8081198 <main+0x184>)
 808107a:	681b      	ldr	r3, [r3, #0]
 808107c:	4618      	mov	r0, r3
 808107e:	f7ff fa63 	bl	8080548 <__aeabi_f2d>
 8081082:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8081086:	4b45      	ldr	r3, [pc, #276]	; (808119c <main+0x188>)
 8081088:	681b      	ldr	r3, [r3, #0]
 808108a:	4618      	mov	r0, r3
 808108c:	f7ff fa5c 	bl	8080548 <__aeabi_f2d>
 8081090:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8081094:	4b42      	ldr	r3, [pc, #264]	; (80811a0 <main+0x18c>)
 8081096:	681b      	ldr	r3, [r3, #0]
 8081098:	4618      	mov	r0, r3
 808109a:	f7ff fa55 	bl	8080548 <__aeabi_f2d>
 808109e:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80810a2:	4b40      	ldr	r3, [pc, #256]	; (80811a4 <main+0x190>)
 80810a4:	681b      	ldr	r3, [r3, #0]
 80810a6:	4618      	mov	r0, r3
 80810a8:	f7ff fa4e 	bl	8080548 <__aeabi_f2d>
 80810ac:	4604      	mov	r4, r0
 80810ae:	460d      	mov	r5, r1
 80810b0:	4b3d      	ldr	r3, [pc, #244]	; (80811a8 <main+0x194>)
 80810b2:	881b      	ldrh	r3, [r3, #0]
 80810b4:	617b      	str	r3, [r7, #20]
 80810b6:	4b3d      	ldr	r3, [pc, #244]	; (80811ac <main+0x198>)
 80810b8:	881b      	ldrh	r3, [r3, #0]
 80810ba:	613b      	str	r3, [r7, #16]
          ",\"Coil 1\":\"%u\""
          ",\"Coil 2\":\"%u\""
          ",\"Coil 3\":\"%u\""
          ",\"Coil 4\":\"%u\"}",
          TimeString, phoneNumber, CosFi, Voltage, Current, Frequency, ActivePower, ReactivePower,
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 80810bc:	4b3c      	ldr	r3, [pc, #240]	; (80811b0 <main+0x19c>)
 80810be:	781b      	ldrb	r3, [r3, #0]
 80810c0:	f083 0301 	eor.w	r3, r3, #1
 80810c4:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 80810c6:	60fb      	str	r3, [r7, #12]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 80810c8:	4b39      	ldr	r3, [pc, #228]	; (80811b0 <main+0x19c>)
 80810ca:	785b      	ldrb	r3, [r3, #1]
 80810cc:	f083 0301 	eor.w	r3, r3, #1
 80810d0:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 80810d2:	60bb      	str	r3, [r7, #8]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 80810d4:	4b36      	ldr	r3, [pc, #216]	; (80811b0 <main+0x19c>)
 80810d6:	789b      	ldrb	r3, [r3, #2]
 80810d8:	f083 0301 	eor.w	r3, r3, #1
 80810dc:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 80810de:	607b      	str	r3, [r7, #4]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 80810e0:	4b33      	ldr	r3, [pc, #204]	; (80811b0 <main+0x19c>)
 80810e2:	78db      	ldrb	r3, [r3, #3]
 80810e4:	f083 0301 	eor.w	r3, r3, #1
 80810e8:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 80810ea:	461e      	mov	r6, r3
          (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 80810ec:	4b31      	ldr	r3, [pc, #196]	; (80811b4 <main+0x1a0>)
 80810ee:	78db      	ldrb	r3, [r3, #3]
  sprintf(jsonBuffer,
 80810f0:	f003 0001 	and.w	r0, r3, #1
          (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 80810f4:	4b2f      	ldr	r3, [pc, #188]	; (80811b4 <main+0x1a0>)
 80810f6:	78db      	ldrb	r3, [r3, #3]
 80810f8:	105b      	asrs	r3, r3, #1
  sprintf(jsonBuffer,
 80810fa:	f003 0101 	and.w	r1, r3, #1
          ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 80810fe:	4b2d      	ldr	r3, [pc, #180]	; (80811b4 <main+0x1a0>)
 8081100:	78db      	ldrb	r3, [r3, #3]
 8081102:	109b      	asrs	r3, r3, #2
  sprintf(jsonBuffer,
 8081104:	f003 0201 	and.w	r2, r3, #1
          ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081108:	4b2a      	ldr	r3, [pc, #168]	; (80811b4 <main+0x1a0>)
 808110a:	78db      	ldrb	r3, [r3, #3]
 808110c:	10db      	asrs	r3, r3, #3
  sprintf(jsonBuffer,
 808110e:	f003 0301 	and.w	r3, r3, #1
 8081112:	9315      	str	r3, [sp, #84]	; 0x54
 8081114:	9214      	str	r2, [sp, #80]	; 0x50
 8081116:	9113      	str	r1, [sp, #76]	; 0x4c
 8081118:	9012      	str	r0, [sp, #72]	; 0x48
 808111a:	9611      	str	r6, [sp, #68]	; 0x44
 808111c:	687a      	ldr	r2, [r7, #4]
 808111e:	9210      	str	r2, [sp, #64]	; 0x40
 8081120:	68ba      	ldr	r2, [r7, #8]
 8081122:	920f      	str	r2, [sp, #60]	; 0x3c
 8081124:	68fa      	ldr	r2, [r7, #12]
 8081126:	920e      	str	r2, [sp, #56]	; 0x38
 8081128:	693a      	ldr	r2, [r7, #16]
 808112a:	920d      	str	r2, [sp, #52]	; 0x34
 808112c:	697b      	ldr	r3, [r7, #20]
 808112e:	930c      	str	r3, [sp, #48]	; 0x30
 8081130:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8081134:	ed97 7b06 	vldr	d7, [r7, #24]
 8081138:	ed8d 7b08 	vstr	d7, [sp, #32]
 808113c:	ed97 7b08 	vldr	d7, [r7, #32]
 8081140:	ed8d 7b06 	vstr	d7, [sp, #24]
 8081144:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8081148:	ed8d 7b04 	vstr	d7, [sp, #16]
 808114c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8081150:	e9cd 8900 	strd	r8, r9, [sp]
 8081154:	4b18      	ldr	r3, [pc, #96]	; (80811b8 <main+0x1a4>)
 8081156:	4a19      	ldr	r2, [pc, #100]	; (80811bc <main+0x1a8>)
 8081158:	4919      	ldr	r1, [pc, #100]	; (80811c0 <main+0x1ac>)
 808115a:	481a      	ldr	r0, [pc, #104]	; (80811c4 <main+0x1b0>)
 808115c:	f007 fd42 	bl	8088be4 <siprintf>
  //SIM_HTTP_POST(
  //   "https://capacitor-129e8-default-rtdb.firebaseio.com/testA.json",
  //    "application/json", jsonBuffer, &httpInfo);

  HAL_UART_Receive_IT(&huart2, (uint8_t *)jsonBuffer, 8);
 8081160:	2208      	movs	r2, #8
 8081162:	4918      	ldr	r1, [pc, #96]	; (80811c4 <main+0x1b0>)
 8081164:	4818      	ldr	r0, [pc, #96]	; (80811c8 <main+0x1b4>)
 8081166:	f004 fda0 	bl	8085caa <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 808116a:	2201      	movs	r2, #1
 808116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8081170:	4816      	ldr	r0, [pc, #88]	; (80811cc <main+0x1b8>)
 8081172:	f002 f891 	bl	8083298 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8081176:	2201      	movs	r2, #1
 8081178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 808117c:	4814      	ldr	r0, [pc, #80]	; (80811d0 <main+0x1bc>)
 808117e:	f002 f88b 	bl	8083298 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    //SMS_process();
    SendDataToServer();
 8081182:	f000 fb2f 	bl	80817e4 <SendDataToServer>
 8081186:	e7fc      	b.n	8081182 <main+0x16e>
 8081188:	e000ed00 	.word	0xe000ed00
 808118c:	08080000 	.word	0x08080000
 8081190:	20000008 	.word	0x20000008
 8081194:	20000010 	.word	0x20000010
 8081198:	2000000c 	.word	0x2000000c
 808119c:	2000001c 	.word	0x2000001c
 80811a0:	20000014 	.word	0x20000014
 80811a4:	20000018 	.word	0x20000018
 80811a8:	200007f6 	.word	0x200007f6
 80811ac:	200007f8 	.word	0x200007f8
 80811b0:	200007ec 	.word	0x200007ec
 80811b4:	2000059c 	.word	0x2000059c
 80811b8:	20000a6c 	.word	0x20000a6c
 80811bc:	20000a54 	.word	0x20000a54
 80811c0:	0808aee8 	.word	0x0808aee8
 80811c4:	200005bc 	.word	0x200005bc
 80811c8:	20000358 	.word	0x20000358
 80811cc:	40020000 	.word	0x40020000
 80811d0:	40020800 	.word	0x40020800

080811d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80811d4:	b580      	push	{r7, lr}
 80811d6:	b094      	sub	sp, #80	; 0x50
 80811d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80811da:	f107 0320 	add.w	r3, r7, #32
 80811de:	2230      	movs	r2, #48	; 0x30
 80811e0:	2100      	movs	r1, #0
 80811e2:	4618      	mov	r0, r3
 80811e4:	f007 fd61 	bl	8088caa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80811e8:	f107 030c 	add.w	r3, r7, #12
 80811ec:	2200      	movs	r2, #0
 80811ee:	601a      	str	r2, [r3, #0]
 80811f0:	605a      	str	r2, [r3, #4]
 80811f2:	609a      	str	r2, [r3, #8]
 80811f4:	60da      	str	r2, [r3, #12]
 80811f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80811f8:	2300      	movs	r3, #0
 80811fa:	60bb      	str	r3, [r7, #8]
 80811fc:	4b28      	ldr	r3, [pc, #160]	; (80812a0 <SystemClock_Config+0xcc>)
 80811fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081200:	4a27      	ldr	r2, [pc, #156]	; (80812a0 <SystemClock_Config+0xcc>)
 8081202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8081206:	6413      	str	r3, [r2, #64]	; 0x40
 8081208:	4b25      	ldr	r3, [pc, #148]	; (80812a0 <SystemClock_Config+0xcc>)
 808120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808120c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8081210:	60bb      	str	r3, [r7, #8]
 8081212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8081214:	2300      	movs	r3, #0
 8081216:	607b      	str	r3, [r7, #4]
 8081218:	4b22      	ldr	r3, [pc, #136]	; (80812a4 <SystemClock_Config+0xd0>)
 808121a:	681b      	ldr	r3, [r3, #0]
 808121c:	4a21      	ldr	r2, [pc, #132]	; (80812a4 <SystemClock_Config+0xd0>)
 808121e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8081222:	6013      	str	r3, [r2, #0]
 8081224:	4b1f      	ldr	r3, [pc, #124]	; (80812a4 <SystemClock_Config+0xd0>)
 8081226:	681b      	ldr	r3, [r3, #0]
 8081228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808122c:	607b      	str	r3, [r7, #4]
 808122e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8081230:	2309      	movs	r3, #9
 8081232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8081234:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8081238:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 808123a:	2301      	movs	r3, #1
 808123c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 808123e:	2302      	movs	r3, #2
 8081240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8081242:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8081246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8081248:	2304      	movs	r3, #4
 808124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 808124c:	2348      	movs	r3, #72	; 0x48
 808124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8081250:	2302      	movs	r3, #2
 8081252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8081254:	2303      	movs	r3, #3
 8081256:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8081258:	f107 0320 	add.w	r3, r7, #32
 808125c:	4618      	mov	r0, r3
 808125e:	f002 f835 	bl	80832cc <HAL_RCC_OscConfig>
 8081262:	4603      	mov	r3, r0
 8081264:	2b00      	cmp	r3, #0
 8081266:	d001      	beq.n	808126c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8081268:	f000 fcb0 	bl	8081bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 808126c:	230f      	movs	r3, #15
 808126e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8081270:	2302      	movs	r3, #2
 8081272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8081274:	2300      	movs	r3, #0
 8081276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8081278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 808127c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 808127e:	2300      	movs	r3, #0
 8081280:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8081282:	f107 030c 	add.w	r3, r7, #12
 8081286:	2102      	movs	r1, #2
 8081288:	4618      	mov	r0, r3
 808128a:	f002 fa97 	bl	80837bc <HAL_RCC_ClockConfig>
 808128e:	4603      	mov	r3, r0
 8081290:	2b00      	cmp	r3, #0
 8081292:	d001      	beq.n	8081298 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8081294:	f000 fc9a 	bl	8081bcc <Error_Handler>
  }
}
 8081298:	bf00      	nop
 808129a:	3750      	adds	r7, #80	; 0x50
 808129c:	46bd      	mov	sp, r7
 808129e:	bd80      	pop	{r7, pc}
 80812a0:	40023800 	.word	0x40023800
 80812a4:	40007000 	.word	0x40007000

080812a8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80812a8:	b580      	push	{r7, lr}
 80812aa:	b090      	sub	sp, #64	; 0x40
 80812ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80812ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80812b2:	2200      	movs	r2, #0
 80812b4:	601a      	str	r2, [r3, #0]
 80812b6:	605a      	str	r2, [r3, #4]
 80812b8:	609a      	str	r2, [r3, #8]
 80812ba:	60da      	str	r2, [r3, #12]
 80812bc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80812be:	2300      	movs	r3, #0
 80812c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80812c2:	463b      	mov	r3, r7
 80812c4:	2228      	movs	r2, #40	; 0x28
 80812c6:	2100      	movs	r1, #0
 80812c8:	4618      	mov	r0, r3
 80812ca:	f007 fcee 	bl	8088caa <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80812ce:	4b3a      	ldr	r3, [pc, #232]	; (80813b8 <MX_RTC_Init+0x110>)
 80812d0:	4a3a      	ldr	r2, [pc, #232]	; (80813bc <MX_RTC_Init+0x114>)
 80812d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80812d4:	4b38      	ldr	r3, [pc, #224]	; (80813b8 <MX_RTC_Init+0x110>)
 80812d6:	2200      	movs	r2, #0
 80812d8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80812da:	4b37      	ldr	r3, [pc, #220]	; (80813b8 <MX_RTC_Init+0x110>)
 80812dc:	227f      	movs	r2, #127	; 0x7f
 80812de:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80812e0:	4b35      	ldr	r3, [pc, #212]	; (80813b8 <MX_RTC_Init+0x110>)
 80812e2:	22ff      	movs	r2, #255	; 0xff
 80812e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80812e6:	4b34      	ldr	r3, [pc, #208]	; (80813b8 <MX_RTC_Init+0x110>)
 80812e8:	2200      	movs	r2, #0
 80812ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80812ec:	4b32      	ldr	r3, [pc, #200]	; (80813b8 <MX_RTC_Init+0x110>)
 80812ee:	2200      	movs	r2, #0
 80812f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80812f2:	4b31      	ldr	r3, [pc, #196]	; (80813b8 <MX_RTC_Init+0x110>)
 80812f4:	2200      	movs	r2, #0
 80812f6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80812f8:	482f      	ldr	r0, [pc, #188]	; (80813b8 <MX_RTC_Init+0x110>)
 80812fa:	f002 fd61 	bl	8083dc0 <HAL_RTC_Init>
 80812fe:	4603      	mov	r3, r0
 8081300:	2b00      	cmp	r3, #0
 8081302:	d001      	beq.n	8081308 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8081304:	f000 fc62 	bl	8081bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 20;
 8081308:	2314      	movs	r3, #20
 808130a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 808130e:	2300      	movs	r3, #0
 8081310:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8081314:	2300      	movs	r3, #0
 8081316:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 808131a:	2300      	movs	r3, #0
 808131c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 808131e:	2300      	movs	r3, #0
 8081320:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8081322:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8081326:	2200      	movs	r2, #0
 8081328:	4619      	mov	r1, r3
 808132a:	4823      	ldr	r0, [pc, #140]	; (80813b8 <MX_RTC_Init+0x110>)
 808132c:	f002 fdbe 	bl	8083eac <HAL_RTC_SetTime>
 8081330:	4603      	mov	r3, r0
 8081332:	2b00      	cmp	r3, #0
 8081334:	d001      	beq.n	808133a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8081336:	f000 fc49 	bl	8081bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 808133a:	2303      	movs	r3, #3
 808133c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 8081340:	2304      	movs	r3, #4
 8081342:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 20;
 8081346:	2314      	movs	r3, #20
 8081348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 808134c:	2316      	movs	r3, #22
 808134e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8081352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8081356:	2200      	movs	r2, #0
 8081358:	4619      	mov	r1, r3
 808135a:	4817      	ldr	r0, [pc, #92]	; (80813b8 <MX_RTC_Init+0x110>)
 808135c:	f002 fe40 	bl	8083fe0 <HAL_RTC_SetDate>
 8081360:	4603      	mov	r3, r0
 8081362:	2b00      	cmp	r3, #0
 8081364:	d001      	beq.n	808136a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8081366:	f000 fc31 	bl	8081bcc <Error_Handler>
  }

  /** Enable the Alarm A
   */
  sAlarm.AlarmTime.Hours = 0;
 808136a:	2300      	movs	r3, #0
 808136c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 20;
 808136e:	2314      	movs	r3, #20
 8081370:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8081372:	2300      	movs	r3, #0
 8081374:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8081376:	2300      	movs	r3, #0
 8081378:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 808137a:	2300      	movs	r3, #0
 808137c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 808137e:	2300      	movs	r3, #0
 8081380:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8081382:	4b0f      	ldr	r3, [pc, #60]	; (80813c0 <MX_RTC_Init+0x118>)
 8081384:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8081386:	2300      	movs	r3, #0
 8081388:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 808138a:	2300      	movs	r3, #0
 808138c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 808138e:	2301      	movs	r3, #1
 8081390:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8081394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8081398:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 808139a:	463b      	mov	r3, r7
 808139c:	2200      	movs	r2, #0
 808139e:	4619      	mov	r1, r3
 80813a0:	4805      	ldr	r0, [pc, #20]	; (80813b8 <MX_RTC_Init+0x110>)
 80813a2:	f002 fea1 	bl	80840e8 <HAL_RTC_SetAlarm_IT>
 80813a6:	4603      	mov	r3, r0
 80813a8:	2b00      	cmp	r3, #0
 80813aa:	d001      	beq.n	80813b0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80813ac:	f000 fc0e 	bl	8081bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 80813b0:	bf00      	nop
 80813b2:	3740      	adds	r7, #64	; 0x40
 80813b4:	46bd      	mov	sp, r7
 80813b6:	bd80      	pop	{r7, pc}
 80813b8:	20000270 	.word	0x20000270
 80813bc:	40002800 	.word	0x40002800
 80813c0:	80800080 	.word	0x80800080

080813c4 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80813c4:	b480      	push	{r7}
 80813c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80813c8:	4b0c      	ldr	r3, [pc, #48]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813ca:	4a0d      	ldr	r2, [pc, #52]	; (8081400 <MX_SDIO_SD_Init+0x3c>)
 80813cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80813ce:	4b0b      	ldr	r3, [pc, #44]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813d0:	2200      	movs	r2, #0
 80813d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80813d4:	4b09      	ldr	r3, [pc, #36]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813d6:	2200      	movs	r2, #0
 80813d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80813da:	4b08      	ldr	r3, [pc, #32]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813dc:	2200      	movs	r2, #0
 80813de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80813e0:	4b06      	ldr	r3, [pc, #24]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813e2:	2200      	movs	r2, #0
 80813e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80813e6:	4b05      	ldr	r3, [pc, #20]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813e8:	2200      	movs	r2, #0
 80813ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80813ec:	4b03      	ldr	r3, [pc, #12]	; (80813fc <MX_SDIO_SD_Init+0x38>)
 80813ee:	2200      	movs	r2, #0
 80813f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 80813f2:	bf00      	nop
 80813f4:	46bd      	mov	sp, r7
 80813f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80813fa:	4770      	bx	lr
 80813fc:	20000290 	.word	0x20000290
 8081400:	40012c00 	.word	0x40012c00

08081404 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8081404:	b580      	push	{r7, lr}
 8081406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8081408:	4b11      	ldr	r3, [pc, #68]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 808140a:	4a12      	ldr	r2, [pc, #72]	; (8081454 <MX_USART1_UART_Init+0x50>)
 808140c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 808140e:	4b10      	ldr	r3, [pc, #64]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 8081410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8081414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8081416:	4b0e      	ldr	r3, [pc, #56]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 8081418:	2200      	movs	r2, #0
 808141a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 808141c:	4b0c      	ldr	r3, [pc, #48]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 808141e:	2200      	movs	r2, #0
 8081420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8081422:	4b0b      	ldr	r3, [pc, #44]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 8081424:	2200      	movs	r2, #0
 8081426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8081428:	4b09      	ldr	r3, [pc, #36]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 808142a:	220c      	movs	r2, #12
 808142c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 808142e:	4b08      	ldr	r3, [pc, #32]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 8081430:	2200      	movs	r2, #0
 8081432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8081434:	4b06      	ldr	r3, [pc, #24]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 8081436:	2200      	movs	r2, #0
 8081438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 808143a:	4805      	ldr	r0, [pc, #20]	; (8081450 <MX_USART1_UART_Init+0x4c>)
 808143c:	f004 fab4 	bl	80859a8 <HAL_UART_Init>
 8081440:	4603      	mov	r3, r0
 8081442:	2b00      	cmp	r3, #0
 8081444:	d001      	beq.n	808144a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8081446:	f000 fbc1 	bl	8081bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 808144a:	bf00      	nop
 808144c:	bd80      	pop	{r7, pc}
 808144e:	bf00      	nop
 8081450:	20000314 	.word	0x20000314
 8081454:	40011000 	.word	0x40011000

08081458 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8081458:	b580      	push	{r7, lr}
 808145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 808145c:	4b11      	ldr	r3, [pc, #68]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 808145e:	4a12      	ldr	r2, [pc, #72]	; (80814a8 <MX_USART2_UART_Init+0x50>)
 8081460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8081462:	4b10      	ldr	r3, [pc, #64]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 8081464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8081468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 808146a:	4b0e      	ldr	r3, [pc, #56]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 808146c:	2200      	movs	r2, #0
 808146e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8081470:	4b0c      	ldr	r3, [pc, #48]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 8081472:	2200      	movs	r2, #0
 8081474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8081476:	4b0b      	ldr	r3, [pc, #44]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 8081478:	2200      	movs	r2, #0
 808147a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 808147c:	4b09      	ldr	r3, [pc, #36]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 808147e:	220c      	movs	r2, #12
 8081480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8081482:	4b08      	ldr	r3, [pc, #32]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 8081484:	2200      	movs	r2, #0
 8081486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8081488:	4b06      	ldr	r3, [pc, #24]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 808148a:	2200      	movs	r2, #0
 808148c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 808148e:	4805      	ldr	r0, [pc, #20]	; (80814a4 <MX_USART2_UART_Init+0x4c>)
 8081490:	f004 fa8a 	bl	80859a8 <HAL_UART_Init>
 8081494:	4603      	mov	r3, r0
 8081496:	2b00      	cmp	r3, #0
 8081498:	d001      	beq.n	808149e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 808149a:	f000 fb97 	bl	8081bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 808149e:	bf00      	nop
 80814a0:	bd80      	pop	{r7, pc}
 80814a2:	bf00      	nop
 80814a4:	20000358 	.word	0x20000358
 80814a8:	40004400 	.word	0x40004400

080814ac <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80814ac:	b580      	push	{r7, lr}
 80814ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80814b0:	4b11      	ldr	r3, [pc, #68]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814b2:	4a12      	ldr	r2, [pc, #72]	; (80814fc <MX_USART3_UART_Init+0x50>)
 80814b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80814b6:	4b10      	ldr	r3, [pc, #64]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80814bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80814be:	4b0e      	ldr	r3, [pc, #56]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814c0:	2200      	movs	r2, #0
 80814c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80814c4:	4b0c      	ldr	r3, [pc, #48]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814c6:	2200      	movs	r2, #0
 80814c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80814ca:	4b0b      	ldr	r3, [pc, #44]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814cc:	2200      	movs	r2, #0
 80814ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80814d0:	4b09      	ldr	r3, [pc, #36]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814d2:	220c      	movs	r2, #12
 80814d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80814d6:	4b08      	ldr	r3, [pc, #32]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814d8:	2200      	movs	r2, #0
 80814da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80814dc:	4b06      	ldr	r3, [pc, #24]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814de:	2200      	movs	r2, #0
 80814e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80814e2:	4805      	ldr	r0, [pc, #20]	; (80814f8 <MX_USART3_UART_Init+0x4c>)
 80814e4:	f004 fa60 	bl	80859a8 <HAL_UART_Init>
 80814e8:	4603      	mov	r3, r0
 80814ea:	2b00      	cmp	r3, #0
 80814ec:	d001      	beq.n	80814f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80814ee:	f000 fb6d 	bl	8081bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80814f2:	bf00      	nop
 80814f4:	bd80      	pop	{r7, pc}
 80814f6:	bf00      	nop
 80814f8:	2000039c 	.word	0x2000039c
 80814fc:	40004800 	.word	0x40004800

08081500 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8081500:	b580      	push	{r7, lr}
 8081502:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8081504:	4b11      	ldr	r3, [pc, #68]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081506:	4a12      	ldr	r2, [pc, #72]	; (8081550 <MX_USART6_UART_Init+0x50>)
 8081508:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 808150a:	4b10      	ldr	r3, [pc, #64]	; (808154c <MX_USART6_UART_Init+0x4c>)
 808150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8081510:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8081512:	4b0e      	ldr	r3, [pc, #56]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081514:	2200      	movs	r2, #0
 8081516:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8081518:	4b0c      	ldr	r3, [pc, #48]	; (808154c <MX_USART6_UART_Init+0x4c>)
 808151a:	2200      	movs	r2, #0
 808151c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 808151e:	4b0b      	ldr	r3, [pc, #44]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081520:	2200      	movs	r2, #0
 8081522:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8081524:	4b09      	ldr	r3, [pc, #36]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081526:	220c      	movs	r2, #12
 8081528:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 808152a:	4b08      	ldr	r3, [pc, #32]	; (808154c <MX_USART6_UART_Init+0x4c>)
 808152c:	2200      	movs	r2, #0
 808152e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8081530:	4b06      	ldr	r3, [pc, #24]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081532:	2200      	movs	r2, #0
 8081534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8081536:	4805      	ldr	r0, [pc, #20]	; (808154c <MX_USART6_UART_Init+0x4c>)
 8081538:	f004 fa36 	bl	80859a8 <HAL_UART_Init>
 808153c:	4603      	mov	r3, r0
 808153e:	2b00      	cmp	r3, #0
 8081540:	d001      	beq.n	8081546 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8081542:	f000 fb43 	bl	8081bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 8081546:	bf00      	nop
 8081548:	bd80      	pop	{r7, pc}
 808154a:	bf00      	nop
 808154c:	200003e0 	.word	0x200003e0
 8081550:	40011400 	.word	0x40011400

08081554 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8081554:	b580      	push	{r7, lr}
 8081556:	b082      	sub	sp, #8
 8081558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 808155a:	2300      	movs	r3, #0
 808155c:	607b      	str	r3, [r7, #4]
 808155e:	4b1b      	ldr	r3, [pc, #108]	; (80815cc <MX_DMA_Init+0x78>)
 8081560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081562:	4a1a      	ldr	r2, [pc, #104]	; (80815cc <MX_DMA_Init+0x78>)
 8081564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8081568:	6313      	str	r3, [r2, #48]	; 0x30
 808156a:	4b18      	ldr	r3, [pc, #96]	; (80815cc <MX_DMA_Init+0x78>)
 808156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8081572:	607b      	str	r3, [r7, #4]
 8081574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8081576:	2300      	movs	r3, #0
 8081578:	603b      	str	r3, [r7, #0]
 808157a:	4b14      	ldr	r3, [pc, #80]	; (80815cc <MX_DMA_Init+0x78>)
 808157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808157e:	4a13      	ldr	r2, [pc, #76]	; (80815cc <MX_DMA_Init+0x78>)
 8081580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8081584:	6313      	str	r3, [r2, #48]	; 0x30
 8081586:	4b11      	ldr	r3, [pc, #68]	; (80815cc <MX_DMA_Init+0x78>)
 8081588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808158e:	603b      	str	r3, [r7, #0]
 8081590:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8081592:	2200      	movs	r2, #0
 8081594:	2100      	movs	r1, #0
 8081596:	200c      	movs	r0, #12
 8081598:	f001 f891 	bl	80826be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 808159c:	200c      	movs	r0, #12
 808159e:	f001 f8aa 	bl	80826f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80815a2:	2200      	movs	r2, #0
 80815a4:	2100      	movs	r1, #0
 80815a6:	2010      	movs	r0, #16
 80815a8:	f001 f889 	bl	80826be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80815ac:	2010      	movs	r0, #16
 80815ae:	f001 f8a2 	bl	80826f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80815b2:	2200      	movs	r2, #0
 80815b4:	2100      	movs	r1, #0
 80815b6:	203a      	movs	r0, #58	; 0x3a
 80815b8:	f001 f881 	bl	80826be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80815bc:	203a      	movs	r0, #58	; 0x3a
 80815be:	f001 f89a 	bl	80826f6 <HAL_NVIC_EnableIRQ>
}
 80815c2:	bf00      	nop
 80815c4:	3708      	adds	r7, #8
 80815c6:	46bd      	mov	sp, r7
 80815c8:	bd80      	pop	{r7, pc}
 80815ca:	bf00      	nop
 80815cc:	40023800 	.word	0x40023800

080815d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80815d0:	b580      	push	{r7, lr}
 80815d2:	b08c      	sub	sp, #48	; 0x30
 80815d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80815d6:	f107 031c 	add.w	r3, r7, #28
 80815da:	2200      	movs	r2, #0
 80815dc:	601a      	str	r2, [r3, #0]
 80815de:	605a      	str	r2, [r3, #4]
 80815e0:	609a      	str	r2, [r3, #8]
 80815e2:	60da      	str	r2, [r3, #12]
 80815e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80815e6:	2300      	movs	r3, #0
 80815e8:	61bb      	str	r3, [r7, #24]
 80815ea:	4b6c      	ldr	r3, [pc, #432]	; (808179c <MX_GPIO_Init+0x1cc>)
 80815ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815ee:	4a6b      	ldr	r2, [pc, #428]	; (808179c <MX_GPIO_Init+0x1cc>)
 80815f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80815f4:	6313      	str	r3, [r2, #48]	; 0x30
 80815f6:	4b69      	ldr	r3, [pc, #420]	; (808179c <MX_GPIO_Init+0x1cc>)
 80815f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80815fe:	61bb      	str	r3, [r7, #24]
 8081600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8081602:	2300      	movs	r3, #0
 8081604:	617b      	str	r3, [r7, #20]
 8081606:	4b65      	ldr	r3, [pc, #404]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808160a:	4a64      	ldr	r2, [pc, #400]	; (808179c <MX_GPIO_Init+0x1cc>)
 808160c:	f043 0304 	orr.w	r3, r3, #4
 8081610:	6313      	str	r3, [r2, #48]	; 0x30
 8081612:	4b62      	ldr	r3, [pc, #392]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081616:	f003 0304 	and.w	r3, r3, #4
 808161a:	617b      	str	r3, [r7, #20]
 808161c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 808161e:	2300      	movs	r3, #0
 8081620:	613b      	str	r3, [r7, #16]
 8081622:	4b5e      	ldr	r3, [pc, #376]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081626:	4a5d      	ldr	r2, [pc, #372]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081628:	f043 0301 	orr.w	r3, r3, #1
 808162c:	6313      	str	r3, [r2, #48]	; 0x30
 808162e:	4b5b      	ldr	r3, [pc, #364]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081632:	f003 0301 	and.w	r3, r3, #1
 8081636:	613b      	str	r3, [r7, #16]
 8081638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 808163a:	2300      	movs	r3, #0
 808163c:	60fb      	str	r3, [r7, #12]
 808163e:	4b57      	ldr	r3, [pc, #348]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081642:	4a56      	ldr	r2, [pc, #344]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081644:	f043 0310 	orr.w	r3, r3, #16
 8081648:	6313      	str	r3, [r2, #48]	; 0x30
 808164a:	4b54      	ldr	r3, [pc, #336]	; (808179c <MX_GPIO_Init+0x1cc>)
 808164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808164e:	f003 0310 	and.w	r3, r3, #16
 8081652:	60fb      	str	r3, [r7, #12]
 8081654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8081656:	2300      	movs	r3, #0
 8081658:	60bb      	str	r3, [r7, #8]
 808165a:	4b50      	ldr	r3, [pc, #320]	; (808179c <MX_GPIO_Init+0x1cc>)
 808165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808165e:	4a4f      	ldr	r2, [pc, #316]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081660:	f043 0302 	orr.w	r3, r3, #2
 8081664:	6313      	str	r3, [r2, #48]	; 0x30
 8081666:	4b4d      	ldr	r3, [pc, #308]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808166a:	f003 0302 	and.w	r3, r3, #2
 808166e:	60bb      	str	r3, [r7, #8]
 8081670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8081672:	2300      	movs	r3, #0
 8081674:	607b      	str	r3, [r7, #4]
 8081676:	4b49      	ldr	r3, [pc, #292]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808167a:	4a48      	ldr	r2, [pc, #288]	; (808179c <MX_GPIO_Init+0x1cc>)
 808167c:	f043 0308 	orr.w	r3, r3, #8
 8081680:	6313      	str	r3, [r2, #48]	; 0x30
 8081682:	4b46      	ldr	r3, [pc, #280]	; (808179c <MX_GPIO_Init+0x1cc>)
 8081684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081686:	f003 0308 	and.w	r3, r3, #8
 808168a:	607b      	str	r3, [r7, #4]
 808168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | PWR_Pin | RST_Pin, GPIO_PIN_RESET);
 808168e:	2200      	movs	r2, #0
 8081690:	2138      	movs	r1, #56	; 0x38
 8081692:	4843      	ldr	r0, [pc, #268]	; (80817a0 <MX_GPIO_Init+0x1d0>)
 8081694:	f001 fe00 	bl	8083298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_Pin | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8081698:	2200      	movs	r2, #0
 808169a:	f240 6101 	movw	r1, #1537	; 0x601
 808169e:	4841      	ldr	r0, [pc, #260]	; (80817a4 <MX_GPIO_Init+0x1d4>)
 80816a0:	f001 fdfa 	bl	8083298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | PWRD14_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 80816a4:	2200      	movs	r2, #0
 80816a6:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 80816aa:	483f      	ldr	r0, [pc, #252]	; (80817a8 <MX_GPIO_Init+0x1d8>)
 80816ac:	f001 fdf4 	bl	8083298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 80816b0:	2200      	movs	r2, #0
 80816b2:	2101      	movs	r1, #1
 80816b4:	483d      	ldr	r0, [pc, #244]	; (80817ac <MX_GPIO_Init+0x1dc>)
 80816b6:	f001 fdef 	bl	8083298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PWR_Pin RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | PWR_Pin | RST_Pin;
 80816ba:	2338      	movs	r3, #56	; 0x38
 80816bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80816be:	2301      	movs	r3, #1
 80816c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80816c2:	2300      	movs	r3, #0
 80816c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80816c6:	2300      	movs	r3, #0
 80816c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80816ca:	f107 031c 	add.w	r3, r7, #28
 80816ce:	4619      	mov	r1, r3
 80816d0:	4833      	ldr	r0, [pc, #204]	; (80817a0 <MX_GPIO_Init+0x1d0>)
 80816d2:	f001 fc2d 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = DTR_Pin | GPIO_PIN_9 | GPIO_PIN_10;
 80816d6:	f240 6301 	movw	r3, #1537	; 0x601
 80816da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80816dc:	2301      	movs	r3, #1
 80816de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80816e0:	2300      	movs	r3, #0
 80816e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80816e4:	2300      	movs	r3, #0
 80816e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80816e8:	f107 031c 	add.w	r3, r7, #28
 80816ec:	4619      	mov	r1, r3
 80816ee:	482d      	ldr	r0, [pc, #180]	; (80817a4 <MX_GPIO_Init+0x1d4>)
 80816f0:	f001 fc1e 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_15;
 80816f4:	f64a 2380 	movw	r3, #43648	; 0xaa80
 80816f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80816fa:	2300      	movs	r3, #0
 80816fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80816fe:	2301      	movs	r3, #1
 8081700:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8081702:	f107 031c 	add.w	r3, r7, #28
 8081706:	4619      	mov	r1, r3
 8081708:	4828      	ldr	r0, [pc, #160]	; (80817ac <MX_GPIO_Init+0x1dc>)
 808170a:	f001 fc11 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 808170e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8081712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8081714:	2300      	movs	r3, #0
 8081716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8081718:	2301      	movs	r3, #1
 808171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 808171c:	f107 031c 	add.w	r3, r7, #28
 8081720:	4619      	mov	r1, r3
 8081722:	4823      	ldr	r0, [pc, #140]	; (80817b0 <MX_GPIO_Init+0x1e0>)
 8081724:	f001 fc04 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8081728:	f44f 7300 	mov.w	r3, #512	; 0x200
 808172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 808172e:	2300      	movs	r3, #0
 8081730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8081732:	2301      	movs	r3, #1
 8081734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8081736:	f107 031c 	add.w	r3, r7, #28
 808173a:	4619      	mov	r1, r3
 808173c:	481a      	ldr	r0, [pc, #104]	; (80817a8 <MX_GPIO_Init+0x1d8>)
 808173e:	f001 fbf7 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PWRD14_Pin PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | PWRD14_Pin | GPIO_PIN_15;
 8081742:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8081746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8081748:	2301      	movs	r3, #1
 808174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 808174c:	2300      	movs	r3, #0
 808174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8081750:	2300      	movs	r3, #0
 8081752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8081754:	f107 031c 	add.w	r3, r7, #28
 8081758:	4619      	mov	r1, r3
 808175a:	4813      	ldr	r0, [pc, #76]	; (80817a8 <MX_GPIO_Init+0x1d8>)
 808175c:	f001 fbe8 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8081760:	2380      	movs	r3, #128	; 0x80
 8081762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8081764:	2300      	movs	r3, #0
 8081766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081768:	2300      	movs	r3, #0
 808176a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 808176c:	f107 031c 	add.w	r3, r7, #28
 8081770:	4619      	mov	r1, r3
 8081772:	480d      	ldr	r0, [pc, #52]	; (80817a8 <MX_GPIO_Init+0x1d8>)
 8081774:	f001 fbdc 	bl	8082f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8081778:	2301      	movs	r3, #1
 808177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 808177c:	2301      	movs	r3, #1
 808177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081780:	2300      	movs	r3, #0
 8081782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8081784:	2300      	movs	r3, #0
 8081786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8081788:	f107 031c 	add.w	r3, r7, #28
 808178c:	4619      	mov	r1, r3
 808178e:	4807      	ldr	r0, [pc, #28]	; (80817ac <MX_GPIO_Init+0x1dc>)
 8081790:	f001 fbce 	bl	8082f30 <HAL_GPIO_Init>
}
 8081794:	bf00      	nop
 8081796:	3730      	adds	r7, #48	; 0x30
 8081798:	46bd      	mov	sp, r7
 808179a:	bd80      	pop	{r7, pc}
 808179c:	40023800 	.word	0x40023800
 80817a0:	40020800 	.word	0x40020800
 80817a4:	40020000 	.word	0x40020000
 80817a8:	40020c00 	.word	0x40020c00
 80817ac:	40021000 	.word	0x40021000
 80817b0:	40020400 	.word	0x40020400

080817b4 <HAL_UART_RxCpltCallback>:
  Timeptr->Minute = atoi(q);
  p = strtok(NULL, ":");
  Timeptr->Second = atoi(p);
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80817b4:	b580      	push	{r7, lr}
 80817b6:	b082      	sub	sp, #8
 80817b8:	af00      	add	r7, sp, #0
 80817ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart2.Instance)
 80817bc:	687b      	ldr	r3, [r7, #4]
 80817be:	681a      	ldr	r2, [r3, #0]
 80817c0:	4b06      	ldr	r3, [pc, #24]	; (80817dc <HAL_UART_RxCpltCallback+0x28>)
 80817c2:	681b      	ldr	r3, [r3, #0]
 80817c4:	429a      	cmp	r2, r3
 80817c6:	d104      	bne.n	80817d2 <HAL_UART_RxCpltCallback+0x1e>
  {
    HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_ReceivedBuff, 8);
 80817c8:	2208      	movs	r2, #8
 80817ca:	4905      	ldr	r1, [pc, #20]	; (80817e0 <HAL_UART_RxCpltCallback+0x2c>)
 80817cc:	4803      	ldr	r0, [pc, #12]	; (80817dc <HAL_UART_RxCpltCallback+0x28>)
 80817ce:	f004 fa6c 	bl	8085caa <HAL_UART_Receive_IT>
  }
}
 80817d2:	bf00      	nop
 80817d4:	3708      	adds	r7, #8
 80817d6:	46bd      	mov	sp, r7
 80817d8:	bd80      	pop	{r7, pc}
 80817da:	bf00      	nop
 80817dc:	20000358 	.word	0x20000358
 80817e0:	200005b0 	.word	0x200005b0

080817e4 <SendDataToServer>:
void SendDataToServer()
{
 80817e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80817e8:	b0a3      	sub	sp, #140	; 0x8c
 80817ea:	af16      	add	r7, sp, #88	; 0x58
    //SplitTime(&GetMinSec);
    //if (Timeptr->Minute % 10 == 0)
    {
      //SIM_GetLocalTime(TimeString);
      // Case 1:
      HAL_UART_Transmit(&huart6, (uint8_t *)RTU_CosFi, 8, 1000);
 80817ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80817f0:	2208      	movs	r2, #8
 80817f2:	49af      	ldr	r1, [pc, #700]	; (8081ab0 <SendDataToServer+0x2cc>)
 80817f4:	48af      	ldr	r0, [pc, #700]	; (8081ab4 <SendDataToServer+0x2d0>)
 80817f6:	f004 f924 	bl	8085a42 <HAL_UART_Transmit>
      RS485_Master_Receive(COSF_ReceivedBuff, 9);
 80817fa:	2109      	movs	r1, #9
 80817fc:	48ae      	ldr	r0, [pc, #696]	; (8081ab8 <SendDataToServer+0x2d4>)
 80817fe:	f006 fc25 	bl	808804c <RS485_Master_Receive>
      CosFi = (float)(((uint16_t)COSF_ReceivedBuff[5] << 8) | ((uint16_t)COSF_ReceivedBuff[6])) / 100;
 8081802:	4bad      	ldr	r3, [pc, #692]	; (8081ab8 <SendDataToServer+0x2d4>)
 8081804:	795b      	ldrb	r3, [r3, #5]
 8081806:	021b      	lsls	r3, r3, #8
 8081808:	4aab      	ldr	r2, [pc, #684]	; (8081ab8 <SendDataToServer+0x2d4>)
 808180a:	7992      	ldrb	r2, [r2, #6]
 808180c:	4313      	orrs	r3, r2
 808180e:	ee07 3a90 	vmov	s15, r3
 8081812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8081816:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8081abc <SendDataToServer+0x2d8>
 808181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 808181e:	4ba8      	ldr	r3, [pc, #672]	; (8081ac0 <SendDataToServer+0x2dc>)
 8081820:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081828:	f000 fe4a 	bl	80824c0 <HAL_Delay>
      // Case 2:
      RS485_transmit(&huart6, m_RS485Query2);
 808182c:	4ba5      	ldr	r3, [pc, #660]	; (8081ac4 <SendDataToServer+0x2e0>)
 808182e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081830:	48a0      	ldr	r0, [pc, #640]	; (8081ab4 <SendDataToServer+0x2d0>)
 8081832:	f006 fb81 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(V_ReceivedBuff, 9);
 8081836:	2109      	movs	r1, #9
 8081838:	48a3      	ldr	r0, [pc, #652]	; (8081ac8 <SendDataToServer+0x2e4>)
 808183a:	f006 fc07 	bl	808804c <RS485_Master_Receive>
      Voltage = (float)(((uint16_t)V_ReceivedBuff[5] << 8) | ((uint16_t)V_ReceivedBuff[6]));
 808183e:	4ba2      	ldr	r3, [pc, #648]	; (8081ac8 <SendDataToServer+0x2e4>)
 8081840:	795b      	ldrb	r3, [r3, #5]
 8081842:	021b      	lsls	r3, r3, #8
 8081844:	4aa0      	ldr	r2, [pc, #640]	; (8081ac8 <SendDataToServer+0x2e4>)
 8081846:	7992      	ldrb	r2, [r2, #6]
 8081848:	4313      	orrs	r3, r2
 808184a:	ee07 3a90 	vmov	s15, r3
 808184e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8081852:	4b9e      	ldr	r3, [pc, #632]	; (8081acc <SendDataToServer+0x2e8>)
 8081854:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 808185c:	f000 fe30 	bl	80824c0 <HAL_Delay>
      // Case 3:
      RS485_transmit(&huart6, m_RS485Query3);
 8081860:	4b9b      	ldr	r3, [pc, #620]	; (8081ad0 <SendDataToServer+0x2ec>)
 8081862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081864:	4893      	ldr	r0, [pc, #588]	; (8081ab4 <SendDataToServer+0x2d0>)
 8081866:	f006 fb67 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(I_ReceivedBuff, 9);
 808186a:	2109      	movs	r1, #9
 808186c:	4899      	ldr	r0, [pc, #612]	; (8081ad4 <SendDataToServer+0x2f0>)
 808186e:	f006 fbed 	bl	808804c <RS485_Master_Receive>
      Current = (float)(((uint16_t)I_ReceivedBuff[5] << 8) | ((uint16_t)I_ReceivedBuff[6])) / 100;
 8081872:	4b98      	ldr	r3, [pc, #608]	; (8081ad4 <SendDataToServer+0x2f0>)
 8081874:	795b      	ldrb	r3, [r3, #5]
 8081876:	021b      	lsls	r3, r3, #8
 8081878:	4a96      	ldr	r2, [pc, #600]	; (8081ad4 <SendDataToServer+0x2f0>)
 808187a:	7992      	ldrb	r2, [r2, #6]
 808187c:	4313      	orrs	r3, r2
 808187e:	ee07 3a90 	vmov	s15, r3
 8081882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8081886:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8081abc <SendDataToServer+0x2d8>
 808188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 808188e:	4b92      	ldr	r3, [pc, #584]	; (8081ad8 <SendDataToServer+0x2f4>)
 8081890:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081898:	f000 fe12 	bl	80824c0 <HAL_Delay>
      // Case 4:
      RS485_transmit(&huart6, m_RS485Query4);
 808189c:	4b8f      	ldr	r3, [pc, #572]	; (8081adc <SendDataToServer+0x2f8>)
 808189e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80818a0:	4884      	ldr	r0, [pc, #528]	; (8081ab4 <SendDataToServer+0x2d0>)
 80818a2:	f006 fb49 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(F_ReceivedBuff, 9);
 80818a6:	2109      	movs	r1, #9
 80818a8:	488d      	ldr	r0, [pc, #564]	; (8081ae0 <SendDataToServer+0x2fc>)
 80818aa:	f006 fbcf 	bl	808804c <RS485_Master_Receive>
      Frequency = (float)(((uint16_t)F_ReceivedBuff[5] << 8) | ((uint16_t)F_ReceivedBuff[6])) / 10;
 80818ae:	4b8c      	ldr	r3, [pc, #560]	; (8081ae0 <SendDataToServer+0x2fc>)
 80818b0:	795b      	ldrb	r3, [r3, #5]
 80818b2:	021b      	lsls	r3, r3, #8
 80818b4:	4a8a      	ldr	r2, [pc, #552]	; (8081ae0 <SendDataToServer+0x2fc>)
 80818b6:	7992      	ldrb	r2, [r2, #6]
 80818b8:	4313      	orrs	r3, r2
 80818ba:	ee07 3a90 	vmov	s15, r3
 80818be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80818c2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80818c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80818ca:	4b86      	ldr	r3, [pc, #536]	; (8081ae4 <SendDataToServer+0x300>)
 80818cc:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 80818d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80818d4:	f000 fdf4 	bl	80824c0 <HAL_Delay>
      // Case 5:
      RS485_transmit(&huart6, m_RS485QueryAvQ);
 80818d8:	4b83      	ldr	r3, [pc, #524]	; (8081ae8 <SendDataToServer+0x304>)
 80818da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80818dc:	4875      	ldr	r0, [pc, #468]	; (8081ab4 <SendDataToServer+0x2d0>)
 80818de:	f006 fb2b 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(AvQ_ReceivedBuff, 9);
 80818e2:	2109      	movs	r1, #9
 80818e4:	4881      	ldr	r0, [pc, #516]	; (8081aec <SendDataToServer+0x308>)
 80818e6:	f006 fbb1 	bl	808804c <RS485_Master_Receive>
      AvQ = ((uint16_t)AvQ_ReceivedBuff[5] << 8) | ((uint16_t)AvQ_ReceivedBuff[6]);
 80818ea:	4b80      	ldr	r3, [pc, #512]	; (8081aec <SendDataToServer+0x308>)
 80818ec:	795b      	ldrb	r3, [r3, #5]
 80818ee:	021b      	lsls	r3, r3, #8
 80818f0:	b21a      	sxth	r2, r3
 80818f2:	4b7e      	ldr	r3, [pc, #504]	; (8081aec <SendDataToServer+0x308>)
 80818f4:	799b      	ldrb	r3, [r3, #6]
 80818f6:	b21b      	sxth	r3, r3
 80818f8:	4313      	orrs	r3, r2
 80818fa:	b21b      	sxth	r3, r3
 80818fc:	b29a      	uxth	r2, r3
 80818fe:	4b7c      	ldr	r3, [pc, #496]	; (8081af0 <SendDataToServer+0x30c>)
 8081900:	801a      	strh	r2, [r3, #0]
      HAL_Delay(500);
 8081902:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081906:	f000 fddb 	bl	80824c0 <HAL_Delay>
      // Case 5:
      RS485_transmit(&huart6, m_RS485QueryP);
 808190a:	4b7a      	ldr	r3, [pc, #488]	; (8081af4 <SendDataToServer+0x310>)
 808190c:	cb0e      	ldmia	r3, {r1, r2, r3}
 808190e:	4869      	ldr	r0, [pc, #420]	; (8081ab4 <SendDataToServer+0x2d0>)
 8081910:	f006 fb12 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(P_ReceivedBuff, 9);
 8081914:	2109      	movs	r1, #9
 8081916:	4878      	ldr	r0, [pc, #480]	; (8081af8 <SendDataToServer+0x314>)
 8081918:	f006 fb98 	bl	808804c <RS485_Master_Receive>
      ActivePower = (((uint16_t)P_ReceivedBuff[5] << 8) | ((uint16_t)P_ReceivedBuff[6])) / 1000;
 808191c:	4b76      	ldr	r3, [pc, #472]	; (8081af8 <SendDataToServer+0x314>)
 808191e:	795b      	ldrb	r3, [r3, #5]
 8081920:	021b      	lsls	r3, r3, #8
 8081922:	4a75      	ldr	r2, [pc, #468]	; (8081af8 <SendDataToServer+0x314>)
 8081924:	7992      	ldrb	r2, [r2, #6]
 8081926:	4313      	orrs	r3, r2
 8081928:	4a74      	ldr	r2, [pc, #464]	; (8081afc <SendDataToServer+0x318>)
 808192a:	fb82 1203 	smull	r1, r2, r2, r3
 808192e:	1192      	asrs	r2, r2, #6
 8081930:	17db      	asrs	r3, r3, #31
 8081932:	1ad3      	subs	r3, r2, r3
 8081934:	ee07 3a90 	vmov	s15, r3
 8081938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 808193c:	4b70      	ldr	r3, [pc, #448]	; (8081b00 <SendDataToServer+0x31c>)
 808193e:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081946:	f000 fdbb 	bl	80824c0 <HAL_Delay>
      // Case 7:
      RS485_transmit(&huart6, m_RS485QueryQ);
 808194a:	4b6e      	ldr	r3, [pc, #440]	; (8081b04 <SendDataToServer+0x320>)
 808194c:	cb0e      	ldmia	r3, {r1, r2, r3}
 808194e:	4859      	ldr	r0, [pc, #356]	; (8081ab4 <SendDataToServer+0x2d0>)
 8081950:	f006 faf2 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(Q_ReceivedBuff, 9);
 8081954:	2109      	movs	r1, #9
 8081956:	486c      	ldr	r0, [pc, #432]	; (8081b08 <SendDataToServer+0x324>)
 8081958:	f006 fb78 	bl	808804c <RS485_Master_Receive>
      ReactivePower = (((uint16_t)Q_ReceivedBuff[5] << 8) | ((uint16_t)Q_ReceivedBuff[6])) / 1000;
 808195c:	4b6a      	ldr	r3, [pc, #424]	; (8081b08 <SendDataToServer+0x324>)
 808195e:	795b      	ldrb	r3, [r3, #5]
 8081960:	021b      	lsls	r3, r3, #8
 8081962:	4a69      	ldr	r2, [pc, #420]	; (8081b08 <SendDataToServer+0x324>)
 8081964:	7992      	ldrb	r2, [r2, #6]
 8081966:	4313      	orrs	r3, r2
 8081968:	4a64      	ldr	r2, [pc, #400]	; (8081afc <SendDataToServer+0x318>)
 808196a:	fb82 1203 	smull	r1, r2, r2, r3
 808196e:	1192      	asrs	r2, r2, #6
 8081970:	17db      	asrs	r3, r3, #31
 8081972:	1ad3      	subs	r3, r2, r3
 8081974:	ee07 3a90 	vmov	s15, r3
 8081978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 808197c:	4b63      	ldr	r3, [pc, #396]	; (8081b0c <SendDataToServer+0x328>)
 808197e:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081986:	f000 fd9b 	bl	80824c0 <HAL_Delay>
      // Case 8:
      RS485_transmit(&huart6, m_RS485QueryAvP);
 808198a:	4b61      	ldr	r3, [pc, #388]	; (8081b10 <SendDataToServer+0x32c>)
 808198c:	cb0e      	ldmia	r3, {r1, r2, r3}
 808198e:	4849      	ldr	r0, [pc, #292]	; (8081ab4 <SendDataToServer+0x2d0>)
 8081990:	f006 fad2 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(AvP_ReceivedBuff, 9);
 8081994:	2109      	movs	r1, #9
 8081996:	485f      	ldr	r0, [pc, #380]	; (8081b14 <SendDataToServer+0x330>)
 8081998:	f006 fb58 	bl	808804c <RS485_Master_Receive>
      AvP = ((uint16_t)AvP_ReceivedBuff[5] << 8) | ((uint16_t)AvP_ReceivedBuff[6]);
 808199c:	4b5d      	ldr	r3, [pc, #372]	; (8081b14 <SendDataToServer+0x330>)
 808199e:	795b      	ldrb	r3, [r3, #5]
 80819a0:	021b      	lsls	r3, r3, #8
 80819a2:	b21a      	sxth	r2, r3
 80819a4:	4b5b      	ldr	r3, [pc, #364]	; (8081b14 <SendDataToServer+0x330>)
 80819a6:	799b      	ldrb	r3, [r3, #6]
 80819a8:	b21b      	sxth	r3, r3
 80819aa:	4313      	orrs	r3, r2
 80819ac:	b21b      	sxth	r3, r3
 80819ae:	b29a      	uxth	r2, r3
 80819b0:	4b59      	ldr	r3, [pc, #356]	; (8081b18 <SendDataToServer+0x334>)
 80819b2:	801a      	strh	r2, [r3, #0]
      HAL_Delay(500);
 80819b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80819b8:	f000 fd82 	bl	80824c0 <HAL_Delay>
      ////Case 9:
      CONTACTOR_READ();
 80819bc:	f7ff fa7e 	bl	8080ebc <CONTACTOR_READ>
      RS485_transmit(&huart6, m_RS485Query_coil);
 80819c0:	4b56      	ldr	r3, [pc, #344]	; (8081b1c <SendDataToServer+0x338>)
 80819c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80819c4:	483b      	ldr	r0, [pc, #236]	; (8081ab4 <SendDataToServer+0x2d0>)
 80819c6:	f006 fab7 	bl	8087f38 <RS485_transmit>
      RS485_Master_Receive(coil_ReceivedBuff, 7);
 80819ca:	2107      	movs	r1, #7
 80819cc:	4854      	ldr	r0, [pc, #336]	; (8081b20 <SendDataToServer+0x33c>)
 80819ce:	f006 fb3d 	bl	808804c <RS485_Master_Receive>
      HAL_Delay(500);
 80819d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80819d6:	f000 fd73 	bl	80824c0 <HAL_Delay>
      //		printf("Coil 1: %u\n", (coil_ReceivedBuff[3] &	 0x01));
      //		printf("Coil 2: %u\n", ((coil_ReceivedBuff[3] & 0x02)>>1));
      //		printf("Coil 3: %u\n", ((coil_ReceivedBuff[3] & 0x04)>>2));
      //		printf("Coil 4: %u\n\n", ((coil_ReceivedBuff[3] & 0x08)>>3));
      //		printf("\n");
      sprintf(jsonBuffer,
 80819da:	4b39      	ldr	r3, [pc, #228]	; (8081ac0 <SendDataToServer+0x2dc>)
 80819dc:	681b      	ldr	r3, [r3, #0]
 80819de:	4618      	mov	r0, r3
 80819e0:	f7fe fdb2 	bl	8080548 <__aeabi_f2d>
 80819e4:	4680      	mov	r8, r0
 80819e6:	4689      	mov	r9, r1
 80819e8:	4b38      	ldr	r3, [pc, #224]	; (8081acc <SendDataToServer+0x2e8>)
 80819ea:	681b      	ldr	r3, [r3, #0]
 80819ec:	4618      	mov	r0, r3
 80819ee:	f7fe fdab 	bl	8080548 <__aeabi_f2d>
 80819f2:	4682      	mov	sl, r0
 80819f4:	468b      	mov	fp, r1
 80819f6:	4b38      	ldr	r3, [pc, #224]	; (8081ad8 <SendDataToServer+0x2f4>)
 80819f8:	681b      	ldr	r3, [r3, #0]
 80819fa:	4618      	mov	r0, r3
 80819fc:	f7fe fda4 	bl	8080548 <__aeabi_f2d>
 8081a00:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8081a04:	4b37      	ldr	r3, [pc, #220]	; (8081ae4 <SendDataToServer+0x300>)
 8081a06:	681b      	ldr	r3, [r3, #0]
 8081a08:	4618      	mov	r0, r3
 8081a0a:	f7fe fd9d 	bl	8080548 <__aeabi_f2d>
 8081a0e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8081a12:	4b3b      	ldr	r3, [pc, #236]	; (8081b00 <SendDataToServer+0x31c>)
 8081a14:	681b      	ldr	r3, [r3, #0]
 8081a16:	4618      	mov	r0, r3
 8081a18:	f7fe fd96 	bl	8080548 <__aeabi_f2d>
 8081a1c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8081a20:	4b3a      	ldr	r3, [pc, #232]	; (8081b0c <SendDataToServer+0x328>)
 8081a22:	681b      	ldr	r3, [r3, #0]
 8081a24:	4618      	mov	r0, r3
 8081a26:	f7fe fd8f 	bl	8080548 <__aeabi_f2d>
 8081a2a:	4604      	mov	r4, r0
 8081a2c:	460d      	mov	r5, r1
 8081a2e:	4b3a      	ldr	r3, [pc, #232]	; (8081b18 <SendDataToServer+0x334>)
 8081a30:	881b      	ldrh	r3, [r3, #0]
 8081a32:	617b      	str	r3, [r7, #20]
 8081a34:	4b2e      	ldr	r3, [pc, #184]	; (8081af0 <SendDataToServer+0x30c>)
 8081a36:	881b      	ldrh	r3, [r3, #0]
 8081a38:	613b      	str	r3, [r7, #16]
              ",\"Coil 1\":\"%u\""
              ",\"Coil 2\":\"%u\""
              ",\"Coil 3\":\"%u\""
              ",\"Coil 4\":\"%u\"}",
              TimeString, phoneNumber, CosFi, Voltage, Current, Frequency, ActivePower, ReactivePower,
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081a3a:	4b3a      	ldr	r3, [pc, #232]	; (8081b24 <SendDataToServer+0x340>)
 8081a3c:	781b      	ldrb	r3, [r3, #0]
 8081a3e:	f083 0301 	eor.w	r3, r3, #1
 8081a42:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081a44:	60fb      	str	r3, [r7, #12]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081a46:	4b37      	ldr	r3, [pc, #220]	; (8081b24 <SendDataToServer+0x340>)
 8081a48:	785b      	ldrb	r3, [r3, #1]
 8081a4a:	f083 0301 	eor.w	r3, r3, #1
 8081a4e:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081a50:	60bb      	str	r3, [r7, #8]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081a52:	4b34      	ldr	r3, [pc, #208]	; (8081b24 <SendDataToServer+0x340>)
 8081a54:	789b      	ldrb	r3, [r3, #2]
 8081a56:	f083 0301 	eor.w	r3, r3, #1
 8081a5a:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081a5c:	607b      	str	r3, [r7, #4]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081a5e:	4b31      	ldr	r3, [pc, #196]	; (8081b24 <SendDataToServer+0x340>)
 8081a60:	78db      	ldrb	r3, [r3, #3]
 8081a62:	f083 0301 	eor.w	r3, r3, #1
 8081a66:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081a68:	461e      	mov	r6, r3
              (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081a6a:	4b2d      	ldr	r3, [pc, #180]	; (8081b20 <SendDataToServer+0x33c>)
 8081a6c:	78db      	ldrb	r3, [r3, #3]
      sprintf(jsonBuffer,
 8081a6e:	f003 0001 	and.w	r0, r3, #1
              (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081a72:	4b2b      	ldr	r3, [pc, #172]	; (8081b20 <SendDataToServer+0x33c>)
 8081a74:	78db      	ldrb	r3, [r3, #3]
 8081a76:	105b      	asrs	r3, r3, #1
      sprintf(jsonBuffer,
 8081a78:	f003 0101 	and.w	r1, r3, #1
              ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081a7c:	4b28      	ldr	r3, [pc, #160]	; (8081b20 <SendDataToServer+0x33c>)
 8081a7e:	78db      	ldrb	r3, [r3, #3]
 8081a80:	109b      	asrs	r3, r3, #2
      sprintf(jsonBuffer,
 8081a82:	f003 0201 	and.w	r2, r3, #1
              ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081a86:	4b26      	ldr	r3, [pc, #152]	; (8081b20 <SendDataToServer+0x33c>)
 8081a88:	78db      	ldrb	r3, [r3, #3]
 8081a8a:	10db      	asrs	r3, r3, #3
      sprintf(jsonBuffer,
 8081a8c:	f003 0301 	and.w	r3, r3, #1
 8081a90:	9315      	str	r3, [sp, #84]	; 0x54
 8081a92:	9214      	str	r2, [sp, #80]	; 0x50
 8081a94:	9113      	str	r1, [sp, #76]	; 0x4c
 8081a96:	9012      	str	r0, [sp, #72]	; 0x48
 8081a98:	9611      	str	r6, [sp, #68]	; 0x44
 8081a9a:	687a      	ldr	r2, [r7, #4]
 8081a9c:	9210      	str	r2, [sp, #64]	; 0x40
 8081a9e:	68ba      	ldr	r2, [r7, #8]
 8081aa0:	920f      	str	r2, [sp, #60]	; 0x3c
 8081aa2:	68fa      	ldr	r2, [r7, #12]
 8081aa4:	920e      	str	r2, [sp, #56]	; 0x38
 8081aa6:	693a      	ldr	r2, [r7, #16]
 8081aa8:	920d      	str	r2, [sp, #52]	; 0x34
 8081aaa:	697b      	ldr	r3, [r7, #20]
 8081aac:	930c      	str	r3, [sp, #48]	; 0x30
 8081aae:	e03b      	b.n	8081b28 <SendDataToServer+0x344>
 8081ab0:	20000000 	.word	0x20000000
 8081ab4:	200003e0 	.word	0x200003e0
 8081ab8:	20000548 	.word	0x20000548
 8081abc:	42c80000 	.word	0x42c80000
 8081ac0:	20000008 	.word	0x20000008
 8081ac4:	20000020 	.word	0x20000020
 8081ac8:	20000560 	.word	0x20000560
 8081acc:	20000010 	.word	0x20000010
 8081ad0:	2000002c 	.word	0x2000002c
 8081ad4:	20000554 	.word	0x20000554
 8081ad8:	2000000c 	.word	0x2000000c
 8081adc:	20000038 	.word	0x20000038
 8081ae0:	200005a4 	.word	0x200005a4
 8081ae4:	2000001c 	.word	0x2000001c
 8081ae8:	20000068 	.word	0x20000068
 8081aec:	20000590 	.word	0x20000590
 8081af0:	200007f8 	.word	0x200007f8
 8081af4:	20000044 	.word	0x20000044
 8081af8:	2000056c 	.word	0x2000056c
 8081afc:	10624dd3 	.word	0x10624dd3
 8081b00:	20000014 	.word	0x20000014
 8081b04:	20000050 	.word	0x20000050
 8081b08:	20000578 	.word	0x20000578
 8081b0c:	20000018 	.word	0x20000018
 8081b10:	2000005c 	.word	0x2000005c
 8081b14:	20000584 	.word	0x20000584
 8081b18:	200007f6 	.word	0x200007f6
 8081b1c:	20000074 	.word	0x20000074
 8081b20:	2000059c 	.word	0x2000059c
 8081b24:	200007ec 	.word	0x200007ec
 8081b28:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8081b2c:	ed97 7b06 	vldr	d7, [r7, #24]
 8081b30:	ed8d 7b08 	vstr	d7, [sp, #32]
 8081b34:	ed97 7b08 	vldr	d7, [r7, #32]
 8081b38:	ed8d 7b06 	vstr	d7, [sp, #24]
 8081b3c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8081b40:	ed8d 7b04 	vstr	d7, [sp, #16]
 8081b44:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8081b48:	e9cd 8900 	strd	r8, r9, [sp]
 8081b4c:	4b08      	ldr	r3, [pc, #32]	; (8081b70 <SendDataToServer+0x38c>)
 8081b4e:	4a09      	ldr	r2, [pc, #36]	; (8081b74 <SendDataToServer+0x390>)
 8081b50:	4909      	ldr	r1, [pc, #36]	; (8081b78 <SendDataToServer+0x394>)
 8081b52:	480a      	ldr	r0, [pc, #40]	; (8081b7c <SendDataToServer+0x398>)
 8081b54:	f007 f846 	bl	8088be4 <siprintf>
//      SIM_HTTP_POST(
//          "https://capacitor-129e8-default-rtdb.firebaseio.com/testA.json",
//          "application/json", jsonBuffer, &httpInfo);
      HAL_Delay(120000);
 8081b58:	4809      	ldr	r0, [pc, #36]	; (8081b80 <SendDataToServer+0x39c>)
 8081b5a:	f000 fcb1 	bl	80824c0 <HAL_Delay>
//      SplitTime(&GetMinSec);
//      Set_Time(5, Timeptr->Minute, Timeptr->Second);
//      Set_Alarm(Timeptr->Minute);
    }
  }
  RTC_Flag = false;
 8081b5e:	4b09      	ldr	r3, [pc, #36]	; (8081b84 <SendDataToServer+0x3a0>)
 8081b60:	2200      	movs	r2, #0
 8081b62:	701a      	strb	r2, [r3, #0]
}
 8081b64:	bf00      	nop
 8081b66:	3734      	adds	r7, #52	; 0x34
 8081b68:	46bd      	mov	sp, r7
 8081b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081b6e:	bf00      	nop
 8081b70:	20000a6c 	.word	0x20000a6c
 8081b74:	20000a54 	.word	0x20000a54
 8081b78:	0808aee8 	.word	0x0808aee8
 8081b7c:	200005bc 	.word	0x200005bc
 8081b80:	0001d4c0 	.word	0x0001d4c0
 8081b84:	20000544 	.word	0x20000544

08081b88 <HAL_RTC_AlarmAEventCallback>:
    Error_Handler();
  }
}

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8081b88:	b480      	push	{r7}
 8081b8a:	b083      	sub	sp, #12
 8081b8c:	af00      	add	r7, sp, #0
 8081b8e:	6078      	str	r0, [r7, #4]
  //	if(RTC_Flag == 0)
  //	{
  //		RTC_Flag = 1;
  //	}
  RTC_Flag = true;
 8081b90:	4b04      	ldr	r3, [pc, #16]	; (8081ba4 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8081b92:	2201      	movs	r2, #1
 8081b94:	701a      	strb	r2, [r3, #0]
}
 8081b96:	bf00      	nop
 8081b98:	370c      	adds	r7, #12
 8081b9a:	46bd      	mov	sp, r7
 8081b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081ba0:	4770      	bx	lr
 8081ba2:	bf00      	nop
 8081ba4:	20000544 	.word	0x20000544

08081ba8 <__io_putchar>:
#define PUTCHAR_PROTOPYTE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOPYTE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOPYTE
{
 8081ba8:	b580      	push	{r7, lr}
 8081baa:	b082      	sub	sp, #8
 8081bac:	af00      	add	r7, sp, #0
 8081bae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)&ch, 1, 0xFFFF);
 8081bb0:	1d39      	adds	r1, r7, #4
 8081bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081bb6:	2201      	movs	r2, #1
 8081bb8:	4803      	ldr	r0, [pc, #12]	; (8081bc8 <__io_putchar+0x20>)
 8081bba:	f003 ff42 	bl	8085a42 <HAL_UART_Transmit>
  return ch;
 8081bbe:	687b      	ldr	r3, [r7, #4]
}
 8081bc0:	4618      	mov	r0, r3
 8081bc2:	3708      	adds	r7, #8
 8081bc4:	46bd      	mov	sp, r7
 8081bc6:	bd80      	pop	{r7, pc}
 8081bc8:	20000314 	.word	0x20000314

08081bcc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8081bcc:	b480      	push	{r7}
 8081bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8081bd0:	bf00      	nop
 8081bd2:	46bd      	mov	sp, r7
 8081bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081bd8:	4770      	bx	lr
	...

08081bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8081bdc:	b580      	push	{r7, lr}
 8081bde:	b082      	sub	sp, #8
 8081be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8081be2:	2300      	movs	r3, #0
 8081be4:	607b      	str	r3, [r7, #4]
 8081be6:	4b13      	ldr	r3, [pc, #76]	; (8081c34 <HAL_MspInit+0x58>)
 8081be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081bea:	4a12      	ldr	r2, [pc, #72]	; (8081c34 <HAL_MspInit+0x58>)
 8081bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8081bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8081bf2:	4b10      	ldr	r3, [pc, #64]	; (8081c34 <HAL_MspInit+0x58>)
 8081bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8081bfa:	607b      	str	r3, [r7, #4]
 8081bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8081bfe:	2300      	movs	r3, #0
 8081c00:	603b      	str	r3, [r7, #0]
 8081c02:	4b0c      	ldr	r3, [pc, #48]	; (8081c34 <HAL_MspInit+0x58>)
 8081c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c06:	4a0b      	ldr	r2, [pc, #44]	; (8081c34 <HAL_MspInit+0x58>)
 8081c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8081c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8081c0e:	4b09      	ldr	r3, [pc, #36]	; (8081c34 <HAL_MspInit+0x58>)
 8081c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8081c16:	603b      	str	r3, [r7, #0]
 8081c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8081c1a:	2200      	movs	r2, #0
 8081c1c:	2100      	movs	r1, #0
 8081c1e:	2005      	movs	r0, #5
 8081c20:	f000 fd4d 	bl	80826be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8081c24:	2005      	movs	r0, #5
 8081c26:	f000 fd66 	bl	80826f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8081c2a:	bf00      	nop
 8081c2c:	3708      	adds	r7, #8
 8081c2e:	46bd      	mov	sp, r7
 8081c30:	bd80      	pop	{r7, pc}
 8081c32:	bf00      	nop
 8081c34:	40023800 	.word	0x40023800

08081c38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8081c38:	b580      	push	{r7, lr}
 8081c3a:	b086      	sub	sp, #24
 8081c3c:	af00      	add	r7, sp, #0
 8081c3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8081c40:	f107 0308 	add.w	r3, r7, #8
 8081c44:	2200      	movs	r2, #0
 8081c46:	601a      	str	r2, [r3, #0]
 8081c48:	605a      	str	r2, [r3, #4]
 8081c4a:	609a      	str	r2, [r3, #8]
 8081c4c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8081c4e:	687b      	ldr	r3, [r7, #4]
 8081c50:	681b      	ldr	r3, [r3, #0]
 8081c52:	4a10      	ldr	r2, [pc, #64]	; (8081c94 <HAL_RTC_MspInit+0x5c>)
 8081c54:	4293      	cmp	r3, r2
 8081c56:	d119      	bne.n	8081c8c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8081c58:	2302      	movs	r3, #2
 8081c5a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8081c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8081c60:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8081c62:	f107 0308 	add.w	r3, r7, #8
 8081c66:	4618      	mov	r0, r3
 8081c68:	f001 ffc8 	bl	8083bfc <HAL_RCCEx_PeriphCLKConfig>
 8081c6c:	4603      	mov	r3, r0
 8081c6e:	2b00      	cmp	r3, #0
 8081c70:	d001      	beq.n	8081c76 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8081c72:	f7ff ffab 	bl	8081bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8081c76:	4b08      	ldr	r3, [pc, #32]	; (8081c98 <HAL_RTC_MspInit+0x60>)
 8081c78:	2201      	movs	r2, #1
 8081c7a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8081c7c:	2200      	movs	r2, #0
 8081c7e:	2100      	movs	r1, #0
 8081c80:	2029      	movs	r0, #41	; 0x29
 8081c82:	f000 fd1c 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8081c86:	2029      	movs	r0, #41	; 0x29
 8081c88:	f000 fd35 	bl	80826f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8081c8c:	bf00      	nop
 8081c8e:	3718      	adds	r7, #24
 8081c90:	46bd      	mov	sp, r7
 8081c92:	bd80      	pop	{r7, pc}
 8081c94:	40002800 	.word	0x40002800
 8081c98:	42470e3c 	.word	0x42470e3c

08081c9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8081c9c:	b580      	push	{r7, lr}
 8081c9e:	b08a      	sub	sp, #40	; 0x28
 8081ca0:	af00      	add	r7, sp, #0
 8081ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8081ca4:	f107 0314 	add.w	r3, r7, #20
 8081ca8:	2200      	movs	r2, #0
 8081caa:	601a      	str	r2, [r3, #0]
 8081cac:	605a      	str	r2, [r3, #4]
 8081cae:	609a      	str	r2, [r3, #8]
 8081cb0:	60da      	str	r2, [r3, #12]
 8081cb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8081cb4:	687b      	ldr	r3, [r7, #4]
 8081cb6:	681b      	ldr	r3, [r3, #0]
 8081cb8:	4a2c      	ldr	r2, [pc, #176]	; (8081d6c <HAL_SD_MspInit+0xd0>)
 8081cba:	4293      	cmp	r3, r2
 8081cbc:	d152      	bne.n	8081d64 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8081cbe:	2300      	movs	r3, #0
 8081cc0:	613b      	str	r3, [r7, #16]
 8081cc2:	4b2b      	ldr	r3, [pc, #172]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081cc6:	4a2a      	ldr	r2, [pc, #168]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8081ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8081cce:	4b28      	ldr	r3, [pc, #160]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8081cd6:	613b      	str	r3, [r7, #16]
 8081cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8081cda:	2300      	movs	r3, #0
 8081cdc:	60fb      	str	r3, [r7, #12]
 8081cde:	4b24      	ldr	r3, [pc, #144]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ce2:	4a23      	ldr	r2, [pc, #140]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081ce4:	f043 0304 	orr.w	r3, r3, #4
 8081ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8081cea:	4b21      	ldr	r3, [pc, #132]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cee:	f003 0304 	and.w	r3, r3, #4
 8081cf2:	60fb      	str	r3, [r7, #12]
 8081cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8081cf6:	2300      	movs	r3, #0
 8081cf8:	60bb      	str	r3, [r7, #8]
 8081cfa:	4b1d      	ldr	r3, [pc, #116]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cfe:	4a1c      	ldr	r2, [pc, #112]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081d00:	f043 0308 	orr.w	r3, r3, #8
 8081d04:	6313      	str	r3, [r2, #48]	; 0x30
 8081d06:	4b1a      	ldr	r3, [pc, #104]	; (8081d70 <HAL_SD_MspInit+0xd4>)
 8081d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081d0a:	f003 0308 	and.w	r3, r3, #8
 8081d0e:	60bb      	str	r3, [r7, #8]
 8081d10:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8081d12:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8081d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8081d18:	2302      	movs	r3, #2
 8081d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081d1c:	2300      	movs	r3, #0
 8081d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8081d20:	2303      	movs	r3, #3
 8081d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8081d24:	230c      	movs	r3, #12
 8081d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8081d28:	f107 0314 	add.w	r3, r7, #20
 8081d2c:	4619      	mov	r1, r3
 8081d2e:	4811      	ldr	r0, [pc, #68]	; (8081d74 <HAL_SD_MspInit+0xd8>)
 8081d30:	f001 f8fe 	bl	8082f30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8081d34:	2304      	movs	r3, #4
 8081d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8081d38:	2302      	movs	r3, #2
 8081d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081d3c:	2300      	movs	r3, #0
 8081d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8081d40:	2303      	movs	r3, #3
 8081d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8081d44:	230c      	movs	r3, #12
 8081d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8081d48:	f107 0314 	add.w	r3, r7, #20
 8081d4c:	4619      	mov	r1, r3
 8081d4e:	480a      	ldr	r0, [pc, #40]	; (8081d78 <HAL_SD_MspInit+0xdc>)
 8081d50:	f001 f8ee 	bl	8082f30 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8081d54:	2200      	movs	r2, #0
 8081d56:	2100      	movs	r1, #0
 8081d58:	2031      	movs	r0, #49	; 0x31
 8081d5a:	f000 fcb0 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8081d5e:	2031      	movs	r0, #49	; 0x31
 8081d60:	f000 fcc9 	bl	80826f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8081d64:	bf00      	nop
 8081d66:	3728      	adds	r7, #40	; 0x28
 8081d68:	46bd      	mov	sp, r7
 8081d6a:	bd80      	pop	{r7, pc}
 8081d6c:	40012c00 	.word	0x40012c00
 8081d70:	40023800 	.word	0x40023800
 8081d74:	40020800 	.word	0x40020800
 8081d78:	40020c00 	.word	0x40020c00

08081d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8081d7c:	b580      	push	{r7, lr}
 8081d7e:	b090      	sub	sp, #64	; 0x40
 8081d80:	af00      	add	r7, sp, #0
 8081d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8081d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8081d88:	2200      	movs	r2, #0
 8081d8a:	601a      	str	r2, [r3, #0]
 8081d8c:	605a      	str	r2, [r3, #4]
 8081d8e:	609a      	str	r2, [r3, #8]
 8081d90:	60da      	str	r2, [r3, #12]
 8081d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8081d94:	687b      	ldr	r3, [r7, #4]
 8081d96:	681b      	ldr	r3, [r3, #0]
 8081d98:	4a9b      	ldr	r2, [pc, #620]	; (8082008 <HAL_UART_MspInit+0x28c>)
 8081d9a:	4293      	cmp	r3, r2
 8081d9c:	d162      	bne.n	8081e64 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8081d9e:	2300      	movs	r3, #0
 8081da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8081da2:	4b9a      	ldr	r3, [pc, #616]	; (808200c <HAL_UART_MspInit+0x290>)
 8081da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081da6:	4a99      	ldr	r2, [pc, #612]	; (808200c <HAL_UART_MspInit+0x290>)
 8081da8:	f043 0310 	orr.w	r3, r3, #16
 8081dac:	6453      	str	r3, [r2, #68]	; 0x44
 8081dae:	4b97      	ldr	r3, [pc, #604]	; (808200c <HAL_UART_MspInit+0x290>)
 8081db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081db2:	f003 0310 	and.w	r3, r3, #16
 8081db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8081db8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8081dba:	2300      	movs	r3, #0
 8081dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8081dbe:	4b93      	ldr	r3, [pc, #588]	; (808200c <HAL_UART_MspInit+0x290>)
 8081dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081dc2:	4a92      	ldr	r2, [pc, #584]	; (808200c <HAL_UART_MspInit+0x290>)
 8081dc4:	f043 0302 	orr.w	r3, r3, #2
 8081dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8081dca:	4b90      	ldr	r3, [pc, #576]	; (808200c <HAL_UART_MspInit+0x290>)
 8081dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081dce:	f003 0302 	and.w	r3, r3, #2
 8081dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8081dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8081dd6:	23c0      	movs	r3, #192	; 0xc0
 8081dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8081dda:	2302      	movs	r3, #2
 8081ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081dde:	2300      	movs	r3, #0
 8081de0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8081de2:	2303      	movs	r3, #3
 8081de4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8081de6:	2307      	movs	r3, #7
 8081de8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8081dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8081dee:	4619      	mov	r1, r3
 8081df0:	4887      	ldr	r0, [pc, #540]	; (8082010 <HAL_UART_MspInit+0x294>)
 8081df2:	f001 f89d 	bl	8082f30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8081df6:	4b87      	ldr	r3, [pc, #540]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081df8:	4a87      	ldr	r2, [pc, #540]	; (8082018 <HAL_UART_MspInit+0x29c>)
 8081dfa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8081dfc:	4b85      	ldr	r3, [pc, #532]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8081e02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8081e04:	4b83      	ldr	r3, [pc, #524]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e06:	2200      	movs	r2, #0
 8081e08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8081e0a:	4b82      	ldr	r3, [pc, #520]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e0c:	2200      	movs	r2, #0
 8081e0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8081e10:	4b80      	ldr	r3, [pc, #512]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8081e16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8081e18:	4b7e      	ldr	r3, [pc, #504]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e1a:	2200      	movs	r2, #0
 8081e1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8081e1e:	4b7d      	ldr	r3, [pc, #500]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e20:	2200      	movs	r2, #0
 8081e22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8081e24:	4b7b      	ldr	r3, [pc, #492]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e26:	2200      	movs	r2, #0
 8081e28:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8081e2a:	4b7a      	ldr	r3, [pc, #488]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e2c:	2200      	movs	r2, #0
 8081e2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8081e30:	4b78      	ldr	r3, [pc, #480]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e32:	2200      	movs	r2, #0
 8081e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8081e36:	4877      	ldr	r0, [pc, #476]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e38:	f000 fc78 	bl	808272c <HAL_DMA_Init>
 8081e3c:	4603      	mov	r3, r0
 8081e3e:	2b00      	cmp	r3, #0
 8081e40:	d001      	beq.n	8081e46 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8081e42:	f7ff fec3 	bl	8081bcc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8081e46:	687b      	ldr	r3, [r7, #4]
 8081e48:	4a72      	ldr	r2, [pc, #456]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8081e4c:	4a71      	ldr	r2, [pc, #452]	; (8082014 <HAL_UART_MspInit+0x298>)
 8081e4e:	687b      	ldr	r3, [r7, #4]
 8081e50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8081e52:	2200      	movs	r2, #0
 8081e54:	2100      	movs	r1, #0
 8081e56:	2025      	movs	r0, #37	; 0x25
 8081e58:	f000 fc31 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8081e5c:	2025      	movs	r0, #37	; 0x25
 8081e5e:	f000 fc4a 	bl	80826f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8081e62:	e122      	b.n	80820aa <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART2)
 8081e64:	687b      	ldr	r3, [r7, #4]
 8081e66:	681b      	ldr	r3, [r3, #0]
 8081e68:	4a6c      	ldr	r2, [pc, #432]	; (808201c <HAL_UART_MspInit+0x2a0>)
 8081e6a:	4293      	cmp	r3, r2
 8081e6c:	d162      	bne.n	8081f34 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8081e6e:	2300      	movs	r3, #0
 8081e70:	623b      	str	r3, [r7, #32]
 8081e72:	4b66      	ldr	r3, [pc, #408]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081e76:	4a65      	ldr	r2, [pc, #404]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8081e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8081e7e:	4b63      	ldr	r3, [pc, #396]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8081e86:	623b      	str	r3, [r7, #32]
 8081e88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8081e8a:	2300      	movs	r3, #0
 8081e8c:	61fb      	str	r3, [r7, #28]
 8081e8e:	4b5f      	ldr	r3, [pc, #380]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e92:	4a5e      	ldr	r2, [pc, #376]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e94:	f043 0301 	orr.w	r3, r3, #1
 8081e98:	6313      	str	r3, [r2, #48]	; 0x30
 8081e9a:	4b5c      	ldr	r3, [pc, #368]	; (808200c <HAL_UART_MspInit+0x290>)
 8081e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e9e:	f003 0301 	and.w	r3, r3, #1
 8081ea2:	61fb      	str	r3, [r7, #28]
 8081ea4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8081ea6:	230c      	movs	r3, #12
 8081ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8081eaa:	2302      	movs	r3, #2
 8081eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081eae:	2300      	movs	r3, #0
 8081eb0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8081eb2:	2303      	movs	r3, #3
 8081eb4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8081eb6:	2307      	movs	r3, #7
 8081eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8081eba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8081ebe:	4619      	mov	r1, r3
 8081ec0:	4857      	ldr	r0, [pc, #348]	; (8082020 <HAL_UART_MspInit+0x2a4>)
 8081ec2:	f001 f835 	bl	8082f30 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8081ec6:	4b57      	ldr	r3, [pc, #348]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ec8:	4a57      	ldr	r2, [pc, #348]	; (8082028 <HAL_UART_MspInit+0x2ac>)
 8081eca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8081ecc:	4b55      	ldr	r3, [pc, #340]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8081ed2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8081ed4:	4b53      	ldr	r3, [pc, #332]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ed6:	2200      	movs	r2, #0
 8081ed8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8081eda:	4b52      	ldr	r3, [pc, #328]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081edc:	2200      	movs	r2, #0
 8081ede:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8081ee0:	4b50      	ldr	r3, [pc, #320]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8081ee6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8081ee8:	4b4e      	ldr	r3, [pc, #312]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081eea:	2200      	movs	r2, #0
 8081eec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8081eee:	4b4d      	ldr	r3, [pc, #308]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ef0:	2200      	movs	r2, #0
 8081ef2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8081ef4:	4b4b      	ldr	r3, [pc, #300]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081ef6:	2200      	movs	r2, #0
 8081ef8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8081efa:	4b4a      	ldr	r3, [pc, #296]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081efc:	2200      	movs	r2, #0
 8081efe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8081f00:	4b48      	ldr	r3, [pc, #288]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081f02:	2200      	movs	r2, #0
 8081f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8081f06:	4847      	ldr	r0, [pc, #284]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081f08:	f000 fc10 	bl	808272c <HAL_DMA_Init>
 8081f0c:	4603      	mov	r3, r0
 8081f0e:	2b00      	cmp	r3, #0
 8081f10:	d001      	beq.n	8081f16 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8081f12:	f7ff fe5b 	bl	8081bcc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8081f16:	687b      	ldr	r3, [r7, #4]
 8081f18:	4a42      	ldr	r2, [pc, #264]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8081f1c:	4a41      	ldr	r2, [pc, #260]	; (8082024 <HAL_UART_MspInit+0x2a8>)
 8081f1e:	687b      	ldr	r3, [r7, #4]
 8081f20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8081f22:	2200      	movs	r2, #0
 8081f24:	2100      	movs	r1, #0
 8081f26:	2026      	movs	r0, #38	; 0x26
 8081f28:	f000 fbc9 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8081f2c:	2026      	movs	r0, #38	; 0x26
 8081f2e:	f000 fbe2 	bl	80826f6 <HAL_NVIC_EnableIRQ>
}
 8081f32:	e0ba      	b.n	80820aa <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8081f34:	687b      	ldr	r3, [r7, #4]
 8081f36:	681b      	ldr	r3, [r3, #0]
 8081f38:	4a3c      	ldr	r2, [pc, #240]	; (808202c <HAL_UART_MspInit+0x2b0>)
 8081f3a:	4293      	cmp	r3, r2
 8081f3c:	d17c      	bne.n	8082038 <HAL_UART_MspInit+0x2bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8081f3e:	2300      	movs	r3, #0
 8081f40:	61bb      	str	r3, [r7, #24]
 8081f42:	4b32      	ldr	r3, [pc, #200]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f46:	4a31      	ldr	r2, [pc, #196]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8081f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8081f4e:	4b2f      	ldr	r3, [pc, #188]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8081f56:	61bb      	str	r3, [r7, #24]
 8081f58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8081f5a:	2300      	movs	r3, #0
 8081f5c:	617b      	str	r3, [r7, #20]
 8081f5e:	4b2b      	ldr	r3, [pc, #172]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f62:	4a2a      	ldr	r2, [pc, #168]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f64:	f043 0302 	orr.w	r3, r3, #2
 8081f68:	6313      	str	r3, [r2, #48]	; 0x30
 8081f6a:	4b28      	ldr	r3, [pc, #160]	; (808200c <HAL_UART_MspInit+0x290>)
 8081f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f6e:	f003 0302 	and.w	r3, r3, #2
 8081f72:	617b      	str	r3, [r7, #20]
 8081f74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8081f76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8081f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8081f7c:	2302      	movs	r3, #2
 8081f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8081f80:	2300      	movs	r3, #0
 8081f82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8081f84:	2303      	movs	r3, #3
 8081f86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8081f88:	2307      	movs	r3, #7
 8081f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8081f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8081f90:	4619      	mov	r1, r3
 8081f92:	481f      	ldr	r0, [pc, #124]	; (8082010 <HAL_UART_MspInit+0x294>)
 8081f94:	f000 ffcc 	bl	8082f30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8081f98:	4b25      	ldr	r3, [pc, #148]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081f9a:	4a26      	ldr	r2, [pc, #152]	; (8082034 <HAL_UART_MspInit+0x2b8>)
 8081f9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8081f9e:	4b24      	ldr	r3, [pc, #144]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8081fa4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8081fa6:	4b22      	ldr	r3, [pc, #136]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fa8:	2200      	movs	r2, #0
 8081faa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8081fac:	4b20      	ldr	r3, [pc, #128]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fae:	2200      	movs	r2, #0
 8081fb0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8081fb2:	4b1f      	ldr	r3, [pc, #124]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8081fb8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8081fba:	4b1d      	ldr	r3, [pc, #116]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fbc:	2200      	movs	r2, #0
 8081fbe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8081fc0:	4b1b      	ldr	r3, [pc, #108]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fc2:	2200      	movs	r2, #0
 8081fc4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8081fc6:	4b1a      	ldr	r3, [pc, #104]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fc8:	2200      	movs	r2, #0
 8081fca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8081fcc:	4b18      	ldr	r3, [pc, #96]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fce:	2200      	movs	r2, #0
 8081fd0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8081fd2:	4b17      	ldr	r3, [pc, #92]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fd4:	2200      	movs	r2, #0
 8081fd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8081fd8:	4815      	ldr	r0, [pc, #84]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fda:	f000 fba7 	bl	808272c <HAL_DMA_Init>
 8081fde:	4603      	mov	r3, r0
 8081fe0:	2b00      	cmp	r3, #0
 8081fe2:	d001      	beq.n	8081fe8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8081fe4:	f7ff fdf2 	bl	8081bcc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8081fe8:	687b      	ldr	r3, [r7, #4]
 8081fea:	4a11      	ldr	r2, [pc, #68]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081fec:	639a      	str	r2, [r3, #56]	; 0x38
 8081fee:	4a10      	ldr	r2, [pc, #64]	; (8082030 <HAL_UART_MspInit+0x2b4>)
 8081ff0:	687b      	ldr	r3, [r7, #4]
 8081ff2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8081ff4:	2200      	movs	r2, #0
 8081ff6:	2100      	movs	r1, #0
 8081ff8:	2027      	movs	r0, #39	; 0x27
 8081ffa:	f000 fb60 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8081ffe:	2027      	movs	r0, #39	; 0x27
 8082000:	f000 fb79 	bl	80826f6 <HAL_NVIC_EnableIRQ>
}
 8082004:	e051      	b.n	80820aa <HAL_UART_MspInit+0x32e>
 8082006:	bf00      	nop
 8082008:	40011000 	.word	0x40011000
 808200c:	40023800 	.word	0x40023800
 8082010:	40020400 	.word	0x40020400
 8082014:	20000424 	.word	0x20000424
 8082018:	40026440 	.word	0x40026440
 808201c:	40004400 	.word	0x40004400
 8082020:	40020000 	.word	0x40020000
 8082024:	20000484 	.word	0x20000484
 8082028:	40026088 	.word	0x40026088
 808202c:	40004800 	.word	0x40004800
 8082030:	200004e4 	.word	0x200004e4
 8082034:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8082038:	687b      	ldr	r3, [r7, #4]
 808203a:	681b      	ldr	r3, [r3, #0]
 808203c:	4a1d      	ldr	r2, [pc, #116]	; (80820b4 <HAL_UART_MspInit+0x338>)
 808203e:	4293      	cmp	r3, r2
 8082040:	d133      	bne.n	80820aa <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8082042:	2300      	movs	r3, #0
 8082044:	613b      	str	r3, [r7, #16]
 8082046:	4b1c      	ldr	r3, [pc, #112]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 8082048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808204a:	4a1b      	ldr	r2, [pc, #108]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 808204c:	f043 0320 	orr.w	r3, r3, #32
 8082050:	6453      	str	r3, [r2, #68]	; 0x44
 8082052:	4b19      	ldr	r3, [pc, #100]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 8082054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082056:	f003 0320 	and.w	r3, r3, #32
 808205a:	613b      	str	r3, [r7, #16]
 808205c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 808205e:	2300      	movs	r3, #0
 8082060:	60fb      	str	r3, [r7, #12]
 8082062:	4b15      	ldr	r3, [pc, #84]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 8082064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082066:	4a14      	ldr	r2, [pc, #80]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 8082068:	f043 0304 	orr.w	r3, r3, #4
 808206c:	6313      	str	r3, [r2, #48]	; 0x30
 808206e:	4b12      	ldr	r3, [pc, #72]	; (80820b8 <HAL_UART_MspInit+0x33c>)
 8082070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082072:	f003 0304 	and.w	r3, r3, #4
 8082076:	60fb      	str	r3, [r7, #12]
 8082078:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 808207a:	23c0      	movs	r3, #192	; 0xc0
 808207c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808207e:	2302      	movs	r3, #2
 8082080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8082082:	2300      	movs	r3, #0
 8082084:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8082086:	2303      	movs	r3, #3
 8082088:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 808208a:	2308      	movs	r3, #8
 808208c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 808208e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8082092:	4619      	mov	r1, r3
 8082094:	4809      	ldr	r0, [pc, #36]	; (80820bc <HAL_UART_MspInit+0x340>)
 8082096:	f000 ff4b 	bl	8082f30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 808209a:	2200      	movs	r2, #0
 808209c:	2100      	movs	r1, #0
 808209e:	2047      	movs	r0, #71	; 0x47
 80820a0:	f000 fb0d 	bl	80826be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80820a4:	2047      	movs	r0, #71	; 0x47
 80820a6:	f000 fb26 	bl	80826f6 <HAL_NVIC_EnableIRQ>
}
 80820aa:	bf00      	nop
 80820ac:	3740      	adds	r7, #64	; 0x40
 80820ae:	46bd      	mov	sp, r7
 80820b0:	bd80      	pop	{r7, pc}
 80820b2:	bf00      	nop
 80820b4:	40011400 	.word	0x40011400
 80820b8:	40023800 	.word	0x40023800
 80820bc:	40020800 	.word	0x40020800

080820c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80820c0:	b480      	push	{r7}
 80820c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80820c4:	e7fe      	b.n	80820c4 <NMI_Handler+0x4>

080820c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80820c6:	b480      	push	{r7}
 80820c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80820ca:	e7fe      	b.n	80820ca <HardFault_Handler+0x4>

080820cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80820cc:	b480      	push	{r7}
 80820ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80820d0:	e7fe      	b.n	80820d0 <MemManage_Handler+0x4>

080820d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80820d2:	b480      	push	{r7}
 80820d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80820d6:	e7fe      	b.n	80820d6 <BusFault_Handler+0x4>

080820d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80820d8:	b480      	push	{r7}
 80820da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80820dc:	e7fe      	b.n	80820dc <UsageFault_Handler+0x4>

080820de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80820de:	b480      	push	{r7}
 80820e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80820e2:	bf00      	nop
 80820e4:	46bd      	mov	sp, r7
 80820e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80820ea:	4770      	bx	lr

080820ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80820ec:	b480      	push	{r7}
 80820ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80820f0:	bf00      	nop
 80820f2:	46bd      	mov	sp, r7
 80820f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80820f8:	4770      	bx	lr

080820fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80820fa:	b480      	push	{r7}
 80820fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80820fe:	bf00      	nop
 8082100:	46bd      	mov	sp, r7
 8082102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082106:	4770      	bx	lr

08082108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8082108:	b580      	push	{r7, lr}
 808210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 808210c:	f000 f9b8 	bl	8082480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8082110:	bf00      	nop
 8082112:	bd80      	pop	{r7, pc}

08082114 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8082114:	b480      	push	{r7}
 8082116:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8082118:	bf00      	nop
 808211a:	46bd      	mov	sp, r7
 808211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082120:	4770      	bx	lr
	...

08082124 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8082124:	b580      	push	{r7, lr}
 8082126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8082128:	4802      	ldr	r0, [pc, #8]	; (8082134 <DMA1_Stream1_IRQHandler+0x10>)
 808212a:	f000 fc97 	bl	8082a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 808212e:	bf00      	nop
 8082130:	bd80      	pop	{r7, pc}
 8082132:	bf00      	nop
 8082134:	200004e4 	.word	0x200004e4

08082138 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8082138:	b580      	push	{r7, lr}
 808213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 808213c:	4802      	ldr	r0, [pc, #8]	; (8082148 <DMA1_Stream5_IRQHandler+0x10>)
 808213e:	f000 fc8d 	bl	8082a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8082142:	bf00      	nop
 8082144:	bd80      	pop	{r7, pc}
 8082146:	bf00      	nop
 8082148:	20000484 	.word	0x20000484

0808214c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 808214c:	b580      	push	{r7, lr}
 808214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8082150:	4802      	ldr	r0, [pc, #8]	; (808215c <USART1_IRQHandler+0x10>)
 8082152:	f003 fe3f 	bl	8085dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8082156:	bf00      	nop
 8082158:	bd80      	pop	{r7, pc}
 808215a:	bf00      	nop
 808215c:	20000314 	.word	0x20000314

08082160 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8082160:	b580      	push	{r7, lr}
 8082162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8082164:	4802      	ldr	r0, [pc, #8]	; (8082170 <USART2_IRQHandler+0x10>)
 8082166:	f003 fe35 	bl	8085dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 808216a:	bf00      	nop
 808216c:	bd80      	pop	{r7, pc}
 808216e:	bf00      	nop
 8082170:	20000358 	.word	0x20000358

08082174 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8082174:	b580      	push	{r7, lr}
 8082176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8082178:	4802      	ldr	r0, [pc, #8]	; (8082184 <USART3_IRQHandler+0x10>)
 808217a:	f003 fe2b 	bl	8085dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 808217e:	bf00      	nop
 8082180:	bd80      	pop	{r7, pc}
 8082182:	bf00      	nop
 8082184:	2000039c 	.word	0x2000039c

08082188 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8082188:	b580      	push	{r7, lr}
 808218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 808218c:	4802      	ldr	r0, [pc, #8]	; (8082198 <RTC_Alarm_IRQHandler+0x10>)
 808218e:	f002 f8ed 	bl	808436c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8082192:	bf00      	nop
 8082194:	bd80      	pop	{r7, pc}
 8082196:	bf00      	nop
 8082198:	20000270 	.word	0x20000270

0808219c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 808219c:	b580      	push	{r7, lr}
 808219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80821a0:	4802      	ldr	r0, [pc, #8]	; (80821ac <SDIO_IRQHandler+0x10>)
 80821a2:	f002 fde9 	bl	8084d78 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80821a6:	bf00      	nop
 80821a8:	bd80      	pop	{r7, pc}
 80821aa:	bf00      	nop
 80821ac:	20000290 	.word	0x20000290

080821b0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80821b0:	b580      	push	{r7, lr}
 80821b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80821b4:	4802      	ldr	r0, [pc, #8]	; (80821c0 <DMA2_Stream2_IRQHandler+0x10>)
 80821b6:	f000 fc51 	bl	8082a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80821ba:	bf00      	nop
 80821bc:	bd80      	pop	{r7, pc}
 80821be:	bf00      	nop
 80821c0:	20000424 	.word	0x20000424

080821c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80821c4:	b580      	push	{r7, lr}
 80821c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80821c8:	4802      	ldr	r0, [pc, #8]	; (80821d4 <USART6_IRQHandler+0x10>)
 80821ca:	f003 fe03 	bl	8085dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80821ce:	bf00      	nop
 80821d0:	bd80      	pop	{r7, pc}
 80821d2:	bf00      	nop
 80821d4:	200003e0 	.word	0x200003e0

080821d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80821d8:	b480      	push	{r7}
 80821da:	af00      	add	r7, sp, #0
	return 1;
 80821dc:	2301      	movs	r3, #1
}
 80821de:	4618      	mov	r0, r3
 80821e0:	46bd      	mov	sp, r7
 80821e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80821e6:	4770      	bx	lr

080821e8 <_kill>:

int _kill(int pid, int sig)
{
 80821e8:	b580      	push	{r7, lr}
 80821ea:	b082      	sub	sp, #8
 80821ec:	af00      	add	r7, sp, #0
 80821ee:	6078      	str	r0, [r7, #4]
 80821f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80821f2:	f006 fdc3 	bl	8088d7c <__errno>
 80821f6:	4603      	mov	r3, r0
 80821f8:	2216      	movs	r2, #22
 80821fa:	601a      	str	r2, [r3, #0]
	return -1;
 80821fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8082200:	4618      	mov	r0, r3
 8082202:	3708      	adds	r7, #8
 8082204:	46bd      	mov	sp, r7
 8082206:	bd80      	pop	{r7, pc}

08082208 <_exit>:

void _exit (int status)
{
 8082208:	b580      	push	{r7, lr}
 808220a:	b082      	sub	sp, #8
 808220c:	af00      	add	r7, sp, #0
 808220e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8082210:	f04f 31ff 	mov.w	r1, #4294967295
 8082214:	6878      	ldr	r0, [r7, #4]
 8082216:	f7ff ffe7 	bl	80821e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 808221a:	e7fe      	b.n	808221a <_exit+0x12>

0808221c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 808221c:	b580      	push	{r7, lr}
 808221e:	b086      	sub	sp, #24
 8082220:	af00      	add	r7, sp, #0
 8082222:	60f8      	str	r0, [r7, #12]
 8082224:	60b9      	str	r1, [r7, #8]
 8082226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8082228:	2300      	movs	r3, #0
 808222a:	617b      	str	r3, [r7, #20]
 808222c:	e00a      	b.n	8082244 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 808222e:	f3af 8000 	nop.w
 8082232:	4601      	mov	r1, r0
 8082234:	68bb      	ldr	r3, [r7, #8]
 8082236:	1c5a      	adds	r2, r3, #1
 8082238:	60ba      	str	r2, [r7, #8]
 808223a:	b2ca      	uxtb	r2, r1
 808223c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 808223e:	697b      	ldr	r3, [r7, #20]
 8082240:	3301      	adds	r3, #1
 8082242:	617b      	str	r3, [r7, #20]
 8082244:	697a      	ldr	r2, [r7, #20]
 8082246:	687b      	ldr	r3, [r7, #4]
 8082248:	429a      	cmp	r2, r3
 808224a:	dbf0      	blt.n	808222e <_read+0x12>
	}

return len;
 808224c:	687b      	ldr	r3, [r7, #4]
}
 808224e:	4618      	mov	r0, r3
 8082250:	3718      	adds	r7, #24
 8082252:	46bd      	mov	sp, r7
 8082254:	bd80      	pop	{r7, pc}

08082256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8082256:	b580      	push	{r7, lr}
 8082258:	b086      	sub	sp, #24
 808225a:	af00      	add	r7, sp, #0
 808225c:	60f8      	str	r0, [r7, #12]
 808225e:	60b9      	str	r1, [r7, #8]
 8082260:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8082262:	2300      	movs	r3, #0
 8082264:	617b      	str	r3, [r7, #20]
 8082266:	e009      	b.n	808227c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8082268:	68bb      	ldr	r3, [r7, #8]
 808226a:	1c5a      	adds	r2, r3, #1
 808226c:	60ba      	str	r2, [r7, #8]
 808226e:	781b      	ldrb	r3, [r3, #0]
 8082270:	4618      	mov	r0, r3
 8082272:	f7ff fc99 	bl	8081ba8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8082276:	697b      	ldr	r3, [r7, #20]
 8082278:	3301      	adds	r3, #1
 808227a:	617b      	str	r3, [r7, #20]
 808227c:	697a      	ldr	r2, [r7, #20]
 808227e:	687b      	ldr	r3, [r7, #4]
 8082280:	429a      	cmp	r2, r3
 8082282:	dbf1      	blt.n	8082268 <_write+0x12>
	}
	return len;
 8082284:	687b      	ldr	r3, [r7, #4]
}
 8082286:	4618      	mov	r0, r3
 8082288:	3718      	adds	r7, #24
 808228a:	46bd      	mov	sp, r7
 808228c:	bd80      	pop	{r7, pc}

0808228e <_close>:

int _close(int file)
{
 808228e:	b480      	push	{r7}
 8082290:	b083      	sub	sp, #12
 8082292:	af00      	add	r7, sp, #0
 8082294:	6078      	str	r0, [r7, #4]
	return -1;
 8082296:	f04f 33ff 	mov.w	r3, #4294967295
}
 808229a:	4618      	mov	r0, r3
 808229c:	370c      	adds	r7, #12
 808229e:	46bd      	mov	sp, r7
 80822a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822a4:	4770      	bx	lr

080822a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80822a6:	b480      	push	{r7}
 80822a8:	b083      	sub	sp, #12
 80822aa:	af00      	add	r7, sp, #0
 80822ac:	6078      	str	r0, [r7, #4]
 80822ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80822b0:	683b      	ldr	r3, [r7, #0]
 80822b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80822b6:	605a      	str	r2, [r3, #4]
	return 0;
 80822b8:	2300      	movs	r3, #0
}
 80822ba:	4618      	mov	r0, r3
 80822bc:	370c      	adds	r7, #12
 80822be:	46bd      	mov	sp, r7
 80822c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822c4:	4770      	bx	lr

080822c6 <_isatty>:

int _isatty(int file)
{
 80822c6:	b480      	push	{r7}
 80822c8:	b083      	sub	sp, #12
 80822ca:	af00      	add	r7, sp, #0
 80822cc:	6078      	str	r0, [r7, #4]
	return 1;
 80822ce:	2301      	movs	r3, #1
}
 80822d0:	4618      	mov	r0, r3
 80822d2:	370c      	adds	r7, #12
 80822d4:	46bd      	mov	sp, r7
 80822d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822da:	4770      	bx	lr

080822dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80822dc:	b480      	push	{r7}
 80822de:	b085      	sub	sp, #20
 80822e0:	af00      	add	r7, sp, #0
 80822e2:	60f8      	str	r0, [r7, #12]
 80822e4:	60b9      	str	r1, [r7, #8]
 80822e6:	607a      	str	r2, [r7, #4]
	return 0;
 80822e8:	2300      	movs	r3, #0
}
 80822ea:	4618      	mov	r0, r3
 80822ec:	3714      	adds	r7, #20
 80822ee:	46bd      	mov	sp, r7
 80822f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80822f4:	4770      	bx	lr
	...

080822f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80822f8:	b580      	push	{r7, lr}
 80822fa:	b086      	sub	sp, #24
 80822fc:	af00      	add	r7, sp, #0
 80822fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8082300:	4a14      	ldr	r2, [pc, #80]	; (8082354 <_sbrk+0x5c>)
 8082302:	4b15      	ldr	r3, [pc, #84]	; (8082358 <_sbrk+0x60>)
 8082304:	1ad3      	subs	r3, r2, r3
 8082306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8082308:	697b      	ldr	r3, [r7, #20]
 808230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 808230c:	4b13      	ldr	r3, [pc, #76]	; (808235c <_sbrk+0x64>)
 808230e:	681b      	ldr	r3, [r3, #0]
 8082310:	2b00      	cmp	r3, #0
 8082312:	d102      	bne.n	808231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8082314:	4b11      	ldr	r3, [pc, #68]	; (808235c <_sbrk+0x64>)
 8082316:	4a12      	ldr	r2, [pc, #72]	; (8082360 <_sbrk+0x68>)
 8082318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 808231a:	4b10      	ldr	r3, [pc, #64]	; (808235c <_sbrk+0x64>)
 808231c:	681a      	ldr	r2, [r3, #0]
 808231e:	687b      	ldr	r3, [r7, #4]
 8082320:	4413      	add	r3, r2
 8082322:	693a      	ldr	r2, [r7, #16]
 8082324:	429a      	cmp	r2, r3
 8082326:	d207      	bcs.n	8082338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8082328:	f006 fd28 	bl	8088d7c <__errno>
 808232c:	4603      	mov	r3, r0
 808232e:	220c      	movs	r2, #12
 8082330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8082332:	f04f 33ff 	mov.w	r3, #4294967295
 8082336:	e009      	b.n	808234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8082338:	4b08      	ldr	r3, [pc, #32]	; (808235c <_sbrk+0x64>)
 808233a:	681b      	ldr	r3, [r3, #0]
 808233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 808233e:	4b07      	ldr	r3, [pc, #28]	; (808235c <_sbrk+0x64>)
 8082340:	681a      	ldr	r2, [r3, #0]
 8082342:	687b      	ldr	r3, [r7, #4]
 8082344:	4413      	add	r3, r2
 8082346:	4a05      	ldr	r2, [pc, #20]	; (808235c <_sbrk+0x64>)
 8082348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 808234a:	68fb      	ldr	r3, [r7, #12]
}
 808234c:	4618      	mov	r0, r3
 808234e:	3718      	adds	r7, #24
 8082350:	46bd      	mov	sp, r7
 8082352:	bd80      	pop	{r7, pc}
 8082354:	20020000 	.word	0x20020000
 8082358:	00000400 	.word	0x00000400
 808235c:	200007fc 	.word	0x200007fc
 8082360:	20000bc8 	.word	0x20000bc8

08082364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8082364:	b480      	push	{r7}
 8082366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8082368:	4b06      	ldr	r3, [pc, #24]	; (8082384 <SystemInit+0x20>)
 808236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 808236e:	4a05      	ldr	r2, [pc, #20]	; (8082384 <SystemInit+0x20>)
 8082370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8082374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8082378:	bf00      	nop
 808237a:	46bd      	mov	sp, r7
 808237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082380:	4770      	bx	lr
 8082382:	bf00      	nop
 8082384:	e000ed00 	.word	0xe000ed00

08082388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8082388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80823c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 808238c:	480d      	ldr	r0, [pc, #52]	; (80823c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 808238e:	490e      	ldr	r1, [pc, #56]	; (80823c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8082390:	4a0e      	ldr	r2, [pc, #56]	; (80823cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8082392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8082394:	e002      	b.n	808239c <LoopCopyDataInit>

08082396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8082396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8082398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 808239a:	3304      	adds	r3, #4

0808239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 808239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 808239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80823a0:	d3f9      	bcc.n	8082396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80823a2:	4a0b      	ldr	r2, [pc, #44]	; (80823d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80823a4:	4c0b      	ldr	r4, [pc, #44]	; (80823d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80823a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80823a8:	e001      	b.n	80823ae <LoopFillZerobss>

080823aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80823aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80823ac:	3204      	adds	r2, #4

080823ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80823ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80823b0:	d3fb      	bcc.n	80823aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80823b2:	f7ff ffd7 	bl	8082364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80823b6:	f006 fce7 	bl	8088d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80823ba:	f7fe fe2b 	bl	8081014 <main>
  bx  lr    
 80823be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80823c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80823c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80823c8:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 80823cc:	0808b8a8 	.word	0x0808b8a8
  ldr r2, =_sbss
 80823d0:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 80823d4:	20000bc8 	.word	0x20000bc8

080823d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80823d8:	e7fe      	b.n	80823d8 <ADC_IRQHandler>
	...

080823dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80823dc:	b580      	push	{r7, lr}
 80823de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80823e0:	4b0e      	ldr	r3, [pc, #56]	; (808241c <HAL_Init+0x40>)
 80823e2:	681b      	ldr	r3, [r3, #0]
 80823e4:	4a0d      	ldr	r2, [pc, #52]	; (808241c <HAL_Init+0x40>)
 80823e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80823ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80823ec:	4b0b      	ldr	r3, [pc, #44]	; (808241c <HAL_Init+0x40>)
 80823ee:	681b      	ldr	r3, [r3, #0]
 80823f0:	4a0a      	ldr	r2, [pc, #40]	; (808241c <HAL_Init+0x40>)
 80823f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80823f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80823f8:	4b08      	ldr	r3, [pc, #32]	; (808241c <HAL_Init+0x40>)
 80823fa:	681b      	ldr	r3, [r3, #0]
 80823fc:	4a07      	ldr	r2, [pc, #28]	; (808241c <HAL_Init+0x40>)
 80823fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8082402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8082404:	2003      	movs	r0, #3
 8082406:	f000 f94f 	bl	80826a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 808240a:	200f      	movs	r0, #15
 808240c:	f000 f808 	bl	8082420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8082410:	f7ff fbe4 	bl	8081bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8082414:	2300      	movs	r3, #0
}
 8082416:	4618      	mov	r0, r3
 8082418:	bd80      	pop	{r7, pc}
 808241a:	bf00      	nop
 808241c:	40023c00 	.word	0x40023c00

08082420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8082420:	b580      	push	{r7, lr}
 8082422:	b082      	sub	sp, #8
 8082424:	af00      	add	r7, sp, #0
 8082426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8082428:	4b12      	ldr	r3, [pc, #72]	; (8082474 <HAL_InitTick+0x54>)
 808242a:	681a      	ldr	r2, [r3, #0]
 808242c:	4b12      	ldr	r3, [pc, #72]	; (8082478 <HAL_InitTick+0x58>)
 808242e:	781b      	ldrb	r3, [r3, #0]
 8082430:	4619      	mov	r1, r3
 8082432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082436:	fbb3 f3f1 	udiv	r3, r3, r1
 808243a:	fbb2 f3f3 	udiv	r3, r2, r3
 808243e:	4618      	mov	r0, r3
 8082440:	f000 f967 	bl	8082712 <HAL_SYSTICK_Config>
 8082444:	4603      	mov	r3, r0
 8082446:	2b00      	cmp	r3, #0
 8082448:	d001      	beq.n	808244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 808244a:	2301      	movs	r3, #1
 808244c:	e00e      	b.n	808246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 808244e:	687b      	ldr	r3, [r7, #4]
 8082450:	2b0f      	cmp	r3, #15
 8082452:	d80a      	bhi.n	808246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8082454:	2200      	movs	r2, #0
 8082456:	6879      	ldr	r1, [r7, #4]
 8082458:	f04f 30ff 	mov.w	r0, #4294967295
 808245c:	f000 f92f 	bl	80826be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8082460:	4a06      	ldr	r2, [pc, #24]	; (808247c <HAL_InitTick+0x5c>)
 8082462:	687b      	ldr	r3, [r7, #4]
 8082464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8082466:	2300      	movs	r3, #0
 8082468:	e000      	b.n	808246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 808246a:	2301      	movs	r3, #1
}
 808246c:	4618      	mov	r0, r3
 808246e:	3708      	adds	r7, #8
 8082470:	46bd      	mov	sp, r7
 8082472:	bd80      	pop	{r7, pc}
 8082474:	20000080 	.word	0x20000080
 8082478:	20000088 	.word	0x20000088
 808247c:	20000084 	.word	0x20000084

08082480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8082480:	b480      	push	{r7}
 8082482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8082484:	4b06      	ldr	r3, [pc, #24]	; (80824a0 <HAL_IncTick+0x20>)
 8082486:	781b      	ldrb	r3, [r3, #0]
 8082488:	461a      	mov	r2, r3
 808248a:	4b06      	ldr	r3, [pc, #24]	; (80824a4 <HAL_IncTick+0x24>)
 808248c:	681b      	ldr	r3, [r3, #0]
 808248e:	4413      	add	r3, r2
 8082490:	4a04      	ldr	r2, [pc, #16]	; (80824a4 <HAL_IncTick+0x24>)
 8082492:	6013      	str	r3, [r2, #0]
}
 8082494:	bf00      	nop
 8082496:	46bd      	mov	sp, r7
 8082498:	f85d 7b04 	ldr.w	r7, [sp], #4
 808249c:	4770      	bx	lr
 808249e:	bf00      	nop
 80824a0:	20000088 	.word	0x20000088
 80824a4:	20000800 	.word	0x20000800

080824a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80824a8:	b480      	push	{r7}
 80824aa:	af00      	add	r7, sp, #0
  return uwTick;
 80824ac:	4b03      	ldr	r3, [pc, #12]	; (80824bc <HAL_GetTick+0x14>)
 80824ae:	681b      	ldr	r3, [r3, #0]
}
 80824b0:	4618      	mov	r0, r3
 80824b2:	46bd      	mov	sp, r7
 80824b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80824b8:	4770      	bx	lr
 80824ba:	bf00      	nop
 80824bc:	20000800 	.word	0x20000800

080824c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80824c0:	b580      	push	{r7, lr}
 80824c2:	b084      	sub	sp, #16
 80824c4:	af00      	add	r7, sp, #0
 80824c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80824c8:	f7ff ffee 	bl	80824a8 <HAL_GetTick>
 80824cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80824ce:	687b      	ldr	r3, [r7, #4]
 80824d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80824d2:	68fb      	ldr	r3, [r7, #12]
 80824d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80824d8:	d005      	beq.n	80824e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80824da:	4b0a      	ldr	r3, [pc, #40]	; (8082504 <HAL_Delay+0x44>)
 80824dc:	781b      	ldrb	r3, [r3, #0]
 80824de:	461a      	mov	r2, r3
 80824e0:	68fb      	ldr	r3, [r7, #12]
 80824e2:	4413      	add	r3, r2
 80824e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80824e6:	bf00      	nop
 80824e8:	f7ff ffde 	bl	80824a8 <HAL_GetTick>
 80824ec:	4602      	mov	r2, r0
 80824ee:	68bb      	ldr	r3, [r7, #8]
 80824f0:	1ad3      	subs	r3, r2, r3
 80824f2:	68fa      	ldr	r2, [r7, #12]
 80824f4:	429a      	cmp	r2, r3
 80824f6:	d8f7      	bhi.n	80824e8 <HAL_Delay+0x28>
  {
  }
}
 80824f8:	bf00      	nop
 80824fa:	bf00      	nop
 80824fc:	3710      	adds	r7, #16
 80824fe:	46bd      	mov	sp, r7
 8082500:	bd80      	pop	{r7, pc}
 8082502:	bf00      	nop
 8082504:	20000088 	.word	0x20000088

08082508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8082508:	b480      	push	{r7}
 808250a:	b085      	sub	sp, #20
 808250c:	af00      	add	r7, sp, #0
 808250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8082510:	687b      	ldr	r3, [r7, #4]
 8082512:	f003 0307 	and.w	r3, r3, #7
 8082516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8082518:	4b0c      	ldr	r3, [pc, #48]	; (808254c <__NVIC_SetPriorityGrouping+0x44>)
 808251a:	68db      	ldr	r3, [r3, #12]
 808251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 808251e:	68ba      	ldr	r2, [r7, #8]
 8082520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8082524:	4013      	ands	r3, r2
 8082526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8082528:	68fb      	ldr	r3, [r7, #12]
 808252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 808252c:	68bb      	ldr	r3, [r7, #8]
 808252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8082530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8082534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8082538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 808253a:	4a04      	ldr	r2, [pc, #16]	; (808254c <__NVIC_SetPriorityGrouping+0x44>)
 808253c:	68bb      	ldr	r3, [r7, #8]
 808253e:	60d3      	str	r3, [r2, #12]
}
 8082540:	bf00      	nop
 8082542:	3714      	adds	r7, #20
 8082544:	46bd      	mov	sp, r7
 8082546:	f85d 7b04 	ldr.w	r7, [sp], #4
 808254a:	4770      	bx	lr
 808254c:	e000ed00 	.word	0xe000ed00

08082550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8082550:	b480      	push	{r7}
 8082552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8082554:	4b04      	ldr	r3, [pc, #16]	; (8082568 <__NVIC_GetPriorityGrouping+0x18>)
 8082556:	68db      	ldr	r3, [r3, #12]
 8082558:	0a1b      	lsrs	r3, r3, #8
 808255a:	f003 0307 	and.w	r3, r3, #7
}
 808255e:	4618      	mov	r0, r3
 8082560:	46bd      	mov	sp, r7
 8082562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082566:	4770      	bx	lr
 8082568:	e000ed00 	.word	0xe000ed00

0808256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 808256c:	b480      	push	{r7}
 808256e:	b083      	sub	sp, #12
 8082570:	af00      	add	r7, sp, #0
 8082572:	4603      	mov	r3, r0
 8082574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8082576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808257a:	2b00      	cmp	r3, #0
 808257c:	db0b      	blt.n	8082596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 808257e:	79fb      	ldrb	r3, [r7, #7]
 8082580:	f003 021f 	and.w	r2, r3, #31
 8082584:	4907      	ldr	r1, [pc, #28]	; (80825a4 <__NVIC_EnableIRQ+0x38>)
 8082586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 808258a:	095b      	lsrs	r3, r3, #5
 808258c:	2001      	movs	r0, #1
 808258e:	fa00 f202 	lsl.w	r2, r0, r2
 8082592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8082596:	bf00      	nop
 8082598:	370c      	adds	r7, #12
 808259a:	46bd      	mov	sp, r7
 808259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80825a0:	4770      	bx	lr
 80825a2:	bf00      	nop
 80825a4:	e000e100 	.word	0xe000e100

080825a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80825a8:	b480      	push	{r7}
 80825aa:	b083      	sub	sp, #12
 80825ac:	af00      	add	r7, sp, #0
 80825ae:	4603      	mov	r3, r0
 80825b0:	6039      	str	r1, [r7, #0]
 80825b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80825b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80825b8:	2b00      	cmp	r3, #0
 80825ba:	db0a      	blt.n	80825d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80825bc:	683b      	ldr	r3, [r7, #0]
 80825be:	b2da      	uxtb	r2, r3
 80825c0:	490c      	ldr	r1, [pc, #48]	; (80825f4 <__NVIC_SetPriority+0x4c>)
 80825c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80825c6:	0112      	lsls	r2, r2, #4
 80825c8:	b2d2      	uxtb	r2, r2
 80825ca:	440b      	add	r3, r1
 80825cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80825d0:	e00a      	b.n	80825e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80825d2:	683b      	ldr	r3, [r7, #0]
 80825d4:	b2da      	uxtb	r2, r3
 80825d6:	4908      	ldr	r1, [pc, #32]	; (80825f8 <__NVIC_SetPriority+0x50>)
 80825d8:	79fb      	ldrb	r3, [r7, #7]
 80825da:	f003 030f 	and.w	r3, r3, #15
 80825de:	3b04      	subs	r3, #4
 80825e0:	0112      	lsls	r2, r2, #4
 80825e2:	b2d2      	uxtb	r2, r2
 80825e4:	440b      	add	r3, r1
 80825e6:	761a      	strb	r2, [r3, #24]
}
 80825e8:	bf00      	nop
 80825ea:	370c      	adds	r7, #12
 80825ec:	46bd      	mov	sp, r7
 80825ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80825f2:	4770      	bx	lr
 80825f4:	e000e100 	.word	0xe000e100
 80825f8:	e000ed00 	.word	0xe000ed00

080825fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80825fc:	b480      	push	{r7}
 80825fe:	b089      	sub	sp, #36	; 0x24
 8082600:	af00      	add	r7, sp, #0
 8082602:	60f8      	str	r0, [r7, #12]
 8082604:	60b9      	str	r1, [r7, #8]
 8082606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8082608:	68fb      	ldr	r3, [r7, #12]
 808260a:	f003 0307 	and.w	r3, r3, #7
 808260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8082610:	69fb      	ldr	r3, [r7, #28]
 8082612:	f1c3 0307 	rsb	r3, r3, #7
 8082616:	2b04      	cmp	r3, #4
 8082618:	bf28      	it	cs
 808261a:	2304      	movcs	r3, #4
 808261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 808261e:	69fb      	ldr	r3, [r7, #28]
 8082620:	3304      	adds	r3, #4
 8082622:	2b06      	cmp	r3, #6
 8082624:	d902      	bls.n	808262c <NVIC_EncodePriority+0x30>
 8082626:	69fb      	ldr	r3, [r7, #28]
 8082628:	3b03      	subs	r3, #3
 808262a:	e000      	b.n	808262e <NVIC_EncodePriority+0x32>
 808262c:	2300      	movs	r3, #0
 808262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8082630:	f04f 32ff 	mov.w	r2, #4294967295
 8082634:	69bb      	ldr	r3, [r7, #24]
 8082636:	fa02 f303 	lsl.w	r3, r2, r3
 808263a:	43da      	mvns	r2, r3
 808263c:	68bb      	ldr	r3, [r7, #8]
 808263e:	401a      	ands	r2, r3
 8082640:	697b      	ldr	r3, [r7, #20]
 8082642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8082644:	f04f 31ff 	mov.w	r1, #4294967295
 8082648:	697b      	ldr	r3, [r7, #20]
 808264a:	fa01 f303 	lsl.w	r3, r1, r3
 808264e:	43d9      	mvns	r1, r3
 8082650:	687b      	ldr	r3, [r7, #4]
 8082652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8082654:	4313      	orrs	r3, r2
         );
}
 8082656:	4618      	mov	r0, r3
 8082658:	3724      	adds	r7, #36	; 0x24
 808265a:	46bd      	mov	sp, r7
 808265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082660:	4770      	bx	lr
	...

08082664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8082664:	b580      	push	{r7, lr}
 8082666:	b082      	sub	sp, #8
 8082668:	af00      	add	r7, sp, #0
 808266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 808266c:	687b      	ldr	r3, [r7, #4]
 808266e:	3b01      	subs	r3, #1
 8082670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8082674:	d301      	bcc.n	808267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8082676:	2301      	movs	r3, #1
 8082678:	e00f      	b.n	808269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 808267a:	4a0a      	ldr	r2, [pc, #40]	; (80826a4 <SysTick_Config+0x40>)
 808267c:	687b      	ldr	r3, [r7, #4]
 808267e:	3b01      	subs	r3, #1
 8082680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8082682:	210f      	movs	r1, #15
 8082684:	f04f 30ff 	mov.w	r0, #4294967295
 8082688:	f7ff ff8e 	bl	80825a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 808268c:	4b05      	ldr	r3, [pc, #20]	; (80826a4 <SysTick_Config+0x40>)
 808268e:	2200      	movs	r2, #0
 8082690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8082692:	4b04      	ldr	r3, [pc, #16]	; (80826a4 <SysTick_Config+0x40>)
 8082694:	2207      	movs	r2, #7
 8082696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8082698:	2300      	movs	r3, #0
}
 808269a:	4618      	mov	r0, r3
 808269c:	3708      	adds	r7, #8
 808269e:	46bd      	mov	sp, r7
 80826a0:	bd80      	pop	{r7, pc}
 80826a2:	bf00      	nop
 80826a4:	e000e010 	.word	0xe000e010

080826a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80826a8:	b580      	push	{r7, lr}
 80826aa:	b082      	sub	sp, #8
 80826ac:	af00      	add	r7, sp, #0
 80826ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80826b0:	6878      	ldr	r0, [r7, #4]
 80826b2:	f7ff ff29 	bl	8082508 <__NVIC_SetPriorityGrouping>
}
 80826b6:	bf00      	nop
 80826b8:	3708      	adds	r7, #8
 80826ba:	46bd      	mov	sp, r7
 80826bc:	bd80      	pop	{r7, pc}

080826be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80826be:	b580      	push	{r7, lr}
 80826c0:	b086      	sub	sp, #24
 80826c2:	af00      	add	r7, sp, #0
 80826c4:	4603      	mov	r3, r0
 80826c6:	60b9      	str	r1, [r7, #8]
 80826c8:	607a      	str	r2, [r7, #4]
 80826ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80826cc:	2300      	movs	r3, #0
 80826ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80826d0:	f7ff ff3e 	bl	8082550 <__NVIC_GetPriorityGrouping>
 80826d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80826d6:	687a      	ldr	r2, [r7, #4]
 80826d8:	68b9      	ldr	r1, [r7, #8]
 80826da:	6978      	ldr	r0, [r7, #20]
 80826dc:	f7ff ff8e 	bl	80825fc <NVIC_EncodePriority>
 80826e0:	4602      	mov	r2, r0
 80826e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80826e6:	4611      	mov	r1, r2
 80826e8:	4618      	mov	r0, r3
 80826ea:	f7ff ff5d 	bl	80825a8 <__NVIC_SetPriority>
}
 80826ee:	bf00      	nop
 80826f0:	3718      	adds	r7, #24
 80826f2:	46bd      	mov	sp, r7
 80826f4:	bd80      	pop	{r7, pc}

080826f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80826f6:	b580      	push	{r7, lr}
 80826f8:	b082      	sub	sp, #8
 80826fa:	af00      	add	r7, sp, #0
 80826fc:	4603      	mov	r3, r0
 80826fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8082700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8082704:	4618      	mov	r0, r3
 8082706:	f7ff ff31 	bl	808256c <__NVIC_EnableIRQ>
}
 808270a:	bf00      	nop
 808270c:	3708      	adds	r7, #8
 808270e:	46bd      	mov	sp, r7
 8082710:	bd80      	pop	{r7, pc}

08082712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8082712:	b580      	push	{r7, lr}
 8082714:	b082      	sub	sp, #8
 8082716:	af00      	add	r7, sp, #0
 8082718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 808271a:	6878      	ldr	r0, [r7, #4]
 808271c:	f7ff ffa2 	bl	8082664 <SysTick_Config>
 8082720:	4603      	mov	r3, r0
}
 8082722:	4618      	mov	r0, r3
 8082724:	3708      	adds	r7, #8
 8082726:	46bd      	mov	sp, r7
 8082728:	bd80      	pop	{r7, pc}
	...

0808272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 808272c:	b580      	push	{r7, lr}
 808272e:	b086      	sub	sp, #24
 8082730:	af00      	add	r7, sp, #0
 8082732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8082734:	2300      	movs	r3, #0
 8082736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8082738:	f7ff feb6 	bl	80824a8 <HAL_GetTick>
 808273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 808273e:	687b      	ldr	r3, [r7, #4]
 8082740:	2b00      	cmp	r3, #0
 8082742:	d101      	bne.n	8082748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8082744:	2301      	movs	r3, #1
 8082746:	e099      	b.n	808287c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8082748:	687b      	ldr	r3, [r7, #4]
 808274a:	2202      	movs	r2, #2
 808274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8082750:	687b      	ldr	r3, [r7, #4]
 8082752:	2200      	movs	r2, #0
 8082754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8082758:	687b      	ldr	r3, [r7, #4]
 808275a:	681b      	ldr	r3, [r3, #0]
 808275c:	681a      	ldr	r2, [r3, #0]
 808275e:	687b      	ldr	r3, [r7, #4]
 8082760:	681b      	ldr	r3, [r3, #0]
 8082762:	f022 0201 	bic.w	r2, r2, #1
 8082766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8082768:	e00f      	b.n	808278a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 808276a:	f7ff fe9d 	bl	80824a8 <HAL_GetTick>
 808276e:	4602      	mov	r2, r0
 8082770:	693b      	ldr	r3, [r7, #16]
 8082772:	1ad3      	subs	r3, r2, r3
 8082774:	2b05      	cmp	r3, #5
 8082776:	d908      	bls.n	808278a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8082778:	687b      	ldr	r3, [r7, #4]
 808277a:	2220      	movs	r2, #32
 808277c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 808277e:	687b      	ldr	r3, [r7, #4]
 8082780:	2203      	movs	r2, #3
 8082782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8082786:	2303      	movs	r3, #3
 8082788:	e078      	b.n	808287c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 808278a:	687b      	ldr	r3, [r7, #4]
 808278c:	681b      	ldr	r3, [r3, #0]
 808278e:	681b      	ldr	r3, [r3, #0]
 8082790:	f003 0301 	and.w	r3, r3, #1
 8082794:	2b00      	cmp	r3, #0
 8082796:	d1e8      	bne.n	808276a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8082798:	687b      	ldr	r3, [r7, #4]
 808279a:	681b      	ldr	r3, [r3, #0]
 808279c:	681b      	ldr	r3, [r3, #0]
 808279e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80827a0:	697a      	ldr	r2, [r7, #20]
 80827a2:	4b38      	ldr	r3, [pc, #224]	; (8082884 <HAL_DMA_Init+0x158>)
 80827a4:	4013      	ands	r3, r2
 80827a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80827a8:	687b      	ldr	r3, [r7, #4]
 80827aa:	685a      	ldr	r2, [r3, #4]
 80827ac:	687b      	ldr	r3, [r7, #4]
 80827ae:	689b      	ldr	r3, [r3, #8]
 80827b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80827b2:	687b      	ldr	r3, [r7, #4]
 80827b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80827b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80827b8:	687b      	ldr	r3, [r7, #4]
 80827ba:	691b      	ldr	r3, [r3, #16]
 80827bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80827be:	687b      	ldr	r3, [r7, #4]
 80827c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80827c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80827c4:	687b      	ldr	r3, [r7, #4]
 80827c6:	699b      	ldr	r3, [r3, #24]
 80827c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80827ca:	687b      	ldr	r3, [r7, #4]
 80827cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80827ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80827d0:	687b      	ldr	r3, [r7, #4]
 80827d2:	6a1b      	ldr	r3, [r3, #32]
 80827d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80827d6:	697a      	ldr	r2, [r7, #20]
 80827d8:	4313      	orrs	r3, r2
 80827da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80827dc:	687b      	ldr	r3, [r7, #4]
 80827de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80827e0:	2b04      	cmp	r3, #4
 80827e2:	d107      	bne.n	80827f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80827e4:	687b      	ldr	r3, [r7, #4]
 80827e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80827e8:	687b      	ldr	r3, [r7, #4]
 80827ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80827ec:	4313      	orrs	r3, r2
 80827ee:	697a      	ldr	r2, [r7, #20]
 80827f0:	4313      	orrs	r3, r2
 80827f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80827f4:	687b      	ldr	r3, [r7, #4]
 80827f6:	681b      	ldr	r3, [r3, #0]
 80827f8:	697a      	ldr	r2, [r7, #20]
 80827fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80827fc:	687b      	ldr	r3, [r7, #4]
 80827fe:	681b      	ldr	r3, [r3, #0]
 8082800:	695b      	ldr	r3, [r3, #20]
 8082802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8082804:	697b      	ldr	r3, [r7, #20]
 8082806:	f023 0307 	bic.w	r3, r3, #7
 808280a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 808280c:	687b      	ldr	r3, [r7, #4]
 808280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082810:	697a      	ldr	r2, [r7, #20]
 8082812:	4313      	orrs	r3, r2
 8082814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8082816:	687b      	ldr	r3, [r7, #4]
 8082818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808281a:	2b04      	cmp	r3, #4
 808281c:	d117      	bne.n	808284e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 808281e:	687b      	ldr	r3, [r7, #4]
 8082820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082822:	697a      	ldr	r2, [r7, #20]
 8082824:	4313      	orrs	r3, r2
 8082826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8082828:	687b      	ldr	r3, [r7, #4]
 808282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808282c:	2b00      	cmp	r3, #0
 808282e:	d00e      	beq.n	808284e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8082830:	6878      	ldr	r0, [r7, #4]
 8082832:	f000 fb01 	bl	8082e38 <DMA_CheckFifoParam>
 8082836:	4603      	mov	r3, r0
 8082838:	2b00      	cmp	r3, #0
 808283a:	d008      	beq.n	808284e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 808283c:	687b      	ldr	r3, [r7, #4]
 808283e:	2240      	movs	r2, #64	; 0x40
 8082840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8082842:	687b      	ldr	r3, [r7, #4]
 8082844:	2201      	movs	r2, #1
 8082846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 808284a:	2301      	movs	r3, #1
 808284c:	e016      	b.n	808287c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 808284e:	687b      	ldr	r3, [r7, #4]
 8082850:	681b      	ldr	r3, [r3, #0]
 8082852:	697a      	ldr	r2, [r7, #20]
 8082854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8082856:	6878      	ldr	r0, [r7, #4]
 8082858:	f000 fab8 	bl	8082dcc <DMA_CalcBaseAndBitshift>
 808285c:	4603      	mov	r3, r0
 808285e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082860:	687b      	ldr	r3, [r7, #4]
 8082862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082864:	223f      	movs	r2, #63	; 0x3f
 8082866:	409a      	lsls	r2, r3
 8082868:	68fb      	ldr	r3, [r7, #12]
 808286a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 808286c:	687b      	ldr	r3, [r7, #4]
 808286e:	2200      	movs	r2, #0
 8082870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8082872:	687b      	ldr	r3, [r7, #4]
 8082874:	2201      	movs	r2, #1
 8082876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 808287a:	2300      	movs	r3, #0
}
 808287c:	4618      	mov	r0, r3
 808287e:	3718      	adds	r7, #24
 8082880:	46bd      	mov	sp, r7
 8082882:	bd80      	pop	{r7, pc}
 8082884:	f010803f 	.word	0xf010803f

08082888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8082888:	b580      	push	{r7, lr}
 808288a:	b086      	sub	sp, #24
 808288c:	af00      	add	r7, sp, #0
 808288e:	60f8      	str	r0, [r7, #12]
 8082890:	60b9      	str	r1, [r7, #8]
 8082892:	607a      	str	r2, [r7, #4]
 8082894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8082896:	2300      	movs	r3, #0
 8082898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 808289a:	68fb      	ldr	r3, [r7, #12]
 808289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808289e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80828a0:	68fb      	ldr	r3, [r7, #12]
 80828a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80828a6:	2b01      	cmp	r3, #1
 80828a8:	d101      	bne.n	80828ae <HAL_DMA_Start_IT+0x26>
 80828aa:	2302      	movs	r3, #2
 80828ac:	e040      	b.n	8082930 <HAL_DMA_Start_IT+0xa8>
 80828ae:	68fb      	ldr	r3, [r7, #12]
 80828b0:	2201      	movs	r2, #1
 80828b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80828b6:	68fb      	ldr	r3, [r7, #12]
 80828b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80828bc:	b2db      	uxtb	r3, r3
 80828be:	2b01      	cmp	r3, #1
 80828c0:	d12f      	bne.n	8082922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80828c2:	68fb      	ldr	r3, [r7, #12]
 80828c4:	2202      	movs	r2, #2
 80828c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80828ca:	68fb      	ldr	r3, [r7, #12]
 80828cc:	2200      	movs	r2, #0
 80828ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80828d0:	683b      	ldr	r3, [r7, #0]
 80828d2:	687a      	ldr	r2, [r7, #4]
 80828d4:	68b9      	ldr	r1, [r7, #8]
 80828d6:	68f8      	ldr	r0, [r7, #12]
 80828d8:	f000 fa4a 	bl	8082d70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80828dc:	68fb      	ldr	r3, [r7, #12]
 80828de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80828e0:	223f      	movs	r2, #63	; 0x3f
 80828e2:	409a      	lsls	r2, r3
 80828e4:	693b      	ldr	r3, [r7, #16]
 80828e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80828e8:	68fb      	ldr	r3, [r7, #12]
 80828ea:	681b      	ldr	r3, [r3, #0]
 80828ec:	681a      	ldr	r2, [r3, #0]
 80828ee:	68fb      	ldr	r3, [r7, #12]
 80828f0:	681b      	ldr	r3, [r3, #0]
 80828f2:	f042 0216 	orr.w	r2, r2, #22
 80828f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80828f8:	68fb      	ldr	r3, [r7, #12]
 80828fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80828fc:	2b00      	cmp	r3, #0
 80828fe:	d007      	beq.n	8082910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8082900:	68fb      	ldr	r3, [r7, #12]
 8082902:	681b      	ldr	r3, [r3, #0]
 8082904:	681a      	ldr	r2, [r3, #0]
 8082906:	68fb      	ldr	r3, [r7, #12]
 8082908:	681b      	ldr	r3, [r3, #0]
 808290a:	f042 0208 	orr.w	r2, r2, #8
 808290e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8082910:	68fb      	ldr	r3, [r7, #12]
 8082912:	681b      	ldr	r3, [r3, #0]
 8082914:	681a      	ldr	r2, [r3, #0]
 8082916:	68fb      	ldr	r3, [r7, #12]
 8082918:	681b      	ldr	r3, [r3, #0]
 808291a:	f042 0201 	orr.w	r2, r2, #1
 808291e:	601a      	str	r2, [r3, #0]
 8082920:	e005      	b.n	808292e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8082922:	68fb      	ldr	r3, [r7, #12]
 8082924:	2200      	movs	r2, #0
 8082926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 808292a:	2302      	movs	r3, #2
 808292c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 808292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8082930:	4618      	mov	r0, r3
 8082932:	3718      	adds	r7, #24
 8082934:	46bd      	mov	sp, r7
 8082936:	bd80      	pop	{r7, pc}

08082938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8082938:	b580      	push	{r7, lr}
 808293a:	b084      	sub	sp, #16
 808293c:	af00      	add	r7, sp, #0
 808293e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8082940:	687b      	ldr	r3, [r7, #4]
 8082942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8082946:	f7ff fdaf 	bl	80824a8 <HAL_GetTick>
 808294a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 808294c:	687b      	ldr	r3, [r7, #4]
 808294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082952:	b2db      	uxtb	r3, r3
 8082954:	2b02      	cmp	r3, #2
 8082956:	d008      	beq.n	808296a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8082958:	687b      	ldr	r3, [r7, #4]
 808295a:	2280      	movs	r2, #128	; 0x80
 808295c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 808295e:	687b      	ldr	r3, [r7, #4]
 8082960:	2200      	movs	r2, #0
 8082962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8082966:	2301      	movs	r3, #1
 8082968:	e052      	b.n	8082a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 808296a:	687b      	ldr	r3, [r7, #4]
 808296c:	681b      	ldr	r3, [r3, #0]
 808296e:	681a      	ldr	r2, [r3, #0]
 8082970:	687b      	ldr	r3, [r7, #4]
 8082972:	681b      	ldr	r3, [r3, #0]
 8082974:	f022 0216 	bic.w	r2, r2, #22
 8082978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 808297a:	687b      	ldr	r3, [r7, #4]
 808297c:	681b      	ldr	r3, [r3, #0]
 808297e:	695a      	ldr	r2, [r3, #20]
 8082980:	687b      	ldr	r3, [r7, #4]
 8082982:	681b      	ldr	r3, [r3, #0]
 8082984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8082988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 808298a:	687b      	ldr	r3, [r7, #4]
 808298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808298e:	2b00      	cmp	r3, #0
 8082990:	d103      	bne.n	808299a <HAL_DMA_Abort+0x62>
 8082992:	687b      	ldr	r3, [r7, #4]
 8082994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082996:	2b00      	cmp	r3, #0
 8082998:	d007      	beq.n	80829aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 808299a:	687b      	ldr	r3, [r7, #4]
 808299c:	681b      	ldr	r3, [r3, #0]
 808299e:	681a      	ldr	r2, [r3, #0]
 80829a0:	687b      	ldr	r3, [r7, #4]
 80829a2:	681b      	ldr	r3, [r3, #0]
 80829a4:	f022 0208 	bic.w	r2, r2, #8
 80829a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80829aa:	687b      	ldr	r3, [r7, #4]
 80829ac:	681b      	ldr	r3, [r3, #0]
 80829ae:	681a      	ldr	r2, [r3, #0]
 80829b0:	687b      	ldr	r3, [r7, #4]
 80829b2:	681b      	ldr	r3, [r3, #0]
 80829b4:	f022 0201 	bic.w	r2, r2, #1
 80829b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80829ba:	e013      	b.n	80829e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80829bc:	f7ff fd74 	bl	80824a8 <HAL_GetTick>
 80829c0:	4602      	mov	r2, r0
 80829c2:	68bb      	ldr	r3, [r7, #8]
 80829c4:	1ad3      	subs	r3, r2, r3
 80829c6:	2b05      	cmp	r3, #5
 80829c8:	d90c      	bls.n	80829e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80829ca:	687b      	ldr	r3, [r7, #4]
 80829cc:	2220      	movs	r2, #32
 80829ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80829d0:	687b      	ldr	r3, [r7, #4]
 80829d2:	2203      	movs	r2, #3
 80829d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80829d8:	687b      	ldr	r3, [r7, #4]
 80829da:	2200      	movs	r2, #0
 80829dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80829e0:	2303      	movs	r3, #3
 80829e2:	e015      	b.n	8082a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80829e4:	687b      	ldr	r3, [r7, #4]
 80829e6:	681b      	ldr	r3, [r3, #0]
 80829e8:	681b      	ldr	r3, [r3, #0]
 80829ea:	f003 0301 	and.w	r3, r3, #1
 80829ee:	2b00      	cmp	r3, #0
 80829f0:	d1e4      	bne.n	80829bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80829f2:	687b      	ldr	r3, [r7, #4]
 80829f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80829f6:	223f      	movs	r2, #63	; 0x3f
 80829f8:	409a      	lsls	r2, r3
 80829fa:	68fb      	ldr	r3, [r7, #12]
 80829fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80829fe:	687b      	ldr	r3, [r7, #4]
 8082a00:	2201      	movs	r2, #1
 8082a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8082a06:	687b      	ldr	r3, [r7, #4]
 8082a08:	2200      	movs	r2, #0
 8082a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8082a0e:	2300      	movs	r3, #0
}
 8082a10:	4618      	mov	r0, r3
 8082a12:	3710      	adds	r7, #16
 8082a14:	46bd      	mov	sp, r7
 8082a16:	bd80      	pop	{r7, pc}

08082a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8082a18:	b480      	push	{r7}
 8082a1a:	b083      	sub	sp, #12
 8082a1c:	af00      	add	r7, sp, #0
 8082a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8082a20:	687b      	ldr	r3, [r7, #4]
 8082a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082a26:	b2db      	uxtb	r3, r3
 8082a28:	2b02      	cmp	r3, #2
 8082a2a:	d004      	beq.n	8082a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8082a2c:	687b      	ldr	r3, [r7, #4]
 8082a2e:	2280      	movs	r2, #128	; 0x80
 8082a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8082a32:	2301      	movs	r3, #1
 8082a34:	e00c      	b.n	8082a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8082a36:	687b      	ldr	r3, [r7, #4]
 8082a38:	2205      	movs	r2, #5
 8082a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8082a3e:	687b      	ldr	r3, [r7, #4]
 8082a40:	681b      	ldr	r3, [r3, #0]
 8082a42:	681a      	ldr	r2, [r3, #0]
 8082a44:	687b      	ldr	r3, [r7, #4]
 8082a46:	681b      	ldr	r3, [r3, #0]
 8082a48:	f022 0201 	bic.w	r2, r2, #1
 8082a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8082a4e:	2300      	movs	r3, #0
}
 8082a50:	4618      	mov	r0, r3
 8082a52:	370c      	adds	r7, #12
 8082a54:	46bd      	mov	sp, r7
 8082a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082a5a:	4770      	bx	lr

08082a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8082a5c:	b580      	push	{r7, lr}
 8082a5e:	b086      	sub	sp, #24
 8082a60:	af00      	add	r7, sp, #0
 8082a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8082a64:	2300      	movs	r3, #0
 8082a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8082a68:	4b8e      	ldr	r3, [pc, #568]	; (8082ca4 <HAL_DMA_IRQHandler+0x248>)
 8082a6a:	681b      	ldr	r3, [r3, #0]
 8082a6c:	4a8e      	ldr	r2, [pc, #568]	; (8082ca8 <HAL_DMA_IRQHandler+0x24c>)
 8082a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8082a72:	0a9b      	lsrs	r3, r3, #10
 8082a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8082a76:	687b      	ldr	r3, [r7, #4]
 8082a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8082a7c:	693b      	ldr	r3, [r7, #16]
 8082a7e:	681b      	ldr	r3, [r3, #0]
 8082a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8082a82:	687b      	ldr	r3, [r7, #4]
 8082a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082a86:	2208      	movs	r2, #8
 8082a88:	409a      	lsls	r2, r3
 8082a8a:	68fb      	ldr	r3, [r7, #12]
 8082a8c:	4013      	ands	r3, r2
 8082a8e:	2b00      	cmp	r3, #0
 8082a90:	d01a      	beq.n	8082ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8082a92:	687b      	ldr	r3, [r7, #4]
 8082a94:	681b      	ldr	r3, [r3, #0]
 8082a96:	681b      	ldr	r3, [r3, #0]
 8082a98:	f003 0304 	and.w	r3, r3, #4
 8082a9c:	2b00      	cmp	r3, #0
 8082a9e:	d013      	beq.n	8082ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8082aa0:	687b      	ldr	r3, [r7, #4]
 8082aa2:	681b      	ldr	r3, [r3, #0]
 8082aa4:	681a      	ldr	r2, [r3, #0]
 8082aa6:	687b      	ldr	r3, [r7, #4]
 8082aa8:	681b      	ldr	r3, [r3, #0]
 8082aaa:	f022 0204 	bic.w	r2, r2, #4
 8082aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8082ab0:	687b      	ldr	r3, [r7, #4]
 8082ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082ab4:	2208      	movs	r2, #8
 8082ab6:	409a      	lsls	r2, r3
 8082ab8:	693b      	ldr	r3, [r7, #16]
 8082aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8082abc:	687b      	ldr	r3, [r7, #4]
 8082abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082ac0:	f043 0201 	orr.w	r2, r3, #1
 8082ac4:	687b      	ldr	r3, [r7, #4]
 8082ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8082ac8:	687b      	ldr	r3, [r7, #4]
 8082aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082acc:	2201      	movs	r2, #1
 8082ace:	409a      	lsls	r2, r3
 8082ad0:	68fb      	ldr	r3, [r7, #12]
 8082ad2:	4013      	ands	r3, r2
 8082ad4:	2b00      	cmp	r3, #0
 8082ad6:	d012      	beq.n	8082afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8082ad8:	687b      	ldr	r3, [r7, #4]
 8082ada:	681b      	ldr	r3, [r3, #0]
 8082adc:	695b      	ldr	r3, [r3, #20]
 8082ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8082ae2:	2b00      	cmp	r3, #0
 8082ae4:	d00b      	beq.n	8082afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8082ae6:	687b      	ldr	r3, [r7, #4]
 8082ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082aea:	2201      	movs	r2, #1
 8082aec:	409a      	lsls	r2, r3
 8082aee:	693b      	ldr	r3, [r7, #16]
 8082af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8082af2:	687b      	ldr	r3, [r7, #4]
 8082af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082af6:	f043 0202 	orr.w	r2, r3, #2
 8082afa:	687b      	ldr	r3, [r7, #4]
 8082afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8082afe:	687b      	ldr	r3, [r7, #4]
 8082b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082b02:	2204      	movs	r2, #4
 8082b04:	409a      	lsls	r2, r3
 8082b06:	68fb      	ldr	r3, [r7, #12]
 8082b08:	4013      	ands	r3, r2
 8082b0a:	2b00      	cmp	r3, #0
 8082b0c:	d012      	beq.n	8082b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8082b0e:	687b      	ldr	r3, [r7, #4]
 8082b10:	681b      	ldr	r3, [r3, #0]
 8082b12:	681b      	ldr	r3, [r3, #0]
 8082b14:	f003 0302 	and.w	r3, r3, #2
 8082b18:	2b00      	cmp	r3, #0
 8082b1a:	d00b      	beq.n	8082b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8082b1c:	687b      	ldr	r3, [r7, #4]
 8082b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082b20:	2204      	movs	r2, #4
 8082b22:	409a      	lsls	r2, r3
 8082b24:	693b      	ldr	r3, [r7, #16]
 8082b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8082b28:	687b      	ldr	r3, [r7, #4]
 8082b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082b2c:	f043 0204 	orr.w	r2, r3, #4
 8082b30:	687b      	ldr	r3, [r7, #4]
 8082b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8082b34:	687b      	ldr	r3, [r7, #4]
 8082b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082b38:	2210      	movs	r2, #16
 8082b3a:	409a      	lsls	r2, r3
 8082b3c:	68fb      	ldr	r3, [r7, #12]
 8082b3e:	4013      	ands	r3, r2
 8082b40:	2b00      	cmp	r3, #0
 8082b42:	d043      	beq.n	8082bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8082b44:	687b      	ldr	r3, [r7, #4]
 8082b46:	681b      	ldr	r3, [r3, #0]
 8082b48:	681b      	ldr	r3, [r3, #0]
 8082b4a:	f003 0308 	and.w	r3, r3, #8
 8082b4e:	2b00      	cmp	r3, #0
 8082b50:	d03c      	beq.n	8082bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8082b52:	687b      	ldr	r3, [r7, #4]
 8082b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082b56:	2210      	movs	r2, #16
 8082b58:	409a      	lsls	r2, r3
 8082b5a:	693b      	ldr	r3, [r7, #16]
 8082b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8082b5e:	687b      	ldr	r3, [r7, #4]
 8082b60:	681b      	ldr	r3, [r3, #0]
 8082b62:	681b      	ldr	r3, [r3, #0]
 8082b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082b68:	2b00      	cmp	r3, #0
 8082b6a:	d018      	beq.n	8082b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8082b6c:	687b      	ldr	r3, [r7, #4]
 8082b6e:	681b      	ldr	r3, [r3, #0]
 8082b70:	681b      	ldr	r3, [r3, #0]
 8082b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8082b76:	2b00      	cmp	r3, #0
 8082b78:	d108      	bne.n	8082b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8082b7a:	687b      	ldr	r3, [r7, #4]
 8082b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082b7e:	2b00      	cmp	r3, #0
 8082b80:	d024      	beq.n	8082bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8082b82:	687b      	ldr	r3, [r7, #4]
 8082b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082b86:	6878      	ldr	r0, [r7, #4]
 8082b88:	4798      	blx	r3
 8082b8a:	e01f      	b.n	8082bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8082b8c:	687b      	ldr	r3, [r7, #4]
 8082b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082b90:	2b00      	cmp	r3, #0
 8082b92:	d01b      	beq.n	8082bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8082b94:	687b      	ldr	r3, [r7, #4]
 8082b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082b98:	6878      	ldr	r0, [r7, #4]
 8082b9a:	4798      	blx	r3
 8082b9c:	e016      	b.n	8082bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8082b9e:	687b      	ldr	r3, [r7, #4]
 8082ba0:	681b      	ldr	r3, [r3, #0]
 8082ba2:	681b      	ldr	r3, [r3, #0]
 8082ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8082ba8:	2b00      	cmp	r3, #0
 8082baa:	d107      	bne.n	8082bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8082bac:	687b      	ldr	r3, [r7, #4]
 8082bae:	681b      	ldr	r3, [r3, #0]
 8082bb0:	681a      	ldr	r2, [r3, #0]
 8082bb2:	687b      	ldr	r3, [r7, #4]
 8082bb4:	681b      	ldr	r3, [r3, #0]
 8082bb6:	f022 0208 	bic.w	r2, r2, #8
 8082bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8082bbc:	687b      	ldr	r3, [r7, #4]
 8082bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082bc0:	2b00      	cmp	r3, #0
 8082bc2:	d003      	beq.n	8082bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8082bc4:	687b      	ldr	r3, [r7, #4]
 8082bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082bc8:	6878      	ldr	r0, [r7, #4]
 8082bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8082bcc:	687b      	ldr	r3, [r7, #4]
 8082bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082bd0:	2220      	movs	r2, #32
 8082bd2:	409a      	lsls	r2, r3
 8082bd4:	68fb      	ldr	r3, [r7, #12]
 8082bd6:	4013      	ands	r3, r2
 8082bd8:	2b00      	cmp	r3, #0
 8082bda:	f000 808f 	beq.w	8082cfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8082bde:	687b      	ldr	r3, [r7, #4]
 8082be0:	681b      	ldr	r3, [r3, #0]
 8082be2:	681b      	ldr	r3, [r3, #0]
 8082be4:	f003 0310 	and.w	r3, r3, #16
 8082be8:	2b00      	cmp	r3, #0
 8082bea:	f000 8087 	beq.w	8082cfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8082bee:	687b      	ldr	r3, [r7, #4]
 8082bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082bf2:	2220      	movs	r2, #32
 8082bf4:	409a      	lsls	r2, r3
 8082bf6:	693b      	ldr	r3, [r7, #16]
 8082bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8082bfa:	687b      	ldr	r3, [r7, #4]
 8082bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082c00:	b2db      	uxtb	r3, r3
 8082c02:	2b05      	cmp	r3, #5
 8082c04:	d136      	bne.n	8082c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8082c06:	687b      	ldr	r3, [r7, #4]
 8082c08:	681b      	ldr	r3, [r3, #0]
 8082c0a:	681a      	ldr	r2, [r3, #0]
 8082c0c:	687b      	ldr	r3, [r7, #4]
 8082c0e:	681b      	ldr	r3, [r3, #0]
 8082c10:	f022 0216 	bic.w	r2, r2, #22
 8082c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8082c16:	687b      	ldr	r3, [r7, #4]
 8082c18:	681b      	ldr	r3, [r3, #0]
 8082c1a:	695a      	ldr	r2, [r3, #20]
 8082c1c:	687b      	ldr	r3, [r7, #4]
 8082c1e:	681b      	ldr	r3, [r3, #0]
 8082c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8082c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8082c26:	687b      	ldr	r3, [r7, #4]
 8082c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082c2a:	2b00      	cmp	r3, #0
 8082c2c:	d103      	bne.n	8082c36 <HAL_DMA_IRQHandler+0x1da>
 8082c2e:	687b      	ldr	r3, [r7, #4]
 8082c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082c32:	2b00      	cmp	r3, #0
 8082c34:	d007      	beq.n	8082c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8082c36:	687b      	ldr	r3, [r7, #4]
 8082c38:	681b      	ldr	r3, [r3, #0]
 8082c3a:	681a      	ldr	r2, [r3, #0]
 8082c3c:	687b      	ldr	r3, [r7, #4]
 8082c3e:	681b      	ldr	r3, [r3, #0]
 8082c40:	f022 0208 	bic.w	r2, r2, #8
 8082c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082c46:	687b      	ldr	r3, [r7, #4]
 8082c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082c4a:	223f      	movs	r2, #63	; 0x3f
 8082c4c:	409a      	lsls	r2, r3
 8082c4e:	693b      	ldr	r3, [r7, #16]
 8082c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8082c52:	687b      	ldr	r3, [r7, #4]
 8082c54:	2201      	movs	r2, #1
 8082c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8082c5a:	687b      	ldr	r3, [r7, #4]
 8082c5c:	2200      	movs	r2, #0
 8082c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8082c62:	687b      	ldr	r3, [r7, #4]
 8082c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082c66:	2b00      	cmp	r3, #0
 8082c68:	d07e      	beq.n	8082d68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8082c6a:	687b      	ldr	r3, [r7, #4]
 8082c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082c6e:	6878      	ldr	r0, [r7, #4]
 8082c70:	4798      	blx	r3
        }
        return;
 8082c72:	e079      	b.n	8082d68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8082c74:	687b      	ldr	r3, [r7, #4]
 8082c76:	681b      	ldr	r3, [r3, #0]
 8082c78:	681b      	ldr	r3, [r3, #0]
 8082c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082c7e:	2b00      	cmp	r3, #0
 8082c80:	d01d      	beq.n	8082cbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8082c82:	687b      	ldr	r3, [r7, #4]
 8082c84:	681b      	ldr	r3, [r3, #0]
 8082c86:	681b      	ldr	r3, [r3, #0]
 8082c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8082c8c:	2b00      	cmp	r3, #0
 8082c8e:	d10d      	bne.n	8082cac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8082c90:	687b      	ldr	r3, [r7, #4]
 8082c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082c94:	2b00      	cmp	r3, #0
 8082c96:	d031      	beq.n	8082cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8082c98:	687b      	ldr	r3, [r7, #4]
 8082c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082c9c:	6878      	ldr	r0, [r7, #4]
 8082c9e:	4798      	blx	r3
 8082ca0:	e02c      	b.n	8082cfc <HAL_DMA_IRQHandler+0x2a0>
 8082ca2:	bf00      	nop
 8082ca4:	20000080 	.word	0x20000080
 8082ca8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8082cac:	687b      	ldr	r3, [r7, #4]
 8082cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082cb0:	2b00      	cmp	r3, #0
 8082cb2:	d023      	beq.n	8082cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8082cb4:	687b      	ldr	r3, [r7, #4]
 8082cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082cb8:	6878      	ldr	r0, [r7, #4]
 8082cba:	4798      	blx	r3
 8082cbc:	e01e      	b.n	8082cfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8082cbe:	687b      	ldr	r3, [r7, #4]
 8082cc0:	681b      	ldr	r3, [r3, #0]
 8082cc2:	681b      	ldr	r3, [r3, #0]
 8082cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8082cc8:	2b00      	cmp	r3, #0
 8082cca:	d10f      	bne.n	8082cec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8082ccc:	687b      	ldr	r3, [r7, #4]
 8082cce:	681b      	ldr	r3, [r3, #0]
 8082cd0:	681a      	ldr	r2, [r3, #0]
 8082cd2:	687b      	ldr	r3, [r7, #4]
 8082cd4:	681b      	ldr	r3, [r3, #0]
 8082cd6:	f022 0210 	bic.w	r2, r2, #16
 8082cda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8082cdc:	687b      	ldr	r3, [r7, #4]
 8082cde:	2201      	movs	r2, #1
 8082ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8082ce4:	687b      	ldr	r3, [r7, #4]
 8082ce6:	2200      	movs	r2, #0
 8082ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8082cec:	687b      	ldr	r3, [r7, #4]
 8082cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082cf0:	2b00      	cmp	r3, #0
 8082cf2:	d003      	beq.n	8082cfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8082cf4:	687b      	ldr	r3, [r7, #4]
 8082cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8082cf8:	6878      	ldr	r0, [r7, #4]
 8082cfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8082cfc:	687b      	ldr	r3, [r7, #4]
 8082cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082d00:	2b00      	cmp	r3, #0
 8082d02:	d032      	beq.n	8082d6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8082d04:	687b      	ldr	r3, [r7, #4]
 8082d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082d08:	f003 0301 	and.w	r3, r3, #1
 8082d0c:	2b00      	cmp	r3, #0
 8082d0e:	d022      	beq.n	8082d56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8082d10:	687b      	ldr	r3, [r7, #4]
 8082d12:	2205      	movs	r2, #5
 8082d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8082d18:	687b      	ldr	r3, [r7, #4]
 8082d1a:	681b      	ldr	r3, [r3, #0]
 8082d1c:	681a      	ldr	r2, [r3, #0]
 8082d1e:	687b      	ldr	r3, [r7, #4]
 8082d20:	681b      	ldr	r3, [r3, #0]
 8082d22:	f022 0201 	bic.w	r2, r2, #1
 8082d26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8082d28:	68bb      	ldr	r3, [r7, #8]
 8082d2a:	3301      	adds	r3, #1
 8082d2c:	60bb      	str	r3, [r7, #8]
 8082d2e:	697a      	ldr	r2, [r7, #20]
 8082d30:	429a      	cmp	r2, r3
 8082d32:	d307      	bcc.n	8082d44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8082d34:	687b      	ldr	r3, [r7, #4]
 8082d36:	681b      	ldr	r3, [r3, #0]
 8082d38:	681b      	ldr	r3, [r3, #0]
 8082d3a:	f003 0301 	and.w	r3, r3, #1
 8082d3e:	2b00      	cmp	r3, #0
 8082d40:	d1f2      	bne.n	8082d28 <HAL_DMA_IRQHandler+0x2cc>
 8082d42:	e000      	b.n	8082d46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8082d44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8082d46:	687b      	ldr	r3, [r7, #4]
 8082d48:	2201      	movs	r2, #1
 8082d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8082d4e:	687b      	ldr	r3, [r7, #4]
 8082d50:	2200      	movs	r2, #0
 8082d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8082d56:	687b      	ldr	r3, [r7, #4]
 8082d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082d5a:	2b00      	cmp	r3, #0
 8082d5c:	d005      	beq.n	8082d6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8082d5e:	687b      	ldr	r3, [r7, #4]
 8082d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082d62:	6878      	ldr	r0, [r7, #4]
 8082d64:	4798      	blx	r3
 8082d66:	e000      	b.n	8082d6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8082d68:	bf00      	nop
    }
  }
}
 8082d6a:	3718      	adds	r7, #24
 8082d6c:	46bd      	mov	sp, r7
 8082d6e:	bd80      	pop	{r7, pc}

08082d70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8082d70:	b480      	push	{r7}
 8082d72:	b085      	sub	sp, #20
 8082d74:	af00      	add	r7, sp, #0
 8082d76:	60f8      	str	r0, [r7, #12]
 8082d78:	60b9      	str	r1, [r7, #8]
 8082d7a:	607a      	str	r2, [r7, #4]
 8082d7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8082d7e:	68fb      	ldr	r3, [r7, #12]
 8082d80:	681b      	ldr	r3, [r3, #0]
 8082d82:	681a      	ldr	r2, [r3, #0]
 8082d84:	68fb      	ldr	r3, [r7, #12]
 8082d86:	681b      	ldr	r3, [r3, #0]
 8082d88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8082d8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8082d8e:	68fb      	ldr	r3, [r7, #12]
 8082d90:	681b      	ldr	r3, [r3, #0]
 8082d92:	683a      	ldr	r2, [r7, #0]
 8082d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8082d96:	68fb      	ldr	r3, [r7, #12]
 8082d98:	689b      	ldr	r3, [r3, #8]
 8082d9a:	2b40      	cmp	r3, #64	; 0x40
 8082d9c:	d108      	bne.n	8082db0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8082d9e:	68fb      	ldr	r3, [r7, #12]
 8082da0:	681b      	ldr	r3, [r3, #0]
 8082da2:	687a      	ldr	r2, [r7, #4]
 8082da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8082da6:	68fb      	ldr	r3, [r7, #12]
 8082da8:	681b      	ldr	r3, [r3, #0]
 8082daa:	68ba      	ldr	r2, [r7, #8]
 8082dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8082dae:	e007      	b.n	8082dc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8082db0:	68fb      	ldr	r3, [r7, #12]
 8082db2:	681b      	ldr	r3, [r3, #0]
 8082db4:	68ba      	ldr	r2, [r7, #8]
 8082db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8082db8:	68fb      	ldr	r3, [r7, #12]
 8082dba:	681b      	ldr	r3, [r3, #0]
 8082dbc:	687a      	ldr	r2, [r7, #4]
 8082dbe:	60da      	str	r2, [r3, #12]
}
 8082dc0:	bf00      	nop
 8082dc2:	3714      	adds	r7, #20
 8082dc4:	46bd      	mov	sp, r7
 8082dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082dca:	4770      	bx	lr

08082dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8082dcc:	b480      	push	{r7}
 8082dce:	b085      	sub	sp, #20
 8082dd0:	af00      	add	r7, sp, #0
 8082dd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8082dd4:	687b      	ldr	r3, [r7, #4]
 8082dd6:	681b      	ldr	r3, [r3, #0]
 8082dd8:	b2db      	uxtb	r3, r3
 8082dda:	3b10      	subs	r3, #16
 8082ddc:	4a14      	ldr	r2, [pc, #80]	; (8082e30 <DMA_CalcBaseAndBitshift+0x64>)
 8082dde:	fba2 2303 	umull	r2, r3, r2, r3
 8082de2:	091b      	lsrs	r3, r3, #4
 8082de4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8082de6:	4a13      	ldr	r2, [pc, #76]	; (8082e34 <DMA_CalcBaseAndBitshift+0x68>)
 8082de8:	68fb      	ldr	r3, [r7, #12]
 8082dea:	4413      	add	r3, r2
 8082dec:	781b      	ldrb	r3, [r3, #0]
 8082dee:	461a      	mov	r2, r3
 8082df0:	687b      	ldr	r3, [r7, #4]
 8082df2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8082df4:	68fb      	ldr	r3, [r7, #12]
 8082df6:	2b03      	cmp	r3, #3
 8082df8:	d909      	bls.n	8082e0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8082dfa:	687b      	ldr	r3, [r7, #4]
 8082dfc:	681b      	ldr	r3, [r3, #0]
 8082dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8082e02:	f023 0303 	bic.w	r3, r3, #3
 8082e06:	1d1a      	adds	r2, r3, #4
 8082e08:	687b      	ldr	r3, [r7, #4]
 8082e0a:	659a      	str	r2, [r3, #88]	; 0x58
 8082e0c:	e007      	b.n	8082e1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8082e0e:	687b      	ldr	r3, [r7, #4]
 8082e10:	681b      	ldr	r3, [r3, #0]
 8082e12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8082e16:	f023 0303 	bic.w	r3, r3, #3
 8082e1a:	687a      	ldr	r2, [r7, #4]
 8082e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8082e1e:	687b      	ldr	r3, [r7, #4]
 8082e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8082e22:	4618      	mov	r0, r3
 8082e24:	3714      	adds	r7, #20
 8082e26:	46bd      	mov	sp, r7
 8082e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082e2c:	4770      	bx	lr
 8082e2e:	bf00      	nop
 8082e30:	aaaaaaab 	.word	0xaaaaaaab
 8082e34:	0808b508 	.word	0x0808b508

08082e38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8082e38:	b480      	push	{r7}
 8082e3a:	b085      	sub	sp, #20
 8082e3c:	af00      	add	r7, sp, #0
 8082e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8082e40:	2300      	movs	r3, #0
 8082e42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8082e44:	687b      	ldr	r3, [r7, #4]
 8082e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082e48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8082e4a:	687b      	ldr	r3, [r7, #4]
 8082e4c:	699b      	ldr	r3, [r3, #24]
 8082e4e:	2b00      	cmp	r3, #0
 8082e50:	d11f      	bne.n	8082e92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8082e52:	68bb      	ldr	r3, [r7, #8]
 8082e54:	2b03      	cmp	r3, #3
 8082e56:	d856      	bhi.n	8082f06 <DMA_CheckFifoParam+0xce>
 8082e58:	a201      	add	r2, pc, #4	; (adr r2, 8082e60 <DMA_CheckFifoParam+0x28>)
 8082e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8082e5e:	bf00      	nop
 8082e60:	08082e71 	.word	0x08082e71
 8082e64:	08082e83 	.word	0x08082e83
 8082e68:	08082e71 	.word	0x08082e71
 8082e6c:	08082f07 	.word	0x08082f07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8082e70:	687b      	ldr	r3, [r7, #4]
 8082e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8082e78:	2b00      	cmp	r3, #0
 8082e7a:	d046      	beq.n	8082f0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8082e7c:	2301      	movs	r3, #1
 8082e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082e80:	e043      	b.n	8082f0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8082e82:	687b      	ldr	r3, [r7, #4]
 8082e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082e86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8082e8a:	d140      	bne.n	8082f0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8082e8c:	2301      	movs	r3, #1
 8082e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082e90:	e03d      	b.n	8082f0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8082e92:	687b      	ldr	r3, [r7, #4]
 8082e94:	699b      	ldr	r3, [r3, #24]
 8082e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8082e9a:	d121      	bne.n	8082ee0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8082e9c:	68bb      	ldr	r3, [r7, #8]
 8082e9e:	2b03      	cmp	r3, #3
 8082ea0:	d837      	bhi.n	8082f12 <DMA_CheckFifoParam+0xda>
 8082ea2:	a201      	add	r2, pc, #4	; (adr r2, 8082ea8 <DMA_CheckFifoParam+0x70>)
 8082ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8082ea8:	08082eb9 	.word	0x08082eb9
 8082eac:	08082ebf 	.word	0x08082ebf
 8082eb0:	08082eb9 	.word	0x08082eb9
 8082eb4:	08082ed1 	.word	0x08082ed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8082eb8:	2301      	movs	r3, #1
 8082eba:	73fb      	strb	r3, [r7, #15]
      break;
 8082ebc:	e030      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8082ebe:	687b      	ldr	r3, [r7, #4]
 8082ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8082ec6:	2b00      	cmp	r3, #0
 8082ec8:	d025      	beq.n	8082f16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8082eca:	2301      	movs	r3, #1
 8082ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8082ece:	e022      	b.n	8082f16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8082ed0:	687b      	ldr	r3, [r7, #4]
 8082ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082ed4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8082ed8:	d11f      	bne.n	8082f1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8082eda:	2301      	movs	r3, #1
 8082edc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8082ede:	e01c      	b.n	8082f1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8082ee0:	68bb      	ldr	r3, [r7, #8]
 8082ee2:	2b02      	cmp	r3, #2
 8082ee4:	d903      	bls.n	8082eee <DMA_CheckFifoParam+0xb6>
 8082ee6:	68bb      	ldr	r3, [r7, #8]
 8082ee8:	2b03      	cmp	r3, #3
 8082eea:	d003      	beq.n	8082ef4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8082eec:	e018      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8082eee:	2301      	movs	r3, #1
 8082ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8082ef2:	e015      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8082ef4:	687b      	ldr	r3, [r7, #4]
 8082ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8082efc:	2b00      	cmp	r3, #0
 8082efe:	d00e      	beq.n	8082f1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8082f00:	2301      	movs	r3, #1
 8082f02:	73fb      	strb	r3, [r7, #15]
      break;
 8082f04:	e00b      	b.n	8082f1e <DMA_CheckFifoParam+0xe6>
      break;
 8082f06:	bf00      	nop
 8082f08:	e00a      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;
 8082f0a:	bf00      	nop
 8082f0c:	e008      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;
 8082f0e:	bf00      	nop
 8082f10:	e006      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;
 8082f12:	bf00      	nop
 8082f14:	e004      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;
 8082f16:	bf00      	nop
 8082f18:	e002      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;   
 8082f1a:	bf00      	nop
 8082f1c:	e000      	b.n	8082f20 <DMA_CheckFifoParam+0xe8>
      break;
 8082f1e:	bf00      	nop
    }
  } 
  
  return status; 
 8082f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8082f22:	4618      	mov	r0, r3
 8082f24:	3714      	adds	r7, #20
 8082f26:	46bd      	mov	sp, r7
 8082f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082f2c:	4770      	bx	lr
 8082f2e:	bf00      	nop

08082f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8082f30:	b480      	push	{r7}
 8082f32:	b089      	sub	sp, #36	; 0x24
 8082f34:	af00      	add	r7, sp, #0
 8082f36:	6078      	str	r0, [r7, #4]
 8082f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8082f3a:	2300      	movs	r3, #0
 8082f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8082f3e:	2300      	movs	r3, #0
 8082f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8082f42:	2300      	movs	r3, #0
 8082f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8082f46:	2300      	movs	r3, #0
 8082f48:	61fb      	str	r3, [r7, #28]
 8082f4a:	e16b      	b.n	8083224 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8082f4c:	2201      	movs	r2, #1
 8082f4e:	69fb      	ldr	r3, [r7, #28]
 8082f50:	fa02 f303 	lsl.w	r3, r2, r3
 8082f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8082f56:	683b      	ldr	r3, [r7, #0]
 8082f58:	681b      	ldr	r3, [r3, #0]
 8082f5a:	697a      	ldr	r2, [r7, #20]
 8082f5c:	4013      	ands	r3, r2
 8082f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8082f60:	693a      	ldr	r2, [r7, #16]
 8082f62:	697b      	ldr	r3, [r7, #20]
 8082f64:	429a      	cmp	r2, r3
 8082f66:	f040 815a 	bne.w	808321e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8082f6a:	683b      	ldr	r3, [r7, #0]
 8082f6c:	685b      	ldr	r3, [r3, #4]
 8082f6e:	f003 0303 	and.w	r3, r3, #3
 8082f72:	2b01      	cmp	r3, #1
 8082f74:	d005      	beq.n	8082f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8082f76:	683b      	ldr	r3, [r7, #0]
 8082f78:	685b      	ldr	r3, [r3, #4]
 8082f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8082f7e:	2b02      	cmp	r3, #2
 8082f80:	d130      	bne.n	8082fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8082f82:	687b      	ldr	r3, [r7, #4]
 8082f84:	689b      	ldr	r3, [r3, #8]
 8082f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8082f88:	69fb      	ldr	r3, [r7, #28]
 8082f8a:	005b      	lsls	r3, r3, #1
 8082f8c:	2203      	movs	r2, #3
 8082f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8082f92:	43db      	mvns	r3, r3
 8082f94:	69ba      	ldr	r2, [r7, #24]
 8082f96:	4013      	ands	r3, r2
 8082f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8082f9a:	683b      	ldr	r3, [r7, #0]
 8082f9c:	68da      	ldr	r2, [r3, #12]
 8082f9e:	69fb      	ldr	r3, [r7, #28]
 8082fa0:	005b      	lsls	r3, r3, #1
 8082fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8082fa6:	69ba      	ldr	r2, [r7, #24]
 8082fa8:	4313      	orrs	r3, r2
 8082faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8082fac:	687b      	ldr	r3, [r7, #4]
 8082fae:	69ba      	ldr	r2, [r7, #24]
 8082fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8082fb2:	687b      	ldr	r3, [r7, #4]
 8082fb4:	685b      	ldr	r3, [r3, #4]
 8082fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8082fb8:	2201      	movs	r2, #1
 8082fba:	69fb      	ldr	r3, [r7, #28]
 8082fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8082fc0:	43db      	mvns	r3, r3
 8082fc2:	69ba      	ldr	r2, [r7, #24]
 8082fc4:	4013      	ands	r3, r2
 8082fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8082fc8:	683b      	ldr	r3, [r7, #0]
 8082fca:	685b      	ldr	r3, [r3, #4]
 8082fcc:	091b      	lsrs	r3, r3, #4
 8082fce:	f003 0201 	and.w	r2, r3, #1
 8082fd2:	69fb      	ldr	r3, [r7, #28]
 8082fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8082fd8:	69ba      	ldr	r2, [r7, #24]
 8082fda:	4313      	orrs	r3, r2
 8082fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8082fde:	687b      	ldr	r3, [r7, #4]
 8082fe0:	69ba      	ldr	r2, [r7, #24]
 8082fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8082fe4:	683b      	ldr	r3, [r7, #0]
 8082fe6:	685b      	ldr	r3, [r3, #4]
 8082fe8:	f003 0303 	and.w	r3, r3, #3
 8082fec:	2b03      	cmp	r3, #3
 8082fee:	d017      	beq.n	8083020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8082ff0:	687b      	ldr	r3, [r7, #4]
 8082ff2:	68db      	ldr	r3, [r3, #12]
 8082ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8082ff6:	69fb      	ldr	r3, [r7, #28]
 8082ff8:	005b      	lsls	r3, r3, #1
 8082ffa:	2203      	movs	r2, #3
 8082ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8083000:	43db      	mvns	r3, r3
 8083002:	69ba      	ldr	r2, [r7, #24]
 8083004:	4013      	ands	r3, r2
 8083006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8083008:	683b      	ldr	r3, [r7, #0]
 808300a:	689a      	ldr	r2, [r3, #8]
 808300c:	69fb      	ldr	r3, [r7, #28]
 808300e:	005b      	lsls	r3, r3, #1
 8083010:	fa02 f303 	lsl.w	r3, r2, r3
 8083014:	69ba      	ldr	r2, [r7, #24]
 8083016:	4313      	orrs	r3, r2
 8083018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 808301a:	687b      	ldr	r3, [r7, #4]
 808301c:	69ba      	ldr	r2, [r7, #24]
 808301e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8083020:	683b      	ldr	r3, [r7, #0]
 8083022:	685b      	ldr	r3, [r3, #4]
 8083024:	f003 0303 	and.w	r3, r3, #3
 8083028:	2b02      	cmp	r3, #2
 808302a:	d123      	bne.n	8083074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 808302c:	69fb      	ldr	r3, [r7, #28]
 808302e:	08da      	lsrs	r2, r3, #3
 8083030:	687b      	ldr	r3, [r7, #4]
 8083032:	3208      	adds	r2, #8
 8083034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8083038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 808303a:	69fb      	ldr	r3, [r7, #28]
 808303c:	f003 0307 	and.w	r3, r3, #7
 8083040:	009b      	lsls	r3, r3, #2
 8083042:	220f      	movs	r2, #15
 8083044:	fa02 f303 	lsl.w	r3, r2, r3
 8083048:	43db      	mvns	r3, r3
 808304a:	69ba      	ldr	r2, [r7, #24]
 808304c:	4013      	ands	r3, r2
 808304e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8083050:	683b      	ldr	r3, [r7, #0]
 8083052:	691a      	ldr	r2, [r3, #16]
 8083054:	69fb      	ldr	r3, [r7, #28]
 8083056:	f003 0307 	and.w	r3, r3, #7
 808305a:	009b      	lsls	r3, r3, #2
 808305c:	fa02 f303 	lsl.w	r3, r2, r3
 8083060:	69ba      	ldr	r2, [r7, #24]
 8083062:	4313      	orrs	r3, r2
 8083064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8083066:	69fb      	ldr	r3, [r7, #28]
 8083068:	08da      	lsrs	r2, r3, #3
 808306a:	687b      	ldr	r3, [r7, #4]
 808306c:	3208      	adds	r2, #8
 808306e:	69b9      	ldr	r1, [r7, #24]
 8083070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8083074:	687b      	ldr	r3, [r7, #4]
 8083076:	681b      	ldr	r3, [r3, #0]
 8083078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 808307a:	69fb      	ldr	r3, [r7, #28]
 808307c:	005b      	lsls	r3, r3, #1
 808307e:	2203      	movs	r2, #3
 8083080:	fa02 f303 	lsl.w	r3, r2, r3
 8083084:	43db      	mvns	r3, r3
 8083086:	69ba      	ldr	r2, [r7, #24]
 8083088:	4013      	ands	r3, r2
 808308a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 808308c:	683b      	ldr	r3, [r7, #0]
 808308e:	685b      	ldr	r3, [r3, #4]
 8083090:	f003 0203 	and.w	r2, r3, #3
 8083094:	69fb      	ldr	r3, [r7, #28]
 8083096:	005b      	lsls	r3, r3, #1
 8083098:	fa02 f303 	lsl.w	r3, r2, r3
 808309c:	69ba      	ldr	r2, [r7, #24]
 808309e:	4313      	orrs	r3, r2
 80830a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80830a2:	687b      	ldr	r3, [r7, #4]
 80830a4:	69ba      	ldr	r2, [r7, #24]
 80830a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80830a8:	683b      	ldr	r3, [r7, #0]
 80830aa:	685b      	ldr	r3, [r3, #4]
 80830ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80830b0:	2b00      	cmp	r3, #0
 80830b2:	f000 80b4 	beq.w	808321e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80830b6:	2300      	movs	r3, #0
 80830b8:	60fb      	str	r3, [r7, #12]
 80830ba:	4b60      	ldr	r3, [pc, #384]	; (808323c <HAL_GPIO_Init+0x30c>)
 80830bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80830be:	4a5f      	ldr	r2, [pc, #380]	; (808323c <HAL_GPIO_Init+0x30c>)
 80830c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80830c4:	6453      	str	r3, [r2, #68]	; 0x44
 80830c6:	4b5d      	ldr	r3, [pc, #372]	; (808323c <HAL_GPIO_Init+0x30c>)
 80830c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80830ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80830ce:	60fb      	str	r3, [r7, #12]
 80830d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80830d2:	4a5b      	ldr	r2, [pc, #364]	; (8083240 <HAL_GPIO_Init+0x310>)
 80830d4:	69fb      	ldr	r3, [r7, #28]
 80830d6:	089b      	lsrs	r3, r3, #2
 80830d8:	3302      	adds	r3, #2
 80830da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80830de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80830e0:	69fb      	ldr	r3, [r7, #28]
 80830e2:	f003 0303 	and.w	r3, r3, #3
 80830e6:	009b      	lsls	r3, r3, #2
 80830e8:	220f      	movs	r2, #15
 80830ea:	fa02 f303 	lsl.w	r3, r2, r3
 80830ee:	43db      	mvns	r3, r3
 80830f0:	69ba      	ldr	r2, [r7, #24]
 80830f2:	4013      	ands	r3, r2
 80830f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80830f6:	687b      	ldr	r3, [r7, #4]
 80830f8:	4a52      	ldr	r2, [pc, #328]	; (8083244 <HAL_GPIO_Init+0x314>)
 80830fa:	4293      	cmp	r3, r2
 80830fc:	d02b      	beq.n	8083156 <HAL_GPIO_Init+0x226>
 80830fe:	687b      	ldr	r3, [r7, #4]
 8083100:	4a51      	ldr	r2, [pc, #324]	; (8083248 <HAL_GPIO_Init+0x318>)
 8083102:	4293      	cmp	r3, r2
 8083104:	d025      	beq.n	8083152 <HAL_GPIO_Init+0x222>
 8083106:	687b      	ldr	r3, [r7, #4]
 8083108:	4a50      	ldr	r2, [pc, #320]	; (808324c <HAL_GPIO_Init+0x31c>)
 808310a:	4293      	cmp	r3, r2
 808310c:	d01f      	beq.n	808314e <HAL_GPIO_Init+0x21e>
 808310e:	687b      	ldr	r3, [r7, #4]
 8083110:	4a4f      	ldr	r2, [pc, #316]	; (8083250 <HAL_GPIO_Init+0x320>)
 8083112:	4293      	cmp	r3, r2
 8083114:	d019      	beq.n	808314a <HAL_GPIO_Init+0x21a>
 8083116:	687b      	ldr	r3, [r7, #4]
 8083118:	4a4e      	ldr	r2, [pc, #312]	; (8083254 <HAL_GPIO_Init+0x324>)
 808311a:	4293      	cmp	r3, r2
 808311c:	d013      	beq.n	8083146 <HAL_GPIO_Init+0x216>
 808311e:	687b      	ldr	r3, [r7, #4]
 8083120:	4a4d      	ldr	r2, [pc, #308]	; (8083258 <HAL_GPIO_Init+0x328>)
 8083122:	4293      	cmp	r3, r2
 8083124:	d00d      	beq.n	8083142 <HAL_GPIO_Init+0x212>
 8083126:	687b      	ldr	r3, [r7, #4]
 8083128:	4a4c      	ldr	r2, [pc, #304]	; (808325c <HAL_GPIO_Init+0x32c>)
 808312a:	4293      	cmp	r3, r2
 808312c:	d007      	beq.n	808313e <HAL_GPIO_Init+0x20e>
 808312e:	687b      	ldr	r3, [r7, #4]
 8083130:	4a4b      	ldr	r2, [pc, #300]	; (8083260 <HAL_GPIO_Init+0x330>)
 8083132:	4293      	cmp	r3, r2
 8083134:	d101      	bne.n	808313a <HAL_GPIO_Init+0x20a>
 8083136:	2307      	movs	r3, #7
 8083138:	e00e      	b.n	8083158 <HAL_GPIO_Init+0x228>
 808313a:	2308      	movs	r3, #8
 808313c:	e00c      	b.n	8083158 <HAL_GPIO_Init+0x228>
 808313e:	2306      	movs	r3, #6
 8083140:	e00a      	b.n	8083158 <HAL_GPIO_Init+0x228>
 8083142:	2305      	movs	r3, #5
 8083144:	e008      	b.n	8083158 <HAL_GPIO_Init+0x228>
 8083146:	2304      	movs	r3, #4
 8083148:	e006      	b.n	8083158 <HAL_GPIO_Init+0x228>
 808314a:	2303      	movs	r3, #3
 808314c:	e004      	b.n	8083158 <HAL_GPIO_Init+0x228>
 808314e:	2302      	movs	r3, #2
 8083150:	e002      	b.n	8083158 <HAL_GPIO_Init+0x228>
 8083152:	2301      	movs	r3, #1
 8083154:	e000      	b.n	8083158 <HAL_GPIO_Init+0x228>
 8083156:	2300      	movs	r3, #0
 8083158:	69fa      	ldr	r2, [r7, #28]
 808315a:	f002 0203 	and.w	r2, r2, #3
 808315e:	0092      	lsls	r2, r2, #2
 8083160:	4093      	lsls	r3, r2
 8083162:	69ba      	ldr	r2, [r7, #24]
 8083164:	4313      	orrs	r3, r2
 8083166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8083168:	4935      	ldr	r1, [pc, #212]	; (8083240 <HAL_GPIO_Init+0x310>)
 808316a:	69fb      	ldr	r3, [r7, #28]
 808316c:	089b      	lsrs	r3, r3, #2
 808316e:	3302      	adds	r3, #2
 8083170:	69ba      	ldr	r2, [r7, #24]
 8083172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8083176:	4b3b      	ldr	r3, [pc, #236]	; (8083264 <HAL_GPIO_Init+0x334>)
 8083178:	689b      	ldr	r3, [r3, #8]
 808317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808317c:	693b      	ldr	r3, [r7, #16]
 808317e:	43db      	mvns	r3, r3
 8083180:	69ba      	ldr	r2, [r7, #24]
 8083182:	4013      	ands	r3, r2
 8083184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8083186:	683b      	ldr	r3, [r7, #0]
 8083188:	685b      	ldr	r3, [r3, #4]
 808318a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 808318e:	2b00      	cmp	r3, #0
 8083190:	d003      	beq.n	808319a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8083192:	69ba      	ldr	r2, [r7, #24]
 8083194:	693b      	ldr	r3, [r7, #16]
 8083196:	4313      	orrs	r3, r2
 8083198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 808319a:	4a32      	ldr	r2, [pc, #200]	; (8083264 <HAL_GPIO_Init+0x334>)
 808319c:	69bb      	ldr	r3, [r7, #24]
 808319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80831a0:	4b30      	ldr	r3, [pc, #192]	; (8083264 <HAL_GPIO_Init+0x334>)
 80831a2:	68db      	ldr	r3, [r3, #12]
 80831a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80831a6:	693b      	ldr	r3, [r7, #16]
 80831a8:	43db      	mvns	r3, r3
 80831aa:	69ba      	ldr	r2, [r7, #24]
 80831ac:	4013      	ands	r3, r2
 80831ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80831b0:	683b      	ldr	r3, [r7, #0]
 80831b2:	685b      	ldr	r3, [r3, #4]
 80831b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80831b8:	2b00      	cmp	r3, #0
 80831ba:	d003      	beq.n	80831c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80831bc:	69ba      	ldr	r2, [r7, #24]
 80831be:	693b      	ldr	r3, [r7, #16]
 80831c0:	4313      	orrs	r3, r2
 80831c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80831c4:	4a27      	ldr	r2, [pc, #156]	; (8083264 <HAL_GPIO_Init+0x334>)
 80831c6:	69bb      	ldr	r3, [r7, #24]
 80831c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80831ca:	4b26      	ldr	r3, [pc, #152]	; (8083264 <HAL_GPIO_Init+0x334>)
 80831cc:	685b      	ldr	r3, [r3, #4]
 80831ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80831d0:	693b      	ldr	r3, [r7, #16]
 80831d2:	43db      	mvns	r3, r3
 80831d4:	69ba      	ldr	r2, [r7, #24]
 80831d6:	4013      	ands	r3, r2
 80831d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80831da:	683b      	ldr	r3, [r7, #0]
 80831dc:	685b      	ldr	r3, [r3, #4]
 80831de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80831e2:	2b00      	cmp	r3, #0
 80831e4:	d003      	beq.n	80831ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80831e6:	69ba      	ldr	r2, [r7, #24]
 80831e8:	693b      	ldr	r3, [r7, #16]
 80831ea:	4313      	orrs	r3, r2
 80831ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80831ee:	4a1d      	ldr	r2, [pc, #116]	; (8083264 <HAL_GPIO_Init+0x334>)
 80831f0:	69bb      	ldr	r3, [r7, #24]
 80831f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80831f4:	4b1b      	ldr	r3, [pc, #108]	; (8083264 <HAL_GPIO_Init+0x334>)
 80831f6:	681b      	ldr	r3, [r3, #0]
 80831f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80831fa:	693b      	ldr	r3, [r7, #16]
 80831fc:	43db      	mvns	r3, r3
 80831fe:	69ba      	ldr	r2, [r7, #24]
 8083200:	4013      	ands	r3, r2
 8083202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8083204:	683b      	ldr	r3, [r7, #0]
 8083206:	685b      	ldr	r3, [r3, #4]
 8083208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 808320c:	2b00      	cmp	r3, #0
 808320e:	d003      	beq.n	8083218 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8083210:	69ba      	ldr	r2, [r7, #24]
 8083212:	693b      	ldr	r3, [r7, #16]
 8083214:	4313      	orrs	r3, r2
 8083216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8083218:	4a12      	ldr	r2, [pc, #72]	; (8083264 <HAL_GPIO_Init+0x334>)
 808321a:	69bb      	ldr	r3, [r7, #24]
 808321c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 808321e:	69fb      	ldr	r3, [r7, #28]
 8083220:	3301      	adds	r3, #1
 8083222:	61fb      	str	r3, [r7, #28]
 8083224:	69fb      	ldr	r3, [r7, #28]
 8083226:	2b0f      	cmp	r3, #15
 8083228:	f67f ae90 	bls.w	8082f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 808322c:	bf00      	nop
 808322e:	bf00      	nop
 8083230:	3724      	adds	r7, #36	; 0x24
 8083232:	46bd      	mov	sp, r7
 8083234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083238:	4770      	bx	lr
 808323a:	bf00      	nop
 808323c:	40023800 	.word	0x40023800
 8083240:	40013800 	.word	0x40013800
 8083244:	40020000 	.word	0x40020000
 8083248:	40020400 	.word	0x40020400
 808324c:	40020800 	.word	0x40020800
 8083250:	40020c00 	.word	0x40020c00
 8083254:	40021000 	.word	0x40021000
 8083258:	40021400 	.word	0x40021400
 808325c:	40021800 	.word	0x40021800
 8083260:	40021c00 	.word	0x40021c00
 8083264:	40013c00 	.word	0x40013c00

08083268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8083268:	b480      	push	{r7}
 808326a:	b085      	sub	sp, #20
 808326c:	af00      	add	r7, sp, #0
 808326e:	6078      	str	r0, [r7, #4]
 8083270:	460b      	mov	r3, r1
 8083272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8083274:	687b      	ldr	r3, [r7, #4]
 8083276:	691a      	ldr	r2, [r3, #16]
 8083278:	887b      	ldrh	r3, [r7, #2]
 808327a:	4013      	ands	r3, r2
 808327c:	2b00      	cmp	r3, #0
 808327e:	d002      	beq.n	8083286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8083280:	2301      	movs	r3, #1
 8083282:	73fb      	strb	r3, [r7, #15]
 8083284:	e001      	b.n	808328a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8083286:	2300      	movs	r3, #0
 8083288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 808328a:	7bfb      	ldrb	r3, [r7, #15]
}
 808328c:	4618      	mov	r0, r3
 808328e:	3714      	adds	r7, #20
 8083290:	46bd      	mov	sp, r7
 8083292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083296:	4770      	bx	lr

08083298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8083298:	b480      	push	{r7}
 808329a:	b083      	sub	sp, #12
 808329c:	af00      	add	r7, sp, #0
 808329e:	6078      	str	r0, [r7, #4]
 80832a0:	460b      	mov	r3, r1
 80832a2:	807b      	strh	r3, [r7, #2]
 80832a4:	4613      	mov	r3, r2
 80832a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80832a8:	787b      	ldrb	r3, [r7, #1]
 80832aa:	2b00      	cmp	r3, #0
 80832ac:	d003      	beq.n	80832b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80832ae:	887a      	ldrh	r2, [r7, #2]
 80832b0:	687b      	ldr	r3, [r7, #4]
 80832b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80832b4:	e003      	b.n	80832be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80832b6:	887b      	ldrh	r3, [r7, #2]
 80832b8:	041a      	lsls	r2, r3, #16
 80832ba:	687b      	ldr	r3, [r7, #4]
 80832bc:	619a      	str	r2, [r3, #24]
}
 80832be:	bf00      	nop
 80832c0:	370c      	adds	r7, #12
 80832c2:	46bd      	mov	sp, r7
 80832c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80832c8:	4770      	bx	lr
	...

080832cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80832cc:	b580      	push	{r7, lr}
 80832ce:	b086      	sub	sp, #24
 80832d0:	af00      	add	r7, sp, #0
 80832d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80832d4:	687b      	ldr	r3, [r7, #4]
 80832d6:	2b00      	cmp	r3, #0
 80832d8:	d101      	bne.n	80832de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80832da:	2301      	movs	r3, #1
 80832dc:	e267      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80832de:	687b      	ldr	r3, [r7, #4]
 80832e0:	681b      	ldr	r3, [r3, #0]
 80832e2:	f003 0301 	and.w	r3, r3, #1
 80832e6:	2b00      	cmp	r3, #0
 80832e8:	d075      	beq.n	80833d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80832ea:	4b88      	ldr	r3, [pc, #544]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80832ec:	689b      	ldr	r3, [r3, #8]
 80832ee:	f003 030c 	and.w	r3, r3, #12
 80832f2:	2b04      	cmp	r3, #4
 80832f4:	d00c      	beq.n	8083310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80832f6:	4b85      	ldr	r3, [pc, #532]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80832f8:	689b      	ldr	r3, [r3, #8]
 80832fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80832fe:	2b08      	cmp	r3, #8
 8083300:	d112      	bne.n	8083328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8083302:	4b82      	ldr	r3, [pc, #520]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083304:	685b      	ldr	r3, [r3, #4]
 8083306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808330a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 808330e:	d10b      	bne.n	8083328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8083310:	4b7e      	ldr	r3, [pc, #504]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083312:	681b      	ldr	r3, [r3, #0]
 8083314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083318:	2b00      	cmp	r3, #0
 808331a:	d05b      	beq.n	80833d4 <HAL_RCC_OscConfig+0x108>
 808331c:	687b      	ldr	r3, [r7, #4]
 808331e:	685b      	ldr	r3, [r3, #4]
 8083320:	2b00      	cmp	r3, #0
 8083322:	d157      	bne.n	80833d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8083324:	2301      	movs	r3, #1
 8083326:	e242      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8083328:	687b      	ldr	r3, [r7, #4]
 808332a:	685b      	ldr	r3, [r3, #4]
 808332c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8083330:	d106      	bne.n	8083340 <HAL_RCC_OscConfig+0x74>
 8083332:	4b76      	ldr	r3, [pc, #472]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083334:	681b      	ldr	r3, [r3, #0]
 8083336:	4a75      	ldr	r2, [pc, #468]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808333c:	6013      	str	r3, [r2, #0]
 808333e:	e01d      	b.n	808337c <HAL_RCC_OscConfig+0xb0>
 8083340:	687b      	ldr	r3, [r7, #4]
 8083342:	685b      	ldr	r3, [r3, #4]
 8083344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8083348:	d10c      	bne.n	8083364 <HAL_RCC_OscConfig+0x98>
 808334a:	4b70      	ldr	r3, [pc, #448]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808334c:	681b      	ldr	r3, [r3, #0]
 808334e:	4a6f      	ldr	r2, [pc, #444]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8083354:	6013      	str	r3, [r2, #0]
 8083356:	4b6d      	ldr	r3, [pc, #436]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083358:	681b      	ldr	r3, [r3, #0]
 808335a:	4a6c      	ldr	r2, [pc, #432]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8083360:	6013      	str	r3, [r2, #0]
 8083362:	e00b      	b.n	808337c <HAL_RCC_OscConfig+0xb0>
 8083364:	4b69      	ldr	r3, [pc, #420]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083366:	681b      	ldr	r3, [r3, #0]
 8083368:	4a68      	ldr	r2, [pc, #416]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808336a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 808336e:	6013      	str	r3, [r2, #0]
 8083370:	4b66      	ldr	r3, [pc, #408]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083372:	681b      	ldr	r3, [r3, #0]
 8083374:	4a65      	ldr	r2, [pc, #404]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 808337a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 808337c:	687b      	ldr	r3, [r7, #4]
 808337e:	685b      	ldr	r3, [r3, #4]
 8083380:	2b00      	cmp	r3, #0
 8083382:	d013      	beq.n	80833ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083384:	f7ff f890 	bl	80824a8 <HAL_GetTick>
 8083388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808338a:	e008      	b.n	808339e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 808338c:	f7ff f88c 	bl	80824a8 <HAL_GetTick>
 8083390:	4602      	mov	r2, r0
 8083392:	693b      	ldr	r3, [r7, #16]
 8083394:	1ad3      	subs	r3, r2, r3
 8083396:	2b64      	cmp	r3, #100	; 0x64
 8083398:	d901      	bls.n	808339e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 808339a:	2303      	movs	r3, #3
 808339c:	e207      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808339e:	4b5b      	ldr	r3, [pc, #364]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80833a0:	681b      	ldr	r3, [r3, #0]
 80833a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80833a6:	2b00      	cmp	r3, #0
 80833a8:	d0f0      	beq.n	808338c <HAL_RCC_OscConfig+0xc0>
 80833aa:	e014      	b.n	80833d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80833ac:	f7ff f87c 	bl	80824a8 <HAL_GetTick>
 80833b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80833b2:	e008      	b.n	80833c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80833b4:	f7ff f878 	bl	80824a8 <HAL_GetTick>
 80833b8:	4602      	mov	r2, r0
 80833ba:	693b      	ldr	r3, [r7, #16]
 80833bc:	1ad3      	subs	r3, r2, r3
 80833be:	2b64      	cmp	r3, #100	; 0x64
 80833c0:	d901      	bls.n	80833c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80833c2:	2303      	movs	r3, #3
 80833c4:	e1f3      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80833c6:	4b51      	ldr	r3, [pc, #324]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80833c8:	681b      	ldr	r3, [r3, #0]
 80833ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80833ce:	2b00      	cmp	r3, #0
 80833d0:	d1f0      	bne.n	80833b4 <HAL_RCC_OscConfig+0xe8>
 80833d2:	e000      	b.n	80833d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80833d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80833d6:	687b      	ldr	r3, [r7, #4]
 80833d8:	681b      	ldr	r3, [r3, #0]
 80833da:	f003 0302 	and.w	r3, r3, #2
 80833de:	2b00      	cmp	r3, #0
 80833e0:	d063      	beq.n	80834aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80833e2:	4b4a      	ldr	r3, [pc, #296]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80833e4:	689b      	ldr	r3, [r3, #8]
 80833e6:	f003 030c 	and.w	r3, r3, #12
 80833ea:	2b00      	cmp	r3, #0
 80833ec:	d00b      	beq.n	8083406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80833ee:	4b47      	ldr	r3, [pc, #284]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80833f0:	689b      	ldr	r3, [r3, #8]
 80833f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80833f6:	2b08      	cmp	r3, #8
 80833f8:	d11c      	bne.n	8083434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80833fa:	4b44      	ldr	r3, [pc, #272]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80833fc:	685b      	ldr	r3, [r3, #4]
 80833fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8083402:	2b00      	cmp	r3, #0
 8083404:	d116      	bne.n	8083434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8083406:	4b41      	ldr	r3, [pc, #260]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083408:	681b      	ldr	r3, [r3, #0]
 808340a:	f003 0302 	and.w	r3, r3, #2
 808340e:	2b00      	cmp	r3, #0
 8083410:	d005      	beq.n	808341e <HAL_RCC_OscConfig+0x152>
 8083412:	687b      	ldr	r3, [r7, #4]
 8083414:	68db      	ldr	r3, [r3, #12]
 8083416:	2b01      	cmp	r3, #1
 8083418:	d001      	beq.n	808341e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 808341a:	2301      	movs	r3, #1
 808341c:	e1c7      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 808341e:	4b3b      	ldr	r3, [pc, #236]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083420:	681b      	ldr	r3, [r3, #0]
 8083422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8083426:	687b      	ldr	r3, [r7, #4]
 8083428:	691b      	ldr	r3, [r3, #16]
 808342a:	00db      	lsls	r3, r3, #3
 808342c:	4937      	ldr	r1, [pc, #220]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808342e:	4313      	orrs	r3, r2
 8083430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8083432:	e03a      	b.n	80834aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8083434:	687b      	ldr	r3, [r7, #4]
 8083436:	68db      	ldr	r3, [r3, #12]
 8083438:	2b00      	cmp	r3, #0
 808343a:	d020      	beq.n	808347e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 808343c:	4b34      	ldr	r3, [pc, #208]	; (8083510 <HAL_RCC_OscConfig+0x244>)
 808343e:	2201      	movs	r2, #1
 8083440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8083442:	f7ff f831 	bl	80824a8 <HAL_GetTick>
 8083446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8083448:	e008      	b.n	808345c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 808344a:	f7ff f82d 	bl	80824a8 <HAL_GetTick>
 808344e:	4602      	mov	r2, r0
 8083450:	693b      	ldr	r3, [r7, #16]
 8083452:	1ad3      	subs	r3, r2, r3
 8083454:	2b02      	cmp	r3, #2
 8083456:	d901      	bls.n	808345c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8083458:	2303      	movs	r3, #3
 808345a:	e1a8      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808345c:	4b2b      	ldr	r3, [pc, #172]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808345e:	681b      	ldr	r3, [r3, #0]
 8083460:	f003 0302 	and.w	r3, r3, #2
 8083464:	2b00      	cmp	r3, #0
 8083466:	d0f0      	beq.n	808344a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8083468:	4b28      	ldr	r3, [pc, #160]	; (808350c <HAL_RCC_OscConfig+0x240>)
 808346a:	681b      	ldr	r3, [r3, #0]
 808346c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8083470:	687b      	ldr	r3, [r7, #4]
 8083472:	691b      	ldr	r3, [r3, #16]
 8083474:	00db      	lsls	r3, r3, #3
 8083476:	4925      	ldr	r1, [pc, #148]	; (808350c <HAL_RCC_OscConfig+0x240>)
 8083478:	4313      	orrs	r3, r2
 808347a:	600b      	str	r3, [r1, #0]
 808347c:	e015      	b.n	80834aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 808347e:	4b24      	ldr	r3, [pc, #144]	; (8083510 <HAL_RCC_OscConfig+0x244>)
 8083480:	2200      	movs	r2, #0
 8083482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8083484:	f7ff f810 	bl	80824a8 <HAL_GetTick>
 8083488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808348a:	e008      	b.n	808349e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 808348c:	f7ff f80c 	bl	80824a8 <HAL_GetTick>
 8083490:	4602      	mov	r2, r0
 8083492:	693b      	ldr	r3, [r7, #16]
 8083494:	1ad3      	subs	r3, r2, r3
 8083496:	2b02      	cmp	r3, #2
 8083498:	d901      	bls.n	808349e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 808349a:	2303      	movs	r3, #3
 808349c:	e187      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 808349e:	4b1b      	ldr	r3, [pc, #108]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80834a0:	681b      	ldr	r3, [r3, #0]
 80834a2:	f003 0302 	and.w	r3, r3, #2
 80834a6:	2b00      	cmp	r3, #0
 80834a8:	d1f0      	bne.n	808348c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80834aa:	687b      	ldr	r3, [r7, #4]
 80834ac:	681b      	ldr	r3, [r3, #0]
 80834ae:	f003 0308 	and.w	r3, r3, #8
 80834b2:	2b00      	cmp	r3, #0
 80834b4:	d036      	beq.n	8083524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80834b6:	687b      	ldr	r3, [r7, #4]
 80834b8:	695b      	ldr	r3, [r3, #20]
 80834ba:	2b00      	cmp	r3, #0
 80834bc:	d016      	beq.n	80834ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80834be:	4b15      	ldr	r3, [pc, #84]	; (8083514 <HAL_RCC_OscConfig+0x248>)
 80834c0:	2201      	movs	r2, #1
 80834c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80834c4:	f7fe fff0 	bl	80824a8 <HAL_GetTick>
 80834c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80834ca:	e008      	b.n	80834de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80834cc:	f7fe ffec 	bl	80824a8 <HAL_GetTick>
 80834d0:	4602      	mov	r2, r0
 80834d2:	693b      	ldr	r3, [r7, #16]
 80834d4:	1ad3      	subs	r3, r2, r3
 80834d6:	2b02      	cmp	r3, #2
 80834d8:	d901      	bls.n	80834de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80834da:	2303      	movs	r3, #3
 80834dc:	e167      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80834de:	4b0b      	ldr	r3, [pc, #44]	; (808350c <HAL_RCC_OscConfig+0x240>)
 80834e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80834e2:	f003 0302 	and.w	r3, r3, #2
 80834e6:	2b00      	cmp	r3, #0
 80834e8:	d0f0      	beq.n	80834cc <HAL_RCC_OscConfig+0x200>
 80834ea:	e01b      	b.n	8083524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80834ec:	4b09      	ldr	r3, [pc, #36]	; (8083514 <HAL_RCC_OscConfig+0x248>)
 80834ee:	2200      	movs	r2, #0
 80834f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80834f2:	f7fe ffd9 	bl	80824a8 <HAL_GetTick>
 80834f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80834f8:	e00e      	b.n	8083518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80834fa:	f7fe ffd5 	bl	80824a8 <HAL_GetTick>
 80834fe:	4602      	mov	r2, r0
 8083500:	693b      	ldr	r3, [r7, #16]
 8083502:	1ad3      	subs	r3, r2, r3
 8083504:	2b02      	cmp	r3, #2
 8083506:	d907      	bls.n	8083518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8083508:	2303      	movs	r3, #3
 808350a:	e150      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
 808350c:	40023800 	.word	0x40023800
 8083510:	42470000 	.word	0x42470000
 8083514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8083518:	4b88      	ldr	r3, [pc, #544]	; (808373c <HAL_RCC_OscConfig+0x470>)
 808351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 808351c:	f003 0302 	and.w	r3, r3, #2
 8083520:	2b00      	cmp	r3, #0
 8083522:	d1ea      	bne.n	80834fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8083524:	687b      	ldr	r3, [r7, #4]
 8083526:	681b      	ldr	r3, [r3, #0]
 8083528:	f003 0304 	and.w	r3, r3, #4
 808352c:	2b00      	cmp	r3, #0
 808352e:	f000 8097 	beq.w	8083660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8083532:	2300      	movs	r3, #0
 8083534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8083536:	4b81      	ldr	r3, [pc, #516]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808353e:	2b00      	cmp	r3, #0
 8083540:	d10f      	bne.n	8083562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8083542:	2300      	movs	r3, #0
 8083544:	60bb      	str	r3, [r7, #8]
 8083546:	4b7d      	ldr	r3, [pc, #500]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808354a:	4a7c      	ldr	r2, [pc, #496]	; (808373c <HAL_RCC_OscConfig+0x470>)
 808354c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8083550:	6413      	str	r3, [r2, #64]	; 0x40
 8083552:	4b7a      	ldr	r3, [pc, #488]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808355a:	60bb      	str	r3, [r7, #8]
 808355c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 808355e:	2301      	movs	r3, #1
 8083560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083562:	4b77      	ldr	r3, [pc, #476]	; (8083740 <HAL_RCC_OscConfig+0x474>)
 8083564:	681b      	ldr	r3, [r3, #0]
 8083566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808356a:	2b00      	cmp	r3, #0
 808356c:	d118      	bne.n	80835a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 808356e:	4b74      	ldr	r3, [pc, #464]	; (8083740 <HAL_RCC_OscConfig+0x474>)
 8083570:	681b      	ldr	r3, [r3, #0]
 8083572:	4a73      	ldr	r2, [pc, #460]	; (8083740 <HAL_RCC_OscConfig+0x474>)
 8083574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 808357a:	f7fe ff95 	bl	80824a8 <HAL_GetTick>
 808357e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083580:	e008      	b.n	8083594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8083582:	f7fe ff91 	bl	80824a8 <HAL_GetTick>
 8083586:	4602      	mov	r2, r0
 8083588:	693b      	ldr	r3, [r7, #16]
 808358a:	1ad3      	subs	r3, r2, r3
 808358c:	2b02      	cmp	r3, #2
 808358e:	d901      	bls.n	8083594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8083590:	2303      	movs	r3, #3
 8083592:	e10c      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083594:	4b6a      	ldr	r3, [pc, #424]	; (8083740 <HAL_RCC_OscConfig+0x474>)
 8083596:	681b      	ldr	r3, [r3, #0]
 8083598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808359c:	2b00      	cmp	r3, #0
 808359e:	d0f0      	beq.n	8083582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80835a0:	687b      	ldr	r3, [r7, #4]
 80835a2:	689b      	ldr	r3, [r3, #8]
 80835a4:	2b01      	cmp	r3, #1
 80835a6:	d106      	bne.n	80835b6 <HAL_RCC_OscConfig+0x2ea>
 80835a8:	4b64      	ldr	r3, [pc, #400]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80835ac:	4a63      	ldr	r2, [pc, #396]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835ae:	f043 0301 	orr.w	r3, r3, #1
 80835b2:	6713      	str	r3, [r2, #112]	; 0x70
 80835b4:	e01c      	b.n	80835f0 <HAL_RCC_OscConfig+0x324>
 80835b6:	687b      	ldr	r3, [r7, #4]
 80835b8:	689b      	ldr	r3, [r3, #8]
 80835ba:	2b05      	cmp	r3, #5
 80835bc:	d10c      	bne.n	80835d8 <HAL_RCC_OscConfig+0x30c>
 80835be:	4b5f      	ldr	r3, [pc, #380]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80835c2:	4a5e      	ldr	r2, [pc, #376]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835c4:	f043 0304 	orr.w	r3, r3, #4
 80835c8:	6713      	str	r3, [r2, #112]	; 0x70
 80835ca:	4b5c      	ldr	r3, [pc, #368]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80835ce:	4a5b      	ldr	r2, [pc, #364]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835d0:	f043 0301 	orr.w	r3, r3, #1
 80835d4:	6713      	str	r3, [r2, #112]	; 0x70
 80835d6:	e00b      	b.n	80835f0 <HAL_RCC_OscConfig+0x324>
 80835d8:	4b58      	ldr	r3, [pc, #352]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80835dc:	4a57      	ldr	r2, [pc, #348]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835de:	f023 0301 	bic.w	r3, r3, #1
 80835e2:	6713      	str	r3, [r2, #112]	; 0x70
 80835e4:	4b55      	ldr	r3, [pc, #340]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80835e8:	4a54      	ldr	r2, [pc, #336]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80835ea:	f023 0304 	bic.w	r3, r3, #4
 80835ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80835f0:	687b      	ldr	r3, [r7, #4]
 80835f2:	689b      	ldr	r3, [r3, #8]
 80835f4:	2b00      	cmp	r3, #0
 80835f6:	d015      	beq.n	8083624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80835f8:	f7fe ff56 	bl	80824a8 <HAL_GetTick>
 80835fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80835fe:	e00a      	b.n	8083616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8083600:	f7fe ff52 	bl	80824a8 <HAL_GetTick>
 8083604:	4602      	mov	r2, r0
 8083606:	693b      	ldr	r3, [r7, #16]
 8083608:	1ad3      	subs	r3, r2, r3
 808360a:	f241 3288 	movw	r2, #5000	; 0x1388
 808360e:	4293      	cmp	r3, r2
 8083610:	d901      	bls.n	8083616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8083612:	2303      	movs	r3, #3
 8083614:	e0cb      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8083616:	4b49      	ldr	r3, [pc, #292]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808361a:	f003 0302 	and.w	r3, r3, #2
 808361e:	2b00      	cmp	r3, #0
 8083620:	d0ee      	beq.n	8083600 <HAL_RCC_OscConfig+0x334>
 8083622:	e014      	b.n	808364e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8083624:	f7fe ff40 	bl	80824a8 <HAL_GetTick>
 8083628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 808362a:	e00a      	b.n	8083642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 808362c:	f7fe ff3c 	bl	80824a8 <HAL_GetTick>
 8083630:	4602      	mov	r2, r0
 8083632:	693b      	ldr	r3, [r7, #16]
 8083634:	1ad3      	subs	r3, r2, r3
 8083636:	f241 3288 	movw	r2, #5000	; 0x1388
 808363a:	4293      	cmp	r3, r2
 808363c:	d901      	bls.n	8083642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 808363e:	2303      	movs	r3, #3
 8083640:	e0b5      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8083642:	4b3e      	ldr	r3, [pc, #248]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083646:	f003 0302 	and.w	r3, r3, #2
 808364a:	2b00      	cmp	r3, #0
 808364c:	d1ee      	bne.n	808362c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 808364e:	7dfb      	ldrb	r3, [r7, #23]
 8083650:	2b01      	cmp	r3, #1
 8083652:	d105      	bne.n	8083660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8083654:	4b39      	ldr	r3, [pc, #228]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083658:	4a38      	ldr	r2, [pc, #224]	; (808373c <HAL_RCC_OscConfig+0x470>)
 808365a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 808365e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8083660:	687b      	ldr	r3, [r7, #4]
 8083662:	699b      	ldr	r3, [r3, #24]
 8083664:	2b00      	cmp	r3, #0
 8083666:	f000 80a1 	beq.w	80837ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 808366a:	4b34      	ldr	r3, [pc, #208]	; (808373c <HAL_RCC_OscConfig+0x470>)
 808366c:	689b      	ldr	r3, [r3, #8]
 808366e:	f003 030c 	and.w	r3, r3, #12
 8083672:	2b08      	cmp	r3, #8
 8083674:	d05c      	beq.n	8083730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8083676:	687b      	ldr	r3, [r7, #4]
 8083678:	699b      	ldr	r3, [r3, #24]
 808367a:	2b02      	cmp	r3, #2
 808367c:	d141      	bne.n	8083702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 808367e:	4b31      	ldr	r3, [pc, #196]	; (8083744 <HAL_RCC_OscConfig+0x478>)
 8083680:	2200      	movs	r2, #0
 8083682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083684:	f7fe ff10 	bl	80824a8 <HAL_GetTick>
 8083688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808368a:	e008      	b.n	808369e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 808368c:	f7fe ff0c 	bl	80824a8 <HAL_GetTick>
 8083690:	4602      	mov	r2, r0
 8083692:	693b      	ldr	r3, [r7, #16]
 8083694:	1ad3      	subs	r3, r2, r3
 8083696:	2b02      	cmp	r3, #2
 8083698:	d901      	bls.n	808369e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 808369a:	2303      	movs	r3, #3
 808369c:	e087      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808369e:	4b27      	ldr	r3, [pc, #156]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80836a0:	681b      	ldr	r3, [r3, #0]
 80836a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80836a6:	2b00      	cmp	r3, #0
 80836a8:	d1f0      	bne.n	808368c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80836aa:	687b      	ldr	r3, [r7, #4]
 80836ac:	69da      	ldr	r2, [r3, #28]
 80836ae:	687b      	ldr	r3, [r7, #4]
 80836b0:	6a1b      	ldr	r3, [r3, #32]
 80836b2:	431a      	orrs	r2, r3
 80836b4:	687b      	ldr	r3, [r7, #4]
 80836b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80836b8:	019b      	lsls	r3, r3, #6
 80836ba:	431a      	orrs	r2, r3
 80836bc:	687b      	ldr	r3, [r7, #4]
 80836be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80836c0:	085b      	lsrs	r3, r3, #1
 80836c2:	3b01      	subs	r3, #1
 80836c4:	041b      	lsls	r3, r3, #16
 80836c6:	431a      	orrs	r2, r3
 80836c8:	687b      	ldr	r3, [r7, #4]
 80836ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80836cc:	061b      	lsls	r3, r3, #24
 80836ce:	491b      	ldr	r1, [pc, #108]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80836d0:	4313      	orrs	r3, r2
 80836d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80836d4:	4b1b      	ldr	r3, [pc, #108]	; (8083744 <HAL_RCC_OscConfig+0x478>)
 80836d6:	2201      	movs	r2, #1
 80836d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80836da:	f7fe fee5 	bl	80824a8 <HAL_GetTick>
 80836de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80836e0:	e008      	b.n	80836f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80836e2:	f7fe fee1 	bl	80824a8 <HAL_GetTick>
 80836e6:	4602      	mov	r2, r0
 80836e8:	693b      	ldr	r3, [r7, #16]
 80836ea:	1ad3      	subs	r3, r2, r3
 80836ec:	2b02      	cmp	r3, #2
 80836ee:	d901      	bls.n	80836f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80836f0:	2303      	movs	r3, #3
 80836f2:	e05c      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80836f4:	4b11      	ldr	r3, [pc, #68]	; (808373c <HAL_RCC_OscConfig+0x470>)
 80836f6:	681b      	ldr	r3, [r3, #0]
 80836f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80836fc:	2b00      	cmp	r3, #0
 80836fe:	d0f0      	beq.n	80836e2 <HAL_RCC_OscConfig+0x416>
 8083700:	e054      	b.n	80837ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8083702:	4b10      	ldr	r3, [pc, #64]	; (8083744 <HAL_RCC_OscConfig+0x478>)
 8083704:	2200      	movs	r2, #0
 8083706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083708:	f7fe fece 	bl	80824a8 <HAL_GetTick>
 808370c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 808370e:	e008      	b.n	8083722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8083710:	f7fe feca 	bl	80824a8 <HAL_GetTick>
 8083714:	4602      	mov	r2, r0
 8083716:	693b      	ldr	r3, [r7, #16]
 8083718:	1ad3      	subs	r3, r2, r3
 808371a:	2b02      	cmp	r3, #2
 808371c:	d901      	bls.n	8083722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 808371e:	2303      	movs	r3, #3
 8083720:	e045      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8083722:	4b06      	ldr	r3, [pc, #24]	; (808373c <HAL_RCC_OscConfig+0x470>)
 8083724:	681b      	ldr	r3, [r3, #0]
 8083726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 808372a:	2b00      	cmp	r3, #0
 808372c:	d1f0      	bne.n	8083710 <HAL_RCC_OscConfig+0x444>
 808372e:	e03d      	b.n	80837ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8083730:	687b      	ldr	r3, [r7, #4]
 8083732:	699b      	ldr	r3, [r3, #24]
 8083734:	2b01      	cmp	r3, #1
 8083736:	d107      	bne.n	8083748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8083738:	2301      	movs	r3, #1
 808373a:	e038      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
 808373c:	40023800 	.word	0x40023800
 8083740:	40007000 	.word	0x40007000
 8083744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8083748:	4b1b      	ldr	r3, [pc, #108]	; (80837b8 <HAL_RCC_OscConfig+0x4ec>)
 808374a:	685b      	ldr	r3, [r3, #4]
 808374c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 808374e:	687b      	ldr	r3, [r7, #4]
 8083750:	699b      	ldr	r3, [r3, #24]
 8083752:	2b01      	cmp	r3, #1
 8083754:	d028      	beq.n	80837a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8083756:	68fb      	ldr	r3, [r7, #12]
 8083758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 808375c:	687b      	ldr	r3, [r7, #4]
 808375e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8083760:	429a      	cmp	r2, r3
 8083762:	d121      	bne.n	80837a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8083764:	68fb      	ldr	r3, [r7, #12]
 8083766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 808376a:	687b      	ldr	r3, [r7, #4]
 808376c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 808376e:	429a      	cmp	r2, r3
 8083770:	d11a      	bne.n	80837a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8083772:	68fa      	ldr	r2, [r7, #12]
 8083774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8083778:	4013      	ands	r3, r2
 808377a:	687a      	ldr	r2, [r7, #4]
 808377c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 808377e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8083780:	4293      	cmp	r3, r2
 8083782:	d111      	bne.n	80837a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8083784:	68fb      	ldr	r3, [r7, #12]
 8083786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 808378a:	687b      	ldr	r3, [r7, #4]
 808378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808378e:	085b      	lsrs	r3, r3, #1
 8083790:	3b01      	subs	r3, #1
 8083792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8083794:	429a      	cmp	r2, r3
 8083796:	d107      	bne.n	80837a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8083798:	68fb      	ldr	r3, [r7, #12]
 808379a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 808379e:	687b      	ldr	r3, [r7, #4]
 80837a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80837a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80837a4:	429a      	cmp	r2, r3
 80837a6:	d001      	beq.n	80837ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80837a8:	2301      	movs	r3, #1
 80837aa:	e000      	b.n	80837ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80837ac:	2300      	movs	r3, #0
}
 80837ae:	4618      	mov	r0, r3
 80837b0:	3718      	adds	r7, #24
 80837b2:	46bd      	mov	sp, r7
 80837b4:	bd80      	pop	{r7, pc}
 80837b6:	bf00      	nop
 80837b8:	40023800 	.word	0x40023800

080837bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80837bc:	b580      	push	{r7, lr}
 80837be:	b084      	sub	sp, #16
 80837c0:	af00      	add	r7, sp, #0
 80837c2:	6078      	str	r0, [r7, #4]
 80837c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80837c6:	687b      	ldr	r3, [r7, #4]
 80837c8:	2b00      	cmp	r3, #0
 80837ca:	d101      	bne.n	80837d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80837cc:	2301      	movs	r3, #1
 80837ce:	e0cc      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80837d0:	4b68      	ldr	r3, [pc, #416]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80837d2:	681b      	ldr	r3, [r3, #0]
 80837d4:	f003 0307 	and.w	r3, r3, #7
 80837d8:	683a      	ldr	r2, [r7, #0]
 80837da:	429a      	cmp	r2, r3
 80837dc:	d90c      	bls.n	80837f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80837de:	4b65      	ldr	r3, [pc, #404]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80837e0:	683a      	ldr	r2, [r7, #0]
 80837e2:	b2d2      	uxtb	r2, r2
 80837e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80837e6:	4b63      	ldr	r3, [pc, #396]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80837e8:	681b      	ldr	r3, [r3, #0]
 80837ea:	f003 0307 	and.w	r3, r3, #7
 80837ee:	683a      	ldr	r2, [r7, #0]
 80837f0:	429a      	cmp	r2, r3
 80837f2:	d001      	beq.n	80837f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80837f4:	2301      	movs	r3, #1
 80837f6:	e0b8      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80837f8:	687b      	ldr	r3, [r7, #4]
 80837fa:	681b      	ldr	r3, [r3, #0]
 80837fc:	f003 0302 	and.w	r3, r3, #2
 8083800:	2b00      	cmp	r3, #0
 8083802:	d020      	beq.n	8083846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8083804:	687b      	ldr	r3, [r7, #4]
 8083806:	681b      	ldr	r3, [r3, #0]
 8083808:	f003 0304 	and.w	r3, r3, #4
 808380c:	2b00      	cmp	r3, #0
 808380e:	d005      	beq.n	808381c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8083810:	4b59      	ldr	r3, [pc, #356]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083812:	689b      	ldr	r3, [r3, #8]
 8083814:	4a58      	ldr	r2, [pc, #352]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 808381a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 808381c:	687b      	ldr	r3, [r7, #4]
 808381e:	681b      	ldr	r3, [r3, #0]
 8083820:	f003 0308 	and.w	r3, r3, #8
 8083824:	2b00      	cmp	r3, #0
 8083826:	d005      	beq.n	8083834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8083828:	4b53      	ldr	r3, [pc, #332]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808382a:	689b      	ldr	r3, [r3, #8]
 808382c:	4a52      	ldr	r2, [pc, #328]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808382e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8083832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8083834:	4b50      	ldr	r3, [pc, #320]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083836:	689b      	ldr	r3, [r3, #8]
 8083838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 808383c:	687b      	ldr	r3, [r7, #4]
 808383e:	689b      	ldr	r3, [r3, #8]
 8083840:	494d      	ldr	r1, [pc, #308]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083842:	4313      	orrs	r3, r2
 8083844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8083846:	687b      	ldr	r3, [r7, #4]
 8083848:	681b      	ldr	r3, [r3, #0]
 808384a:	f003 0301 	and.w	r3, r3, #1
 808384e:	2b00      	cmp	r3, #0
 8083850:	d044      	beq.n	80838dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8083852:	687b      	ldr	r3, [r7, #4]
 8083854:	685b      	ldr	r3, [r3, #4]
 8083856:	2b01      	cmp	r3, #1
 8083858:	d107      	bne.n	808386a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 808385a:	4b47      	ldr	r3, [pc, #284]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808385c:	681b      	ldr	r3, [r3, #0]
 808385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083862:	2b00      	cmp	r3, #0
 8083864:	d119      	bne.n	808389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083866:	2301      	movs	r3, #1
 8083868:	e07f      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 808386a:	687b      	ldr	r3, [r7, #4]
 808386c:	685b      	ldr	r3, [r3, #4]
 808386e:	2b02      	cmp	r3, #2
 8083870:	d003      	beq.n	808387a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8083872:	687b      	ldr	r3, [r7, #4]
 8083874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8083876:	2b03      	cmp	r3, #3
 8083878:	d107      	bne.n	808388a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 808387a:	4b3f      	ldr	r3, [pc, #252]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808387c:	681b      	ldr	r3, [r3, #0]
 808387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083882:	2b00      	cmp	r3, #0
 8083884:	d109      	bne.n	808389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083886:	2301      	movs	r3, #1
 8083888:	e06f      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 808388a:	4b3b      	ldr	r3, [pc, #236]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808388c:	681b      	ldr	r3, [r3, #0]
 808388e:	f003 0302 	and.w	r3, r3, #2
 8083892:	2b00      	cmp	r3, #0
 8083894:	d101      	bne.n	808389a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083896:	2301      	movs	r3, #1
 8083898:	e067      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 808389a:	4b37      	ldr	r3, [pc, #220]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808389c:	689b      	ldr	r3, [r3, #8]
 808389e:	f023 0203 	bic.w	r2, r3, #3
 80838a2:	687b      	ldr	r3, [r7, #4]
 80838a4:	685b      	ldr	r3, [r3, #4]
 80838a6:	4934      	ldr	r1, [pc, #208]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 80838a8:	4313      	orrs	r3, r2
 80838aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80838ac:	f7fe fdfc 	bl	80824a8 <HAL_GetTick>
 80838b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80838b2:	e00a      	b.n	80838ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80838b4:	f7fe fdf8 	bl	80824a8 <HAL_GetTick>
 80838b8:	4602      	mov	r2, r0
 80838ba:	68fb      	ldr	r3, [r7, #12]
 80838bc:	1ad3      	subs	r3, r2, r3
 80838be:	f241 3288 	movw	r2, #5000	; 0x1388
 80838c2:	4293      	cmp	r3, r2
 80838c4:	d901      	bls.n	80838ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80838c6:	2303      	movs	r3, #3
 80838c8:	e04f      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80838ca:	4b2b      	ldr	r3, [pc, #172]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 80838cc:	689b      	ldr	r3, [r3, #8]
 80838ce:	f003 020c 	and.w	r2, r3, #12
 80838d2:	687b      	ldr	r3, [r7, #4]
 80838d4:	685b      	ldr	r3, [r3, #4]
 80838d6:	009b      	lsls	r3, r3, #2
 80838d8:	429a      	cmp	r2, r3
 80838da:	d1eb      	bne.n	80838b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80838dc:	4b25      	ldr	r3, [pc, #148]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80838de:	681b      	ldr	r3, [r3, #0]
 80838e0:	f003 0307 	and.w	r3, r3, #7
 80838e4:	683a      	ldr	r2, [r7, #0]
 80838e6:	429a      	cmp	r2, r3
 80838e8:	d20c      	bcs.n	8083904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80838ea:	4b22      	ldr	r3, [pc, #136]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80838ec:	683a      	ldr	r2, [r7, #0]
 80838ee:	b2d2      	uxtb	r2, r2
 80838f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80838f2:	4b20      	ldr	r3, [pc, #128]	; (8083974 <HAL_RCC_ClockConfig+0x1b8>)
 80838f4:	681b      	ldr	r3, [r3, #0]
 80838f6:	f003 0307 	and.w	r3, r3, #7
 80838fa:	683a      	ldr	r2, [r7, #0]
 80838fc:	429a      	cmp	r2, r3
 80838fe:	d001      	beq.n	8083904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8083900:	2301      	movs	r3, #1
 8083902:	e032      	b.n	808396a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8083904:	687b      	ldr	r3, [r7, #4]
 8083906:	681b      	ldr	r3, [r3, #0]
 8083908:	f003 0304 	and.w	r3, r3, #4
 808390c:	2b00      	cmp	r3, #0
 808390e:	d008      	beq.n	8083922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8083910:	4b19      	ldr	r3, [pc, #100]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083912:	689b      	ldr	r3, [r3, #8]
 8083914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8083918:	687b      	ldr	r3, [r7, #4]
 808391a:	68db      	ldr	r3, [r3, #12]
 808391c:	4916      	ldr	r1, [pc, #88]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808391e:	4313      	orrs	r3, r2
 8083920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8083922:	687b      	ldr	r3, [r7, #4]
 8083924:	681b      	ldr	r3, [r3, #0]
 8083926:	f003 0308 	and.w	r3, r3, #8
 808392a:	2b00      	cmp	r3, #0
 808392c:	d009      	beq.n	8083942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 808392e:	4b12      	ldr	r3, [pc, #72]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 8083930:	689b      	ldr	r3, [r3, #8]
 8083932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8083936:	687b      	ldr	r3, [r7, #4]
 8083938:	691b      	ldr	r3, [r3, #16]
 808393a:	00db      	lsls	r3, r3, #3
 808393c:	490e      	ldr	r1, [pc, #56]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808393e:	4313      	orrs	r3, r2
 8083940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8083942:	f000 f821 	bl	8083988 <HAL_RCC_GetSysClockFreq>
 8083946:	4602      	mov	r2, r0
 8083948:	4b0b      	ldr	r3, [pc, #44]	; (8083978 <HAL_RCC_ClockConfig+0x1bc>)
 808394a:	689b      	ldr	r3, [r3, #8]
 808394c:	091b      	lsrs	r3, r3, #4
 808394e:	f003 030f 	and.w	r3, r3, #15
 8083952:	490a      	ldr	r1, [pc, #40]	; (808397c <HAL_RCC_ClockConfig+0x1c0>)
 8083954:	5ccb      	ldrb	r3, [r1, r3]
 8083956:	fa22 f303 	lsr.w	r3, r2, r3
 808395a:	4a09      	ldr	r2, [pc, #36]	; (8083980 <HAL_RCC_ClockConfig+0x1c4>)
 808395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 808395e:	4b09      	ldr	r3, [pc, #36]	; (8083984 <HAL_RCC_ClockConfig+0x1c8>)
 8083960:	681b      	ldr	r3, [r3, #0]
 8083962:	4618      	mov	r0, r3
 8083964:	f7fe fd5c 	bl	8082420 <HAL_InitTick>

  return HAL_OK;
 8083968:	2300      	movs	r3, #0
}
 808396a:	4618      	mov	r0, r3
 808396c:	3710      	adds	r7, #16
 808396e:	46bd      	mov	sp, r7
 8083970:	bd80      	pop	{r7, pc}
 8083972:	bf00      	nop
 8083974:	40023c00 	.word	0x40023c00
 8083978:	40023800 	.word	0x40023800
 808397c:	0808b4f0 	.word	0x0808b4f0
 8083980:	20000080 	.word	0x20000080
 8083984:	20000084 	.word	0x20000084

08083988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8083988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 808398c:	b094      	sub	sp, #80	; 0x50
 808398e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8083990:	2300      	movs	r3, #0
 8083992:	647b      	str	r3, [r7, #68]	; 0x44
 8083994:	2300      	movs	r3, #0
 8083996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8083998:	2300      	movs	r3, #0
 808399a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 808399c:	2300      	movs	r3, #0
 808399e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80839a0:	4b79      	ldr	r3, [pc, #484]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80839a2:	689b      	ldr	r3, [r3, #8]
 80839a4:	f003 030c 	and.w	r3, r3, #12
 80839a8:	2b08      	cmp	r3, #8
 80839aa:	d00d      	beq.n	80839c8 <HAL_RCC_GetSysClockFreq+0x40>
 80839ac:	2b08      	cmp	r3, #8
 80839ae:	f200 80e1 	bhi.w	8083b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80839b2:	2b00      	cmp	r3, #0
 80839b4:	d002      	beq.n	80839bc <HAL_RCC_GetSysClockFreq+0x34>
 80839b6:	2b04      	cmp	r3, #4
 80839b8:	d003      	beq.n	80839c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80839ba:	e0db      	b.n	8083b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80839bc:	4b73      	ldr	r3, [pc, #460]	; (8083b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80839be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80839c0:	e0db      	b.n	8083b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80839c2:	4b73      	ldr	r3, [pc, #460]	; (8083b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80839c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80839c6:	e0d8      	b.n	8083b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80839c8:	4b6f      	ldr	r3, [pc, #444]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80839ca:	685b      	ldr	r3, [r3, #4]
 80839cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80839d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80839d2:	4b6d      	ldr	r3, [pc, #436]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80839d4:	685b      	ldr	r3, [r3, #4]
 80839d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80839da:	2b00      	cmp	r3, #0
 80839dc:	d063      	beq.n	8083aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80839de:	4b6a      	ldr	r3, [pc, #424]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80839e0:	685b      	ldr	r3, [r3, #4]
 80839e2:	099b      	lsrs	r3, r3, #6
 80839e4:	2200      	movs	r2, #0
 80839e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80839e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80839ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80839ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80839f0:	633b      	str	r3, [r7, #48]	; 0x30
 80839f2:	2300      	movs	r3, #0
 80839f4:	637b      	str	r3, [r7, #52]	; 0x34
 80839f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80839fa:	4622      	mov	r2, r4
 80839fc:	462b      	mov	r3, r5
 80839fe:	f04f 0000 	mov.w	r0, #0
 8083a02:	f04f 0100 	mov.w	r1, #0
 8083a06:	0159      	lsls	r1, r3, #5
 8083a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8083a0c:	0150      	lsls	r0, r2, #5
 8083a0e:	4602      	mov	r2, r0
 8083a10:	460b      	mov	r3, r1
 8083a12:	4621      	mov	r1, r4
 8083a14:	1a51      	subs	r1, r2, r1
 8083a16:	6139      	str	r1, [r7, #16]
 8083a18:	4629      	mov	r1, r5
 8083a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8083a1e:	617b      	str	r3, [r7, #20]
 8083a20:	f04f 0200 	mov.w	r2, #0
 8083a24:	f04f 0300 	mov.w	r3, #0
 8083a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8083a2c:	4659      	mov	r1, fp
 8083a2e:	018b      	lsls	r3, r1, #6
 8083a30:	4651      	mov	r1, sl
 8083a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8083a36:	4651      	mov	r1, sl
 8083a38:	018a      	lsls	r2, r1, #6
 8083a3a:	4651      	mov	r1, sl
 8083a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8083a40:	4659      	mov	r1, fp
 8083a42:	eb63 0901 	sbc.w	r9, r3, r1
 8083a46:	f04f 0200 	mov.w	r2, #0
 8083a4a:	f04f 0300 	mov.w	r3, #0
 8083a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8083a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8083a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8083a5a:	4690      	mov	r8, r2
 8083a5c:	4699      	mov	r9, r3
 8083a5e:	4623      	mov	r3, r4
 8083a60:	eb18 0303 	adds.w	r3, r8, r3
 8083a64:	60bb      	str	r3, [r7, #8]
 8083a66:	462b      	mov	r3, r5
 8083a68:	eb49 0303 	adc.w	r3, r9, r3
 8083a6c:	60fb      	str	r3, [r7, #12]
 8083a6e:	f04f 0200 	mov.w	r2, #0
 8083a72:	f04f 0300 	mov.w	r3, #0
 8083a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8083a7a:	4629      	mov	r1, r5
 8083a7c:	024b      	lsls	r3, r1, #9
 8083a7e:	4621      	mov	r1, r4
 8083a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8083a84:	4621      	mov	r1, r4
 8083a86:	024a      	lsls	r2, r1, #9
 8083a88:	4610      	mov	r0, r2
 8083a8a:	4619      	mov	r1, r3
 8083a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8083a8e:	2200      	movs	r2, #0
 8083a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8083a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8083a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8083a98:	f7fd f886 	bl	8080ba8 <__aeabi_uldivmod>
 8083a9c:	4602      	mov	r2, r0
 8083a9e:	460b      	mov	r3, r1
 8083aa0:	4613      	mov	r3, r2
 8083aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8083aa4:	e058      	b.n	8083b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8083aa6:	4b38      	ldr	r3, [pc, #224]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8083aa8:	685b      	ldr	r3, [r3, #4]
 8083aaa:	099b      	lsrs	r3, r3, #6
 8083aac:	2200      	movs	r2, #0
 8083aae:	4618      	mov	r0, r3
 8083ab0:	4611      	mov	r1, r2
 8083ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8083ab6:	623b      	str	r3, [r7, #32]
 8083ab8:	2300      	movs	r3, #0
 8083aba:	627b      	str	r3, [r7, #36]	; 0x24
 8083abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8083ac0:	4642      	mov	r2, r8
 8083ac2:	464b      	mov	r3, r9
 8083ac4:	f04f 0000 	mov.w	r0, #0
 8083ac8:	f04f 0100 	mov.w	r1, #0
 8083acc:	0159      	lsls	r1, r3, #5
 8083ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8083ad2:	0150      	lsls	r0, r2, #5
 8083ad4:	4602      	mov	r2, r0
 8083ad6:	460b      	mov	r3, r1
 8083ad8:	4641      	mov	r1, r8
 8083ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8083ade:	4649      	mov	r1, r9
 8083ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8083ae4:	f04f 0200 	mov.w	r2, #0
 8083ae8:	f04f 0300 	mov.w	r3, #0
 8083aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8083af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8083af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8083af8:	ebb2 040a 	subs.w	r4, r2, sl
 8083afc:	eb63 050b 	sbc.w	r5, r3, fp
 8083b00:	f04f 0200 	mov.w	r2, #0
 8083b04:	f04f 0300 	mov.w	r3, #0
 8083b08:	00eb      	lsls	r3, r5, #3
 8083b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8083b0e:	00e2      	lsls	r2, r4, #3
 8083b10:	4614      	mov	r4, r2
 8083b12:	461d      	mov	r5, r3
 8083b14:	4643      	mov	r3, r8
 8083b16:	18e3      	adds	r3, r4, r3
 8083b18:	603b      	str	r3, [r7, #0]
 8083b1a:	464b      	mov	r3, r9
 8083b1c:	eb45 0303 	adc.w	r3, r5, r3
 8083b20:	607b      	str	r3, [r7, #4]
 8083b22:	f04f 0200 	mov.w	r2, #0
 8083b26:	f04f 0300 	mov.w	r3, #0
 8083b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8083b2e:	4629      	mov	r1, r5
 8083b30:	028b      	lsls	r3, r1, #10
 8083b32:	4621      	mov	r1, r4
 8083b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8083b38:	4621      	mov	r1, r4
 8083b3a:	028a      	lsls	r2, r1, #10
 8083b3c:	4610      	mov	r0, r2
 8083b3e:	4619      	mov	r1, r3
 8083b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8083b42:	2200      	movs	r2, #0
 8083b44:	61bb      	str	r3, [r7, #24]
 8083b46:	61fa      	str	r2, [r7, #28]
 8083b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8083b4c:	f7fd f82c 	bl	8080ba8 <__aeabi_uldivmod>
 8083b50:	4602      	mov	r2, r0
 8083b52:	460b      	mov	r3, r1
 8083b54:	4613      	mov	r3, r2
 8083b56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8083b58:	4b0b      	ldr	r3, [pc, #44]	; (8083b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8083b5a:	685b      	ldr	r3, [r3, #4]
 8083b5c:	0c1b      	lsrs	r3, r3, #16
 8083b5e:	f003 0303 	and.w	r3, r3, #3
 8083b62:	3301      	adds	r3, #1
 8083b64:	005b      	lsls	r3, r3, #1
 8083b66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8083b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8083b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8083b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8083b70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8083b72:	e002      	b.n	8083b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8083b74:	4b05      	ldr	r3, [pc, #20]	; (8083b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8083b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8083b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8083b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8083b7c:	4618      	mov	r0, r3
 8083b7e:	3750      	adds	r7, #80	; 0x50
 8083b80:	46bd      	mov	sp, r7
 8083b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8083b86:	bf00      	nop
 8083b88:	40023800 	.word	0x40023800
 8083b8c:	00f42400 	.word	0x00f42400
 8083b90:	007a1200 	.word	0x007a1200

08083b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8083b94:	b480      	push	{r7}
 8083b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8083b98:	4b03      	ldr	r3, [pc, #12]	; (8083ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8083b9a:	681b      	ldr	r3, [r3, #0]
}
 8083b9c:	4618      	mov	r0, r3
 8083b9e:	46bd      	mov	sp, r7
 8083ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083ba4:	4770      	bx	lr
 8083ba6:	bf00      	nop
 8083ba8:	20000080 	.word	0x20000080

08083bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8083bac:	b580      	push	{r7, lr}
 8083bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8083bb0:	f7ff fff0 	bl	8083b94 <HAL_RCC_GetHCLKFreq>
 8083bb4:	4602      	mov	r2, r0
 8083bb6:	4b05      	ldr	r3, [pc, #20]	; (8083bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8083bb8:	689b      	ldr	r3, [r3, #8]
 8083bba:	0a9b      	lsrs	r3, r3, #10
 8083bbc:	f003 0307 	and.w	r3, r3, #7
 8083bc0:	4903      	ldr	r1, [pc, #12]	; (8083bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8083bc2:	5ccb      	ldrb	r3, [r1, r3]
 8083bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8083bc8:	4618      	mov	r0, r3
 8083bca:	bd80      	pop	{r7, pc}
 8083bcc:	40023800 	.word	0x40023800
 8083bd0:	0808b500 	.word	0x0808b500

08083bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8083bd4:	b580      	push	{r7, lr}
 8083bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8083bd8:	f7ff ffdc 	bl	8083b94 <HAL_RCC_GetHCLKFreq>
 8083bdc:	4602      	mov	r2, r0
 8083bde:	4b05      	ldr	r3, [pc, #20]	; (8083bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8083be0:	689b      	ldr	r3, [r3, #8]
 8083be2:	0b5b      	lsrs	r3, r3, #13
 8083be4:	f003 0307 	and.w	r3, r3, #7
 8083be8:	4903      	ldr	r1, [pc, #12]	; (8083bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8083bea:	5ccb      	ldrb	r3, [r1, r3]
 8083bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8083bf0:	4618      	mov	r0, r3
 8083bf2:	bd80      	pop	{r7, pc}
 8083bf4:	40023800 	.word	0x40023800
 8083bf8:	0808b500 	.word	0x0808b500

08083bfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8083bfc:	b580      	push	{r7, lr}
 8083bfe:	b086      	sub	sp, #24
 8083c00:	af00      	add	r7, sp, #0
 8083c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8083c04:	2300      	movs	r3, #0
 8083c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8083c08:	2300      	movs	r3, #0
 8083c0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8083c0c:	687b      	ldr	r3, [r7, #4]
 8083c0e:	681b      	ldr	r3, [r3, #0]
 8083c10:	f003 0301 	and.w	r3, r3, #1
 8083c14:	2b00      	cmp	r3, #0
 8083c16:	d105      	bne.n	8083c24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8083c18:	687b      	ldr	r3, [r7, #4]
 8083c1a:	681b      	ldr	r3, [r3, #0]
 8083c1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8083c20:	2b00      	cmp	r3, #0
 8083c22:	d035      	beq.n	8083c90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8083c24:	4b62      	ldr	r3, [pc, #392]	; (8083db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8083c26:	2200      	movs	r2, #0
 8083c28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8083c2a:	f7fe fc3d 	bl	80824a8 <HAL_GetTick>
 8083c2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8083c30:	e008      	b.n	8083c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8083c32:	f7fe fc39 	bl	80824a8 <HAL_GetTick>
 8083c36:	4602      	mov	r2, r0
 8083c38:	697b      	ldr	r3, [r7, #20]
 8083c3a:	1ad3      	subs	r3, r2, r3
 8083c3c:	2b02      	cmp	r3, #2
 8083c3e:	d901      	bls.n	8083c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8083c40:	2303      	movs	r3, #3
 8083c42:	e0b0      	b.n	8083da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8083c44:	4b5b      	ldr	r3, [pc, #364]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083c46:	681b      	ldr	r3, [r3, #0]
 8083c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8083c4c:	2b00      	cmp	r3, #0
 8083c4e:	d1f0      	bne.n	8083c32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8083c50:	687b      	ldr	r3, [r7, #4]
 8083c52:	685b      	ldr	r3, [r3, #4]
 8083c54:	019a      	lsls	r2, r3, #6
 8083c56:	687b      	ldr	r3, [r7, #4]
 8083c58:	689b      	ldr	r3, [r3, #8]
 8083c5a:	071b      	lsls	r3, r3, #28
 8083c5c:	4955      	ldr	r1, [pc, #340]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083c5e:	4313      	orrs	r3, r2
 8083c60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8083c64:	4b52      	ldr	r3, [pc, #328]	; (8083db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8083c66:	2201      	movs	r2, #1
 8083c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8083c6a:	f7fe fc1d 	bl	80824a8 <HAL_GetTick>
 8083c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8083c70:	e008      	b.n	8083c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8083c72:	f7fe fc19 	bl	80824a8 <HAL_GetTick>
 8083c76:	4602      	mov	r2, r0
 8083c78:	697b      	ldr	r3, [r7, #20]
 8083c7a:	1ad3      	subs	r3, r2, r3
 8083c7c:	2b02      	cmp	r3, #2
 8083c7e:	d901      	bls.n	8083c84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8083c80:	2303      	movs	r3, #3
 8083c82:	e090      	b.n	8083da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8083c84:	4b4b      	ldr	r3, [pc, #300]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083c86:	681b      	ldr	r3, [r3, #0]
 8083c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8083c8c:	2b00      	cmp	r3, #0
 8083c8e:	d0f0      	beq.n	8083c72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8083c90:	687b      	ldr	r3, [r7, #4]
 8083c92:	681b      	ldr	r3, [r3, #0]
 8083c94:	f003 0302 	and.w	r3, r3, #2
 8083c98:	2b00      	cmp	r3, #0
 8083c9a:	f000 8083 	beq.w	8083da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8083c9e:	2300      	movs	r3, #0
 8083ca0:	60fb      	str	r3, [r7, #12]
 8083ca2:	4b44      	ldr	r3, [pc, #272]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083ca6:	4a43      	ldr	r2, [pc, #268]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8083cac:	6413      	str	r3, [r2, #64]	; 0x40
 8083cae:	4b41      	ldr	r3, [pc, #260]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8083cb6:	60fb      	str	r3, [r7, #12]
 8083cb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8083cba:	4b3f      	ldr	r3, [pc, #252]	; (8083db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8083cbc:	681b      	ldr	r3, [r3, #0]
 8083cbe:	4a3e      	ldr	r2, [pc, #248]	; (8083db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8083cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083cc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8083cc6:	f7fe fbef 	bl	80824a8 <HAL_GetTick>
 8083cca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8083ccc:	e008      	b.n	8083ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8083cce:	f7fe fbeb 	bl	80824a8 <HAL_GetTick>
 8083cd2:	4602      	mov	r2, r0
 8083cd4:	697b      	ldr	r3, [r7, #20]
 8083cd6:	1ad3      	subs	r3, r2, r3
 8083cd8:	2b02      	cmp	r3, #2
 8083cda:	d901      	bls.n	8083ce0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8083cdc:	2303      	movs	r3, #3
 8083cde:	e062      	b.n	8083da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8083ce0:	4b35      	ldr	r3, [pc, #212]	; (8083db8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8083ce2:	681b      	ldr	r3, [r3, #0]
 8083ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083ce8:	2b00      	cmp	r3, #0
 8083cea:	d0f0      	beq.n	8083cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8083cec:	4b31      	ldr	r3, [pc, #196]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8083cf4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8083cf6:	693b      	ldr	r3, [r7, #16]
 8083cf8:	2b00      	cmp	r3, #0
 8083cfa:	d02f      	beq.n	8083d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8083cfc:	687b      	ldr	r3, [r7, #4]
 8083cfe:	68db      	ldr	r3, [r3, #12]
 8083d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8083d04:	693a      	ldr	r2, [r7, #16]
 8083d06:	429a      	cmp	r2, r3
 8083d08:	d028      	beq.n	8083d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8083d0a:	4b2a      	ldr	r3, [pc, #168]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8083d12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8083d14:	4b29      	ldr	r3, [pc, #164]	; (8083dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8083d16:	2201      	movs	r2, #1
 8083d18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8083d1a:	4b28      	ldr	r3, [pc, #160]	; (8083dbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8083d1c:	2200      	movs	r2, #0
 8083d1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8083d20:	4a24      	ldr	r2, [pc, #144]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d22:	693b      	ldr	r3, [r7, #16]
 8083d24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8083d26:	4b23      	ldr	r3, [pc, #140]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d2a:	f003 0301 	and.w	r3, r3, #1
 8083d2e:	2b01      	cmp	r3, #1
 8083d30:	d114      	bne.n	8083d5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8083d32:	f7fe fbb9 	bl	80824a8 <HAL_GetTick>
 8083d36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8083d38:	e00a      	b.n	8083d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8083d3a:	f7fe fbb5 	bl	80824a8 <HAL_GetTick>
 8083d3e:	4602      	mov	r2, r0
 8083d40:	697b      	ldr	r3, [r7, #20]
 8083d42:	1ad3      	subs	r3, r2, r3
 8083d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8083d48:	4293      	cmp	r3, r2
 8083d4a:	d901      	bls.n	8083d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8083d4c:	2303      	movs	r3, #3
 8083d4e:	e02a      	b.n	8083da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8083d50:	4b18      	ldr	r3, [pc, #96]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d54:	f003 0302 	and.w	r3, r3, #2
 8083d58:	2b00      	cmp	r3, #0
 8083d5a:	d0ee      	beq.n	8083d3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8083d5c:	687b      	ldr	r3, [r7, #4]
 8083d5e:	68db      	ldr	r3, [r3, #12]
 8083d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8083d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8083d68:	d10d      	bne.n	8083d86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8083d6a:	4b12      	ldr	r3, [pc, #72]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d6c:	689b      	ldr	r3, [r3, #8]
 8083d6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8083d72:	687b      	ldr	r3, [r7, #4]
 8083d74:	68db      	ldr	r3, [r3, #12]
 8083d76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8083d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8083d7e:	490d      	ldr	r1, [pc, #52]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d80:	4313      	orrs	r3, r2
 8083d82:	608b      	str	r3, [r1, #8]
 8083d84:	e005      	b.n	8083d92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8083d86:	4b0b      	ldr	r3, [pc, #44]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d88:	689b      	ldr	r3, [r3, #8]
 8083d8a:	4a0a      	ldr	r2, [pc, #40]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8083d90:	6093      	str	r3, [r2, #8]
 8083d92:	4b08      	ldr	r3, [pc, #32]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8083d96:	687b      	ldr	r3, [r7, #4]
 8083d98:	68db      	ldr	r3, [r3, #12]
 8083d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8083d9e:	4905      	ldr	r1, [pc, #20]	; (8083db4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8083da0:	4313      	orrs	r3, r2
 8083da2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8083da4:	2300      	movs	r3, #0
}
 8083da6:	4618      	mov	r0, r3
 8083da8:	3718      	adds	r7, #24
 8083daa:	46bd      	mov	sp, r7
 8083dac:	bd80      	pop	{r7, pc}
 8083dae:	bf00      	nop
 8083db0:	42470068 	.word	0x42470068
 8083db4:	40023800 	.word	0x40023800
 8083db8:	40007000 	.word	0x40007000
 8083dbc:	42470e40 	.word	0x42470e40

08083dc0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8083dc0:	b580      	push	{r7, lr}
 8083dc2:	b084      	sub	sp, #16
 8083dc4:	af00      	add	r7, sp, #0
 8083dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8083dc8:	2301      	movs	r3, #1
 8083dca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8083dcc:	687b      	ldr	r3, [r7, #4]
 8083dce:	2b00      	cmp	r3, #0
 8083dd0:	d101      	bne.n	8083dd6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8083dd2:	2301      	movs	r3, #1
 8083dd4:	e066      	b.n	8083ea4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8083dd6:	687b      	ldr	r3, [r7, #4]
 8083dd8:	7f5b      	ldrb	r3, [r3, #29]
 8083dda:	b2db      	uxtb	r3, r3
 8083ddc:	2b00      	cmp	r3, #0
 8083dde:	d105      	bne.n	8083dec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8083de0:	687b      	ldr	r3, [r7, #4]
 8083de2:	2200      	movs	r2, #0
 8083de4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8083de6:	6878      	ldr	r0, [r7, #4]
 8083de8:	f7fd ff26 	bl	8081c38 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8083dec:	687b      	ldr	r3, [r7, #4]
 8083dee:	2202      	movs	r2, #2
 8083df0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8083df2:	687b      	ldr	r3, [r7, #4]
 8083df4:	681b      	ldr	r3, [r3, #0]
 8083df6:	22ca      	movs	r2, #202	; 0xca
 8083df8:	625a      	str	r2, [r3, #36]	; 0x24
 8083dfa:	687b      	ldr	r3, [r7, #4]
 8083dfc:	681b      	ldr	r3, [r3, #0]
 8083dfe:	2253      	movs	r2, #83	; 0x53
 8083e00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8083e02:	6878      	ldr	r0, [r7, #4]
 8083e04:	f000 fb20 	bl	8084448 <RTC_EnterInitMode>
 8083e08:	4603      	mov	r3, r0
 8083e0a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8083e0c:	7bfb      	ldrb	r3, [r7, #15]
 8083e0e:	2b00      	cmp	r3, #0
 8083e10:	d12c      	bne.n	8083e6c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8083e12:	687b      	ldr	r3, [r7, #4]
 8083e14:	681b      	ldr	r3, [r3, #0]
 8083e16:	689b      	ldr	r3, [r3, #8]
 8083e18:	687a      	ldr	r2, [r7, #4]
 8083e1a:	6812      	ldr	r2, [r2, #0]
 8083e1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8083e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8083e24:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8083e26:	687b      	ldr	r3, [r7, #4]
 8083e28:	681b      	ldr	r3, [r3, #0]
 8083e2a:	6899      	ldr	r1, [r3, #8]
 8083e2c:	687b      	ldr	r3, [r7, #4]
 8083e2e:	685a      	ldr	r2, [r3, #4]
 8083e30:	687b      	ldr	r3, [r7, #4]
 8083e32:	691b      	ldr	r3, [r3, #16]
 8083e34:	431a      	orrs	r2, r3
 8083e36:	687b      	ldr	r3, [r7, #4]
 8083e38:	695b      	ldr	r3, [r3, #20]
 8083e3a:	431a      	orrs	r2, r3
 8083e3c:	687b      	ldr	r3, [r7, #4]
 8083e3e:	681b      	ldr	r3, [r3, #0]
 8083e40:	430a      	orrs	r2, r1
 8083e42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8083e44:	687b      	ldr	r3, [r7, #4]
 8083e46:	681b      	ldr	r3, [r3, #0]
 8083e48:	687a      	ldr	r2, [r7, #4]
 8083e4a:	68d2      	ldr	r2, [r2, #12]
 8083e4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8083e4e:	687b      	ldr	r3, [r7, #4]
 8083e50:	681b      	ldr	r3, [r3, #0]
 8083e52:	6919      	ldr	r1, [r3, #16]
 8083e54:	687b      	ldr	r3, [r7, #4]
 8083e56:	689b      	ldr	r3, [r3, #8]
 8083e58:	041a      	lsls	r2, r3, #16
 8083e5a:	687b      	ldr	r3, [r7, #4]
 8083e5c:	681b      	ldr	r3, [r3, #0]
 8083e5e:	430a      	orrs	r2, r1
 8083e60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8083e62:	6878      	ldr	r0, [r7, #4]
 8083e64:	f000 fb27 	bl	80844b6 <RTC_ExitInitMode>
 8083e68:	4603      	mov	r3, r0
 8083e6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8083e6c:	7bfb      	ldrb	r3, [r7, #15]
 8083e6e:	2b00      	cmp	r3, #0
 8083e70:	d113      	bne.n	8083e9a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8083e72:	687b      	ldr	r3, [r7, #4]
 8083e74:	681b      	ldr	r3, [r3, #0]
 8083e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8083e78:	687b      	ldr	r3, [r7, #4]
 8083e7a:	681b      	ldr	r3, [r3, #0]
 8083e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8083e80:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8083e82:	687b      	ldr	r3, [r7, #4]
 8083e84:	681b      	ldr	r3, [r3, #0]
 8083e86:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8083e88:	687b      	ldr	r3, [r7, #4]
 8083e8a:	699a      	ldr	r2, [r3, #24]
 8083e8c:	687b      	ldr	r3, [r7, #4]
 8083e8e:	681b      	ldr	r3, [r3, #0]
 8083e90:	430a      	orrs	r2, r1
 8083e92:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8083e94:	687b      	ldr	r3, [r7, #4]
 8083e96:	2201      	movs	r2, #1
 8083e98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8083e9a:	687b      	ldr	r3, [r7, #4]
 8083e9c:	681b      	ldr	r3, [r3, #0]
 8083e9e:	22ff      	movs	r2, #255	; 0xff
 8083ea0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8083ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8083ea4:	4618      	mov	r0, r3
 8083ea6:	3710      	adds	r7, #16
 8083ea8:	46bd      	mov	sp, r7
 8083eaa:	bd80      	pop	{r7, pc}

08083eac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8083eac:	b590      	push	{r4, r7, lr}
 8083eae:	b087      	sub	sp, #28
 8083eb0:	af00      	add	r7, sp, #0
 8083eb2:	60f8      	str	r0, [r7, #12]
 8083eb4:	60b9      	str	r1, [r7, #8]
 8083eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8083eb8:	2300      	movs	r3, #0
 8083eba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8083ebc:	68fb      	ldr	r3, [r7, #12]
 8083ebe:	7f1b      	ldrb	r3, [r3, #28]
 8083ec0:	2b01      	cmp	r3, #1
 8083ec2:	d101      	bne.n	8083ec8 <HAL_RTC_SetTime+0x1c>
 8083ec4:	2302      	movs	r3, #2
 8083ec6:	e087      	b.n	8083fd8 <HAL_RTC_SetTime+0x12c>
 8083ec8:	68fb      	ldr	r3, [r7, #12]
 8083eca:	2201      	movs	r2, #1
 8083ecc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8083ece:	68fb      	ldr	r3, [r7, #12]
 8083ed0:	2202      	movs	r2, #2
 8083ed2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8083ed4:	687b      	ldr	r3, [r7, #4]
 8083ed6:	2b00      	cmp	r3, #0
 8083ed8:	d126      	bne.n	8083f28 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8083eda:	68fb      	ldr	r3, [r7, #12]
 8083edc:	681b      	ldr	r3, [r3, #0]
 8083ede:	689b      	ldr	r3, [r3, #8]
 8083ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8083ee4:	2b00      	cmp	r3, #0
 8083ee6:	d102      	bne.n	8083eee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8083ee8:	68bb      	ldr	r3, [r7, #8]
 8083eea:	2200      	movs	r2, #0
 8083eec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8083eee:	68bb      	ldr	r3, [r7, #8]
 8083ef0:	781b      	ldrb	r3, [r3, #0]
 8083ef2:	4618      	mov	r0, r3
 8083ef4:	f000 fb04 	bl	8084500 <RTC_ByteToBcd2>
 8083ef8:	4603      	mov	r3, r0
 8083efa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8083efc:	68bb      	ldr	r3, [r7, #8]
 8083efe:	785b      	ldrb	r3, [r3, #1]
 8083f00:	4618      	mov	r0, r3
 8083f02:	f000 fafd 	bl	8084500 <RTC_ByteToBcd2>
 8083f06:	4603      	mov	r3, r0
 8083f08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8083f0a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8083f0c:	68bb      	ldr	r3, [r7, #8]
 8083f0e:	789b      	ldrb	r3, [r3, #2]
 8083f10:	4618      	mov	r0, r3
 8083f12:	f000 faf5 	bl	8084500 <RTC_ByteToBcd2>
 8083f16:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8083f18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8083f1c:	68bb      	ldr	r3, [r7, #8]
 8083f1e:	78db      	ldrb	r3, [r3, #3]
 8083f20:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8083f22:	4313      	orrs	r3, r2
 8083f24:	617b      	str	r3, [r7, #20]
 8083f26:	e018      	b.n	8083f5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8083f28:	68fb      	ldr	r3, [r7, #12]
 8083f2a:	681b      	ldr	r3, [r3, #0]
 8083f2c:	689b      	ldr	r3, [r3, #8]
 8083f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8083f32:	2b00      	cmp	r3, #0
 8083f34:	d102      	bne.n	8083f3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8083f36:	68bb      	ldr	r3, [r7, #8]
 8083f38:	2200      	movs	r2, #0
 8083f3a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8083f3c:	68bb      	ldr	r3, [r7, #8]
 8083f3e:	781b      	ldrb	r3, [r3, #0]
 8083f40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8083f42:	68bb      	ldr	r3, [r7, #8]
 8083f44:	785b      	ldrb	r3, [r3, #1]
 8083f46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8083f48:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8083f4a:	68ba      	ldr	r2, [r7, #8]
 8083f4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8083f4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8083f50:	68bb      	ldr	r3, [r7, #8]
 8083f52:	78db      	ldrb	r3, [r3, #3]
 8083f54:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8083f56:	4313      	orrs	r3, r2
 8083f58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8083f5a:	68fb      	ldr	r3, [r7, #12]
 8083f5c:	681b      	ldr	r3, [r3, #0]
 8083f5e:	22ca      	movs	r2, #202	; 0xca
 8083f60:	625a      	str	r2, [r3, #36]	; 0x24
 8083f62:	68fb      	ldr	r3, [r7, #12]
 8083f64:	681b      	ldr	r3, [r3, #0]
 8083f66:	2253      	movs	r2, #83	; 0x53
 8083f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8083f6a:	68f8      	ldr	r0, [r7, #12]
 8083f6c:	f000 fa6c 	bl	8084448 <RTC_EnterInitMode>
 8083f70:	4603      	mov	r3, r0
 8083f72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8083f74:	7cfb      	ldrb	r3, [r7, #19]
 8083f76:	2b00      	cmp	r3, #0
 8083f78:	d120      	bne.n	8083fbc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8083f7a:	68fb      	ldr	r3, [r7, #12]
 8083f7c:	681a      	ldr	r2, [r3, #0]
 8083f7e:	697b      	ldr	r3, [r7, #20]
 8083f80:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8083f84:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8083f88:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8083f8a:	68fb      	ldr	r3, [r7, #12]
 8083f8c:	681b      	ldr	r3, [r3, #0]
 8083f8e:	689a      	ldr	r2, [r3, #8]
 8083f90:	68fb      	ldr	r3, [r7, #12]
 8083f92:	681b      	ldr	r3, [r3, #0]
 8083f94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8083f98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8083f9a:	68fb      	ldr	r3, [r7, #12]
 8083f9c:	681b      	ldr	r3, [r3, #0]
 8083f9e:	6899      	ldr	r1, [r3, #8]
 8083fa0:	68bb      	ldr	r3, [r7, #8]
 8083fa2:	68da      	ldr	r2, [r3, #12]
 8083fa4:	68bb      	ldr	r3, [r7, #8]
 8083fa6:	691b      	ldr	r3, [r3, #16]
 8083fa8:	431a      	orrs	r2, r3
 8083faa:	68fb      	ldr	r3, [r7, #12]
 8083fac:	681b      	ldr	r3, [r3, #0]
 8083fae:	430a      	orrs	r2, r1
 8083fb0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8083fb2:	68f8      	ldr	r0, [r7, #12]
 8083fb4:	f000 fa7f 	bl	80844b6 <RTC_ExitInitMode>
 8083fb8:	4603      	mov	r3, r0
 8083fba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8083fbc:	7cfb      	ldrb	r3, [r7, #19]
 8083fbe:	2b00      	cmp	r3, #0
 8083fc0:	d102      	bne.n	8083fc8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8083fc2:	68fb      	ldr	r3, [r7, #12]
 8083fc4:	2201      	movs	r2, #1
 8083fc6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8083fc8:	68fb      	ldr	r3, [r7, #12]
 8083fca:	681b      	ldr	r3, [r3, #0]
 8083fcc:	22ff      	movs	r2, #255	; 0xff
 8083fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8083fd0:	68fb      	ldr	r3, [r7, #12]
 8083fd2:	2200      	movs	r2, #0
 8083fd4:	771a      	strb	r2, [r3, #28]

  return status;
 8083fd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8083fd8:	4618      	mov	r0, r3
 8083fda:	371c      	adds	r7, #28
 8083fdc:	46bd      	mov	sp, r7
 8083fde:	bd90      	pop	{r4, r7, pc}

08083fe0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8083fe0:	b590      	push	{r4, r7, lr}
 8083fe2:	b087      	sub	sp, #28
 8083fe4:	af00      	add	r7, sp, #0
 8083fe6:	60f8      	str	r0, [r7, #12]
 8083fe8:	60b9      	str	r1, [r7, #8]
 8083fea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8083fec:	2300      	movs	r3, #0
 8083fee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8083ff0:	68fb      	ldr	r3, [r7, #12]
 8083ff2:	7f1b      	ldrb	r3, [r3, #28]
 8083ff4:	2b01      	cmp	r3, #1
 8083ff6:	d101      	bne.n	8083ffc <HAL_RTC_SetDate+0x1c>
 8083ff8:	2302      	movs	r3, #2
 8083ffa:	e071      	b.n	80840e0 <HAL_RTC_SetDate+0x100>
 8083ffc:	68fb      	ldr	r3, [r7, #12]
 8083ffe:	2201      	movs	r2, #1
 8084000:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8084002:	68fb      	ldr	r3, [r7, #12]
 8084004:	2202      	movs	r2, #2
 8084006:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8084008:	687b      	ldr	r3, [r7, #4]
 808400a:	2b00      	cmp	r3, #0
 808400c:	d10e      	bne.n	808402c <HAL_RTC_SetDate+0x4c>
 808400e:	68bb      	ldr	r3, [r7, #8]
 8084010:	785b      	ldrb	r3, [r3, #1]
 8084012:	f003 0310 	and.w	r3, r3, #16
 8084016:	2b00      	cmp	r3, #0
 8084018:	d008      	beq.n	808402c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 808401a:	68bb      	ldr	r3, [r7, #8]
 808401c:	785b      	ldrb	r3, [r3, #1]
 808401e:	f023 0310 	bic.w	r3, r3, #16
 8084022:	b2db      	uxtb	r3, r3
 8084024:	330a      	adds	r3, #10
 8084026:	b2da      	uxtb	r2, r3
 8084028:	68bb      	ldr	r3, [r7, #8]
 808402a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 808402c:	687b      	ldr	r3, [r7, #4]
 808402e:	2b00      	cmp	r3, #0
 8084030:	d11c      	bne.n	808406c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8084032:	68bb      	ldr	r3, [r7, #8]
 8084034:	78db      	ldrb	r3, [r3, #3]
 8084036:	4618      	mov	r0, r3
 8084038:	f000 fa62 	bl	8084500 <RTC_ByteToBcd2>
 808403c:	4603      	mov	r3, r0
 808403e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8084040:	68bb      	ldr	r3, [r7, #8]
 8084042:	785b      	ldrb	r3, [r3, #1]
 8084044:	4618      	mov	r0, r3
 8084046:	f000 fa5b 	bl	8084500 <RTC_ByteToBcd2>
 808404a:	4603      	mov	r3, r0
 808404c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 808404e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8084050:	68bb      	ldr	r3, [r7, #8]
 8084052:	789b      	ldrb	r3, [r3, #2]
 8084054:	4618      	mov	r0, r3
 8084056:	f000 fa53 	bl	8084500 <RTC_ByteToBcd2>
 808405a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 808405c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8084060:	68bb      	ldr	r3, [r7, #8]
 8084062:	781b      	ldrb	r3, [r3, #0]
 8084064:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8084066:	4313      	orrs	r3, r2
 8084068:	617b      	str	r3, [r7, #20]
 808406a:	e00e      	b.n	808408a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 808406c:	68bb      	ldr	r3, [r7, #8]
 808406e:	78db      	ldrb	r3, [r3, #3]
 8084070:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8084072:	68bb      	ldr	r3, [r7, #8]
 8084074:	785b      	ldrb	r3, [r3, #1]
 8084076:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8084078:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 808407a:	68ba      	ldr	r2, [r7, #8]
 808407c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 808407e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8084080:	68bb      	ldr	r3, [r7, #8]
 8084082:	781b      	ldrb	r3, [r3, #0]
 8084084:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8084086:	4313      	orrs	r3, r2
 8084088:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 808408a:	68fb      	ldr	r3, [r7, #12]
 808408c:	681b      	ldr	r3, [r3, #0]
 808408e:	22ca      	movs	r2, #202	; 0xca
 8084090:	625a      	str	r2, [r3, #36]	; 0x24
 8084092:	68fb      	ldr	r3, [r7, #12]
 8084094:	681b      	ldr	r3, [r3, #0]
 8084096:	2253      	movs	r2, #83	; 0x53
 8084098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 808409a:	68f8      	ldr	r0, [r7, #12]
 808409c:	f000 f9d4 	bl	8084448 <RTC_EnterInitMode>
 80840a0:	4603      	mov	r3, r0
 80840a2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80840a4:	7cfb      	ldrb	r3, [r7, #19]
 80840a6:	2b00      	cmp	r3, #0
 80840a8:	d10c      	bne.n	80840c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80840aa:	68fb      	ldr	r3, [r7, #12]
 80840ac:	681a      	ldr	r2, [r3, #0]
 80840ae:	697b      	ldr	r3, [r7, #20]
 80840b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80840b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80840b8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80840ba:	68f8      	ldr	r0, [r7, #12]
 80840bc:	f000 f9fb 	bl	80844b6 <RTC_ExitInitMode>
 80840c0:	4603      	mov	r3, r0
 80840c2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80840c4:	7cfb      	ldrb	r3, [r7, #19]
 80840c6:	2b00      	cmp	r3, #0
 80840c8:	d102      	bne.n	80840d0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80840ca:	68fb      	ldr	r3, [r7, #12]
 80840cc:	2201      	movs	r2, #1
 80840ce:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80840d0:	68fb      	ldr	r3, [r7, #12]
 80840d2:	681b      	ldr	r3, [r3, #0]
 80840d4:	22ff      	movs	r2, #255	; 0xff
 80840d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80840d8:	68fb      	ldr	r3, [r7, #12]
 80840da:	2200      	movs	r2, #0
 80840dc:	771a      	strb	r2, [r3, #28]

  return status;
 80840de:	7cfb      	ldrb	r3, [r7, #19]
}
 80840e0:	4618      	mov	r0, r3
 80840e2:	371c      	adds	r7, #28
 80840e4:	46bd      	mov	sp, r7
 80840e6:	bd90      	pop	{r4, r7, pc}

080840e8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80840e8:	b590      	push	{r4, r7, lr}
 80840ea:	b089      	sub	sp, #36	; 0x24
 80840ec:	af00      	add	r7, sp, #0
 80840ee:	60f8      	str	r0, [r7, #12]
 80840f0:	60b9      	str	r1, [r7, #8]
 80840f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80840f4:	4b9a      	ldr	r3, [pc, #616]	; (8084360 <HAL_RTC_SetAlarm_IT+0x278>)
 80840f6:	681b      	ldr	r3, [r3, #0]
 80840f8:	4a9a      	ldr	r2, [pc, #616]	; (8084364 <HAL_RTC_SetAlarm_IT+0x27c>)
 80840fa:	fba2 2303 	umull	r2, r3, r2, r3
 80840fe:	0adb      	lsrs	r3, r3, #11
 8084100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084104:	fb02 f303 	mul.w	r3, r2, r3
 8084108:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 808410a:	2300      	movs	r3, #0
 808410c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 808410e:	2300      	movs	r3, #0
 8084110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8084112:	68fb      	ldr	r3, [r7, #12]
 8084114:	7f1b      	ldrb	r3, [r3, #28]
 8084116:	2b01      	cmp	r3, #1
 8084118:	d101      	bne.n	808411e <HAL_RTC_SetAlarm_IT+0x36>
 808411a:	2302      	movs	r3, #2
 808411c:	e11c      	b.n	8084358 <HAL_RTC_SetAlarm_IT+0x270>
 808411e:	68fb      	ldr	r3, [r7, #12]
 8084120:	2201      	movs	r2, #1
 8084122:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8084124:	68fb      	ldr	r3, [r7, #12]
 8084126:	2202      	movs	r2, #2
 8084128:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 808412a:	687b      	ldr	r3, [r7, #4]
 808412c:	2b00      	cmp	r3, #0
 808412e:	d137      	bne.n	80841a0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8084130:	68fb      	ldr	r3, [r7, #12]
 8084132:	681b      	ldr	r3, [r3, #0]
 8084134:	689b      	ldr	r3, [r3, #8]
 8084136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808413a:	2b00      	cmp	r3, #0
 808413c:	d102      	bne.n	8084144 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 808413e:	68bb      	ldr	r3, [r7, #8]
 8084140:	2200      	movs	r2, #0
 8084142:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8084144:	68bb      	ldr	r3, [r7, #8]
 8084146:	781b      	ldrb	r3, [r3, #0]
 8084148:	4618      	mov	r0, r3
 808414a:	f000 f9d9 	bl	8084500 <RTC_ByteToBcd2>
 808414e:	4603      	mov	r3, r0
 8084150:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8084152:	68bb      	ldr	r3, [r7, #8]
 8084154:	785b      	ldrb	r3, [r3, #1]
 8084156:	4618      	mov	r0, r3
 8084158:	f000 f9d2 	bl	8084500 <RTC_ByteToBcd2>
 808415c:	4603      	mov	r3, r0
 808415e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8084160:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8084162:	68bb      	ldr	r3, [r7, #8]
 8084164:	789b      	ldrb	r3, [r3, #2]
 8084166:	4618      	mov	r0, r3
 8084168:	f000 f9ca 	bl	8084500 <RTC_ByteToBcd2>
 808416c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 808416e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8084172:	68bb      	ldr	r3, [r7, #8]
 8084174:	78db      	ldrb	r3, [r3, #3]
 8084176:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8084178:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 808417c:	68bb      	ldr	r3, [r7, #8]
 808417e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8084182:	4618      	mov	r0, r3
 8084184:	f000 f9bc 	bl	8084500 <RTC_ByteToBcd2>
 8084188:	4603      	mov	r3, r0
 808418a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 808418c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8084190:	68bb      	ldr	r3, [r7, #8]
 8084192:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8084194:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8084196:	68bb      	ldr	r3, [r7, #8]
 8084198:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 808419a:	4313      	orrs	r3, r2
 808419c:	61fb      	str	r3, [r7, #28]
 808419e:	e023      	b.n	80841e8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80841a0:	68fb      	ldr	r3, [r7, #12]
 80841a2:	681b      	ldr	r3, [r3, #0]
 80841a4:	689b      	ldr	r3, [r3, #8]
 80841a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80841aa:	2b00      	cmp	r3, #0
 80841ac:	d102      	bne.n	80841b4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80841ae:	68bb      	ldr	r3, [r7, #8]
 80841b0:	2200      	movs	r2, #0
 80841b2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80841b4:	68bb      	ldr	r3, [r7, #8]
 80841b6:	781b      	ldrb	r3, [r3, #0]
 80841b8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80841ba:	68bb      	ldr	r3, [r7, #8]
 80841bc:	785b      	ldrb	r3, [r3, #1]
 80841be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80841c0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80841c2:	68ba      	ldr	r2, [r7, #8]
 80841c4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80841c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80841c8:	68bb      	ldr	r3, [r7, #8]
 80841ca:	78db      	ldrb	r3, [r3, #3]
 80841cc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80841ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80841d0:	68bb      	ldr	r3, [r7, #8]
 80841d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80841d6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80841d8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80841da:	68bb      	ldr	r3, [r7, #8]
 80841dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80841de:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80841e0:	68bb      	ldr	r3, [r7, #8]
 80841e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80841e4:	4313      	orrs	r3, r2
 80841e6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80841e8:	68bb      	ldr	r3, [r7, #8]
 80841ea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80841ec:	68bb      	ldr	r3, [r7, #8]
 80841ee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80841f0:	4313      	orrs	r3, r2
 80841f2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80841f4:	68fb      	ldr	r3, [r7, #12]
 80841f6:	681b      	ldr	r3, [r3, #0]
 80841f8:	22ca      	movs	r2, #202	; 0xca
 80841fa:	625a      	str	r2, [r3, #36]	; 0x24
 80841fc:	68fb      	ldr	r3, [r7, #12]
 80841fe:	681b      	ldr	r3, [r3, #0]
 8084200:	2253      	movs	r2, #83	; 0x53
 8084202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8084204:	68bb      	ldr	r3, [r7, #8]
 8084206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 808420c:	d141      	bne.n	8084292 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 808420e:	68fb      	ldr	r3, [r7, #12]
 8084210:	681b      	ldr	r3, [r3, #0]
 8084212:	689a      	ldr	r2, [r3, #8]
 8084214:	68fb      	ldr	r3, [r7, #12]
 8084216:	681b      	ldr	r3, [r3, #0]
 8084218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 808421c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 808421e:	68fb      	ldr	r3, [r7, #12]
 8084220:	681b      	ldr	r3, [r3, #0]
 8084222:	68db      	ldr	r3, [r3, #12]
 8084224:	b2da      	uxtb	r2, r3
 8084226:	68fb      	ldr	r3, [r7, #12]
 8084228:	681b      	ldr	r3, [r3, #0]
 808422a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 808422e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8084230:	697b      	ldr	r3, [r7, #20]
 8084232:	1e5a      	subs	r2, r3, #1
 8084234:	617a      	str	r2, [r7, #20]
 8084236:	2b00      	cmp	r3, #0
 8084238:	d10b      	bne.n	8084252 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 808423a:	68fb      	ldr	r3, [r7, #12]
 808423c:	681b      	ldr	r3, [r3, #0]
 808423e:	22ff      	movs	r2, #255	; 0xff
 8084240:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8084242:	68fb      	ldr	r3, [r7, #12]
 8084244:	2203      	movs	r2, #3
 8084246:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8084248:	68fb      	ldr	r3, [r7, #12]
 808424a:	2200      	movs	r2, #0
 808424c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 808424e:	2303      	movs	r3, #3
 8084250:	e082      	b.n	8084358 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8084252:	68fb      	ldr	r3, [r7, #12]
 8084254:	681b      	ldr	r3, [r3, #0]
 8084256:	68db      	ldr	r3, [r3, #12]
 8084258:	f003 0301 	and.w	r3, r3, #1
 808425c:	2b00      	cmp	r3, #0
 808425e:	d0e7      	beq.n	8084230 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8084260:	68fb      	ldr	r3, [r7, #12]
 8084262:	681b      	ldr	r3, [r3, #0]
 8084264:	69fa      	ldr	r2, [r7, #28]
 8084266:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8084268:	68fb      	ldr	r3, [r7, #12]
 808426a:	681b      	ldr	r3, [r3, #0]
 808426c:	69ba      	ldr	r2, [r7, #24]
 808426e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8084270:	68fb      	ldr	r3, [r7, #12]
 8084272:	681b      	ldr	r3, [r3, #0]
 8084274:	689a      	ldr	r2, [r3, #8]
 8084276:	68fb      	ldr	r3, [r7, #12]
 8084278:	681b      	ldr	r3, [r3, #0]
 808427a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 808427e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8084280:	68fb      	ldr	r3, [r7, #12]
 8084282:	681b      	ldr	r3, [r3, #0]
 8084284:	689a      	ldr	r2, [r3, #8]
 8084286:	68fb      	ldr	r3, [r7, #12]
 8084288:	681b      	ldr	r3, [r3, #0]
 808428a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 808428e:	609a      	str	r2, [r3, #8]
 8084290:	e04b      	b.n	808432a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8084292:	68fb      	ldr	r3, [r7, #12]
 8084294:	681b      	ldr	r3, [r3, #0]
 8084296:	689a      	ldr	r2, [r3, #8]
 8084298:	68fb      	ldr	r3, [r7, #12]
 808429a:	681b      	ldr	r3, [r3, #0]
 808429c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80842a0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80842a2:	68fb      	ldr	r3, [r7, #12]
 80842a4:	681b      	ldr	r3, [r3, #0]
 80842a6:	68db      	ldr	r3, [r3, #12]
 80842a8:	b2da      	uxtb	r2, r3
 80842aa:	68fb      	ldr	r3, [r7, #12]
 80842ac:	681b      	ldr	r3, [r3, #0]
 80842ae:	f462 7220 	orn	r2, r2, #640	; 0x280
 80842b2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80842b4:	4b2a      	ldr	r3, [pc, #168]	; (8084360 <HAL_RTC_SetAlarm_IT+0x278>)
 80842b6:	681b      	ldr	r3, [r3, #0]
 80842b8:	4a2a      	ldr	r2, [pc, #168]	; (8084364 <HAL_RTC_SetAlarm_IT+0x27c>)
 80842ba:	fba2 2303 	umull	r2, r3, r2, r3
 80842be:	0adb      	lsrs	r3, r3, #11
 80842c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80842c4:	fb02 f303 	mul.w	r3, r2, r3
 80842c8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 80842ca:	697b      	ldr	r3, [r7, #20]
 80842cc:	1e5a      	subs	r2, r3, #1
 80842ce:	617a      	str	r2, [r7, #20]
 80842d0:	2b00      	cmp	r3, #0
 80842d2:	d10b      	bne.n	80842ec <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80842d4:	68fb      	ldr	r3, [r7, #12]
 80842d6:	681b      	ldr	r3, [r3, #0]
 80842d8:	22ff      	movs	r2, #255	; 0xff
 80842da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80842dc:	68fb      	ldr	r3, [r7, #12]
 80842de:	2203      	movs	r2, #3
 80842e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80842e2:	68fb      	ldr	r3, [r7, #12]
 80842e4:	2200      	movs	r2, #0
 80842e6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80842e8:	2303      	movs	r3, #3
 80842ea:	e035      	b.n	8084358 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80842ec:	68fb      	ldr	r3, [r7, #12]
 80842ee:	681b      	ldr	r3, [r3, #0]
 80842f0:	68db      	ldr	r3, [r3, #12]
 80842f2:	f003 0302 	and.w	r3, r3, #2
 80842f6:	2b00      	cmp	r3, #0
 80842f8:	d0e7      	beq.n	80842ca <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80842fa:	68fb      	ldr	r3, [r7, #12]
 80842fc:	681b      	ldr	r3, [r3, #0]
 80842fe:	69fa      	ldr	r2, [r7, #28]
 8084300:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8084302:	68fb      	ldr	r3, [r7, #12]
 8084304:	681b      	ldr	r3, [r3, #0]
 8084306:	69ba      	ldr	r2, [r7, #24]
 8084308:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 808430a:	68fb      	ldr	r3, [r7, #12]
 808430c:	681b      	ldr	r3, [r3, #0]
 808430e:	689a      	ldr	r2, [r3, #8]
 8084310:	68fb      	ldr	r3, [r7, #12]
 8084312:	681b      	ldr	r3, [r3, #0]
 8084314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8084318:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 808431a:	68fb      	ldr	r3, [r7, #12]
 808431c:	681b      	ldr	r3, [r3, #0]
 808431e:	689a      	ldr	r2, [r3, #8]
 8084320:	68fb      	ldr	r3, [r7, #12]
 8084322:	681b      	ldr	r3, [r3, #0]
 8084324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8084328:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 808432a:	4b0f      	ldr	r3, [pc, #60]	; (8084368 <HAL_RTC_SetAlarm_IT+0x280>)
 808432c:	681b      	ldr	r3, [r3, #0]
 808432e:	4a0e      	ldr	r2, [pc, #56]	; (8084368 <HAL_RTC_SetAlarm_IT+0x280>)
 8084330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8084334:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8084336:	4b0c      	ldr	r3, [pc, #48]	; (8084368 <HAL_RTC_SetAlarm_IT+0x280>)
 8084338:	689b      	ldr	r3, [r3, #8]
 808433a:	4a0b      	ldr	r2, [pc, #44]	; (8084368 <HAL_RTC_SetAlarm_IT+0x280>)
 808433c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8084340:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8084342:	68fb      	ldr	r3, [r7, #12]
 8084344:	681b      	ldr	r3, [r3, #0]
 8084346:	22ff      	movs	r2, #255	; 0xff
 8084348:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 808434a:	68fb      	ldr	r3, [r7, #12]
 808434c:	2201      	movs	r2, #1
 808434e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8084350:	68fb      	ldr	r3, [r7, #12]
 8084352:	2200      	movs	r2, #0
 8084354:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8084356:	2300      	movs	r3, #0
}
 8084358:	4618      	mov	r0, r3
 808435a:	3724      	adds	r7, #36	; 0x24
 808435c:	46bd      	mov	sp, r7
 808435e:	bd90      	pop	{r4, r7, pc}
 8084360:	20000080 	.word	0x20000080
 8084364:	10624dd3 	.word	0x10624dd3
 8084368:	40013c00 	.word	0x40013c00

0808436c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 808436c:	b580      	push	{r7, lr}
 808436e:	b082      	sub	sp, #8
 8084370:	af00      	add	r7, sp, #0
 8084372:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8084374:	687b      	ldr	r3, [r7, #4]
 8084376:	681b      	ldr	r3, [r3, #0]
 8084378:	689b      	ldr	r3, [r3, #8]
 808437a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 808437e:	2b00      	cmp	r3, #0
 8084380:	d012      	beq.n	80843a8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8084382:	687b      	ldr	r3, [r7, #4]
 8084384:	681b      	ldr	r3, [r3, #0]
 8084386:	68db      	ldr	r3, [r3, #12]
 8084388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808438c:	2b00      	cmp	r3, #0
 808438e:	d00b      	beq.n	80843a8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8084390:	6878      	ldr	r0, [r7, #4]
 8084392:	f7fd fbf9 	bl	8081b88 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8084396:	687b      	ldr	r3, [r7, #4]
 8084398:	681b      	ldr	r3, [r3, #0]
 808439a:	68db      	ldr	r3, [r3, #12]
 808439c:	b2da      	uxtb	r2, r3
 808439e:	687b      	ldr	r3, [r7, #4]
 80843a0:	681b      	ldr	r3, [r3, #0]
 80843a2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80843a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80843a8:	687b      	ldr	r3, [r7, #4]
 80843aa:	681b      	ldr	r3, [r3, #0]
 80843ac:	689b      	ldr	r3, [r3, #8]
 80843ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80843b2:	2b00      	cmp	r3, #0
 80843b4:	d012      	beq.n	80843dc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80843b6:	687b      	ldr	r3, [r7, #4]
 80843b8:	681b      	ldr	r3, [r3, #0]
 80843ba:	68db      	ldr	r3, [r3, #12]
 80843bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80843c0:	2b00      	cmp	r3, #0
 80843c2:	d00b      	beq.n	80843dc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80843c4:	6878      	ldr	r0, [r7, #4]
 80843c6:	f000 f8b8 	bl	808453a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80843ca:	687b      	ldr	r3, [r7, #4]
 80843cc:	681b      	ldr	r3, [r3, #0]
 80843ce:	68db      	ldr	r3, [r3, #12]
 80843d0:	b2da      	uxtb	r2, r3
 80843d2:	687b      	ldr	r3, [r7, #4]
 80843d4:	681b      	ldr	r3, [r3, #0]
 80843d6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80843da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80843dc:	4b05      	ldr	r3, [pc, #20]	; (80843f4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80843de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80843e2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80843e4:	687b      	ldr	r3, [r7, #4]
 80843e6:	2201      	movs	r2, #1
 80843e8:	775a      	strb	r2, [r3, #29]
}
 80843ea:	bf00      	nop
 80843ec:	3708      	adds	r7, #8
 80843ee:	46bd      	mov	sp, r7
 80843f0:	bd80      	pop	{r7, pc}
 80843f2:	bf00      	nop
 80843f4:	40013c00 	.word	0x40013c00

080843f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80843f8:	b580      	push	{r7, lr}
 80843fa:	b084      	sub	sp, #16
 80843fc:	af00      	add	r7, sp, #0
 80843fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8084400:	2300      	movs	r3, #0
 8084402:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8084404:	687b      	ldr	r3, [r7, #4]
 8084406:	681b      	ldr	r3, [r3, #0]
 8084408:	68da      	ldr	r2, [r3, #12]
 808440a:	687b      	ldr	r3, [r7, #4]
 808440c:	681b      	ldr	r3, [r3, #0]
 808440e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8084412:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8084414:	f7fe f848 	bl	80824a8 <HAL_GetTick>
 8084418:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 808441a:	e009      	b.n	8084430 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 808441c:	f7fe f844 	bl	80824a8 <HAL_GetTick>
 8084420:	4602      	mov	r2, r0
 8084422:	68fb      	ldr	r3, [r7, #12]
 8084424:	1ad3      	subs	r3, r2, r3
 8084426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808442a:	d901      	bls.n	8084430 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 808442c:	2303      	movs	r3, #3
 808442e:	e007      	b.n	8084440 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8084430:	687b      	ldr	r3, [r7, #4]
 8084432:	681b      	ldr	r3, [r3, #0]
 8084434:	68db      	ldr	r3, [r3, #12]
 8084436:	f003 0320 	and.w	r3, r3, #32
 808443a:	2b00      	cmp	r3, #0
 808443c:	d0ee      	beq.n	808441c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 808443e:	2300      	movs	r3, #0
}
 8084440:	4618      	mov	r0, r3
 8084442:	3710      	adds	r7, #16
 8084444:	46bd      	mov	sp, r7
 8084446:	bd80      	pop	{r7, pc}

08084448 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8084448:	b580      	push	{r7, lr}
 808444a:	b084      	sub	sp, #16
 808444c:	af00      	add	r7, sp, #0
 808444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8084450:	2300      	movs	r3, #0
 8084452:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8084454:	2300      	movs	r3, #0
 8084456:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8084458:	687b      	ldr	r3, [r7, #4]
 808445a:	681b      	ldr	r3, [r3, #0]
 808445c:	68db      	ldr	r3, [r3, #12]
 808445e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8084462:	2b00      	cmp	r3, #0
 8084464:	d122      	bne.n	80844ac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8084466:	687b      	ldr	r3, [r7, #4]
 8084468:	681b      	ldr	r3, [r3, #0]
 808446a:	68da      	ldr	r2, [r3, #12]
 808446c:	687b      	ldr	r3, [r7, #4]
 808446e:	681b      	ldr	r3, [r3, #0]
 8084470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8084474:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8084476:	f7fe f817 	bl	80824a8 <HAL_GetTick>
 808447a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 808447c:	e00c      	b.n	8084498 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 808447e:	f7fe f813 	bl	80824a8 <HAL_GetTick>
 8084482:	4602      	mov	r2, r0
 8084484:	68bb      	ldr	r3, [r7, #8]
 8084486:	1ad3      	subs	r3, r2, r3
 8084488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808448c:	d904      	bls.n	8084498 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 808448e:	687b      	ldr	r3, [r7, #4]
 8084490:	2204      	movs	r2, #4
 8084492:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8084494:	2301      	movs	r3, #1
 8084496:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8084498:	687b      	ldr	r3, [r7, #4]
 808449a:	681b      	ldr	r3, [r3, #0]
 808449c:	68db      	ldr	r3, [r3, #12]
 808449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80844a2:	2b00      	cmp	r3, #0
 80844a4:	d102      	bne.n	80844ac <RTC_EnterInitMode+0x64>
 80844a6:	7bfb      	ldrb	r3, [r7, #15]
 80844a8:	2b01      	cmp	r3, #1
 80844aa:	d1e8      	bne.n	808447e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80844ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80844ae:	4618      	mov	r0, r3
 80844b0:	3710      	adds	r7, #16
 80844b2:	46bd      	mov	sp, r7
 80844b4:	bd80      	pop	{r7, pc}

080844b6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80844b6:	b580      	push	{r7, lr}
 80844b8:	b084      	sub	sp, #16
 80844ba:	af00      	add	r7, sp, #0
 80844bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80844be:	2300      	movs	r3, #0
 80844c0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80844c2:	687b      	ldr	r3, [r7, #4]
 80844c4:	681b      	ldr	r3, [r3, #0]
 80844c6:	68da      	ldr	r2, [r3, #12]
 80844c8:	687b      	ldr	r3, [r7, #4]
 80844ca:	681b      	ldr	r3, [r3, #0]
 80844cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80844d0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80844d2:	687b      	ldr	r3, [r7, #4]
 80844d4:	681b      	ldr	r3, [r3, #0]
 80844d6:	689b      	ldr	r3, [r3, #8]
 80844d8:	f003 0320 	and.w	r3, r3, #32
 80844dc:	2b00      	cmp	r3, #0
 80844de:	d10a      	bne.n	80844f6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80844e0:	6878      	ldr	r0, [r7, #4]
 80844e2:	f7ff ff89 	bl	80843f8 <HAL_RTC_WaitForSynchro>
 80844e6:	4603      	mov	r3, r0
 80844e8:	2b00      	cmp	r3, #0
 80844ea:	d004      	beq.n	80844f6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80844ec:	687b      	ldr	r3, [r7, #4]
 80844ee:	2204      	movs	r2, #4
 80844f0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80844f2:	2301      	movs	r3, #1
 80844f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80844f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80844f8:	4618      	mov	r0, r3
 80844fa:	3710      	adds	r7, #16
 80844fc:	46bd      	mov	sp, r7
 80844fe:	bd80      	pop	{r7, pc}

08084500 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8084500:	b480      	push	{r7}
 8084502:	b085      	sub	sp, #20
 8084504:	af00      	add	r7, sp, #0
 8084506:	4603      	mov	r3, r0
 8084508:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 808450a:	2300      	movs	r3, #0
 808450c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 808450e:	e005      	b.n	808451c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8084510:	7bfb      	ldrb	r3, [r7, #15]
 8084512:	3301      	adds	r3, #1
 8084514:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8084516:	79fb      	ldrb	r3, [r7, #7]
 8084518:	3b0a      	subs	r3, #10
 808451a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 808451c:	79fb      	ldrb	r3, [r7, #7]
 808451e:	2b09      	cmp	r3, #9
 8084520:	d8f6      	bhi.n	8084510 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8084522:	7bfb      	ldrb	r3, [r7, #15]
 8084524:	011b      	lsls	r3, r3, #4
 8084526:	b2da      	uxtb	r2, r3
 8084528:	79fb      	ldrb	r3, [r7, #7]
 808452a:	4313      	orrs	r3, r2
 808452c:	b2db      	uxtb	r3, r3
}
 808452e:	4618      	mov	r0, r3
 8084530:	3714      	adds	r7, #20
 8084532:	46bd      	mov	sp, r7
 8084534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084538:	4770      	bx	lr

0808453a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 808453a:	b480      	push	{r7}
 808453c:	b083      	sub	sp, #12
 808453e:	af00      	add	r7, sp, #0
 8084540:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8084542:	bf00      	nop
 8084544:	370c      	adds	r7, #12
 8084546:	46bd      	mov	sp, r7
 8084548:	f85d 7b04 	ldr.w	r7, [sp], #4
 808454c:	4770      	bx	lr

0808454e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 808454e:	b580      	push	{r7, lr}
 8084550:	b082      	sub	sp, #8
 8084552:	af00      	add	r7, sp, #0
 8084554:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8084556:	687b      	ldr	r3, [r7, #4]
 8084558:	2b00      	cmp	r3, #0
 808455a:	d101      	bne.n	8084560 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 808455c:	2301      	movs	r3, #1
 808455e:	e022      	b.n	80845a6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8084560:	687b      	ldr	r3, [r7, #4]
 8084562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8084566:	b2db      	uxtb	r3, r3
 8084568:	2b00      	cmp	r3, #0
 808456a:	d105      	bne.n	8084578 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 808456c:	687b      	ldr	r3, [r7, #4]
 808456e:	2200      	movs	r2, #0
 8084570:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8084572:	6878      	ldr	r0, [r7, #4]
 8084574:	f7fd fb92 	bl	8081c9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8084578:	687b      	ldr	r3, [r7, #4]
 808457a:	2203      	movs	r2, #3
 808457c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8084580:	6878      	ldr	r0, [r7, #4]
 8084582:	f000 f815 	bl	80845b0 <HAL_SD_InitCard>
 8084586:	4603      	mov	r3, r0
 8084588:	2b00      	cmp	r3, #0
 808458a:	d001      	beq.n	8084590 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 808458c:	2301      	movs	r3, #1
 808458e:	e00a      	b.n	80845a6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8084590:	687b      	ldr	r3, [r7, #4]
 8084592:	2200      	movs	r2, #0
 8084594:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8084596:	687b      	ldr	r3, [r7, #4]
 8084598:	2200      	movs	r2, #0
 808459a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 808459c:	687b      	ldr	r3, [r7, #4]
 808459e:	2201      	movs	r2, #1
 80845a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80845a4:	2300      	movs	r3, #0
}
 80845a6:	4618      	mov	r0, r3
 80845a8:	3708      	adds	r7, #8
 80845aa:	46bd      	mov	sp, r7
 80845ac:	bd80      	pop	{r7, pc}
	...

080845b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80845b0:	b5b0      	push	{r4, r5, r7, lr}
 80845b2:	b08e      	sub	sp, #56	; 0x38
 80845b4:	af04      	add	r7, sp, #16
 80845b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80845b8:	2300      	movs	r3, #0
 80845ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80845bc:	2300      	movs	r3, #0
 80845be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80845c0:	2300      	movs	r3, #0
 80845c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80845c4:	2300      	movs	r3, #0
 80845c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80845c8:	2300      	movs	r3, #0
 80845ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80845cc:	2376      	movs	r3, #118	; 0x76
 80845ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80845d0:	687b      	ldr	r3, [r7, #4]
 80845d2:	681d      	ldr	r5, [r3, #0]
 80845d4:	466c      	mov	r4, sp
 80845d6:	f107 0314 	add.w	r3, r7, #20
 80845da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80845de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80845e2:	f107 0308 	add.w	r3, r7, #8
 80845e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80845e8:	4628      	mov	r0, r5
 80845ea:	f002 fd17 	bl	808701c <SDIO_Init>
 80845ee:	4603      	mov	r3, r0
 80845f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80845f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80845f8:	2b00      	cmp	r3, #0
 80845fa:	d001      	beq.n	8084600 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80845fc:	2301      	movs	r3, #1
 80845fe:	e04f      	b.n	80846a0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8084600:	4b29      	ldr	r3, [pc, #164]	; (80846a8 <HAL_SD_InitCard+0xf8>)
 8084602:	2200      	movs	r2, #0
 8084604:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8084606:	687b      	ldr	r3, [r7, #4]
 8084608:	681b      	ldr	r3, [r3, #0]
 808460a:	4618      	mov	r0, r3
 808460c:	f002 fd4f 	bl	80870ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8084610:	4b25      	ldr	r3, [pc, #148]	; (80846a8 <HAL_SD_InitCard+0xf8>)
 8084612:	2201      	movs	r2, #1
 8084614:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8084616:	2002      	movs	r0, #2
 8084618:	f7fd ff52 	bl	80824c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 808461c:	6878      	ldr	r0, [r7, #4]
 808461e:	f001 f867 	bl	80856f0 <SD_PowerON>
 8084622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8084624:	6a3b      	ldr	r3, [r7, #32]
 8084626:	2b00      	cmp	r3, #0
 8084628:	d00b      	beq.n	8084642 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 808462a:	687b      	ldr	r3, [r7, #4]
 808462c:	2201      	movs	r2, #1
 808462e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8084632:	687b      	ldr	r3, [r7, #4]
 8084634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084636:	6a3b      	ldr	r3, [r7, #32]
 8084638:	431a      	orrs	r2, r3
 808463a:	687b      	ldr	r3, [r7, #4]
 808463c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 808463e:	2301      	movs	r3, #1
 8084640:	e02e      	b.n	80846a0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8084642:	6878      	ldr	r0, [r7, #4]
 8084644:	f000 ff86 	bl	8085554 <SD_InitCard>
 8084648:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 808464a:	6a3b      	ldr	r3, [r7, #32]
 808464c:	2b00      	cmp	r3, #0
 808464e:	d00b      	beq.n	8084668 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8084650:	687b      	ldr	r3, [r7, #4]
 8084652:	2201      	movs	r2, #1
 8084654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8084658:	687b      	ldr	r3, [r7, #4]
 808465a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808465c:	6a3b      	ldr	r3, [r7, #32]
 808465e:	431a      	orrs	r2, r3
 8084660:	687b      	ldr	r3, [r7, #4]
 8084662:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084664:	2301      	movs	r3, #1
 8084666:	e01b      	b.n	80846a0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8084668:	687b      	ldr	r3, [r7, #4]
 808466a:	681b      	ldr	r3, [r3, #0]
 808466c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8084670:	4618      	mov	r0, r3
 8084672:	f002 fdae 	bl	80871d2 <SDMMC_CmdBlockLength>
 8084676:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8084678:	6a3b      	ldr	r3, [r7, #32]
 808467a:	2b00      	cmp	r3, #0
 808467c:	d00f      	beq.n	808469e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808467e:	687b      	ldr	r3, [r7, #4]
 8084680:	681b      	ldr	r3, [r3, #0]
 8084682:	4a0a      	ldr	r2, [pc, #40]	; (80846ac <HAL_SD_InitCard+0xfc>)
 8084684:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8084686:	687b      	ldr	r3, [r7, #4]
 8084688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808468a:	6a3b      	ldr	r3, [r7, #32]
 808468c:	431a      	orrs	r2, r3
 808468e:	687b      	ldr	r3, [r7, #4]
 8084690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8084692:	687b      	ldr	r3, [r7, #4]
 8084694:	2201      	movs	r2, #1
 8084696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 808469a:	2301      	movs	r3, #1
 808469c:	e000      	b.n	80846a0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 808469e:	2300      	movs	r3, #0
}
 80846a0:	4618      	mov	r0, r3
 80846a2:	3728      	adds	r7, #40	; 0x28
 80846a4:	46bd      	mov	sp, r7
 80846a6:	bdb0      	pop	{r4, r5, r7, pc}
 80846a8:	422580a0 	.word	0x422580a0
 80846ac:	004005ff 	.word	0x004005ff

080846b0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80846b0:	b580      	push	{r7, lr}
 80846b2:	b092      	sub	sp, #72	; 0x48
 80846b4:	af00      	add	r7, sp, #0
 80846b6:	60f8      	str	r0, [r7, #12]
 80846b8:	60b9      	str	r1, [r7, #8]
 80846ba:	607a      	str	r2, [r7, #4]
 80846bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80846be:	f7fd fef3 	bl	80824a8 <HAL_GetTick>
 80846c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80846c4:	687b      	ldr	r3, [r7, #4]
 80846c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80846c8:	68bb      	ldr	r3, [r7, #8]
 80846ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80846cc:	68bb      	ldr	r3, [r7, #8]
 80846ce:	2b00      	cmp	r3, #0
 80846d0:	d107      	bne.n	80846e2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80846d2:	68fb      	ldr	r3, [r7, #12]
 80846d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80846d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80846da:	68fb      	ldr	r3, [r7, #12]
 80846dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80846de:	2301      	movs	r3, #1
 80846e0:	e1bd      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80846e2:	68fb      	ldr	r3, [r7, #12]
 80846e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80846e8:	b2db      	uxtb	r3, r3
 80846ea:	2b01      	cmp	r3, #1
 80846ec:	f040 81b0 	bne.w	8084a50 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80846f0:	68fb      	ldr	r3, [r7, #12]
 80846f2:	2200      	movs	r2, #0
 80846f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80846f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80846f8:	683b      	ldr	r3, [r7, #0]
 80846fa:	441a      	add	r2, r3
 80846fc:	68fb      	ldr	r3, [r7, #12]
 80846fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8084700:	429a      	cmp	r2, r3
 8084702:	d907      	bls.n	8084714 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8084704:	68fb      	ldr	r3, [r7, #12]
 8084706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084708:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 808470c:	68fb      	ldr	r3, [r7, #12]
 808470e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8084710:	2301      	movs	r3, #1
 8084712:	e1a4      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8084714:	68fb      	ldr	r3, [r7, #12]
 8084716:	2203      	movs	r2, #3
 8084718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 808471c:	68fb      	ldr	r3, [r7, #12]
 808471e:	681b      	ldr	r3, [r3, #0]
 8084720:	2200      	movs	r2, #0
 8084722:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8084724:	68fb      	ldr	r3, [r7, #12]
 8084726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084728:	2b01      	cmp	r3, #1
 808472a:	d002      	beq.n	8084732 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 808472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808472e:	025b      	lsls	r3, r3, #9
 8084730:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8084732:	f04f 33ff 	mov.w	r3, #4294967295
 8084736:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8084738:	683b      	ldr	r3, [r7, #0]
 808473a:	025b      	lsls	r3, r3, #9
 808473c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 808473e:	2390      	movs	r3, #144	; 0x90
 8084740:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8084742:	2302      	movs	r3, #2
 8084744:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8084746:	2300      	movs	r3, #0
 8084748:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 808474a:	2301      	movs	r3, #1
 808474c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 808474e:	68fb      	ldr	r3, [r7, #12]
 8084750:	681b      	ldr	r3, [r3, #0]
 8084752:	f107 0214 	add.w	r2, r7, #20
 8084756:	4611      	mov	r1, r2
 8084758:	4618      	mov	r0, r3
 808475a:	f002 fd0e 	bl	808717a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 808475e:	683b      	ldr	r3, [r7, #0]
 8084760:	2b01      	cmp	r3, #1
 8084762:	d90a      	bls.n	808477a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8084764:	68fb      	ldr	r3, [r7, #12]
 8084766:	2202      	movs	r2, #2
 8084768:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 808476a:	68fb      	ldr	r3, [r7, #12]
 808476c:	681b      	ldr	r3, [r3, #0]
 808476e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084770:	4618      	mov	r0, r3
 8084772:	f002 fd72 	bl	808725a <SDMMC_CmdReadMultiBlock>
 8084776:	6478      	str	r0, [r7, #68]	; 0x44
 8084778:	e009      	b.n	808478e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 808477a:	68fb      	ldr	r3, [r7, #12]
 808477c:	2201      	movs	r2, #1
 808477e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8084780:	68fb      	ldr	r3, [r7, #12]
 8084782:	681b      	ldr	r3, [r3, #0]
 8084784:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084786:	4618      	mov	r0, r3
 8084788:	f002 fd45 	bl	8087216 <SDMMC_CmdReadSingleBlock>
 808478c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 808478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084790:	2b00      	cmp	r3, #0
 8084792:	d012      	beq.n	80847ba <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084794:	68fb      	ldr	r3, [r7, #12]
 8084796:	681b      	ldr	r3, [r3, #0]
 8084798:	4a7a      	ldr	r2, [pc, #488]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 808479a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 808479c:	68fb      	ldr	r3, [r7, #12]
 808479e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80847a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80847a2:	431a      	orrs	r2, r3
 80847a4:	68fb      	ldr	r3, [r7, #12]
 80847a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80847a8:	68fb      	ldr	r3, [r7, #12]
 80847aa:	2201      	movs	r2, #1
 80847ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80847b0:	68fb      	ldr	r3, [r7, #12]
 80847b2:	2200      	movs	r2, #0
 80847b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80847b6:	2301      	movs	r3, #1
 80847b8:	e151      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80847ba:	69bb      	ldr	r3, [r7, #24]
 80847bc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80847be:	e061      	b.n	8084884 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80847c0:	68fb      	ldr	r3, [r7, #12]
 80847c2:	681b      	ldr	r3, [r3, #0]
 80847c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80847c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80847ca:	2b00      	cmp	r3, #0
 80847cc:	d03c      	beq.n	8084848 <HAL_SD_ReadBlocks+0x198>
 80847ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80847d0:	2b00      	cmp	r3, #0
 80847d2:	d039      	beq.n	8084848 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80847d4:	2300      	movs	r3, #0
 80847d6:	643b      	str	r3, [r7, #64]	; 0x40
 80847d8:	e033      	b.n	8084842 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80847da:	68fb      	ldr	r3, [r7, #12]
 80847dc:	681b      	ldr	r3, [r3, #0]
 80847de:	4618      	mov	r0, r3
 80847e0:	f002 fc47 	bl	8087072 <SDIO_ReadFIFO>
 80847e4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80847e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80847e8:	b2da      	uxtb	r2, r3
 80847ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80847ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80847ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80847f0:	3301      	adds	r3, #1
 80847f2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80847f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80847f6:	3b01      	subs	r3, #1
 80847f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80847fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80847fc:	0a1b      	lsrs	r3, r3, #8
 80847fe:	b2da      	uxtb	r2, r3
 8084800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084802:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084806:	3301      	adds	r3, #1
 8084808:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 808480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808480c:	3b01      	subs	r3, #1
 808480e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8084810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084812:	0c1b      	lsrs	r3, r3, #16
 8084814:	b2da      	uxtb	r2, r3
 8084816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084818:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 808481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808481c:	3301      	adds	r3, #1
 808481e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084822:	3b01      	subs	r3, #1
 8084824:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8084826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084828:	0e1b      	lsrs	r3, r3, #24
 808482a:	b2da      	uxtb	r2, r3
 808482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808482e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084832:	3301      	adds	r3, #1
 8084834:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084838:	3b01      	subs	r3, #1
 808483a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 808483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 808483e:	3301      	adds	r3, #1
 8084840:	643b      	str	r3, [r7, #64]	; 0x40
 8084842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8084844:	2b07      	cmp	r3, #7
 8084846:	d9c8      	bls.n	80847da <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8084848:	f7fd fe2e 	bl	80824a8 <HAL_GetTick>
 808484c:	4602      	mov	r2, r0
 808484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8084850:	1ad3      	subs	r3, r2, r3
 8084852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8084854:	429a      	cmp	r2, r3
 8084856:	d902      	bls.n	808485e <HAL_SD_ReadBlocks+0x1ae>
 8084858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 808485a:	2b00      	cmp	r3, #0
 808485c:	d112      	bne.n	8084884 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808485e:	68fb      	ldr	r3, [r7, #12]
 8084860:	681b      	ldr	r3, [r3, #0]
 8084862:	4a48      	ldr	r2, [pc, #288]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 8084864:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8084866:	68fb      	ldr	r3, [r7, #12]
 8084868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808486a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 808486e:	68fb      	ldr	r3, [r7, #12]
 8084870:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8084872:	68fb      	ldr	r3, [r7, #12]
 8084874:	2201      	movs	r2, #1
 8084876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 808487a:	68fb      	ldr	r3, [r7, #12]
 808487c:	2200      	movs	r2, #0
 808487e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8084880:	2303      	movs	r3, #3
 8084882:	e0ec      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8084884:	68fb      	ldr	r3, [r7, #12]
 8084886:	681b      	ldr	r3, [r3, #0]
 8084888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 808488a:	f240 332a 	movw	r3, #810	; 0x32a
 808488e:	4013      	ands	r3, r2
 8084890:	2b00      	cmp	r3, #0
 8084892:	d095      	beq.n	80847c0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8084894:	68fb      	ldr	r3, [r7, #12]
 8084896:	681b      	ldr	r3, [r3, #0]
 8084898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808489e:	2b00      	cmp	r3, #0
 80848a0:	d022      	beq.n	80848e8 <HAL_SD_ReadBlocks+0x238>
 80848a2:	683b      	ldr	r3, [r7, #0]
 80848a4:	2b01      	cmp	r3, #1
 80848a6:	d91f      	bls.n	80848e8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80848a8:	68fb      	ldr	r3, [r7, #12]
 80848aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80848ac:	2b03      	cmp	r3, #3
 80848ae:	d01b      	beq.n	80848e8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80848b0:	68fb      	ldr	r3, [r7, #12]
 80848b2:	681b      	ldr	r3, [r3, #0]
 80848b4:	4618      	mov	r0, r3
 80848b6:	f002 fd37 	bl	8087328 <SDMMC_CmdStopTransfer>
 80848ba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80848bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80848be:	2b00      	cmp	r3, #0
 80848c0:	d012      	beq.n	80848e8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80848c2:	68fb      	ldr	r3, [r7, #12]
 80848c4:	681b      	ldr	r3, [r3, #0]
 80848c6:	4a2f      	ldr	r2, [pc, #188]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 80848c8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80848ca:	68fb      	ldr	r3, [r7, #12]
 80848cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80848ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80848d0:	431a      	orrs	r2, r3
 80848d2:	68fb      	ldr	r3, [r7, #12]
 80848d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80848d6:	68fb      	ldr	r3, [r7, #12]
 80848d8:	2201      	movs	r2, #1
 80848da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80848de:	68fb      	ldr	r3, [r7, #12]
 80848e0:	2200      	movs	r2, #0
 80848e2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80848e4:	2301      	movs	r3, #1
 80848e6:	e0ba      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80848e8:	68fb      	ldr	r3, [r7, #12]
 80848ea:	681b      	ldr	r3, [r3, #0]
 80848ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80848ee:	f003 0308 	and.w	r3, r3, #8
 80848f2:	2b00      	cmp	r3, #0
 80848f4:	d012      	beq.n	808491c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80848f6:	68fb      	ldr	r3, [r7, #12]
 80848f8:	681b      	ldr	r3, [r3, #0]
 80848fa:	4a22      	ldr	r2, [pc, #136]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 80848fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80848fe:	68fb      	ldr	r3, [r7, #12]
 8084900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084902:	f043 0208 	orr.w	r2, r3, #8
 8084906:	68fb      	ldr	r3, [r7, #12]
 8084908:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808490a:	68fb      	ldr	r3, [r7, #12]
 808490c:	2201      	movs	r2, #1
 808490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084912:	68fb      	ldr	r3, [r7, #12]
 8084914:	2200      	movs	r2, #0
 8084916:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084918:	2301      	movs	r3, #1
 808491a:	e0a0      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 808491c:	68fb      	ldr	r3, [r7, #12]
 808491e:	681b      	ldr	r3, [r3, #0]
 8084920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084922:	f003 0302 	and.w	r3, r3, #2
 8084926:	2b00      	cmp	r3, #0
 8084928:	d012      	beq.n	8084950 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808492a:	68fb      	ldr	r3, [r7, #12]
 808492c:	681b      	ldr	r3, [r3, #0]
 808492e:	4a15      	ldr	r2, [pc, #84]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 8084930:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8084932:	68fb      	ldr	r3, [r7, #12]
 8084934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084936:	f043 0202 	orr.w	r2, r3, #2
 808493a:	68fb      	ldr	r3, [r7, #12]
 808493c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808493e:	68fb      	ldr	r3, [r7, #12]
 8084940:	2201      	movs	r2, #1
 8084942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084946:	68fb      	ldr	r3, [r7, #12]
 8084948:	2200      	movs	r2, #0
 808494a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 808494c:	2301      	movs	r3, #1
 808494e:	e086      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8084950:	68fb      	ldr	r3, [r7, #12]
 8084952:	681b      	ldr	r3, [r3, #0]
 8084954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084956:	f003 0320 	and.w	r3, r3, #32
 808495a:	2b00      	cmp	r3, #0
 808495c:	d063      	beq.n	8084a26 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808495e:	68fb      	ldr	r3, [r7, #12]
 8084960:	681b      	ldr	r3, [r3, #0]
 8084962:	4a08      	ldr	r2, [pc, #32]	; (8084984 <HAL_SD_ReadBlocks+0x2d4>)
 8084964:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8084966:	68fb      	ldr	r3, [r7, #12]
 8084968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808496a:	f043 0220 	orr.w	r2, r3, #32
 808496e:	68fb      	ldr	r3, [r7, #12]
 8084970:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084972:	68fb      	ldr	r3, [r7, #12]
 8084974:	2201      	movs	r2, #1
 8084976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 808497a:	68fb      	ldr	r3, [r7, #12]
 808497c:	2200      	movs	r2, #0
 808497e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084980:	2301      	movs	r3, #1
 8084982:	e06c      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
 8084984:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8084988:	68fb      	ldr	r3, [r7, #12]
 808498a:	681b      	ldr	r3, [r3, #0]
 808498c:	4618      	mov	r0, r3
 808498e:	f002 fb70 	bl	8087072 <SDIO_ReadFIFO>
 8084992:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8084994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084996:	b2da      	uxtb	r2, r3
 8084998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808499a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 808499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808499e:	3301      	adds	r3, #1
 80849a0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80849a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80849a4:	3b01      	subs	r3, #1
 80849a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80849a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80849aa:	0a1b      	lsrs	r3, r3, #8
 80849ac:	b2da      	uxtb	r2, r3
 80849ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849b0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80849b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849b4:	3301      	adds	r3, #1
 80849b6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80849b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80849ba:	3b01      	subs	r3, #1
 80849bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80849be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80849c0:	0c1b      	lsrs	r3, r3, #16
 80849c2:	b2da      	uxtb	r2, r3
 80849c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80849c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849ca:	3301      	adds	r3, #1
 80849cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80849ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80849d0:	3b01      	subs	r3, #1
 80849d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80849d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80849d6:	0e1b      	lsrs	r3, r3, #24
 80849d8:	b2da      	uxtb	r2, r3
 80849da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80849de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80849e0:	3301      	adds	r3, #1
 80849e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80849e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80849e6:	3b01      	subs	r3, #1
 80849e8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80849ea:	f7fd fd5d 	bl	80824a8 <HAL_GetTick>
 80849ee:	4602      	mov	r2, r0
 80849f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80849f2:	1ad3      	subs	r3, r2, r3
 80849f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80849f6:	429a      	cmp	r2, r3
 80849f8:	d902      	bls.n	8084a00 <HAL_SD_ReadBlocks+0x350>
 80849fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80849fc:	2b00      	cmp	r3, #0
 80849fe:	d112      	bne.n	8084a26 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084a00:	68fb      	ldr	r3, [r7, #12]
 8084a02:	681b      	ldr	r3, [r3, #0]
 8084a04:	4a18      	ldr	r2, [pc, #96]	; (8084a68 <HAL_SD_ReadBlocks+0x3b8>)
 8084a06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8084a08:	68fb      	ldr	r3, [r7, #12]
 8084a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084a0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8084a10:	68fb      	ldr	r3, [r7, #12]
 8084a12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8084a14:	68fb      	ldr	r3, [r7, #12]
 8084a16:	2201      	movs	r2, #1
 8084a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8084a1c:	68fb      	ldr	r3, [r7, #12]
 8084a1e:	2200      	movs	r2, #0
 8084a20:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8084a22:	2301      	movs	r3, #1
 8084a24:	e01b      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8084a26:	68fb      	ldr	r3, [r7, #12]
 8084a28:	681b      	ldr	r3, [r3, #0]
 8084a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8084a30:	2b00      	cmp	r3, #0
 8084a32:	d002      	beq.n	8084a3a <HAL_SD_ReadBlocks+0x38a>
 8084a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084a36:	2b00      	cmp	r3, #0
 8084a38:	d1a6      	bne.n	8084988 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8084a3a:	68fb      	ldr	r3, [r7, #12]
 8084a3c:	681b      	ldr	r3, [r3, #0]
 8084a3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8084a42:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8084a44:	68fb      	ldr	r3, [r7, #12]
 8084a46:	2201      	movs	r2, #1
 8084a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8084a4c:	2300      	movs	r3, #0
 8084a4e:	e006      	b.n	8084a5e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8084a50:	68fb      	ldr	r3, [r7, #12]
 8084a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084a54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8084a58:	68fb      	ldr	r3, [r7, #12]
 8084a5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084a5c:	2301      	movs	r3, #1
  }
}
 8084a5e:	4618      	mov	r0, r3
 8084a60:	3748      	adds	r7, #72	; 0x48
 8084a62:	46bd      	mov	sp, r7
 8084a64:	bd80      	pop	{r7, pc}
 8084a66:	bf00      	nop
 8084a68:	004005ff 	.word	0x004005ff

08084a6c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8084a6c:	b580      	push	{r7, lr}
 8084a6e:	b092      	sub	sp, #72	; 0x48
 8084a70:	af00      	add	r7, sp, #0
 8084a72:	60f8      	str	r0, [r7, #12]
 8084a74:	60b9      	str	r1, [r7, #8]
 8084a76:	607a      	str	r2, [r7, #4]
 8084a78:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8084a7a:	f7fd fd15 	bl	80824a8 <HAL_GetTick>
 8084a7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8084a80:	687b      	ldr	r3, [r7, #4]
 8084a82:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8084a84:	68bb      	ldr	r3, [r7, #8]
 8084a86:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8084a88:	68bb      	ldr	r3, [r7, #8]
 8084a8a:	2b00      	cmp	r3, #0
 8084a8c:	d107      	bne.n	8084a9e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8084a8e:	68fb      	ldr	r3, [r7, #12]
 8084a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084a92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8084a96:	68fb      	ldr	r3, [r7, #12]
 8084a98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084a9a:	2301      	movs	r3, #1
 8084a9c:	e166      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8084a9e:	68fb      	ldr	r3, [r7, #12]
 8084aa0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8084aa4:	b2db      	uxtb	r3, r3
 8084aa6:	2b01      	cmp	r3, #1
 8084aa8:	f040 8159 	bne.w	8084d5e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8084aac:	68fb      	ldr	r3, [r7, #12]
 8084aae:	2200      	movs	r2, #0
 8084ab0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8084ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084ab4:	683b      	ldr	r3, [r7, #0]
 8084ab6:	441a      	add	r2, r3
 8084ab8:	68fb      	ldr	r3, [r7, #12]
 8084aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8084abc:	429a      	cmp	r2, r3
 8084abe:	d907      	bls.n	8084ad0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8084ac0:	68fb      	ldr	r3, [r7, #12]
 8084ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084ac4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8084ac8:	68fb      	ldr	r3, [r7, #12]
 8084aca:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8084acc:	2301      	movs	r3, #1
 8084ace:	e14d      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8084ad0:	68fb      	ldr	r3, [r7, #12]
 8084ad2:	2203      	movs	r2, #3
 8084ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8084ad8:	68fb      	ldr	r3, [r7, #12]
 8084ada:	681b      	ldr	r3, [r3, #0]
 8084adc:	2200      	movs	r2, #0
 8084ade:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8084ae0:	68fb      	ldr	r3, [r7, #12]
 8084ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084ae4:	2b01      	cmp	r3, #1
 8084ae6:	d002      	beq.n	8084aee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8084ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8084aea:	025b      	lsls	r3, r3, #9
 8084aec:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8084aee:	f04f 33ff 	mov.w	r3, #4294967295
 8084af2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8084af4:	683b      	ldr	r3, [r7, #0]
 8084af6:	025b      	lsls	r3, r3, #9
 8084af8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8084afa:	2390      	movs	r3, #144	; 0x90
 8084afc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8084afe:	2300      	movs	r3, #0
 8084b00:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8084b02:	2300      	movs	r3, #0
 8084b04:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8084b06:	2301      	movs	r3, #1
 8084b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8084b0a:	68fb      	ldr	r3, [r7, #12]
 8084b0c:	681b      	ldr	r3, [r3, #0]
 8084b0e:	f107 0218 	add.w	r2, r7, #24
 8084b12:	4611      	mov	r1, r2
 8084b14:	4618      	mov	r0, r3
 8084b16:	f002 fb30 	bl	808717a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8084b1a:	683b      	ldr	r3, [r7, #0]
 8084b1c:	2b01      	cmp	r3, #1
 8084b1e:	d90a      	bls.n	8084b36 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8084b20:	68fb      	ldr	r3, [r7, #12]
 8084b22:	2220      	movs	r2, #32
 8084b24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8084b26:	68fb      	ldr	r3, [r7, #12]
 8084b28:	681b      	ldr	r3, [r3, #0]
 8084b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084b2c:	4618      	mov	r0, r3
 8084b2e:	f002 fbd8 	bl	80872e2 <SDMMC_CmdWriteMultiBlock>
 8084b32:	6478      	str	r0, [r7, #68]	; 0x44
 8084b34:	e009      	b.n	8084b4a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8084b36:	68fb      	ldr	r3, [r7, #12]
 8084b38:	2210      	movs	r2, #16
 8084b3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8084b3c:	68fb      	ldr	r3, [r7, #12]
 8084b3e:	681b      	ldr	r3, [r3, #0]
 8084b40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084b42:	4618      	mov	r0, r3
 8084b44:	f002 fbab 	bl	808729e <SDMMC_CmdWriteSingleBlock>
 8084b48:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8084b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084b4c:	2b00      	cmp	r3, #0
 8084b4e:	d012      	beq.n	8084b76 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084b50:	68fb      	ldr	r3, [r7, #12]
 8084b52:	681b      	ldr	r3, [r3, #0]
 8084b54:	4a87      	ldr	r2, [pc, #540]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8084b58:	68fb      	ldr	r3, [r7, #12]
 8084b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084b5e:	431a      	orrs	r2, r3
 8084b60:	68fb      	ldr	r3, [r7, #12]
 8084b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084b64:	68fb      	ldr	r3, [r7, #12]
 8084b66:	2201      	movs	r2, #1
 8084b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084b6c:	68fb      	ldr	r3, [r7, #12]
 8084b6e:	2200      	movs	r2, #0
 8084b70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084b72:	2301      	movs	r3, #1
 8084b74:	e0fa      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8084b76:	69fb      	ldr	r3, [r7, #28]
 8084b78:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8084b7a:	e065      	b.n	8084c48 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8084b7c:	68fb      	ldr	r3, [r7, #12]
 8084b7e:	681b      	ldr	r3, [r3, #0]
 8084b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8084b86:	2b00      	cmp	r3, #0
 8084b88:	d040      	beq.n	8084c0c <HAL_SD_WriteBlocks+0x1a0>
 8084b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084b8c:	2b00      	cmp	r3, #0
 8084b8e:	d03d      	beq.n	8084c0c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8084b90:	2300      	movs	r3, #0
 8084b92:	643b      	str	r3, [r7, #64]	; 0x40
 8084b94:	e037      	b.n	8084c06 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8084b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084b98:	781b      	ldrb	r3, [r3, #0]
 8084b9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8084b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084b9e:	3301      	adds	r3, #1
 8084ba0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084ba4:	3b01      	subs	r3, #1
 8084ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8084ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084baa:	781b      	ldrb	r3, [r3, #0]
 8084bac:	021a      	lsls	r2, r3, #8
 8084bae:	697b      	ldr	r3, [r7, #20]
 8084bb0:	4313      	orrs	r3, r2
 8084bb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8084bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084bb6:	3301      	adds	r3, #1
 8084bb8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084bbc:	3b01      	subs	r3, #1
 8084bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8084bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084bc2:	781b      	ldrb	r3, [r3, #0]
 8084bc4:	041a      	lsls	r2, r3, #16
 8084bc6:	697b      	ldr	r3, [r7, #20]
 8084bc8:	4313      	orrs	r3, r2
 8084bca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8084bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084bce:	3301      	adds	r3, #1
 8084bd0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084bd4:	3b01      	subs	r3, #1
 8084bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8084bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084bda:	781b      	ldrb	r3, [r3, #0]
 8084bdc:	061a      	lsls	r2, r3, #24
 8084bde:	697b      	ldr	r3, [r7, #20]
 8084be0:	4313      	orrs	r3, r2
 8084be2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8084be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084be6:	3301      	adds	r3, #1
 8084be8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084bec:	3b01      	subs	r3, #1
 8084bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8084bf0:	68fb      	ldr	r3, [r7, #12]
 8084bf2:	681b      	ldr	r3, [r3, #0]
 8084bf4:	f107 0214 	add.w	r2, r7, #20
 8084bf8:	4611      	mov	r1, r2
 8084bfa:	4618      	mov	r0, r3
 8084bfc:	f002 fa46 	bl	808708c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8084c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8084c02:	3301      	adds	r3, #1
 8084c04:	643b      	str	r3, [r7, #64]	; 0x40
 8084c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8084c08:	2b07      	cmp	r3, #7
 8084c0a:	d9c4      	bls.n	8084b96 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8084c0c:	f7fd fc4c 	bl	80824a8 <HAL_GetTick>
 8084c10:	4602      	mov	r2, r0
 8084c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8084c14:	1ad3      	subs	r3, r2, r3
 8084c16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8084c18:	429a      	cmp	r2, r3
 8084c1a:	d902      	bls.n	8084c22 <HAL_SD_WriteBlocks+0x1b6>
 8084c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8084c1e:	2b00      	cmp	r3, #0
 8084c20:	d112      	bne.n	8084c48 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084c22:	68fb      	ldr	r3, [r7, #12]
 8084c24:	681b      	ldr	r3, [r3, #0]
 8084c26:	4a53      	ldr	r2, [pc, #332]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084c28:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8084c2a:	68fb      	ldr	r3, [r7, #12]
 8084c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084c30:	431a      	orrs	r2, r3
 8084c32:	68fb      	ldr	r3, [r7, #12]
 8084c34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8084c36:	68fb      	ldr	r3, [r7, #12]
 8084c38:	2201      	movs	r2, #1
 8084c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8084c3e:	68fb      	ldr	r3, [r7, #12]
 8084c40:	2200      	movs	r2, #0
 8084c42:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8084c44:	2303      	movs	r3, #3
 8084c46:	e091      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8084c48:	68fb      	ldr	r3, [r7, #12]
 8084c4a:	681b      	ldr	r3, [r3, #0]
 8084c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8084c4e:	f240 331a 	movw	r3, #794	; 0x31a
 8084c52:	4013      	ands	r3, r2
 8084c54:	2b00      	cmp	r3, #0
 8084c56:	d091      	beq.n	8084b7c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8084c58:	68fb      	ldr	r3, [r7, #12]
 8084c5a:	681b      	ldr	r3, [r3, #0]
 8084c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084c62:	2b00      	cmp	r3, #0
 8084c64:	d022      	beq.n	8084cac <HAL_SD_WriteBlocks+0x240>
 8084c66:	683b      	ldr	r3, [r7, #0]
 8084c68:	2b01      	cmp	r3, #1
 8084c6a:	d91f      	bls.n	8084cac <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8084c6c:	68fb      	ldr	r3, [r7, #12]
 8084c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084c70:	2b03      	cmp	r3, #3
 8084c72:	d01b      	beq.n	8084cac <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8084c74:	68fb      	ldr	r3, [r7, #12]
 8084c76:	681b      	ldr	r3, [r3, #0]
 8084c78:	4618      	mov	r0, r3
 8084c7a:	f002 fb55 	bl	8087328 <SDMMC_CmdStopTransfer>
 8084c7e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8084c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084c82:	2b00      	cmp	r3, #0
 8084c84:	d012      	beq.n	8084cac <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084c86:	68fb      	ldr	r3, [r7, #12]
 8084c88:	681b      	ldr	r3, [r3, #0]
 8084c8a:	4a3a      	ldr	r2, [pc, #232]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084c8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8084c8e:	68fb      	ldr	r3, [r7, #12]
 8084c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084c94:	431a      	orrs	r2, r3
 8084c96:	68fb      	ldr	r3, [r7, #12]
 8084c98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8084c9a:	68fb      	ldr	r3, [r7, #12]
 8084c9c:	2201      	movs	r2, #1
 8084c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8084ca2:	68fb      	ldr	r3, [r7, #12]
 8084ca4:	2200      	movs	r2, #0
 8084ca6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8084ca8:	2301      	movs	r3, #1
 8084caa:	e05f      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8084cac:	68fb      	ldr	r3, [r7, #12]
 8084cae:	681b      	ldr	r3, [r3, #0]
 8084cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084cb2:	f003 0308 	and.w	r3, r3, #8
 8084cb6:	2b00      	cmp	r3, #0
 8084cb8:	d012      	beq.n	8084ce0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084cba:	68fb      	ldr	r3, [r7, #12]
 8084cbc:	681b      	ldr	r3, [r3, #0]
 8084cbe:	4a2d      	ldr	r2, [pc, #180]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084cc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8084cc2:	68fb      	ldr	r3, [r7, #12]
 8084cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084cc6:	f043 0208 	orr.w	r2, r3, #8
 8084cca:	68fb      	ldr	r3, [r7, #12]
 8084ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084cce:	68fb      	ldr	r3, [r7, #12]
 8084cd0:	2201      	movs	r2, #1
 8084cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084cd6:	68fb      	ldr	r3, [r7, #12]
 8084cd8:	2200      	movs	r2, #0
 8084cda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084cdc:	2301      	movs	r3, #1
 8084cde:	e045      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8084ce0:	68fb      	ldr	r3, [r7, #12]
 8084ce2:	681b      	ldr	r3, [r3, #0]
 8084ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084ce6:	f003 0302 	and.w	r3, r3, #2
 8084cea:	2b00      	cmp	r3, #0
 8084cec:	d012      	beq.n	8084d14 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084cee:	68fb      	ldr	r3, [r7, #12]
 8084cf0:	681b      	ldr	r3, [r3, #0]
 8084cf2:	4a20      	ldr	r2, [pc, #128]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8084cf6:	68fb      	ldr	r3, [r7, #12]
 8084cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084cfa:	f043 0202 	orr.w	r2, r3, #2
 8084cfe:	68fb      	ldr	r3, [r7, #12]
 8084d00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084d02:	68fb      	ldr	r3, [r7, #12]
 8084d04:	2201      	movs	r2, #1
 8084d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084d0a:	68fb      	ldr	r3, [r7, #12]
 8084d0c:	2200      	movs	r2, #0
 8084d0e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084d10:	2301      	movs	r3, #1
 8084d12:	e02b      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8084d14:	68fb      	ldr	r3, [r7, #12]
 8084d16:	681b      	ldr	r3, [r3, #0]
 8084d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084d1a:	f003 0310 	and.w	r3, r3, #16
 8084d1e:	2b00      	cmp	r3, #0
 8084d20:	d012      	beq.n	8084d48 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084d22:	68fb      	ldr	r3, [r7, #12]
 8084d24:	681b      	ldr	r3, [r3, #0]
 8084d26:	4a13      	ldr	r2, [pc, #76]	; (8084d74 <HAL_SD_WriteBlocks+0x308>)
 8084d28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8084d2a:	68fb      	ldr	r3, [r7, #12]
 8084d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084d2e:	f043 0210 	orr.w	r2, r3, #16
 8084d32:	68fb      	ldr	r3, [r7, #12]
 8084d34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084d36:	68fb      	ldr	r3, [r7, #12]
 8084d38:	2201      	movs	r2, #1
 8084d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084d3e:	68fb      	ldr	r3, [r7, #12]
 8084d40:	2200      	movs	r2, #0
 8084d42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084d44:	2301      	movs	r3, #1
 8084d46:	e011      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8084d48:	68fb      	ldr	r3, [r7, #12]
 8084d4a:	681b      	ldr	r3, [r3, #0]
 8084d4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8084d50:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8084d52:	68fb      	ldr	r3, [r7, #12]
 8084d54:	2201      	movs	r2, #1
 8084d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8084d5a:	2300      	movs	r3, #0
 8084d5c:	e006      	b.n	8084d6c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8084d5e:	68fb      	ldr	r3, [r7, #12]
 8084d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084d62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8084d66:	68fb      	ldr	r3, [r7, #12]
 8084d68:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084d6a:	2301      	movs	r3, #1
  }
}
 8084d6c:	4618      	mov	r0, r3
 8084d6e:	3748      	adds	r7, #72	; 0x48
 8084d70:	46bd      	mov	sp, r7
 8084d72:	bd80      	pop	{r7, pc}
 8084d74:	004005ff 	.word	0x004005ff

08084d78 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8084d78:	b580      	push	{r7, lr}
 8084d7a:	b084      	sub	sp, #16
 8084d7c:	af00      	add	r7, sp, #0
 8084d7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8084d80:	687b      	ldr	r3, [r7, #4]
 8084d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8084d84:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8084d86:	687b      	ldr	r3, [r7, #4]
 8084d88:	681b      	ldr	r3, [r3, #0]
 8084d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8084d90:	2b00      	cmp	r3, #0
 8084d92:	d008      	beq.n	8084da6 <HAL_SD_IRQHandler+0x2e>
 8084d94:	68fb      	ldr	r3, [r7, #12]
 8084d96:	f003 0308 	and.w	r3, r3, #8
 8084d9a:	2b00      	cmp	r3, #0
 8084d9c:	d003      	beq.n	8084da6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8084d9e:	6878      	ldr	r0, [r7, #4]
 8084da0:	f000 fd5c 	bl	808585c <SD_Read_IT>
 8084da4:	e165      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8084da6:	687b      	ldr	r3, [r7, #4]
 8084da8:	681b      	ldr	r3, [r3, #0]
 8084daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084db0:	2b00      	cmp	r3, #0
 8084db2:	f000 808f 	beq.w	8084ed4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8084db6:	687b      	ldr	r3, [r7, #4]
 8084db8:	681b      	ldr	r3, [r3, #0]
 8084dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8084dbe:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8084dc0:	687b      	ldr	r3, [r7, #4]
 8084dc2:	681b      	ldr	r3, [r3, #0]
 8084dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084dc6:	687a      	ldr	r2, [r7, #4]
 8084dc8:	6812      	ldr	r2, [r2, #0]
 8084dca:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8084dce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8084dd2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8084dd4:	687b      	ldr	r3, [r7, #4]
 8084dd6:	681b      	ldr	r3, [r3, #0]
 8084dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8084dda:	687b      	ldr	r3, [r7, #4]
 8084ddc:	681b      	ldr	r3, [r3, #0]
 8084dde:	f022 0201 	bic.w	r2, r2, #1
 8084de2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8084de4:	68fb      	ldr	r3, [r7, #12]
 8084de6:	f003 0308 	and.w	r3, r3, #8
 8084dea:	2b00      	cmp	r3, #0
 8084dec:	d039      	beq.n	8084e62 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8084dee:	68fb      	ldr	r3, [r7, #12]
 8084df0:	f003 0302 	and.w	r3, r3, #2
 8084df4:	2b00      	cmp	r3, #0
 8084df6:	d104      	bne.n	8084e02 <HAL_SD_IRQHandler+0x8a>
 8084df8:	68fb      	ldr	r3, [r7, #12]
 8084dfa:	f003 0320 	and.w	r3, r3, #32
 8084dfe:	2b00      	cmp	r3, #0
 8084e00:	d011      	beq.n	8084e26 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8084e02:	687b      	ldr	r3, [r7, #4]
 8084e04:	681b      	ldr	r3, [r3, #0]
 8084e06:	4618      	mov	r0, r3
 8084e08:	f002 fa8e 	bl	8087328 <SDMMC_CmdStopTransfer>
 8084e0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8084e0e:	68bb      	ldr	r3, [r7, #8]
 8084e10:	2b00      	cmp	r3, #0
 8084e12:	d008      	beq.n	8084e26 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8084e14:	687b      	ldr	r3, [r7, #4]
 8084e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084e18:	68bb      	ldr	r3, [r7, #8]
 8084e1a:	431a      	orrs	r2, r3
 8084e1c:	687b      	ldr	r3, [r7, #4]
 8084e1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8084e20:	6878      	ldr	r0, [r7, #4]
 8084e22:	f000 f92f 	bl	8085084 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8084e26:	687b      	ldr	r3, [r7, #4]
 8084e28:	681b      	ldr	r3, [r3, #0]
 8084e2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8084e2e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8084e30:	687b      	ldr	r3, [r7, #4]
 8084e32:	2201      	movs	r2, #1
 8084e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084e38:	687b      	ldr	r3, [r7, #4]
 8084e3a:	2200      	movs	r2, #0
 8084e3c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8084e3e:	68fb      	ldr	r3, [r7, #12]
 8084e40:	f003 0301 	and.w	r3, r3, #1
 8084e44:	2b00      	cmp	r3, #0
 8084e46:	d104      	bne.n	8084e52 <HAL_SD_IRQHandler+0xda>
 8084e48:	68fb      	ldr	r3, [r7, #12]
 8084e4a:	f003 0302 	and.w	r3, r3, #2
 8084e4e:	2b00      	cmp	r3, #0
 8084e50:	d003      	beq.n	8084e5a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8084e52:	6878      	ldr	r0, [r7, #4]
 8084e54:	f002 feac 	bl	8087bb0 <HAL_SD_RxCpltCallback>
 8084e58:	e10b      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8084e5a:	6878      	ldr	r0, [r7, #4]
 8084e5c:	f002 fe9e 	bl	8087b9c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8084e60:	e107      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8084e62:	68fb      	ldr	r3, [r7, #12]
 8084e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8084e68:	2b00      	cmp	r3, #0
 8084e6a:	f000 8102 	beq.w	8085072 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8084e6e:	68fb      	ldr	r3, [r7, #12]
 8084e70:	f003 0320 	and.w	r3, r3, #32
 8084e74:	2b00      	cmp	r3, #0
 8084e76:	d011      	beq.n	8084e9c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8084e78:	687b      	ldr	r3, [r7, #4]
 8084e7a:	681b      	ldr	r3, [r3, #0]
 8084e7c:	4618      	mov	r0, r3
 8084e7e:	f002 fa53 	bl	8087328 <SDMMC_CmdStopTransfer>
 8084e82:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8084e84:	68bb      	ldr	r3, [r7, #8]
 8084e86:	2b00      	cmp	r3, #0
 8084e88:	d008      	beq.n	8084e9c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8084e8a:	687b      	ldr	r3, [r7, #4]
 8084e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084e8e:	68bb      	ldr	r3, [r7, #8]
 8084e90:	431a      	orrs	r2, r3
 8084e92:	687b      	ldr	r3, [r7, #4]
 8084e94:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8084e96:	6878      	ldr	r0, [r7, #4]
 8084e98:	f000 f8f4 	bl	8085084 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8084e9c:	68fb      	ldr	r3, [r7, #12]
 8084e9e:	f003 0301 	and.w	r3, r3, #1
 8084ea2:	2b00      	cmp	r3, #0
 8084ea4:	f040 80e5 	bne.w	8085072 <HAL_SD_IRQHandler+0x2fa>
 8084ea8:	68fb      	ldr	r3, [r7, #12]
 8084eaa:	f003 0302 	and.w	r3, r3, #2
 8084eae:	2b00      	cmp	r3, #0
 8084eb0:	f040 80df 	bne.w	8085072 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8084eb4:	687b      	ldr	r3, [r7, #4]
 8084eb6:	681b      	ldr	r3, [r3, #0]
 8084eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8084eba:	687b      	ldr	r3, [r7, #4]
 8084ebc:	681b      	ldr	r3, [r3, #0]
 8084ebe:	f022 0208 	bic.w	r2, r2, #8
 8084ec2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8084ec4:	687b      	ldr	r3, [r7, #4]
 8084ec6:	2201      	movs	r2, #1
 8084ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8084ecc:	6878      	ldr	r0, [r7, #4]
 8084ece:	f002 fe65 	bl	8087b9c <HAL_SD_TxCpltCallback>
}
 8084ed2:	e0ce      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8084ed4:	687b      	ldr	r3, [r7, #4]
 8084ed6:	681b      	ldr	r3, [r3, #0]
 8084ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8084ede:	2b00      	cmp	r3, #0
 8084ee0:	d008      	beq.n	8084ef4 <HAL_SD_IRQHandler+0x17c>
 8084ee2:	68fb      	ldr	r3, [r7, #12]
 8084ee4:	f003 0308 	and.w	r3, r3, #8
 8084ee8:	2b00      	cmp	r3, #0
 8084eea:	d003      	beq.n	8084ef4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8084eec:	6878      	ldr	r0, [r7, #4]
 8084eee:	f000 fd06 	bl	80858fe <SD_Write_IT>
 8084ef2:	e0be      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8084ef4:	687b      	ldr	r3, [r7, #4]
 8084ef6:	681b      	ldr	r3, [r3, #0]
 8084ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8084efa:	f240 233a 	movw	r3, #570	; 0x23a
 8084efe:	4013      	ands	r3, r2
 8084f00:	2b00      	cmp	r3, #0
 8084f02:	f000 80b6 	beq.w	8085072 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8084f06:	687b      	ldr	r3, [r7, #4]
 8084f08:	681b      	ldr	r3, [r3, #0]
 8084f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f0c:	f003 0302 	and.w	r3, r3, #2
 8084f10:	2b00      	cmp	r3, #0
 8084f12:	d005      	beq.n	8084f20 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8084f14:	687b      	ldr	r3, [r7, #4]
 8084f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084f18:	f043 0202 	orr.w	r2, r3, #2
 8084f1c:	687b      	ldr	r3, [r7, #4]
 8084f1e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8084f20:	687b      	ldr	r3, [r7, #4]
 8084f22:	681b      	ldr	r3, [r3, #0]
 8084f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f26:	f003 0308 	and.w	r3, r3, #8
 8084f2a:	2b00      	cmp	r3, #0
 8084f2c:	d005      	beq.n	8084f3a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8084f2e:	687b      	ldr	r3, [r7, #4]
 8084f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084f32:	f043 0208 	orr.w	r2, r3, #8
 8084f36:	687b      	ldr	r3, [r7, #4]
 8084f38:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8084f3a:	687b      	ldr	r3, [r7, #4]
 8084f3c:	681b      	ldr	r3, [r3, #0]
 8084f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f40:	f003 0320 	and.w	r3, r3, #32
 8084f44:	2b00      	cmp	r3, #0
 8084f46:	d005      	beq.n	8084f54 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8084f48:	687b      	ldr	r3, [r7, #4]
 8084f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084f4c:	f043 0220 	orr.w	r2, r3, #32
 8084f50:	687b      	ldr	r3, [r7, #4]
 8084f52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8084f54:	687b      	ldr	r3, [r7, #4]
 8084f56:	681b      	ldr	r3, [r3, #0]
 8084f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f5a:	f003 0310 	and.w	r3, r3, #16
 8084f5e:	2b00      	cmp	r3, #0
 8084f60:	d005      	beq.n	8084f6e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8084f62:	687b      	ldr	r3, [r7, #4]
 8084f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084f66:	f043 0210 	orr.w	r2, r3, #16
 8084f6a:	687b      	ldr	r3, [r7, #4]
 8084f6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8084f6e:	687b      	ldr	r3, [r7, #4]
 8084f70:	681b      	ldr	r3, [r3, #0]
 8084f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8084f78:	2b00      	cmp	r3, #0
 8084f7a:	d005      	beq.n	8084f88 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8084f7c:	687b      	ldr	r3, [r7, #4]
 8084f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084f80:	f043 0208 	orr.w	r2, r3, #8
 8084f84:	687b      	ldr	r3, [r7, #4]
 8084f86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8084f88:	687b      	ldr	r3, [r7, #4]
 8084f8a:	681b      	ldr	r3, [r3, #0]
 8084f8c:	f240 723a 	movw	r2, #1850	; 0x73a
 8084f90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8084f92:	687b      	ldr	r3, [r7, #4]
 8084f94:	681b      	ldr	r3, [r3, #0]
 8084f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084f98:	687a      	ldr	r2, [r7, #4]
 8084f9a:	6812      	ldr	r2, [r2, #0]
 8084f9c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8084fa0:	f023 0302 	bic.w	r3, r3, #2
 8084fa4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8084fa6:	687b      	ldr	r3, [r7, #4]
 8084fa8:	681b      	ldr	r3, [r3, #0]
 8084faa:	4618      	mov	r0, r3
 8084fac:	f002 f9bc 	bl	8087328 <SDMMC_CmdStopTransfer>
 8084fb0:	4602      	mov	r2, r0
 8084fb2:	687b      	ldr	r3, [r7, #4]
 8084fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084fb6:	431a      	orrs	r2, r3
 8084fb8:	687b      	ldr	r3, [r7, #4]
 8084fba:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8084fbc:	68fb      	ldr	r3, [r7, #12]
 8084fbe:	f003 0308 	and.w	r3, r3, #8
 8084fc2:	2b00      	cmp	r3, #0
 8084fc4:	d00a      	beq.n	8084fdc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8084fc6:	687b      	ldr	r3, [r7, #4]
 8084fc8:	2201      	movs	r2, #1
 8084fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084fce:	687b      	ldr	r3, [r7, #4]
 8084fd0:	2200      	movs	r2, #0
 8084fd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8084fd4:	6878      	ldr	r0, [r7, #4]
 8084fd6:	f000 f855 	bl	8085084 <HAL_SD_ErrorCallback>
}
 8084fda:	e04a      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8084fdc:	68fb      	ldr	r3, [r7, #12]
 8084fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8084fe2:	2b00      	cmp	r3, #0
 8084fe4:	d045      	beq.n	8085072 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8084fe6:	68fb      	ldr	r3, [r7, #12]
 8084fe8:	f003 0310 	and.w	r3, r3, #16
 8084fec:	2b00      	cmp	r3, #0
 8084fee:	d104      	bne.n	8084ffa <HAL_SD_IRQHandler+0x282>
 8084ff0:	68fb      	ldr	r3, [r7, #12]
 8084ff2:	f003 0320 	and.w	r3, r3, #32
 8084ff6:	2b00      	cmp	r3, #0
 8084ff8:	d011      	beq.n	808501e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8084ffa:	687b      	ldr	r3, [r7, #4]
 8084ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8084ffe:	4a1f      	ldr	r2, [pc, #124]	; (808507c <HAL_SD_IRQHandler+0x304>)
 8085000:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8085002:	687b      	ldr	r3, [r7, #4]
 8085004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085006:	4618      	mov	r0, r3
 8085008:	f7fd fd06 	bl	8082a18 <HAL_DMA_Abort_IT>
 808500c:	4603      	mov	r3, r0
 808500e:	2b00      	cmp	r3, #0
 8085010:	d02f      	beq.n	8085072 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8085012:	687b      	ldr	r3, [r7, #4]
 8085014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085016:	4618      	mov	r0, r3
 8085018:	f000 fa2e 	bl	8085478 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 808501c:	e029      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 808501e:	68fb      	ldr	r3, [r7, #12]
 8085020:	f003 0301 	and.w	r3, r3, #1
 8085024:	2b00      	cmp	r3, #0
 8085026:	d104      	bne.n	8085032 <HAL_SD_IRQHandler+0x2ba>
 8085028:	68fb      	ldr	r3, [r7, #12]
 808502a:	f003 0302 	and.w	r3, r3, #2
 808502e:	2b00      	cmp	r3, #0
 8085030:	d011      	beq.n	8085056 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8085032:	687b      	ldr	r3, [r7, #4]
 8085034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085036:	4a12      	ldr	r2, [pc, #72]	; (8085080 <HAL_SD_IRQHandler+0x308>)
 8085038:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 808503a:	687b      	ldr	r3, [r7, #4]
 808503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808503e:	4618      	mov	r0, r3
 8085040:	f7fd fcea 	bl	8082a18 <HAL_DMA_Abort_IT>
 8085044:	4603      	mov	r3, r0
 8085046:	2b00      	cmp	r3, #0
 8085048:	d013      	beq.n	8085072 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 808504a:	687b      	ldr	r3, [r7, #4]
 808504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808504e:	4618      	mov	r0, r3
 8085050:	f000 fa49 	bl	80854e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8085054:	e00d      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8085056:	687b      	ldr	r3, [r7, #4]
 8085058:	2200      	movs	r2, #0
 808505a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 808505c:	687b      	ldr	r3, [r7, #4]
 808505e:	2201      	movs	r2, #1
 8085060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8085064:	687b      	ldr	r3, [r7, #4]
 8085066:	2200      	movs	r2, #0
 8085068:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 808506a:	6878      	ldr	r0, [r7, #4]
 808506c:	f002 fd8c 	bl	8087b88 <HAL_SD_AbortCallback>
}
 8085070:	e7ff      	b.n	8085072 <HAL_SD_IRQHandler+0x2fa>
 8085072:	bf00      	nop
 8085074:	3710      	adds	r7, #16
 8085076:	46bd      	mov	sp, r7
 8085078:	bd80      	pop	{r7, pc}
 808507a:	bf00      	nop
 808507c:	08085479 	.word	0x08085479
 8085080:	080854e7 	.word	0x080854e7

08085084 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8085084:	b480      	push	{r7}
 8085086:	b083      	sub	sp, #12
 8085088:	af00      	add	r7, sp, #0
 808508a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 808508c:	bf00      	nop
 808508e:	370c      	adds	r7, #12
 8085090:	46bd      	mov	sp, r7
 8085092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085096:	4770      	bx	lr

08085098 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8085098:	b480      	push	{r7}
 808509a:	b083      	sub	sp, #12
 808509c:	af00      	add	r7, sp, #0
 808509e:	6078      	str	r0, [r7, #4]
 80850a0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80850a2:	687b      	ldr	r3, [r7, #4]
 80850a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850a6:	0f9b      	lsrs	r3, r3, #30
 80850a8:	b2da      	uxtb	r2, r3
 80850aa:	683b      	ldr	r3, [r7, #0]
 80850ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80850ae:	687b      	ldr	r3, [r7, #4]
 80850b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850b2:	0e9b      	lsrs	r3, r3, #26
 80850b4:	b2db      	uxtb	r3, r3
 80850b6:	f003 030f 	and.w	r3, r3, #15
 80850ba:	b2da      	uxtb	r2, r3
 80850bc:	683b      	ldr	r3, [r7, #0]
 80850be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80850c0:	687b      	ldr	r3, [r7, #4]
 80850c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850c4:	0e1b      	lsrs	r3, r3, #24
 80850c6:	b2db      	uxtb	r3, r3
 80850c8:	f003 0303 	and.w	r3, r3, #3
 80850cc:	b2da      	uxtb	r2, r3
 80850ce:	683b      	ldr	r3, [r7, #0]
 80850d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80850d2:	687b      	ldr	r3, [r7, #4]
 80850d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850d6:	0c1b      	lsrs	r3, r3, #16
 80850d8:	b2da      	uxtb	r2, r3
 80850da:	683b      	ldr	r3, [r7, #0]
 80850dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80850de:	687b      	ldr	r3, [r7, #4]
 80850e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850e2:	0a1b      	lsrs	r3, r3, #8
 80850e4:	b2da      	uxtb	r2, r3
 80850e6:	683b      	ldr	r3, [r7, #0]
 80850e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80850ea:	687b      	ldr	r3, [r7, #4]
 80850ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80850ee:	b2da      	uxtb	r2, r3
 80850f0:	683b      	ldr	r3, [r7, #0]
 80850f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80850f4:	687b      	ldr	r3, [r7, #4]
 80850f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80850f8:	0d1b      	lsrs	r3, r3, #20
 80850fa:	b29a      	uxth	r2, r3
 80850fc:	683b      	ldr	r3, [r7, #0]
 80850fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8085100:	687b      	ldr	r3, [r7, #4]
 8085102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085104:	0c1b      	lsrs	r3, r3, #16
 8085106:	b2db      	uxtb	r3, r3
 8085108:	f003 030f 	and.w	r3, r3, #15
 808510c:	b2da      	uxtb	r2, r3
 808510e:	683b      	ldr	r3, [r7, #0]
 8085110:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8085112:	687b      	ldr	r3, [r7, #4]
 8085114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085116:	0bdb      	lsrs	r3, r3, #15
 8085118:	b2db      	uxtb	r3, r3
 808511a:	f003 0301 	and.w	r3, r3, #1
 808511e:	b2da      	uxtb	r2, r3
 8085120:	683b      	ldr	r3, [r7, #0]
 8085122:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8085124:	687b      	ldr	r3, [r7, #4]
 8085126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085128:	0b9b      	lsrs	r3, r3, #14
 808512a:	b2db      	uxtb	r3, r3
 808512c:	f003 0301 	and.w	r3, r3, #1
 8085130:	b2da      	uxtb	r2, r3
 8085132:	683b      	ldr	r3, [r7, #0]
 8085134:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8085136:	687b      	ldr	r3, [r7, #4]
 8085138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808513a:	0b5b      	lsrs	r3, r3, #13
 808513c:	b2db      	uxtb	r3, r3
 808513e:	f003 0301 	and.w	r3, r3, #1
 8085142:	b2da      	uxtb	r2, r3
 8085144:	683b      	ldr	r3, [r7, #0]
 8085146:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8085148:	687b      	ldr	r3, [r7, #4]
 808514a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808514c:	0b1b      	lsrs	r3, r3, #12
 808514e:	b2db      	uxtb	r3, r3
 8085150:	f003 0301 	and.w	r3, r3, #1
 8085154:	b2da      	uxtb	r2, r3
 8085156:	683b      	ldr	r3, [r7, #0]
 8085158:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 808515a:	683b      	ldr	r3, [r7, #0]
 808515c:	2200      	movs	r2, #0
 808515e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8085160:	687b      	ldr	r3, [r7, #4]
 8085162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085164:	2b00      	cmp	r3, #0
 8085166:	d163      	bne.n	8085230 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8085168:	687b      	ldr	r3, [r7, #4]
 808516a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808516c:	009a      	lsls	r2, r3, #2
 808516e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8085172:	4013      	ands	r3, r2
 8085174:	687a      	ldr	r2, [r7, #4]
 8085176:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8085178:	0f92      	lsrs	r2, r2, #30
 808517a:	431a      	orrs	r2, r3
 808517c:	683b      	ldr	r3, [r7, #0]
 808517e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8085180:	687b      	ldr	r3, [r7, #4]
 8085182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085184:	0edb      	lsrs	r3, r3, #27
 8085186:	b2db      	uxtb	r3, r3
 8085188:	f003 0307 	and.w	r3, r3, #7
 808518c:	b2da      	uxtb	r2, r3
 808518e:	683b      	ldr	r3, [r7, #0]
 8085190:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8085192:	687b      	ldr	r3, [r7, #4]
 8085194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085196:	0e1b      	lsrs	r3, r3, #24
 8085198:	b2db      	uxtb	r3, r3
 808519a:	f003 0307 	and.w	r3, r3, #7
 808519e:	b2da      	uxtb	r2, r3
 80851a0:	683b      	ldr	r3, [r7, #0]
 80851a2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80851a4:	687b      	ldr	r3, [r7, #4]
 80851a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80851a8:	0d5b      	lsrs	r3, r3, #21
 80851aa:	b2db      	uxtb	r3, r3
 80851ac:	f003 0307 	and.w	r3, r3, #7
 80851b0:	b2da      	uxtb	r2, r3
 80851b2:	683b      	ldr	r3, [r7, #0]
 80851b4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80851b6:	687b      	ldr	r3, [r7, #4]
 80851b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80851ba:	0c9b      	lsrs	r3, r3, #18
 80851bc:	b2db      	uxtb	r3, r3
 80851be:	f003 0307 	and.w	r3, r3, #7
 80851c2:	b2da      	uxtb	r2, r3
 80851c4:	683b      	ldr	r3, [r7, #0]
 80851c6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80851c8:	687b      	ldr	r3, [r7, #4]
 80851ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80851cc:	0bdb      	lsrs	r3, r3, #15
 80851ce:	b2db      	uxtb	r3, r3
 80851d0:	f003 0307 	and.w	r3, r3, #7
 80851d4:	b2da      	uxtb	r2, r3
 80851d6:	683b      	ldr	r3, [r7, #0]
 80851d8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80851da:	683b      	ldr	r3, [r7, #0]
 80851dc:	691b      	ldr	r3, [r3, #16]
 80851de:	1c5a      	adds	r2, r3, #1
 80851e0:	687b      	ldr	r3, [r7, #4]
 80851e2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80851e4:	683b      	ldr	r3, [r7, #0]
 80851e6:	7e1b      	ldrb	r3, [r3, #24]
 80851e8:	b2db      	uxtb	r3, r3
 80851ea:	f003 0307 	and.w	r3, r3, #7
 80851ee:	3302      	adds	r3, #2
 80851f0:	2201      	movs	r2, #1
 80851f2:	fa02 f303 	lsl.w	r3, r2, r3
 80851f6:	687a      	ldr	r2, [r7, #4]
 80851f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80851fa:	fb03 f202 	mul.w	r2, r3, r2
 80851fe:	687b      	ldr	r3, [r7, #4]
 8085200:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8085202:	683b      	ldr	r3, [r7, #0]
 8085204:	7a1b      	ldrb	r3, [r3, #8]
 8085206:	b2db      	uxtb	r3, r3
 8085208:	f003 030f 	and.w	r3, r3, #15
 808520c:	2201      	movs	r2, #1
 808520e:	409a      	lsls	r2, r3
 8085210:	687b      	ldr	r3, [r7, #4]
 8085212:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8085214:	687b      	ldr	r3, [r7, #4]
 8085216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085218:	687a      	ldr	r2, [r7, #4]
 808521a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 808521c:	0a52      	lsrs	r2, r2, #9
 808521e:	fb03 f202 	mul.w	r2, r3, r2
 8085222:	687b      	ldr	r3, [r7, #4]
 8085224:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8085226:	687b      	ldr	r3, [r7, #4]
 8085228:	f44f 7200 	mov.w	r2, #512	; 0x200
 808522c:	661a      	str	r2, [r3, #96]	; 0x60
 808522e:	e031      	b.n	8085294 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8085230:	687b      	ldr	r3, [r7, #4]
 8085232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085234:	2b01      	cmp	r3, #1
 8085236:	d11d      	bne.n	8085274 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8085238:	687b      	ldr	r3, [r7, #4]
 808523a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808523c:	041b      	lsls	r3, r3, #16
 808523e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8085242:	687b      	ldr	r3, [r7, #4]
 8085244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085246:	0c1b      	lsrs	r3, r3, #16
 8085248:	431a      	orrs	r2, r3
 808524a:	683b      	ldr	r3, [r7, #0]
 808524c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 808524e:	683b      	ldr	r3, [r7, #0]
 8085250:	691b      	ldr	r3, [r3, #16]
 8085252:	3301      	adds	r3, #1
 8085254:	029a      	lsls	r2, r3, #10
 8085256:	687b      	ldr	r3, [r7, #4]
 8085258:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 808525a:	687b      	ldr	r3, [r7, #4]
 808525c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 808525e:	687b      	ldr	r3, [r7, #4]
 8085260:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8085262:	687b      	ldr	r3, [r7, #4]
 8085264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085268:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 808526a:	687b      	ldr	r3, [r7, #4]
 808526c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 808526e:	687b      	ldr	r3, [r7, #4]
 8085270:	661a      	str	r2, [r3, #96]	; 0x60
 8085272:	e00f      	b.n	8085294 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8085274:	687b      	ldr	r3, [r7, #4]
 8085276:	681b      	ldr	r3, [r3, #0]
 8085278:	4a58      	ldr	r2, [pc, #352]	; (80853dc <HAL_SD_GetCardCSD+0x344>)
 808527a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808527c:	687b      	ldr	r3, [r7, #4]
 808527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085280:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8085284:	687b      	ldr	r3, [r7, #4]
 8085286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8085288:	687b      	ldr	r3, [r7, #4]
 808528a:	2201      	movs	r2, #1
 808528c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8085290:	2301      	movs	r3, #1
 8085292:	e09d      	b.n	80853d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8085294:	687b      	ldr	r3, [r7, #4]
 8085296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085298:	0b9b      	lsrs	r3, r3, #14
 808529a:	b2db      	uxtb	r3, r3
 808529c:	f003 0301 	and.w	r3, r3, #1
 80852a0:	b2da      	uxtb	r2, r3
 80852a2:	683b      	ldr	r3, [r7, #0]
 80852a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80852a6:	687b      	ldr	r3, [r7, #4]
 80852a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80852aa:	09db      	lsrs	r3, r3, #7
 80852ac:	b2db      	uxtb	r3, r3
 80852ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80852b2:	b2da      	uxtb	r2, r3
 80852b4:	683b      	ldr	r3, [r7, #0]
 80852b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80852b8:	687b      	ldr	r3, [r7, #4]
 80852ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80852bc:	b2db      	uxtb	r3, r3
 80852be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80852c2:	b2da      	uxtb	r2, r3
 80852c4:	683b      	ldr	r3, [r7, #0]
 80852c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80852c8:	687b      	ldr	r3, [r7, #4]
 80852ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80852cc:	0fdb      	lsrs	r3, r3, #31
 80852ce:	b2da      	uxtb	r2, r3
 80852d0:	683b      	ldr	r3, [r7, #0]
 80852d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80852d4:	687b      	ldr	r3, [r7, #4]
 80852d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80852d8:	0f5b      	lsrs	r3, r3, #29
 80852da:	b2db      	uxtb	r3, r3
 80852dc:	f003 0303 	and.w	r3, r3, #3
 80852e0:	b2da      	uxtb	r2, r3
 80852e2:	683b      	ldr	r3, [r7, #0]
 80852e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80852e6:	687b      	ldr	r3, [r7, #4]
 80852e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80852ea:	0e9b      	lsrs	r3, r3, #26
 80852ec:	b2db      	uxtb	r3, r3
 80852ee:	f003 0307 	and.w	r3, r3, #7
 80852f2:	b2da      	uxtb	r2, r3
 80852f4:	683b      	ldr	r3, [r7, #0]
 80852f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80852f8:	687b      	ldr	r3, [r7, #4]
 80852fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80852fc:	0d9b      	lsrs	r3, r3, #22
 80852fe:	b2db      	uxtb	r3, r3
 8085300:	f003 030f 	and.w	r3, r3, #15
 8085304:	b2da      	uxtb	r2, r3
 8085306:	683b      	ldr	r3, [r7, #0]
 8085308:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 808530a:	687b      	ldr	r3, [r7, #4]
 808530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808530e:	0d5b      	lsrs	r3, r3, #21
 8085310:	b2db      	uxtb	r3, r3
 8085312:	f003 0301 	and.w	r3, r3, #1
 8085316:	b2da      	uxtb	r2, r3
 8085318:	683b      	ldr	r3, [r7, #0]
 808531a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 808531e:	683b      	ldr	r3, [r7, #0]
 8085320:	2200      	movs	r2, #0
 8085322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8085326:	687b      	ldr	r3, [r7, #4]
 8085328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808532a:	0c1b      	lsrs	r3, r3, #16
 808532c:	b2db      	uxtb	r3, r3
 808532e:	f003 0301 	and.w	r3, r3, #1
 8085332:	b2da      	uxtb	r2, r3
 8085334:	683b      	ldr	r3, [r7, #0]
 8085336:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 808533a:	687b      	ldr	r3, [r7, #4]
 808533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808533e:	0bdb      	lsrs	r3, r3, #15
 8085340:	b2db      	uxtb	r3, r3
 8085342:	f003 0301 	and.w	r3, r3, #1
 8085346:	b2da      	uxtb	r2, r3
 8085348:	683b      	ldr	r3, [r7, #0]
 808534a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 808534e:	687b      	ldr	r3, [r7, #4]
 8085350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085352:	0b9b      	lsrs	r3, r3, #14
 8085354:	b2db      	uxtb	r3, r3
 8085356:	f003 0301 	and.w	r3, r3, #1
 808535a:	b2da      	uxtb	r2, r3
 808535c:	683b      	ldr	r3, [r7, #0]
 808535e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8085362:	687b      	ldr	r3, [r7, #4]
 8085364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085366:	0b5b      	lsrs	r3, r3, #13
 8085368:	b2db      	uxtb	r3, r3
 808536a:	f003 0301 	and.w	r3, r3, #1
 808536e:	b2da      	uxtb	r2, r3
 8085370:	683b      	ldr	r3, [r7, #0]
 8085372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8085376:	687b      	ldr	r3, [r7, #4]
 8085378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808537a:	0b1b      	lsrs	r3, r3, #12
 808537c:	b2db      	uxtb	r3, r3
 808537e:	f003 0301 	and.w	r3, r3, #1
 8085382:	b2da      	uxtb	r2, r3
 8085384:	683b      	ldr	r3, [r7, #0]
 8085386:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 808538a:	687b      	ldr	r3, [r7, #4]
 808538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808538e:	0a9b      	lsrs	r3, r3, #10
 8085390:	b2db      	uxtb	r3, r3
 8085392:	f003 0303 	and.w	r3, r3, #3
 8085396:	b2da      	uxtb	r2, r3
 8085398:	683b      	ldr	r3, [r7, #0]
 808539a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 808539e:	687b      	ldr	r3, [r7, #4]
 80853a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80853a2:	0a1b      	lsrs	r3, r3, #8
 80853a4:	b2db      	uxtb	r3, r3
 80853a6:	f003 0303 	and.w	r3, r3, #3
 80853aa:	b2da      	uxtb	r2, r3
 80853ac:	683b      	ldr	r3, [r7, #0]
 80853ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80853b2:	687b      	ldr	r3, [r7, #4]
 80853b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80853b6:	085b      	lsrs	r3, r3, #1
 80853b8:	b2db      	uxtb	r3, r3
 80853ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80853be:	b2da      	uxtb	r2, r3
 80853c0:	683b      	ldr	r3, [r7, #0]
 80853c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80853c6:	683b      	ldr	r3, [r7, #0]
 80853c8:	2201      	movs	r2, #1
 80853ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80853ce:	2300      	movs	r3, #0
}
 80853d0:	4618      	mov	r0, r3
 80853d2:	370c      	adds	r7, #12
 80853d4:	46bd      	mov	sp, r7
 80853d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80853da:	4770      	bx	lr
 80853dc:	004005ff 	.word	0x004005ff

080853e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80853e0:	b480      	push	{r7}
 80853e2:	b083      	sub	sp, #12
 80853e4:	af00      	add	r7, sp, #0
 80853e6:	6078      	str	r0, [r7, #4]
 80853e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80853ea:	687b      	ldr	r3, [r7, #4]
 80853ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80853ee:	683b      	ldr	r3, [r7, #0]
 80853f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80853f2:	687b      	ldr	r3, [r7, #4]
 80853f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80853f6:	683b      	ldr	r3, [r7, #0]
 80853f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80853fa:	687b      	ldr	r3, [r7, #4]
 80853fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80853fe:	683b      	ldr	r3, [r7, #0]
 8085400:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8085402:	687b      	ldr	r3, [r7, #4]
 8085404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8085406:	683b      	ldr	r3, [r7, #0]
 8085408:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 808540a:	687b      	ldr	r3, [r7, #4]
 808540c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 808540e:	683b      	ldr	r3, [r7, #0]
 8085410:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8085412:	687b      	ldr	r3, [r7, #4]
 8085414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8085416:	683b      	ldr	r3, [r7, #0]
 8085418:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 808541a:	687b      	ldr	r3, [r7, #4]
 808541c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 808541e:	683b      	ldr	r3, [r7, #0]
 8085420:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8085422:	687b      	ldr	r3, [r7, #4]
 8085424:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8085426:	683b      	ldr	r3, [r7, #0]
 8085428:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 808542a:	2300      	movs	r3, #0
}
 808542c:	4618      	mov	r0, r3
 808542e:	370c      	adds	r7, #12
 8085430:	46bd      	mov	sp, r7
 8085432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085436:	4770      	bx	lr

08085438 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8085438:	b580      	push	{r7, lr}
 808543a:	b086      	sub	sp, #24
 808543c:	af00      	add	r7, sp, #0
 808543e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8085440:	2300      	movs	r3, #0
 8085442:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8085444:	f107 030c 	add.w	r3, r7, #12
 8085448:	4619      	mov	r1, r3
 808544a:	6878      	ldr	r0, [r7, #4]
 808544c:	f000 f9de 	bl	808580c <SD_SendStatus>
 8085450:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085452:	697b      	ldr	r3, [r7, #20]
 8085454:	2b00      	cmp	r3, #0
 8085456:	d005      	beq.n	8085464 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8085458:	687b      	ldr	r3, [r7, #4]
 808545a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808545c:	697b      	ldr	r3, [r7, #20]
 808545e:	431a      	orrs	r2, r3
 8085460:	687b      	ldr	r3, [r7, #4]
 8085462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8085464:	68fb      	ldr	r3, [r7, #12]
 8085466:	0a5b      	lsrs	r3, r3, #9
 8085468:	f003 030f 	and.w	r3, r3, #15
 808546c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 808546e:	693b      	ldr	r3, [r7, #16]
}
 8085470:	4618      	mov	r0, r3
 8085472:	3718      	adds	r7, #24
 8085474:	46bd      	mov	sp, r7
 8085476:	bd80      	pop	{r7, pc}

08085478 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8085478:	b580      	push	{r7, lr}
 808547a:	b084      	sub	sp, #16
 808547c:	af00      	add	r7, sp, #0
 808547e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8085480:	687b      	ldr	r3, [r7, #4]
 8085482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085484:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8085486:	68fb      	ldr	r3, [r7, #12]
 8085488:	681b      	ldr	r3, [r3, #0]
 808548a:	f240 523a 	movw	r2, #1338	; 0x53a
 808548e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8085490:	68f8      	ldr	r0, [r7, #12]
 8085492:	f7ff ffd1 	bl	8085438 <HAL_SD_GetCardState>
 8085496:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8085498:	68fb      	ldr	r3, [r7, #12]
 808549a:	2201      	movs	r2, #1
 808549c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80854a0:	68fb      	ldr	r3, [r7, #12]
 80854a2:	2200      	movs	r2, #0
 80854a4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80854a6:	68bb      	ldr	r3, [r7, #8]
 80854a8:	2b06      	cmp	r3, #6
 80854aa:	d002      	beq.n	80854b2 <SD_DMATxAbort+0x3a>
 80854ac:	68bb      	ldr	r3, [r7, #8]
 80854ae:	2b05      	cmp	r3, #5
 80854b0:	d10a      	bne.n	80854c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80854b2:	68fb      	ldr	r3, [r7, #12]
 80854b4:	681b      	ldr	r3, [r3, #0]
 80854b6:	4618      	mov	r0, r3
 80854b8:	f001 ff36 	bl	8087328 <SDMMC_CmdStopTransfer>
 80854bc:	4602      	mov	r2, r0
 80854be:	68fb      	ldr	r3, [r7, #12]
 80854c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854c2:	431a      	orrs	r2, r3
 80854c4:	68fb      	ldr	r3, [r7, #12]
 80854c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80854c8:	68fb      	ldr	r3, [r7, #12]
 80854ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854cc:	2b00      	cmp	r3, #0
 80854ce:	d103      	bne.n	80854d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80854d0:	68f8      	ldr	r0, [r7, #12]
 80854d2:	f002 fb59 	bl	8087b88 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80854d6:	e002      	b.n	80854de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80854d8:	68f8      	ldr	r0, [r7, #12]
 80854da:	f7ff fdd3 	bl	8085084 <HAL_SD_ErrorCallback>
}
 80854de:	bf00      	nop
 80854e0:	3710      	adds	r7, #16
 80854e2:	46bd      	mov	sp, r7
 80854e4:	bd80      	pop	{r7, pc}

080854e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80854e6:	b580      	push	{r7, lr}
 80854e8:	b084      	sub	sp, #16
 80854ea:	af00      	add	r7, sp, #0
 80854ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80854ee:	687b      	ldr	r3, [r7, #4]
 80854f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80854f4:	68fb      	ldr	r3, [r7, #12]
 80854f6:	681b      	ldr	r3, [r3, #0]
 80854f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80854fc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80854fe:	68f8      	ldr	r0, [r7, #12]
 8085500:	f7ff ff9a 	bl	8085438 <HAL_SD_GetCardState>
 8085504:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8085506:	68fb      	ldr	r3, [r7, #12]
 8085508:	2201      	movs	r2, #1
 808550a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 808550e:	68fb      	ldr	r3, [r7, #12]
 8085510:	2200      	movs	r2, #0
 8085512:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8085514:	68bb      	ldr	r3, [r7, #8]
 8085516:	2b06      	cmp	r3, #6
 8085518:	d002      	beq.n	8085520 <SD_DMARxAbort+0x3a>
 808551a:	68bb      	ldr	r3, [r7, #8]
 808551c:	2b05      	cmp	r3, #5
 808551e:	d10a      	bne.n	8085536 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8085520:	68fb      	ldr	r3, [r7, #12]
 8085522:	681b      	ldr	r3, [r3, #0]
 8085524:	4618      	mov	r0, r3
 8085526:	f001 feff 	bl	8087328 <SDMMC_CmdStopTransfer>
 808552a:	4602      	mov	r2, r0
 808552c:	68fb      	ldr	r3, [r7, #12]
 808552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085530:	431a      	orrs	r2, r3
 8085532:	68fb      	ldr	r3, [r7, #12]
 8085534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8085536:	68fb      	ldr	r3, [r7, #12]
 8085538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808553a:	2b00      	cmp	r3, #0
 808553c:	d103      	bne.n	8085546 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 808553e:	68f8      	ldr	r0, [r7, #12]
 8085540:	f002 fb22 	bl	8087b88 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8085544:	e002      	b.n	808554c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8085546:	68f8      	ldr	r0, [r7, #12]
 8085548:	f7ff fd9c 	bl	8085084 <HAL_SD_ErrorCallback>
}
 808554c:	bf00      	nop
 808554e:	3710      	adds	r7, #16
 8085550:	46bd      	mov	sp, r7
 8085552:	bd80      	pop	{r7, pc}

08085554 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8085554:	b5b0      	push	{r4, r5, r7, lr}
 8085556:	b094      	sub	sp, #80	; 0x50
 8085558:	af04      	add	r7, sp, #16
 808555a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 808555c:	2301      	movs	r3, #1
 808555e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8085560:	687b      	ldr	r3, [r7, #4]
 8085562:	681b      	ldr	r3, [r3, #0]
 8085564:	4618      	mov	r0, r3
 8085566:	f001 fdb0 	bl	80870ca <SDIO_GetPowerState>
 808556a:	4603      	mov	r3, r0
 808556c:	2b00      	cmp	r3, #0
 808556e:	d102      	bne.n	8085576 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8085570:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8085574:	e0b8      	b.n	80856e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8085576:	687b      	ldr	r3, [r7, #4]
 8085578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808557a:	2b03      	cmp	r3, #3
 808557c:	d02f      	beq.n	80855de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 808557e:	687b      	ldr	r3, [r7, #4]
 8085580:	681b      	ldr	r3, [r3, #0]
 8085582:	4618      	mov	r0, r3
 8085584:	f001 ff97 	bl	80874b6 <SDMMC_CmdSendCID>
 8085588:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 808558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808558c:	2b00      	cmp	r3, #0
 808558e:	d001      	beq.n	8085594 <SD_InitCard+0x40>
    {
      return errorstate;
 8085590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085592:	e0a9      	b.n	80856e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085594:	687b      	ldr	r3, [r7, #4]
 8085596:	681b      	ldr	r3, [r3, #0]
 8085598:	2100      	movs	r1, #0
 808559a:	4618      	mov	r0, r3
 808559c:	f001 fdda 	bl	8087154 <SDIO_GetResponse>
 80855a0:	4602      	mov	r2, r0
 80855a2:	687b      	ldr	r3, [r7, #4]
 80855a4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80855a6:	687b      	ldr	r3, [r7, #4]
 80855a8:	681b      	ldr	r3, [r3, #0]
 80855aa:	2104      	movs	r1, #4
 80855ac:	4618      	mov	r0, r3
 80855ae:	f001 fdd1 	bl	8087154 <SDIO_GetResponse>
 80855b2:	4602      	mov	r2, r0
 80855b4:	687b      	ldr	r3, [r7, #4]
 80855b6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80855b8:	687b      	ldr	r3, [r7, #4]
 80855ba:	681b      	ldr	r3, [r3, #0]
 80855bc:	2108      	movs	r1, #8
 80855be:	4618      	mov	r0, r3
 80855c0:	f001 fdc8 	bl	8087154 <SDIO_GetResponse>
 80855c4:	4602      	mov	r2, r0
 80855c6:	687b      	ldr	r3, [r7, #4]
 80855c8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80855ca:	687b      	ldr	r3, [r7, #4]
 80855cc:	681b      	ldr	r3, [r3, #0]
 80855ce:	210c      	movs	r1, #12
 80855d0:	4618      	mov	r0, r3
 80855d2:	f001 fdbf 	bl	8087154 <SDIO_GetResponse>
 80855d6:	4602      	mov	r2, r0
 80855d8:	687b      	ldr	r3, [r7, #4]
 80855da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80855de:	687b      	ldr	r3, [r7, #4]
 80855e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80855e2:	2b03      	cmp	r3, #3
 80855e4:	d00d      	beq.n	8085602 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80855e6:	687b      	ldr	r3, [r7, #4]
 80855e8:	681b      	ldr	r3, [r3, #0]
 80855ea:	f107 020e 	add.w	r2, r7, #14
 80855ee:	4611      	mov	r1, r2
 80855f0:	4618      	mov	r0, r3
 80855f2:	f001 ff9d 	bl	8087530 <SDMMC_CmdSetRelAdd>
 80855f6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80855f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80855fa:	2b00      	cmp	r3, #0
 80855fc:	d001      	beq.n	8085602 <SD_InitCard+0xae>
    {
      return errorstate;
 80855fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085600:	e072      	b.n	80856e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8085602:	687b      	ldr	r3, [r7, #4]
 8085604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085606:	2b03      	cmp	r3, #3
 8085608:	d036      	beq.n	8085678 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 808560a:	89fb      	ldrh	r3, [r7, #14]
 808560c:	461a      	mov	r2, r3
 808560e:	687b      	ldr	r3, [r7, #4]
 8085610:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8085612:	687b      	ldr	r3, [r7, #4]
 8085614:	681a      	ldr	r2, [r3, #0]
 8085616:	687b      	ldr	r3, [r7, #4]
 8085618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808561a:	041b      	lsls	r3, r3, #16
 808561c:	4619      	mov	r1, r3
 808561e:	4610      	mov	r0, r2
 8085620:	f001 ff67 	bl	80874f2 <SDMMC_CmdSendCSD>
 8085624:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8085626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085628:	2b00      	cmp	r3, #0
 808562a:	d001      	beq.n	8085630 <SD_InitCard+0xdc>
    {
      return errorstate;
 808562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808562e:	e05b      	b.n	80856e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085630:	687b      	ldr	r3, [r7, #4]
 8085632:	681b      	ldr	r3, [r3, #0]
 8085634:	2100      	movs	r1, #0
 8085636:	4618      	mov	r0, r3
 8085638:	f001 fd8c 	bl	8087154 <SDIO_GetResponse>
 808563c:	4602      	mov	r2, r0
 808563e:	687b      	ldr	r3, [r7, #4]
 8085640:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8085642:	687b      	ldr	r3, [r7, #4]
 8085644:	681b      	ldr	r3, [r3, #0]
 8085646:	2104      	movs	r1, #4
 8085648:	4618      	mov	r0, r3
 808564a:	f001 fd83 	bl	8087154 <SDIO_GetResponse>
 808564e:	4602      	mov	r2, r0
 8085650:	687b      	ldr	r3, [r7, #4]
 8085652:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8085654:	687b      	ldr	r3, [r7, #4]
 8085656:	681b      	ldr	r3, [r3, #0]
 8085658:	2108      	movs	r1, #8
 808565a:	4618      	mov	r0, r3
 808565c:	f001 fd7a 	bl	8087154 <SDIO_GetResponse>
 8085660:	4602      	mov	r2, r0
 8085662:	687b      	ldr	r3, [r7, #4]
 8085664:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8085666:	687b      	ldr	r3, [r7, #4]
 8085668:	681b      	ldr	r3, [r3, #0]
 808566a:	210c      	movs	r1, #12
 808566c:	4618      	mov	r0, r3
 808566e:	f001 fd71 	bl	8087154 <SDIO_GetResponse>
 8085672:	4602      	mov	r2, r0
 8085674:	687b      	ldr	r3, [r7, #4]
 8085676:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8085678:	687b      	ldr	r3, [r7, #4]
 808567a:	681b      	ldr	r3, [r3, #0]
 808567c:	2104      	movs	r1, #4
 808567e:	4618      	mov	r0, r3
 8085680:	f001 fd68 	bl	8087154 <SDIO_GetResponse>
 8085684:	4603      	mov	r3, r0
 8085686:	0d1a      	lsrs	r2, r3, #20
 8085688:	687b      	ldr	r3, [r7, #4]
 808568a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 808568c:	f107 0310 	add.w	r3, r7, #16
 8085690:	4619      	mov	r1, r3
 8085692:	6878      	ldr	r0, [r7, #4]
 8085694:	f7ff fd00 	bl	8085098 <HAL_SD_GetCardCSD>
 8085698:	4603      	mov	r3, r0
 808569a:	2b00      	cmp	r3, #0
 808569c:	d002      	beq.n	80856a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808569e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80856a2:	e021      	b.n	80856e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80856a4:	687b      	ldr	r3, [r7, #4]
 80856a6:	6819      	ldr	r1, [r3, #0]
 80856a8:	687b      	ldr	r3, [r7, #4]
 80856aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80856ac:	041b      	lsls	r3, r3, #16
 80856ae:	2200      	movs	r2, #0
 80856b0:	461c      	mov	r4, r3
 80856b2:	4615      	mov	r5, r2
 80856b4:	4622      	mov	r2, r4
 80856b6:	462b      	mov	r3, r5
 80856b8:	4608      	mov	r0, r1
 80856ba:	f001 fe57 	bl	808736c <SDMMC_CmdSelDesel>
 80856be:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80856c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80856c2:	2b00      	cmp	r3, #0
 80856c4:	d001      	beq.n	80856ca <SD_InitCard+0x176>
  {
    return errorstate;
 80856c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80856c8:	e00e      	b.n	80856e8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80856ca:	687b      	ldr	r3, [r7, #4]
 80856cc:	681d      	ldr	r5, [r3, #0]
 80856ce:	687b      	ldr	r3, [r7, #4]
 80856d0:	466c      	mov	r4, sp
 80856d2:	f103 0210 	add.w	r2, r3, #16
 80856d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80856d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80856dc:	3304      	adds	r3, #4
 80856de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80856e0:	4628      	mov	r0, r5
 80856e2:	f001 fc9b 	bl	808701c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80856e6:	2300      	movs	r3, #0
}
 80856e8:	4618      	mov	r0, r3
 80856ea:	3740      	adds	r7, #64	; 0x40
 80856ec:	46bd      	mov	sp, r7
 80856ee:	bdb0      	pop	{r4, r5, r7, pc}

080856f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80856f0:	b580      	push	{r7, lr}
 80856f2:	b086      	sub	sp, #24
 80856f4:	af00      	add	r7, sp, #0
 80856f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80856f8:	2300      	movs	r3, #0
 80856fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80856fc:	2300      	movs	r3, #0
 80856fe:	617b      	str	r3, [r7, #20]
 8085700:	2300      	movs	r3, #0
 8085702:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8085704:	687b      	ldr	r3, [r7, #4]
 8085706:	681b      	ldr	r3, [r3, #0]
 8085708:	4618      	mov	r0, r3
 808570a:	f001 fe52 	bl	80873b2 <SDMMC_CmdGoIdleState>
 808570e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085710:	68fb      	ldr	r3, [r7, #12]
 8085712:	2b00      	cmp	r3, #0
 8085714:	d001      	beq.n	808571a <SD_PowerON+0x2a>
  {
    return errorstate;
 8085716:	68fb      	ldr	r3, [r7, #12]
 8085718:	e072      	b.n	8085800 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 808571a:	687b      	ldr	r3, [r7, #4]
 808571c:	681b      	ldr	r3, [r3, #0]
 808571e:	4618      	mov	r0, r3
 8085720:	f001 fe65 	bl	80873ee <SDMMC_CmdOperCond>
 8085724:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085726:	68fb      	ldr	r3, [r7, #12]
 8085728:	2b00      	cmp	r3, #0
 808572a:	d00d      	beq.n	8085748 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 808572c:	687b      	ldr	r3, [r7, #4]
 808572e:	2200      	movs	r2, #0
 8085730:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8085732:	687b      	ldr	r3, [r7, #4]
 8085734:	681b      	ldr	r3, [r3, #0]
 8085736:	4618      	mov	r0, r3
 8085738:	f001 fe3b 	bl	80873b2 <SDMMC_CmdGoIdleState>
 808573c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 808573e:	68fb      	ldr	r3, [r7, #12]
 8085740:	2b00      	cmp	r3, #0
 8085742:	d004      	beq.n	808574e <SD_PowerON+0x5e>
    {
      return errorstate;
 8085744:	68fb      	ldr	r3, [r7, #12]
 8085746:	e05b      	b.n	8085800 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8085748:	687b      	ldr	r3, [r7, #4]
 808574a:	2201      	movs	r2, #1
 808574c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 808574e:	687b      	ldr	r3, [r7, #4]
 8085750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085752:	2b01      	cmp	r3, #1
 8085754:	d137      	bne.n	80857c6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8085756:	687b      	ldr	r3, [r7, #4]
 8085758:	681b      	ldr	r3, [r3, #0]
 808575a:	2100      	movs	r1, #0
 808575c:	4618      	mov	r0, r3
 808575e:	f001 fe65 	bl	808742c <SDMMC_CmdAppCommand>
 8085762:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085764:	68fb      	ldr	r3, [r7, #12]
 8085766:	2b00      	cmp	r3, #0
 8085768:	d02d      	beq.n	80857c6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808576a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808576e:	e047      	b.n	8085800 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8085770:	687b      	ldr	r3, [r7, #4]
 8085772:	681b      	ldr	r3, [r3, #0]
 8085774:	2100      	movs	r1, #0
 8085776:	4618      	mov	r0, r3
 8085778:	f001 fe58 	bl	808742c <SDMMC_CmdAppCommand>
 808577c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 808577e:	68fb      	ldr	r3, [r7, #12]
 8085780:	2b00      	cmp	r3, #0
 8085782:	d001      	beq.n	8085788 <SD_PowerON+0x98>
    {
      return errorstate;
 8085784:	68fb      	ldr	r3, [r7, #12]
 8085786:	e03b      	b.n	8085800 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8085788:	687b      	ldr	r3, [r7, #4]
 808578a:	681b      	ldr	r3, [r3, #0]
 808578c:	491e      	ldr	r1, [pc, #120]	; (8085808 <SD_PowerON+0x118>)
 808578e:	4618      	mov	r0, r3
 8085790:	f001 fe6e 	bl	8087470 <SDMMC_CmdAppOperCommand>
 8085794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085796:	68fb      	ldr	r3, [r7, #12]
 8085798:	2b00      	cmp	r3, #0
 808579a:	d002      	beq.n	80857a2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 808579c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80857a0:	e02e      	b.n	8085800 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80857a2:	687b      	ldr	r3, [r7, #4]
 80857a4:	681b      	ldr	r3, [r3, #0]
 80857a6:	2100      	movs	r1, #0
 80857a8:	4618      	mov	r0, r3
 80857aa:	f001 fcd3 	bl	8087154 <SDIO_GetResponse>
 80857ae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80857b0:	697b      	ldr	r3, [r7, #20]
 80857b2:	0fdb      	lsrs	r3, r3, #31
 80857b4:	2b01      	cmp	r3, #1
 80857b6:	d101      	bne.n	80857bc <SD_PowerON+0xcc>
 80857b8:	2301      	movs	r3, #1
 80857ba:	e000      	b.n	80857be <SD_PowerON+0xce>
 80857bc:	2300      	movs	r3, #0
 80857be:	613b      	str	r3, [r7, #16]

    count++;
 80857c0:	68bb      	ldr	r3, [r7, #8]
 80857c2:	3301      	adds	r3, #1
 80857c4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80857c6:	68bb      	ldr	r3, [r7, #8]
 80857c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80857cc:	4293      	cmp	r3, r2
 80857ce:	d802      	bhi.n	80857d6 <SD_PowerON+0xe6>
 80857d0:	693b      	ldr	r3, [r7, #16]
 80857d2:	2b00      	cmp	r3, #0
 80857d4:	d0cc      	beq.n	8085770 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80857d6:	68bb      	ldr	r3, [r7, #8]
 80857d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80857dc:	4293      	cmp	r3, r2
 80857de:	d902      	bls.n	80857e6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80857e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80857e4:	e00c      	b.n	8085800 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80857e6:	697b      	ldr	r3, [r7, #20]
 80857e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80857ec:	2b00      	cmp	r3, #0
 80857ee:	d003      	beq.n	80857f8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80857f0:	687b      	ldr	r3, [r7, #4]
 80857f2:	2201      	movs	r2, #1
 80857f4:	645a      	str	r2, [r3, #68]	; 0x44
 80857f6:	e002      	b.n	80857fe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80857f8:	687b      	ldr	r3, [r7, #4]
 80857fa:	2200      	movs	r2, #0
 80857fc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80857fe:	2300      	movs	r3, #0
}
 8085800:	4618      	mov	r0, r3
 8085802:	3718      	adds	r7, #24
 8085804:	46bd      	mov	sp, r7
 8085806:	bd80      	pop	{r7, pc}
 8085808:	c1100000 	.word	0xc1100000

0808580c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 808580c:	b580      	push	{r7, lr}
 808580e:	b084      	sub	sp, #16
 8085810:	af00      	add	r7, sp, #0
 8085812:	6078      	str	r0, [r7, #4]
 8085814:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8085816:	683b      	ldr	r3, [r7, #0]
 8085818:	2b00      	cmp	r3, #0
 808581a:	d102      	bne.n	8085822 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 808581c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8085820:	e018      	b.n	8085854 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8085822:	687b      	ldr	r3, [r7, #4]
 8085824:	681a      	ldr	r2, [r3, #0]
 8085826:	687b      	ldr	r3, [r7, #4]
 8085828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 808582a:	041b      	lsls	r3, r3, #16
 808582c:	4619      	mov	r1, r3
 808582e:	4610      	mov	r0, r2
 8085830:	f001 fe9f 	bl	8087572 <SDMMC_CmdSendStatus>
 8085834:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085836:	68fb      	ldr	r3, [r7, #12]
 8085838:	2b00      	cmp	r3, #0
 808583a:	d001      	beq.n	8085840 <SD_SendStatus+0x34>
  {
    return errorstate;
 808583c:	68fb      	ldr	r3, [r7, #12]
 808583e:	e009      	b.n	8085854 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085840:	687b      	ldr	r3, [r7, #4]
 8085842:	681b      	ldr	r3, [r3, #0]
 8085844:	2100      	movs	r1, #0
 8085846:	4618      	mov	r0, r3
 8085848:	f001 fc84 	bl	8087154 <SDIO_GetResponse>
 808584c:	4602      	mov	r2, r0
 808584e:	683b      	ldr	r3, [r7, #0]
 8085850:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8085852:	2300      	movs	r3, #0
}
 8085854:	4618      	mov	r0, r3
 8085856:	3710      	adds	r7, #16
 8085858:	46bd      	mov	sp, r7
 808585a:	bd80      	pop	{r7, pc}

0808585c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 808585c:	b580      	push	{r7, lr}
 808585e:	b086      	sub	sp, #24
 8085860:	af00      	add	r7, sp, #0
 8085862:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8085864:	687b      	ldr	r3, [r7, #4]
 8085866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085868:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 808586a:	687b      	ldr	r3, [r7, #4]
 808586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808586e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8085870:	693b      	ldr	r3, [r7, #16]
 8085872:	2b00      	cmp	r3, #0
 8085874:	d03f      	beq.n	80858f6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8085876:	2300      	movs	r3, #0
 8085878:	617b      	str	r3, [r7, #20]
 808587a:	e033      	b.n	80858e4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 808587c:	687b      	ldr	r3, [r7, #4]
 808587e:	681b      	ldr	r3, [r3, #0]
 8085880:	4618      	mov	r0, r3
 8085882:	f001 fbf6 	bl	8087072 <SDIO_ReadFIFO>
 8085886:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8085888:	68bb      	ldr	r3, [r7, #8]
 808588a:	b2da      	uxtb	r2, r3
 808588c:	68fb      	ldr	r3, [r7, #12]
 808588e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8085890:	68fb      	ldr	r3, [r7, #12]
 8085892:	3301      	adds	r3, #1
 8085894:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8085896:	693b      	ldr	r3, [r7, #16]
 8085898:	3b01      	subs	r3, #1
 808589a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 808589c:	68bb      	ldr	r3, [r7, #8]
 808589e:	0a1b      	lsrs	r3, r3, #8
 80858a0:	b2da      	uxtb	r2, r3
 80858a2:	68fb      	ldr	r3, [r7, #12]
 80858a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80858a6:	68fb      	ldr	r3, [r7, #12]
 80858a8:	3301      	adds	r3, #1
 80858aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80858ac:	693b      	ldr	r3, [r7, #16]
 80858ae:	3b01      	subs	r3, #1
 80858b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80858b2:	68bb      	ldr	r3, [r7, #8]
 80858b4:	0c1b      	lsrs	r3, r3, #16
 80858b6:	b2da      	uxtb	r2, r3
 80858b8:	68fb      	ldr	r3, [r7, #12]
 80858ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80858bc:	68fb      	ldr	r3, [r7, #12]
 80858be:	3301      	adds	r3, #1
 80858c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80858c2:	693b      	ldr	r3, [r7, #16]
 80858c4:	3b01      	subs	r3, #1
 80858c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80858c8:	68bb      	ldr	r3, [r7, #8]
 80858ca:	0e1b      	lsrs	r3, r3, #24
 80858cc:	b2da      	uxtb	r2, r3
 80858ce:	68fb      	ldr	r3, [r7, #12]
 80858d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80858d2:	68fb      	ldr	r3, [r7, #12]
 80858d4:	3301      	adds	r3, #1
 80858d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80858d8:	693b      	ldr	r3, [r7, #16]
 80858da:	3b01      	subs	r3, #1
 80858dc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80858de:	697b      	ldr	r3, [r7, #20]
 80858e0:	3301      	adds	r3, #1
 80858e2:	617b      	str	r3, [r7, #20]
 80858e4:	697b      	ldr	r3, [r7, #20]
 80858e6:	2b07      	cmp	r3, #7
 80858e8:	d9c8      	bls.n	808587c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80858ea:	687b      	ldr	r3, [r7, #4]
 80858ec:	68fa      	ldr	r2, [r7, #12]
 80858ee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80858f0:	687b      	ldr	r3, [r7, #4]
 80858f2:	693a      	ldr	r2, [r7, #16]
 80858f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80858f6:	bf00      	nop
 80858f8:	3718      	adds	r7, #24
 80858fa:	46bd      	mov	sp, r7
 80858fc:	bd80      	pop	{r7, pc}

080858fe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80858fe:	b580      	push	{r7, lr}
 8085900:	b086      	sub	sp, #24
 8085902:	af00      	add	r7, sp, #0
 8085904:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8085906:	687b      	ldr	r3, [r7, #4]
 8085908:	6a1b      	ldr	r3, [r3, #32]
 808590a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 808590c:	687b      	ldr	r3, [r7, #4]
 808590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8085910:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8085912:	693b      	ldr	r3, [r7, #16]
 8085914:	2b00      	cmp	r3, #0
 8085916:	d043      	beq.n	80859a0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8085918:	2300      	movs	r3, #0
 808591a:	617b      	str	r3, [r7, #20]
 808591c:	e037      	b.n	808598e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 808591e:	68fb      	ldr	r3, [r7, #12]
 8085920:	781b      	ldrb	r3, [r3, #0]
 8085922:	60bb      	str	r3, [r7, #8]
      tmp++;
 8085924:	68fb      	ldr	r3, [r7, #12]
 8085926:	3301      	adds	r3, #1
 8085928:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 808592a:	693b      	ldr	r3, [r7, #16]
 808592c:	3b01      	subs	r3, #1
 808592e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8085930:	68fb      	ldr	r3, [r7, #12]
 8085932:	781b      	ldrb	r3, [r3, #0]
 8085934:	021a      	lsls	r2, r3, #8
 8085936:	68bb      	ldr	r3, [r7, #8]
 8085938:	4313      	orrs	r3, r2
 808593a:	60bb      	str	r3, [r7, #8]
      tmp++;
 808593c:	68fb      	ldr	r3, [r7, #12]
 808593e:	3301      	adds	r3, #1
 8085940:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8085942:	693b      	ldr	r3, [r7, #16]
 8085944:	3b01      	subs	r3, #1
 8085946:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8085948:	68fb      	ldr	r3, [r7, #12]
 808594a:	781b      	ldrb	r3, [r3, #0]
 808594c:	041a      	lsls	r2, r3, #16
 808594e:	68bb      	ldr	r3, [r7, #8]
 8085950:	4313      	orrs	r3, r2
 8085952:	60bb      	str	r3, [r7, #8]
      tmp++;
 8085954:	68fb      	ldr	r3, [r7, #12]
 8085956:	3301      	adds	r3, #1
 8085958:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 808595a:	693b      	ldr	r3, [r7, #16]
 808595c:	3b01      	subs	r3, #1
 808595e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8085960:	68fb      	ldr	r3, [r7, #12]
 8085962:	781b      	ldrb	r3, [r3, #0]
 8085964:	061a      	lsls	r2, r3, #24
 8085966:	68bb      	ldr	r3, [r7, #8]
 8085968:	4313      	orrs	r3, r2
 808596a:	60bb      	str	r3, [r7, #8]
      tmp++;
 808596c:	68fb      	ldr	r3, [r7, #12]
 808596e:	3301      	adds	r3, #1
 8085970:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8085972:	693b      	ldr	r3, [r7, #16]
 8085974:	3b01      	subs	r3, #1
 8085976:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8085978:	687b      	ldr	r3, [r7, #4]
 808597a:	681b      	ldr	r3, [r3, #0]
 808597c:	f107 0208 	add.w	r2, r7, #8
 8085980:	4611      	mov	r1, r2
 8085982:	4618      	mov	r0, r3
 8085984:	f001 fb82 	bl	808708c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8085988:	697b      	ldr	r3, [r7, #20]
 808598a:	3301      	adds	r3, #1
 808598c:	617b      	str	r3, [r7, #20]
 808598e:	697b      	ldr	r3, [r7, #20]
 8085990:	2b07      	cmp	r3, #7
 8085992:	d9c4      	bls.n	808591e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8085994:	687b      	ldr	r3, [r7, #4]
 8085996:	68fa      	ldr	r2, [r7, #12]
 8085998:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 808599a:	687b      	ldr	r3, [r7, #4]
 808599c:	693a      	ldr	r2, [r7, #16]
 808599e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80859a0:	bf00      	nop
 80859a2:	3718      	adds	r7, #24
 80859a4:	46bd      	mov	sp, r7
 80859a6:	bd80      	pop	{r7, pc}

080859a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80859a8:	b580      	push	{r7, lr}
 80859aa:	b082      	sub	sp, #8
 80859ac:	af00      	add	r7, sp, #0
 80859ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80859b0:	687b      	ldr	r3, [r7, #4]
 80859b2:	2b00      	cmp	r3, #0
 80859b4:	d101      	bne.n	80859ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80859b6:	2301      	movs	r3, #1
 80859b8:	e03f      	b.n	8085a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80859ba:	687b      	ldr	r3, [r7, #4]
 80859bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80859c0:	b2db      	uxtb	r3, r3
 80859c2:	2b00      	cmp	r3, #0
 80859c4:	d106      	bne.n	80859d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80859c6:	687b      	ldr	r3, [r7, #4]
 80859c8:	2200      	movs	r2, #0
 80859ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80859ce:	6878      	ldr	r0, [r7, #4]
 80859d0:	f7fc f9d4 	bl	8081d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80859d4:	687b      	ldr	r3, [r7, #4]
 80859d6:	2224      	movs	r2, #36	; 0x24
 80859d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80859dc:	687b      	ldr	r3, [r7, #4]
 80859de:	681b      	ldr	r3, [r3, #0]
 80859e0:	68da      	ldr	r2, [r3, #12]
 80859e2:	687b      	ldr	r3, [r7, #4]
 80859e4:	681b      	ldr	r3, [r3, #0]
 80859e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80859ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80859ec:	6878      	ldr	r0, [r7, #4]
 80859ee:	f001 f8a1 	bl	8086b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80859f2:	687b      	ldr	r3, [r7, #4]
 80859f4:	681b      	ldr	r3, [r3, #0]
 80859f6:	691a      	ldr	r2, [r3, #16]
 80859f8:	687b      	ldr	r3, [r7, #4]
 80859fa:	681b      	ldr	r3, [r3, #0]
 80859fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8085a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8085a02:	687b      	ldr	r3, [r7, #4]
 8085a04:	681b      	ldr	r3, [r3, #0]
 8085a06:	695a      	ldr	r2, [r3, #20]
 8085a08:	687b      	ldr	r3, [r7, #4]
 8085a0a:	681b      	ldr	r3, [r3, #0]
 8085a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8085a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8085a12:	687b      	ldr	r3, [r7, #4]
 8085a14:	681b      	ldr	r3, [r3, #0]
 8085a16:	68da      	ldr	r2, [r3, #12]
 8085a18:	687b      	ldr	r3, [r7, #4]
 8085a1a:	681b      	ldr	r3, [r3, #0]
 8085a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8085a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8085a22:	687b      	ldr	r3, [r7, #4]
 8085a24:	2200      	movs	r2, #0
 8085a26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8085a28:	687b      	ldr	r3, [r7, #4]
 8085a2a:	2220      	movs	r2, #32
 8085a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8085a30:	687b      	ldr	r3, [r7, #4]
 8085a32:	2220      	movs	r2, #32
 8085a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8085a38:	2300      	movs	r3, #0
}
 8085a3a:	4618      	mov	r0, r3
 8085a3c:	3708      	adds	r7, #8
 8085a3e:	46bd      	mov	sp, r7
 8085a40:	bd80      	pop	{r7, pc}

08085a42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8085a42:	b580      	push	{r7, lr}
 8085a44:	b08a      	sub	sp, #40	; 0x28
 8085a46:	af02      	add	r7, sp, #8
 8085a48:	60f8      	str	r0, [r7, #12]
 8085a4a:	60b9      	str	r1, [r7, #8]
 8085a4c:	603b      	str	r3, [r7, #0]
 8085a4e:	4613      	mov	r3, r2
 8085a50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8085a52:	2300      	movs	r3, #0
 8085a54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8085a56:	68fb      	ldr	r3, [r7, #12]
 8085a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8085a5c:	b2db      	uxtb	r3, r3
 8085a5e:	2b20      	cmp	r3, #32
 8085a60:	d17c      	bne.n	8085b5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8085a62:	68bb      	ldr	r3, [r7, #8]
 8085a64:	2b00      	cmp	r3, #0
 8085a66:	d002      	beq.n	8085a6e <HAL_UART_Transmit+0x2c>
 8085a68:	88fb      	ldrh	r3, [r7, #6]
 8085a6a:	2b00      	cmp	r3, #0
 8085a6c:	d101      	bne.n	8085a72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8085a6e:	2301      	movs	r3, #1
 8085a70:	e075      	b.n	8085b5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8085a72:	68fb      	ldr	r3, [r7, #12]
 8085a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085a78:	2b01      	cmp	r3, #1
 8085a7a:	d101      	bne.n	8085a80 <HAL_UART_Transmit+0x3e>
 8085a7c:	2302      	movs	r3, #2
 8085a7e:	e06e      	b.n	8085b5e <HAL_UART_Transmit+0x11c>
 8085a80:	68fb      	ldr	r3, [r7, #12]
 8085a82:	2201      	movs	r2, #1
 8085a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8085a88:	68fb      	ldr	r3, [r7, #12]
 8085a8a:	2200      	movs	r2, #0
 8085a8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8085a8e:	68fb      	ldr	r3, [r7, #12]
 8085a90:	2221      	movs	r2, #33	; 0x21
 8085a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8085a96:	f7fc fd07 	bl	80824a8 <HAL_GetTick>
 8085a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8085a9c:	68fb      	ldr	r3, [r7, #12]
 8085a9e:	88fa      	ldrh	r2, [r7, #6]
 8085aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8085aa2:	68fb      	ldr	r3, [r7, #12]
 8085aa4:	88fa      	ldrh	r2, [r7, #6]
 8085aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8085aa8:	68fb      	ldr	r3, [r7, #12]
 8085aaa:	689b      	ldr	r3, [r3, #8]
 8085aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8085ab0:	d108      	bne.n	8085ac4 <HAL_UART_Transmit+0x82>
 8085ab2:	68fb      	ldr	r3, [r7, #12]
 8085ab4:	691b      	ldr	r3, [r3, #16]
 8085ab6:	2b00      	cmp	r3, #0
 8085ab8:	d104      	bne.n	8085ac4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8085aba:	2300      	movs	r3, #0
 8085abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8085abe:	68bb      	ldr	r3, [r7, #8]
 8085ac0:	61bb      	str	r3, [r7, #24]
 8085ac2:	e003      	b.n	8085acc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8085ac4:	68bb      	ldr	r3, [r7, #8]
 8085ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8085ac8:	2300      	movs	r3, #0
 8085aca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8085acc:	68fb      	ldr	r3, [r7, #12]
 8085ace:	2200      	movs	r2, #0
 8085ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8085ad4:	e02a      	b.n	8085b2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8085ad6:	683b      	ldr	r3, [r7, #0]
 8085ad8:	9300      	str	r3, [sp, #0]
 8085ada:	697b      	ldr	r3, [r7, #20]
 8085adc:	2200      	movs	r2, #0
 8085ade:	2180      	movs	r1, #128	; 0x80
 8085ae0:	68f8      	ldr	r0, [r7, #12]
 8085ae2:	f000 fd1b 	bl	808651c <UART_WaitOnFlagUntilTimeout>
 8085ae6:	4603      	mov	r3, r0
 8085ae8:	2b00      	cmp	r3, #0
 8085aea:	d001      	beq.n	8085af0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8085aec:	2303      	movs	r3, #3
 8085aee:	e036      	b.n	8085b5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8085af0:	69fb      	ldr	r3, [r7, #28]
 8085af2:	2b00      	cmp	r3, #0
 8085af4:	d10b      	bne.n	8085b0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8085af6:	69bb      	ldr	r3, [r7, #24]
 8085af8:	881b      	ldrh	r3, [r3, #0]
 8085afa:	461a      	mov	r2, r3
 8085afc:	68fb      	ldr	r3, [r7, #12]
 8085afe:	681b      	ldr	r3, [r3, #0]
 8085b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8085b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8085b06:	69bb      	ldr	r3, [r7, #24]
 8085b08:	3302      	adds	r3, #2
 8085b0a:	61bb      	str	r3, [r7, #24]
 8085b0c:	e007      	b.n	8085b1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8085b0e:	69fb      	ldr	r3, [r7, #28]
 8085b10:	781a      	ldrb	r2, [r3, #0]
 8085b12:	68fb      	ldr	r3, [r7, #12]
 8085b14:	681b      	ldr	r3, [r3, #0]
 8085b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8085b18:	69fb      	ldr	r3, [r7, #28]
 8085b1a:	3301      	adds	r3, #1
 8085b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8085b1e:	68fb      	ldr	r3, [r7, #12]
 8085b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8085b22:	b29b      	uxth	r3, r3
 8085b24:	3b01      	subs	r3, #1
 8085b26:	b29a      	uxth	r2, r3
 8085b28:	68fb      	ldr	r3, [r7, #12]
 8085b2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8085b2c:	68fb      	ldr	r3, [r7, #12]
 8085b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8085b30:	b29b      	uxth	r3, r3
 8085b32:	2b00      	cmp	r3, #0
 8085b34:	d1cf      	bne.n	8085ad6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8085b36:	683b      	ldr	r3, [r7, #0]
 8085b38:	9300      	str	r3, [sp, #0]
 8085b3a:	697b      	ldr	r3, [r7, #20]
 8085b3c:	2200      	movs	r2, #0
 8085b3e:	2140      	movs	r1, #64	; 0x40
 8085b40:	68f8      	ldr	r0, [r7, #12]
 8085b42:	f000 fceb 	bl	808651c <UART_WaitOnFlagUntilTimeout>
 8085b46:	4603      	mov	r3, r0
 8085b48:	2b00      	cmp	r3, #0
 8085b4a:	d001      	beq.n	8085b50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8085b4c:	2303      	movs	r3, #3
 8085b4e:	e006      	b.n	8085b5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8085b50:	68fb      	ldr	r3, [r7, #12]
 8085b52:	2220      	movs	r2, #32
 8085b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8085b58:	2300      	movs	r3, #0
 8085b5a:	e000      	b.n	8085b5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8085b5c:	2302      	movs	r3, #2
  }
}
 8085b5e:	4618      	mov	r0, r3
 8085b60:	3720      	adds	r7, #32
 8085b62:	46bd      	mov	sp, r7
 8085b64:	bd80      	pop	{r7, pc}

08085b66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8085b66:	b580      	push	{r7, lr}
 8085b68:	b08a      	sub	sp, #40	; 0x28
 8085b6a:	af02      	add	r7, sp, #8
 8085b6c:	60f8      	str	r0, [r7, #12]
 8085b6e:	60b9      	str	r1, [r7, #8]
 8085b70:	603b      	str	r3, [r7, #0]
 8085b72:	4613      	mov	r3, r2
 8085b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8085b76:	2300      	movs	r3, #0
 8085b78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8085b7a:	68fb      	ldr	r3, [r7, #12]
 8085b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8085b80:	b2db      	uxtb	r3, r3
 8085b82:	2b20      	cmp	r3, #32
 8085b84:	f040 808c 	bne.w	8085ca0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8085b88:	68bb      	ldr	r3, [r7, #8]
 8085b8a:	2b00      	cmp	r3, #0
 8085b8c:	d002      	beq.n	8085b94 <HAL_UART_Receive+0x2e>
 8085b8e:	88fb      	ldrh	r3, [r7, #6]
 8085b90:	2b00      	cmp	r3, #0
 8085b92:	d101      	bne.n	8085b98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8085b94:	2301      	movs	r3, #1
 8085b96:	e084      	b.n	8085ca2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8085b98:	68fb      	ldr	r3, [r7, #12]
 8085b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085b9e:	2b01      	cmp	r3, #1
 8085ba0:	d101      	bne.n	8085ba6 <HAL_UART_Receive+0x40>
 8085ba2:	2302      	movs	r3, #2
 8085ba4:	e07d      	b.n	8085ca2 <HAL_UART_Receive+0x13c>
 8085ba6:	68fb      	ldr	r3, [r7, #12]
 8085ba8:	2201      	movs	r2, #1
 8085baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8085bae:	68fb      	ldr	r3, [r7, #12]
 8085bb0:	2200      	movs	r2, #0
 8085bb2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8085bb4:	68fb      	ldr	r3, [r7, #12]
 8085bb6:	2222      	movs	r2, #34	; 0x22
 8085bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8085bbc:	68fb      	ldr	r3, [r7, #12]
 8085bbe:	2200      	movs	r2, #0
 8085bc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8085bc2:	f7fc fc71 	bl	80824a8 <HAL_GetTick>
 8085bc6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8085bc8:	68fb      	ldr	r3, [r7, #12]
 8085bca:	88fa      	ldrh	r2, [r7, #6]
 8085bcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8085bce:	68fb      	ldr	r3, [r7, #12]
 8085bd0:	88fa      	ldrh	r2, [r7, #6]
 8085bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8085bd4:	68fb      	ldr	r3, [r7, #12]
 8085bd6:	689b      	ldr	r3, [r3, #8]
 8085bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8085bdc:	d108      	bne.n	8085bf0 <HAL_UART_Receive+0x8a>
 8085bde:	68fb      	ldr	r3, [r7, #12]
 8085be0:	691b      	ldr	r3, [r3, #16]
 8085be2:	2b00      	cmp	r3, #0
 8085be4:	d104      	bne.n	8085bf0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8085be6:	2300      	movs	r3, #0
 8085be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8085bea:	68bb      	ldr	r3, [r7, #8]
 8085bec:	61bb      	str	r3, [r7, #24]
 8085bee:	e003      	b.n	8085bf8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8085bf0:	68bb      	ldr	r3, [r7, #8]
 8085bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8085bf4:	2300      	movs	r3, #0
 8085bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8085bf8:	68fb      	ldr	r3, [r7, #12]
 8085bfa:	2200      	movs	r2, #0
 8085bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8085c00:	e043      	b.n	8085c8a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8085c02:	683b      	ldr	r3, [r7, #0]
 8085c04:	9300      	str	r3, [sp, #0]
 8085c06:	697b      	ldr	r3, [r7, #20]
 8085c08:	2200      	movs	r2, #0
 8085c0a:	2120      	movs	r1, #32
 8085c0c:	68f8      	ldr	r0, [r7, #12]
 8085c0e:	f000 fc85 	bl	808651c <UART_WaitOnFlagUntilTimeout>
 8085c12:	4603      	mov	r3, r0
 8085c14:	2b00      	cmp	r3, #0
 8085c16:	d001      	beq.n	8085c1c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8085c18:	2303      	movs	r3, #3
 8085c1a:	e042      	b.n	8085ca2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8085c1c:	69fb      	ldr	r3, [r7, #28]
 8085c1e:	2b00      	cmp	r3, #0
 8085c20:	d10c      	bne.n	8085c3c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8085c22:	68fb      	ldr	r3, [r7, #12]
 8085c24:	681b      	ldr	r3, [r3, #0]
 8085c26:	685b      	ldr	r3, [r3, #4]
 8085c28:	b29b      	uxth	r3, r3
 8085c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8085c2e:	b29a      	uxth	r2, r3
 8085c30:	69bb      	ldr	r3, [r7, #24]
 8085c32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8085c34:	69bb      	ldr	r3, [r7, #24]
 8085c36:	3302      	adds	r3, #2
 8085c38:	61bb      	str	r3, [r7, #24]
 8085c3a:	e01f      	b.n	8085c7c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8085c3c:	68fb      	ldr	r3, [r7, #12]
 8085c3e:	689b      	ldr	r3, [r3, #8]
 8085c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8085c44:	d007      	beq.n	8085c56 <HAL_UART_Receive+0xf0>
 8085c46:	68fb      	ldr	r3, [r7, #12]
 8085c48:	689b      	ldr	r3, [r3, #8]
 8085c4a:	2b00      	cmp	r3, #0
 8085c4c:	d10a      	bne.n	8085c64 <HAL_UART_Receive+0xfe>
 8085c4e:	68fb      	ldr	r3, [r7, #12]
 8085c50:	691b      	ldr	r3, [r3, #16]
 8085c52:	2b00      	cmp	r3, #0
 8085c54:	d106      	bne.n	8085c64 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8085c56:	68fb      	ldr	r3, [r7, #12]
 8085c58:	681b      	ldr	r3, [r3, #0]
 8085c5a:	685b      	ldr	r3, [r3, #4]
 8085c5c:	b2da      	uxtb	r2, r3
 8085c5e:	69fb      	ldr	r3, [r7, #28]
 8085c60:	701a      	strb	r2, [r3, #0]
 8085c62:	e008      	b.n	8085c76 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8085c64:	68fb      	ldr	r3, [r7, #12]
 8085c66:	681b      	ldr	r3, [r3, #0]
 8085c68:	685b      	ldr	r3, [r3, #4]
 8085c6a:	b2db      	uxtb	r3, r3
 8085c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8085c70:	b2da      	uxtb	r2, r3
 8085c72:	69fb      	ldr	r3, [r7, #28]
 8085c74:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8085c76:	69fb      	ldr	r3, [r7, #28]
 8085c78:	3301      	adds	r3, #1
 8085c7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8085c7c:	68fb      	ldr	r3, [r7, #12]
 8085c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8085c80:	b29b      	uxth	r3, r3
 8085c82:	3b01      	subs	r3, #1
 8085c84:	b29a      	uxth	r2, r3
 8085c86:	68fb      	ldr	r3, [r7, #12]
 8085c88:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8085c8a:	68fb      	ldr	r3, [r7, #12]
 8085c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8085c8e:	b29b      	uxth	r3, r3
 8085c90:	2b00      	cmp	r3, #0
 8085c92:	d1b6      	bne.n	8085c02 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8085c94:	68fb      	ldr	r3, [r7, #12]
 8085c96:	2220      	movs	r2, #32
 8085c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8085c9c:	2300      	movs	r3, #0
 8085c9e:	e000      	b.n	8085ca2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8085ca0:	2302      	movs	r3, #2
  }
}
 8085ca2:	4618      	mov	r0, r3
 8085ca4:	3720      	adds	r7, #32
 8085ca6:	46bd      	mov	sp, r7
 8085ca8:	bd80      	pop	{r7, pc}

08085caa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8085caa:	b580      	push	{r7, lr}
 8085cac:	b084      	sub	sp, #16
 8085cae:	af00      	add	r7, sp, #0
 8085cb0:	60f8      	str	r0, [r7, #12]
 8085cb2:	60b9      	str	r1, [r7, #8]
 8085cb4:	4613      	mov	r3, r2
 8085cb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8085cb8:	68fb      	ldr	r3, [r7, #12]
 8085cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8085cbe:	b2db      	uxtb	r3, r3
 8085cc0:	2b20      	cmp	r3, #32
 8085cc2:	d11d      	bne.n	8085d00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8085cc4:	68bb      	ldr	r3, [r7, #8]
 8085cc6:	2b00      	cmp	r3, #0
 8085cc8:	d002      	beq.n	8085cd0 <HAL_UART_Receive_IT+0x26>
 8085cca:	88fb      	ldrh	r3, [r7, #6]
 8085ccc:	2b00      	cmp	r3, #0
 8085cce:	d101      	bne.n	8085cd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8085cd0:	2301      	movs	r3, #1
 8085cd2:	e016      	b.n	8085d02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8085cd4:	68fb      	ldr	r3, [r7, #12]
 8085cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085cda:	2b01      	cmp	r3, #1
 8085cdc:	d101      	bne.n	8085ce2 <HAL_UART_Receive_IT+0x38>
 8085cde:	2302      	movs	r3, #2
 8085ce0:	e00f      	b.n	8085d02 <HAL_UART_Receive_IT+0x58>
 8085ce2:	68fb      	ldr	r3, [r7, #12]
 8085ce4:	2201      	movs	r2, #1
 8085ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8085cea:	68fb      	ldr	r3, [r7, #12]
 8085cec:	2200      	movs	r2, #0
 8085cee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8085cf0:	88fb      	ldrh	r3, [r7, #6]
 8085cf2:	461a      	mov	r2, r3
 8085cf4:	68b9      	ldr	r1, [r7, #8]
 8085cf6:	68f8      	ldr	r0, [r7, #12]
 8085cf8:	f000 fc7e 	bl	80865f8 <UART_Start_Receive_IT>
 8085cfc:	4603      	mov	r3, r0
 8085cfe:	e000      	b.n	8085d02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8085d00:	2302      	movs	r3, #2
  }
}
 8085d02:	4618      	mov	r0, r3
 8085d04:	3710      	adds	r7, #16
 8085d06:	46bd      	mov	sp, r7
 8085d08:	bd80      	pop	{r7, pc}

08085d0a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8085d0a:	b580      	push	{r7, lr}
 8085d0c:	b08c      	sub	sp, #48	; 0x30
 8085d0e:	af00      	add	r7, sp, #0
 8085d10:	60f8      	str	r0, [r7, #12]
 8085d12:	60b9      	str	r1, [r7, #8]
 8085d14:	4613      	mov	r3, r2
 8085d16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8085d18:	68fb      	ldr	r3, [r7, #12]
 8085d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8085d1e:	b2db      	uxtb	r3, r3
 8085d20:	2b20      	cmp	r3, #32
 8085d22:	d152      	bne.n	8085dca <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8085d24:	68bb      	ldr	r3, [r7, #8]
 8085d26:	2b00      	cmp	r3, #0
 8085d28:	d002      	beq.n	8085d30 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8085d2a:	88fb      	ldrh	r3, [r7, #6]
 8085d2c:	2b00      	cmp	r3, #0
 8085d2e:	d101      	bne.n	8085d34 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8085d30:	2301      	movs	r3, #1
 8085d32:	e04b      	b.n	8085dcc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8085d34:	68fb      	ldr	r3, [r7, #12]
 8085d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8085d3a:	2b01      	cmp	r3, #1
 8085d3c:	d101      	bne.n	8085d42 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8085d3e:	2302      	movs	r3, #2
 8085d40:	e044      	b.n	8085dcc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8085d42:	68fb      	ldr	r3, [r7, #12]
 8085d44:	2201      	movs	r2, #1
 8085d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8085d4a:	68fb      	ldr	r3, [r7, #12]
 8085d4c:	2201      	movs	r2, #1
 8085d4e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8085d50:	88fb      	ldrh	r3, [r7, #6]
 8085d52:	461a      	mov	r2, r3
 8085d54:	68b9      	ldr	r1, [r7, #8]
 8085d56:	68f8      	ldr	r0, [r7, #12]
 8085d58:	f000 fc8c 	bl	8086674 <UART_Start_Receive_DMA>
 8085d5c:	4603      	mov	r3, r0
 8085d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8085d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8085d66:	2b00      	cmp	r3, #0
 8085d68:	d12c      	bne.n	8085dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8085d6a:	68fb      	ldr	r3, [r7, #12]
 8085d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8085d6e:	2b01      	cmp	r3, #1
 8085d70:	d125      	bne.n	8085dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8085d72:	2300      	movs	r3, #0
 8085d74:	613b      	str	r3, [r7, #16]
 8085d76:	68fb      	ldr	r3, [r7, #12]
 8085d78:	681b      	ldr	r3, [r3, #0]
 8085d7a:	681b      	ldr	r3, [r3, #0]
 8085d7c:	613b      	str	r3, [r7, #16]
 8085d7e:	68fb      	ldr	r3, [r7, #12]
 8085d80:	681b      	ldr	r3, [r3, #0]
 8085d82:	685b      	ldr	r3, [r3, #4]
 8085d84:	613b      	str	r3, [r7, #16]
 8085d86:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8085d88:	68fb      	ldr	r3, [r7, #12]
 8085d8a:	681b      	ldr	r3, [r3, #0]
 8085d8c:	330c      	adds	r3, #12
 8085d8e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8085d90:	69bb      	ldr	r3, [r7, #24]
 8085d92:	e853 3f00 	ldrex	r3, [r3]
 8085d96:	617b      	str	r3, [r7, #20]
   return(result);
 8085d98:	697b      	ldr	r3, [r7, #20]
 8085d9a:	f043 0310 	orr.w	r3, r3, #16
 8085d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8085da0:	68fb      	ldr	r3, [r7, #12]
 8085da2:	681b      	ldr	r3, [r3, #0]
 8085da4:	330c      	adds	r3, #12
 8085da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8085da8:	627a      	str	r2, [r7, #36]	; 0x24
 8085daa:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8085dac:	6a39      	ldr	r1, [r7, #32]
 8085dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8085db0:	e841 2300 	strex	r3, r2, [r1]
 8085db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8085db6:	69fb      	ldr	r3, [r7, #28]
 8085db8:	2b00      	cmp	r3, #0
 8085dba:	d1e5      	bne.n	8085d88 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8085dbc:	e002      	b.n	8085dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8085dbe:	2301      	movs	r3, #1
 8085dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8085dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8085dc8:	e000      	b.n	8085dcc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8085dca:	2302      	movs	r3, #2
  }
}
 8085dcc:	4618      	mov	r0, r3
 8085dce:	3730      	adds	r7, #48	; 0x30
 8085dd0:	46bd      	mov	sp, r7
 8085dd2:	bd80      	pop	{r7, pc}

08085dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8085dd4:	b580      	push	{r7, lr}
 8085dd6:	b0ba      	sub	sp, #232	; 0xe8
 8085dd8:	af00      	add	r7, sp, #0
 8085dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8085ddc:	687b      	ldr	r3, [r7, #4]
 8085dde:	681b      	ldr	r3, [r3, #0]
 8085de0:	681b      	ldr	r3, [r3, #0]
 8085de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8085de6:	687b      	ldr	r3, [r7, #4]
 8085de8:	681b      	ldr	r3, [r3, #0]
 8085dea:	68db      	ldr	r3, [r3, #12]
 8085dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8085df0:	687b      	ldr	r3, [r7, #4]
 8085df2:	681b      	ldr	r3, [r3, #0]
 8085df4:	695b      	ldr	r3, [r3, #20]
 8085df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8085dfa:	2300      	movs	r3, #0
 8085dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8085e00:	2300      	movs	r3, #0
 8085e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8085e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085e0a:	f003 030f 	and.w	r3, r3, #15
 8085e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8085e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8085e16:	2b00      	cmp	r3, #0
 8085e18:	d10f      	bne.n	8085e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8085e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085e1e:	f003 0320 	and.w	r3, r3, #32
 8085e22:	2b00      	cmp	r3, #0
 8085e24:	d009      	beq.n	8085e3a <HAL_UART_IRQHandler+0x66>
 8085e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8085e2a:	f003 0320 	and.w	r3, r3, #32
 8085e2e:	2b00      	cmp	r3, #0
 8085e30:	d003      	beq.n	8085e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8085e32:	6878      	ldr	r0, [r7, #4]
 8085e34:	f000 fdc3 	bl	80869be <UART_Receive_IT>
      return;
 8085e38:	e256      	b.n	80862e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8085e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8085e3e:	2b00      	cmp	r3, #0
 8085e40:	f000 80de 	beq.w	8086000 <HAL_UART_IRQHandler+0x22c>
 8085e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8085e48:	f003 0301 	and.w	r3, r3, #1
 8085e4c:	2b00      	cmp	r3, #0
 8085e4e:	d106      	bne.n	8085e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8085e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8085e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8085e58:	2b00      	cmp	r3, #0
 8085e5a:	f000 80d1 	beq.w	8086000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8085e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085e62:	f003 0301 	and.w	r3, r3, #1
 8085e66:	2b00      	cmp	r3, #0
 8085e68:	d00b      	beq.n	8085e82 <HAL_UART_IRQHandler+0xae>
 8085e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8085e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8085e72:	2b00      	cmp	r3, #0
 8085e74:	d005      	beq.n	8085e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8085e76:	687b      	ldr	r3, [r7, #4]
 8085e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085e7a:	f043 0201 	orr.w	r2, r3, #1
 8085e7e:	687b      	ldr	r3, [r7, #4]
 8085e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8085e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085e86:	f003 0304 	and.w	r3, r3, #4
 8085e8a:	2b00      	cmp	r3, #0
 8085e8c:	d00b      	beq.n	8085ea6 <HAL_UART_IRQHandler+0xd2>
 8085e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8085e92:	f003 0301 	and.w	r3, r3, #1
 8085e96:	2b00      	cmp	r3, #0
 8085e98:	d005      	beq.n	8085ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8085e9a:	687b      	ldr	r3, [r7, #4]
 8085e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085e9e:	f043 0202 	orr.w	r2, r3, #2
 8085ea2:	687b      	ldr	r3, [r7, #4]
 8085ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8085ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085eaa:	f003 0302 	and.w	r3, r3, #2
 8085eae:	2b00      	cmp	r3, #0
 8085eb0:	d00b      	beq.n	8085eca <HAL_UART_IRQHandler+0xf6>
 8085eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8085eb6:	f003 0301 	and.w	r3, r3, #1
 8085eba:	2b00      	cmp	r3, #0
 8085ebc:	d005      	beq.n	8085eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8085ebe:	687b      	ldr	r3, [r7, #4]
 8085ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085ec2:	f043 0204 	orr.w	r2, r3, #4
 8085ec6:	687b      	ldr	r3, [r7, #4]
 8085ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8085eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085ece:	f003 0308 	and.w	r3, r3, #8
 8085ed2:	2b00      	cmp	r3, #0
 8085ed4:	d011      	beq.n	8085efa <HAL_UART_IRQHandler+0x126>
 8085ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8085eda:	f003 0320 	and.w	r3, r3, #32
 8085ede:	2b00      	cmp	r3, #0
 8085ee0:	d105      	bne.n	8085eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8085ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8085ee6:	f003 0301 	and.w	r3, r3, #1
 8085eea:	2b00      	cmp	r3, #0
 8085eec:	d005      	beq.n	8085efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8085eee:	687b      	ldr	r3, [r7, #4]
 8085ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085ef2:	f043 0208 	orr.w	r2, r3, #8
 8085ef6:	687b      	ldr	r3, [r7, #4]
 8085ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8085efa:	687b      	ldr	r3, [r7, #4]
 8085efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085efe:	2b00      	cmp	r3, #0
 8085f00:	f000 81ed 	beq.w	80862de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8085f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8085f08:	f003 0320 	and.w	r3, r3, #32
 8085f0c:	2b00      	cmp	r3, #0
 8085f0e:	d008      	beq.n	8085f22 <HAL_UART_IRQHandler+0x14e>
 8085f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8085f14:	f003 0320 	and.w	r3, r3, #32
 8085f18:	2b00      	cmp	r3, #0
 8085f1a:	d002      	beq.n	8085f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8085f1c:	6878      	ldr	r0, [r7, #4]
 8085f1e:	f000 fd4e 	bl	80869be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8085f22:	687b      	ldr	r3, [r7, #4]
 8085f24:	681b      	ldr	r3, [r3, #0]
 8085f26:	695b      	ldr	r3, [r3, #20]
 8085f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8085f2c:	2b40      	cmp	r3, #64	; 0x40
 8085f2e:	bf0c      	ite	eq
 8085f30:	2301      	moveq	r3, #1
 8085f32:	2300      	movne	r3, #0
 8085f34:	b2db      	uxtb	r3, r3
 8085f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8085f3a:	687b      	ldr	r3, [r7, #4]
 8085f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8085f3e:	f003 0308 	and.w	r3, r3, #8
 8085f42:	2b00      	cmp	r3, #0
 8085f44:	d103      	bne.n	8085f4e <HAL_UART_IRQHandler+0x17a>
 8085f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8085f4a:	2b00      	cmp	r3, #0
 8085f4c:	d04f      	beq.n	8085fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8085f4e:	6878      	ldr	r0, [r7, #4]
 8085f50:	f000 fc56 	bl	8086800 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8085f54:	687b      	ldr	r3, [r7, #4]
 8085f56:	681b      	ldr	r3, [r3, #0]
 8085f58:	695b      	ldr	r3, [r3, #20]
 8085f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8085f5e:	2b40      	cmp	r3, #64	; 0x40
 8085f60:	d141      	bne.n	8085fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8085f62:	687b      	ldr	r3, [r7, #4]
 8085f64:	681b      	ldr	r3, [r3, #0]
 8085f66:	3314      	adds	r3, #20
 8085f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8085f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8085f70:	e853 3f00 	ldrex	r3, [r3]
 8085f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8085f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8085f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8085f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8085f84:	687b      	ldr	r3, [r7, #4]
 8085f86:	681b      	ldr	r3, [r3, #0]
 8085f88:	3314      	adds	r3, #20
 8085f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8085f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8085f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8085f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8085f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8085f9e:	e841 2300 	strex	r3, r2, [r1]
 8085fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8085fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8085faa:	2b00      	cmp	r3, #0
 8085fac:	d1d9      	bne.n	8085f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8085fae:	687b      	ldr	r3, [r7, #4]
 8085fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085fb2:	2b00      	cmp	r3, #0
 8085fb4:	d013      	beq.n	8085fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8085fb6:	687b      	ldr	r3, [r7, #4]
 8085fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085fba:	4a7d      	ldr	r2, [pc, #500]	; (80861b0 <HAL_UART_IRQHandler+0x3dc>)
 8085fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8085fbe:	687b      	ldr	r3, [r7, #4]
 8085fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085fc2:	4618      	mov	r0, r3
 8085fc4:	f7fc fd28 	bl	8082a18 <HAL_DMA_Abort_IT>
 8085fc8:	4603      	mov	r3, r0
 8085fca:	2b00      	cmp	r3, #0
 8085fcc:	d016      	beq.n	8085ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8085fce:	687b      	ldr	r3, [r7, #4]
 8085fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085fd4:	687a      	ldr	r2, [r7, #4]
 8085fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8085fd8:	4610      	mov	r0, r2
 8085fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8085fdc:	e00e      	b.n	8085ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8085fde:	6878      	ldr	r0, [r7, #4]
 8085fe0:	f000 f99a 	bl	8086318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8085fe4:	e00a      	b.n	8085ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8085fe6:	6878      	ldr	r0, [r7, #4]
 8085fe8:	f000 f996 	bl	8086318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8085fec:	e006      	b.n	8085ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8085fee:	6878      	ldr	r0, [r7, #4]
 8085ff0:	f000 f992 	bl	8086318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8085ff4:	687b      	ldr	r3, [r7, #4]
 8085ff6:	2200      	movs	r2, #0
 8085ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8085ffa:	e170      	b.n	80862de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8085ffc:	bf00      	nop
    return;
 8085ffe:	e16e      	b.n	80862de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086000:	687b      	ldr	r3, [r7, #4]
 8086002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086004:	2b01      	cmp	r3, #1
 8086006:	f040 814a 	bne.w	808629e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 808600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 808600e:	f003 0310 	and.w	r3, r3, #16
 8086012:	2b00      	cmp	r3, #0
 8086014:	f000 8143 	beq.w	808629e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8086018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 808601c:	f003 0310 	and.w	r3, r3, #16
 8086020:	2b00      	cmp	r3, #0
 8086022:	f000 813c 	beq.w	808629e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8086026:	2300      	movs	r3, #0
 8086028:	60bb      	str	r3, [r7, #8]
 808602a:	687b      	ldr	r3, [r7, #4]
 808602c:	681b      	ldr	r3, [r3, #0]
 808602e:	681b      	ldr	r3, [r3, #0]
 8086030:	60bb      	str	r3, [r7, #8]
 8086032:	687b      	ldr	r3, [r7, #4]
 8086034:	681b      	ldr	r3, [r3, #0]
 8086036:	685b      	ldr	r3, [r3, #4]
 8086038:	60bb      	str	r3, [r7, #8]
 808603a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 808603c:	687b      	ldr	r3, [r7, #4]
 808603e:	681b      	ldr	r3, [r3, #0]
 8086040:	695b      	ldr	r3, [r3, #20]
 8086042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086046:	2b40      	cmp	r3, #64	; 0x40
 8086048:	f040 80b4 	bne.w	80861b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 808604c:	687b      	ldr	r3, [r7, #4]
 808604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086050:	681b      	ldr	r3, [r3, #0]
 8086052:	685b      	ldr	r3, [r3, #4]
 8086054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8086058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 808605c:	2b00      	cmp	r3, #0
 808605e:	f000 8140 	beq.w	80862e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8086062:	687b      	ldr	r3, [r7, #4]
 8086064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8086066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 808606a:	429a      	cmp	r2, r3
 808606c:	f080 8139 	bcs.w	80862e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8086070:	687b      	ldr	r3, [r7, #4]
 8086072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8086076:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8086078:	687b      	ldr	r3, [r7, #4]
 808607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808607c:	69db      	ldr	r3, [r3, #28]
 808607e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8086082:	f000 8088 	beq.w	8086196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8086086:	687b      	ldr	r3, [r7, #4]
 8086088:	681b      	ldr	r3, [r3, #0]
 808608a:	330c      	adds	r3, #12
 808608c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8086094:	e853 3f00 	ldrex	r3, [r3]
 8086098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 808609c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80860a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80860a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80860a8:	687b      	ldr	r3, [r7, #4]
 80860aa:	681b      	ldr	r3, [r3, #0]
 80860ac:	330c      	adds	r3, #12
 80860ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80860b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80860b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80860ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80860be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80860c2:	e841 2300 	strex	r3, r2, [r1]
 80860c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80860ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80860ce:	2b00      	cmp	r3, #0
 80860d0:	d1d9      	bne.n	8086086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80860d2:	687b      	ldr	r3, [r7, #4]
 80860d4:	681b      	ldr	r3, [r3, #0]
 80860d6:	3314      	adds	r3, #20
 80860d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80860da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80860dc:	e853 3f00 	ldrex	r3, [r3]
 80860e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80860e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80860e4:	f023 0301 	bic.w	r3, r3, #1
 80860e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80860ec:	687b      	ldr	r3, [r7, #4]
 80860ee:	681b      	ldr	r3, [r3, #0]
 80860f0:	3314      	adds	r3, #20
 80860f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80860f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80860fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80860fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80860fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8086102:	e841 2300 	strex	r3, r2, [r1]
 8086106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8086108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 808610a:	2b00      	cmp	r3, #0
 808610c:	d1e1      	bne.n	80860d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 808610e:	687b      	ldr	r3, [r7, #4]
 8086110:	681b      	ldr	r3, [r3, #0]
 8086112:	3314      	adds	r3, #20
 8086114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8086118:	e853 3f00 	ldrex	r3, [r3]
 808611c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 808611e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8086120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8086124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8086128:	687b      	ldr	r3, [r7, #4]
 808612a:	681b      	ldr	r3, [r3, #0]
 808612c:	3314      	adds	r3, #20
 808612e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8086132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8086134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8086138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 808613a:	e841 2300 	strex	r3, r2, [r1]
 808613e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8086140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8086142:	2b00      	cmp	r3, #0
 8086144:	d1e3      	bne.n	808610e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8086146:	687b      	ldr	r3, [r7, #4]
 8086148:	2220      	movs	r2, #32
 808614a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 808614e:	687b      	ldr	r3, [r7, #4]
 8086150:	2200      	movs	r2, #0
 8086152:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086154:	687b      	ldr	r3, [r7, #4]
 8086156:	681b      	ldr	r3, [r3, #0]
 8086158:	330c      	adds	r3, #12
 808615a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 808615e:	e853 3f00 	ldrex	r3, [r3]
 8086162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8086164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086166:	f023 0310 	bic.w	r3, r3, #16
 808616a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 808616e:	687b      	ldr	r3, [r7, #4]
 8086170:	681b      	ldr	r3, [r3, #0]
 8086172:	330c      	adds	r3, #12
 8086174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8086178:	65ba      	str	r2, [r7, #88]	; 0x58
 808617a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808617c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 808617e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8086180:	e841 2300 	strex	r3, r2, [r1]
 8086184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8086186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8086188:	2b00      	cmp	r3, #0
 808618a:	d1e3      	bne.n	8086154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 808618c:	687b      	ldr	r3, [r7, #4]
 808618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086190:	4618      	mov	r0, r3
 8086192:	f7fc fbd1 	bl	8082938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8086196:	687b      	ldr	r3, [r7, #4]
 8086198:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 808619a:	687b      	ldr	r3, [r7, #4]
 808619c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 808619e:	b29b      	uxth	r3, r3
 80861a0:	1ad3      	subs	r3, r2, r3
 80861a2:	b29b      	uxth	r3, r3
 80861a4:	4619      	mov	r1, r3
 80861a6:	6878      	ldr	r0, [r7, #4]
 80861a8:	f7fa fe7c 	bl	8080ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80861ac:	e099      	b.n	80862e2 <HAL_UART_IRQHandler+0x50e>
 80861ae:	bf00      	nop
 80861b0:	080868c7 	.word	0x080868c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80861b4:	687b      	ldr	r3, [r7, #4]
 80861b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80861b8:	687b      	ldr	r3, [r7, #4]
 80861ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80861bc:	b29b      	uxth	r3, r3
 80861be:	1ad3      	subs	r3, r2, r3
 80861c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80861c4:	687b      	ldr	r3, [r7, #4]
 80861c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80861c8:	b29b      	uxth	r3, r3
 80861ca:	2b00      	cmp	r3, #0
 80861cc:	f000 808b 	beq.w	80862e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80861d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80861d4:	2b00      	cmp	r3, #0
 80861d6:	f000 8086 	beq.w	80862e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80861da:	687b      	ldr	r3, [r7, #4]
 80861dc:	681b      	ldr	r3, [r3, #0]
 80861de:	330c      	adds	r3, #12
 80861e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80861e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80861e4:	e853 3f00 	ldrex	r3, [r3]
 80861e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80861ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80861ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80861f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80861f4:	687b      	ldr	r3, [r7, #4]
 80861f6:	681b      	ldr	r3, [r3, #0]
 80861f8:	330c      	adds	r3, #12
 80861fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80861fe:	647a      	str	r2, [r7, #68]	; 0x44
 8086200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8086204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8086206:	e841 2300 	strex	r3, r2, [r1]
 808620a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 808620c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808620e:	2b00      	cmp	r3, #0
 8086210:	d1e3      	bne.n	80861da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086212:	687b      	ldr	r3, [r7, #4]
 8086214:	681b      	ldr	r3, [r3, #0]
 8086216:	3314      	adds	r3, #20
 8086218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808621c:	e853 3f00 	ldrex	r3, [r3]
 8086220:	623b      	str	r3, [r7, #32]
   return(result);
 8086222:	6a3b      	ldr	r3, [r7, #32]
 8086224:	f023 0301 	bic.w	r3, r3, #1
 8086228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 808622c:	687b      	ldr	r3, [r7, #4]
 808622e:	681b      	ldr	r3, [r3, #0]
 8086230:	3314      	adds	r3, #20
 8086232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8086236:	633a      	str	r2, [r7, #48]	; 0x30
 8086238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808623a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 808623c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 808623e:	e841 2300 	strex	r3, r2, [r1]
 8086242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8086244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086246:	2b00      	cmp	r3, #0
 8086248:	d1e3      	bne.n	8086212 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 808624a:	687b      	ldr	r3, [r7, #4]
 808624c:	2220      	movs	r2, #32
 808624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8086252:	687b      	ldr	r3, [r7, #4]
 8086254:	2200      	movs	r2, #0
 8086256:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086258:	687b      	ldr	r3, [r7, #4]
 808625a:	681b      	ldr	r3, [r3, #0]
 808625c:	330c      	adds	r3, #12
 808625e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086260:	693b      	ldr	r3, [r7, #16]
 8086262:	e853 3f00 	ldrex	r3, [r3]
 8086266:	60fb      	str	r3, [r7, #12]
   return(result);
 8086268:	68fb      	ldr	r3, [r7, #12]
 808626a:	f023 0310 	bic.w	r3, r3, #16
 808626e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8086272:	687b      	ldr	r3, [r7, #4]
 8086274:	681b      	ldr	r3, [r3, #0]
 8086276:	330c      	adds	r3, #12
 8086278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 808627c:	61fa      	str	r2, [r7, #28]
 808627e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086280:	69b9      	ldr	r1, [r7, #24]
 8086282:	69fa      	ldr	r2, [r7, #28]
 8086284:	e841 2300 	strex	r3, r2, [r1]
 8086288:	617b      	str	r3, [r7, #20]
   return(result);
 808628a:	697b      	ldr	r3, [r7, #20]
 808628c:	2b00      	cmp	r3, #0
 808628e:	d1e3      	bne.n	8086258 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8086290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8086294:	4619      	mov	r1, r3
 8086296:	6878      	ldr	r0, [r7, #4]
 8086298:	f7fa fe04 	bl	8080ea4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 808629c:	e023      	b.n	80862e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 808629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80862a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80862a6:	2b00      	cmp	r3, #0
 80862a8:	d009      	beq.n	80862be <HAL_UART_IRQHandler+0x4ea>
 80862aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80862ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80862b2:	2b00      	cmp	r3, #0
 80862b4:	d003      	beq.n	80862be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80862b6:	6878      	ldr	r0, [r7, #4]
 80862b8:	f000 fb19 	bl	80868ee <UART_Transmit_IT>
    return;
 80862bc:	e014      	b.n	80862e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80862be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80862c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80862c6:	2b00      	cmp	r3, #0
 80862c8:	d00e      	beq.n	80862e8 <HAL_UART_IRQHandler+0x514>
 80862ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80862ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80862d2:	2b00      	cmp	r3, #0
 80862d4:	d008      	beq.n	80862e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80862d6:	6878      	ldr	r0, [r7, #4]
 80862d8:	f000 fb59 	bl	808698e <UART_EndTransmit_IT>
    return;
 80862dc:	e004      	b.n	80862e8 <HAL_UART_IRQHandler+0x514>
    return;
 80862de:	bf00      	nop
 80862e0:	e002      	b.n	80862e8 <HAL_UART_IRQHandler+0x514>
      return;
 80862e2:	bf00      	nop
 80862e4:	e000      	b.n	80862e8 <HAL_UART_IRQHandler+0x514>
      return;
 80862e6:	bf00      	nop
  }
}
 80862e8:	37e8      	adds	r7, #232	; 0xe8
 80862ea:	46bd      	mov	sp, r7
 80862ec:	bd80      	pop	{r7, pc}
 80862ee:	bf00      	nop

080862f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80862f0:	b480      	push	{r7}
 80862f2:	b083      	sub	sp, #12
 80862f4:	af00      	add	r7, sp, #0
 80862f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80862f8:	bf00      	nop
 80862fa:	370c      	adds	r7, #12
 80862fc:	46bd      	mov	sp, r7
 80862fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086302:	4770      	bx	lr

08086304 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8086304:	b480      	push	{r7}
 8086306:	b083      	sub	sp, #12
 8086308:	af00      	add	r7, sp, #0
 808630a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 808630c:	bf00      	nop
 808630e:	370c      	adds	r7, #12
 8086310:	46bd      	mov	sp, r7
 8086312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086316:	4770      	bx	lr

08086318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8086318:	b480      	push	{r7}
 808631a:	b083      	sub	sp, #12
 808631c:	af00      	add	r7, sp, #0
 808631e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8086320:	bf00      	nop
 8086322:	370c      	adds	r7, #12
 8086324:	46bd      	mov	sp, r7
 8086326:	f85d 7b04 	ldr.w	r7, [sp], #4
 808632a:	4770      	bx	lr

0808632c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 808632c:	b580      	push	{r7, lr}
 808632e:	b09c      	sub	sp, #112	; 0x70
 8086330:	af00      	add	r7, sp, #0
 8086332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086334:	687b      	ldr	r3, [r7, #4]
 8086336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086338:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 808633a:	687b      	ldr	r3, [r7, #4]
 808633c:	681b      	ldr	r3, [r3, #0]
 808633e:	681b      	ldr	r3, [r3, #0]
 8086340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8086344:	2b00      	cmp	r3, #0
 8086346:	d172      	bne.n	808642e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8086348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 808634a:	2200      	movs	r2, #0
 808634c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 808634e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086350:	681b      	ldr	r3, [r3, #0]
 8086352:	330c      	adds	r3, #12
 8086354:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8086358:	e853 3f00 	ldrex	r3, [r3]
 808635c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 808635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8086364:	66bb      	str	r3, [r7, #104]	; 0x68
 8086366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086368:	681b      	ldr	r3, [r3, #0]
 808636a:	330c      	adds	r3, #12
 808636c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 808636e:	65ba      	str	r2, [r7, #88]	; 0x58
 8086370:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8086374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8086376:	e841 2300 	strex	r3, r2, [r1]
 808637a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 808637c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 808637e:	2b00      	cmp	r3, #0
 8086380:	d1e5      	bne.n	808634e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086384:	681b      	ldr	r3, [r3, #0]
 8086386:	3314      	adds	r3, #20
 8086388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808638a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 808638c:	e853 3f00 	ldrex	r3, [r3]
 8086390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8086392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8086394:	f023 0301 	bic.w	r3, r3, #1
 8086398:	667b      	str	r3, [r7, #100]	; 0x64
 808639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 808639c:	681b      	ldr	r3, [r3, #0]
 808639e:	3314      	adds	r3, #20
 80863a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80863a2:	647a      	str	r2, [r7, #68]	; 0x44
 80863a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80863a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80863a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80863aa:	e841 2300 	strex	r3, r2, [r1]
 80863ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80863b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80863b2:	2b00      	cmp	r3, #0
 80863b4:	d1e5      	bne.n	8086382 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80863b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80863b8:	681b      	ldr	r3, [r3, #0]
 80863ba:	3314      	adds	r3, #20
 80863bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80863be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80863c0:	e853 3f00 	ldrex	r3, [r3]
 80863c4:	623b      	str	r3, [r7, #32]
   return(result);
 80863c6:	6a3b      	ldr	r3, [r7, #32]
 80863c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80863cc:	663b      	str	r3, [r7, #96]	; 0x60
 80863ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80863d0:	681b      	ldr	r3, [r3, #0]
 80863d2:	3314      	adds	r3, #20
 80863d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80863d6:	633a      	str	r2, [r7, #48]	; 0x30
 80863d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80863da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80863dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80863de:	e841 2300 	strex	r3, r2, [r1]
 80863e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80863e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80863e6:	2b00      	cmp	r3, #0
 80863e8:	d1e5      	bne.n	80863b6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80863ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80863ec:	2220      	movs	r2, #32
 80863ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80863f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80863f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80863f6:	2b01      	cmp	r3, #1
 80863f8:	d119      	bne.n	808642e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80863fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80863fc:	681b      	ldr	r3, [r3, #0]
 80863fe:	330c      	adds	r3, #12
 8086400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086402:	693b      	ldr	r3, [r7, #16]
 8086404:	e853 3f00 	ldrex	r3, [r3]
 8086408:	60fb      	str	r3, [r7, #12]
   return(result);
 808640a:	68fb      	ldr	r3, [r7, #12]
 808640c:	f023 0310 	bic.w	r3, r3, #16
 8086410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8086412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086414:	681b      	ldr	r3, [r3, #0]
 8086416:	330c      	adds	r3, #12
 8086418:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 808641a:	61fa      	str	r2, [r7, #28]
 808641c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808641e:	69b9      	ldr	r1, [r7, #24]
 8086420:	69fa      	ldr	r2, [r7, #28]
 8086422:	e841 2300 	strex	r3, r2, [r1]
 8086426:	617b      	str	r3, [r7, #20]
   return(result);
 8086428:	697b      	ldr	r3, [r7, #20]
 808642a:	2b00      	cmp	r3, #0
 808642c:	d1e5      	bne.n	80863fa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 808642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086432:	2b01      	cmp	r3, #1
 8086434:	d106      	bne.n	8086444 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8086436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086438:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 808643a:	4619      	mov	r1, r3
 808643c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 808643e:	f7fa fd31 	bl	8080ea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8086442:	e002      	b.n	808644a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8086444:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8086446:	f7fb f9b5 	bl	80817b4 <HAL_UART_RxCpltCallback>
}
 808644a:	bf00      	nop
 808644c:	3770      	adds	r7, #112	; 0x70
 808644e:	46bd      	mov	sp, r7
 8086450:	bd80      	pop	{r7, pc}

08086452 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8086452:	b580      	push	{r7, lr}
 8086454:	b084      	sub	sp, #16
 8086456:	af00      	add	r7, sp, #0
 8086458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808645a:	687b      	ldr	r3, [r7, #4]
 808645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808645e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086460:	68fb      	ldr	r3, [r7, #12]
 8086462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086464:	2b01      	cmp	r3, #1
 8086466:	d108      	bne.n	808647a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8086468:	68fb      	ldr	r3, [r7, #12]
 808646a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 808646c:	085b      	lsrs	r3, r3, #1
 808646e:	b29b      	uxth	r3, r3
 8086470:	4619      	mov	r1, r3
 8086472:	68f8      	ldr	r0, [r7, #12]
 8086474:	f7fa fd16 	bl	8080ea4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8086478:	e002      	b.n	8086480 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 808647a:	68f8      	ldr	r0, [r7, #12]
 808647c:	f7ff ff42 	bl	8086304 <HAL_UART_RxHalfCpltCallback>
}
 8086480:	bf00      	nop
 8086482:	3710      	adds	r7, #16
 8086484:	46bd      	mov	sp, r7
 8086486:	bd80      	pop	{r7, pc}

08086488 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8086488:	b580      	push	{r7, lr}
 808648a:	b084      	sub	sp, #16
 808648c:	af00      	add	r7, sp, #0
 808648e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8086490:	2300      	movs	r3, #0
 8086492:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086494:	687b      	ldr	r3, [r7, #4]
 8086496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086498:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 808649a:	68bb      	ldr	r3, [r7, #8]
 808649c:	681b      	ldr	r3, [r3, #0]
 808649e:	695b      	ldr	r3, [r3, #20]
 80864a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80864a4:	2b80      	cmp	r3, #128	; 0x80
 80864a6:	bf0c      	ite	eq
 80864a8:	2301      	moveq	r3, #1
 80864aa:	2300      	movne	r3, #0
 80864ac:	b2db      	uxtb	r3, r3
 80864ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80864b0:	68bb      	ldr	r3, [r7, #8]
 80864b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80864b6:	b2db      	uxtb	r3, r3
 80864b8:	2b21      	cmp	r3, #33	; 0x21
 80864ba:	d108      	bne.n	80864ce <UART_DMAError+0x46>
 80864bc:	68fb      	ldr	r3, [r7, #12]
 80864be:	2b00      	cmp	r3, #0
 80864c0:	d005      	beq.n	80864ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80864c2:	68bb      	ldr	r3, [r7, #8]
 80864c4:	2200      	movs	r2, #0
 80864c6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80864c8:	68b8      	ldr	r0, [r7, #8]
 80864ca:	f000 f971 	bl	80867b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80864ce:	68bb      	ldr	r3, [r7, #8]
 80864d0:	681b      	ldr	r3, [r3, #0]
 80864d2:	695b      	ldr	r3, [r3, #20]
 80864d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80864d8:	2b40      	cmp	r3, #64	; 0x40
 80864da:	bf0c      	ite	eq
 80864dc:	2301      	moveq	r3, #1
 80864de:	2300      	movne	r3, #0
 80864e0:	b2db      	uxtb	r3, r3
 80864e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80864e4:	68bb      	ldr	r3, [r7, #8]
 80864e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80864ea:	b2db      	uxtb	r3, r3
 80864ec:	2b22      	cmp	r3, #34	; 0x22
 80864ee:	d108      	bne.n	8086502 <UART_DMAError+0x7a>
 80864f0:	68fb      	ldr	r3, [r7, #12]
 80864f2:	2b00      	cmp	r3, #0
 80864f4:	d005      	beq.n	8086502 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80864f6:	68bb      	ldr	r3, [r7, #8]
 80864f8:	2200      	movs	r2, #0
 80864fa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80864fc:	68b8      	ldr	r0, [r7, #8]
 80864fe:	f000 f97f 	bl	8086800 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8086502:	68bb      	ldr	r3, [r7, #8]
 8086504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8086506:	f043 0210 	orr.w	r2, r3, #16
 808650a:	68bb      	ldr	r3, [r7, #8]
 808650c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 808650e:	68b8      	ldr	r0, [r7, #8]
 8086510:	f7ff ff02 	bl	8086318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8086514:	bf00      	nop
 8086516:	3710      	adds	r7, #16
 8086518:	46bd      	mov	sp, r7
 808651a:	bd80      	pop	{r7, pc}

0808651c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 808651c:	b580      	push	{r7, lr}
 808651e:	b090      	sub	sp, #64	; 0x40
 8086520:	af00      	add	r7, sp, #0
 8086522:	60f8      	str	r0, [r7, #12]
 8086524:	60b9      	str	r1, [r7, #8]
 8086526:	603b      	str	r3, [r7, #0]
 8086528:	4613      	mov	r3, r2
 808652a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 808652c:	e050      	b.n	80865d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 808652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8086534:	d04c      	beq.n	80865d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8086536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086538:	2b00      	cmp	r3, #0
 808653a:	d007      	beq.n	808654c <UART_WaitOnFlagUntilTimeout+0x30>
 808653c:	f7fb ffb4 	bl	80824a8 <HAL_GetTick>
 8086540:	4602      	mov	r2, r0
 8086542:	683b      	ldr	r3, [r7, #0]
 8086544:	1ad3      	subs	r3, r2, r3
 8086546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8086548:	429a      	cmp	r2, r3
 808654a:	d241      	bcs.n	80865d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 808654c:	68fb      	ldr	r3, [r7, #12]
 808654e:	681b      	ldr	r3, [r3, #0]
 8086550:	330c      	adds	r3, #12
 8086552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086556:	e853 3f00 	ldrex	r3, [r3]
 808655a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 808655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808655e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8086562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8086564:	68fb      	ldr	r3, [r7, #12]
 8086566:	681b      	ldr	r3, [r3, #0]
 8086568:	330c      	adds	r3, #12
 808656a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 808656c:	637a      	str	r2, [r7, #52]	; 0x34
 808656e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8086572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8086574:	e841 2300 	strex	r3, r2, [r1]
 8086578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 808657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808657c:	2b00      	cmp	r3, #0
 808657e:	d1e5      	bne.n	808654c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086580:	68fb      	ldr	r3, [r7, #12]
 8086582:	681b      	ldr	r3, [r3, #0]
 8086584:	3314      	adds	r3, #20
 8086586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086588:	697b      	ldr	r3, [r7, #20]
 808658a:	e853 3f00 	ldrex	r3, [r3]
 808658e:	613b      	str	r3, [r7, #16]
   return(result);
 8086590:	693b      	ldr	r3, [r7, #16]
 8086592:	f023 0301 	bic.w	r3, r3, #1
 8086596:	63bb      	str	r3, [r7, #56]	; 0x38
 8086598:	68fb      	ldr	r3, [r7, #12]
 808659a:	681b      	ldr	r3, [r3, #0]
 808659c:	3314      	adds	r3, #20
 808659e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80865a0:	623a      	str	r2, [r7, #32]
 80865a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80865a4:	69f9      	ldr	r1, [r7, #28]
 80865a6:	6a3a      	ldr	r2, [r7, #32]
 80865a8:	e841 2300 	strex	r3, r2, [r1]
 80865ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80865ae:	69bb      	ldr	r3, [r7, #24]
 80865b0:	2b00      	cmp	r3, #0
 80865b2:	d1e5      	bne.n	8086580 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80865b4:	68fb      	ldr	r3, [r7, #12]
 80865b6:	2220      	movs	r2, #32
 80865b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80865bc:	68fb      	ldr	r3, [r7, #12]
 80865be:	2220      	movs	r2, #32
 80865c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80865c4:	68fb      	ldr	r3, [r7, #12]
 80865c6:	2200      	movs	r2, #0
 80865c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80865cc:	2303      	movs	r3, #3
 80865ce:	e00f      	b.n	80865f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80865d0:	68fb      	ldr	r3, [r7, #12]
 80865d2:	681b      	ldr	r3, [r3, #0]
 80865d4:	681a      	ldr	r2, [r3, #0]
 80865d6:	68bb      	ldr	r3, [r7, #8]
 80865d8:	4013      	ands	r3, r2
 80865da:	68ba      	ldr	r2, [r7, #8]
 80865dc:	429a      	cmp	r2, r3
 80865de:	bf0c      	ite	eq
 80865e0:	2301      	moveq	r3, #1
 80865e2:	2300      	movne	r3, #0
 80865e4:	b2db      	uxtb	r3, r3
 80865e6:	461a      	mov	r2, r3
 80865e8:	79fb      	ldrb	r3, [r7, #7]
 80865ea:	429a      	cmp	r2, r3
 80865ec:	d09f      	beq.n	808652e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80865ee:	2300      	movs	r3, #0
}
 80865f0:	4618      	mov	r0, r3
 80865f2:	3740      	adds	r7, #64	; 0x40
 80865f4:	46bd      	mov	sp, r7
 80865f6:	bd80      	pop	{r7, pc}

080865f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80865f8:	b480      	push	{r7}
 80865fa:	b085      	sub	sp, #20
 80865fc:	af00      	add	r7, sp, #0
 80865fe:	60f8      	str	r0, [r7, #12]
 8086600:	60b9      	str	r1, [r7, #8]
 8086602:	4613      	mov	r3, r2
 8086604:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8086606:	68fb      	ldr	r3, [r7, #12]
 8086608:	68ba      	ldr	r2, [r7, #8]
 808660a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 808660c:	68fb      	ldr	r3, [r7, #12]
 808660e:	88fa      	ldrh	r2, [r7, #6]
 8086610:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8086612:	68fb      	ldr	r3, [r7, #12]
 8086614:	88fa      	ldrh	r2, [r7, #6]
 8086616:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8086618:	68fb      	ldr	r3, [r7, #12]
 808661a:	2200      	movs	r2, #0
 808661c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 808661e:	68fb      	ldr	r3, [r7, #12]
 8086620:	2222      	movs	r2, #34	; 0x22
 8086622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8086626:	68fb      	ldr	r3, [r7, #12]
 8086628:	2200      	movs	r2, #0
 808662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 808662e:	68fb      	ldr	r3, [r7, #12]
 8086630:	691b      	ldr	r3, [r3, #16]
 8086632:	2b00      	cmp	r3, #0
 8086634:	d007      	beq.n	8086646 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8086636:	68fb      	ldr	r3, [r7, #12]
 8086638:	681b      	ldr	r3, [r3, #0]
 808663a:	68da      	ldr	r2, [r3, #12]
 808663c:	68fb      	ldr	r3, [r7, #12]
 808663e:	681b      	ldr	r3, [r3, #0]
 8086640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8086644:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8086646:	68fb      	ldr	r3, [r7, #12]
 8086648:	681b      	ldr	r3, [r3, #0]
 808664a:	695a      	ldr	r2, [r3, #20]
 808664c:	68fb      	ldr	r3, [r7, #12]
 808664e:	681b      	ldr	r3, [r3, #0]
 8086650:	f042 0201 	orr.w	r2, r2, #1
 8086654:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8086656:	68fb      	ldr	r3, [r7, #12]
 8086658:	681b      	ldr	r3, [r3, #0]
 808665a:	68da      	ldr	r2, [r3, #12]
 808665c:	68fb      	ldr	r3, [r7, #12]
 808665e:	681b      	ldr	r3, [r3, #0]
 8086660:	f042 0220 	orr.w	r2, r2, #32
 8086664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8086666:	2300      	movs	r3, #0
}
 8086668:	4618      	mov	r0, r3
 808666a:	3714      	adds	r7, #20
 808666c:	46bd      	mov	sp, r7
 808666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086672:	4770      	bx	lr

08086674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8086674:	b580      	push	{r7, lr}
 8086676:	b098      	sub	sp, #96	; 0x60
 8086678:	af00      	add	r7, sp, #0
 808667a:	60f8      	str	r0, [r7, #12]
 808667c:	60b9      	str	r1, [r7, #8]
 808667e:	4613      	mov	r3, r2
 8086680:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8086682:	68ba      	ldr	r2, [r7, #8]
 8086684:	68fb      	ldr	r3, [r7, #12]
 8086686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8086688:	68fb      	ldr	r3, [r7, #12]
 808668a:	88fa      	ldrh	r2, [r7, #6]
 808668c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 808668e:	68fb      	ldr	r3, [r7, #12]
 8086690:	2200      	movs	r2, #0
 8086692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8086694:	68fb      	ldr	r3, [r7, #12]
 8086696:	2222      	movs	r2, #34	; 0x22
 8086698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 808669c:	68fb      	ldr	r3, [r7, #12]
 808669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80866a0:	4a40      	ldr	r2, [pc, #256]	; (80867a4 <UART_Start_Receive_DMA+0x130>)
 80866a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80866a4:	68fb      	ldr	r3, [r7, #12]
 80866a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80866a8:	4a3f      	ldr	r2, [pc, #252]	; (80867a8 <UART_Start_Receive_DMA+0x134>)
 80866aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80866ac:	68fb      	ldr	r3, [r7, #12]
 80866ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80866b0:	4a3e      	ldr	r2, [pc, #248]	; (80867ac <UART_Start_Receive_DMA+0x138>)
 80866b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80866b4:	68fb      	ldr	r3, [r7, #12]
 80866b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80866b8:	2200      	movs	r2, #0
 80866ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80866bc:	f107 0308 	add.w	r3, r7, #8
 80866c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80866c2:	68fb      	ldr	r3, [r7, #12]
 80866c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80866c6:	68fb      	ldr	r3, [r7, #12]
 80866c8:	681b      	ldr	r3, [r3, #0]
 80866ca:	3304      	adds	r3, #4
 80866cc:	4619      	mov	r1, r3
 80866ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80866d0:	681a      	ldr	r2, [r3, #0]
 80866d2:	88fb      	ldrh	r3, [r7, #6]
 80866d4:	f7fc f8d8 	bl	8082888 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80866d8:	2300      	movs	r3, #0
 80866da:	613b      	str	r3, [r7, #16]
 80866dc:	68fb      	ldr	r3, [r7, #12]
 80866de:	681b      	ldr	r3, [r3, #0]
 80866e0:	681b      	ldr	r3, [r3, #0]
 80866e2:	613b      	str	r3, [r7, #16]
 80866e4:	68fb      	ldr	r3, [r7, #12]
 80866e6:	681b      	ldr	r3, [r3, #0]
 80866e8:	685b      	ldr	r3, [r3, #4]
 80866ea:	613b      	str	r3, [r7, #16]
 80866ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80866ee:	68fb      	ldr	r3, [r7, #12]
 80866f0:	2200      	movs	r2, #0
 80866f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80866f6:	68fb      	ldr	r3, [r7, #12]
 80866f8:	691b      	ldr	r3, [r3, #16]
 80866fa:	2b00      	cmp	r3, #0
 80866fc:	d019      	beq.n	8086732 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80866fe:	68fb      	ldr	r3, [r7, #12]
 8086700:	681b      	ldr	r3, [r3, #0]
 8086702:	330c      	adds	r3, #12
 8086704:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8086708:	e853 3f00 	ldrex	r3, [r3]
 808670c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 808670e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8086710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8086714:	65bb      	str	r3, [r7, #88]	; 0x58
 8086716:	68fb      	ldr	r3, [r7, #12]
 8086718:	681b      	ldr	r3, [r3, #0]
 808671a:	330c      	adds	r3, #12
 808671c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 808671e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8086720:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086722:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8086724:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8086726:	e841 2300 	strex	r3, r2, [r1]
 808672a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 808672c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 808672e:	2b00      	cmp	r3, #0
 8086730:	d1e5      	bne.n	80866fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086732:	68fb      	ldr	r3, [r7, #12]
 8086734:	681b      	ldr	r3, [r3, #0]
 8086736:	3314      	adds	r3, #20
 8086738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808673c:	e853 3f00 	ldrex	r3, [r3]
 8086740:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8086742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086744:	f043 0301 	orr.w	r3, r3, #1
 8086748:	657b      	str	r3, [r7, #84]	; 0x54
 808674a:	68fb      	ldr	r3, [r7, #12]
 808674c:	681b      	ldr	r3, [r3, #0]
 808674e:	3314      	adds	r3, #20
 8086750:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8086752:	63ba      	str	r2, [r7, #56]	; 0x38
 8086754:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086756:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8086758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808675a:	e841 2300 	strex	r3, r2, [r1]
 808675e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8086760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8086762:	2b00      	cmp	r3, #0
 8086764:	d1e5      	bne.n	8086732 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8086766:	68fb      	ldr	r3, [r7, #12]
 8086768:	681b      	ldr	r3, [r3, #0]
 808676a:	3314      	adds	r3, #20
 808676c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808676e:	69bb      	ldr	r3, [r7, #24]
 8086770:	e853 3f00 	ldrex	r3, [r3]
 8086774:	617b      	str	r3, [r7, #20]
   return(result);
 8086776:	697b      	ldr	r3, [r7, #20]
 8086778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808677c:	653b      	str	r3, [r7, #80]	; 0x50
 808677e:	68fb      	ldr	r3, [r7, #12]
 8086780:	681b      	ldr	r3, [r3, #0]
 8086782:	3314      	adds	r3, #20
 8086784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8086786:	627a      	str	r2, [r7, #36]	; 0x24
 8086788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808678a:	6a39      	ldr	r1, [r7, #32]
 808678c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808678e:	e841 2300 	strex	r3, r2, [r1]
 8086792:	61fb      	str	r3, [r7, #28]
   return(result);
 8086794:	69fb      	ldr	r3, [r7, #28]
 8086796:	2b00      	cmp	r3, #0
 8086798:	d1e5      	bne.n	8086766 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 808679a:	2300      	movs	r3, #0
}
 808679c:	4618      	mov	r0, r3
 808679e:	3760      	adds	r7, #96	; 0x60
 80867a0:	46bd      	mov	sp, r7
 80867a2:	bd80      	pop	{r7, pc}
 80867a4:	0808632d 	.word	0x0808632d
 80867a8:	08086453 	.word	0x08086453
 80867ac:	08086489 	.word	0x08086489

080867b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80867b0:	b480      	push	{r7}
 80867b2:	b089      	sub	sp, #36	; 0x24
 80867b4:	af00      	add	r7, sp, #0
 80867b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80867b8:	687b      	ldr	r3, [r7, #4]
 80867ba:	681b      	ldr	r3, [r3, #0]
 80867bc:	330c      	adds	r3, #12
 80867be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80867c0:	68fb      	ldr	r3, [r7, #12]
 80867c2:	e853 3f00 	ldrex	r3, [r3]
 80867c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80867c8:	68bb      	ldr	r3, [r7, #8]
 80867ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80867ce:	61fb      	str	r3, [r7, #28]
 80867d0:	687b      	ldr	r3, [r7, #4]
 80867d2:	681b      	ldr	r3, [r3, #0]
 80867d4:	330c      	adds	r3, #12
 80867d6:	69fa      	ldr	r2, [r7, #28]
 80867d8:	61ba      	str	r2, [r7, #24]
 80867da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80867dc:	6979      	ldr	r1, [r7, #20]
 80867de:	69ba      	ldr	r2, [r7, #24]
 80867e0:	e841 2300 	strex	r3, r2, [r1]
 80867e4:	613b      	str	r3, [r7, #16]
   return(result);
 80867e6:	693b      	ldr	r3, [r7, #16]
 80867e8:	2b00      	cmp	r3, #0
 80867ea:	d1e5      	bne.n	80867b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80867ec:	687b      	ldr	r3, [r7, #4]
 80867ee:	2220      	movs	r2, #32
 80867f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80867f4:	bf00      	nop
 80867f6:	3724      	adds	r7, #36	; 0x24
 80867f8:	46bd      	mov	sp, r7
 80867fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80867fe:	4770      	bx	lr

08086800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8086800:	b480      	push	{r7}
 8086802:	b095      	sub	sp, #84	; 0x54
 8086804:	af00      	add	r7, sp, #0
 8086806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8086808:	687b      	ldr	r3, [r7, #4]
 808680a:	681b      	ldr	r3, [r3, #0]
 808680c:	330c      	adds	r3, #12
 808680e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8086812:	e853 3f00 	ldrex	r3, [r3]
 8086816:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8086818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808681a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 808681e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8086820:	687b      	ldr	r3, [r7, #4]
 8086822:	681b      	ldr	r3, [r3, #0]
 8086824:	330c      	adds	r3, #12
 8086826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8086828:	643a      	str	r2, [r7, #64]	; 0x40
 808682a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808682c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 808682e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8086830:	e841 2300 	strex	r3, r2, [r1]
 8086834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8086836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8086838:	2b00      	cmp	r3, #0
 808683a:	d1e5      	bne.n	8086808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808683c:	687b      	ldr	r3, [r7, #4]
 808683e:	681b      	ldr	r3, [r3, #0]
 8086840:	3314      	adds	r3, #20
 8086842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086844:	6a3b      	ldr	r3, [r7, #32]
 8086846:	e853 3f00 	ldrex	r3, [r3]
 808684a:	61fb      	str	r3, [r7, #28]
   return(result);
 808684c:	69fb      	ldr	r3, [r7, #28]
 808684e:	f023 0301 	bic.w	r3, r3, #1
 8086852:	64bb      	str	r3, [r7, #72]	; 0x48
 8086854:	687b      	ldr	r3, [r7, #4]
 8086856:	681b      	ldr	r3, [r3, #0]
 8086858:	3314      	adds	r3, #20
 808685a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 808685c:	62fa      	str	r2, [r7, #44]	; 0x2c
 808685e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8086862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8086864:	e841 2300 	strex	r3, r2, [r1]
 8086868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 808686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808686c:	2b00      	cmp	r3, #0
 808686e:	d1e5      	bne.n	808683c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086870:	687b      	ldr	r3, [r7, #4]
 8086872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086874:	2b01      	cmp	r3, #1
 8086876:	d119      	bne.n	80868ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086878:	687b      	ldr	r3, [r7, #4]
 808687a:	681b      	ldr	r3, [r3, #0]
 808687c:	330c      	adds	r3, #12
 808687e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086880:	68fb      	ldr	r3, [r7, #12]
 8086882:	e853 3f00 	ldrex	r3, [r3]
 8086886:	60bb      	str	r3, [r7, #8]
   return(result);
 8086888:	68bb      	ldr	r3, [r7, #8]
 808688a:	f023 0310 	bic.w	r3, r3, #16
 808688e:	647b      	str	r3, [r7, #68]	; 0x44
 8086890:	687b      	ldr	r3, [r7, #4]
 8086892:	681b      	ldr	r3, [r3, #0]
 8086894:	330c      	adds	r3, #12
 8086896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8086898:	61ba      	str	r2, [r7, #24]
 808689a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808689c:	6979      	ldr	r1, [r7, #20]
 808689e:	69ba      	ldr	r2, [r7, #24]
 80868a0:	e841 2300 	strex	r3, r2, [r1]
 80868a4:	613b      	str	r3, [r7, #16]
   return(result);
 80868a6:	693b      	ldr	r3, [r7, #16]
 80868a8:	2b00      	cmp	r3, #0
 80868aa:	d1e5      	bne.n	8086878 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80868ac:	687b      	ldr	r3, [r7, #4]
 80868ae:	2220      	movs	r2, #32
 80868b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80868b4:	687b      	ldr	r3, [r7, #4]
 80868b6:	2200      	movs	r2, #0
 80868b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80868ba:	bf00      	nop
 80868bc:	3754      	adds	r7, #84	; 0x54
 80868be:	46bd      	mov	sp, r7
 80868c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80868c4:	4770      	bx	lr

080868c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80868c6:	b580      	push	{r7, lr}
 80868c8:	b084      	sub	sp, #16
 80868ca:	af00      	add	r7, sp, #0
 80868cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80868ce:	687b      	ldr	r3, [r7, #4]
 80868d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80868d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80868d4:	68fb      	ldr	r3, [r7, #12]
 80868d6:	2200      	movs	r2, #0
 80868d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80868da:	68fb      	ldr	r3, [r7, #12]
 80868dc:	2200      	movs	r2, #0
 80868de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80868e0:	68f8      	ldr	r0, [r7, #12]
 80868e2:	f7ff fd19 	bl	8086318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80868e6:	bf00      	nop
 80868e8:	3710      	adds	r7, #16
 80868ea:	46bd      	mov	sp, r7
 80868ec:	bd80      	pop	{r7, pc}

080868ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80868ee:	b480      	push	{r7}
 80868f0:	b085      	sub	sp, #20
 80868f2:	af00      	add	r7, sp, #0
 80868f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80868f6:	687b      	ldr	r3, [r7, #4]
 80868f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80868fc:	b2db      	uxtb	r3, r3
 80868fe:	2b21      	cmp	r3, #33	; 0x21
 8086900:	d13e      	bne.n	8086980 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8086902:	687b      	ldr	r3, [r7, #4]
 8086904:	689b      	ldr	r3, [r3, #8]
 8086906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808690a:	d114      	bne.n	8086936 <UART_Transmit_IT+0x48>
 808690c:	687b      	ldr	r3, [r7, #4]
 808690e:	691b      	ldr	r3, [r3, #16]
 8086910:	2b00      	cmp	r3, #0
 8086912:	d110      	bne.n	8086936 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8086914:	687b      	ldr	r3, [r7, #4]
 8086916:	6a1b      	ldr	r3, [r3, #32]
 8086918:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 808691a:	68fb      	ldr	r3, [r7, #12]
 808691c:	881b      	ldrh	r3, [r3, #0]
 808691e:	461a      	mov	r2, r3
 8086920:	687b      	ldr	r3, [r7, #4]
 8086922:	681b      	ldr	r3, [r3, #0]
 8086924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8086928:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 808692a:	687b      	ldr	r3, [r7, #4]
 808692c:	6a1b      	ldr	r3, [r3, #32]
 808692e:	1c9a      	adds	r2, r3, #2
 8086930:	687b      	ldr	r3, [r7, #4]
 8086932:	621a      	str	r2, [r3, #32]
 8086934:	e008      	b.n	8086948 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8086936:	687b      	ldr	r3, [r7, #4]
 8086938:	6a1b      	ldr	r3, [r3, #32]
 808693a:	1c59      	adds	r1, r3, #1
 808693c:	687a      	ldr	r2, [r7, #4]
 808693e:	6211      	str	r1, [r2, #32]
 8086940:	781a      	ldrb	r2, [r3, #0]
 8086942:	687b      	ldr	r3, [r7, #4]
 8086944:	681b      	ldr	r3, [r3, #0]
 8086946:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8086948:	687b      	ldr	r3, [r7, #4]
 808694a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 808694c:	b29b      	uxth	r3, r3
 808694e:	3b01      	subs	r3, #1
 8086950:	b29b      	uxth	r3, r3
 8086952:	687a      	ldr	r2, [r7, #4]
 8086954:	4619      	mov	r1, r3
 8086956:	84d1      	strh	r1, [r2, #38]	; 0x26
 8086958:	2b00      	cmp	r3, #0
 808695a:	d10f      	bne.n	808697c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 808695c:	687b      	ldr	r3, [r7, #4]
 808695e:	681b      	ldr	r3, [r3, #0]
 8086960:	68da      	ldr	r2, [r3, #12]
 8086962:	687b      	ldr	r3, [r7, #4]
 8086964:	681b      	ldr	r3, [r3, #0]
 8086966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 808696a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 808696c:	687b      	ldr	r3, [r7, #4]
 808696e:	681b      	ldr	r3, [r3, #0]
 8086970:	68da      	ldr	r2, [r3, #12]
 8086972:	687b      	ldr	r3, [r7, #4]
 8086974:	681b      	ldr	r3, [r3, #0]
 8086976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 808697a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 808697c:	2300      	movs	r3, #0
 808697e:	e000      	b.n	8086982 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8086980:	2302      	movs	r3, #2
  }
}
 8086982:	4618      	mov	r0, r3
 8086984:	3714      	adds	r7, #20
 8086986:	46bd      	mov	sp, r7
 8086988:	f85d 7b04 	ldr.w	r7, [sp], #4
 808698c:	4770      	bx	lr

0808698e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 808698e:	b580      	push	{r7, lr}
 8086990:	b082      	sub	sp, #8
 8086992:	af00      	add	r7, sp, #0
 8086994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8086996:	687b      	ldr	r3, [r7, #4]
 8086998:	681b      	ldr	r3, [r3, #0]
 808699a:	68da      	ldr	r2, [r3, #12]
 808699c:	687b      	ldr	r3, [r7, #4]
 808699e:	681b      	ldr	r3, [r3, #0]
 80869a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80869a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80869a6:	687b      	ldr	r3, [r7, #4]
 80869a8:	2220      	movs	r2, #32
 80869aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80869ae:	6878      	ldr	r0, [r7, #4]
 80869b0:	f7ff fc9e 	bl	80862f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80869b4:	2300      	movs	r3, #0
}
 80869b6:	4618      	mov	r0, r3
 80869b8:	3708      	adds	r7, #8
 80869ba:	46bd      	mov	sp, r7
 80869bc:	bd80      	pop	{r7, pc}

080869be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80869be:	b580      	push	{r7, lr}
 80869c0:	b08c      	sub	sp, #48	; 0x30
 80869c2:	af00      	add	r7, sp, #0
 80869c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80869c6:	687b      	ldr	r3, [r7, #4]
 80869c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80869cc:	b2db      	uxtb	r3, r3
 80869ce:	2b22      	cmp	r3, #34	; 0x22
 80869d0:	f040 80ab 	bne.w	8086b2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80869d4:	687b      	ldr	r3, [r7, #4]
 80869d6:	689b      	ldr	r3, [r3, #8]
 80869d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80869dc:	d117      	bne.n	8086a0e <UART_Receive_IT+0x50>
 80869de:	687b      	ldr	r3, [r7, #4]
 80869e0:	691b      	ldr	r3, [r3, #16]
 80869e2:	2b00      	cmp	r3, #0
 80869e4:	d113      	bne.n	8086a0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80869e6:	2300      	movs	r3, #0
 80869e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80869ea:	687b      	ldr	r3, [r7, #4]
 80869ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80869ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80869f0:	687b      	ldr	r3, [r7, #4]
 80869f2:	681b      	ldr	r3, [r3, #0]
 80869f4:	685b      	ldr	r3, [r3, #4]
 80869f6:	b29b      	uxth	r3, r3
 80869f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80869fc:	b29a      	uxth	r2, r3
 80869fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086a00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8086a02:	687b      	ldr	r3, [r7, #4]
 8086a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086a06:	1c9a      	adds	r2, r3, #2
 8086a08:	687b      	ldr	r3, [r7, #4]
 8086a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8086a0c:	e026      	b.n	8086a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8086a0e:	687b      	ldr	r3, [r7, #4]
 8086a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8086a14:	2300      	movs	r3, #0
 8086a16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8086a18:	687b      	ldr	r3, [r7, #4]
 8086a1a:	689b      	ldr	r3, [r3, #8]
 8086a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8086a20:	d007      	beq.n	8086a32 <UART_Receive_IT+0x74>
 8086a22:	687b      	ldr	r3, [r7, #4]
 8086a24:	689b      	ldr	r3, [r3, #8]
 8086a26:	2b00      	cmp	r3, #0
 8086a28:	d10a      	bne.n	8086a40 <UART_Receive_IT+0x82>
 8086a2a:	687b      	ldr	r3, [r7, #4]
 8086a2c:	691b      	ldr	r3, [r3, #16]
 8086a2e:	2b00      	cmp	r3, #0
 8086a30:	d106      	bne.n	8086a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8086a32:	687b      	ldr	r3, [r7, #4]
 8086a34:	681b      	ldr	r3, [r3, #0]
 8086a36:	685b      	ldr	r3, [r3, #4]
 8086a38:	b2da      	uxtb	r2, r3
 8086a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086a3c:	701a      	strb	r2, [r3, #0]
 8086a3e:	e008      	b.n	8086a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8086a40:	687b      	ldr	r3, [r7, #4]
 8086a42:	681b      	ldr	r3, [r3, #0]
 8086a44:	685b      	ldr	r3, [r3, #4]
 8086a46:	b2db      	uxtb	r3, r3
 8086a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8086a4c:	b2da      	uxtb	r2, r3
 8086a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8086a52:	687b      	ldr	r3, [r7, #4]
 8086a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8086a56:	1c5a      	adds	r2, r3, #1
 8086a58:	687b      	ldr	r3, [r7, #4]
 8086a5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8086a5c:	687b      	ldr	r3, [r7, #4]
 8086a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8086a60:	b29b      	uxth	r3, r3
 8086a62:	3b01      	subs	r3, #1
 8086a64:	b29b      	uxth	r3, r3
 8086a66:	687a      	ldr	r2, [r7, #4]
 8086a68:	4619      	mov	r1, r3
 8086a6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8086a6c:	2b00      	cmp	r3, #0
 8086a6e:	d15a      	bne.n	8086b26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8086a70:	687b      	ldr	r3, [r7, #4]
 8086a72:	681b      	ldr	r3, [r3, #0]
 8086a74:	68da      	ldr	r2, [r3, #12]
 8086a76:	687b      	ldr	r3, [r7, #4]
 8086a78:	681b      	ldr	r3, [r3, #0]
 8086a7a:	f022 0220 	bic.w	r2, r2, #32
 8086a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8086a80:	687b      	ldr	r3, [r7, #4]
 8086a82:	681b      	ldr	r3, [r3, #0]
 8086a84:	68da      	ldr	r2, [r3, #12]
 8086a86:	687b      	ldr	r3, [r7, #4]
 8086a88:	681b      	ldr	r3, [r3, #0]
 8086a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8086a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8086a90:	687b      	ldr	r3, [r7, #4]
 8086a92:	681b      	ldr	r3, [r3, #0]
 8086a94:	695a      	ldr	r2, [r3, #20]
 8086a96:	687b      	ldr	r3, [r7, #4]
 8086a98:	681b      	ldr	r3, [r3, #0]
 8086a9a:	f022 0201 	bic.w	r2, r2, #1
 8086a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8086aa0:	687b      	ldr	r3, [r7, #4]
 8086aa2:	2220      	movs	r2, #32
 8086aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086aa8:	687b      	ldr	r3, [r7, #4]
 8086aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086aac:	2b01      	cmp	r3, #1
 8086aae:	d135      	bne.n	8086b1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8086ab0:	687b      	ldr	r3, [r7, #4]
 8086ab2:	2200      	movs	r2, #0
 8086ab4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086ab6:	687b      	ldr	r3, [r7, #4]
 8086ab8:	681b      	ldr	r3, [r3, #0]
 8086aba:	330c      	adds	r3, #12
 8086abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086abe:	697b      	ldr	r3, [r7, #20]
 8086ac0:	e853 3f00 	ldrex	r3, [r3]
 8086ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8086ac6:	693b      	ldr	r3, [r7, #16]
 8086ac8:	f023 0310 	bic.w	r3, r3, #16
 8086acc:	627b      	str	r3, [r7, #36]	; 0x24
 8086ace:	687b      	ldr	r3, [r7, #4]
 8086ad0:	681b      	ldr	r3, [r3, #0]
 8086ad2:	330c      	adds	r3, #12
 8086ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8086ad6:	623a      	str	r2, [r7, #32]
 8086ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086ada:	69f9      	ldr	r1, [r7, #28]
 8086adc:	6a3a      	ldr	r2, [r7, #32]
 8086ade:	e841 2300 	strex	r3, r2, [r1]
 8086ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8086ae4:	69bb      	ldr	r3, [r7, #24]
 8086ae6:	2b00      	cmp	r3, #0
 8086ae8:	d1e5      	bne.n	8086ab6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8086aea:	687b      	ldr	r3, [r7, #4]
 8086aec:	681b      	ldr	r3, [r3, #0]
 8086aee:	681b      	ldr	r3, [r3, #0]
 8086af0:	f003 0310 	and.w	r3, r3, #16
 8086af4:	2b10      	cmp	r3, #16
 8086af6:	d10a      	bne.n	8086b0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8086af8:	2300      	movs	r3, #0
 8086afa:	60fb      	str	r3, [r7, #12]
 8086afc:	687b      	ldr	r3, [r7, #4]
 8086afe:	681b      	ldr	r3, [r3, #0]
 8086b00:	681b      	ldr	r3, [r3, #0]
 8086b02:	60fb      	str	r3, [r7, #12]
 8086b04:	687b      	ldr	r3, [r7, #4]
 8086b06:	681b      	ldr	r3, [r3, #0]
 8086b08:	685b      	ldr	r3, [r3, #4]
 8086b0a:	60fb      	str	r3, [r7, #12]
 8086b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8086b0e:	687b      	ldr	r3, [r7, #4]
 8086b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8086b12:	4619      	mov	r1, r3
 8086b14:	6878      	ldr	r0, [r7, #4]
 8086b16:	f7fa f9c5 	bl	8080ea4 <HAL_UARTEx_RxEventCallback>
 8086b1a:	e002      	b.n	8086b22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8086b1c:	6878      	ldr	r0, [r7, #4]
 8086b1e:	f7fa fe49 	bl	80817b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8086b22:	2300      	movs	r3, #0
 8086b24:	e002      	b.n	8086b2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8086b26:	2300      	movs	r3, #0
 8086b28:	e000      	b.n	8086b2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8086b2a:	2302      	movs	r3, #2
  }
}
 8086b2c:	4618      	mov	r0, r3
 8086b2e:	3730      	adds	r7, #48	; 0x30
 8086b30:	46bd      	mov	sp, r7
 8086b32:	bd80      	pop	{r7, pc}

08086b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8086b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8086b38:	b0c0      	sub	sp, #256	; 0x100
 8086b3a:	af00      	add	r7, sp, #0
 8086b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8086b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b44:	681b      	ldr	r3, [r3, #0]
 8086b46:	691b      	ldr	r3, [r3, #16]
 8086b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8086b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b50:	68d9      	ldr	r1, [r3, #12]
 8086b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b56:	681a      	ldr	r2, [r3, #0]
 8086b58:	ea40 0301 	orr.w	r3, r0, r1
 8086b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8086b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b62:	689a      	ldr	r2, [r3, #8]
 8086b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b68:	691b      	ldr	r3, [r3, #16]
 8086b6a:	431a      	orrs	r2, r3
 8086b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b70:	695b      	ldr	r3, [r3, #20]
 8086b72:	431a      	orrs	r2, r3
 8086b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b78:	69db      	ldr	r3, [r3, #28]
 8086b7a:	4313      	orrs	r3, r2
 8086b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8086b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b84:	681b      	ldr	r3, [r3, #0]
 8086b86:	68db      	ldr	r3, [r3, #12]
 8086b88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8086b8c:	f021 010c 	bic.w	r1, r1, #12
 8086b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086b94:	681a      	ldr	r2, [r3, #0]
 8086b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8086b9a:	430b      	orrs	r3, r1
 8086b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8086b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086ba2:	681b      	ldr	r3, [r3, #0]
 8086ba4:	695b      	ldr	r3, [r3, #20]
 8086ba6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8086baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086bae:	6999      	ldr	r1, [r3, #24]
 8086bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086bb4:	681a      	ldr	r2, [r3, #0]
 8086bb6:	ea40 0301 	orr.w	r3, r0, r1
 8086bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8086bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086bc0:	681a      	ldr	r2, [r3, #0]
 8086bc2:	4b8f      	ldr	r3, [pc, #572]	; (8086e00 <UART_SetConfig+0x2cc>)
 8086bc4:	429a      	cmp	r2, r3
 8086bc6:	d005      	beq.n	8086bd4 <UART_SetConfig+0xa0>
 8086bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086bcc:	681a      	ldr	r2, [r3, #0]
 8086bce:	4b8d      	ldr	r3, [pc, #564]	; (8086e04 <UART_SetConfig+0x2d0>)
 8086bd0:	429a      	cmp	r2, r3
 8086bd2:	d104      	bne.n	8086bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8086bd4:	f7fc fffe 	bl	8083bd4 <HAL_RCC_GetPCLK2Freq>
 8086bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8086bdc:	e003      	b.n	8086be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8086bde:	f7fc ffe5 	bl	8083bac <HAL_RCC_GetPCLK1Freq>
 8086be2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8086be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086bea:	69db      	ldr	r3, [r3, #28]
 8086bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8086bf0:	f040 810c 	bne.w	8086e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8086bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086bf8:	2200      	movs	r2, #0
 8086bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8086bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8086c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8086c06:	4622      	mov	r2, r4
 8086c08:	462b      	mov	r3, r5
 8086c0a:	1891      	adds	r1, r2, r2
 8086c0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8086c0e:	415b      	adcs	r3, r3
 8086c10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8086c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8086c16:	4621      	mov	r1, r4
 8086c18:	eb12 0801 	adds.w	r8, r2, r1
 8086c1c:	4629      	mov	r1, r5
 8086c1e:	eb43 0901 	adc.w	r9, r3, r1
 8086c22:	f04f 0200 	mov.w	r2, #0
 8086c26:	f04f 0300 	mov.w	r3, #0
 8086c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8086c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8086c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8086c36:	4690      	mov	r8, r2
 8086c38:	4699      	mov	r9, r3
 8086c3a:	4623      	mov	r3, r4
 8086c3c:	eb18 0303 	adds.w	r3, r8, r3
 8086c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8086c44:	462b      	mov	r3, r5
 8086c46:	eb49 0303 	adc.w	r3, r9, r3
 8086c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8086c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086c52:	685b      	ldr	r3, [r3, #4]
 8086c54:	2200      	movs	r2, #0
 8086c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8086c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8086c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8086c62:	460b      	mov	r3, r1
 8086c64:	18db      	adds	r3, r3, r3
 8086c66:	653b      	str	r3, [r7, #80]	; 0x50
 8086c68:	4613      	mov	r3, r2
 8086c6a:	eb42 0303 	adc.w	r3, r2, r3
 8086c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8086c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8086c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8086c78:	f7f9 ff96 	bl	8080ba8 <__aeabi_uldivmod>
 8086c7c:	4602      	mov	r2, r0
 8086c7e:	460b      	mov	r3, r1
 8086c80:	4b61      	ldr	r3, [pc, #388]	; (8086e08 <UART_SetConfig+0x2d4>)
 8086c82:	fba3 2302 	umull	r2, r3, r3, r2
 8086c86:	095b      	lsrs	r3, r3, #5
 8086c88:	011c      	lsls	r4, r3, #4
 8086c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086c8e:	2200      	movs	r2, #0
 8086c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8086c94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8086c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8086c9c:	4642      	mov	r2, r8
 8086c9e:	464b      	mov	r3, r9
 8086ca0:	1891      	adds	r1, r2, r2
 8086ca2:	64b9      	str	r1, [r7, #72]	; 0x48
 8086ca4:	415b      	adcs	r3, r3
 8086ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8086ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8086cac:	4641      	mov	r1, r8
 8086cae:	eb12 0a01 	adds.w	sl, r2, r1
 8086cb2:	4649      	mov	r1, r9
 8086cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8086cb8:	f04f 0200 	mov.w	r2, #0
 8086cbc:	f04f 0300 	mov.w	r3, #0
 8086cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8086cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8086cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8086ccc:	4692      	mov	sl, r2
 8086cce:	469b      	mov	fp, r3
 8086cd0:	4643      	mov	r3, r8
 8086cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8086cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8086cda:	464b      	mov	r3, r9
 8086cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8086ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8086ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086ce8:	685b      	ldr	r3, [r3, #4]
 8086cea:	2200      	movs	r2, #0
 8086cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8086cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8086cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8086cf8:	460b      	mov	r3, r1
 8086cfa:	18db      	adds	r3, r3, r3
 8086cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8086cfe:	4613      	mov	r3, r2
 8086d00:	eb42 0303 	adc.w	r3, r2, r3
 8086d04:	647b      	str	r3, [r7, #68]	; 0x44
 8086d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8086d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8086d0e:	f7f9 ff4b 	bl	8080ba8 <__aeabi_uldivmod>
 8086d12:	4602      	mov	r2, r0
 8086d14:	460b      	mov	r3, r1
 8086d16:	4611      	mov	r1, r2
 8086d18:	4b3b      	ldr	r3, [pc, #236]	; (8086e08 <UART_SetConfig+0x2d4>)
 8086d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8086d1e:	095b      	lsrs	r3, r3, #5
 8086d20:	2264      	movs	r2, #100	; 0x64
 8086d22:	fb02 f303 	mul.w	r3, r2, r3
 8086d26:	1acb      	subs	r3, r1, r3
 8086d28:	00db      	lsls	r3, r3, #3
 8086d2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8086d2e:	4b36      	ldr	r3, [pc, #216]	; (8086e08 <UART_SetConfig+0x2d4>)
 8086d30:	fba3 2302 	umull	r2, r3, r3, r2
 8086d34:	095b      	lsrs	r3, r3, #5
 8086d36:	005b      	lsls	r3, r3, #1
 8086d38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8086d3c:	441c      	add	r4, r3
 8086d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086d42:	2200      	movs	r2, #0
 8086d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8086d48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8086d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8086d50:	4642      	mov	r2, r8
 8086d52:	464b      	mov	r3, r9
 8086d54:	1891      	adds	r1, r2, r2
 8086d56:	63b9      	str	r1, [r7, #56]	; 0x38
 8086d58:	415b      	adcs	r3, r3
 8086d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8086d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8086d60:	4641      	mov	r1, r8
 8086d62:	1851      	adds	r1, r2, r1
 8086d64:	6339      	str	r1, [r7, #48]	; 0x30
 8086d66:	4649      	mov	r1, r9
 8086d68:	414b      	adcs	r3, r1
 8086d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8086d6c:	f04f 0200 	mov.w	r2, #0
 8086d70:	f04f 0300 	mov.w	r3, #0
 8086d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8086d78:	4659      	mov	r1, fp
 8086d7a:	00cb      	lsls	r3, r1, #3
 8086d7c:	4651      	mov	r1, sl
 8086d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8086d82:	4651      	mov	r1, sl
 8086d84:	00ca      	lsls	r2, r1, #3
 8086d86:	4610      	mov	r0, r2
 8086d88:	4619      	mov	r1, r3
 8086d8a:	4603      	mov	r3, r0
 8086d8c:	4642      	mov	r2, r8
 8086d8e:	189b      	adds	r3, r3, r2
 8086d90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8086d94:	464b      	mov	r3, r9
 8086d96:	460a      	mov	r2, r1
 8086d98:	eb42 0303 	adc.w	r3, r2, r3
 8086d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8086da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086da4:	685b      	ldr	r3, [r3, #4]
 8086da6:	2200      	movs	r2, #0
 8086da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8086dac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8086db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8086db4:	460b      	mov	r3, r1
 8086db6:	18db      	adds	r3, r3, r3
 8086db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8086dba:	4613      	mov	r3, r2
 8086dbc:	eb42 0303 	adc.w	r3, r2, r3
 8086dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8086dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8086dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8086dca:	f7f9 feed 	bl	8080ba8 <__aeabi_uldivmod>
 8086dce:	4602      	mov	r2, r0
 8086dd0:	460b      	mov	r3, r1
 8086dd2:	4b0d      	ldr	r3, [pc, #52]	; (8086e08 <UART_SetConfig+0x2d4>)
 8086dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8086dd8:	095b      	lsrs	r3, r3, #5
 8086dda:	2164      	movs	r1, #100	; 0x64
 8086ddc:	fb01 f303 	mul.w	r3, r1, r3
 8086de0:	1ad3      	subs	r3, r2, r3
 8086de2:	00db      	lsls	r3, r3, #3
 8086de4:	3332      	adds	r3, #50	; 0x32
 8086de6:	4a08      	ldr	r2, [pc, #32]	; (8086e08 <UART_SetConfig+0x2d4>)
 8086de8:	fba2 2303 	umull	r2, r3, r2, r3
 8086dec:	095b      	lsrs	r3, r3, #5
 8086dee:	f003 0207 	and.w	r2, r3, #7
 8086df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086df6:	681b      	ldr	r3, [r3, #0]
 8086df8:	4422      	add	r2, r4
 8086dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8086dfc:	e106      	b.n	808700c <UART_SetConfig+0x4d8>
 8086dfe:	bf00      	nop
 8086e00:	40011000 	.word	0x40011000
 8086e04:	40011400 	.word	0x40011400
 8086e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8086e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086e10:	2200      	movs	r2, #0
 8086e12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8086e16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8086e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8086e1e:	4642      	mov	r2, r8
 8086e20:	464b      	mov	r3, r9
 8086e22:	1891      	adds	r1, r2, r2
 8086e24:	6239      	str	r1, [r7, #32]
 8086e26:	415b      	adcs	r3, r3
 8086e28:	627b      	str	r3, [r7, #36]	; 0x24
 8086e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8086e2e:	4641      	mov	r1, r8
 8086e30:	1854      	adds	r4, r2, r1
 8086e32:	4649      	mov	r1, r9
 8086e34:	eb43 0501 	adc.w	r5, r3, r1
 8086e38:	f04f 0200 	mov.w	r2, #0
 8086e3c:	f04f 0300 	mov.w	r3, #0
 8086e40:	00eb      	lsls	r3, r5, #3
 8086e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8086e46:	00e2      	lsls	r2, r4, #3
 8086e48:	4614      	mov	r4, r2
 8086e4a:	461d      	mov	r5, r3
 8086e4c:	4643      	mov	r3, r8
 8086e4e:	18e3      	adds	r3, r4, r3
 8086e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8086e54:	464b      	mov	r3, r9
 8086e56:	eb45 0303 	adc.w	r3, r5, r3
 8086e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8086e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086e62:	685b      	ldr	r3, [r3, #4]
 8086e64:	2200      	movs	r2, #0
 8086e66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8086e6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8086e6e:	f04f 0200 	mov.w	r2, #0
 8086e72:	f04f 0300 	mov.w	r3, #0
 8086e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8086e7a:	4629      	mov	r1, r5
 8086e7c:	008b      	lsls	r3, r1, #2
 8086e7e:	4621      	mov	r1, r4
 8086e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8086e84:	4621      	mov	r1, r4
 8086e86:	008a      	lsls	r2, r1, #2
 8086e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8086e8c:	f7f9 fe8c 	bl	8080ba8 <__aeabi_uldivmod>
 8086e90:	4602      	mov	r2, r0
 8086e92:	460b      	mov	r3, r1
 8086e94:	4b60      	ldr	r3, [pc, #384]	; (8087018 <UART_SetConfig+0x4e4>)
 8086e96:	fba3 2302 	umull	r2, r3, r3, r2
 8086e9a:	095b      	lsrs	r3, r3, #5
 8086e9c:	011c      	lsls	r4, r3, #4
 8086e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086ea2:	2200      	movs	r2, #0
 8086ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8086ea8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8086eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8086eb0:	4642      	mov	r2, r8
 8086eb2:	464b      	mov	r3, r9
 8086eb4:	1891      	adds	r1, r2, r2
 8086eb6:	61b9      	str	r1, [r7, #24]
 8086eb8:	415b      	adcs	r3, r3
 8086eba:	61fb      	str	r3, [r7, #28]
 8086ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8086ec0:	4641      	mov	r1, r8
 8086ec2:	1851      	adds	r1, r2, r1
 8086ec4:	6139      	str	r1, [r7, #16]
 8086ec6:	4649      	mov	r1, r9
 8086ec8:	414b      	adcs	r3, r1
 8086eca:	617b      	str	r3, [r7, #20]
 8086ecc:	f04f 0200 	mov.w	r2, #0
 8086ed0:	f04f 0300 	mov.w	r3, #0
 8086ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8086ed8:	4659      	mov	r1, fp
 8086eda:	00cb      	lsls	r3, r1, #3
 8086edc:	4651      	mov	r1, sl
 8086ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8086ee2:	4651      	mov	r1, sl
 8086ee4:	00ca      	lsls	r2, r1, #3
 8086ee6:	4610      	mov	r0, r2
 8086ee8:	4619      	mov	r1, r3
 8086eea:	4603      	mov	r3, r0
 8086eec:	4642      	mov	r2, r8
 8086eee:	189b      	adds	r3, r3, r2
 8086ef0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8086ef4:	464b      	mov	r3, r9
 8086ef6:	460a      	mov	r2, r1
 8086ef8:	eb42 0303 	adc.w	r3, r2, r3
 8086efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8086f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086f04:	685b      	ldr	r3, [r3, #4]
 8086f06:	2200      	movs	r2, #0
 8086f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8086f0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8086f0c:	f04f 0200 	mov.w	r2, #0
 8086f10:	f04f 0300 	mov.w	r3, #0
 8086f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8086f18:	4649      	mov	r1, r9
 8086f1a:	008b      	lsls	r3, r1, #2
 8086f1c:	4641      	mov	r1, r8
 8086f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8086f22:	4641      	mov	r1, r8
 8086f24:	008a      	lsls	r2, r1, #2
 8086f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8086f2a:	f7f9 fe3d 	bl	8080ba8 <__aeabi_uldivmod>
 8086f2e:	4602      	mov	r2, r0
 8086f30:	460b      	mov	r3, r1
 8086f32:	4611      	mov	r1, r2
 8086f34:	4b38      	ldr	r3, [pc, #224]	; (8087018 <UART_SetConfig+0x4e4>)
 8086f36:	fba3 2301 	umull	r2, r3, r3, r1
 8086f3a:	095b      	lsrs	r3, r3, #5
 8086f3c:	2264      	movs	r2, #100	; 0x64
 8086f3e:	fb02 f303 	mul.w	r3, r2, r3
 8086f42:	1acb      	subs	r3, r1, r3
 8086f44:	011b      	lsls	r3, r3, #4
 8086f46:	3332      	adds	r3, #50	; 0x32
 8086f48:	4a33      	ldr	r2, [pc, #204]	; (8087018 <UART_SetConfig+0x4e4>)
 8086f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8086f4e:	095b      	lsrs	r3, r3, #5
 8086f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8086f54:	441c      	add	r4, r3
 8086f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8086f5a:	2200      	movs	r2, #0
 8086f5c:	673b      	str	r3, [r7, #112]	; 0x70
 8086f5e:	677a      	str	r2, [r7, #116]	; 0x74
 8086f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8086f64:	4642      	mov	r2, r8
 8086f66:	464b      	mov	r3, r9
 8086f68:	1891      	adds	r1, r2, r2
 8086f6a:	60b9      	str	r1, [r7, #8]
 8086f6c:	415b      	adcs	r3, r3
 8086f6e:	60fb      	str	r3, [r7, #12]
 8086f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8086f74:	4641      	mov	r1, r8
 8086f76:	1851      	adds	r1, r2, r1
 8086f78:	6039      	str	r1, [r7, #0]
 8086f7a:	4649      	mov	r1, r9
 8086f7c:	414b      	adcs	r3, r1
 8086f7e:	607b      	str	r3, [r7, #4]
 8086f80:	f04f 0200 	mov.w	r2, #0
 8086f84:	f04f 0300 	mov.w	r3, #0
 8086f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8086f8c:	4659      	mov	r1, fp
 8086f8e:	00cb      	lsls	r3, r1, #3
 8086f90:	4651      	mov	r1, sl
 8086f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8086f96:	4651      	mov	r1, sl
 8086f98:	00ca      	lsls	r2, r1, #3
 8086f9a:	4610      	mov	r0, r2
 8086f9c:	4619      	mov	r1, r3
 8086f9e:	4603      	mov	r3, r0
 8086fa0:	4642      	mov	r2, r8
 8086fa2:	189b      	adds	r3, r3, r2
 8086fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8086fa6:	464b      	mov	r3, r9
 8086fa8:	460a      	mov	r2, r1
 8086faa:	eb42 0303 	adc.w	r3, r2, r3
 8086fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8086fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8086fb4:	685b      	ldr	r3, [r3, #4]
 8086fb6:	2200      	movs	r2, #0
 8086fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8086fba:	667a      	str	r2, [r7, #100]	; 0x64
 8086fbc:	f04f 0200 	mov.w	r2, #0
 8086fc0:	f04f 0300 	mov.w	r3, #0
 8086fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8086fc8:	4649      	mov	r1, r9
 8086fca:	008b      	lsls	r3, r1, #2
 8086fcc:	4641      	mov	r1, r8
 8086fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8086fd2:	4641      	mov	r1, r8
 8086fd4:	008a      	lsls	r2, r1, #2
 8086fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8086fda:	f7f9 fde5 	bl	8080ba8 <__aeabi_uldivmod>
 8086fde:	4602      	mov	r2, r0
 8086fe0:	460b      	mov	r3, r1
 8086fe2:	4b0d      	ldr	r3, [pc, #52]	; (8087018 <UART_SetConfig+0x4e4>)
 8086fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8086fe8:	095b      	lsrs	r3, r3, #5
 8086fea:	2164      	movs	r1, #100	; 0x64
 8086fec:	fb01 f303 	mul.w	r3, r1, r3
 8086ff0:	1ad3      	subs	r3, r2, r3
 8086ff2:	011b      	lsls	r3, r3, #4
 8086ff4:	3332      	adds	r3, #50	; 0x32
 8086ff6:	4a08      	ldr	r2, [pc, #32]	; (8087018 <UART_SetConfig+0x4e4>)
 8086ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8086ffc:	095b      	lsrs	r3, r3, #5
 8086ffe:	f003 020f 	and.w	r2, r3, #15
 8087002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087006:	681b      	ldr	r3, [r3, #0]
 8087008:	4422      	add	r2, r4
 808700a:	609a      	str	r2, [r3, #8]
}
 808700c:	bf00      	nop
 808700e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8087012:	46bd      	mov	sp, r7
 8087014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8087018:	51eb851f 	.word	0x51eb851f

0808701c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 808701c:	b084      	sub	sp, #16
 808701e:	b480      	push	{r7}
 8087020:	b085      	sub	sp, #20
 8087022:	af00      	add	r7, sp, #0
 8087024:	6078      	str	r0, [r7, #4]
 8087026:	f107 001c 	add.w	r0, r7, #28
 808702a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 808702e:	2300      	movs	r3, #0
 8087030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8087032:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8087034:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8087036:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8087038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 808703a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 808703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 808703e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8087040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8087042:	431a      	orrs	r2, r3
             Init.ClockDiv
 8087044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8087046:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8087048:	68fa      	ldr	r2, [r7, #12]
 808704a:	4313      	orrs	r3, r2
 808704c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 808704e:	687b      	ldr	r3, [r7, #4]
 8087050:	685b      	ldr	r3, [r3, #4]
 8087052:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8087056:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 808705a:	68fa      	ldr	r2, [r7, #12]
 808705c:	431a      	orrs	r2, r3
 808705e:	687b      	ldr	r3, [r7, #4]
 8087060:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8087062:	2300      	movs	r3, #0
}
 8087064:	4618      	mov	r0, r3
 8087066:	3714      	adds	r7, #20
 8087068:	46bd      	mov	sp, r7
 808706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808706e:	b004      	add	sp, #16
 8087070:	4770      	bx	lr

08087072 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8087072:	b480      	push	{r7}
 8087074:	b083      	sub	sp, #12
 8087076:	af00      	add	r7, sp, #0
 8087078:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 808707a:	687b      	ldr	r3, [r7, #4]
 808707c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8087080:	4618      	mov	r0, r3
 8087082:	370c      	adds	r7, #12
 8087084:	46bd      	mov	sp, r7
 8087086:	f85d 7b04 	ldr.w	r7, [sp], #4
 808708a:	4770      	bx	lr

0808708c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 808708c:	b480      	push	{r7}
 808708e:	b083      	sub	sp, #12
 8087090:	af00      	add	r7, sp, #0
 8087092:	6078      	str	r0, [r7, #4]
 8087094:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8087096:	683b      	ldr	r3, [r7, #0]
 8087098:	681a      	ldr	r2, [r3, #0]
 808709a:	687b      	ldr	r3, [r7, #4]
 808709c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80870a0:	2300      	movs	r3, #0
}
 80870a2:	4618      	mov	r0, r3
 80870a4:	370c      	adds	r7, #12
 80870a6:	46bd      	mov	sp, r7
 80870a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80870ac:	4770      	bx	lr

080870ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80870ae:	b480      	push	{r7}
 80870b0:	b083      	sub	sp, #12
 80870b2:	af00      	add	r7, sp, #0
 80870b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80870b6:	687b      	ldr	r3, [r7, #4]
 80870b8:	2203      	movs	r2, #3
 80870ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80870bc:	2300      	movs	r3, #0
}
 80870be:	4618      	mov	r0, r3
 80870c0:	370c      	adds	r7, #12
 80870c2:	46bd      	mov	sp, r7
 80870c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80870c8:	4770      	bx	lr

080870ca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80870ca:	b480      	push	{r7}
 80870cc:	b083      	sub	sp, #12
 80870ce:	af00      	add	r7, sp, #0
 80870d0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80870d2:	687b      	ldr	r3, [r7, #4]
 80870d4:	681b      	ldr	r3, [r3, #0]
 80870d6:	f003 0303 	and.w	r3, r3, #3
}
 80870da:	4618      	mov	r0, r3
 80870dc:	370c      	adds	r7, #12
 80870de:	46bd      	mov	sp, r7
 80870e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80870e4:	4770      	bx	lr

080870e6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80870e6:	b480      	push	{r7}
 80870e8:	b085      	sub	sp, #20
 80870ea:	af00      	add	r7, sp, #0
 80870ec:	6078      	str	r0, [r7, #4]
 80870ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80870f0:	2300      	movs	r3, #0
 80870f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80870f4:	683b      	ldr	r3, [r7, #0]
 80870f6:	681a      	ldr	r2, [r3, #0]
 80870f8:	687b      	ldr	r3, [r7, #4]
 80870fa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80870fc:	683b      	ldr	r3, [r7, #0]
 80870fe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8087100:	683b      	ldr	r3, [r7, #0]
 8087102:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8087104:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8087106:	683b      	ldr	r3, [r7, #0]
 8087108:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 808710a:	431a      	orrs	r2, r3
                       Command->CPSM);
 808710c:	683b      	ldr	r3, [r7, #0]
 808710e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8087110:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8087112:	68fa      	ldr	r2, [r7, #12]
 8087114:	4313      	orrs	r3, r2
 8087116:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8087118:	687b      	ldr	r3, [r7, #4]
 808711a:	68db      	ldr	r3, [r3, #12]
 808711c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8087120:	f023 030f 	bic.w	r3, r3, #15
 8087124:	68fa      	ldr	r2, [r7, #12]
 8087126:	431a      	orrs	r2, r3
 8087128:	687b      	ldr	r3, [r7, #4]
 808712a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 808712c:	2300      	movs	r3, #0
}
 808712e:	4618      	mov	r0, r3
 8087130:	3714      	adds	r7, #20
 8087132:	46bd      	mov	sp, r7
 8087134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087138:	4770      	bx	lr

0808713a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 808713a:	b480      	push	{r7}
 808713c:	b083      	sub	sp, #12
 808713e:	af00      	add	r7, sp, #0
 8087140:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8087142:	687b      	ldr	r3, [r7, #4]
 8087144:	691b      	ldr	r3, [r3, #16]
 8087146:	b2db      	uxtb	r3, r3
}
 8087148:	4618      	mov	r0, r3
 808714a:	370c      	adds	r7, #12
 808714c:	46bd      	mov	sp, r7
 808714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087152:	4770      	bx	lr

08087154 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8087154:	b480      	push	{r7}
 8087156:	b085      	sub	sp, #20
 8087158:	af00      	add	r7, sp, #0
 808715a:	6078      	str	r0, [r7, #4]
 808715c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 808715e:	687b      	ldr	r3, [r7, #4]
 8087160:	3314      	adds	r3, #20
 8087162:	461a      	mov	r2, r3
 8087164:	683b      	ldr	r3, [r7, #0]
 8087166:	4413      	add	r3, r2
 8087168:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 808716a:	68fb      	ldr	r3, [r7, #12]
 808716c:	681b      	ldr	r3, [r3, #0]
}  
 808716e:	4618      	mov	r0, r3
 8087170:	3714      	adds	r7, #20
 8087172:	46bd      	mov	sp, r7
 8087174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087178:	4770      	bx	lr

0808717a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 808717a:	b480      	push	{r7}
 808717c:	b085      	sub	sp, #20
 808717e:	af00      	add	r7, sp, #0
 8087180:	6078      	str	r0, [r7, #4]
 8087182:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8087184:	2300      	movs	r3, #0
 8087186:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8087188:	683b      	ldr	r3, [r7, #0]
 808718a:	681a      	ldr	r2, [r3, #0]
 808718c:	687b      	ldr	r3, [r7, #4]
 808718e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8087190:	683b      	ldr	r3, [r7, #0]
 8087192:	685a      	ldr	r2, [r3, #4]
 8087194:	687b      	ldr	r3, [r7, #4]
 8087196:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8087198:	683b      	ldr	r3, [r7, #0]
 808719a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 808719c:	683b      	ldr	r3, [r7, #0]
 808719e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80871a0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80871a2:	683b      	ldr	r3, [r7, #0]
 80871a4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80871a6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80871a8:	683b      	ldr	r3, [r7, #0]
 80871aa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80871ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80871ae:	68fa      	ldr	r2, [r7, #12]
 80871b0:	4313      	orrs	r3, r2
 80871b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80871b4:	687b      	ldr	r3, [r7, #4]
 80871b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80871b8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80871bc:	68fb      	ldr	r3, [r7, #12]
 80871be:	431a      	orrs	r2, r3
 80871c0:	687b      	ldr	r3, [r7, #4]
 80871c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80871c4:	2300      	movs	r3, #0

}
 80871c6:	4618      	mov	r0, r3
 80871c8:	3714      	adds	r7, #20
 80871ca:	46bd      	mov	sp, r7
 80871cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80871d0:	4770      	bx	lr

080871d2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80871d2:	b580      	push	{r7, lr}
 80871d4:	b088      	sub	sp, #32
 80871d6:	af00      	add	r7, sp, #0
 80871d8:	6078      	str	r0, [r7, #4]
 80871da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80871dc:	683b      	ldr	r3, [r7, #0]
 80871de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80871e0:	2310      	movs	r3, #16
 80871e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80871e4:	2340      	movs	r3, #64	; 0x40
 80871e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80871e8:	2300      	movs	r3, #0
 80871ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80871ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80871f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80871f2:	f107 0308 	add.w	r3, r7, #8
 80871f6:	4619      	mov	r1, r3
 80871f8:	6878      	ldr	r0, [r7, #4]
 80871fa:	f7ff ff74 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80871fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8087202:	2110      	movs	r1, #16
 8087204:	6878      	ldr	r0, [r7, #4]
 8087206:	f000 f9d7 	bl	80875b8 <SDMMC_GetCmdResp1>
 808720a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 808720c:	69fb      	ldr	r3, [r7, #28]
}
 808720e:	4618      	mov	r0, r3
 8087210:	3720      	adds	r7, #32
 8087212:	46bd      	mov	sp, r7
 8087214:	bd80      	pop	{r7, pc}

08087216 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8087216:	b580      	push	{r7, lr}
 8087218:	b088      	sub	sp, #32
 808721a:	af00      	add	r7, sp, #0
 808721c:	6078      	str	r0, [r7, #4]
 808721e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8087220:	683b      	ldr	r3, [r7, #0]
 8087222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8087224:	2311      	movs	r3, #17
 8087226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087228:	2340      	movs	r3, #64	; 0x40
 808722a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 808722c:	2300      	movs	r3, #0
 808722e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087234:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087236:	f107 0308 	add.w	r3, r7, #8
 808723a:	4619      	mov	r1, r3
 808723c:	6878      	ldr	r0, [r7, #4]
 808723e:	f7ff ff52 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8087242:	f241 3288 	movw	r2, #5000	; 0x1388
 8087246:	2111      	movs	r1, #17
 8087248:	6878      	ldr	r0, [r7, #4]
 808724a:	f000 f9b5 	bl	80875b8 <SDMMC_GetCmdResp1>
 808724e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087250:	69fb      	ldr	r3, [r7, #28]
}
 8087252:	4618      	mov	r0, r3
 8087254:	3720      	adds	r7, #32
 8087256:	46bd      	mov	sp, r7
 8087258:	bd80      	pop	{r7, pc}

0808725a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 808725a:	b580      	push	{r7, lr}
 808725c:	b088      	sub	sp, #32
 808725e:	af00      	add	r7, sp, #0
 8087260:	6078      	str	r0, [r7, #4]
 8087262:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8087264:	683b      	ldr	r3, [r7, #0]
 8087266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8087268:	2312      	movs	r3, #18
 808726a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 808726c:	2340      	movs	r3, #64	; 0x40
 808726e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087270:	2300      	movs	r3, #0
 8087272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087278:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 808727a:	f107 0308 	add.w	r3, r7, #8
 808727e:	4619      	mov	r1, r3
 8087280:	6878      	ldr	r0, [r7, #4]
 8087282:	f7ff ff30 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8087286:	f241 3288 	movw	r2, #5000	; 0x1388
 808728a:	2112      	movs	r1, #18
 808728c:	6878      	ldr	r0, [r7, #4]
 808728e:	f000 f993 	bl	80875b8 <SDMMC_GetCmdResp1>
 8087292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087294:	69fb      	ldr	r3, [r7, #28]
}
 8087296:	4618      	mov	r0, r3
 8087298:	3720      	adds	r7, #32
 808729a:	46bd      	mov	sp, r7
 808729c:	bd80      	pop	{r7, pc}

0808729e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 808729e:	b580      	push	{r7, lr}
 80872a0:	b088      	sub	sp, #32
 80872a2:	af00      	add	r7, sp, #0
 80872a4:	6078      	str	r0, [r7, #4]
 80872a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80872a8:	683b      	ldr	r3, [r7, #0]
 80872aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80872ac:	2318      	movs	r3, #24
 80872ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80872b0:	2340      	movs	r3, #64	; 0x40
 80872b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80872b4:	2300      	movs	r3, #0
 80872b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80872b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80872bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80872be:	f107 0308 	add.w	r3, r7, #8
 80872c2:	4619      	mov	r1, r3
 80872c4:	6878      	ldr	r0, [r7, #4]
 80872c6:	f7ff ff0e 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80872ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80872ce:	2118      	movs	r1, #24
 80872d0:	6878      	ldr	r0, [r7, #4]
 80872d2:	f000 f971 	bl	80875b8 <SDMMC_GetCmdResp1>
 80872d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80872d8:	69fb      	ldr	r3, [r7, #28]
}
 80872da:	4618      	mov	r0, r3
 80872dc:	3720      	adds	r7, #32
 80872de:	46bd      	mov	sp, r7
 80872e0:	bd80      	pop	{r7, pc}

080872e2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80872e2:	b580      	push	{r7, lr}
 80872e4:	b088      	sub	sp, #32
 80872e6:	af00      	add	r7, sp, #0
 80872e8:	6078      	str	r0, [r7, #4]
 80872ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80872ec:	683b      	ldr	r3, [r7, #0]
 80872ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80872f0:	2319      	movs	r3, #25
 80872f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80872f4:	2340      	movs	r3, #64	; 0x40
 80872f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80872f8:	2300      	movs	r3, #0
 80872fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80872fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087300:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087302:	f107 0308 	add.w	r3, r7, #8
 8087306:	4619      	mov	r1, r3
 8087308:	6878      	ldr	r0, [r7, #4]
 808730a:	f7ff feec 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 808730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8087312:	2119      	movs	r1, #25
 8087314:	6878      	ldr	r0, [r7, #4]
 8087316:	f000 f94f 	bl	80875b8 <SDMMC_GetCmdResp1>
 808731a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 808731c:	69fb      	ldr	r3, [r7, #28]
}
 808731e:	4618      	mov	r0, r3
 8087320:	3720      	adds	r7, #32
 8087322:	46bd      	mov	sp, r7
 8087324:	bd80      	pop	{r7, pc}
	...

08087328 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8087328:	b580      	push	{r7, lr}
 808732a:	b088      	sub	sp, #32
 808732c:	af00      	add	r7, sp, #0
 808732e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8087330:	2300      	movs	r3, #0
 8087332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8087334:	230c      	movs	r3, #12
 8087336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087338:	2340      	movs	r3, #64	; 0x40
 808733a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 808733c:	2300      	movs	r3, #0
 808733e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087344:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087346:	f107 0308 	add.w	r3, r7, #8
 808734a:	4619      	mov	r1, r3
 808734c:	6878      	ldr	r0, [r7, #4]
 808734e:	f7ff feca 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8087352:	4a05      	ldr	r2, [pc, #20]	; (8087368 <SDMMC_CmdStopTransfer+0x40>)
 8087354:	210c      	movs	r1, #12
 8087356:	6878      	ldr	r0, [r7, #4]
 8087358:	f000 f92e 	bl	80875b8 <SDMMC_GetCmdResp1>
 808735c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 808735e:	69fb      	ldr	r3, [r7, #28]
}
 8087360:	4618      	mov	r0, r3
 8087362:	3720      	adds	r7, #32
 8087364:	46bd      	mov	sp, r7
 8087366:	bd80      	pop	{r7, pc}
 8087368:	05f5e100 	.word	0x05f5e100

0808736c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 808736c:	b580      	push	{r7, lr}
 808736e:	b08a      	sub	sp, #40	; 0x28
 8087370:	af00      	add	r7, sp, #0
 8087372:	60f8      	str	r0, [r7, #12]
 8087374:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8087378:	683b      	ldr	r3, [r7, #0]
 808737a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 808737c:	2307      	movs	r3, #7
 808737e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087380:	2340      	movs	r3, #64	; 0x40
 8087382:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087384:	2300      	movs	r3, #0
 8087386:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808738c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 808738e:	f107 0310 	add.w	r3, r7, #16
 8087392:	4619      	mov	r1, r3
 8087394:	68f8      	ldr	r0, [r7, #12]
 8087396:	f7ff fea6 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 808739a:	f241 3288 	movw	r2, #5000	; 0x1388
 808739e:	2107      	movs	r1, #7
 80873a0:	68f8      	ldr	r0, [r7, #12]
 80873a2:	f000 f909 	bl	80875b8 <SDMMC_GetCmdResp1>
 80873a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80873a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80873aa:	4618      	mov	r0, r3
 80873ac:	3728      	adds	r7, #40	; 0x28
 80873ae:	46bd      	mov	sp, r7
 80873b0:	bd80      	pop	{r7, pc}

080873b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80873b2:	b580      	push	{r7, lr}
 80873b4:	b088      	sub	sp, #32
 80873b6:	af00      	add	r7, sp, #0
 80873b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80873ba:	2300      	movs	r3, #0
 80873bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80873be:	2300      	movs	r3, #0
 80873c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80873c2:	2300      	movs	r3, #0
 80873c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80873c6:	2300      	movs	r3, #0
 80873c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80873ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80873ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80873d0:	f107 0308 	add.w	r3, r7, #8
 80873d4:	4619      	mov	r1, r3
 80873d6:	6878      	ldr	r0, [r7, #4]
 80873d8:	f7ff fe85 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80873dc:	6878      	ldr	r0, [r7, #4]
 80873de:	f000 fb23 	bl	8087a28 <SDMMC_GetCmdError>
 80873e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80873e4:	69fb      	ldr	r3, [r7, #28]
}
 80873e6:	4618      	mov	r0, r3
 80873e8:	3720      	adds	r7, #32
 80873ea:	46bd      	mov	sp, r7
 80873ec:	bd80      	pop	{r7, pc}

080873ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80873ee:	b580      	push	{r7, lr}
 80873f0:	b088      	sub	sp, #32
 80873f2:	af00      	add	r7, sp, #0
 80873f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80873f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80873fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80873fc:	2308      	movs	r3, #8
 80873fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087400:	2340      	movs	r3, #64	; 0x40
 8087402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087404:	2300      	movs	r3, #0
 8087406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808740c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 808740e:	f107 0308 	add.w	r3, r7, #8
 8087412:	4619      	mov	r1, r3
 8087414:	6878      	ldr	r0, [r7, #4]
 8087416:	f7ff fe66 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 808741a:	6878      	ldr	r0, [r7, #4]
 808741c:	f000 fab6 	bl	808798c <SDMMC_GetCmdResp7>
 8087420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087422:	69fb      	ldr	r3, [r7, #28]
}
 8087424:	4618      	mov	r0, r3
 8087426:	3720      	adds	r7, #32
 8087428:	46bd      	mov	sp, r7
 808742a:	bd80      	pop	{r7, pc}

0808742c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 808742c:	b580      	push	{r7, lr}
 808742e:	b088      	sub	sp, #32
 8087430:	af00      	add	r7, sp, #0
 8087432:	6078      	str	r0, [r7, #4]
 8087434:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8087436:	683b      	ldr	r3, [r7, #0]
 8087438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 808743a:	2337      	movs	r3, #55	; 0x37
 808743c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 808743e:	2340      	movs	r3, #64	; 0x40
 8087440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087442:	2300      	movs	r3, #0
 8087444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808744a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 808744c:	f107 0308 	add.w	r3, r7, #8
 8087450:	4619      	mov	r1, r3
 8087452:	6878      	ldr	r0, [r7, #4]
 8087454:	f7ff fe47 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8087458:	f241 3288 	movw	r2, #5000	; 0x1388
 808745c:	2137      	movs	r1, #55	; 0x37
 808745e:	6878      	ldr	r0, [r7, #4]
 8087460:	f000 f8aa 	bl	80875b8 <SDMMC_GetCmdResp1>
 8087464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087466:	69fb      	ldr	r3, [r7, #28]
}
 8087468:	4618      	mov	r0, r3
 808746a:	3720      	adds	r7, #32
 808746c:	46bd      	mov	sp, r7
 808746e:	bd80      	pop	{r7, pc}

08087470 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087470:	b580      	push	{r7, lr}
 8087472:	b088      	sub	sp, #32
 8087474:	af00      	add	r7, sp, #0
 8087476:	6078      	str	r0, [r7, #4]
 8087478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 808747a:	683b      	ldr	r3, [r7, #0]
 808747c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8087480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8087484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8087486:	2329      	movs	r3, #41	; 0x29
 8087488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 808748a:	2340      	movs	r3, #64	; 0x40
 808748c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 808748e:	2300      	movs	r3, #0
 8087490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087498:	f107 0308 	add.w	r3, r7, #8
 808749c:	4619      	mov	r1, r3
 808749e:	6878      	ldr	r0, [r7, #4]
 80874a0:	f7ff fe21 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80874a4:	6878      	ldr	r0, [r7, #4]
 80874a6:	f000 f9bd 	bl	8087824 <SDMMC_GetCmdResp3>
 80874aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80874ac:	69fb      	ldr	r3, [r7, #28]
}
 80874ae:	4618      	mov	r0, r3
 80874b0:	3720      	adds	r7, #32
 80874b2:	46bd      	mov	sp, r7
 80874b4:	bd80      	pop	{r7, pc}

080874b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80874b6:	b580      	push	{r7, lr}
 80874b8:	b088      	sub	sp, #32
 80874ba:	af00      	add	r7, sp, #0
 80874bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80874be:	2300      	movs	r3, #0
 80874c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80874c2:	2302      	movs	r3, #2
 80874c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80874c6:	23c0      	movs	r3, #192	; 0xc0
 80874c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80874ca:	2300      	movs	r3, #0
 80874cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80874ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80874d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80874d4:	f107 0308 	add.w	r3, r7, #8
 80874d8:	4619      	mov	r1, r3
 80874da:	6878      	ldr	r0, [r7, #4]
 80874dc:	f7ff fe03 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80874e0:	6878      	ldr	r0, [r7, #4]
 80874e2:	f000 f957 	bl	8087794 <SDMMC_GetCmdResp2>
 80874e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80874e8:	69fb      	ldr	r3, [r7, #28]
}
 80874ea:	4618      	mov	r0, r3
 80874ec:	3720      	adds	r7, #32
 80874ee:	46bd      	mov	sp, r7
 80874f0:	bd80      	pop	{r7, pc}

080874f2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80874f2:	b580      	push	{r7, lr}
 80874f4:	b088      	sub	sp, #32
 80874f6:	af00      	add	r7, sp, #0
 80874f8:	6078      	str	r0, [r7, #4]
 80874fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80874fc:	683b      	ldr	r3, [r7, #0]
 80874fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8087500:	2309      	movs	r3, #9
 8087502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8087504:	23c0      	movs	r3, #192	; 0xc0
 8087506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087508:	2300      	movs	r3, #0
 808750a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 808750c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087510:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087512:	f107 0308 	add.w	r3, r7, #8
 8087516:	4619      	mov	r1, r3
 8087518:	6878      	ldr	r0, [r7, #4]
 808751a:	f7ff fde4 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 808751e:	6878      	ldr	r0, [r7, #4]
 8087520:	f000 f938 	bl	8087794 <SDMMC_GetCmdResp2>
 8087524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087526:	69fb      	ldr	r3, [r7, #28]
}
 8087528:	4618      	mov	r0, r3
 808752a:	3720      	adds	r7, #32
 808752c:	46bd      	mov	sp, r7
 808752e:	bd80      	pop	{r7, pc}

08087530 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8087530:	b580      	push	{r7, lr}
 8087532:	b088      	sub	sp, #32
 8087534:	af00      	add	r7, sp, #0
 8087536:	6078      	str	r0, [r7, #4]
 8087538:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 808753a:	2300      	movs	r3, #0
 808753c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 808753e:	2303      	movs	r3, #3
 8087540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087542:	2340      	movs	r3, #64	; 0x40
 8087544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087546:	2300      	movs	r3, #0
 8087548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 808754a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808754e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087550:	f107 0308 	add.w	r3, r7, #8
 8087554:	4619      	mov	r1, r3
 8087556:	6878      	ldr	r0, [r7, #4]
 8087558:	f7ff fdc5 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 808755c:	683a      	ldr	r2, [r7, #0]
 808755e:	2103      	movs	r1, #3
 8087560:	6878      	ldr	r0, [r7, #4]
 8087562:	f000 f99d 	bl	80878a0 <SDMMC_GetCmdResp6>
 8087566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087568:	69fb      	ldr	r3, [r7, #28]
}
 808756a:	4618      	mov	r0, r3
 808756c:	3720      	adds	r7, #32
 808756e:	46bd      	mov	sp, r7
 8087570:	bd80      	pop	{r7, pc}

08087572 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087572:	b580      	push	{r7, lr}
 8087574:	b088      	sub	sp, #32
 8087576:	af00      	add	r7, sp, #0
 8087578:	6078      	str	r0, [r7, #4]
 808757a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 808757c:	683b      	ldr	r3, [r7, #0]
 808757e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8087580:	230d      	movs	r3, #13
 8087582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087584:	2340      	movs	r3, #64	; 0x40
 8087586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087588:	2300      	movs	r3, #0
 808758a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 808758c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087590:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087592:	f107 0308 	add.w	r3, r7, #8
 8087596:	4619      	mov	r1, r3
 8087598:	6878      	ldr	r0, [r7, #4]
 808759a:	f7ff fda4 	bl	80870e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 808759e:	f241 3288 	movw	r2, #5000	; 0x1388
 80875a2:	210d      	movs	r1, #13
 80875a4:	6878      	ldr	r0, [r7, #4]
 80875a6:	f000 f807 	bl	80875b8 <SDMMC_GetCmdResp1>
 80875aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80875ac:	69fb      	ldr	r3, [r7, #28]
}
 80875ae:	4618      	mov	r0, r3
 80875b0:	3720      	adds	r7, #32
 80875b2:	46bd      	mov	sp, r7
 80875b4:	bd80      	pop	{r7, pc}
	...

080875b8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80875b8:	b580      	push	{r7, lr}
 80875ba:	b088      	sub	sp, #32
 80875bc:	af00      	add	r7, sp, #0
 80875be:	60f8      	str	r0, [r7, #12]
 80875c0:	460b      	mov	r3, r1
 80875c2:	607a      	str	r2, [r7, #4]
 80875c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80875c6:	4b70      	ldr	r3, [pc, #448]	; (8087788 <SDMMC_GetCmdResp1+0x1d0>)
 80875c8:	681b      	ldr	r3, [r3, #0]
 80875ca:	4a70      	ldr	r2, [pc, #448]	; (808778c <SDMMC_GetCmdResp1+0x1d4>)
 80875cc:	fba2 2303 	umull	r2, r3, r2, r3
 80875d0:	0a5a      	lsrs	r2, r3, #9
 80875d2:	687b      	ldr	r3, [r7, #4]
 80875d4:	fb02 f303 	mul.w	r3, r2, r3
 80875d8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80875da:	69fb      	ldr	r3, [r7, #28]
 80875dc:	1e5a      	subs	r2, r3, #1
 80875de:	61fa      	str	r2, [r7, #28]
 80875e0:	2b00      	cmp	r3, #0
 80875e2:	d102      	bne.n	80875ea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80875e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80875e8:	e0c9      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80875ea:	68fb      	ldr	r3, [r7, #12]
 80875ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80875ee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80875f0:	69bb      	ldr	r3, [r7, #24]
 80875f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80875f6:	2b00      	cmp	r3, #0
 80875f8:	d0ef      	beq.n	80875da <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80875fa:	69bb      	ldr	r3, [r7, #24]
 80875fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087600:	2b00      	cmp	r3, #0
 8087602:	d1ea      	bne.n	80875da <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8087604:	68fb      	ldr	r3, [r7, #12]
 8087606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087608:	f003 0304 	and.w	r3, r3, #4
 808760c:	2b00      	cmp	r3, #0
 808760e:	d004      	beq.n	808761a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8087610:	68fb      	ldr	r3, [r7, #12]
 8087612:	2204      	movs	r2, #4
 8087614:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8087616:	2304      	movs	r3, #4
 8087618:	e0b1      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 808761a:	68fb      	ldr	r3, [r7, #12]
 808761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808761e:	f003 0301 	and.w	r3, r3, #1
 8087622:	2b00      	cmp	r3, #0
 8087624:	d004      	beq.n	8087630 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8087626:	68fb      	ldr	r3, [r7, #12]
 8087628:	2201      	movs	r2, #1
 808762a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 808762c:	2301      	movs	r3, #1
 808762e:	e0a6      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087630:	68fb      	ldr	r3, [r7, #12]
 8087632:	22c5      	movs	r2, #197	; 0xc5
 8087634:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8087636:	68f8      	ldr	r0, [r7, #12]
 8087638:	f7ff fd7f 	bl	808713a <SDIO_GetCommandResponse>
 808763c:	4603      	mov	r3, r0
 808763e:	461a      	mov	r2, r3
 8087640:	7afb      	ldrb	r3, [r7, #11]
 8087642:	4293      	cmp	r3, r2
 8087644:	d001      	beq.n	808764a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087646:	2301      	movs	r3, #1
 8087648:	e099      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 808764a:	2100      	movs	r1, #0
 808764c:	68f8      	ldr	r0, [r7, #12]
 808764e:	f7ff fd81 	bl	8087154 <SDIO_GetResponse>
 8087652:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8087654:	697a      	ldr	r2, [r7, #20]
 8087656:	4b4e      	ldr	r3, [pc, #312]	; (8087790 <SDMMC_GetCmdResp1+0x1d8>)
 8087658:	4013      	ands	r3, r2
 808765a:	2b00      	cmp	r3, #0
 808765c:	d101      	bne.n	8087662 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 808765e:	2300      	movs	r3, #0
 8087660:	e08d      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8087662:	697b      	ldr	r3, [r7, #20]
 8087664:	2b00      	cmp	r3, #0
 8087666:	da02      	bge.n	808766e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8087668:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 808766c:	e087      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 808766e:	697b      	ldr	r3, [r7, #20]
 8087670:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8087674:	2b00      	cmp	r3, #0
 8087676:	d001      	beq.n	808767c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8087678:	2340      	movs	r3, #64	; 0x40
 808767a:	e080      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 808767c:	697b      	ldr	r3, [r7, #20]
 808767e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8087682:	2b00      	cmp	r3, #0
 8087684:	d001      	beq.n	808768a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8087686:	2380      	movs	r3, #128	; 0x80
 8087688:	e079      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 808768a:	697b      	ldr	r3, [r7, #20]
 808768c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8087690:	2b00      	cmp	r3, #0
 8087692:	d002      	beq.n	808769a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8087694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087698:	e071      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 808769a:	697b      	ldr	r3, [r7, #20]
 808769c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80876a0:	2b00      	cmp	r3, #0
 80876a2:	d002      	beq.n	80876aa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80876a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80876a8:	e069      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80876aa:	697b      	ldr	r3, [r7, #20]
 80876ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80876b0:	2b00      	cmp	r3, #0
 80876b2:	d002      	beq.n	80876ba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80876b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80876b8:	e061      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80876ba:	697b      	ldr	r3, [r7, #20]
 80876bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80876c0:	2b00      	cmp	r3, #0
 80876c2:	d002      	beq.n	80876ca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80876c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80876c8:	e059      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80876ca:	697b      	ldr	r3, [r7, #20]
 80876cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80876d0:	2b00      	cmp	r3, #0
 80876d2:	d002      	beq.n	80876da <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80876d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80876d8:	e051      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80876da:	697b      	ldr	r3, [r7, #20]
 80876dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80876e0:	2b00      	cmp	r3, #0
 80876e2:	d002      	beq.n	80876ea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80876e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80876e8:	e049      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80876ea:	697b      	ldr	r3, [r7, #20]
 80876ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80876f0:	2b00      	cmp	r3, #0
 80876f2:	d002      	beq.n	80876fa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80876f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80876f8:	e041      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80876fa:	697b      	ldr	r3, [r7, #20]
 80876fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8087700:	2b00      	cmp	r3, #0
 8087702:	d002      	beq.n	808770a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8087704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8087708:	e039      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 808770a:	697b      	ldr	r3, [r7, #20]
 808770c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8087710:	2b00      	cmp	r3, #0
 8087712:	d002      	beq.n	808771a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8087714:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8087718:	e031      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 808771a:	697b      	ldr	r3, [r7, #20]
 808771c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8087720:	2b00      	cmp	r3, #0
 8087722:	d002      	beq.n	808772a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8087724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8087728:	e029      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 808772a:	697b      	ldr	r3, [r7, #20]
 808772c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8087730:	2b00      	cmp	r3, #0
 8087732:	d002      	beq.n	808773a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8087734:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8087738:	e021      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 808773a:	697b      	ldr	r3, [r7, #20]
 808773c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8087740:	2b00      	cmp	r3, #0
 8087742:	d002      	beq.n	808774a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8087744:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8087748:	e019      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 808774a:	697b      	ldr	r3, [r7, #20]
 808774c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8087750:	2b00      	cmp	r3, #0
 8087752:	d002      	beq.n	808775a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8087754:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8087758:	e011      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 808775a:	697b      	ldr	r3, [r7, #20]
 808775c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8087760:	2b00      	cmp	r3, #0
 8087762:	d002      	beq.n	808776a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8087764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8087768:	e009      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 808776a:	697b      	ldr	r3, [r7, #20]
 808776c:	f003 0308 	and.w	r3, r3, #8
 8087770:	2b00      	cmp	r3, #0
 8087772:	d002      	beq.n	808777a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8087774:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8087778:	e001      	b.n	808777e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 808777a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 808777e:	4618      	mov	r0, r3
 8087780:	3720      	adds	r7, #32
 8087782:	46bd      	mov	sp, r7
 8087784:	bd80      	pop	{r7, pc}
 8087786:	bf00      	nop
 8087788:	20000080 	.word	0x20000080
 808778c:	10624dd3 	.word	0x10624dd3
 8087790:	fdffe008 	.word	0xfdffe008

08087794 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8087794:	b480      	push	{r7}
 8087796:	b085      	sub	sp, #20
 8087798:	af00      	add	r7, sp, #0
 808779a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 808779c:	4b1f      	ldr	r3, [pc, #124]	; (808781c <SDMMC_GetCmdResp2+0x88>)
 808779e:	681b      	ldr	r3, [r3, #0]
 80877a0:	4a1f      	ldr	r2, [pc, #124]	; (8087820 <SDMMC_GetCmdResp2+0x8c>)
 80877a2:	fba2 2303 	umull	r2, r3, r2, r3
 80877a6:	0a5b      	lsrs	r3, r3, #9
 80877a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80877ac:	fb02 f303 	mul.w	r3, r2, r3
 80877b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80877b2:	68fb      	ldr	r3, [r7, #12]
 80877b4:	1e5a      	subs	r2, r3, #1
 80877b6:	60fa      	str	r2, [r7, #12]
 80877b8:	2b00      	cmp	r3, #0
 80877ba:	d102      	bne.n	80877c2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80877bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80877c0:	e026      	b.n	8087810 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80877c2:	687b      	ldr	r3, [r7, #4]
 80877c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80877c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80877c8:	68bb      	ldr	r3, [r7, #8]
 80877ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80877ce:	2b00      	cmp	r3, #0
 80877d0:	d0ef      	beq.n	80877b2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80877d2:	68bb      	ldr	r3, [r7, #8]
 80877d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80877d8:	2b00      	cmp	r3, #0
 80877da:	d1ea      	bne.n	80877b2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80877dc:	687b      	ldr	r3, [r7, #4]
 80877de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80877e0:	f003 0304 	and.w	r3, r3, #4
 80877e4:	2b00      	cmp	r3, #0
 80877e6:	d004      	beq.n	80877f2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80877e8:	687b      	ldr	r3, [r7, #4]
 80877ea:	2204      	movs	r2, #4
 80877ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80877ee:	2304      	movs	r3, #4
 80877f0:	e00e      	b.n	8087810 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80877f2:	687b      	ldr	r3, [r7, #4]
 80877f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80877f6:	f003 0301 	and.w	r3, r3, #1
 80877fa:	2b00      	cmp	r3, #0
 80877fc:	d004      	beq.n	8087808 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80877fe:	687b      	ldr	r3, [r7, #4]
 8087800:	2201      	movs	r2, #1
 8087802:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087804:	2301      	movs	r3, #1
 8087806:	e003      	b.n	8087810 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087808:	687b      	ldr	r3, [r7, #4]
 808780a:	22c5      	movs	r2, #197	; 0xc5
 808780c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 808780e:	2300      	movs	r3, #0
}
 8087810:	4618      	mov	r0, r3
 8087812:	3714      	adds	r7, #20
 8087814:	46bd      	mov	sp, r7
 8087816:	f85d 7b04 	ldr.w	r7, [sp], #4
 808781a:	4770      	bx	lr
 808781c:	20000080 	.word	0x20000080
 8087820:	10624dd3 	.word	0x10624dd3

08087824 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8087824:	b480      	push	{r7}
 8087826:	b085      	sub	sp, #20
 8087828:	af00      	add	r7, sp, #0
 808782a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 808782c:	4b1a      	ldr	r3, [pc, #104]	; (8087898 <SDMMC_GetCmdResp3+0x74>)
 808782e:	681b      	ldr	r3, [r3, #0]
 8087830:	4a1a      	ldr	r2, [pc, #104]	; (808789c <SDMMC_GetCmdResp3+0x78>)
 8087832:	fba2 2303 	umull	r2, r3, r2, r3
 8087836:	0a5b      	lsrs	r3, r3, #9
 8087838:	f241 3288 	movw	r2, #5000	; 0x1388
 808783c:	fb02 f303 	mul.w	r3, r2, r3
 8087840:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8087842:	68fb      	ldr	r3, [r7, #12]
 8087844:	1e5a      	subs	r2, r3, #1
 8087846:	60fa      	str	r2, [r7, #12]
 8087848:	2b00      	cmp	r3, #0
 808784a:	d102      	bne.n	8087852 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 808784c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8087850:	e01b      	b.n	808788a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8087852:	687b      	ldr	r3, [r7, #4]
 8087854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087856:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087858:	68bb      	ldr	r3, [r7, #8]
 808785a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 808785e:	2b00      	cmp	r3, #0
 8087860:	d0ef      	beq.n	8087842 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8087862:	68bb      	ldr	r3, [r7, #8]
 8087864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087868:	2b00      	cmp	r3, #0
 808786a:	d1ea      	bne.n	8087842 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 808786c:	687b      	ldr	r3, [r7, #4]
 808786e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087870:	f003 0304 	and.w	r3, r3, #4
 8087874:	2b00      	cmp	r3, #0
 8087876:	d004      	beq.n	8087882 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8087878:	687b      	ldr	r3, [r7, #4]
 808787a:	2204      	movs	r2, #4
 808787c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 808787e:	2304      	movs	r3, #4
 8087880:	e003      	b.n	808788a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087882:	687b      	ldr	r3, [r7, #4]
 8087884:	22c5      	movs	r2, #197	; 0xc5
 8087886:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8087888:	2300      	movs	r3, #0
}
 808788a:	4618      	mov	r0, r3
 808788c:	3714      	adds	r7, #20
 808788e:	46bd      	mov	sp, r7
 8087890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087894:	4770      	bx	lr
 8087896:	bf00      	nop
 8087898:	20000080 	.word	0x20000080
 808789c:	10624dd3 	.word	0x10624dd3

080878a0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80878a0:	b580      	push	{r7, lr}
 80878a2:	b088      	sub	sp, #32
 80878a4:	af00      	add	r7, sp, #0
 80878a6:	60f8      	str	r0, [r7, #12]
 80878a8:	460b      	mov	r3, r1
 80878aa:	607a      	str	r2, [r7, #4]
 80878ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80878ae:	4b35      	ldr	r3, [pc, #212]	; (8087984 <SDMMC_GetCmdResp6+0xe4>)
 80878b0:	681b      	ldr	r3, [r3, #0]
 80878b2:	4a35      	ldr	r2, [pc, #212]	; (8087988 <SDMMC_GetCmdResp6+0xe8>)
 80878b4:	fba2 2303 	umull	r2, r3, r2, r3
 80878b8:	0a5b      	lsrs	r3, r3, #9
 80878ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80878be:	fb02 f303 	mul.w	r3, r2, r3
 80878c2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80878c4:	69fb      	ldr	r3, [r7, #28]
 80878c6:	1e5a      	subs	r2, r3, #1
 80878c8:	61fa      	str	r2, [r7, #28]
 80878ca:	2b00      	cmp	r3, #0
 80878cc:	d102      	bne.n	80878d4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80878ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80878d2:	e052      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80878d4:	68fb      	ldr	r3, [r7, #12]
 80878d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80878d8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80878da:	69bb      	ldr	r3, [r7, #24]
 80878dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80878e0:	2b00      	cmp	r3, #0
 80878e2:	d0ef      	beq.n	80878c4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80878e4:	69bb      	ldr	r3, [r7, #24]
 80878e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80878ea:	2b00      	cmp	r3, #0
 80878ec:	d1ea      	bne.n	80878c4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80878ee:	68fb      	ldr	r3, [r7, #12]
 80878f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80878f2:	f003 0304 	and.w	r3, r3, #4
 80878f6:	2b00      	cmp	r3, #0
 80878f8:	d004      	beq.n	8087904 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80878fa:	68fb      	ldr	r3, [r7, #12]
 80878fc:	2204      	movs	r2, #4
 80878fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8087900:	2304      	movs	r3, #4
 8087902:	e03a      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8087904:	68fb      	ldr	r3, [r7, #12]
 8087906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087908:	f003 0301 	and.w	r3, r3, #1
 808790c:	2b00      	cmp	r3, #0
 808790e:	d004      	beq.n	808791a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8087910:	68fb      	ldr	r3, [r7, #12]
 8087912:	2201      	movs	r2, #1
 8087914:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087916:	2301      	movs	r3, #1
 8087918:	e02f      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 808791a:	68f8      	ldr	r0, [r7, #12]
 808791c:	f7ff fc0d 	bl	808713a <SDIO_GetCommandResponse>
 8087920:	4603      	mov	r3, r0
 8087922:	461a      	mov	r2, r3
 8087924:	7afb      	ldrb	r3, [r7, #11]
 8087926:	4293      	cmp	r3, r2
 8087928:	d001      	beq.n	808792e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 808792a:	2301      	movs	r3, #1
 808792c:	e025      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 808792e:	68fb      	ldr	r3, [r7, #12]
 8087930:	22c5      	movs	r2, #197	; 0xc5
 8087932:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8087934:	2100      	movs	r1, #0
 8087936:	68f8      	ldr	r0, [r7, #12]
 8087938:	f7ff fc0c 	bl	8087154 <SDIO_GetResponse>
 808793c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 808793e:	697b      	ldr	r3, [r7, #20]
 8087940:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8087944:	2b00      	cmp	r3, #0
 8087946:	d106      	bne.n	8087956 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8087948:	697b      	ldr	r3, [r7, #20]
 808794a:	0c1b      	lsrs	r3, r3, #16
 808794c:	b29a      	uxth	r2, r3
 808794e:	687b      	ldr	r3, [r7, #4]
 8087950:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8087952:	2300      	movs	r3, #0
 8087954:	e011      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8087956:	697b      	ldr	r3, [r7, #20]
 8087958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808795c:	2b00      	cmp	r3, #0
 808795e:	d002      	beq.n	8087966 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8087960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087964:	e009      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8087966:	697b      	ldr	r3, [r7, #20]
 8087968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 808796c:	2b00      	cmp	r3, #0
 808796e:	d002      	beq.n	8087976 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8087970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8087974:	e001      	b.n	808797a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8087976:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 808797a:	4618      	mov	r0, r3
 808797c:	3720      	adds	r7, #32
 808797e:	46bd      	mov	sp, r7
 8087980:	bd80      	pop	{r7, pc}
 8087982:	bf00      	nop
 8087984:	20000080 	.word	0x20000080
 8087988:	10624dd3 	.word	0x10624dd3

0808798c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 808798c:	b480      	push	{r7}
 808798e:	b085      	sub	sp, #20
 8087990:	af00      	add	r7, sp, #0
 8087992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8087994:	4b22      	ldr	r3, [pc, #136]	; (8087a20 <SDMMC_GetCmdResp7+0x94>)
 8087996:	681b      	ldr	r3, [r3, #0]
 8087998:	4a22      	ldr	r2, [pc, #136]	; (8087a24 <SDMMC_GetCmdResp7+0x98>)
 808799a:	fba2 2303 	umull	r2, r3, r2, r3
 808799e:	0a5b      	lsrs	r3, r3, #9
 80879a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80879a4:	fb02 f303 	mul.w	r3, r2, r3
 80879a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80879aa:	68fb      	ldr	r3, [r7, #12]
 80879ac:	1e5a      	subs	r2, r3, #1
 80879ae:	60fa      	str	r2, [r7, #12]
 80879b0:	2b00      	cmp	r3, #0
 80879b2:	d102      	bne.n	80879ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80879b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80879b8:	e02c      	b.n	8087a14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80879ba:	687b      	ldr	r3, [r7, #4]
 80879bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80879be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80879c0:	68bb      	ldr	r3, [r7, #8]
 80879c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80879c6:	2b00      	cmp	r3, #0
 80879c8:	d0ef      	beq.n	80879aa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80879ca:	68bb      	ldr	r3, [r7, #8]
 80879cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80879d0:	2b00      	cmp	r3, #0
 80879d2:	d1ea      	bne.n	80879aa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80879d4:	687b      	ldr	r3, [r7, #4]
 80879d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80879d8:	f003 0304 	and.w	r3, r3, #4
 80879dc:	2b00      	cmp	r3, #0
 80879de:	d004      	beq.n	80879ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80879e0:	687b      	ldr	r3, [r7, #4]
 80879e2:	2204      	movs	r2, #4
 80879e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80879e6:	2304      	movs	r3, #4
 80879e8:	e014      	b.n	8087a14 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80879ea:	687b      	ldr	r3, [r7, #4]
 80879ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80879ee:	f003 0301 	and.w	r3, r3, #1
 80879f2:	2b00      	cmp	r3, #0
 80879f4:	d004      	beq.n	8087a00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80879f6:	687b      	ldr	r3, [r7, #4]
 80879f8:	2201      	movs	r2, #1
 80879fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80879fc:	2301      	movs	r3, #1
 80879fe:	e009      	b.n	8087a14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8087a00:	687b      	ldr	r3, [r7, #4]
 8087a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8087a08:	2b00      	cmp	r3, #0
 8087a0a:	d002      	beq.n	8087a12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8087a0c:	687b      	ldr	r3, [r7, #4]
 8087a0e:	2240      	movs	r2, #64	; 0x40
 8087a10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8087a12:	2300      	movs	r3, #0
  
}
 8087a14:	4618      	mov	r0, r3
 8087a16:	3714      	adds	r7, #20
 8087a18:	46bd      	mov	sp, r7
 8087a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087a1e:	4770      	bx	lr
 8087a20:	20000080 	.word	0x20000080
 8087a24:	10624dd3 	.word	0x10624dd3

08087a28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8087a28:	b480      	push	{r7}
 8087a2a:	b085      	sub	sp, #20
 8087a2c:	af00      	add	r7, sp, #0
 8087a2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8087a30:	4b11      	ldr	r3, [pc, #68]	; (8087a78 <SDMMC_GetCmdError+0x50>)
 8087a32:	681b      	ldr	r3, [r3, #0]
 8087a34:	4a11      	ldr	r2, [pc, #68]	; (8087a7c <SDMMC_GetCmdError+0x54>)
 8087a36:	fba2 2303 	umull	r2, r3, r2, r3
 8087a3a:	0a5b      	lsrs	r3, r3, #9
 8087a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8087a40:	fb02 f303 	mul.w	r3, r2, r3
 8087a44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8087a46:	68fb      	ldr	r3, [r7, #12]
 8087a48:	1e5a      	subs	r2, r3, #1
 8087a4a:	60fa      	str	r2, [r7, #12]
 8087a4c:	2b00      	cmp	r3, #0
 8087a4e:	d102      	bne.n	8087a56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8087a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8087a54:	e009      	b.n	8087a6a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8087a56:	687b      	ldr	r3, [r7, #4]
 8087a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8087a5e:	2b00      	cmp	r3, #0
 8087a60:	d0f1      	beq.n	8087a46 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087a62:	687b      	ldr	r3, [r7, #4]
 8087a64:	22c5      	movs	r2, #197	; 0xc5
 8087a66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8087a68:	2300      	movs	r3, #0
}
 8087a6a:	4618      	mov	r0, r3
 8087a6c:	3714      	adds	r7, #20
 8087a6e:	46bd      	mov	sp, r7
 8087a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087a74:	4770      	bx	lr
 8087a76:	bf00      	nop
 8087a78:	20000080 	.word	0x20000080
 8087a7c:	10624dd3 	.word	0x10624dd3

08087a80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8087a80:	b580      	push	{r7, lr}
 8087a82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8087a84:	4904      	ldr	r1, [pc, #16]	; (8087a98 <MX_FATFS_Init+0x18>)
 8087a86:	4805      	ldr	r0, [pc, #20]	; (8087a9c <MX_FATFS_Init+0x1c>)
 8087a88:	f000 fa0a 	bl	8087ea0 <FATFS_LinkDriver>
 8087a8c:	4603      	mov	r3, r0
 8087a8e:	461a      	mov	r2, r3
 8087a90:	4b03      	ldr	r3, [pc, #12]	; (8087aa0 <MX_FATFS_Init+0x20>)
 8087a92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8087a94:	bf00      	nop
 8087a96:	bd80      	pop	{r7, pc}
 8087a98:	20000808 	.word	0x20000808
 8087a9c:	0808b510 	.word	0x0808b510
 8087aa0:	20000804 	.word	0x20000804

08087aa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8087aa4:	b580      	push	{r7, lr}
 8087aa6:	b082      	sub	sp, #8
 8087aa8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8087aaa:	2300      	movs	r3, #0
 8087aac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8087aae:	f000 f89e 	bl	8087bee <BSP_SD_IsDetected>
 8087ab2:	4603      	mov	r3, r0
 8087ab4:	2b01      	cmp	r3, #1
 8087ab6:	d001      	beq.n	8087abc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8087ab8:	2301      	movs	r3, #1
 8087aba:	e005      	b.n	8087ac8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8087abc:	4804      	ldr	r0, [pc, #16]	; (8087ad0 <BSP_SD_Init+0x2c>)
 8087abe:	f7fc fd46 	bl	808454e <HAL_SD_Init>
 8087ac2:	4603      	mov	r3, r0
 8087ac4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8087ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8087ac8:	4618      	mov	r0, r3
 8087aca:	3708      	adds	r7, #8
 8087acc:	46bd      	mov	sp, r7
 8087ace:	bd80      	pop	{r7, pc}
 8087ad0:	20000290 	.word	0x20000290

08087ad4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8087ad4:	b580      	push	{r7, lr}
 8087ad6:	b088      	sub	sp, #32
 8087ad8:	af02      	add	r7, sp, #8
 8087ada:	60f8      	str	r0, [r7, #12]
 8087adc:	60b9      	str	r1, [r7, #8]
 8087ade:	607a      	str	r2, [r7, #4]
 8087ae0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8087ae2:	2300      	movs	r3, #0
 8087ae4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8087ae6:	683b      	ldr	r3, [r7, #0]
 8087ae8:	9300      	str	r3, [sp, #0]
 8087aea:	687b      	ldr	r3, [r7, #4]
 8087aec:	68ba      	ldr	r2, [r7, #8]
 8087aee:	68f9      	ldr	r1, [r7, #12]
 8087af0:	4806      	ldr	r0, [pc, #24]	; (8087b0c <BSP_SD_ReadBlocks+0x38>)
 8087af2:	f7fc fddd 	bl	80846b0 <HAL_SD_ReadBlocks>
 8087af6:	4603      	mov	r3, r0
 8087af8:	2b00      	cmp	r3, #0
 8087afa:	d001      	beq.n	8087b00 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8087afc:	2301      	movs	r3, #1
 8087afe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8087b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8087b02:	4618      	mov	r0, r3
 8087b04:	3718      	adds	r7, #24
 8087b06:	46bd      	mov	sp, r7
 8087b08:	bd80      	pop	{r7, pc}
 8087b0a:	bf00      	nop
 8087b0c:	20000290 	.word	0x20000290

08087b10 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8087b10:	b580      	push	{r7, lr}
 8087b12:	b088      	sub	sp, #32
 8087b14:	af02      	add	r7, sp, #8
 8087b16:	60f8      	str	r0, [r7, #12]
 8087b18:	60b9      	str	r1, [r7, #8]
 8087b1a:	607a      	str	r2, [r7, #4]
 8087b1c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8087b1e:	2300      	movs	r3, #0
 8087b20:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8087b22:	683b      	ldr	r3, [r7, #0]
 8087b24:	9300      	str	r3, [sp, #0]
 8087b26:	687b      	ldr	r3, [r7, #4]
 8087b28:	68ba      	ldr	r2, [r7, #8]
 8087b2a:	68f9      	ldr	r1, [r7, #12]
 8087b2c:	4806      	ldr	r0, [pc, #24]	; (8087b48 <BSP_SD_WriteBlocks+0x38>)
 8087b2e:	f7fc ff9d 	bl	8084a6c <HAL_SD_WriteBlocks>
 8087b32:	4603      	mov	r3, r0
 8087b34:	2b00      	cmp	r3, #0
 8087b36:	d001      	beq.n	8087b3c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8087b38:	2301      	movs	r3, #1
 8087b3a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8087b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8087b3e:	4618      	mov	r0, r3
 8087b40:	3718      	adds	r7, #24
 8087b42:	46bd      	mov	sp, r7
 8087b44:	bd80      	pop	{r7, pc}
 8087b46:	bf00      	nop
 8087b48:	20000290 	.word	0x20000290

08087b4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8087b4c:	b580      	push	{r7, lr}
 8087b4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8087b50:	4805      	ldr	r0, [pc, #20]	; (8087b68 <BSP_SD_GetCardState+0x1c>)
 8087b52:	f7fd fc71 	bl	8085438 <HAL_SD_GetCardState>
 8087b56:	4603      	mov	r3, r0
 8087b58:	2b04      	cmp	r3, #4
 8087b5a:	bf14      	ite	ne
 8087b5c:	2301      	movne	r3, #1
 8087b5e:	2300      	moveq	r3, #0
 8087b60:	b2db      	uxtb	r3, r3
}
 8087b62:	4618      	mov	r0, r3
 8087b64:	bd80      	pop	{r7, pc}
 8087b66:	bf00      	nop
 8087b68:	20000290 	.word	0x20000290

08087b6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8087b6c:	b580      	push	{r7, lr}
 8087b6e:	b082      	sub	sp, #8
 8087b70:	af00      	add	r7, sp, #0
 8087b72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8087b74:	6879      	ldr	r1, [r7, #4]
 8087b76:	4803      	ldr	r0, [pc, #12]	; (8087b84 <BSP_SD_GetCardInfo+0x18>)
 8087b78:	f7fd fc32 	bl	80853e0 <HAL_SD_GetCardInfo>
}
 8087b7c:	bf00      	nop
 8087b7e:	3708      	adds	r7, #8
 8087b80:	46bd      	mov	sp, r7
 8087b82:	bd80      	pop	{r7, pc}
 8087b84:	20000290 	.word	0x20000290

08087b88 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8087b88:	b580      	push	{r7, lr}
 8087b8a:	b082      	sub	sp, #8
 8087b8c:	af00      	add	r7, sp, #0
 8087b8e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8087b90:	f000 f818 	bl	8087bc4 <BSP_SD_AbortCallback>
}
 8087b94:	bf00      	nop
 8087b96:	3708      	adds	r7, #8
 8087b98:	46bd      	mov	sp, r7
 8087b9a:	bd80      	pop	{r7, pc}

08087b9c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8087b9c:	b580      	push	{r7, lr}
 8087b9e:	b082      	sub	sp, #8
 8087ba0:	af00      	add	r7, sp, #0
 8087ba2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8087ba4:	f000 f815 	bl	8087bd2 <BSP_SD_WriteCpltCallback>
}
 8087ba8:	bf00      	nop
 8087baa:	3708      	adds	r7, #8
 8087bac:	46bd      	mov	sp, r7
 8087bae:	bd80      	pop	{r7, pc}

08087bb0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8087bb0:	b580      	push	{r7, lr}
 8087bb2:	b082      	sub	sp, #8
 8087bb4:	af00      	add	r7, sp, #0
 8087bb6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8087bb8:	f000 f812 	bl	8087be0 <BSP_SD_ReadCpltCallback>
}
 8087bbc:	bf00      	nop
 8087bbe:	3708      	adds	r7, #8
 8087bc0:	46bd      	mov	sp, r7
 8087bc2:	bd80      	pop	{r7, pc}

08087bc4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8087bc4:	b480      	push	{r7}
 8087bc6:	af00      	add	r7, sp, #0

}
 8087bc8:	bf00      	nop
 8087bca:	46bd      	mov	sp, r7
 8087bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087bd0:	4770      	bx	lr

08087bd2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8087bd2:	b480      	push	{r7}
 8087bd4:	af00      	add	r7, sp, #0

}
 8087bd6:	bf00      	nop
 8087bd8:	46bd      	mov	sp, r7
 8087bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087bde:	4770      	bx	lr

08087be0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8087be0:	b480      	push	{r7}
 8087be2:	af00      	add	r7, sp, #0

}
 8087be4:	bf00      	nop
 8087be6:	46bd      	mov	sp, r7
 8087be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087bec:	4770      	bx	lr

08087bee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8087bee:	b580      	push	{r7, lr}
 8087bf0:	b082      	sub	sp, #8
 8087bf2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8087bf4:	2301      	movs	r3, #1
 8087bf6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8087bf8:	f000 f80c 	bl	8087c14 <BSP_PlatformIsDetected>
 8087bfc:	4603      	mov	r3, r0
 8087bfe:	2b00      	cmp	r3, #0
 8087c00:	d101      	bne.n	8087c06 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8087c02:	2300      	movs	r3, #0
 8087c04:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8087c06:	79fb      	ldrb	r3, [r7, #7]
 8087c08:	b2db      	uxtb	r3, r3
}
 8087c0a:	4618      	mov	r0, r3
 8087c0c:	3708      	adds	r7, #8
 8087c0e:	46bd      	mov	sp, r7
 8087c10:	bd80      	pop	{r7, pc}
	...

08087c14 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8087c14:	b580      	push	{r7, lr}
 8087c16:	b082      	sub	sp, #8
 8087c18:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8087c1a:	2301      	movs	r3, #1
 8087c1c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8087c1e:	2180      	movs	r1, #128	; 0x80
 8087c20:	4806      	ldr	r0, [pc, #24]	; (8087c3c <BSP_PlatformIsDetected+0x28>)
 8087c22:	f7fb fb21 	bl	8083268 <HAL_GPIO_ReadPin>
 8087c26:	4603      	mov	r3, r0
 8087c28:	2b00      	cmp	r3, #0
 8087c2a:	d001      	beq.n	8087c30 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8087c2c:	2300      	movs	r3, #0
 8087c2e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8087c30:	79fb      	ldrb	r3, [r7, #7]
}
 8087c32:	4618      	mov	r0, r3
 8087c34:	3708      	adds	r7, #8
 8087c36:	46bd      	mov	sp, r7
 8087c38:	bd80      	pop	{r7, pc}
 8087c3a:	bf00      	nop
 8087c3c:	40020c00 	.word	0x40020c00

08087c40 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8087c40:	b580      	push	{r7, lr}
 8087c42:	b082      	sub	sp, #8
 8087c44:	af00      	add	r7, sp, #0
 8087c46:	4603      	mov	r3, r0
 8087c48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8087c4a:	4b0b      	ldr	r3, [pc, #44]	; (8087c78 <SD_CheckStatus+0x38>)
 8087c4c:	2201      	movs	r2, #1
 8087c4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8087c50:	f7ff ff7c 	bl	8087b4c <BSP_SD_GetCardState>
 8087c54:	4603      	mov	r3, r0
 8087c56:	2b00      	cmp	r3, #0
 8087c58:	d107      	bne.n	8087c6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8087c5a:	4b07      	ldr	r3, [pc, #28]	; (8087c78 <SD_CheckStatus+0x38>)
 8087c5c:	781b      	ldrb	r3, [r3, #0]
 8087c5e:	b2db      	uxtb	r3, r3
 8087c60:	f023 0301 	bic.w	r3, r3, #1
 8087c64:	b2da      	uxtb	r2, r3
 8087c66:	4b04      	ldr	r3, [pc, #16]	; (8087c78 <SD_CheckStatus+0x38>)
 8087c68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8087c6a:	4b03      	ldr	r3, [pc, #12]	; (8087c78 <SD_CheckStatus+0x38>)
 8087c6c:	781b      	ldrb	r3, [r3, #0]
 8087c6e:	b2db      	uxtb	r3, r3
}
 8087c70:	4618      	mov	r0, r3
 8087c72:	3708      	adds	r7, #8
 8087c74:	46bd      	mov	sp, r7
 8087c76:	bd80      	pop	{r7, pc}
 8087c78:	20000089 	.word	0x20000089

08087c7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8087c7c:	b580      	push	{r7, lr}
 8087c7e:	b082      	sub	sp, #8
 8087c80:	af00      	add	r7, sp, #0
 8087c82:	4603      	mov	r3, r0
 8087c84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8087c86:	4b0b      	ldr	r3, [pc, #44]	; (8087cb4 <SD_initialize+0x38>)
 8087c88:	2201      	movs	r2, #1
 8087c8a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8087c8c:	f7ff ff0a 	bl	8087aa4 <BSP_SD_Init>
 8087c90:	4603      	mov	r3, r0
 8087c92:	2b00      	cmp	r3, #0
 8087c94:	d107      	bne.n	8087ca6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8087c96:	79fb      	ldrb	r3, [r7, #7]
 8087c98:	4618      	mov	r0, r3
 8087c9a:	f7ff ffd1 	bl	8087c40 <SD_CheckStatus>
 8087c9e:	4603      	mov	r3, r0
 8087ca0:	461a      	mov	r2, r3
 8087ca2:	4b04      	ldr	r3, [pc, #16]	; (8087cb4 <SD_initialize+0x38>)
 8087ca4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8087ca6:	4b03      	ldr	r3, [pc, #12]	; (8087cb4 <SD_initialize+0x38>)
 8087ca8:	781b      	ldrb	r3, [r3, #0]
 8087caa:	b2db      	uxtb	r3, r3
}
 8087cac:	4618      	mov	r0, r3
 8087cae:	3708      	adds	r7, #8
 8087cb0:	46bd      	mov	sp, r7
 8087cb2:	bd80      	pop	{r7, pc}
 8087cb4:	20000089 	.word	0x20000089

08087cb8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8087cb8:	b580      	push	{r7, lr}
 8087cba:	b082      	sub	sp, #8
 8087cbc:	af00      	add	r7, sp, #0
 8087cbe:	4603      	mov	r3, r0
 8087cc0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8087cc2:	79fb      	ldrb	r3, [r7, #7]
 8087cc4:	4618      	mov	r0, r3
 8087cc6:	f7ff ffbb 	bl	8087c40 <SD_CheckStatus>
 8087cca:	4603      	mov	r3, r0
}
 8087ccc:	4618      	mov	r0, r3
 8087cce:	3708      	adds	r7, #8
 8087cd0:	46bd      	mov	sp, r7
 8087cd2:	bd80      	pop	{r7, pc}

08087cd4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8087cd4:	b580      	push	{r7, lr}
 8087cd6:	b086      	sub	sp, #24
 8087cd8:	af00      	add	r7, sp, #0
 8087cda:	60b9      	str	r1, [r7, #8]
 8087cdc:	607a      	str	r2, [r7, #4]
 8087cde:	603b      	str	r3, [r7, #0]
 8087ce0:	4603      	mov	r3, r0
 8087ce2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8087ce4:	2301      	movs	r3, #1
 8087ce6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8087ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8087cec:	683a      	ldr	r2, [r7, #0]
 8087cee:	6879      	ldr	r1, [r7, #4]
 8087cf0:	68b8      	ldr	r0, [r7, #8]
 8087cf2:	f7ff feef 	bl	8087ad4 <BSP_SD_ReadBlocks>
 8087cf6:	4603      	mov	r3, r0
 8087cf8:	2b00      	cmp	r3, #0
 8087cfa:	d107      	bne.n	8087d0c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8087cfc:	bf00      	nop
 8087cfe:	f7ff ff25 	bl	8087b4c <BSP_SD_GetCardState>
 8087d02:	4603      	mov	r3, r0
 8087d04:	2b00      	cmp	r3, #0
 8087d06:	d1fa      	bne.n	8087cfe <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8087d08:	2300      	movs	r3, #0
 8087d0a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8087d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8087d0e:	4618      	mov	r0, r3
 8087d10:	3718      	adds	r7, #24
 8087d12:	46bd      	mov	sp, r7
 8087d14:	bd80      	pop	{r7, pc}

08087d16 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8087d16:	b580      	push	{r7, lr}
 8087d18:	b086      	sub	sp, #24
 8087d1a:	af00      	add	r7, sp, #0
 8087d1c:	60b9      	str	r1, [r7, #8]
 8087d1e:	607a      	str	r2, [r7, #4]
 8087d20:	603b      	str	r3, [r7, #0]
 8087d22:	4603      	mov	r3, r0
 8087d24:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8087d26:	2301      	movs	r3, #1
 8087d28:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8087d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8087d2e:	683a      	ldr	r2, [r7, #0]
 8087d30:	6879      	ldr	r1, [r7, #4]
 8087d32:	68b8      	ldr	r0, [r7, #8]
 8087d34:	f7ff feec 	bl	8087b10 <BSP_SD_WriteBlocks>
 8087d38:	4603      	mov	r3, r0
 8087d3a:	2b00      	cmp	r3, #0
 8087d3c:	d107      	bne.n	8087d4e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8087d3e:	bf00      	nop
 8087d40:	f7ff ff04 	bl	8087b4c <BSP_SD_GetCardState>
 8087d44:	4603      	mov	r3, r0
 8087d46:	2b00      	cmp	r3, #0
 8087d48:	d1fa      	bne.n	8087d40 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8087d4a:	2300      	movs	r3, #0
 8087d4c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8087d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8087d50:	4618      	mov	r0, r3
 8087d52:	3718      	adds	r7, #24
 8087d54:	46bd      	mov	sp, r7
 8087d56:	bd80      	pop	{r7, pc}

08087d58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8087d58:	b580      	push	{r7, lr}
 8087d5a:	b08c      	sub	sp, #48	; 0x30
 8087d5c:	af00      	add	r7, sp, #0
 8087d5e:	4603      	mov	r3, r0
 8087d60:	603a      	str	r2, [r7, #0]
 8087d62:	71fb      	strb	r3, [r7, #7]
 8087d64:	460b      	mov	r3, r1
 8087d66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8087d68:	2301      	movs	r3, #1
 8087d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8087d6e:	4b25      	ldr	r3, [pc, #148]	; (8087e04 <SD_ioctl+0xac>)
 8087d70:	781b      	ldrb	r3, [r3, #0]
 8087d72:	b2db      	uxtb	r3, r3
 8087d74:	f003 0301 	and.w	r3, r3, #1
 8087d78:	2b00      	cmp	r3, #0
 8087d7a:	d001      	beq.n	8087d80 <SD_ioctl+0x28>
 8087d7c:	2303      	movs	r3, #3
 8087d7e:	e03c      	b.n	8087dfa <SD_ioctl+0xa2>

  switch (cmd)
 8087d80:	79bb      	ldrb	r3, [r7, #6]
 8087d82:	2b03      	cmp	r3, #3
 8087d84:	d834      	bhi.n	8087df0 <SD_ioctl+0x98>
 8087d86:	a201      	add	r2, pc, #4	; (adr r2, 8087d8c <SD_ioctl+0x34>)
 8087d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8087d8c:	08087d9d 	.word	0x08087d9d
 8087d90:	08087da5 	.word	0x08087da5
 8087d94:	08087dbd 	.word	0x08087dbd
 8087d98:	08087dd7 	.word	0x08087dd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8087d9c:	2300      	movs	r3, #0
 8087d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8087da2:	e028      	b.n	8087df6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8087da4:	f107 030c 	add.w	r3, r7, #12
 8087da8:	4618      	mov	r0, r3
 8087daa:	f7ff fedf 	bl	8087b6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8087dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8087db0:	683b      	ldr	r3, [r7, #0]
 8087db2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8087db4:	2300      	movs	r3, #0
 8087db6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8087dba:	e01c      	b.n	8087df6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8087dbc:	f107 030c 	add.w	r3, r7, #12
 8087dc0:	4618      	mov	r0, r3
 8087dc2:	f7ff fed3 	bl	8087b6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8087dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8087dc8:	b29a      	uxth	r2, r3
 8087dca:	683b      	ldr	r3, [r7, #0]
 8087dcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8087dce:	2300      	movs	r3, #0
 8087dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8087dd4:	e00f      	b.n	8087df6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8087dd6:	f107 030c 	add.w	r3, r7, #12
 8087dda:	4618      	mov	r0, r3
 8087ddc:	f7ff fec6 	bl	8087b6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8087de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8087de2:	0a5a      	lsrs	r2, r3, #9
 8087de4:	683b      	ldr	r3, [r7, #0]
 8087de6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8087de8:	2300      	movs	r3, #0
 8087dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8087dee:	e002      	b.n	8087df6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8087df0:	2304      	movs	r3, #4
 8087df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8087df6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8087dfa:	4618      	mov	r0, r3
 8087dfc:	3730      	adds	r7, #48	; 0x30
 8087dfe:	46bd      	mov	sp, r7
 8087e00:	bd80      	pop	{r7, pc}
 8087e02:	bf00      	nop
 8087e04:	20000089 	.word	0x20000089

08087e08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8087e08:	b480      	push	{r7}
 8087e0a:	b087      	sub	sp, #28
 8087e0c:	af00      	add	r7, sp, #0
 8087e0e:	60f8      	str	r0, [r7, #12]
 8087e10:	60b9      	str	r1, [r7, #8]
 8087e12:	4613      	mov	r3, r2
 8087e14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8087e16:	2301      	movs	r3, #1
 8087e18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8087e1a:	2300      	movs	r3, #0
 8087e1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8087e1e:	4b1f      	ldr	r3, [pc, #124]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e20:	7a5b      	ldrb	r3, [r3, #9]
 8087e22:	b2db      	uxtb	r3, r3
 8087e24:	2b00      	cmp	r3, #0
 8087e26:	d131      	bne.n	8087e8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8087e28:	4b1c      	ldr	r3, [pc, #112]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e2a:	7a5b      	ldrb	r3, [r3, #9]
 8087e2c:	b2db      	uxtb	r3, r3
 8087e2e:	461a      	mov	r2, r3
 8087e30:	4b1a      	ldr	r3, [pc, #104]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e32:	2100      	movs	r1, #0
 8087e34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8087e36:	4b19      	ldr	r3, [pc, #100]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e38:	7a5b      	ldrb	r3, [r3, #9]
 8087e3a:	b2db      	uxtb	r3, r3
 8087e3c:	4a17      	ldr	r2, [pc, #92]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e3e:	009b      	lsls	r3, r3, #2
 8087e40:	4413      	add	r3, r2
 8087e42:	68fa      	ldr	r2, [r7, #12]
 8087e44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8087e46:	4b15      	ldr	r3, [pc, #84]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e48:	7a5b      	ldrb	r3, [r3, #9]
 8087e4a:	b2db      	uxtb	r3, r3
 8087e4c:	461a      	mov	r2, r3
 8087e4e:	4b13      	ldr	r3, [pc, #76]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e50:	4413      	add	r3, r2
 8087e52:	79fa      	ldrb	r2, [r7, #7]
 8087e54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8087e56:	4b11      	ldr	r3, [pc, #68]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e58:	7a5b      	ldrb	r3, [r3, #9]
 8087e5a:	b2db      	uxtb	r3, r3
 8087e5c:	1c5a      	adds	r2, r3, #1
 8087e5e:	b2d1      	uxtb	r1, r2
 8087e60:	4a0e      	ldr	r2, [pc, #56]	; (8087e9c <FATFS_LinkDriverEx+0x94>)
 8087e62:	7251      	strb	r1, [r2, #9]
 8087e64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8087e66:	7dbb      	ldrb	r3, [r7, #22]
 8087e68:	3330      	adds	r3, #48	; 0x30
 8087e6a:	b2da      	uxtb	r2, r3
 8087e6c:	68bb      	ldr	r3, [r7, #8]
 8087e6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8087e70:	68bb      	ldr	r3, [r7, #8]
 8087e72:	3301      	adds	r3, #1
 8087e74:	223a      	movs	r2, #58	; 0x3a
 8087e76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8087e78:	68bb      	ldr	r3, [r7, #8]
 8087e7a:	3302      	adds	r3, #2
 8087e7c:	222f      	movs	r2, #47	; 0x2f
 8087e7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8087e80:	68bb      	ldr	r3, [r7, #8]
 8087e82:	3303      	adds	r3, #3
 8087e84:	2200      	movs	r2, #0
 8087e86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8087e88:	2300      	movs	r3, #0
 8087e8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8087e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8087e8e:	4618      	mov	r0, r3
 8087e90:	371c      	adds	r7, #28
 8087e92:	46bd      	mov	sp, r7
 8087e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087e98:	4770      	bx	lr
 8087e9a:	bf00      	nop
 8087e9c:	2000080c 	.word	0x2000080c

08087ea0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8087ea0:	b580      	push	{r7, lr}
 8087ea2:	b082      	sub	sp, #8
 8087ea4:	af00      	add	r7, sp, #0
 8087ea6:	6078      	str	r0, [r7, #4]
 8087ea8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8087eaa:	2200      	movs	r2, #0
 8087eac:	6839      	ldr	r1, [r7, #0]
 8087eae:	6878      	ldr	r0, [r7, #4]
 8087eb0:	f7ff ffaa 	bl	8087e08 <FATFS_LinkDriverEx>
 8087eb4:	4603      	mov	r3, r0
}
 8087eb6:	4618      	mov	r0, r3
 8087eb8:	3708      	adds	r7, #8
 8087eba:	46bd      	mov	sp, r7
 8087ebc:	bd80      	pop	{r7, pc}

08087ebe <crcCalculation>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, status ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

uint16_t crcCalculation(uint8_t *rs485_data, int in_dx)
{
 8087ebe:	b480      	push	{r7}
 8087ec0:	b087      	sub	sp, #28
 8087ec2:	af00      	add	r7, sp, #0
 8087ec4:	6078      	str	r0, [r7, #4]
 8087ec6:	6039      	str	r1, [r7, #0]
	int i, j;
	uint16_t crc = 0xFFFF;
 8087ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8087ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t crctemp;
	for (i = 0; i < in_dx; i++)
 8087ece:	2300      	movs	r3, #0
 8087ed0:	617b      	str	r3, [r7, #20]
 8087ed2:	e026      	b.n	8087f22 <crcCalculation+0x64>
	{
		crc = rs485_data[i] ^ crc;
 8087ed4:	697b      	ldr	r3, [r7, #20]
 8087ed6:	687a      	ldr	r2, [r7, #4]
 8087ed8:	4413      	add	r3, r2
 8087eda:	781b      	ldrb	r3, [r3, #0]
 8087edc:	b29a      	uxth	r2, r3
 8087ede:	89fb      	ldrh	r3, [r7, #14]
 8087ee0:	4053      	eors	r3, r2
 8087ee2:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 8087ee4:	2301      	movs	r3, #1
 8087ee6:	613b      	str	r3, [r7, #16]
 8087ee8:	e015      	b.n	8087f16 <crcCalculation+0x58>
		{
			crctemp = crc / 2;
 8087eea:	89fb      	ldrh	r3, [r7, #14]
 8087eec:	085b      	lsrs	r3, r3, #1
 8087eee:	81bb      	strh	r3, [r7, #12]
			if (crc - crctemp * 2 == 1)
 8087ef0:	89fa      	ldrh	r2, [r7, #14]
 8087ef2:	89bb      	ldrh	r3, [r7, #12]
 8087ef4:	005b      	lsls	r3, r3, #1
 8087ef6:	1ad3      	subs	r3, r2, r3
 8087ef8:	2b01      	cmp	r3, #1
 8087efa:	d107      	bne.n	8087f0c <crcCalculation+0x4e>
			{
				crc = crctemp ^ 0xA001;
 8087efc:	89bb      	ldrh	r3, [r7, #12]
 8087efe:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8087f02:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8087f06:	43db      	mvns	r3, r3
 8087f08:	81fb      	strh	r3, [r7, #14]
 8087f0a:	e001      	b.n	8087f10 <crcCalculation+0x52>
			}
			else
			{
				crc = crctemp;
 8087f0c:	89bb      	ldrh	r3, [r7, #12]
 8087f0e:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 8087f10:	693b      	ldr	r3, [r7, #16]
 8087f12:	3301      	adds	r3, #1
 8087f14:	613b      	str	r3, [r7, #16]
 8087f16:	693b      	ldr	r3, [r7, #16]
 8087f18:	2b08      	cmp	r3, #8
 8087f1a:	dde6      	ble.n	8087eea <crcCalculation+0x2c>
	for (i = 0; i < in_dx; i++)
 8087f1c:	697b      	ldr	r3, [r7, #20]
 8087f1e:	3301      	adds	r3, #1
 8087f20:	617b      	str	r3, [r7, #20]
 8087f22:	697a      	ldr	r2, [r7, #20]
 8087f24:	683b      	ldr	r3, [r7, #0]
 8087f26:	429a      	cmp	r2, r3
 8087f28:	dbd4      	blt.n	8087ed4 <crcCalculation+0x16>
			}
		}
	}
	return crc;
 8087f2a:	89fb      	ldrh	r3, [r7, #14]
	//  crctemp1 = crc/256;
	//  crctemp2 = crc*256;
	//  crc= crctemp1 + crctemp2;
	//	crc1 =crc>>8;
	//	crc2=(uint8_t)crc;
}
 8087f2c:	4618      	mov	r0, r3
 8087f2e:	371c      	adds	r7, #28
 8087f30:	46bd      	mov	sp, r7
 8087f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087f36:	4770      	bx	lr

08087f38 <RS485_transmit>:

void RS485_transmit(UART_HandleTypeDef *huart, RS485Query_t p_RS485Query)
{
 8087f38:	b580      	push	{r7, lr}
 8087f3a:	b088      	sub	sp, #32
 8087f3c:	af00      	add	r7, sp, #0
 8087f3e:	60f8      	str	r0, [r7, #12]
 8087f40:	4638      	mov	r0, r7
 8087f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t queryData[10];
	uint8_t ind = 0;
 8087f46:	2300      	movs	r3, #0
 8087f48:	77fb      	strb	r3, [r7, #31]
	queryData[ind++] = p_RS485Query.slaveAddress;
 8087f4a:	7ffb      	ldrb	r3, [r7, #31]
 8087f4c:	1c5a      	adds	r2, r3, #1
 8087f4e:	77fa      	strb	r2, [r7, #31]
 8087f50:	783a      	ldrb	r2, [r7, #0]
 8087f52:	3320      	adds	r3, #32
 8087f54:	443b      	add	r3, r7
 8087f56:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = p_RS485Query.mbFunction;
 8087f5a:	7ffb      	ldrb	r3, [r7, #31]
 8087f5c:	1c5a      	adds	r2, r3, #1
 8087f5e:	77fa      	strb	r2, [r7, #31]
 8087f60:	787a      	ldrb	r2, [r7, #1]
 8087f62:	3320      	adds	r3, #32
 8087f64:	443b      	add	r3, r7
 8087f66:	f803 2c0c 	strb.w	r2, [r3, #-12]
	if ((p_RS485Query.mbFunction == Read_CoilStatus) || (p_RS485Query.mbFunction == Read_InputStatus) || (p_RS485Query.mbFunction == Read_HoldingRegister) || (p_RS485Query.mbFunction == Read_InputRegister) || (p_RS485Query.mbFunction == Force_SingleCoil) || (p_RS485Query.mbFunction == Preset_SingleRegister))
 8087f6a:	787b      	ldrb	r3, [r7, #1]
 8087f6c:	2b01      	cmp	r3, #1
 8087f6e:	d00e      	beq.n	8087f8e <RS485_transmit+0x56>
 8087f70:	787b      	ldrb	r3, [r7, #1]
 8087f72:	2b02      	cmp	r3, #2
 8087f74:	d00b      	beq.n	8087f8e <RS485_transmit+0x56>
 8087f76:	787b      	ldrb	r3, [r7, #1]
 8087f78:	2b03      	cmp	r3, #3
 8087f7a:	d008      	beq.n	8087f8e <RS485_transmit+0x56>
 8087f7c:	787b      	ldrb	r3, [r7, #1]
 8087f7e:	2b04      	cmp	r3, #4
 8087f80:	d005      	beq.n	8087f8e <RS485_transmit+0x56>
 8087f82:	787b      	ldrb	r3, [r7, #1]
 8087f84:	2b05      	cmp	r3, #5
 8087f86:	d002      	beq.n	8087f8e <RS485_transmit+0x56>
 8087f88:	787b      	ldrb	r3, [r7, #1]
 8087f8a:	2b06      	cmp	r3, #6
 8087f8c:	d127      	bne.n	8087fde <RS485_transmit+0xa6>
	{
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress >> 8);
 8087f8e:	887b      	ldrh	r3, [r7, #2]
 8087f90:	0a1b      	lsrs	r3, r3, #8
 8087f92:	b29a      	uxth	r2, r3
 8087f94:	7ffb      	ldrb	r3, [r7, #31]
 8087f96:	1c59      	adds	r1, r3, #1
 8087f98:	77f9      	strb	r1, [r7, #31]
 8087f9a:	b2d2      	uxtb	r2, r2
 8087f9c:	3320      	adds	r3, #32
 8087f9e:	443b      	add	r3, r7
 8087fa0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress & 0xFF);
 8087fa4:	887a      	ldrh	r2, [r7, #2]
 8087fa6:	7ffb      	ldrb	r3, [r7, #31]
 8087fa8:	1c59      	adds	r1, r3, #1
 8087faa:	77f9      	strb	r1, [r7, #31]
 8087fac:	b2d2      	uxtb	r2, r2
 8087fae:	3320      	adds	r3, #32
 8087fb0:	443b      	add	r3, r7
 8087fb2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount >> 8);
 8087fb6:	893b      	ldrh	r3, [r7, #8]
 8087fb8:	0a1b      	lsrs	r3, r3, #8
 8087fba:	b29a      	uxth	r2, r3
 8087fbc:	7ffb      	ldrb	r3, [r7, #31]
 8087fbe:	1c59      	adds	r1, r3, #1
 8087fc0:	77f9      	strb	r1, [r7, #31]
 8087fc2:	b2d2      	uxtb	r2, r2
 8087fc4:	3320      	adds	r3, #32
 8087fc6:	443b      	add	r3, r7
 8087fc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount & 0xFF);
 8087fcc:	893a      	ldrh	r2, [r7, #8]
 8087fce:	7ffb      	ldrb	r3, [r7, #31]
 8087fd0:	1c59      	adds	r1, r3, #1
 8087fd2:	77f9      	strb	r1, [r7, #31]
 8087fd4:	b2d2      	uxtb	r2, r2
 8087fd6:	3320      	adds	r3, #32
 8087fd8:	443b      	add	r3, r7
 8087fda:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}
	else if ((p_RS485Query.mbFunction == Read_ExceptionStatus) || (p_RS485Query.mbFunction == Fetch_CommEventCounter) || (p_RS485Query.mbFunction == Fetch_CommEventLog))
	{
	}
	p_RS485Query.crc = crcCalculation(queryData, ind);
 8087fde:	7ffa      	ldrb	r2, [r7, #31]
 8087fe0:	f107 0314 	add.w	r3, r7, #20
 8087fe4:	4611      	mov	r1, r2
 8087fe6:	4618      	mov	r0, r3
 8087fe8:	f7ff ff69 	bl	8087ebe <crcCalculation>
 8087fec:	4603      	mov	r3, r0
 8087fee:	817b      	strh	r3, [r7, #10]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc & 0xFF);
 8087ff0:	897a      	ldrh	r2, [r7, #10]
 8087ff2:	7ffb      	ldrb	r3, [r7, #31]
 8087ff4:	1c59      	adds	r1, r3, #1
 8087ff6:	77f9      	strb	r1, [r7, #31]
 8087ff8:	b2d2      	uxtb	r2, r2
 8087ffa:	3320      	adds	r3, #32
 8087ffc:	443b      	add	r3, r7
 8087ffe:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc >> 8);
 8088002:	897b      	ldrh	r3, [r7, #10]
 8088004:	0a1b      	lsrs	r3, r3, #8
 8088006:	b29a      	uxth	r2, r3
 8088008:	7ffb      	ldrb	r3, [r7, #31]
 808800a:	1c59      	adds	r1, r3, #1
 808800c:	77f9      	strb	r1, [r7, #31]
 808800e:	b2d2      	uxtb	r2, r2
 8088010:	3320      	adds	r3, #32
 8088012:	443b      	add	r3, r7
 8088014:	f803 2c0c 	strb.w	r2, [r3, #-12]
	//	RS485_EnablePin(TRANSMIT);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8088018:	2201      	movs	r2, #1
 808801a:	2108      	movs	r1, #8
 808801c:	480a      	ldr	r0, [pc, #40]	; (8088048 <RS485_transmit+0x110>)
 808801e:	f7fb f93b 	bl	8083298 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(huart, (uint8_t *)queryData, ind, 1000);
 8088022:	7ffb      	ldrb	r3, [r7, #31]
 8088024:	b29a      	uxth	r2, r3
 8088026:	f107 0114 	add.w	r1, r7, #20
 808802a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808802e:	68f8      	ldr	r0, [r7, #12]
 8088030:	f7fd fd07 	bl	8085a42 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8088034:	2200      	movs	r2, #0
 8088036:	2108      	movs	r1, #8
 8088038:	4803      	ldr	r0, [pc, #12]	; (8088048 <RS485_transmit+0x110>)
 808803a:	f7fb f92d 	bl	8083298 <HAL_GPIO_WritePin>
	//	RS485_EnablePin(RECEIVE);
}
 808803e:	bf00      	nop
 8088040:	3720      	adds	r7, #32
 8088042:	46bd      	mov	sp, r7
 8088044:	bd80      	pop	{r7, pc}
 8088046:	bf00      	nop
 8088048:	40020800 	.word	0x40020800

0808804c <RS485_Master_Receive>:
		}
	}
	return rs485;
}
void RS485_Master_Receive(char Master_ReceivedBuff[], int length)
{
 808804c:	b580      	push	{r7, lr}
 808804e:	b088      	sub	sp, #32
 8088050:	af00      	add	r7, sp, #0
 8088052:	6078      	str	r0, [r7, #4]
 8088054:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(&RS485_UART, (uint8_t *)UART6_ReceivedBuff, length, 1000);
 8088056:	683b      	ldr	r3, [r7, #0]
 8088058:	b29a      	uxth	r2, r3
 808805a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808805e:	4935      	ldr	r1, [pc, #212]	; (8088134 <RS485_Master_Receive+0xe8>)
 8088060:	4835      	ldr	r0, [pc, #212]	; (8088138 <RS485_Master_Receive+0xec>)
 8088062:	f7fd fd80 	bl	8085b66 <HAL_UART_Receive>
	for (int s = 0; s < length; s++)
 8088066:	2300      	movs	r3, #0
 8088068:	61fb      	str	r3, [r7, #28]
 808806a:	e05a      	b.n	8088122 <RS485_Master_Receive+0xd6>
	{
		int index_Adr = s;
 808806c:	69fb      	ldr	r3, [r7, #28]
 808806e:	613b      	str	r3, [r7, #16]
		int index_Func = (s + 1) % length;
 8088070:	69fb      	ldr	r3, [r7, #28]
 8088072:	3301      	adds	r3, #1
 8088074:	683a      	ldr	r2, [r7, #0]
 8088076:	fb93 f2f2 	sdiv	r2, r3, r2
 808807a:	6839      	ldr	r1, [r7, #0]
 808807c:	fb01 f202 	mul.w	r2, r1, r2
 8088080:	1a9b      	subs	r3, r3, r2
 8088082:	60fb      	str	r3, [r7, #12]
		// int index_Reg = (s + 3) % length;
		if (UART6_ReceivedBuff[index_Adr] == 0x01 && UART6_ReceivedBuff[index_Func] == 0x03)
 8088084:	4a2b      	ldr	r2, [pc, #172]	; (8088134 <RS485_Master_Receive+0xe8>)
 8088086:	693b      	ldr	r3, [r7, #16]
 8088088:	4413      	add	r3, r2
 808808a:	781b      	ldrb	r3, [r3, #0]
 808808c:	2b01      	cmp	r3, #1
 808808e:	d11f      	bne.n	80880d0 <RS485_Master_Receive+0x84>
 8088090:	4a28      	ldr	r2, [pc, #160]	; (8088134 <RS485_Master_Receive+0xe8>)
 8088092:	68fb      	ldr	r3, [r7, #12]
 8088094:	4413      	add	r3, r2
 8088096:	781b      	ldrb	r3, [r3, #0]
 8088098:	2b03      	cmp	r3, #3
 808809a:	d119      	bne.n	80880d0 <RS485_Master_Receive+0x84>
		{
			for (int v = 0; v < length; v++)
 808809c:	2300      	movs	r3, #0
 808809e:	61bb      	str	r3, [r7, #24]
 80880a0:	e012      	b.n	80880c8 <RS485_Master_Receive+0x7c>
			{
				Master_ReceivedBuff[v] = UART6_ReceivedBuff[(v + index_Adr) % length];
 80880a2:	69ba      	ldr	r2, [r7, #24]
 80880a4:	693b      	ldr	r3, [r7, #16]
 80880a6:	4413      	add	r3, r2
 80880a8:	683a      	ldr	r2, [r7, #0]
 80880aa:	fb93 f2f2 	sdiv	r2, r3, r2
 80880ae:	6839      	ldr	r1, [r7, #0]
 80880b0:	fb01 f202 	mul.w	r2, r1, r2
 80880b4:	1a9a      	subs	r2, r3, r2
 80880b6:	69bb      	ldr	r3, [r7, #24]
 80880b8:	6879      	ldr	r1, [r7, #4]
 80880ba:	440b      	add	r3, r1
 80880bc:	491d      	ldr	r1, [pc, #116]	; (8088134 <RS485_Master_Receive+0xe8>)
 80880be:	5c8a      	ldrb	r2, [r1, r2]
 80880c0:	701a      	strb	r2, [r3, #0]
			for (int v = 0; v < length; v++)
 80880c2:	69bb      	ldr	r3, [r7, #24]
 80880c4:	3301      	adds	r3, #1
 80880c6:	61bb      	str	r3, [r7, #24]
 80880c8:	69ba      	ldr	r2, [r7, #24]
 80880ca:	683b      	ldr	r3, [r7, #0]
 80880cc:	429a      	cmp	r2, r3
 80880ce:	dbe8      	blt.n	80880a2 <RS485_Master_Receive+0x56>
			}
		}
		if (UART6_ReceivedBuff[index_Adr] == 0x01 && UART6_ReceivedBuff[index_Func] == 0x01)
 80880d0:	4a18      	ldr	r2, [pc, #96]	; (8088134 <RS485_Master_Receive+0xe8>)
 80880d2:	693b      	ldr	r3, [r7, #16]
 80880d4:	4413      	add	r3, r2
 80880d6:	781b      	ldrb	r3, [r3, #0]
 80880d8:	2b01      	cmp	r3, #1
 80880da:	d11f      	bne.n	808811c <RS485_Master_Receive+0xd0>
 80880dc:	4a15      	ldr	r2, [pc, #84]	; (8088134 <RS485_Master_Receive+0xe8>)
 80880de:	68fb      	ldr	r3, [r7, #12]
 80880e0:	4413      	add	r3, r2
 80880e2:	781b      	ldrb	r3, [r3, #0]
 80880e4:	2b01      	cmp	r3, #1
 80880e6:	d119      	bne.n	808811c <RS485_Master_Receive+0xd0>
		{
			for (int v = 0; v < length; v++)
 80880e8:	2300      	movs	r3, #0
 80880ea:	617b      	str	r3, [r7, #20]
 80880ec:	e012      	b.n	8088114 <RS485_Master_Receive+0xc8>
			{
				Master_ReceivedBuff[v] = UART6_ReceivedBuff[(v + index_Adr) % length];
 80880ee:	697a      	ldr	r2, [r7, #20]
 80880f0:	693b      	ldr	r3, [r7, #16]
 80880f2:	4413      	add	r3, r2
 80880f4:	683a      	ldr	r2, [r7, #0]
 80880f6:	fb93 f2f2 	sdiv	r2, r3, r2
 80880fa:	6839      	ldr	r1, [r7, #0]
 80880fc:	fb01 f202 	mul.w	r2, r1, r2
 8088100:	1a9a      	subs	r2, r3, r2
 8088102:	697b      	ldr	r3, [r7, #20]
 8088104:	6879      	ldr	r1, [r7, #4]
 8088106:	440b      	add	r3, r1
 8088108:	490a      	ldr	r1, [pc, #40]	; (8088134 <RS485_Master_Receive+0xe8>)
 808810a:	5c8a      	ldrb	r2, [r1, r2]
 808810c:	701a      	strb	r2, [r3, #0]
			for (int v = 0; v < length; v++)
 808810e:	697b      	ldr	r3, [r7, #20]
 8088110:	3301      	adds	r3, #1
 8088112:	617b      	str	r3, [r7, #20]
 8088114:	697a      	ldr	r2, [r7, #20]
 8088116:	683b      	ldr	r3, [r7, #0]
 8088118:	429a      	cmp	r2, r3
 808811a:	dbe8      	blt.n	80880ee <RS485_Master_Receive+0xa2>
	for (int s = 0; s < length; s++)
 808811c:	69fb      	ldr	r3, [r7, #28]
 808811e:	3301      	adds	r3, #1
 8088120:	61fb      	str	r3, [r7, #28]
 8088122:	69fa      	ldr	r2, [r7, #28]
 8088124:	683b      	ldr	r3, [r7, #0]
 8088126:	429a      	cmp	r2, r3
 8088128:	dba0      	blt.n	808806c <RS485_Master_Receive+0x20>
			}
		}
	}
}
 808812a:	bf00      	nop
 808812c:	bf00      	nop
 808812e:	3720      	adds	r7, #32
 8088130:	46bd      	mov	sp, r7
 8088132:	bd80      	pop	{r7, pc}
 8088134:	20000818 	.word	0x20000818
 8088138:	200003e0 	.word	0x200003e0

0808813c <SIM_RxEvent>:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)rxBuffer, RX_LEN);
	__HAL_DMA_DISABLE_IT(&SIM_UART_DMA, DMA_IT_HT);
}

void SIM_RxEvent(void)
{
 808813c:	b580      	push	{r7, lr}
 808813e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *)rxBuffer, RX_LEN);
 8088140:	f44f 720c 	mov.w	r2, #560	; 0x230
 8088144:	490d      	ldr	r1, [pc, #52]	; (808817c <SIM_RxEvent+0x40>)
 8088146:	480e      	ldr	r0, [pc, #56]	; (8088180 <SIM_RxEvent+0x44>)
 8088148:	f7fd fddf 	bl	8085d0a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&SIM_UART_DMA, DMA_IT_HT);
 808814c:	4b0d      	ldr	r3, [pc, #52]	; (8088184 <SIM_RxEvent+0x48>)
 808814e:	681b      	ldr	r3, [r3, #0]
 8088150:	681a      	ldr	r2, [r3, #0]
 8088152:	4b0c      	ldr	r3, [pc, #48]	; (8088184 <SIM_RxEvent+0x48>)
 8088154:	681b      	ldr	r3, [r3, #0]
 8088156:	f022 0208 	bic.w	r2, r2, #8
 808815a:	601a      	str	r2, [r3, #0]

	RxFlag = 1;
 808815c:	4b0a      	ldr	r3, [pc, #40]	; (8088188 <SIM_RxEvent+0x4c>)
 808815e:	2201      	movs	r2, #1
 8088160:	701a      	strb	r2, [r3, #0]
	if (strstr(rxBuffer, "+CMT:") != NULL)
 8088162:	490a      	ldr	r1, [pc, #40]	; (808818c <SIM_RxEvent+0x50>)
 8088164:	4805      	ldr	r0, [pc, #20]	; (808817c <SIM_RxEvent+0x40>)
 8088166:	f000 fda8 	bl	8088cba <strstr>
 808816a:	4603      	mov	r3, r0
 808816c:	2b00      	cmp	r3, #0
 808816e:	d002      	beq.n	8088176 <SIM_RxEvent+0x3a>
	{
		smsFlag = true;
 8088170:	4b07      	ldr	r3, [pc, #28]	; (8088190 <SIM_RxEvent+0x54>)
 8088172:	2201      	movs	r2, #1
 8088174:	701a      	strb	r2, [r3, #0]
	}
}
 8088176:	bf00      	nop
 8088178:	bd80      	pop	{r7, pc}
 808817a:	bf00      	nop
 808817c:	20000824 	.word	0x20000824
 8088180:	20000358 	.word	0x20000358
 8088184:	20000484 	.word	0x20000484
 8088188:	20000821 	.word	0x20000821
 808818c:	0808b06c 	.word	0x0808b06c
 8088190:	20000822 	.word	0x20000822

08088194 <__cvt>:
 8088194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8088198:	ec55 4b10 	vmov	r4, r5, d0
 808819c:	2d00      	cmp	r5, #0
 808819e:	460e      	mov	r6, r1
 80881a0:	4619      	mov	r1, r3
 80881a2:	462b      	mov	r3, r5
 80881a4:	bfbb      	ittet	lt
 80881a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80881aa:	461d      	movlt	r5, r3
 80881ac:	2300      	movge	r3, #0
 80881ae:	232d      	movlt	r3, #45	; 0x2d
 80881b0:	700b      	strb	r3, [r1, #0]
 80881b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80881b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80881b8:	4691      	mov	r9, r2
 80881ba:	f023 0820 	bic.w	r8, r3, #32
 80881be:	bfbc      	itt	lt
 80881c0:	4622      	movlt	r2, r4
 80881c2:	4614      	movlt	r4, r2
 80881c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80881c8:	d005      	beq.n	80881d6 <__cvt+0x42>
 80881ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80881ce:	d100      	bne.n	80881d2 <__cvt+0x3e>
 80881d0:	3601      	adds	r6, #1
 80881d2:	2102      	movs	r1, #2
 80881d4:	e000      	b.n	80881d8 <__cvt+0x44>
 80881d6:	2103      	movs	r1, #3
 80881d8:	ab03      	add	r3, sp, #12
 80881da:	9301      	str	r3, [sp, #4]
 80881dc:	ab02      	add	r3, sp, #8
 80881de:	9300      	str	r3, [sp, #0]
 80881e0:	ec45 4b10 	vmov	d0, r4, r5
 80881e4:	4653      	mov	r3, sl
 80881e6:	4632      	mov	r2, r6
 80881e8:	f000 feaa 	bl	8088f40 <_dtoa_r>
 80881ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80881f0:	4607      	mov	r7, r0
 80881f2:	d102      	bne.n	80881fa <__cvt+0x66>
 80881f4:	f019 0f01 	tst.w	r9, #1
 80881f8:	d022      	beq.n	8088240 <__cvt+0xac>
 80881fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80881fe:	eb07 0906 	add.w	r9, r7, r6
 8088202:	d110      	bne.n	8088226 <__cvt+0x92>
 8088204:	783b      	ldrb	r3, [r7, #0]
 8088206:	2b30      	cmp	r3, #48	; 0x30
 8088208:	d10a      	bne.n	8088220 <__cvt+0x8c>
 808820a:	2200      	movs	r2, #0
 808820c:	2300      	movs	r3, #0
 808820e:	4620      	mov	r0, r4
 8088210:	4629      	mov	r1, r5
 8088212:	f7f8 fc59 	bl	8080ac8 <__aeabi_dcmpeq>
 8088216:	b918      	cbnz	r0, 8088220 <__cvt+0x8c>
 8088218:	f1c6 0601 	rsb	r6, r6, #1
 808821c:	f8ca 6000 	str.w	r6, [sl]
 8088220:	f8da 3000 	ldr.w	r3, [sl]
 8088224:	4499      	add	r9, r3
 8088226:	2200      	movs	r2, #0
 8088228:	2300      	movs	r3, #0
 808822a:	4620      	mov	r0, r4
 808822c:	4629      	mov	r1, r5
 808822e:	f7f8 fc4b 	bl	8080ac8 <__aeabi_dcmpeq>
 8088232:	b108      	cbz	r0, 8088238 <__cvt+0xa4>
 8088234:	f8cd 900c 	str.w	r9, [sp, #12]
 8088238:	2230      	movs	r2, #48	; 0x30
 808823a:	9b03      	ldr	r3, [sp, #12]
 808823c:	454b      	cmp	r3, r9
 808823e:	d307      	bcc.n	8088250 <__cvt+0xbc>
 8088240:	9b03      	ldr	r3, [sp, #12]
 8088242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8088244:	1bdb      	subs	r3, r3, r7
 8088246:	4638      	mov	r0, r7
 8088248:	6013      	str	r3, [r2, #0]
 808824a:	b004      	add	sp, #16
 808824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088250:	1c59      	adds	r1, r3, #1
 8088252:	9103      	str	r1, [sp, #12]
 8088254:	701a      	strb	r2, [r3, #0]
 8088256:	e7f0      	b.n	808823a <__cvt+0xa6>

08088258 <__exponent>:
 8088258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808825a:	4603      	mov	r3, r0
 808825c:	2900      	cmp	r1, #0
 808825e:	bfb8      	it	lt
 8088260:	4249      	neglt	r1, r1
 8088262:	f803 2b02 	strb.w	r2, [r3], #2
 8088266:	bfb4      	ite	lt
 8088268:	222d      	movlt	r2, #45	; 0x2d
 808826a:	222b      	movge	r2, #43	; 0x2b
 808826c:	2909      	cmp	r1, #9
 808826e:	7042      	strb	r2, [r0, #1]
 8088270:	dd2a      	ble.n	80882c8 <__exponent+0x70>
 8088272:	f10d 0207 	add.w	r2, sp, #7
 8088276:	4617      	mov	r7, r2
 8088278:	260a      	movs	r6, #10
 808827a:	4694      	mov	ip, r2
 808827c:	fb91 f5f6 	sdiv	r5, r1, r6
 8088280:	fb06 1415 	mls	r4, r6, r5, r1
 8088284:	3430      	adds	r4, #48	; 0x30
 8088286:	f80c 4c01 	strb.w	r4, [ip, #-1]
 808828a:	460c      	mov	r4, r1
 808828c:	2c63      	cmp	r4, #99	; 0x63
 808828e:	f102 32ff 	add.w	r2, r2, #4294967295
 8088292:	4629      	mov	r1, r5
 8088294:	dcf1      	bgt.n	808827a <__exponent+0x22>
 8088296:	3130      	adds	r1, #48	; 0x30
 8088298:	f1ac 0402 	sub.w	r4, ip, #2
 808829c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80882a0:	1c41      	adds	r1, r0, #1
 80882a2:	4622      	mov	r2, r4
 80882a4:	42ba      	cmp	r2, r7
 80882a6:	d30a      	bcc.n	80882be <__exponent+0x66>
 80882a8:	f10d 0209 	add.w	r2, sp, #9
 80882ac:	eba2 020c 	sub.w	r2, r2, ip
 80882b0:	42bc      	cmp	r4, r7
 80882b2:	bf88      	it	hi
 80882b4:	2200      	movhi	r2, #0
 80882b6:	4413      	add	r3, r2
 80882b8:	1a18      	subs	r0, r3, r0
 80882ba:	b003      	add	sp, #12
 80882bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80882be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80882c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80882c6:	e7ed      	b.n	80882a4 <__exponent+0x4c>
 80882c8:	2330      	movs	r3, #48	; 0x30
 80882ca:	3130      	adds	r1, #48	; 0x30
 80882cc:	7083      	strb	r3, [r0, #2]
 80882ce:	70c1      	strb	r1, [r0, #3]
 80882d0:	1d03      	adds	r3, r0, #4
 80882d2:	e7f1      	b.n	80882b8 <__exponent+0x60>

080882d4 <_printf_float>:
 80882d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80882d8:	ed2d 8b02 	vpush	{d8}
 80882dc:	b08d      	sub	sp, #52	; 0x34
 80882de:	460c      	mov	r4, r1
 80882e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80882e4:	4616      	mov	r6, r2
 80882e6:	461f      	mov	r7, r3
 80882e8:	4605      	mov	r5, r0
 80882ea:	f000 fcfd 	bl	8088ce8 <_localeconv_r>
 80882ee:	f8d0 a000 	ldr.w	sl, [r0]
 80882f2:	4650      	mov	r0, sl
 80882f4:	f7f7 ffbc 	bl	8080270 <strlen>
 80882f8:	2300      	movs	r3, #0
 80882fa:	930a      	str	r3, [sp, #40]	; 0x28
 80882fc:	6823      	ldr	r3, [r4, #0]
 80882fe:	9305      	str	r3, [sp, #20]
 8088300:	f8d8 3000 	ldr.w	r3, [r8]
 8088304:	f894 b018 	ldrb.w	fp, [r4, #24]
 8088308:	3307      	adds	r3, #7
 808830a:	f023 0307 	bic.w	r3, r3, #7
 808830e:	f103 0208 	add.w	r2, r3, #8
 8088312:	f8c8 2000 	str.w	r2, [r8]
 8088316:	e9d3 8900 	ldrd	r8, r9, [r3]
 808831a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808831e:	9307      	str	r3, [sp, #28]
 8088320:	f8cd 8018 	str.w	r8, [sp, #24]
 8088324:	ee08 0a10 	vmov	s16, r0
 8088328:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 808832c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8088330:	4b9e      	ldr	r3, [pc, #632]	; (80885ac <_printf_float+0x2d8>)
 8088332:	f04f 32ff 	mov.w	r2, #4294967295
 8088336:	f7f8 fbf9 	bl	8080b2c <__aeabi_dcmpun>
 808833a:	bb88      	cbnz	r0, 80883a0 <_printf_float+0xcc>
 808833c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8088340:	4b9a      	ldr	r3, [pc, #616]	; (80885ac <_printf_float+0x2d8>)
 8088342:	f04f 32ff 	mov.w	r2, #4294967295
 8088346:	f7f8 fbd3 	bl	8080af0 <__aeabi_dcmple>
 808834a:	bb48      	cbnz	r0, 80883a0 <_printf_float+0xcc>
 808834c:	2200      	movs	r2, #0
 808834e:	2300      	movs	r3, #0
 8088350:	4640      	mov	r0, r8
 8088352:	4649      	mov	r1, r9
 8088354:	f7f8 fbc2 	bl	8080adc <__aeabi_dcmplt>
 8088358:	b110      	cbz	r0, 8088360 <_printf_float+0x8c>
 808835a:	232d      	movs	r3, #45	; 0x2d
 808835c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8088360:	4a93      	ldr	r2, [pc, #588]	; (80885b0 <_printf_float+0x2dc>)
 8088362:	4b94      	ldr	r3, [pc, #592]	; (80885b4 <_printf_float+0x2e0>)
 8088364:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8088368:	bf94      	ite	ls
 808836a:	4690      	movls	r8, r2
 808836c:	4698      	movhi	r8, r3
 808836e:	2303      	movs	r3, #3
 8088370:	6123      	str	r3, [r4, #16]
 8088372:	9b05      	ldr	r3, [sp, #20]
 8088374:	f023 0304 	bic.w	r3, r3, #4
 8088378:	6023      	str	r3, [r4, #0]
 808837a:	f04f 0900 	mov.w	r9, #0
 808837e:	9700      	str	r7, [sp, #0]
 8088380:	4633      	mov	r3, r6
 8088382:	aa0b      	add	r2, sp, #44	; 0x2c
 8088384:	4621      	mov	r1, r4
 8088386:	4628      	mov	r0, r5
 8088388:	f000 f9da 	bl	8088740 <_printf_common>
 808838c:	3001      	adds	r0, #1
 808838e:	f040 8090 	bne.w	80884b2 <_printf_float+0x1de>
 8088392:	f04f 30ff 	mov.w	r0, #4294967295
 8088396:	b00d      	add	sp, #52	; 0x34
 8088398:	ecbd 8b02 	vpop	{d8}
 808839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80883a0:	4642      	mov	r2, r8
 80883a2:	464b      	mov	r3, r9
 80883a4:	4640      	mov	r0, r8
 80883a6:	4649      	mov	r1, r9
 80883a8:	f7f8 fbc0 	bl	8080b2c <__aeabi_dcmpun>
 80883ac:	b140      	cbz	r0, 80883c0 <_printf_float+0xec>
 80883ae:	464b      	mov	r3, r9
 80883b0:	2b00      	cmp	r3, #0
 80883b2:	bfbc      	itt	lt
 80883b4:	232d      	movlt	r3, #45	; 0x2d
 80883b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80883ba:	4a7f      	ldr	r2, [pc, #508]	; (80885b8 <_printf_float+0x2e4>)
 80883bc:	4b7f      	ldr	r3, [pc, #508]	; (80885bc <_printf_float+0x2e8>)
 80883be:	e7d1      	b.n	8088364 <_printf_float+0x90>
 80883c0:	6863      	ldr	r3, [r4, #4]
 80883c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80883c6:	9206      	str	r2, [sp, #24]
 80883c8:	1c5a      	adds	r2, r3, #1
 80883ca:	d13f      	bne.n	808844c <_printf_float+0x178>
 80883cc:	2306      	movs	r3, #6
 80883ce:	6063      	str	r3, [r4, #4]
 80883d0:	9b05      	ldr	r3, [sp, #20]
 80883d2:	6861      	ldr	r1, [r4, #4]
 80883d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80883d8:	2300      	movs	r3, #0
 80883da:	9303      	str	r3, [sp, #12]
 80883dc:	ab0a      	add	r3, sp, #40	; 0x28
 80883de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80883e2:	ab09      	add	r3, sp, #36	; 0x24
 80883e4:	ec49 8b10 	vmov	d0, r8, r9
 80883e8:	9300      	str	r3, [sp, #0]
 80883ea:	6022      	str	r2, [r4, #0]
 80883ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80883f0:	4628      	mov	r0, r5
 80883f2:	f7ff fecf 	bl	8088194 <__cvt>
 80883f6:	9b06      	ldr	r3, [sp, #24]
 80883f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80883fa:	2b47      	cmp	r3, #71	; 0x47
 80883fc:	4680      	mov	r8, r0
 80883fe:	d108      	bne.n	8088412 <_printf_float+0x13e>
 8088400:	1cc8      	adds	r0, r1, #3
 8088402:	db02      	blt.n	808840a <_printf_float+0x136>
 8088404:	6863      	ldr	r3, [r4, #4]
 8088406:	4299      	cmp	r1, r3
 8088408:	dd41      	ble.n	808848e <_printf_float+0x1ba>
 808840a:	f1ab 0302 	sub.w	r3, fp, #2
 808840e:	fa5f fb83 	uxtb.w	fp, r3
 8088412:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8088416:	d820      	bhi.n	808845a <_printf_float+0x186>
 8088418:	3901      	subs	r1, #1
 808841a:	465a      	mov	r2, fp
 808841c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8088420:	9109      	str	r1, [sp, #36]	; 0x24
 8088422:	f7ff ff19 	bl	8088258 <__exponent>
 8088426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8088428:	1813      	adds	r3, r2, r0
 808842a:	2a01      	cmp	r2, #1
 808842c:	4681      	mov	r9, r0
 808842e:	6123      	str	r3, [r4, #16]
 8088430:	dc02      	bgt.n	8088438 <_printf_float+0x164>
 8088432:	6822      	ldr	r2, [r4, #0]
 8088434:	07d2      	lsls	r2, r2, #31
 8088436:	d501      	bpl.n	808843c <_printf_float+0x168>
 8088438:	3301      	adds	r3, #1
 808843a:	6123      	str	r3, [r4, #16]
 808843c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8088440:	2b00      	cmp	r3, #0
 8088442:	d09c      	beq.n	808837e <_printf_float+0xaa>
 8088444:	232d      	movs	r3, #45	; 0x2d
 8088446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 808844a:	e798      	b.n	808837e <_printf_float+0xaa>
 808844c:	9a06      	ldr	r2, [sp, #24]
 808844e:	2a47      	cmp	r2, #71	; 0x47
 8088450:	d1be      	bne.n	80883d0 <_printf_float+0xfc>
 8088452:	2b00      	cmp	r3, #0
 8088454:	d1bc      	bne.n	80883d0 <_printf_float+0xfc>
 8088456:	2301      	movs	r3, #1
 8088458:	e7b9      	b.n	80883ce <_printf_float+0xfa>
 808845a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 808845e:	d118      	bne.n	8088492 <_printf_float+0x1be>
 8088460:	2900      	cmp	r1, #0
 8088462:	6863      	ldr	r3, [r4, #4]
 8088464:	dd0b      	ble.n	808847e <_printf_float+0x1aa>
 8088466:	6121      	str	r1, [r4, #16]
 8088468:	b913      	cbnz	r3, 8088470 <_printf_float+0x19c>
 808846a:	6822      	ldr	r2, [r4, #0]
 808846c:	07d0      	lsls	r0, r2, #31
 808846e:	d502      	bpl.n	8088476 <_printf_float+0x1a2>
 8088470:	3301      	adds	r3, #1
 8088472:	440b      	add	r3, r1
 8088474:	6123      	str	r3, [r4, #16]
 8088476:	65a1      	str	r1, [r4, #88]	; 0x58
 8088478:	f04f 0900 	mov.w	r9, #0
 808847c:	e7de      	b.n	808843c <_printf_float+0x168>
 808847e:	b913      	cbnz	r3, 8088486 <_printf_float+0x1b2>
 8088480:	6822      	ldr	r2, [r4, #0]
 8088482:	07d2      	lsls	r2, r2, #31
 8088484:	d501      	bpl.n	808848a <_printf_float+0x1b6>
 8088486:	3302      	adds	r3, #2
 8088488:	e7f4      	b.n	8088474 <_printf_float+0x1a0>
 808848a:	2301      	movs	r3, #1
 808848c:	e7f2      	b.n	8088474 <_printf_float+0x1a0>
 808848e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8088492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088494:	4299      	cmp	r1, r3
 8088496:	db05      	blt.n	80884a4 <_printf_float+0x1d0>
 8088498:	6823      	ldr	r3, [r4, #0]
 808849a:	6121      	str	r1, [r4, #16]
 808849c:	07d8      	lsls	r0, r3, #31
 808849e:	d5ea      	bpl.n	8088476 <_printf_float+0x1a2>
 80884a0:	1c4b      	adds	r3, r1, #1
 80884a2:	e7e7      	b.n	8088474 <_printf_float+0x1a0>
 80884a4:	2900      	cmp	r1, #0
 80884a6:	bfd4      	ite	le
 80884a8:	f1c1 0202 	rsble	r2, r1, #2
 80884ac:	2201      	movgt	r2, #1
 80884ae:	4413      	add	r3, r2
 80884b0:	e7e0      	b.n	8088474 <_printf_float+0x1a0>
 80884b2:	6823      	ldr	r3, [r4, #0]
 80884b4:	055a      	lsls	r2, r3, #21
 80884b6:	d407      	bmi.n	80884c8 <_printf_float+0x1f4>
 80884b8:	6923      	ldr	r3, [r4, #16]
 80884ba:	4642      	mov	r2, r8
 80884bc:	4631      	mov	r1, r6
 80884be:	4628      	mov	r0, r5
 80884c0:	47b8      	blx	r7
 80884c2:	3001      	adds	r0, #1
 80884c4:	d12c      	bne.n	8088520 <_printf_float+0x24c>
 80884c6:	e764      	b.n	8088392 <_printf_float+0xbe>
 80884c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80884cc:	f240 80e0 	bls.w	8088690 <_printf_float+0x3bc>
 80884d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80884d4:	2200      	movs	r2, #0
 80884d6:	2300      	movs	r3, #0
 80884d8:	f7f8 faf6 	bl	8080ac8 <__aeabi_dcmpeq>
 80884dc:	2800      	cmp	r0, #0
 80884de:	d034      	beq.n	808854a <_printf_float+0x276>
 80884e0:	4a37      	ldr	r2, [pc, #220]	; (80885c0 <_printf_float+0x2ec>)
 80884e2:	2301      	movs	r3, #1
 80884e4:	4631      	mov	r1, r6
 80884e6:	4628      	mov	r0, r5
 80884e8:	47b8      	blx	r7
 80884ea:	3001      	adds	r0, #1
 80884ec:	f43f af51 	beq.w	8088392 <_printf_float+0xbe>
 80884f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80884f4:	429a      	cmp	r2, r3
 80884f6:	db02      	blt.n	80884fe <_printf_float+0x22a>
 80884f8:	6823      	ldr	r3, [r4, #0]
 80884fa:	07d8      	lsls	r0, r3, #31
 80884fc:	d510      	bpl.n	8088520 <_printf_float+0x24c>
 80884fe:	ee18 3a10 	vmov	r3, s16
 8088502:	4652      	mov	r2, sl
 8088504:	4631      	mov	r1, r6
 8088506:	4628      	mov	r0, r5
 8088508:	47b8      	blx	r7
 808850a:	3001      	adds	r0, #1
 808850c:	f43f af41 	beq.w	8088392 <_printf_float+0xbe>
 8088510:	f04f 0800 	mov.w	r8, #0
 8088514:	f104 091a 	add.w	r9, r4, #26
 8088518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808851a:	3b01      	subs	r3, #1
 808851c:	4543      	cmp	r3, r8
 808851e:	dc09      	bgt.n	8088534 <_printf_float+0x260>
 8088520:	6823      	ldr	r3, [r4, #0]
 8088522:	079b      	lsls	r3, r3, #30
 8088524:	f100 8107 	bmi.w	8088736 <_printf_float+0x462>
 8088528:	68e0      	ldr	r0, [r4, #12]
 808852a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808852c:	4298      	cmp	r0, r3
 808852e:	bfb8      	it	lt
 8088530:	4618      	movlt	r0, r3
 8088532:	e730      	b.n	8088396 <_printf_float+0xc2>
 8088534:	2301      	movs	r3, #1
 8088536:	464a      	mov	r2, r9
 8088538:	4631      	mov	r1, r6
 808853a:	4628      	mov	r0, r5
 808853c:	47b8      	blx	r7
 808853e:	3001      	adds	r0, #1
 8088540:	f43f af27 	beq.w	8088392 <_printf_float+0xbe>
 8088544:	f108 0801 	add.w	r8, r8, #1
 8088548:	e7e6      	b.n	8088518 <_printf_float+0x244>
 808854a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808854c:	2b00      	cmp	r3, #0
 808854e:	dc39      	bgt.n	80885c4 <_printf_float+0x2f0>
 8088550:	4a1b      	ldr	r2, [pc, #108]	; (80885c0 <_printf_float+0x2ec>)
 8088552:	2301      	movs	r3, #1
 8088554:	4631      	mov	r1, r6
 8088556:	4628      	mov	r0, r5
 8088558:	47b8      	blx	r7
 808855a:	3001      	adds	r0, #1
 808855c:	f43f af19 	beq.w	8088392 <_printf_float+0xbe>
 8088560:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8088564:	4313      	orrs	r3, r2
 8088566:	d102      	bne.n	808856e <_printf_float+0x29a>
 8088568:	6823      	ldr	r3, [r4, #0]
 808856a:	07d9      	lsls	r1, r3, #31
 808856c:	d5d8      	bpl.n	8088520 <_printf_float+0x24c>
 808856e:	ee18 3a10 	vmov	r3, s16
 8088572:	4652      	mov	r2, sl
 8088574:	4631      	mov	r1, r6
 8088576:	4628      	mov	r0, r5
 8088578:	47b8      	blx	r7
 808857a:	3001      	adds	r0, #1
 808857c:	f43f af09 	beq.w	8088392 <_printf_float+0xbe>
 8088580:	f04f 0900 	mov.w	r9, #0
 8088584:	f104 0a1a 	add.w	sl, r4, #26
 8088588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808858a:	425b      	negs	r3, r3
 808858c:	454b      	cmp	r3, r9
 808858e:	dc01      	bgt.n	8088594 <_printf_float+0x2c0>
 8088590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8088592:	e792      	b.n	80884ba <_printf_float+0x1e6>
 8088594:	2301      	movs	r3, #1
 8088596:	4652      	mov	r2, sl
 8088598:	4631      	mov	r1, r6
 808859a:	4628      	mov	r0, r5
 808859c:	47b8      	blx	r7
 808859e:	3001      	adds	r0, #1
 80885a0:	f43f aef7 	beq.w	8088392 <_printf_float+0xbe>
 80885a4:	f109 0901 	add.w	r9, r9, #1
 80885a8:	e7ee      	b.n	8088588 <_printf_float+0x2b4>
 80885aa:	bf00      	nop
 80885ac:	7fefffff 	.word	0x7fefffff
 80885b0:	0808b625 	.word	0x0808b625
 80885b4:	0808b629 	.word	0x0808b629
 80885b8:	0808b62d 	.word	0x0808b62d
 80885bc:	0808b631 	.word	0x0808b631
 80885c0:	0808b635 	.word	0x0808b635
 80885c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80885c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80885c8:	429a      	cmp	r2, r3
 80885ca:	bfa8      	it	ge
 80885cc:	461a      	movge	r2, r3
 80885ce:	2a00      	cmp	r2, #0
 80885d0:	4691      	mov	r9, r2
 80885d2:	dc37      	bgt.n	8088644 <_printf_float+0x370>
 80885d4:	f04f 0b00 	mov.w	fp, #0
 80885d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80885dc:	f104 021a 	add.w	r2, r4, #26
 80885e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80885e2:	9305      	str	r3, [sp, #20]
 80885e4:	eba3 0309 	sub.w	r3, r3, r9
 80885e8:	455b      	cmp	r3, fp
 80885ea:	dc33      	bgt.n	8088654 <_printf_float+0x380>
 80885ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80885f0:	429a      	cmp	r2, r3
 80885f2:	db3b      	blt.n	808866c <_printf_float+0x398>
 80885f4:	6823      	ldr	r3, [r4, #0]
 80885f6:	07da      	lsls	r2, r3, #31
 80885f8:	d438      	bmi.n	808866c <_printf_float+0x398>
 80885fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80885fe:	eba2 0903 	sub.w	r9, r2, r3
 8088602:	9b05      	ldr	r3, [sp, #20]
 8088604:	1ad2      	subs	r2, r2, r3
 8088606:	4591      	cmp	r9, r2
 8088608:	bfa8      	it	ge
 808860a:	4691      	movge	r9, r2
 808860c:	f1b9 0f00 	cmp.w	r9, #0
 8088610:	dc35      	bgt.n	808867e <_printf_float+0x3aa>
 8088612:	f04f 0800 	mov.w	r8, #0
 8088616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 808861a:	f104 0a1a 	add.w	sl, r4, #26
 808861e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8088622:	1a9b      	subs	r3, r3, r2
 8088624:	eba3 0309 	sub.w	r3, r3, r9
 8088628:	4543      	cmp	r3, r8
 808862a:	f77f af79 	ble.w	8088520 <_printf_float+0x24c>
 808862e:	2301      	movs	r3, #1
 8088630:	4652      	mov	r2, sl
 8088632:	4631      	mov	r1, r6
 8088634:	4628      	mov	r0, r5
 8088636:	47b8      	blx	r7
 8088638:	3001      	adds	r0, #1
 808863a:	f43f aeaa 	beq.w	8088392 <_printf_float+0xbe>
 808863e:	f108 0801 	add.w	r8, r8, #1
 8088642:	e7ec      	b.n	808861e <_printf_float+0x34a>
 8088644:	4613      	mov	r3, r2
 8088646:	4631      	mov	r1, r6
 8088648:	4642      	mov	r2, r8
 808864a:	4628      	mov	r0, r5
 808864c:	47b8      	blx	r7
 808864e:	3001      	adds	r0, #1
 8088650:	d1c0      	bne.n	80885d4 <_printf_float+0x300>
 8088652:	e69e      	b.n	8088392 <_printf_float+0xbe>
 8088654:	2301      	movs	r3, #1
 8088656:	4631      	mov	r1, r6
 8088658:	4628      	mov	r0, r5
 808865a:	9205      	str	r2, [sp, #20]
 808865c:	47b8      	blx	r7
 808865e:	3001      	adds	r0, #1
 8088660:	f43f ae97 	beq.w	8088392 <_printf_float+0xbe>
 8088664:	9a05      	ldr	r2, [sp, #20]
 8088666:	f10b 0b01 	add.w	fp, fp, #1
 808866a:	e7b9      	b.n	80885e0 <_printf_float+0x30c>
 808866c:	ee18 3a10 	vmov	r3, s16
 8088670:	4652      	mov	r2, sl
 8088672:	4631      	mov	r1, r6
 8088674:	4628      	mov	r0, r5
 8088676:	47b8      	blx	r7
 8088678:	3001      	adds	r0, #1
 808867a:	d1be      	bne.n	80885fa <_printf_float+0x326>
 808867c:	e689      	b.n	8088392 <_printf_float+0xbe>
 808867e:	9a05      	ldr	r2, [sp, #20]
 8088680:	464b      	mov	r3, r9
 8088682:	4442      	add	r2, r8
 8088684:	4631      	mov	r1, r6
 8088686:	4628      	mov	r0, r5
 8088688:	47b8      	blx	r7
 808868a:	3001      	adds	r0, #1
 808868c:	d1c1      	bne.n	8088612 <_printf_float+0x33e>
 808868e:	e680      	b.n	8088392 <_printf_float+0xbe>
 8088690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8088692:	2a01      	cmp	r2, #1
 8088694:	dc01      	bgt.n	808869a <_printf_float+0x3c6>
 8088696:	07db      	lsls	r3, r3, #31
 8088698:	d53a      	bpl.n	8088710 <_printf_float+0x43c>
 808869a:	2301      	movs	r3, #1
 808869c:	4642      	mov	r2, r8
 808869e:	4631      	mov	r1, r6
 80886a0:	4628      	mov	r0, r5
 80886a2:	47b8      	blx	r7
 80886a4:	3001      	adds	r0, #1
 80886a6:	f43f ae74 	beq.w	8088392 <_printf_float+0xbe>
 80886aa:	ee18 3a10 	vmov	r3, s16
 80886ae:	4652      	mov	r2, sl
 80886b0:	4631      	mov	r1, r6
 80886b2:	4628      	mov	r0, r5
 80886b4:	47b8      	blx	r7
 80886b6:	3001      	adds	r0, #1
 80886b8:	f43f ae6b 	beq.w	8088392 <_printf_float+0xbe>
 80886bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80886c0:	2200      	movs	r2, #0
 80886c2:	2300      	movs	r3, #0
 80886c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80886c8:	f7f8 f9fe 	bl	8080ac8 <__aeabi_dcmpeq>
 80886cc:	b9d8      	cbnz	r0, 8088706 <_printf_float+0x432>
 80886ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80886d2:	f108 0201 	add.w	r2, r8, #1
 80886d6:	4631      	mov	r1, r6
 80886d8:	4628      	mov	r0, r5
 80886da:	47b8      	blx	r7
 80886dc:	3001      	adds	r0, #1
 80886de:	d10e      	bne.n	80886fe <_printf_float+0x42a>
 80886e0:	e657      	b.n	8088392 <_printf_float+0xbe>
 80886e2:	2301      	movs	r3, #1
 80886e4:	4652      	mov	r2, sl
 80886e6:	4631      	mov	r1, r6
 80886e8:	4628      	mov	r0, r5
 80886ea:	47b8      	blx	r7
 80886ec:	3001      	adds	r0, #1
 80886ee:	f43f ae50 	beq.w	8088392 <_printf_float+0xbe>
 80886f2:	f108 0801 	add.w	r8, r8, #1
 80886f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80886f8:	3b01      	subs	r3, #1
 80886fa:	4543      	cmp	r3, r8
 80886fc:	dcf1      	bgt.n	80886e2 <_printf_float+0x40e>
 80886fe:	464b      	mov	r3, r9
 8088700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8088704:	e6da      	b.n	80884bc <_printf_float+0x1e8>
 8088706:	f04f 0800 	mov.w	r8, #0
 808870a:	f104 0a1a 	add.w	sl, r4, #26
 808870e:	e7f2      	b.n	80886f6 <_printf_float+0x422>
 8088710:	2301      	movs	r3, #1
 8088712:	4642      	mov	r2, r8
 8088714:	e7df      	b.n	80886d6 <_printf_float+0x402>
 8088716:	2301      	movs	r3, #1
 8088718:	464a      	mov	r2, r9
 808871a:	4631      	mov	r1, r6
 808871c:	4628      	mov	r0, r5
 808871e:	47b8      	blx	r7
 8088720:	3001      	adds	r0, #1
 8088722:	f43f ae36 	beq.w	8088392 <_printf_float+0xbe>
 8088726:	f108 0801 	add.w	r8, r8, #1
 808872a:	68e3      	ldr	r3, [r4, #12]
 808872c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 808872e:	1a5b      	subs	r3, r3, r1
 8088730:	4543      	cmp	r3, r8
 8088732:	dcf0      	bgt.n	8088716 <_printf_float+0x442>
 8088734:	e6f8      	b.n	8088528 <_printf_float+0x254>
 8088736:	f04f 0800 	mov.w	r8, #0
 808873a:	f104 0919 	add.w	r9, r4, #25
 808873e:	e7f4      	b.n	808872a <_printf_float+0x456>

08088740 <_printf_common>:
 8088740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088744:	4616      	mov	r6, r2
 8088746:	4699      	mov	r9, r3
 8088748:	688a      	ldr	r2, [r1, #8]
 808874a:	690b      	ldr	r3, [r1, #16]
 808874c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8088750:	4293      	cmp	r3, r2
 8088752:	bfb8      	it	lt
 8088754:	4613      	movlt	r3, r2
 8088756:	6033      	str	r3, [r6, #0]
 8088758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 808875c:	4607      	mov	r7, r0
 808875e:	460c      	mov	r4, r1
 8088760:	b10a      	cbz	r2, 8088766 <_printf_common+0x26>
 8088762:	3301      	adds	r3, #1
 8088764:	6033      	str	r3, [r6, #0]
 8088766:	6823      	ldr	r3, [r4, #0]
 8088768:	0699      	lsls	r1, r3, #26
 808876a:	bf42      	ittt	mi
 808876c:	6833      	ldrmi	r3, [r6, #0]
 808876e:	3302      	addmi	r3, #2
 8088770:	6033      	strmi	r3, [r6, #0]
 8088772:	6825      	ldr	r5, [r4, #0]
 8088774:	f015 0506 	ands.w	r5, r5, #6
 8088778:	d106      	bne.n	8088788 <_printf_common+0x48>
 808877a:	f104 0a19 	add.w	sl, r4, #25
 808877e:	68e3      	ldr	r3, [r4, #12]
 8088780:	6832      	ldr	r2, [r6, #0]
 8088782:	1a9b      	subs	r3, r3, r2
 8088784:	42ab      	cmp	r3, r5
 8088786:	dc26      	bgt.n	80887d6 <_printf_common+0x96>
 8088788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 808878c:	1e13      	subs	r3, r2, #0
 808878e:	6822      	ldr	r2, [r4, #0]
 8088790:	bf18      	it	ne
 8088792:	2301      	movne	r3, #1
 8088794:	0692      	lsls	r2, r2, #26
 8088796:	d42b      	bmi.n	80887f0 <_printf_common+0xb0>
 8088798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 808879c:	4649      	mov	r1, r9
 808879e:	4638      	mov	r0, r7
 80887a0:	47c0      	blx	r8
 80887a2:	3001      	adds	r0, #1
 80887a4:	d01e      	beq.n	80887e4 <_printf_common+0xa4>
 80887a6:	6823      	ldr	r3, [r4, #0]
 80887a8:	6922      	ldr	r2, [r4, #16]
 80887aa:	f003 0306 	and.w	r3, r3, #6
 80887ae:	2b04      	cmp	r3, #4
 80887b0:	bf02      	ittt	eq
 80887b2:	68e5      	ldreq	r5, [r4, #12]
 80887b4:	6833      	ldreq	r3, [r6, #0]
 80887b6:	1aed      	subeq	r5, r5, r3
 80887b8:	68a3      	ldr	r3, [r4, #8]
 80887ba:	bf0c      	ite	eq
 80887bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80887c0:	2500      	movne	r5, #0
 80887c2:	4293      	cmp	r3, r2
 80887c4:	bfc4      	itt	gt
 80887c6:	1a9b      	subgt	r3, r3, r2
 80887c8:	18ed      	addgt	r5, r5, r3
 80887ca:	2600      	movs	r6, #0
 80887cc:	341a      	adds	r4, #26
 80887ce:	42b5      	cmp	r5, r6
 80887d0:	d11a      	bne.n	8088808 <_printf_common+0xc8>
 80887d2:	2000      	movs	r0, #0
 80887d4:	e008      	b.n	80887e8 <_printf_common+0xa8>
 80887d6:	2301      	movs	r3, #1
 80887d8:	4652      	mov	r2, sl
 80887da:	4649      	mov	r1, r9
 80887dc:	4638      	mov	r0, r7
 80887de:	47c0      	blx	r8
 80887e0:	3001      	adds	r0, #1
 80887e2:	d103      	bne.n	80887ec <_printf_common+0xac>
 80887e4:	f04f 30ff 	mov.w	r0, #4294967295
 80887e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80887ec:	3501      	adds	r5, #1
 80887ee:	e7c6      	b.n	808877e <_printf_common+0x3e>
 80887f0:	18e1      	adds	r1, r4, r3
 80887f2:	1c5a      	adds	r2, r3, #1
 80887f4:	2030      	movs	r0, #48	; 0x30
 80887f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80887fa:	4422      	add	r2, r4
 80887fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8088800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8088804:	3302      	adds	r3, #2
 8088806:	e7c7      	b.n	8088798 <_printf_common+0x58>
 8088808:	2301      	movs	r3, #1
 808880a:	4622      	mov	r2, r4
 808880c:	4649      	mov	r1, r9
 808880e:	4638      	mov	r0, r7
 8088810:	47c0      	blx	r8
 8088812:	3001      	adds	r0, #1
 8088814:	d0e6      	beq.n	80887e4 <_printf_common+0xa4>
 8088816:	3601      	adds	r6, #1
 8088818:	e7d9      	b.n	80887ce <_printf_common+0x8e>
	...

0808881c <_printf_i>:
 808881c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8088820:	7e0f      	ldrb	r7, [r1, #24]
 8088822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8088824:	2f78      	cmp	r7, #120	; 0x78
 8088826:	4691      	mov	r9, r2
 8088828:	4680      	mov	r8, r0
 808882a:	460c      	mov	r4, r1
 808882c:	469a      	mov	sl, r3
 808882e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8088832:	d807      	bhi.n	8088844 <_printf_i+0x28>
 8088834:	2f62      	cmp	r7, #98	; 0x62
 8088836:	d80a      	bhi.n	808884e <_printf_i+0x32>
 8088838:	2f00      	cmp	r7, #0
 808883a:	f000 80d4 	beq.w	80889e6 <_printf_i+0x1ca>
 808883e:	2f58      	cmp	r7, #88	; 0x58
 8088840:	f000 80c0 	beq.w	80889c4 <_printf_i+0x1a8>
 8088844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8088848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 808884c:	e03a      	b.n	80888c4 <_printf_i+0xa8>
 808884e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8088852:	2b15      	cmp	r3, #21
 8088854:	d8f6      	bhi.n	8088844 <_printf_i+0x28>
 8088856:	a101      	add	r1, pc, #4	; (adr r1, 808885c <_printf_i+0x40>)
 8088858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 808885c:	080888b5 	.word	0x080888b5
 8088860:	080888c9 	.word	0x080888c9
 8088864:	08088845 	.word	0x08088845
 8088868:	08088845 	.word	0x08088845
 808886c:	08088845 	.word	0x08088845
 8088870:	08088845 	.word	0x08088845
 8088874:	080888c9 	.word	0x080888c9
 8088878:	08088845 	.word	0x08088845
 808887c:	08088845 	.word	0x08088845
 8088880:	08088845 	.word	0x08088845
 8088884:	08088845 	.word	0x08088845
 8088888:	080889cd 	.word	0x080889cd
 808888c:	080888f5 	.word	0x080888f5
 8088890:	08088987 	.word	0x08088987
 8088894:	08088845 	.word	0x08088845
 8088898:	08088845 	.word	0x08088845
 808889c:	080889ef 	.word	0x080889ef
 80888a0:	08088845 	.word	0x08088845
 80888a4:	080888f5 	.word	0x080888f5
 80888a8:	08088845 	.word	0x08088845
 80888ac:	08088845 	.word	0x08088845
 80888b0:	0808898f 	.word	0x0808898f
 80888b4:	682b      	ldr	r3, [r5, #0]
 80888b6:	1d1a      	adds	r2, r3, #4
 80888b8:	681b      	ldr	r3, [r3, #0]
 80888ba:	602a      	str	r2, [r5, #0]
 80888bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80888c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80888c4:	2301      	movs	r3, #1
 80888c6:	e09f      	b.n	8088a08 <_printf_i+0x1ec>
 80888c8:	6820      	ldr	r0, [r4, #0]
 80888ca:	682b      	ldr	r3, [r5, #0]
 80888cc:	0607      	lsls	r7, r0, #24
 80888ce:	f103 0104 	add.w	r1, r3, #4
 80888d2:	6029      	str	r1, [r5, #0]
 80888d4:	d501      	bpl.n	80888da <_printf_i+0xbe>
 80888d6:	681e      	ldr	r6, [r3, #0]
 80888d8:	e003      	b.n	80888e2 <_printf_i+0xc6>
 80888da:	0646      	lsls	r6, r0, #25
 80888dc:	d5fb      	bpl.n	80888d6 <_printf_i+0xba>
 80888de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80888e2:	2e00      	cmp	r6, #0
 80888e4:	da03      	bge.n	80888ee <_printf_i+0xd2>
 80888e6:	232d      	movs	r3, #45	; 0x2d
 80888e8:	4276      	negs	r6, r6
 80888ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80888ee:	485a      	ldr	r0, [pc, #360]	; (8088a58 <_printf_i+0x23c>)
 80888f0:	230a      	movs	r3, #10
 80888f2:	e012      	b.n	808891a <_printf_i+0xfe>
 80888f4:	682b      	ldr	r3, [r5, #0]
 80888f6:	6820      	ldr	r0, [r4, #0]
 80888f8:	1d19      	adds	r1, r3, #4
 80888fa:	6029      	str	r1, [r5, #0]
 80888fc:	0605      	lsls	r5, r0, #24
 80888fe:	d501      	bpl.n	8088904 <_printf_i+0xe8>
 8088900:	681e      	ldr	r6, [r3, #0]
 8088902:	e002      	b.n	808890a <_printf_i+0xee>
 8088904:	0641      	lsls	r1, r0, #25
 8088906:	d5fb      	bpl.n	8088900 <_printf_i+0xe4>
 8088908:	881e      	ldrh	r6, [r3, #0]
 808890a:	4853      	ldr	r0, [pc, #332]	; (8088a58 <_printf_i+0x23c>)
 808890c:	2f6f      	cmp	r7, #111	; 0x6f
 808890e:	bf0c      	ite	eq
 8088910:	2308      	moveq	r3, #8
 8088912:	230a      	movne	r3, #10
 8088914:	2100      	movs	r1, #0
 8088916:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 808891a:	6865      	ldr	r5, [r4, #4]
 808891c:	60a5      	str	r5, [r4, #8]
 808891e:	2d00      	cmp	r5, #0
 8088920:	bfa2      	ittt	ge
 8088922:	6821      	ldrge	r1, [r4, #0]
 8088924:	f021 0104 	bicge.w	r1, r1, #4
 8088928:	6021      	strge	r1, [r4, #0]
 808892a:	b90e      	cbnz	r6, 8088930 <_printf_i+0x114>
 808892c:	2d00      	cmp	r5, #0
 808892e:	d04b      	beq.n	80889c8 <_printf_i+0x1ac>
 8088930:	4615      	mov	r5, r2
 8088932:	fbb6 f1f3 	udiv	r1, r6, r3
 8088936:	fb03 6711 	mls	r7, r3, r1, r6
 808893a:	5dc7      	ldrb	r7, [r0, r7]
 808893c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8088940:	4637      	mov	r7, r6
 8088942:	42bb      	cmp	r3, r7
 8088944:	460e      	mov	r6, r1
 8088946:	d9f4      	bls.n	8088932 <_printf_i+0x116>
 8088948:	2b08      	cmp	r3, #8
 808894a:	d10b      	bne.n	8088964 <_printf_i+0x148>
 808894c:	6823      	ldr	r3, [r4, #0]
 808894e:	07de      	lsls	r6, r3, #31
 8088950:	d508      	bpl.n	8088964 <_printf_i+0x148>
 8088952:	6923      	ldr	r3, [r4, #16]
 8088954:	6861      	ldr	r1, [r4, #4]
 8088956:	4299      	cmp	r1, r3
 8088958:	bfde      	ittt	le
 808895a:	2330      	movle	r3, #48	; 0x30
 808895c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8088960:	f105 35ff 	addle.w	r5, r5, #4294967295
 8088964:	1b52      	subs	r2, r2, r5
 8088966:	6122      	str	r2, [r4, #16]
 8088968:	f8cd a000 	str.w	sl, [sp]
 808896c:	464b      	mov	r3, r9
 808896e:	aa03      	add	r2, sp, #12
 8088970:	4621      	mov	r1, r4
 8088972:	4640      	mov	r0, r8
 8088974:	f7ff fee4 	bl	8088740 <_printf_common>
 8088978:	3001      	adds	r0, #1
 808897a:	d14a      	bne.n	8088a12 <_printf_i+0x1f6>
 808897c:	f04f 30ff 	mov.w	r0, #4294967295
 8088980:	b004      	add	sp, #16
 8088982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8088986:	6823      	ldr	r3, [r4, #0]
 8088988:	f043 0320 	orr.w	r3, r3, #32
 808898c:	6023      	str	r3, [r4, #0]
 808898e:	4833      	ldr	r0, [pc, #204]	; (8088a5c <_printf_i+0x240>)
 8088990:	2778      	movs	r7, #120	; 0x78
 8088992:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8088996:	6823      	ldr	r3, [r4, #0]
 8088998:	6829      	ldr	r1, [r5, #0]
 808899a:	061f      	lsls	r7, r3, #24
 808899c:	f851 6b04 	ldr.w	r6, [r1], #4
 80889a0:	d402      	bmi.n	80889a8 <_printf_i+0x18c>
 80889a2:	065f      	lsls	r7, r3, #25
 80889a4:	bf48      	it	mi
 80889a6:	b2b6      	uxthmi	r6, r6
 80889a8:	07df      	lsls	r7, r3, #31
 80889aa:	bf48      	it	mi
 80889ac:	f043 0320 	orrmi.w	r3, r3, #32
 80889b0:	6029      	str	r1, [r5, #0]
 80889b2:	bf48      	it	mi
 80889b4:	6023      	strmi	r3, [r4, #0]
 80889b6:	b91e      	cbnz	r6, 80889c0 <_printf_i+0x1a4>
 80889b8:	6823      	ldr	r3, [r4, #0]
 80889ba:	f023 0320 	bic.w	r3, r3, #32
 80889be:	6023      	str	r3, [r4, #0]
 80889c0:	2310      	movs	r3, #16
 80889c2:	e7a7      	b.n	8088914 <_printf_i+0xf8>
 80889c4:	4824      	ldr	r0, [pc, #144]	; (8088a58 <_printf_i+0x23c>)
 80889c6:	e7e4      	b.n	8088992 <_printf_i+0x176>
 80889c8:	4615      	mov	r5, r2
 80889ca:	e7bd      	b.n	8088948 <_printf_i+0x12c>
 80889cc:	682b      	ldr	r3, [r5, #0]
 80889ce:	6826      	ldr	r6, [r4, #0]
 80889d0:	6961      	ldr	r1, [r4, #20]
 80889d2:	1d18      	adds	r0, r3, #4
 80889d4:	6028      	str	r0, [r5, #0]
 80889d6:	0635      	lsls	r5, r6, #24
 80889d8:	681b      	ldr	r3, [r3, #0]
 80889da:	d501      	bpl.n	80889e0 <_printf_i+0x1c4>
 80889dc:	6019      	str	r1, [r3, #0]
 80889de:	e002      	b.n	80889e6 <_printf_i+0x1ca>
 80889e0:	0670      	lsls	r0, r6, #25
 80889e2:	d5fb      	bpl.n	80889dc <_printf_i+0x1c0>
 80889e4:	8019      	strh	r1, [r3, #0]
 80889e6:	2300      	movs	r3, #0
 80889e8:	6123      	str	r3, [r4, #16]
 80889ea:	4615      	mov	r5, r2
 80889ec:	e7bc      	b.n	8088968 <_printf_i+0x14c>
 80889ee:	682b      	ldr	r3, [r5, #0]
 80889f0:	1d1a      	adds	r2, r3, #4
 80889f2:	602a      	str	r2, [r5, #0]
 80889f4:	681d      	ldr	r5, [r3, #0]
 80889f6:	6862      	ldr	r2, [r4, #4]
 80889f8:	2100      	movs	r1, #0
 80889fa:	4628      	mov	r0, r5
 80889fc:	f7f7 fbe8 	bl	80801d0 <memchr>
 8088a00:	b108      	cbz	r0, 8088a06 <_printf_i+0x1ea>
 8088a02:	1b40      	subs	r0, r0, r5
 8088a04:	6060      	str	r0, [r4, #4]
 8088a06:	6863      	ldr	r3, [r4, #4]
 8088a08:	6123      	str	r3, [r4, #16]
 8088a0a:	2300      	movs	r3, #0
 8088a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8088a10:	e7aa      	b.n	8088968 <_printf_i+0x14c>
 8088a12:	6923      	ldr	r3, [r4, #16]
 8088a14:	462a      	mov	r2, r5
 8088a16:	4649      	mov	r1, r9
 8088a18:	4640      	mov	r0, r8
 8088a1a:	47d0      	blx	sl
 8088a1c:	3001      	adds	r0, #1
 8088a1e:	d0ad      	beq.n	808897c <_printf_i+0x160>
 8088a20:	6823      	ldr	r3, [r4, #0]
 8088a22:	079b      	lsls	r3, r3, #30
 8088a24:	d413      	bmi.n	8088a4e <_printf_i+0x232>
 8088a26:	68e0      	ldr	r0, [r4, #12]
 8088a28:	9b03      	ldr	r3, [sp, #12]
 8088a2a:	4298      	cmp	r0, r3
 8088a2c:	bfb8      	it	lt
 8088a2e:	4618      	movlt	r0, r3
 8088a30:	e7a6      	b.n	8088980 <_printf_i+0x164>
 8088a32:	2301      	movs	r3, #1
 8088a34:	4632      	mov	r2, r6
 8088a36:	4649      	mov	r1, r9
 8088a38:	4640      	mov	r0, r8
 8088a3a:	47d0      	blx	sl
 8088a3c:	3001      	adds	r0, #1
 8088a3e:	d09d      	beq.n	808897c <_printf_i+0x160>
 8088a40:	3501      	adds	r5, #1
 8088a42:	68e3      	ldr	r3, [r4, #12]
 8088a44:	9903      	ldr	r1, [sp, #12]
 8088a46:	1a5b      	subs	r3, r3, r1
 8088a48:	42ab      	cmp	r3, r5
 8088a4a:	dcf2      	bgt.n	8088a32 <_printf_i+0x216>
 8088a4c:	e7eb      	b.n	8088a26 <_printf_i+0x20a>
 8088a4e:	2500      	movs	r5, #0
 8088a50:	f104 0619 	add.w	r6, r4, #25
 8088a54:	e7f5      	b.n	8088a42 <_printf_i+0x226>
 8088a56:	bf00      	nop
 8088a58:	0808b637 	.word	0x0808b637
 8088a5c:	0808b648 	.word	0x0808b648

08088a60 <std>:
 8088a60:	2300      	movs	r3, #0
 8088a62:	b510      	push	{r4, lr}
 8088a64:	4604      	mov	r4, r0
 8088a66:	e9c0 3300 	strd	r3, r3, [r0]
 8088a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8088a6e:	6083      	str	r3, [r0, #8]
 8088a70:	8181      	strh	r1, [r0, #12]
 8088a72:	6643      	str	r3, [r0, #100]	; 0x64
 8088a74:	81c2      	strh	r2, [r0, #14]
 8088a76:	6183      	str	r3, [r0, #24]
 8088a78:	4619      	mov	r1, r3
 8088a7a:	2208      	movs	r2, #8
 8088a7c:	305c      	adds	r0, #92	; 0x5c
 8088a7e:	f000 f914 	bl	8088caa <memset>
 8088a82:	4b0d      	ldr	r3, [pc, #52]	; (8088ab8 <std+0x58>)
 8088a84:	6263      	str	r3, [r4, #36]	; 0x24
 8088a86:	4b0d      	ldr	r3, [pc, #52]	; (8088abc <std+0x5c>)
 8088a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8088a8a:	4b0d      	ldr	r3, [pc, #52]	; (8088ac0 <std+0x60>)
 8088a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8088a8e:	4b0d      	ldr	r3, [pc, #52]	; (8088ac4 <std+0x64>)
 8088a90:	6323      	str	r3, [r4, #48]	; 0x30
 8088a92:	4b0d      	ldr	r3, [pc, #52]	; (8088ac8 <std+0x68>)
 8088a94:	6224      	str	r4, [r4, #32]
 8088a96:	429c      	cmp	r4, r3
 8088a98:	d006      	beq.n	8088aa8 <std+0x48>
 8088a9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8088a9e:	4294      	cmp	r4, r2
 8088aa0:	d002      	beq.n	8088aa8 <std+0x48>
 8088aa2:	33d0      	adds	r3, #208	; 0xd0
 8088aa4:	429c      	cmp	r4, r3
 8088aa6:	d105      	bne.n	8088ab4 <std+0x54>
 8088aa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8088aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8088ab0:	f000 b98e 	b.w	8088dd0 <__retarget_lock_init_recursive>
 8088ab4:	bd10      	pop	{r4, pc}
 8088ab6:	bf00      	nop
 8088ab8:	08088c25 	.word	0x08088c25
 8088abc:	08088c47 	.word	0x08088c47
 8088ac0:	08088c7f 	.word	0x08088c7f
 8088ac4:	08088ca3 	.word	0x08088ca3
 8088ac8:	20000a7c 	.word	0x20000a7c

08088acc <stdio_exit_handler>:
 8088acc:	4a02      	ldr	r2, [pc, #8]	; (8088ad8 <stdio_exit_handler+0xc>)
 8088ace:	4903      	ldr	r1, [pc, #12]	; (8088adc <stdio_exit_handler+0x10>)
 8088ad0:	4803      	ldr	r0, [pc, #12]	; (8088ae0 <stdio_exit_handler+0x14>)
 8088ad2:	f000 b869 	b.w	8088ba8 <_fwalk_sglue>
 8088ad6:	bf00      	nop
 8088ad8:	2000008c 	.word	0x2000008c
 8088adc:	0808aa61 	.word	0x0808aa61
 8088ae0:	20000098 	.word	0x20000098

08088ae4 <cleanup_stdio>:
 8088ae4:	6841      	ldr	r1, [r0, #4]
 8088ae6:	4b0c      	ldr	r3, [pc, #48]	; (8088b18 <cleanup_stdio+0x34>)
 8088ae8:	4299      	cmp	r1, r3
 8088aea:	b510      	push	{r4, lr}
 8088aec:	4604      	mov	r4, r0
 8088aee:	d001      	beq.n	8088af4 <cleanup_stdio+0x10>
 8088af0:	f001 ffb6 	bl	808aa60 <_fflush_r>
 8088af4:	68a1      	ldr	r1, [r4, #8]
 8088af6:	4b09      	ldr	r3, [pc, #36]	; (8088b1c <cleanup_stdio+0x38>)
 8088af8:	4299      	cmp	r1, r3
 8088afa:	d002      	beq.n	8088b02 <cleanup_stdio+0x1e>
 8088afc:	4620      	mov	r0, r4
 8088afe:	f001 ffaf 	bl	808aa60 <_fflush_r>
 8088b02:	68e1      	ldr	r1, [r4, #12]
 8088b04:	4b06      	ldr	r3, [pc, #24]	; (8088b20 <cleanup_stdio+0x3c>)
 8088b06:	4299      	cmp	r1, r3
 8088b08:	d004      	beq.n	8088b14 <cleanup_stdio+0x30>
 8088b0a:	4620      	mov	r0, r4
 8088b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8088b10:	f001 bfa6 	b.w	808aa60 <_fflush_r>
 8088b14:	bd10      	pop	{r4, pc}
 8088b16:	bf00      	nop
 8088b18:	20000a7c 	.word	0x20000a7c
 8088b1c:	20000ae4 	.word	0x20000ae4
 8088b20:	20000b4c 	.word	0x20000b4c

08088b24 <global_stdio_init.part.0>:
 8088b24:	b510      	push	{r4, lr}
 8088b26:	4b0b      	ldr	r3, [pc, #44]	; (8088b54 <global_stdio_init.part.0+0x30>)
 8088b28:	4c0b      	ldr	r4, [pc, #44]	; (8088b58 <global_stdio_init.part.0+0x34>)
 8088b2a:	4a0c      	ldr	r2, [pc, #48]	; (8088b5c <global_stdio_init.part.0+0x38>)
 8088b2c:	601a      	str	r2, [r3, #0]
 8088b2e:	4620      	mov	r0, r4
 8088b30:	2200      	movs	r2, #0
 8088b32:	2104      	movs	r1, #4
 8088b34:	f7ff ff94 	bl	8088a60 <std>
 8088b38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8088b3c:	2201      	movs	r2, #1
 8088b3e:	2109      	movs	r1, #9
 8088b40:	f7ff ff8e 	bl	8088a60 <std>
 8088b44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8088b48:	2202      	movs	r2, #2
 8088b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8088b4e:	2112      	movs	r1, #18
 8088b50:	f7ff bf86 	b.w	8088a60 <std>
 8088b54:	20000bb4 	.word	0x20000bb4
 8088b58:	20000a7c 	.word	0x20000a7c
 8088b5c:	08088acd 	.word	0x08088acd

08088b60 <__sfp_lock_acquire>:
 8088b60:	4801      	ldr	r0, [pc, #4]	; (8088b68 <__sfp_lock_acquire+0x8>)
 8088b62:	f000 b936 	b.w	8088dd2 <__retarget_lock_acquire_recursive>
 8088b66:	bf00      	nop
 8088b68:	20000bbd 	.word	0x20000bbd

08088b6c <__sfp_lock_release>:
 8088b6c:	4801      	ldr	r0, [pc, #4]	; (8088b74 <__sfp_lock_release+0x8>)
 8088b6e:	f000 b931 	b.w	8088dd4 <__retarget_lock_release_recursive>
 8088b72:	bf00      	nop
 8088b74:	20000bbd 	.word	0x20000bbd

08088b78 <__sinit>:
 8088b78:	b510      	push	{r4, lr}
 8088b7a:	4604      	mov	r4, r0
 8088b7c:	f7ff fff0 	bl	8088b60 <__sfp_lock_acquire>
 8088b80:	6a23      	ldr	r3, [r4, #32]
 8088b82:	b11b      	cbz	r3, 8088b8c <__sinit+0x14>
 8088b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8088b88:	f7ff bff0 	b.w	8088b6c <__sfp_lock_release>
 8088b8c:	4b04      	ldr	r3, [pc, #16]	; (8088ba0 <__sinit+0x28>)
 8088b8e:	6223      	str	r3, [r4, #32]
 8088b90:	4b04      	ldr	r3, [pc, #16]	; (8088ba4 <__sinit+0x2c>)
 8088b92:	681b      	ldr	r3, [r3, #0]
 8088b94:	2b00      	cmp	r3, #0
 8088b96:	d1f5      	bne.n	8088b84 <__sinit+0xc>
 8088b98:	f7ff ffc4 	bl	8088b24 <global_stdio_init.part.0>
 8088b9c:	e7f2      	b.n	8088b84 <__sinit+0xc>
 8088b9e:	bf00      	nop
 8088ba0:	08088ae5 	.word	0x08088ae5
 8088ba4:	20000bb4 	.word	0x20000bb4

08088ba8 <_fwalk_sglue>:
 8088ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8088bac:	4607      	mov	r7, r0
 8088bae:	4688      	mov	r8, r1
 8088bb0:	4614      	mov	r4, r2
 8088bb2:	2600      	movs	r6, #0
 8088bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8088bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8088bbc:	d505      	bpl.n	8088bca <_fwalk_sglue+0x22>
 8088bbe:	6824      	ldr	r4, [r4, #0]
 8088bc0:	2c00      	cmp	r4, #0
 8088bc2:	d1f7      	bne.n	8088bb4 <_fwalk_sglue+0xc>
 8088bc4:	4630      	mov	r0, r6
 8088bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088bca:	89ab      	ldrh	r3, [r5, #12]
 8088bcc:	2b01      	cmp	r3, #1
 8088bce:	d907      	bls.n	8088be0 <_fwalk_sglue+0x38>
 8088bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8088bd4:	3301      	adds	r3, #1
 8088bd6:	d003      	beq.n	8088be0 <_fwalk_sglue+0x38>
 8088bd8:	4629      	mov	r1, r5
 8088bda:	4638      	mov	r0, r7
 8088bdc:	47c0      	blx	r8
 8088bde:	4306      	orrs	r6, r0
 8088be0:	3568      	adds	r5, #104	; 0x68
 8088be2:	e7e9      	b.n	8088bb8 <_fwalk_sglue+0x10>

08088be4 <siprintf>:
 8088be4:	b40e      	push	{r1, r2, r3}
 8088be6:	b500      	push	{lr}
 8088be8:	b09c      	sub	sp, #112	; 0x70
 8088bea:	ab1d      	add	r3, sp, #116	; 0x74
 8088bec:	9002      	str	r0, [sp, #8]
 8088bee:	9006      	str	r0, [sp, #24]
 8088bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8088bf4:	4809      	ldr	r0, [pc, #36]	; (8088c1c <siprintf+0x38>)
 8088bf6:	9107      	str	r1, [sp, #28]
 8088bf8:	9104      	str	r1, [sp, #16]
 8088bfa:	4909      	ldr	r1, [pc, #36]	; (8088c20 <siprintf+0x3c>)
 8088bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8088c00:	9105      	str	r1, [sp, #20]
 8088c02:	6800      	ldr	r0, [r0, #0]
 8088c04:	9301      	str	r3, [sp, #4]
 8088c06:	a902      	add	r1, sp, #8
 8088c08:	f001 fc62 	bl	808a4d0 <_svfiprintf_r>
 8088c0c:	9b02      	ldr	r3, [sp, #8]
 8088c0e:	2200      	movs	r2, #0
 8088c10:	701a      	strb	r2, [r3, #0]
 8088c12:	b01c      	add	sp, #112	; 0x70
 8088c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8088c18:	b003      	add	sp, #12
 8088c1a:	4770      	bx	lr
 8088c1c:	200000e4 	.word	0x200000e4
 8088c20:	ffff0208 	.word	0xffff0208

08088c24 <__sread>:
 8088c24:	b510      	push	{r4, lr}
 8088c26:	460c      	mov	r4, r1
 8088c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8088c2c:	f000 f882 	bl	8088d34 <_read_r>
 8088c30:	2800      	cmp	r0, #0
 8088c32:	bfab      	itete	ge
 8088c34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8088c36:	89a3      	ldrhlt	r3, [r4, #12]
 8088c38:	181b      	addge	r3, r3, r0
 8088c3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8088c3e:	bfac      	ite	ge
 8088c40:	6563      	strge	r3, [r4, #84]	; 0x54
 8088c42:	81a3      	strhlt	r3, [r4, #12]
 8088c44:	bd10      	pop	{r4, pc}

08088c46 <__swrite>:
 8088c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088c4a:	461f      	mov	r7, r3
 8088c4c:	898b      	ldrh	r3, [r1, #12]
 8088c4e:	05db      	lsls	r3, r3, #23
 8088c50:	4605      	mov	r5, r0
 8088c52:	460c      	mov	r4, r1
 8088c54:	4616      	mov	r6, r2
 8088c56:	d505      	bpl.n	8088c64 <__swrite+0x1e>
 8088c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8088c5c:	2302      	movs	r3, #2
 8088c5e:	2200      	movs	r2, #0
 8088c60:	f000 f856 	bl	8088d10 <_lseek_r>
 8088c64:	89a3      	ldrh	r3, [r4, #12]
 8088c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8088c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8088c6e:	81a3      	strh	r3, [r4, #12]
 8088c70:	4632      	mov	r2, r6
 8088c72:	463b      	mov	r3, r7
 8088c74:	4628      	mov	r0, r5
 8088c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8088c7a:	f000 b86d 	b.w	8088d58 <_write_r>

08088c7e <__sseek>:
 8088c7e:	b510      	push	{r4, lr}
 8088c80:	460c      	mov	r4, r1
 8088c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8088c86:	f000 f843 	bl	8088d10 <_lseek_r>
 8088c8a:	1c43      	adds	r3, r0, #1
 8088c8c:	89a3      	ldrh	r3, [r4, #12]
 8088c8e:	bf15      	itete	ne
 8088c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8088c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8088c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8088c9a:	81a3      	strheq	r3, [r4, #12]
 8088c9c:	bf18      	it	ne
 8088c9e:	81a3      	strhne	r3, [r4, #12]
 8088ca0:	bd10      	pop	{r4, pc}

08088ca2 <__sclose>:
 8088ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8088ca6:	f000 b823 	b.w	8088cf0 <_close_r>

08088caa <memset>:
 8088caa:	4402      	add	r2, r0
 8088cac:	4603      	mov	r3, r0
 8088cae:	4293      	cmp	r3, r2
 8088cb0:	d100      	bne.n	8088cb4 <memset+0xa>
 8088cb2:	4770      	bx	lr
 8088cb4:	f803 1b01 	strb.w	r1, [r3], #1
 8088cb8:	e7f9      	b.n	8088cae <memset+0x4>

08088cba <strstr>:
 8088cba:	780a      	ldrb	r2, [r1, #0]
 8088cbc:	b570      	push	{r4, r5, r6, lr}
 8088cbe:	b96a      	cbnz	r2, 8088cdc <strstr+0x22>
 8088cc0:	bd70      	pop	{r4, r5, r6, pc}
 8088cc2:	429a      	cmp	r2, r3
 8088cc4:	d109      	bne.n	8088cda <strstr+0x20>
 8088cc6:	460c      	mov	r4, r1
 8088cc8:	4605      	mov	r5, r0
 8088cca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8088cce:	2b00      	cmp	r3, #0
 8088cd0:	d0f6      	beq.n	8088cc0 <strstr+0x6>
 8088cd2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8088cd6:	429e      	cmp	r6, r3
 8088cd8:	d0f7      	beq.n	8088cca <strstr+0x10>
 8088cda:	3001      	adds	r0, #1
 8088cdc:	7803      	ldrb	r3, [r0, #0]
 8088cde:	2b00      	cmp	r3, #0
 8088ce0:	d1ef      	bne.n	8088cc2 <strstr+0x8>
 8088ce2:	4618      	mov	r0, r3
 8088ce4:	e7ec      	b.n	8088cc0 <strstr+0x6>
	...

08088ce8 <_localeconv_r>:
 8088ce8:	4800      	ldr	r0, [pc, #0]	; (8088cec <_localeconv_r+0x4>)
 8088cea:	4770      	bx	lr
 8088cec:	200001d8 	.word	0x200001d8

08088cf0 <_close_r>:
 8088cf0:	b538      	push	{r3, r4, r5, lr}
 8088cf2:	4d06      	ldr	r5, [pc, #24]	; (8088d0c <_close_r+0x1c>)
 8088cf4:	2300      	movs	r3, #0
 8088cf6:	4604      	mov	r4, r0
 8088cf8:	4608      	mov	r0, r1
 8088cfa:	602b      	str	r3, [r5, #0]
 8088cfc:	f7f9 fac7 	bl	808228e <_close>
 8088d00:	1c43      	adds	r3, r0, #1
 8088d02:	d102      	bne.n	8088d0a <_close_r+0x1a>
 8088d04:	682b      	ldr	r3, [r5, #0]
 8088d06:	b103      	cbz	r3, 8088d0a <_close_r+0x1a>
 8088d08:	6023      	str	r3, [r4, #0]
 8088d0a:	bd38      	pop	{r3, r4, r5, pc}
 8088d0c:	20000bb8 	.word	0x20000bb8

08088d10 <_lseek_r>:
 8088d10:	b538      	push	{r3, r4, r5, lr}
 8088d12:	4d07      	ldr	r5, [pc, #28]	; (8088d30 <_lseek_r+0x20>)
 8088d14:	4604      	mov	r4, r0
 8088d16:	4608      	mov	r0, r1
 8088d18:	4611      	mov	r1, r2
 8088d1a:	2200      	movs	r2, #0
 8088d1c:	602a      	str	r2, [r5, #0]
 8088d1e:	461a      	mov	r2, r3
 8088d20:	f7f9 fadc 	bl	80822dc <_lseek>
 8088d24:	1c43      	adds	r3, r0, #1
 8088d26:	d102      	bne.n	8088d2e <_lseek_r+0x1e>
 8088d28:	682b      	ldr	r3, [r5, #0]
 8088d2a:	b103      	cbz	r3, 8088d2e <_lseek_r+0x1e>
 8088d2c:	6023      	str	r3, [r4, #0]
 8088d2e:	bd38      	pop	{r3, r4, r5, pc}
 8088d30:	20000bb8 	.word	0x20000bb8

08088d34 <_read_r>:
 8088d34:	b538      	push	{r3, r4, r5, lr}
 8088d36:	4d07      	ldr	r5, [pc, #28]	; (8088d54 <_read_r+0x20>)
 8088d38:	4604      	mov	r4, r0
 8088d3a:	4608      	mov	r0, r1
 8088d3c:	4611      	mov	r1, r2
 8088d3e:	2200      	movs	r2, #0
 8088d40:	602a      	str	r2, [r5, #0]
 8088d42:	461a      	mov	r2, r3
 8088d44:	f7f9 fa6a 	bl	808221c <_read>
 8088d48:	1c43      	adds	r3, r0, #1
 8088d4a:	d102      	bne.n	8088d52 <_read_r+0x1e>
 8088d4c:	682b      	ldr	r3, [r5, #0]
 8088d4e:	b103      	cbz	r3, 8088d52 <_read_r+0x1e>
 8088d50:	6023      	str	r3, [r4, #0]
 8088d52:	bd38      	pop	{r3, r4, r5, pc}
 8088d54:	20000bb8 	.word	0x20000bb8

08088d58 <_write_r>:
 8088d58:	b538      	push	{r3, r4, r5, lr}
 8088d5a:	4d07      	ldr	r5, [pc, #28]	; (8088d78 <_write_r+0x20>)
 8088d5c:	4604      	mov	r4, r0
 8088d5e:	4608      	mov	r0, r1
 8088d60:	4611      	mov	r1, r2
 8088d62:	2200      	movs	r2, #0
 8088d64:	602a      	str	r2, [r5, #0]
 8088d66:	461a      	mov	r2, r3
 8088d68:	f7f9 fa75 	bl	8082256 <_write>
 8088d6c:	1c43      	adds	r3, r0, #1
 8088d6e:	d102      	bne.n	8088d76 <_write_r+0x1e>
 8088d70:	682b      	ldr	r3, [r5, #0]
 8088d72:	b103      	cbz	r3, 8088d76 <_write_r+0x1e>
 8088d74:	6023      	str	r3, [r4, #0]
 8088d76:	bd38      	pop	{r3, r4, r5, pc}
 8088d78:	20000bb8 	.word	0x20000bb8

08088d7c <__errno>:
 8088d7c:	4b01      	ldr	r3, [pc, #4]	; (8088d84 <__errno+0x8>)
 8088d7e:	6818      	ldr	r0, [r3, #0]
 8088d80:	4770      	bx	lr
 8088d82:	bf00      	nop
 8088d84:	200000e4 	.word	0x200000e4

08088d88 <__libc_init_array>:
 8088d88:	b570      	push	{r4, r5, r6, lr}
 8088d8a:	4d0d      	ldr	r5, [pc, #52]	; (8088dc0 <__libc_init_array+0x38>)
 8088d8c:	4c0d      	ldr	r4, [pc, #52]	; (8088dc4 <__libc_init_array+0x3c>)
 8088d8e:	1b64      	subs	r4, r4, r5
 8088d90:	10a4      	asrs	r4, r4, #2
 8088d92:	2600      	movs	r6, #0
 8088d94:	42a6      	cmp	r6, r4
 8088d96:	d109      	bne.n	8088dac <__libc_init_array+0x24>
 8088d98:	4d0b      	ldr	r5, [pc, #44]	; (8088dc8 <__libc_init_array+0x40>)
 8088d9a:	4c0c      	ldr	r4, [pc, #48]	; (8088dcc <__libc_init_array+0x44>)
 8088d9c:	f002 f896 	bl	808aecc <_init>
 8088da0:	1b64      	subs	r4, r4, r5
 8088da2:	10a4      	asrs	r4, r4, #2
 8088da4:	2600      	movs	r6, #0
 8088da6:	42a6      	cmp	r6, r4
 8088da8:	d105      	bne.n	8088db6 <__libc_init_array+0x2e>
 8088daa:	bd70      	pop	{r4, r5, r6, pc}
 8088dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8088db0:	4798      	blx	r3
 8088db2:	3601      	adds	r6, #1
 8088db4:	e7ee      	b.n	8088d94 <__libc_init_array+0xc>
 8088db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8088dba:	4798      	blx	r3
 8088dbc:	3601      	adds	r6, #1
 8088dbe:	e7f2      	b.n	8088da6 <__libc_init_array+0x1e>
 8088dc0:	0808b8a0 	.word	0x0808b8a0
 8088dc4:	0808b8a0 	.word	0x0808b8a0
 8088dc8:	0808b8a0 	.word	0x0808b8a0
 8088dcc:	0808b8a4 	.word	0x0808b8a4

08088dd0 <__retarget_lock_init_recursive>:
 8088dd0:	4770      	bx	lr

08088dd2 <__retarget_lock_acquire_recursive>:
 8088dd2:	4770      	bx	lr

08088dd4 <__retarget_lock_release_recursive>:
 8088dd4:	4770      	bx	lr

08088dd6 <memcpy>:
 8088dd6:	440a      	add	r2, r1
 8088dd8:	4291      	cmp	r1, r2
 8088dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8088dde:	d100      	bne.n	8088de2 <memcpy+0xc>
 8088de0:	4770      	bx	lr
 8088de2:	b510      	push	{r4, lr}
 8088de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8088de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8088dec:	4291      	cmp	r1, r2
 8088dee:	d1f9      	bne.n	8088de4 <memcpy+0xe>
 8088df0:	bd10      	pop	{r4, pc}
	...

08088df4 <__assert_func>:
 8088df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8088df6:	4614      	mov	r4, r2
 8088df8:	461a      	mov	r2, r3
 8088dfa:	4b09      	ldr	r3, [pc, #36]	; (8088e20 <__assert_func+0x2c>)
 8088dfc:	681b      	ldr	r3, [r3, #0]
 8088dfe:	4605      	mov	r5, r0
 8088e00:	68d8      	ldr	r0, [r3, #12]
 8088e02:	b14c      	cbz	r4, 8088e18 <__assert_func+0x24>
 8088e04:	4b07      	ldr	r3, [pc, #28]	; (8088e24 <__assert_func+0x30>)
 8088e06:	9100      	str	r1, [sp, #0]
 8088e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8088e0c:	4906      	ldr	r1, [pc, #24]	; (8088e28 <__assert_func+0x34>)
 8088e0e:	462b      	mov	r3, r5
 8088e10:	f001 fe4e 	bl	808aab0 <fiprintf>
 8088e14:	f001 ff1e 	bl	808ac54 <abort>
 8088e18:	4b04      	ldr	r3, [pc, #16]	; (8088e2c <__assert_func+0x38>)
 8088e1a:	461c      	mov	r4, r3
 8088e1c:	e7f3      	b.n	8088e06 <__assert_func+0x12>
 8088e1e:	bf00      	nop
 8088e20:	200000e4 	.word	0x200000e4
 8088e24:	0808b659 	.word	0x0808b659
 8088e28:	0808b666 	.word	0x0808b666
 8088e2c:	0808b694 	.word	0x0808b694

08088e30 <quorem>:
 8088e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088e34:	6903      	ldr	r3, [r0, #16]
 8088e36:	690c      	ldr	r4, [r1, #16]
 8088e38:	42a3      	cmp	r3, r4
 8088e3a:	4607      	mov	r7, r0
 8088e3c:	db7e      	blt.n	8088f3c <quorem+0x10c>
 8088e3e:	3c01      	subs	r4, #1
 8088e40:	f101 0814 	add.w	r8, r1, #20
 8088e44:	f100 0514 	add.w	r5, r0, #20
 8088e48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8088e4c:	9301      	str	r3, [sp, #4]
 8088e4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8088e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8088e56:	3301      	adds	r3, #1
 8088e58:	429a      	cmp	r2, r3
 8088e5a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8088e5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8088e62:	fbb2 f6f3 	udiv	r6, r2, r3
 8088e66:	d331      	bcc.n	8088ecc <quorem+0x9c>
 8088e68:	f04f 0e00 	mov.w	lr, #0
 8088e6c:	4640      	mov	r0, r8
 8088e6e:	46ac      	mov	ip, r5
 8088e70:	46f2      	mov	sl, lr
 8088e72:	f850 2b04 	ldr.w	r2, [r0], #4
 8088e76:	b293      	uxth	r3, r2
 8088e78:	fb06 e303 	mla	r3, r6, r3, lr
 8088e7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8088e80:	0c1a      	lsrs	r2, r3, #16
 8088e82:	b29b      	uxth	r3, r3
 8088e84:	ebaa 0303 	sub.w	r3, sl, r3
 8088e88:	f8dc a000 	ldr.w	sl, [ip]
 8088e8c:	fa13 f38a 	uxtah	r3, r3, sl
 8088e90:	fb06 220e 	mla	r2, r6, lr, r2
 8088e94:	9300      	str	r3, [sp, #0]
 8088e96:	9b00      	ldr	r3, [sp, #0]
 8088e98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8088e9c:	b292      	uxth	r2, r2
 8088e9e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8088ea2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8088ea6:	f8bd 3000 	ldrh.w	r3, [sp]
 8088eaa:	4581      	cmp	r9, r0
 8088eac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8088eb0:	f84c 3b04 	str.w	r3, [ip], #4
 8088eb4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8088eb8:	d2db      	bcs.n	8088e72 <quorem+0x42>
 8088eba:	f855 300b 	ldr.w	r3, [r5, fp]
 8088ebe:	b92b      	cbnz	r3, 8088ecc <quorem+0x9c>
 8088ec0:	9b01      	ldr	r3, [sp, #4]
 8088ec2:	3b04      	subs	r3, #4
 8088ec4:	429d      	cmp	r5, r3
 8088ec6:	461a      	mov	r2, r3
 8088ec8:	d32c      	bcc.n	8088f24 <quorem+0xf4>
 8088eca:	613c      	str	r4, [r7, #16]
 8088ecc:	4638      	mov	r0, r7
 8088ece:	f001 f9a5 	bl	808a21c <__mcmp>
 8088ed2:	2800      	cmp	r0, #0
 8088ed4:	db22      	blt.n	8088f1c <quorem+0xec>
 8088ed6:	3601      	adds	r6, #1
 8088ed8:	4629      	mov	r1, r5
 8088eda:	2000      	movs	r0, #0
 8088edc:	f858 2b04 	ldr.w	r2, [r8], #4
 8088ee0:	f8d1 c000 	ldr.w	ip, [r1]
 8088ee4:	b293      	uxth	r3, r2
 8088ee6:	1ac3      	subs	r3, r0, r3
 8088ee8:	0c12      	lsrs	r2, r2, #16
 8088eea:	fa13 f38c 	uxtah	r3, r3, ip
 8088eee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8088ef2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8088ef6:	b29b      	uxth	r3, r3
 8088ef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8088efc:	45c1      	cmp	r9, r8
 8088efe:	f841 3b04 	str.w	r3, [r1], #4
 8088f02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8088f06:	d2e9      	bcs.n	8088edc <quorem+0xac>
 8088f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8088f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8088f10:	b922      	cbnz	r2, 8088f1c <quorem+0xec>
 8088f12:	3b04      	subs	r3, #4
 8088f14:	429d      	cmp	r5, r3
 8088f16:	461a      	mov	r2, r3
 8088f18:	d30a      	bcc.n	8088f30 <quorem+0x100>
 8088f1a:	613c      	str	r4, [r7, #16]
 8088f1c:	4630      	mov	r0, r6
 8088f1e:	b003      	add	sp, #12
 8088f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088f24:	6812      	ldr	r2, [r2, #0]
 8088f26:	3b04      	subs	r3, #4
 8088f28:	2a00      	cmp	r2, #0
 8088f2a:	d1ce      	bne.n	8088eca <quorem+0x9a>
 8088f2c:	3c01      	subs	r4, #1
 8088f2e:	e7c9      	b.n	8088ec4 <quorem+0x94>
 8088f30:	6812      	ldr	r2, [r2, #0]
 8088f32:	3b04      	subs	r3, #4
 8088f34:	2a00      	cmp	r2, #0
 8088f36:	d1f0      	bne.n	8088f1a <quorem+0xea>
 8088f38:	3c01      	subs	r4, #1
 8088f3a:	e7eb      	b.n	8088f14 <quorem+0xe4>
 8088f3c:	2000      	movs	r0, #0
 8088f3e:	e7ee      	b.n	8088f1e <quorem+0xee>

08088f40 <_dtoa_r>:
 8088f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088f44:	ed2d 8b04 	vpush	{d8-d9}
 8088f48:	69c5      	ldr	r5, [r0, #28]
 8088f4a:	b093      	sub	sp, #76	; 0x4c
 8088f4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8088f50:	ec57 6b10 	vmov	r6, r7, d0
 8088f54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8088f58:	9107      	str	r1, [sp, #28]
 8088f5a:	4604      	mov	r4, r0
 8088f5c:	920a      	str	r2, [sp, #40]	; 0x28
 8088f5e:	930d      	str	r3, [sp, #52]	; 0x34
 8088f60:	b975      	cbnz	r5, 8088f80 <_dtoa_r+0x40>
 8088f62:	2010      	movs	r0, #16
 8088f64:	f000 fe2a 	bl	8089bbc <malloc>
 8088f68:	4602      	mov	r2, r0
 8088f6a:	61e0      	str	r0, [r4, #28]
 8088f6c:	b920      	cbnz	r0, 8088f78 <_dtoa_r+0x38>
 8088f6e:	4bae      	ldr	r3, [pc, #696]	; (8089228 <_dtoa_r+0x2e8>)
 8088f70:	21ef      	movs	r1, #239	; 0xef
 8088f72:	48ae      	ldr	r0, [pc, #696]	; (808922c <_dtoa_r+0x2ec>)
 8088f74:	f7ff ff3e 	bl	8088df4 <__assert_func>
 8088f78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8088f7c:	6005      	str	r5, [r0, #0]
 8088f7e:	60c5      	str	r5, [r0, #12]
 8088f80:	69e3      	ldr	r3, [r4, #28]
 8088f82:	6819      	ldr	r1, [r3, #0]
 8088f84:	b151      	cbz	r1, 8088f9c <_dtoa_r+0x5c>
 8088f86:	685a      	ldr	r2, [r3, #4]
 8088f88:	604a      	str	r2, [r1, #4]
 8088f8a:	2301      	movs	r3, #1
 8088f8c:	4093      	lsls	r3, r2
 8088f8e:	608b      	str	r3, [r1, #8]
 8088f90:	4620      	mov	r0, r4
 8088f92:	f000 ff07 	bl	8089da4 <_Bfree>
 8088f96:	69e3      	ldr	r3, [r4, #28]
 8088f98:	2200      	movs	r2, #0
 8088f9a:	601a      	str	r2, [r3, #0]
 8088f9c:	1e3b      	subs	r3, r7, #0
 8088f9e:	bfbb      	ittet	lt
 8088fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8088fa4:	9303      	strlt	r3, [sp, #12]
 8088fa6:	2300      	movge	r3, #0
 8088fa8:	2201      	movlt	r2, #1
 8088faa:	bfac      	ite	ge
 8088fac:	f8c8 3000 	strge.w	r3, [r8]
 8088fb0:	f8c8 2000 	strlt.w	r2, [r8]
 8088fb4:	4b9e      	ldr	r3, [pc, #632]	; (8089230 <_dtoa_r+0x2f0>)
 8088fb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8088fba:	ea33 0308 	bics.w	r3, r3, r8
 8088fbe:	d11b      	bne.n	8088ff8 <_dtoa_r+0xb8>
 8088fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8088fc2:	f242 730f 	movw	r3, #9999	; 0x270f
 8088fc6:	6013      	str	r3, [r2, #0]
 8088fc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8088fcc:	4333      	orrs	r3, r6
 8088fce:	f000 8593 	beq.w	8089af8 <_dtoa_r+0xbb8>
 8088fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8088fd4:	b963      	cbnz	r3, 8088ff0 <_dtoa_r+0xb0>
 8088fd6:	4b97      	ldr	r3, [pc, #604]	; (8089234 <_dtoa_r+0x2f4>)
 8088fd8:	e027      	b.n	808902a <_dtoa_r+0xea>
 8088fda:	4b97      	ldr	r3, [pc, #604]	; (8089238 <_dtoa_r+0x2f8>)
 8088fdc:	9300      	str	r3, [sp, #0]
 8088fde:	3308      	adds	r3, #8
 8088fe0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8088fe2:	6013      	str	r3, [r2, #0]
 8088fe4:	9800      	ldr	r0, [sp, #0]
 8088fe6:	b013      	add	sp, #76	; 0x4c
 8088fe8:	ecbd 8b04 	vpop	{d8-d9}
 8088fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088ff0:	4b90      	ldr	r3, [pc, #576]	; (8089234 <_dtoa_r+0x2f4>)
 8088ff2:	9300      	str	r3, [sp, #0]
 8088ff4:	3303      	adds	r3, #3
 8088ff6:	e7f3      	b.n	8088fe0 <_dtoa_r+0xa0>
 8088ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8088ffc:	2200      	movs	r2, #0
 8088ffe:	ec51 0b17 	vmov	r0, r1, d7
 8089002:	eeb0 8a47 	vmov.f32	s16, s14
 8089006:	eef0 8a67 	vmov.f32	s17, s15
 808900a:	2300      	movs	r3, #0
 808900c:	f7f7 fd5c 	bl	8080ac8 <__aeabi_dcmpeq>
 8089010:	4681      	mov	r9, r0
 8089012:	b160      	cbz	r0, 808902e <_dtoa_r+0xee>
 8089014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8089016:	2301      	movs	r3, #1
 8089018:	6013      	str	r3, [r2, #0]
 808901a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808901c:	2b00      	cmp	r3, #0
 808901e:	f000 8568 	beq.w	8089af2 <_dtoa_r+0xbb2>
 8089022:	4b86      	ldr	r3, [pc, #536]	; (808923c <_dtoa_r+0x2fc>)
 8089024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8089026:	6013      	str	r3, [r2, #0]
 8089028:	3b01      	subs	r3, #1
 808902a:	9300      	str	r3, [sp, #0]
 808902c:	e7da      	b.n	8088fe4 <_dtoa_r+0xa4>
 808902e:	aa10      	add	r2, sp, #64	; 0x40
 8089030:	a911      	add	r1, sp, #68	; 0x44
 8089032:	4620      	mov	r0, r4
 8089034:	eeb0 0a48 	vmov.f32	s0, s16
 8089038:	eef0 0a68 	vmov.f32	s1, s17
 808903c:	f001 f994 	bl	808a368 <__d2b>
 8089040:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8089044:	4682      	mov	sl, r0
 8089046:	2d00      	cmp	r5, #0
 8089048:	d07f      	beq.n	808914a <_dtoa_r+0x20a>
 808904a:	ee18 3a90 	vmov	r3, s17
 808904e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8089052:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8089056:	ec51 0b18 	vmov	r0, r1, d8
 808905a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808905e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8089062:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8089066:	4619      	mov	r1, r3
 8089068:	2200      	movs	r2, #0
 808906a:	4b75      	ldr	r3, [pc, #468]	; (8089240 <_dtoa_r+0x300>)
 808906c:	f7f7 f90c 	bl	8080288 <__aeabi_dsub>
 8089070:	a367      	add	r3, pc, #412	; (adr r3, 8089210 <_dtoa_r+0x2d0>)
 8089072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089076:	f7f7 fabf 	bl	80805f8 <__aeabi_dmul>
 808907a:	a367      	add	r3, pc, #412	; (adr r3, 8089218 <_dtoa_r+0x2d8>)
 808907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089080:	f7f7 f904 	bl	808028c <__adddf3>
 8089084:	4606      	mov	r6, r0
 8089086:	4628      	mov	r0, r5
 8089088:	460f      	mov	r7, r1
 808908a:	f7f7 fa4b 	bl	8080524 <__aeabi_i2d>
 808908e:	a364      	add	r3, pc, #400	; (adr r3, 8089220 <_dtoa_r+0x2e0>)
 8089090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089094:	f7f7 fab0 	bl	80805f8 <__aeabi_dmul>
 8089098:	4602      	mov	r2, r0
 808909a:	460b      	mov	r3, r1
 808909c:	4630      	mov	r0, r6
 808909e:	4639      	mov	r1, r7
 80890a0:	f7f7 f8f4 	bl	808028c <__adddf3>
 80890a4:	4606      	mov	r6, r0
 80890a6:	460f      	mov	r7, r1
 80890a8:	f7f7 fd56 	bl	8080b58 <__aeabi_d2iz>
 80890ac:	2200      	movs	r2, #0
 80890ae:	4683      	mov	fp, r0
 80890b0:	2300      	movs	r3, #0
 80890b2:	4630      	mov	r0, r6
 80890b4:	4639      	mov	r1, r7
 80890b6:	f7f7 fd11 	bl	8080adc <__aeabi_dcmplt>
 80890ba:	b148      	cbz	r0, 80890d0 <_dtoa_r+0x190>
 80890bc:	4658      	mov	r0, fp
 80890be:	f7f7 fa31 	bl	8080524 <__aeabi_i2d>
 80890c2:	4632      	mov	r2, r6
 80890c4:	463b      	mov	r3, r7
 80890c6:	f7f7 fcff 	bl	8080ac8 <__aeabi_dcmpeq>
 80890ca:	b908      	cbnz	r0, 80890d0 <_dtoa_r+0x190>
 80890cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80890d0:	f1bb 0f16 	cmp.w	fp, #22
 80890d4:	d857      	bhi.n	8089186 <_dtoa_r+0x246>
 80890d6:	4b5b      	ldr	r3, [pc, #364]	; (8089244 <_dtoa_r+0x304>)
 80890d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80890dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80890e0:	ec51 0b18 	vmov	r0, r1, d8
 80890e4:	f7f7 fcfa 	bl	8080adc <__aeabi_dcmplt>
 80890e8:	2800      	cmp	r0, #0
 80890ea:	d04e      	beq.n	808918a <_dtoa_r+0x24a>
 80890ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80890f0:	2300      	movs	r3, #0
 80890f2:	930c      	str	r3, [sp, #48]	; 0x30
 80890f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80890f6:	1b5b      	subs	r3, r3, r5
 80890f8:	1e5a      	subs	r2, r3, #1
 80890fa:	bf45      	ittet	mi
 80890fc:	f1c3 0301 	rsbmi	r3, r3, #1
 8089100:	9305      	strmi	r3, [sp, #20]
 8089102:	2300      	movpl	r3, #0
 8089104:	2300      	movmi	r3, #0
 8089106:	9206      	str	r2, [sp, #24]
 8089108:	bf54      	ite	pl
 808910a:	9305      	strpl	r3, [sp, #20]
 808910c:	9306      	strmi	r3, [sp, #24]
 808910e:	f1bb 0f00 	cmp.w	fp, #0
 8089112:	db3c      	blt.n	808918e <_dtoa_r+0x24e>
 8089114:	9b06      	ldr	r3, [sp, #24]
 8089116:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 808911a:	445b      	add	r3, fp
 808911c:	9306      	str	r3, [sp, #24]
 808911e:	2300      	movs	r3, #0
 8089120:	9308      	str	r3, [sp, #32]
 8089122:	9b07      	ldr	r3, [sp, #28]
 8089124:	2b09      	cmp	r3, #9
 8089126:	d868      	bhi.n	80891fa <_dtoa_r+0x2ba>
 8089128:	2b05      	cmp	r3, #5
 808912a:	bfc4      	itt	gt
 808912c:	3b04      	subgt	r3, #4
 808912e:	9307      	strgt	r3, [sp, #28]
 8089130:	9b07      	ldr	r3, [sp, #28]
 8089132:	f1a3 0302 	sub.w	r3, r3, #2
 8089136:	bfcc      	ite	gt
 8089138:	2500      	movgt	r5, #0
 808913a:	2501      	movle	r5, #1
 808913c:	2b03      	cmp	r3, #3
 808913e:	f200 8085 	bhi.w	808924c <_dtoa_r+0x30c>
 8089142:	e8df f003 	tbb	[pc, r3]
 8089146:	3b2e      	.short	0x3b2e
 8089148:	5839      	.short	0x5839
 808914a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 808914e:	441d      	add	r5, r3
 8089150:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8089154:	2b20      	cmp	r3, #32
 8089156:	bfc1      	itttt	gt
 8089158:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 808915c:	fa08 f803 	lslgt.w	r8, r8, r3
 8089160:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8089164:	fa26 f303 	lsrgt.w	r3, r6, r3
 8089168:	bfd6      	itet	le
 808916a:	f1c3 0320 	rsble	r3, r3, #32
 808916e:	ea48 0003 	orrgt.w	r0, r8, r3
 8089172:	fa06 f003 	lslle.w	r0, r6, r3
 8089176:	f7f7 f9c5 	bl	8080504 <__aeabi_ui2d>
 808917a:	2201      	movs	r2, #1
 808917c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8089180:	3d01      	subs	r5, #1
 8089182:	920e      	str	r2, [sp, #56]	; 0x38
 8089184:	e76f      	b.n	8089066 <_dtoa_r+0x126>
 8089186:	2301      	movs	r3, #1
 8089188:	e7b3      	b.n	80890f2 <_dtoa_r+0x1b2>
 808918a:	900c      	str	r0, [sp, #48]	; 0x30
 808918c:	e7b2      	b.n	80890f4 <_dtoa_r+0x1b4>
 808918e:	9b05      	ldr	r3, [sp, #20]
 8089190:	eba3 030b 	sub.w	r3, r3, fp
 8089194:	9305      	str	r3, [sp, #20]
 8089196:	f1cb 0300 	rsb	r3, fp, #0
 808919a:	9308      	str	r3, [sp, #32]
 808919c:	2300      	movs	r3, #0
 808919e:	930b      	str	r3, [sp, #44]	; 0x2c
 80891a0:	e7bf      	b.n	8089122 <_dtoa_r+0x1e2>
 80891a2:	2300      	movs	r3, #0
 80891a4:	9309      	str	r3, [sp, #36]	; 0x24
 80891a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80891a8:	2b00      	cmp	r3, #0
 80891aa:	dc52      	bgt.n	8089252 <_dtoa_r+0x312>
 80891ac:	2301      	movs	r3, #1
 80891ae:	9301      	str	r3, [sp, #4]
 80891b0:	9304      	str	r3, [sp, #16]
 80891b2:	461a      	mov	r2, r3
 80891b4:	920a      	str	r2, [sp, #40]	; 0x28
 80891b6:	e00b      	b.n	80891d0 <_dtoa_r+0x290>
 80891b8:	2301      	movs	r3, #1
 80891ba:	e7f3      	b.n	80891a4 <_dtoa_r+0x264>
 80891bc:	2300      	movs	r3, #0
 80891be:	9309      	str	r3, [sp, #36]	; 0x24
 80891c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80891c2:	445b      	add	r3, fp
 80891c4:	9301      	str	r3, [sp, #4]
 80891c6:	3301      	adds	r3, #1
 80891c8:	2b01      	cmp	r3, #1
 80891ca:	9304      	str	r3, [sp, #16]
 80891cc:	bfb8      	it	lt
 80891ce:	2301      	movlt	r3, #1
 80891d0:	69e0      	ldr	r0, [r4, #28]
 80891d2:	2100      	movs	r1, #0
 80891d4:	2204      	movs	r2, #4
 80891d6:	f102 0614 	add.w	r6, r2, #20
 80891da:	429e      	cmp	r6, r3
 80891dc:	d93d      	bls.n	808925a <_dtoa_r+0x31a>
 80891de:	6041      	str	r1, [r0, #4]
 80891e0:	4620      	mov	r0, r4
 80891e2:	f000 fd9f 	bl	8089d24 <_Balloc>
 80891e6:	9000      	str	r0, [sp, #0]
 80891e8:	2800      	cmp	r0, #0
 80891ea:	d139      	bne.n	8089260 <_dtoa_r+0x320>
 80891ec:	4b16      	ldr	r3, [pc, #88]	; (8089248 <_dtoa_r+0x308>)
 80891ee:	4602      	mov	r2, r0
 80891f0:	f240 11af 	movw	r1, #431	; 0x1af
 80891f4:	e6bd      	b.n	8088f72 <_dtoa_r+0x32>
 80891f6:	2301      	movs	r3, #1
 80891f8:	e7e1      	b.n	80891be <_dtoa_r+0x27e>
 80891fa:	2501      	movs	r5, #1
 80891fc:	2300      	movs	r3, #0
 80891fe:	9307      	str	r3, [sp, #28]
 8089200:	9509      	str	r5, [sp, #36]	; 0x24
 8089202:	f04f 33ff 	mov.w	r3, #4294967295
 8089206:	9301      	str	r3, [sp, #4]
 8089208:	9304      	str	r3, [sp, #16]
 808920a:	2200      	movs	r2, #0
 808920c:	2312      	movs	r3, #18
 808920e:	e7d1      	b.n	80891b4 <_dtoa_r+0x274>
 8089210:	636f4361 	.word	0x636f4361
 8089214:	3fd287a7 	.word	0x3fd287a7
 8089218:	8b60c8b3 	.word	0x8b60c8b3
 808921c:	3fc68a28 	.word	0x3fc68a28
 8089220:	509f79fb 	.word	0x509f79fb
 8089224:	3fd34413 	.word	0x3fd34413
 8089228:	0808b6a2 	.word	0x0808b6a2
 808922c:	0808b6b9 	.word	0x0808b6b9
 8089230:	7ff00000 	.word	0x7ff00000
 8089234:	0808b69e 	.word	0x0808b69e
 8089238:	0808b695 	.word	0x0808b695
 808923c:	0808b636 	.word	0x0808b636
 8089240:	3ff80000 	.word	0x3ff80000
 8089244:	0808b7a8 	.word	0x0808b7a8
 8089248:	0808b711 	.word	0x0808b711
 808924c:	2301      	movs	r3, #1
 808924e:	9309      	str	r3, [sp, #36]	; 0x24
 8089250:	e7d7      	b.n	8089202 <_dtoa_r+0x2c2>
 8089252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089254:	9301      	str	r3, [sp, #4]
 8089256:	9304      	str	r3, [sp, #16]
 8089258:	e7ba      	b.n	80891d0 <_dtoa_r+0x290>
 808925a:	3101      	adds	r1, #1
 808925c:	0052      	lsls	r2, r2, #1
 808925e:	e7ba      	b.n	80891d6 <_dtoa_r+0x296>
 8089260:	69e3      	ldr	r3, [r4, #28]
 8089262:	9a00      	ldr	r2, [sp, #0]
 8089264:	601a      	str	r2, [r3, #0]
 8089266:	9b04      	ldr	r3, [sp, #16]
 8089268:	2b0e      	cmp	r3, #14
 808926a:	f200 80a8 	bhi.w	80893be <_dtoa_r+0x47e>
 808926e:	2d00      	cmp	r5, #0
 8089270:	f000 80a5 	beq.w	80893be <_dtoa_r+0x47e>
 8089274:	f1bb 0f00 	cmp.w	fp, #0
 8089278:	dd38      	ble.n	80892ec <_dtoa_r+0x3ac>
 808927a:	4bc0      	ldr	r3, [pc, #768]	; (808957c <_dtoa_r+0x63c>)
 808927c:	f00b 020f 	and.w	r2, fp, #15
 8089280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8089284:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8089288:	e9d3 6700 	ldrd	r6, r7, [r3]
 808928c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8089290:	d019      	beq.n	80892c6 <_dtoa_r+0x386>
 8089292:	4bbb      	ldr	r3, [pc, #748]	; (8089580 <_dtoa_r+0x640>)
 8089294:	ec51 0b18 	vmov	r0, r1, d8
 8089298:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 808929c:	f7f7 fad6 	bl	808084c <__aeabi_ddiv>
 80892a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80892a4:	f008 080f 	and.w	r8, r8, #15
 80892a8:	2503      	movs	r5, #3
 80892aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8089580 <_dtoa_r+0x640>
 80892ae:	f1b8 0f00 	cmp.w	r8, #0
 80892b2:	d10a      	bne.n	80892ca <_dtoa_r+0x38a>
 80892b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80892b8:	4632      	mov	r2, r6
 80892ba:	463b      	mov	r3, r7
 80892bc:	f7f7 fac6 	bl	808084c <__aeabi_ddiv>
 80892c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80892c4:	e02b      	b.n	808931e <_dtoa_r+0x3de>
 80892c6:	2502      	movs	r5, #2
 80892c8:	e7ef      	b.n	80892aa <_dtoa_r+0x36a>
 80892ca:	f018 0f01 	tst.w	r8, #1
 80892ce:	d008      	beq.n	80892e2 <_dtoa_r+0x3a2>
 80892d0:	4630      	mov	r0, r6
 80892d2:	4639      	mov	r1, r7
 80892d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80892d8:	f7f7 f98e 	bl	80805f8 <__aeabi_dmul>
 80892dc:	3501      	adds	r5, #1
 80892de:	4606      	mov	r6, r0
 80892e0:	460f      	mov	r7, r1
 80892e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80892e6:	f109 0908 	add.w	r9, r9, #8
 80892ea:	e7e0      	b.n	80892ae <_dtoa_r+0x36e>
 80892ec:	f000 809f 	beq.w	808942e <_dtoa_r+0x4ee>
 80892f0:	f1cb 0600 	rsb	r6, fp, #0
 80892f4:	4ba1      	ldr	r3, [pc, #644]	; (808957c <_dtoa_r+0x63c>)
 80892f6:	4fa2      	ldr	r7, [pc, #648]	; (8089580 <_dtoa_r+0x640>)
 80892f8:	f006 020f 	and.w	r2, r6, #15
 80892fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8089300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8089304:	ec51 0b18 	vmov	r0, r1, d8
 8089308:	f7f7 f976 	bl	80805f8 <__aeabi_dmul>
 808930c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8089310:	1136      	asrs	r6, r6, #4
 8089312:	2300      	movs	r3, #0
 8089314:	2502      	movs	r5, #2
 8089316:	2e00      	cmp	r6, #0
 8089318:	d17e      	bne.n	8089418 <_dtoa_r+0x4d8>
 808931a:	2b00      	cmp	r3, #0
 808931c:	d1d0      	bne.n	80892c0 <_dtoa_r+0x380>
 808931e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8089320:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8089324:	2b00      	cmp	r3, #0
 8089326:	f000 8084 	beq.w	8089432 <_dtoa_r+0x4f2>
 808932a:	4b96      	ldr	r3, [pc, #600]	; (8089584 <_dtoa_r+0x644>)
 808932c:	2200      	movs	r2, #0
 808932e:	4640      	mov	r0, r8
 8089330:	4649      	mov	r1, r9
 8089332:	f7f7 fbd3 	bl	8080adc <__aeabi_dcmplt>
 8089336:	2800      	cmp	r0, #0
 8089338:	d07b      	beq.n	8089432 <_dtoa_r+0x4f2>
 808933a:	9b04      	ldr	r3, [sp, #16]
 808933c:	2b00      	cmp	r3, #0
 808933e:	d078      	beq.n	8089432 <_dtoa_r+0x4f2>
 8089340:	9b01      	ldr	r3, [sp, #4]
 8089342:	2b00      	cmp	r3, #0
 8089344:	dd39      	ble.n	80893ba <_dtoa_r+0x47a>
 8089346:	4b90      	ldr	r3, [pc, #576]	; (8089588 <_dtoa_r+0x648>)
 8089348:	2200      	movs	r2, #0
 808934a:	4640      	mov	r0, r8
 808934c:	4649      	mov	r1, r9
 808934e:	f7f7 f953 	bl	80805f8 <__aeabi_dmul>
 8089352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8089356:	9e01      	ldr	r6, [sp, #4]
 8089358:	f10b 37ff 	add.w	r7, fp, #4294967295
 808935c:	3501      	adds	r5, #1
 808935e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8089362:	4628      	mov	r0, r5
 8089364:	f7f7 f8de 	bl	8080524 <__aeabi_i2d>
 8089368:	4642      	mov	r2, r8
 808936a:	464b      	mov	r3, r9
 808936c:	f7f7 f944 	bl	80805f8 <__aeabi_dmul>
 8089370:	4b86      	ldr	r3, [pc, #536]	; (808958c <_dtoa_r+0x64c>)
 8089372:	2200      	movs	r2, #0
 8089374:	f7f6 ff8a 	bl	808028c <__adddf3>
 8089378:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 808937c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8089380:	9303      	str	r3, [sp, #12]
 8089382:	2e00      	cmp	r6, #0
 8089384:	d158      	bne.n	8089438 <_dtoa_r+0x4f8>
 8089386:	4b82      	ldr	r3, [pc, #520]	; (8089590 <_dtoa_r+0x650>)
 8089388:	2200      	movs	r2, #0
 808938a:	4640      	mov	r0, r8
 808938c:	4649      	mov	r1, r9
 808938e:	f7f6 ff7b 	bl	8080288 <__aeabi_dsub>
 8089392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8089396:	4680      	mov	r8, r0
 8089398:	4689      	mov	r9, r1
 808939a:	f7f7 fbbd 	bl	8080b18 <__aeabi_dcmpgt>
 808939e:	2800      	cmp	r0, #0
 80893a0:	f040 8296 	bne.w	80898d0 <_dtoa_r+0x990>
 80893a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80893a8:	4640      	mov	r0, r8
 80893aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80893ae:	4649      	mov	r1, r9
 80893b0:	f7f7 fb94 	bl	8080adc <__aeabi_dcmplt>
 80893b4:	2800      	cmp	r0, #0
 80893b6:	f040 8289 	bne.w	80898cc <_dtoa_r+0x98c>
 80893ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 80893be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80893c0:	2b00      	cmp	r3, #0
 80893c2:	f2c0 814e 	blt.w	8089662 <_dtoa_r+0x722>
 80893c6:	f1bb 0f0e 	cmp.w	fp, #14
 80893ca:	f300 814a 	bgt.w	8089662 <_dtoa_r+0x722>
 80893ce:	4b6b      	ldr	r3, [pc, #428]	; (808957c <_dtoa_r+0x63c>)
 80893d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80893d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80893d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80893da:	2b00      	cmp	r3, #0
 80893dc:	f280 80dc 	bge.w	8089598 <_dtoa_r+0x658>
 80893e0:	9b04      	ldr	r3, [sp, #16]
 80893e2:	2b00      	cmp	r3, #0
 80893e4:	f300 80d8 	bgt.w	8089598 <_dtoa_r+0x658>
 80893e8:	f040 826f 	bne.w	80898ca <_dtoa_r+0x98a>
 80893ec:	4b68      	ldr	r3, [pc, #416]	; (8089590 <_dtoa_r+0x650>)
 80893ee:	2200      	movs	r2, #0
 80893f0:	4640      	mov	r0, r8
 80893f2:	4649      	mov	r1, r9
 80893f4:	f7f7 f900 	bl	80805f8 <__aeabi_dmul>
 80893f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80893fc:	f7f7 fb82 	bl	8080b04 <__aeabi_dcmpge>
 8089400:	9e04      	ldr	r6, [sp, #16]
 8089402:	4637      	mov	r7, r6
 8089404:	2800      	cmp	r0, #0
 8089406:	f040 8245 	bne.w	8089894 <_dtoa_r+0x954>
 808940a:	9d00      	ldr	r5, [sp, #0]
 808940c:	2331      	movs	r3, #49	; 0x31
 808940e:	f805 3b01 	strb.w	r3, [r5], #1
 8089412:	f10b 0b01 	add.w	fp, fp, #1
 8089416:	e241      	b.n	808989c <_dtoa_r+0x95c>
 8089418:	07f2      	lsls	r2, r6, #31
 808941a:	d505      	bpl.n	8089428 <_dtoa_r+0x4e8>
 808941c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8089420:	f7f7 f8ea 	bl	80805f8 <__aeabi_dmul>
 8089424:	3501      	adds	r5, #1
 8089426:	2301      	movs	r3, #1
 8089428:	1076      	asrs	r6, r6, #1
 808942a:	3708      	adds	r7, #8
 808942c:	e773      	b.n	8089316 <_dtoa_r+0x3d6>
 808942e:	2502      	movs	r5, #2
 8089430:	e775      	b.n	808931e <_dtoa_r+0x3de>
 8089432:	9e04      	ldr	r6, [sp, #16]
 8089434:	465f      	mov	r7, fp
 8089436:	e792      	b.n	808935e <_dtoa_r+0x41e>
 8089438:	9900      	ldr	r1, [sp, #0]
 808943a:	4b50      	ldr	r3, [pc, #320]	; (808957c <_dtoa_r+0x63c>)
 808943c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8089440:	4431      	add	r1, r6
 8089442:	9102      	str	r1, [sp, #8]
 8089444:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089446:	eeb0 9a47 	vmov.f32	s18, s14
 808944a:	eef0 9a67 	vmov.f32	s19, s15
 808944e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8089452:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8089456:	2900      	cmp	r1, #0
 8089458:	d044      	beq.n	80894e4 <_dtoa_r+0x5a4>
 808945a:	494e      	ldr	r1, [pc, #312]	; (8089594 <_dtoa_r+0x654>)
 808945c:	2000      	movs	r0, #0
 808945e:	f7f7 f9f5 	bl	808084c <__aeabi_ddiv>
 8089462:	ec53 2b19 	vmov	r2, r3, d9
 8089466:	f7f6 ff0f 	bl	8080288 <__aeabi_dsub>
 808946a:	9d00      	ldr	r5, [sp, #0]
 808946c:	ec41 0b19 	vmov	d9, r0, r1
 8089470:	4649      	mov	r1, r9
 8089472:	4640      	mov	r0, r8
 8089474:	f7f7 fb70 	bl	8080b58 <__aeabi_d2iz>
 8089478:	4606      	mov	r6, r0
 808947a:	f7f7 f853 	bl	8080524 <__aeabi_i2d>
 808947e:	4602      	mov	r2, r0
 8089480:	460b      	mov	r3, r1
 8089482:	4640      	mov	r0, r8
 8089484:	4649      	mov	r1, r9
 8089486:	f7f6 feff 	bl	8080288 <__aeabi_dsub>
 808948a:	3630      	adds	r6, #48	; 0x30
 808948c:	f805 6b01 	strb.w	r6, [r5], #1
 8089490:	ec53 2b19 	vmov	r2, r3, d9
 8089494:	4680      	mov	r8, r0
 8089496:	4689      	mov	r9, r1
 8089498:	f7f7 fb20 	bl	8080adc <__aeabi_dcmplt>
 808949c:	2800      	cmp	r0, #0
 808949e:	d164      	bne.n	808956a <_dtoa_r+0x62a>
 80894a0:	4642      	mov	r2, r8
 80894a2:	464b      	mov	r3, r9
 80894a4:	4937      	ldr	r1, [pc, #220]	; (8089584 <_dtoa_r+0x644>)
 80894a6:	2000      	movs	r0, #0
 80894a8:	f7f6 feee 	bl	8080288 <__aeabi_dsub>
 80894ac:	ec53 2b19 	vmov	r2, r3, d9
 80894b0:	f7f7 fb14 	bl	8080adc <__aeabi_dcmplt>
 80894b4:	2800      	cmp	r0, #0
 80894b6:	f040 80b6 	bne.w	8089626 <_dtoa_r+0x6e6>
 80894ba:	9b02      	ldr	r3, [sp, #8]
 80894bc:	429d      	cmp	r5, r3
 80894be:	f43f af7c 	beq.w	80893ba <_dtoa_r+0x47a>
 80894c2:	4b31      	ldr	r3, [pc, #196]	; (8089588 <_dtoa_r+0x648>)
 80894c4:	ec51 0b19 	vmov	r0, r1, d9
 80894c8:	2200      	movs	r2, #0
 80894ca:	f7f7 f895 	bl	80805f8 <__aeabi_dmul>
 80894ce:	4b2e      	ldr	r3, [pc, #184]	; (8089588 <_dtoa_r+0x648>)
 80894d0:	ec41 0b19 	vmov	d9, r0, r1
 80894d4:	2200      	movs	r2, #0
 80894d6:	4640      	mov	r0, r8
 80894d8:	4649      	mov	r1, r9
 80894da:	f7f7 f88d 	bl	80805f8 <__aeabi_dmul>
 80894de:	4680      	mov	r8, r0
 80894e0:	4689      	mov	r9, r1
 80894e2:	e7c5      	b.n	8089470 <_dtoa_r+0x530>
 80894e4:	ec51 0b17 	vmov	r0, r1, d7
 80894e8:	f7f7 f886 	bl	80805f8 <__aeabi_dmul>
 80894ec:	9b02      	ldr	r3, [sp, #8]
 80894ee:	9d00      	ldr	r5, [sp, #0]
 80894f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80894f2:	ec41 0b19 	vmov	d9, r0, r1
 80894f6:	4649      	mov	r1, r9
 80894f8:	4640      	mov	r0, r8
 80894fa:	f7f7 fb2d 	bl	8080b58 <__aeabi_d2iz>
 80894fe:	4606      	mov	r6, r0
 8089500:	f7f7 f810 	bl	8080524 <__aeabi_i2d>
 8089504:	3630      	adds	r6, #48	; 0x30
 8089506:	4602      	mov	r2, r0
 8089508:	460b      	mov	r3, r1
 808950a:	4640      	mov	r0, r8
 808950c:	4649      	mov	r1, r9
 808950e:	f7f6 febb 	bl	8080288 <__aeabi_dsub>
 8089512:	f805 6b01 	strb.w	r6, [r5], #1
 8089516:	9b02      	ldr	r3, [sp, #8]
 8089518:	429d      	cmp	r5, r3
 808951a:	4680      	mov	r8, r0
 808951c:	4689      	mov	r9, r1
 808951e:	f04f 0200 	mov.w	r2, #0
 8089522:	d124      	bne.n	808956e <_dtoa_r+0x62e>
 8089524:	4b1b      	ldr	r3, [pc, #108]	; (8089594 <_dtoa_r+0x654>)
 8089526:	ec51 0b19 	vmov	r0, r1, d9
 808952a:	f7f6 feaf 	bl	808028c <__adddf3>
 808952e:	4602      	mov	r2, r0
 8089530:	460b      	mov	r3, r1
 8089532:	4640      	mov	r0, r8
 8089534:	4649      	mov	r1, r9
 8089536:	f7f7 faef 	bl	8080b18 <__aeabi_dcmpgt>
 808953a:	2800      	cmp	r0, #0
 808953c:	d173      	bne.n	8089626 <_dtoa_r+0x6e6>
 808953e:	ec53 2b19 	vmov	r2, r3, d9
 8089542:	4914      	ldr	r1, [pc, #80]	; (8089594 <_dtoa_r+0x654>)
 8089544:	2000      	movs	r0, #0
 8089546:	f7f6 fe9f 	bl	8080288 <__aeabi_dsub>
 808954a:	4602      	mov	r2, r0
 808954c:	460b      	mov	r3, r1
 808954e:	4640      	mov	r0, r8
 8089550:	4649      	mov	r1, r9
 8089552:	f7f7 fac3 	bl	8080adc <__aeabi_dcmplt>
 8089556:	2800      	cmp	r0, #0
 8089558:	f43f af2f 	beq.w	80893ba <_dtoa_r+0x47a>
 808955c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 808955e:	1e6b      	subs	r3, r5, #1
 8089560:	930f      	str	r3, [sp, #60]	; 0x3c
 8089562:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8089566:	2b30      	cmp	r3, #48	; 0x30
 8089568:	d0f8      	beq.n	808955c <_dtoa_r+0x61c>
 808956a:	46bb      	mov	fp, r7
 808956c:	e04a      	b.n	8089604 <_dtoa_r+0x6c4>
 808956e:	4b06      	ldr	r3, [pc, #24]	; (8089588 <_dtoa_r+0x648>)
 8089570:	f7f7 f842 	bl	80805f8 <__aeabi_dmul>
 8089574:	4680      	mov	r8, r0
 8089576:	4689      	mov	r9, r1
 8089578:	e7bd      	b.n	80894f6 <_dtoa_r+0x5b6>
 808957a:	bf00      	nop
 808957c:	0808b7a8 	.word	0x0808b7a8
 8089580:	0808b780 	.word	0x0808b780
 8089584:	3ff00000 	.word	0x3ff00000
 8089588:	40240000 	.word	0x40240000
 808958c:	401c0000 	.word	0x401c0000
 8089590:	40140000 	.word	0x40140000
 8089594:	3fe00000 	.word	0x3fe00000
 8089598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 808959c:	9d00      	ldr	r5, [sp, #0]
 808959e:	4642      	mov	r2, r8
 80895a0:	464b      	mov	r3, r9
 80895a2:	4630      	mov	r0, r6
 80895a4:	4639      	mov	r1, r7
 80895a6:	f7f7 f951 	bl	808084c <__aeabi_ddiv>
 80895aa:	f7f7 fad5 	bl	8080b58 <__aeabi_d2iz>
 80895ae:	9001      	str	r0, [sp, #4]
 80895b0:	f7f6 ffb8 	bl	8080524 <__aeabi_i2d>
 80895b4:	4642      	mov	r2, r8
 80895b6:	464b      	mov	r3, r9
 80895b8:	f7f7 f81e 	bl	80805f8 <__aeabi_dmul>
 80895bc:	4602      	mov	r2, r0
 80895be:	460b      	mov	r3, r1
 80895c0:	4630      	mov	r0, r6
 80895c2:	4639      	mov	r1, r7
 80895c4:	f7f6 fe60 	bl	8080288 <__aeabi_dsub>
 80895c8:	9e01      	ldr	r6, [sp, #4]
 80895ca:	9f04      	ldr	r7, [sp, #16]
 80895cc:	3630      	adds	r6, #48	; 0x30
 80895ce:	f805 6b01 	strb.w	r6, [r5], #1
 80895d2:	9e00      	ldr	r6, [sp, #0]
 80895d4:	1bae      	subs	r6, r5, r6
 80895d6:	42b7      	cmp	r7, r6
 80895d8:	4602      	mov	r2, r0
 80895da:	460b      	mov	r3, r1
 80895dc:	d134      	bne.n	8089648 <_dtoa_r+0x708>
 80895de:	f7f6 fe55 	bl	808028c <__adddf3>
 80895e2:	4642      	mov	r2, r8
 80895e4:	464b      	mov	r3, r9
 80895e6:	4606      	mov	r6, r0
 80895e8:	460f      	mov	r7, r1
 80895ea:	f7f7 fa95 	bl	8080b18 <__aeabi_dcmpgt>
 80895ee:	b9c8      	cbnz	r0, 8089624 <_dtoa_r+0x6e4>
 80895f0:	4642      	mov	r2, r8
 80895f2:	464b      	mov	r3, r9
 80895f4:	4630      	mov	r0, r6
 80895f6:	4639      	mov	r1, r7
 80895f8:	f7f7 fa66 	bl	8080ac8 <__aeabi_dcmpeq>
 80895fc:	b110      	cbz	r0, 8089604 <_dtoa_r+0x6c4>
 80895fe:	9b01      	ldr	r3, [sp, #4]
 8089600:	07db      	lsls	r3, r3, #31
 8089602:	d40f      	bmi.n	8089624 <_dtoa_r+0x6e4>
 8089604:	4651      	mov	r1, sl
 8089606:	4620      	mov	r0, r4
 8089608:	f000 fbcc 	bl	8089da4 <_Bfree>
 808960c:	2300      	movs	r3, #0
 808960e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8089610:	702b      	strb	r3, [r5, #0]
 8089612:	f10b 0301 	add.w	r3, fp, #1
 8089616:	6013      	str	r3, [r2, #0]
 8089618:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808961a:	2b00      	cmp	r3, #0
 808961c:	f43f ace2 	beq.w	8088fe4 <_dtoa_r+0xa4>
 8089620:	601d      	str	r5, [r3, #0]
 8089622:	e4df      	b.n	8088fe4 <_dtoa_r+0xa4>
 8089624:	465f      	mov	r7, fp
 8089626:	462b      	mov	r3, r5
 8089628:	461d      	mov	r5, r3
 808962a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808962e:	2a39      	cmp	r2, #57	; 0x39
 8089630:	d106      	bne.n	8089640 <_dtoa_r+0x700>
 8089632:	9a00      	ldr	r2, [sp, #0]
 8089634:	429a      	cmp	r2, r3
 8089636:	d1f7      	bne.n	8089628 <_dtoa_r+0x6e8>
 8089638:	9900      	ldr	r1, [sp, #0]
 808963a:	2230      	movs	r2, #48	; 0x30
 808963c:	3701      	adds	r7, #1
 808963e:	700a      	strb	r2, [r1, #0]
 8089640:	781a      	ldrb	r2, [r3, #0]
 8089642:	3201      	adds	r2, #1
 8089644:	701a      	strb	r2, [r3, #0]
 8089646:	e790      	b.n	808956a <_dtoa_r+0x62a>
 8089648:	4ba3      	ldr	r3, [pc, #652]	; (80898d8 <_dtoa_r+0x998>)
 808964a:	2200      	movs	r2, #0
 808964c:	f7f6 ffd4 	bl	80805f8 <__aeabi_dmul>
 8089650:	2200      	movs	r2, #0
 8089652:	2300      	movs	r3, #0
 8089654:	4606      	mov	r6, r0
 8089656:	460f      	mov	r7, r1
 8089658:	f7f7 fa36 	bl	8080ac8 <__aeabi_dcmpeq>
 808965c:	2800      	cmp	r0, #0
 808965e:	d09e      	beq.n	808959e <_dtoa_r+0x65e>
 8089660:	e7d0      	b.n	8089604 <_dtoa_r+0x6c4>
 8089662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8089664:	2a00      	cmp	r2, #0
 8089666:	f000 80ca 	beq.w	80897fe <_dtoa_r+0x8be>
 808966a:	9a07      	ldr	r2, [sp, #28]
 808966c:	2a01      	cmp	r2, #1
 808966e:	f300 80ad 	bgt.w	80897cc <_dtoa_r+0x88c>
 8089672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8089674:	2a00      	cmp	r2, #0
 8089676:	f000 80a5 	beq.w	80897c4 <_dtoa_r+0x884>
 808967a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 808967e:	9e08      	ldr	r6, [sp, #32]
 8089680:	9d05      	ldr	r5, [sp, #20]
 8089682:	9a05      	ldr	r2, [sp, #20]
 8089684:	441a      	add	r2, r3
 8089686:	9205      	str	r2, [sp, #20]
 8089688:	9a06      	ldr	r2, [sp, #24]
 808968a:	2101      	movs	r1, #1
 808968c:	441a      	add	r2, r3
 808968e:	4620      	mov	r0, r4
 8089690:	9206      	str	r2, [sp, #24]
 8089692:	f000 fc3d 	bl	8089f10 <__i2b>
 8089696:	4607      	mov	r7, r0
 8089698:	b165      	cbz	r5, 80896b4 <_dtoa_r+0x774>
 808969a:	9b06      	ldr	r3, [sp, #24]
 808969c:	2b00      	cmp	r3, #0
 808969e:	dd09      	ble.n	80896b4 <_dtoa_r+0x774>
 80896a0:	42ab      	cmp	r3, r5
 80896a2:	9a05      	ldr	r2, [sp, #20]
 80896a4:	bfa8      	it	ge
 80896a6:	462b      	movge	r3, r5
 80896a8:	1ad2      	subs	r2, r2, r3
 80896aa:	9205      	str	r2, [sp, #20]
 80896ac:	9a06      	ldr	r2, [sp, #24]
 80896ae:	1aed      	subs	r5, r5, r3
 80896b0:	1ad3      	subs	r3, r2, r3
 80896b2:	9306      	str	r3, [sp, #24]
 80896b4:	9b08      	ldr	r3, [sp, #32]
 80896b6:	b1f3      	cbz	r3, 80896f6 <_dtoa_r+0x7b6>
 80896b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80896ba:	2b00      	cmp	r3, #0
 80896bc:	f000 80a3 	beq.w	8089806 <_dtoa_r+0x8c6>
 80896c0:	2e00      	cmp	r6, #0
 80896c2:	dd10      	ble.n	80896e6 <_dtoa_r+0x7a6>
 80896c4:	4639      	mov	r1, r7
 80896c6:	4632      	mov	r2, r6
 80896c8:	4620      	mov	r0, r4
 80896ca:	f000 fce1 	bl	808a090 <__pow5mult>
 80896ce:	4652      	mov	r2, sl
 80896d0:	4601      	mov	r1, r0
 80896d2:	4607      	mov	r7, r0
 80896d4:	4620      	mov	r0, r4
 80896d6:	f000 fc31 	bl	8089f3c <__multiply>
 80896da:	4651      	mov	r1, sl
 80896dc:	4680      	mov	r8, r0
 80896de:	4620      	mov	r0, r4
 80896e0:	f000 fb60 	bl	8089da4 <_Bfree>
 80896e4:	46c2      	mov	sl, r8
 80896e6:	9b08      	ldr	r3, [sp, #32]
 80896e8:	1b9a      	subs	r2, r3, r6
 80896ea:	d004      	beq.n	80896f6 <_dtoa_r+0x7b6>
 80896ec:	4651      	mov	r1, sl
 80896ee:	4620      	mov	r0, r4
 80896f0:	f000 fcce 	bl	808a090 <__pow5mult>
 80896f4:	4682      	mov	sl, r0
 80896f6:	2101      	movs	r1, #1
 80896f8:	4620      	mov	r0, r4
 80896fa:	f000 fc09 	bl	8089f10 <__i2b>
 80896fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8089700:	2b00      	cmp	r3, #0
 8089702:	4606      	mov	r6, r0
 8089704:	f340 8081 	ble.w	808980a <_dtoa_r+0x8ca>
 8089708:	461a      	mov	r2, r3
 808970a:	4601      	mov	r1, r0
 808970c:	4620      	mov	r0, r4
 808970e:	f000 fcbf 	bl	808a090 <__pow5mult>
 8089712:	9b07      	ldr	r3, [sp, #28]
 8089714:	2b01      	cmp	r3, #1
 8089716:	4606      	mov	r6, r0
 8089718:	dd7a      	ble.n	8089810 <_dtoa_r+0x8d0>
 808971a:	f04f 0800 	mov.w	r8, #0
 808971e:	6933      	ldr	r3, [r6, #16]
 8089720:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8089724:	6918      	ldr	r0, [r3, #16]
 8089726:	f000 fba5 	bl	8089e74 <__hi0bits>
 808972a:	f1c0 0020 	rsb	r0, r0, #32
 808972e:	9b06      	ldr	r3, [sp, #24]
 8089730:	4418      	add	r0, r3
 8089732:	f010 001f 	ands.w	r0, r0, #31
 8089736:	f000 8094 	beq.w	8089862 <_dtoa_r+0x922>
 808973a:	f1c0 0320 	rsb	r3, r0, #32
 808973e:	2b04      	cmp	r3, #4
 8089740:	f340 8085 	ble.w	808984e <_dtoa_r+0x90e>
 8089744:	9b05      	ldr	r3, [sp, #20]
 8089746:	f1c0 001c 	rsb	r0, r0, #28
 808974a:	4403      	add	r3, r0
 808974c:	9305      	str	r3, [sp, #20]
 808974e:	9b06      	ldr	r3, [sp, #24]
 8089750:	4403      	add	r3, r0
 8089752:	4405      	add	r5, r0
 8089754:	9306      	str	r3, [sp, #24]
 8089756:	9b05      	ldr	r3, [sp, #20]
 8089758:	2b00      	cmp	r3, #0
 808975a:	dd05      	ble.n	8089768 <_dtoa_r+0x828>
 808975c:	4651      	mov	r1, sl
 808975e:	461a      	mov	r2, r3
 8089760:	4620      	mov	r0, r4
 8089762:	f000 fcef 	bl	808a144 <__lshift>
 8089766:	4682      	mov	sl, r0
 8089768:	9b06      	ldr	r3, [sp, #24]
 808976a:	2b00      	cmp	r3, #0
 808976c:	dd05      	ble.n	808977a <_dtoa_r+0x83a>
 808976e:	4631      	mov	r1, r6
 8089770:	461a      	mov	r2, r3
 8089772:	4620      	mov	r0, r4
 8089774:	f000 fce6 	bl	808a144 <__lshift>
 8089778:	4606      	mov	r6, r0
 808977a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808977c:	2b00      	cmp	r3, #0
 808977e:	d072      	beq.n	8089866 <_dtoa_r+0x926>
 8089780:	4631      	mov	r1, r6
 8089782:	4650      	mov	r0, sl
 8089784:	f000 fd4a 	bl	808a21c <__mcmp>
 8089788:	2800      	cmp	r0, #0
 808978a:	da6c      	bge.n	8089866 <_dtoa_r+0x926>
 808978c:	2300      	movs	r3, #0
 808978e:	4651      	mov	r1, sl
 8089790:	220a      	movs	r2, #10
 8089792:	4620      	mov	r0, r4
 8089794:	f000 fb28 	bl	8089de8 <__multadd>
 8089798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808979a:	f10b 3bff 	add.w	fp, fp, #4294967295
 808979e:	4682      	mov	sl, r0
 80897a0:	2b00      	cmp	r3, #0
 80897a2:	f000 81b0 	beq.w	8089b06 <_dtoa_r+0xbc6>
 80897a6:	2300      	movs	r3, #0
 80897a8:	4639      	mov	r1, r7
 80897aa:	220a      	movs	r2, #10
 80897ac:	4620      	mov	r0, r4
 80897ae:	f000 fb1b 	bl	8089de8 <__multadd>
 80897b2:	9b01      	ldr	r3, [sp, #4]
 80897b4:	2b00      	cmp	r3, #0
 80897b6:	4607      	mov	r7, r0
 80897b8:	f300 8096 	bgt.w	80898e8 <_dtoa_r+0x9a8>
 80897bc:	9b07      	ldr	r3, [sp, #28]
 80897be:	2b02      	cmp	r3, #2
 80897c0:	dc59      	bgt.n	8089876 <_dtoa_r+0x936>
 80897c2:	e091      	b.n	80898e8 <_dtoa_r+0x9a8>
 80897c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80897c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80897ca:	e758      	b.n	808967e <_dtoa_r+0x73e>
 80897cc:	9b04      	ldr	r3, [sp, #16]
 80897ce:	1e5e      	subs	r6, r3, #1
 80897d0:	9b08      	ldr	r3, [sp, #32]
 80897d2:	42b3      	cmp	r3, r6
 80897d4:	bfbf      	itttt	lt
 80897d6:	9b08      	ldrlt	r3, [sp, #32]
 80897d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80897da:	9608      	strlt	r6, [sp, #32]
 80897dc:	1af3      	sublt	r3, r6, r3
 80897de:	bfb4      	ite	lt
 80897e0:	18d2      	addlt	r2, r2, r3
 80897e2:	1b9e      	subge	r6, r3, r6
 80897e4:	9b04      	ldr	r3, [sp, #16]
 80897e6:	bfbc      	itt	lt
 80897e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80897ea:	2600      	movlt	r6, #0
 80897ec:	2b00      	cmp	r3, #0
 80897ee:	bfb7      	itett	lt
 80897f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80897f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80897f8:	1a9d      	sublt	r5, r3, r2
 80897fa:	2300      	movlt	r3, #0
 80897fc:	e741      	b.n	8089682 <_dtoa_r+0x742>
 80897fe:	9e08      	ldr	r6, [sp, #32]
 8089800:	9d05      	ldr	r5, [sp, #20]
 8089802:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8089804:	e748      	b.n	8089698 <_dtoa_r+0x758>
 8089806:	9a08      	ldr	r2, [sp, #32]
 8089808:	e770      	b.n	80896ec <_dtoa_r+0x7ac>
 808980a:	9b07      	ldr	r3, [sp, #28]
 808980c:	2b01      	cmp	r3, #1
 808980e:	dc19      	bgt.n	8089844 <_dtoa_r+0x904>
 8089810:	9b02      	ldr	r3, [sp, #8]
 8089812:	b9bb      	cbnz	r3, 8089844 <_dtoa_r+0x904>
 8089814:	9b03      	ldr	r3, [sp, #12]
 8089816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808981a:	b99b      	cbnz	r3, 8089844 <_dtoa_r+0x904>
 808981c:	9b03      	ldr	r3, [sp, #12]
 808981e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8089822:	0d1b      	lsrs	r3, r3, #20
 8089824:	051b      	lsls	r3, r3, #20
 8089826:	b183      	cbz	r3, 808984a <_dtoa_r+0x90a>
 8089828:	9b05      	ldr	r3, [sp, #20]
 808982a:	3301      	adds	r3, #1
 808982c:	9305      	str	r3, [sp, #20]
 808982e:	9b06      	ldr	r3, [sp, #24]
 8089830:	3301      	adds	r3, #1
 8089832:	9306      	str	r3, [sp, #24]
 8089834:	f04f 0801 	mov.w	r8, #1
 8089838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808983a:	2b00      	cmp	r3, #0
 808983c:	f47f af6f 	bne.w	808971e <_dtoa_r+0x7de>
 8089840:	2001      	movs	r0, #1
 8089842:	e774      	b.n	808972e <_dtoa_r+0x7ee>
 8089844:	f04f 0800 	mov.w	r8, #0
 8089848:	e7f6      	b.n	8089838 <_dtoa_r+0x8f8>
 808984a:	4698      	mov	r8, r3
 808984c:	e7f4      	b.n	8089838 <_dtoa_r+0x8f8>
 808984e:	d082      	beq.n	8089756 <_dtoa_r+0x816>
 8089850:	9a05      	ldr	r2, [sp, #20]
 8089852:	331c      	adds	r3, #28
 8089854:	441a      	add	r2, r3
 8089856:	9205      	str	r2, [sp, #20]
 8089858:	9a06      	ldr	r2, [sp, #24]
 808985a:	441a      	add	r2, r3
 808985c:	441d      	add	r5, r3
 808985e:	9206      	str	r2, [sp, #24]
 8089860:	e779      	b.n	8089756 <_dtoa_r+0x816>
 8089862:	4603      	mov	r3, r0
 8089864:	e7f4      	b.n	8089850 <_dtoa_r+0x910>
 8089866:	9b04      	ldr	r3, [sp, #16]
 8089868:	2b00      	cmp	r3, #0
 808986a:	dc37      	bgt.n	80898dc <_dtoa_r+0x99c>
 808986c:	9b07      	ldr	r3, [sp, #28]
 808986e:	2b02      	cmp	r3, #2
 8089870:	dd34      	ble.n	80898dc <_dtoa_r+0x99c>
 8089872:	9b04      	ldr	r3, [sp, #16]
 8089874:	9301      	str	r3, [sp, #4]
 8089876:	9b01      	ldr	r3, [sp, #4]
 8089878:	b963      	cbnz	r3, 8089894 <_dtoa_r+0x954>
 808987a:	4631      	mov	r1, r6
 808987c:	2205      	movs	r2, #5
 808987e:	4620      	mov	r0, r4
 8089880:	f000 fab2 	bl	8089de8 <__multadd>
 8089884:	4601      	mov	r1, r0
 8089886:	4606      	mov	r6, r0
 8089888:	4650      	mov	r0, sl
 808988a:	f000 fcc7 	bl	808a21c <__mcmp>
 808988e:	2800      	cmp	r0, #0
 8089890:	f73f adbb 	bgt.w	808940a <_dtoa_r+0x4ca>
 8089894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089896:	9d00      	ldr	r5, [sp, #0]
 8089898:	ea6f 0b03 	mvn.w	fp, r3
 808989c:	f04f 0800 	mov.w	r8, #0
 80898a0:	4631      	mov	r1, r6
 80898a2:	4620      	mov	r0, r4
 80898a4:	f000 fa7e 	bl	8089da4 <_Bfree>
 80898a8:	2f00      	cmp	r7, #0
 80898aa:	f43f aeab 	beq.w	8089604 <_dtoa_r+0x6c4>
 80898ae:	f1b8 0f00 	cmp.w	r8, #0
 80898b2:	d005      	beq.n	80898c0 <_dtoa_r+0x980>
 80898b4:	45b8      	cmp	r8, r7
 80898b6:	d003      	beq.n	80898c0 <_dtoa_r+0x980>
 80898b8:	4641      	mov	r1, r8
 80898ba:	4620      	mov	r0, r4
 80898bc:	f000 fa72 	bl	8089da4 <_Bfree>
 80898c0:	4639      	mov	r1, r7
 80898c2:	4620      	mov	r0, r4
 80898c4:	f000 fa6e 	bl	8089da4 <_Bfree>
 80898c8:	e69c      	b.n	8089604 <_dtoa_r+0x6c4>
 80898ca:	2600      	movs	r6, #0
 80898cc:	4637      	mov	r7, r6
 80898ce:	e7e1      	b.n	8089894 <_dtoa_r+0x954>
 80898d0:	46bb      	mov	fp, r7
 80898d2:	4637      	mov	r7, r6
 80898d4:	e599      	b.n	808940a <_dtoa_r+0x4ca>
 80898d6:	bf00      	nop
 80898d8:	40240000 	.word	0x40240000
 80898dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80898de:	2b00      	cmp	r3, #0
 80898e0:	f000 80c8 	beq.w	8089a74 <_dtoa_r+0xb34>
 80898e4:	9b04      	ldr	r3, [sp, #16]
 80898e6:	9301      	str	r3, [sp, #4]
 80898e8:	2d00      	cmp	r5, #0
 80898ea:	dd05      	ble.n	80898f8 <_dtoa_r+0x9b8>
 80898ec:	4639      	mov	r1, r7
 80898ee:	462a      	mov	r2, r5
 80898f0:	4620      	mov	r0, r4
 80898f2:	f000 fc27 	bl	808a144 <__lshift>
 80898f6:	4607      	mov	r7, r0
 80898f8:	f1b8 0f00 	cmp.w	r8, #0
 80898fc:	d05b      	beq.n	80899b6 <_dtoa_r+0xa76>
 80898fe:	6879      	ldr	r1, [r7, #4]
 8089900:	4620      	mov	r0, r4
 8089902:	f000 fa0f 	bl	8089d24 <_Balloc>
 8089906:	4605      	mov	r5, r0
 8089908:	b928      	cbnz	r0, 8089916 <_dtoa_r+0x9d6>
 808990a:	4b83      	ldr	r3, [pc, #524]	; (8089b18 <_dtoa_r+0xbd8>)
 808990c:	4602      	mov	r2, r0
 808990e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8089912:	f7ff bb2e 	b.w	8088f72 <_dtoa_r+0x32>
 8089916:	693a      	ldr	r2, [r7, #16]
 8089918:	3202      	adds	r2, #2
 808991a:	0092      	lsls	r2, r2, #2
 808991c:	f107 010c 	add.w	r1, r7, #12
 8089920:	300c      	adds	r0, #12
 8089922:	f7ff fa58 	bl	8088dd6 <memcpy>
 8089926:	2201      	movs	r2, #1
 8089928:	4629      	mov	r1, r5
 808992a:	4620      	mov	r0, r4
 808992c:	f000 fc0a 	bl	808a144 <__lshift>
 8089930:	9b00      	ldr	r3, [sp, #0]
 8089932:	3301      	adds	r3, #1
 8089934:	9304      	str	r3, [sp, #16]
 8089936:	e9dd 2300 	ldrd	r2, r3, [sp]
 808993a:	4413      	add	r3, r2
 808993c:	9308      	str	r3, [sp, #32]
 808993e:	9b02      	ldr	r3, [sp, #8]
 8089940:	f003 0301 	and.w	r3, r3, #1
 8089944:	46b8      	mov	r8, r7
 8089946:	9306      	str	r3, [sp, #24]
 8089948:	4607      	mov	r7, r0
 808994a:	9b04      	ldr	r3, [sp, #16]
 808994c:	4631      	mov	r1, r6
 808994e:	3b01      	subs	r3, #1
 8089950:	4650      	mov	r0, sl
 8089952:	9301      	str	r3, [sp, #4]
 8089954:	f7ff fa6c 	bl	8088e30 <quorem>
 8089958:	4641      	mov	r1, r8
 808995a:	9002      	str	r0, [sp, #8]
 808995c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8089960:	4650      	mov	r0, sl
 8089962:	f000 fc5b 	bl	808a21c <__mcmp>
 8089966:	463a      	mov	r2, r7
 8089968:	9005      	str	r0, [sp, #20]
 808996a:	4631      	mov	r1, r6
 808996c:	4620      	mov	r0, r4
 808996e:	f000 fc71 	bl	808a254 <__mdiff>
 8089972:	68c2      	ldr	r2, [r0, #12]
 8089974:	4605      	mov	r5, r0
 8089976:	bb02      	cbnz	r2, 80899ba <_dtoa_r+0xa7a>
 8089978:	4601      	mov	r1, r0
 808997a:	4650      	mov	r0, sl
 808997c:	f000 fc4e 	bl	808a21c <__mcmp>
 8089980:	4602      	mov	r2, r0
 8089982:	4629      	mov	r1, r5
 8089984:	4620      	mov	r0, r4
 8089986:	9209      	str	r2, [sp, #36]	; 0x24
 8089988:	f000 fa0c 	bl	8089da4 <_Bfree>
 808998c:	9b07      	ldr	r3, [sp, #28]
 808998e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8089990:	9d04      	ldr	r5, [sp, #16]
 8089992:	ea43 0102 	orr.w	r1, r3, r2
 8089996:	9b06      	ldr	r3, [sp, #24]
 8089998:	4319      	orrs	r1, r3
 808999a:	d110      	bne.n	80899be <_dtoa_r+0xa7e>
 808999c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80899a0:	d029      	beq.n	80899f6 <_dtoa_r+0xab6>
 80899a2:	9b05      	ldr	r3, [sp, #20]
 80899a4:	2b00      	cmp	r3, #0
 80899a6:	dd02      	ble.n	80899ae <_dtoa_r+0xa6e>
 80899a8:	9b02      	ldr	r3, [sp, #8]
 80899aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80899ae:	9b01      	ldr	r3, [sp, #4]
 80899b0:	f883 9000 	strb.w	r9, [r3]
 80899b4:	e774      	b.n	80898a0 <_dtoa_r+0x960>
 80899b6:	4638      	mov	r0, r7
 80899b8:	e7ba      	b.n	8089930 <_dtoa_r+0x9f0>
 80899ba:	2201      	movs	r2, #1
 80899bc:	e7e1      	b.n	8089982 <_dtoa_r+0xa42>
 80899be:	9b05      	ldr	r3, [sp, #20]
 80899c0:	2b00      	cmp	r3, #0
 80899c2:	db04      	blt.n	80899ce <_dtoa_r+0xa8e>
 80899c4:	9907      	ldr	r1, [sp, #28]
 80899c6:	430b      	orrs	r3, r1
 80899c8:	9906      	ldr	r1, [sp, #24]
 80899ca:	430b      	orrs	r3, r1
 80899cc:	d120      	bne.n	8089a10 <_dtoa_r+0xad0>
 80899ce:	2a00      	cmp	r2, #0
 80899d0:	dded      	ble.n	80899ae <_dtoa_r+0xa6e>
 80899d2:	4651      	mov	r1, sl
 80899d4:	2201      	movs	r2, #1
 80899d6:	4620      	mov	r0, r4
 80899d8:	f000 fbb4 	bl	808a144 <__lshift>
 80899dc:	4631      	mov	r1, r6
 80899de:	4682      	mov	sl, r0
 80899e0:	f000 fc1c 	bl	808a21c <__mcmp>
 80899e4:	2800      	cmp	r0, #0
 80899e6:	dc03      	bgt.n	80899f0 <_dtoa_r+0xab0>
 80899e8:	d1e1      	bne.n	80899ae <_dtoa_r+0xa6e>
 80899ea:	f019 0f01 	tst.w	r9, #1
 80899ee:	d0de      	beq.n	80899ae <_dtoa_r+0xa6e>
 80899f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80899f4:	d1d8      	bne.n	80899a8 <_dtoa_r+0xa68>
 80899f6:	9a01      	ldr	r2, [sp, #4]
 80899f8:	2339      	movs	r3, #57	; 0x39
 80899fa:	7013      	strb	r3, [r2, #0]
 80899fc:	462b      	mov	r3, r5
 80899fe:	461d      	mov	r5, r3
 8089a00:	3b01      	subs	r3, #1
 8089a02:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8089a06:	2a39      	cmp	r2, #57	; 0x39
 8089a08:	d06c      	beq.n	8089ae4 <_dtoa_r+0xba4>
 8089a0a:	3201      	adds	r2, #1
 8089a0c:	701a      	strb	r2, [r3, #0]
 8089a0e:	e747      	b.n	80898a0 <_dtoa_r+0x960>
 8089a10:	2a00      	cmp	r2, #0
 8089a12:	dd07      	ble.n	8089a24 <_dtoa_r+0xae4>
 8089a14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8089a18:	d0ed      	beq.n	80899f6 <_dtoa_r+0xab6>
 8089a1a:	9a01      	ldr	r2, [sp, #4]
 8089a1c:	f109 0301 	add.w	r3, r9, #1
 8089a20:	7013      	strb	r3, [r2, #0]
 8089a22:	e73d      	b.n	80898a0 <_dtoa_r+0x960>
 8089a24:	9b04      	ldr	r3, [sp, #16]
 8089a26:	9a08      	ldr	r2, [sp, #32]
 8089a28:	f803 9c01 	strb.w	r9, [r3, #-1]
 8089a2c:	4293      	cmp	r3, r2
 8089a2e:	d043      	beq.n	8089ab8 <_dtoa_r+0xb78>
 8089a30:	4651      	mov	r1, sl
 8089a32:	2300      	movs	r3, #0
 8089a34:	220a      	movs	r2, #10
 8089a36:	4620      	mov	r0, r4
 8089a38:	f000 f9d6 	bl	8089de8 <__multadd>
 8089a3c:	45b8      	cmp	r8, r7
 8089a3e:	4682      	mov	sl, r0
 8089a40:	f04f 0300 	mov.w	r3, #0
 8089a44:	f04f 020a 	mov.w	r2, #10
 8089a48:	4641      	mov	r1, r8
 8089a4a:	4620      	mov	r0, r4
 8089a4c:	d107      	bne.n	8089a5e <_dtoa_r+0xb1e>
 8089a4e:	f000 f9cb 	bl	8089de8 <__multadd>
 8089a52:	4680      	mov	r8, r0
 8089a54:	4607      	mov	r7, r0
 8089a56:	9b04      	ldr	r3, [sp, #16]
 8089a58:	3301      	adds	r3, #1
 8089a5a:	9304      	str	r3, [sp, #16]
 8089a5c:	e775      	b.n	808994a <_dtoa_r+0xa0a>
 8089a5e:	f000 f9c3 	bl	8089de8 <__multadd>
 8089a62:	4639      	mov	r1, r7
 8089a64:	4680      	mov	r8, r0
 8089a66:	2300      	movs	r3, #0
 8089a68:	220a      	movs	r2, #10
 8089a6a:	4620      	mov	r0, r4
 8089a6c:	f000 f9bc 	bl	8089de8 <__multadd>
 8089a70:	4607      	mov	r7, r0
 8089a72:	e7f0      	b.n	8089a56 <_dtoa_r+0xb16>
 8089a74:	9b04      	ldr	r3, [sp, #16]
 8089a76:	9301      	str	r3, [sp, #4]
 8089a78:	9d00      	ldr	r5, [sp, #0]
 8089a7a:	4631      	mov	r1, r6
 8089a7c:	4650      	mov	r0, sl
 8089a7e:	f7ff f9d7 	bl	8088e30 <quorem>
 8089a82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8089a86:	9b00      	ldr	r3, [sp, #0]
 8089a88:	f805 9b01 	strb.w	r9, [r5], #1
 8089a8c:	1aea      	subs	r2, r5, r3
 8089a8e:	9b01      	ldr	r3, [sp, #4]
 8089a90:	4293      	cmp	r3, r2
 8089a92:	dd07      	ble.n	8089aa4 <_dtoa_r+0xb64>
 8089a94:	4651      	mov	r1, sl
 8089a96:	2300      	movs	r3, #0
 8089a98:	220a      	movs	r2, #10
 8089a9a:	4620      	mov	r0, r4
 8089a9c:	f000 f9a4 	bl	8089de8 <__multadd>
 8089aa0:	4682      	mov	sl, r0
 8089aa2:	e7ea      	b.n	8089a7a <_dtoa_r+0xb3a>
 8089aa4:	9b01      	ldr	r3, [sp, #4]
 8089aa6:	2b00      	cmp	r3, #0
 8089aa8:	bfc8      	it	gt
 8089aaa:	461d      	movgt	r5, r3
 8089aac:	9b00      	ldr	r3, [sp, #0]
 8089aae:	bfd8      	it	le
 8089ab0:	2501      	movle	r5, #1
 8089ab2:	441d      	add	r5, r3
 8089ab4:	f04f 0800 	mov.w	r8, #0
 8089ab8:	4651      	mov	r1, sl
 8089aba:	2201      	movs	r2, #1
 8089abc:	4620      	mov	r0, r4
 8089abe:	f000 fb41 	bl	808a144 <__lshift>
 8089ac2:	4631      	mov	r1, r6
 8089ac4:	4682      	mov	sl, r0
 8089ac6:	f000 fba9 	bl	808a21c <__mcmp>
 8089aca:	2800      	cmp	r0, #0
 8089acc:	dc96      	bgt.n	80899fc <_dtoa_r+0xabc>
 8089ace:	d102      	bne.n	8089ad6 <_dtoa_r+0xb96>
 8089ad0:	f019 0f01 	tst.w	r9, #1
 8089ad4:	d192      	bne.n	80899fc <_dtoa_r+0xabc>
 8089ad6:	462b      	mov	r3, r5
 8089ad8:	461d      	mov	r5, r3
 8089ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8089ade:	2a30      	cmp	r2, #48	; 0x30
 8089ae0:	d0fa      	beq.n	8089ad8 <_dtoa_r+0xb98>
 8089ae2:	e6dd      	b.n	80898a0 <_dtoa_r+0x960>
 8089ae4:	9a00      	ldr	r2, [sp, #0]
 8089ae6:	429a      	cmp	r2, r3
 8089ae8:	d189      	bne.n	80899fe <_dtoa_r+0xabe>
 8089aea:	f10b 0b01 	add.w	fp, fp, #1
 8089aee:	2331      	movs	r3, #49	; 0x31
 8089af0:	e796      	b.n	8089a20 <_dtoa_r+0xae0>
 8089af2:	4b0a      	ldr	r3, [pc, #40]	; (8089b1c <_dtoa_r+0xbdc>)
 8089af4:	f7ff ba99 	b.w	808902a <_dtoa_r+0xea>
 8089af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8089afa:	2b00      	cmp	r3, #0
 8089afc:	f47f aa6d 	bne.w	8088fda <_dtoa_r+0x9a>
 8089b00:	4b07      	ldr	r3, [pc, #28]	; (8089b20 <_dtoa_r+0xbe0>)
 8089b02:	f7ff ba92 	b.w	808902a <_dtoa_r+0xea>
 8089b06:	9b01      	ldr	r3, [sp, #4]
 8089b08:	2b00      	cmp	r3, #0
 8089b0a:	dcb5      	bgt.n	8089a78 <_dtoa_r+0xb38>
 8089b0c:	9b07      	ldr	r3, [sp, #28]
 8089b0e:	2b02      	cmp	r3, #2
 8089b10:	f73f aeb1 	bgt.w	8089876 <_dtoa_r+0x936>
 8089b14:	e7b0      	b.n	8089a78 <_dtoa_r+0xb38>
 8089b16:	bf00      	nop
 8089b18:	0808b711 	.word	0x0808b711
 8089b1c:	0808b635 	.word	0x0808b635
 8089b20:	0808b695 	.word	0x0808b695

08089b24 <_free_r>:
 8089b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089b26:	2900      	cmp	r1, #0
 8089b28:	d044      	beq.n	8089bb4 <_free_r+0x90>
 8089b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8089b2e:	9001      	str	r0, [sp, #4]
 8089b30:	2b00      	cmp	r3, #0
 8089b32:	f1a1 0404 	sub.w	r4, r1, #4
 8089b36:	bfb8      	it	lt
 8089b38:	18e4      	addlt	r4, r4, r3
 8089b3a:	f000 f8e7 	bl	8089d0c <__malloc_lock>
 8089b3e:	4a1e      	ldr	r2, [pc, #120]	; (8089bb8 <_free_r+0x94>)
 8089b40:	9801      	ldr	r0, [sp, #4]
 8089b42:	6813      	ldr	r3, [r2, #0]
 8089b44:	b933      	cbnz	r3, 8089b54 <_free_r+0x30>
 8089b46:	6063      	str	r3, [r4, #4]
 8089b48:	6014      	str	r4, [r2, #0]
 8089b4a:	b003      	add	sp, #12
 8089b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8089b50:	f000 b8e2 	b.w	8089d18 <__malloc_unlock>
 8089b54:	42a3      	cmp	r3, r4
 8089b56:	d908      	bls.n	8089b6a <_free_r+0x46>
 8089b58:	6825      	ldr	r5, [r4, #0]
 8089b5a:	1961      	adds	r1, r4, r5
 8089b5c:	428b      	cmp	r3, r1
 8089b5e:	bf01      	itttt	eq
 8089b60:	6819      	ldreq	r1, [r3, #0]
 8089b62:	685b      	ldreq	r3, [r3, #4]
 8089b64:	1949      	addeq	r1, r1, r5
 8089b66:	6021      	streq	r1, [r4, #0]
 8089b68:	e7ed      	b.n	8089b46 <_free_r+0x22>
 8089b6a:	461a      	mov	r2, r3
 8089b6c:	685b      	ldr	r3, [r3, #4]
 8089b6e:	b10b      	cbz	r3, 8089b74 <_free_r+0x50>
 8089b70:	42a3      	cmp	r3, r4
 8089b72:	d9fa      	bls.n	8089b6a <_free_r+0x46>
 8089b74:	6811      	ldr	r1, [r2, #0]
 8089b76:	1855      	adds	r5, r2, r1
 8089b78:	42a5      	cmp	r5, r4
 8089b7a:	d10b      	bne.n	8089b94 <_free_r+0x70>
 8089b7c:	6824      	ldr	r4, [r4, #0]
 8089b7e:	4421      	add	r1, r4
 8089b80:	1854      	adds	r4, r2, r1
 8089b82:	42a3      	cmp	r3, r4
 8089b84:	6011      	str	r1, [r2, #0]
 8089b86:	d1e0      	bne.n	8089b4a <_free_r+0x26>
 8089b88:	681c      	ldr	r4, [r3, #0]
 8089b8a:	685b      	ldr	r3, [r3, #4]
 8089b8c:	6053      	str	r3, [r2, #4]
 8089b8e:	440c      	add	r4, r1
 8089b90:	6014      	str	r4, [r2, #0]
 8089b92:	e7da      	b.n	8089b4a <_free_r+0x26>
 8089b94:	d902      	bls.n	8089b9c <_free_r+0x78>
 8089b96:	230c      	movs	r3, #12
 8089b98:	6003      	str	r3, [r0, #0]
 8089b9a:	e7d6      	b.n	8089b4a <_free_r+0x26>
 8089b9c:	6825      	ldr	r5, [r4, #0]
 8089b9e:	1961      	adds	r1, r4, r5
 8089ba0:	428b      	cmp	r3, r1
 8089ba2:	bf04      	itt	eq
 8089ba4:	6819      	ldreq	r1, [r3, #0]
 8089ba6:	685b      	ldreq	r3, [r3, #4]
 8089ba8:	6063      	str	r3, [r4, #4]
 8089baa:	bf04      	itt	eq
 8089bac:	1949      	addeq	r1, r1, r5
 8089bae:	6021      	streq	r1, [r4, #0]
 8089bb0:	6054      	str	r4, [r2, #4]
 8089bb2:	e7ca      	b.n	8089b4a <_free_r+0x26>
 8089bb4:	b003      	add	sp, #12
 8089bb6:	bd30      	pop	{r4, r5, pc}
 8089bb8:	20000bc0 	.word	0x20000bc0

08089bbc <malloc>:
 8089bbc:	4b02      	ldr	r3, [pc, #8]	; (8089bc8 <malloc+0xc>)
 8089bbe:	4601      	mov	r1, r0
 8089bc0:	6818      	ldr	r0, [r3, #0]
 8089bc2:	f000 b823 	b.w	8089c0c <_malloc_r>
 8089bc6:	bf00      	nop
 8089bc8:	200000e4 	.word	0x200000e4

08089bcc <sbrk_aligned>:
 8089bcc:	b570      	push	{r4, r5, r6, lr}
 8089bce:	4e0e      	ldr	r6, [pc, #56]	; (8089c08 <sbrk_aligned+0x3c>)
 8089bd0:	460c      	mov	r4, r1
 8089bd2:	6831      	ldr	r1, [r6, #0]
 8089bd4:	4605      	mov	r5, r0
 8089bd6:	b911      	cbnz	r1, 8089bde <sbrk_aligned+0x12>
 8089bd8:	f001 f82c 	bl	808ac34 <_sbrk_r>
 8089bdc:	6030      	str	r0, [r6, #0]
 8089bde:	4621      	mov	r1, r4
 8089be0:	4628      	mov	r0, r5
 8089be2:	f001 f827 	bl	808ac34 <_sbrk_r>
 8089be6:	1c43      	adds	r3, r0, #1
 8089be8:	d00a      	beq.n	8089c00 <sbrk_aligned+0x34>
 8089bea:	1cc4      	adds	r4, r0, #3
 8089bec:	f024 0403 	bic.w	r4, r4, #3
 8089bf0:	42a0      	cmp	r0, r4
 8089bf2:	d007      	beq.n	8089c04 <sbrk_aligned+0x38>
 8089bf4:	1a21      	subs	r1, r4, r0
 8089bf6:	4628      	mov	r0, r5
 8089bf8:	f001 f81c 	bl	808ac34 <_sbrk_r>
 8089bfc:	3001      	adds	r0, #1
 8089bfe:	d101      	bne.n	8089c04 <sbrk_aligned+0x38>
 8089c00:	f04f 34ff 	mov.w	r4, #4294967295
 8089c04:	4620      	mov	r0, r4
 8089c06:	bd70      	pop	{r4, r5, r6, pc}
 8089c08:	20000bc4 	.word	0x20000bc4

08089c0c <_malloc_r>:
 8089c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089c10:	1ccd      	adds	r5, r1, #3
 8089c12:	f025 0503 	bic.w	r5, r5, #3
 8089c16:	3508      	adds	r5, #8
 8089c18:	2d0c      	cmp	r5, #12
 8089c1a:	bf38      	it	cc
 8089c1c:	250c      	movcc	r5, #12
 8089c1e:	2d00      	cmp	r5, #0
 8089c20:	4607      	mov	r7, r0
 8089c22:	db01      	blt.n	8089c28 <_malloc_r+0x1c>
 8089c24:	42a9      	cmp	r1, r5
 8089c26:	d905      	bls.n	8089c34 <_malloc_r+0x28>
 8089c28:	230c      	movs	r3, #12
 8089c2a:	603b      	str	r3, [r7, #0]
 8089c2c:	2600      	movs	r6, #0
 8089c2e:	4630      	mov	r0, r6
 8089c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8089c34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8089d08 <_malloc_r+0xfc>
 8089c38:	f000 f868 	bl	8089d0c <__malloc_lock>
 8089c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8089c40:	461c      	mov	r4, r3
 8089c42:	bb5c      	cbnz	r4, 8089c9c <_malloc_r+0x90>
 8089c44:	4629      	mov	r1, r5
 8089c46:	4638      	mov	r0, r7
 8089c48:	f7ff ffc0 	bl	8089bcc <sbrk_aligned>
 8089c4c:	1c43      	adds	r3, r0, #1
 8089c4e:	4604      	mov	r4, r0
 8089c50:	d155      	bne.n	8089cfe <_malloc_r+0xf2>
 8089c52:	f8d8 4000 	ldr.w	r4, [r8]
 8089c56:	4626      	mov	r6, r4
 8089c58:	2e00      	cmp	r6, #0
 8089c5a:	d145      	bne.n	8089ce8 <_malloc_r+0xdc>
 8089c5c:	2c00      	cmp	r4, #0
 8089c5e:	d048      	beq.n	8089cf2 <_malloc_r+0xe6>
 8089c60:	6823      	ldr	r3, [r4, #0]
 8089c62:	4631      	mov	r1, r6
 8089c64:	4638      	mov	r0, r7
 8089c66:	eb04 0903 	add.w	r9, r4, r3
 8089c6a:	f000 ffe3 	bl	808ac34 <_sbrk_r>
 8089c6e:	4581      	cmp	r9, r0
 8089c70:	d13f      	bne.n	8089cf2 <_malloc_r+0xe6>
 8089c72:	6821      	ldr	r1, [r4, #0]
 8089c74:	1a6d      	subs	r5, r5, r1
 8089c76:	4629      	mov	r1, r5
 8089c78:	4638      	mov	r0, r7
 8089c7a:	f7ff ffa7 	bl	8089bcc <sbrk_aligned>
 8089c7e:	3001      	adds	r0, #1
 8089c80:	d037      	beq.n	8089cf2 <_malloc_r+0xe6>
 8089c82:	6823      	ldr	r3, [r4, #0]
 8089c84:	442b      	add	r3, r5
 8089c86:	6023      	str	r3, [r4, #0]
 8089c88:	f8d8 3000 	ldr.w	r3, [r8]
 8089c8c:	2b00      	cmp	r3, #0
 8089c8e:	d038      	beq.n	8089d02 <_malloc_r+0xf6>
 8089c90:	685a      	ldr	r2, [r3, #4]
 8089c92:	42a2      	cmp	r2, r4
 8089c94:	d12b      	bne.n	8089cee <_malloc_r+0xe2>
 8089c96:	2200      	movs	r2, #0
 8089c98:	605a      	str	r2, [r3, #4]
 8089c9a:	e00f      	b.n	8089cbc <_malloc_r+0xb0>
 8089c9c:	6822      	ldr	r2, [r4, #0]
 8089c9e:	1b52      	subs	r2, r2, r5
 8089ca0:	d41f      	bmi.n	8089ce2 <_malloc_r+0xd6>
 8089ca2:	2a0b      	cmp	r2, #11
 8089ca4:	d917      	bls.n	8089cd6 <_malloc_r+0xca>
 8089ca6:	1961      	adds	r1, r4, r5
 8089ca8:	42a3      	cmp	r3, r4
 8089caa:	6025      	str	r5, [r4, #0]
 8089cac:	bf18      	it	ne
 8089cae:	6059      	strne	r1, [r3, #4]
 8089cb0:	6863      	ldr	r3, [r4, #4]
 8089cb2:	bf08      	it	eq
 8089cb4:	f8c8 1000 	streq.w	r1, [r8]
 8089cb8:	5162      	str	r2, [r4, r5]
 8089cba:	604b      	str	r3, [r1, #4]
 8089cbc:	4638      	mov	r0, r7
 8089cbe:	f104 060b 	add.w	r6, r4, #11
 8089cc2:	f000 f829 	bl	8089d18 <__malloc_unlock>
 8089cc6:	f026 0607 	bic.w	r6, r6, #7
 8089cca:	1d23      	adds	r3, r4, #4
 8089ccc:	1af2      	subs	r2, r6, r3
 8089cce:	d0ae      	beq.n	8089c2e <_malloc_r+0x22>
 8089cd0:	1b9b      	subs	r3, r3, r6
 8089cd2:	50a3      	str	r3, [r4, r2]
 8089cd4:	e7ab      	b.n	8089c2e <_malloc_r+0x22>
 8089cd6:	42a3      	cmp	r3, r4
 8089cd8:	6862      	ldr	r2, [r4, #4]
 8089cda:	d1dd      	bne.n	8089c98 <_malloc_r+0x8c>
 8089cdc:	f8c8 2000 	str.w	r2, [r8]
 8089ce0:	e7ec      	b.n	8089cbc <_malloc_r+0xb0>
 8089ce2:	4623      	mov	r3, r4
 8089ce4:	6864      	ldr	r4, [r4, #4]
 8089ce6:	e7ac      	b.n	8089c42 <_malloc_r+0x36>
 8089ce8:	4634      	mov	r4, r6
 8089cea:	6876      	ldr	r6, [r6, #4]
 8089cec:	e7b4      	b.n	8089c58 <_malloc_r+0x4c>
 8089cee:	4613      	mov	r3, r2
 8089cf0:	e7cc      	b.n	8089c8c <_malloc_r+0x80>
 8089cf2:	230c      	movs	r3, #12
 8089cf4:	603b      	str	r3, [r7, #0]
 8089cf6:	4638      	mov	r0, r7
 8089cf8:	f000 f80e 	bl	8089d18 <__malloc_unlock>
 8089cfc:	e797      	b.n	8089c2e <_malloc_r+0x22>
 8089cfe:	6025      	str	r5, [r4, #0]
 8089d00:	e7dc      	b.n	8089cbc <_malloc_r+0xb0>
 8089d02:	605b      	str	r3, [r3, #4]
 8089d04:	deff      	udf	#255	; 0xff
 8089d06:	bf00      	nop
 8089d08:	20000bc0 	.word	0x20000bc0

08089d0c <__malloc_lock>:
 8089d0c:	4801      	ldr	r0, [pc, #4]	; (8089d14 <__malloc_lock+0x8>)
 8089d0e:	f7ff b860 	b.w	8088dd2 <__retarget_lock_acquire_recursive>
 8089d12:	bf00      	nop
 8089d14:	20000bbc 	.word	0x20000bbc

08089d18 <__malloc_unlock>:
 8089d18:	4801      	ldr	r0, [pc, #4]	; (8089d20 <__malloc_unlock+0x8>)
 8089d1a:	f7ff b85b 	b.w	8088dd4 <__retarget_lock_release_recursive>
 8089d1e:	bf00      	nop
 8089d20:	20000bbc 	.word	0x20000bbc

08089d24 <_Balloc>:
 8089d24:	b570      	push	{r4, r5, r6, lr}
 8089d26:	69c6      	ldr	r6, [r0, #28]
 8089d28:	4604      	mov	r4, r0
 8089d2a:	460d      	mov	r5, r1
 8089d2c:	b976      	cbnz	r6, 8089d4c <_Balloc+0x28>
 8089d2e:	2010      	movs	r0, #16
 8089d30:	f7ff ff44 	bl	8089bbc <malloc>
 8089d34:	4602      	mov	r2, r0
 8089d36:	61e0      	str	r0, [r4, #28]
 8089d38:	b920      	cbnz	r0, 8089d44 <_Balloc+0x20>
 8089d3a:	4b18      	ldr	r3, [pc, #96]	; (8089d9c <_Balloc+0x78>)
 8089d3c:	4818      	ldr	r0, [pc, #96]	; (8089da0 <_Balloc+0x7c>)
 8089d3e:	216b      	movs	r1, #107	; 0x6b
 8089d40:	f7ff f858 	bl	8088df4 <__assert_func>
 8089d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8089d48:	6006      	str	r6, [r0, #0]
 8089d4a:	60c6      	str	r6, [r0, #12]
 8089d4c:	69e6      	ldr	r6, [r4, #28]
 8089d4e:	68f3      	ldr	r3, [r6, #12]
 8089d50:	b183      	cbz	r3, 8089d74 <_Balloc+0x50>
 8089d52:	69e3      	ldr	r3, [r4, #28]
 8089d54:	68db      	ldr	r3, [r3, #12]
 8089d56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8089d5a:	b9b8      	cbnz	r0, 8089d8c <_Balloc+0x68>
 8089d5c:	2101      	movs	r1, #1
 8089d5e:	fa01 f605 	lsl.w	r6, r1, r5
 8089d62:	1d72      	adds	r2, r6, #5
 8089d64:	0092      	lsls	r2, r2, #2
 8089d66:	4620      	mov	r0, r4
 8089d68:	f000 ff7b 	bl	808ac62 <_calloc_r>
 8089d6c:	b160      	cbz	r0, 8089d88 <_Balloc+0x64>
 8089d6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8089d72:	e00e      	b.n	8089d92 <_Balloc+0x6e>
 8089d74:	2221      	movs	r2, #33	; 0x21
 8089d76:	2104      	movs	r1, #4
 8089d78:	4620      	mov	r0, r4
 8089d7a:	f000 ff72 	bl	808ac62 <_calloc_r>
 8089d7e:	69e3      	ldr	r3, [r4, #28]
 8089d80:	60f0      	str	r0, [r6, #12]
 8089d82:	68db      	ldr	r3, [r3, #12]
 8089d84:	2b00      	cmp	r3, #0
 8089d86:	d1e4      	bne.n	8089d52 <_Balloc+0x2e>
 8089d88:	2000      	movs	r0, #0
 8089d8a:	bd70      	pop	{r4, r5, r6, pc}
 8089d8c:	6802      	ldr	r2, [r0, #0]
 8089d8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8089d92:	2300      	movs	r3, #0
 8089d94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8089d98:	e7f7      	b.n	8089d8a <_Balloc+0x66>
 8089d9a:	bf00      	nop
 8089d9c:	0808b6a2 	.word	0x0808b6a2
 8089da0:	0808b722 	.word	0x0808b722

08089da4 <_Bfree>:
 8089da4:	b570      	push	{r4, r5, r6, lr}
 8089da6:	69c6      	ldr	r6, [r0, #28]
 8089da8:	4605      	mov	r5, r0
 8089daa:	460c      	mov	r4, r1
 8089dac:	b976      	cbnz	r6, 8089dcc <_Bfree+0x28>
 8089dae:	2010      	movs	r0, #16
 8089db0:	f7ff ff04 	bl	8089bbc <malloc>
 8089db4:	4602      	mov	r2, r0
 8089db6:	61e8      	str	r0, [r5, #28]
 8089db8:	b920      	cbnz	r0, 8089dc4 <_Bfree+0x20>
 8089dba:	4b09      	ldr	r3, [pc, #36]	; (8089de0 <_Bfree+0x3c>)
 8089dbc:	4809      	ldr	r0, [pc, #36]	; (8089de4 <_Bfree+0x40>)
 8089dbe:	218f      	movs	r1, #143	; 0x8f
 8089dc0:	f7ff f818 	bl	8088df4 <__assert_func>
 8089dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8089dc8:	6006      	str	r6, [r0, #0]
 8089dca:	60c6      	str	r6, [r0, #12]
 8089dcc:	b13c      	cbz	r4, 8089dde <_Bfree+0x3a>
 8089dce:	69eb      	ldr	r3, [r5, #28]
 8089dd0:	6862      	ldr	r2, [r4, #4]
 8089dd2:	68db      	ldr	r3, [r3, #12]
 8089dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8089dd8:	6021      	str	r1, [r4, #0]
 8089dda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8089dde:	bd70      	pop	{r4, r5, r6, pc}
 8089de0:	0808b6a2 	.word	0x0808b6a2
 8089de4:	0808b722 	.word	0x0808b722

08089de8 <__multadd>:
 8089de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8089dec:	690d      	ldr	r5, [r1, #16]
 8089dee:	4607      	mov	r7, r0
 8089df0:	460c      	mov	r4, r1
 8089df2:	461e      	mov	r6, r3
 8089df4:	f101 0c14 	add.w	ip, r1, #20
 8089df8:	2000      	movs	r0, #0
 8089dfa:	f8dc 3000 	ldr.w	r3, [ip]
 8089dfe:	b299      	uxth	r1, r3
 8089e00:	fb02 6101 	mla	r1, r2, r1, r6
 8089e04:	0c1e      	lsrs	r6, r3, #16
 8089e06:	0c0b      	lsrs	r3, r1, #16
 8089e08:	fb02 3306 	mla	r3, r2, r6, r3
 8089e0c:	b289      	uxth	r1, r1
 8089e0e:	3001      	adds	r0, #1
 8089e10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8089e14:	4285      	cmp	r5, r0
 8089e16:	f84c 1b04 	str.w	r1, [ip], #4
 8089e1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8089e1e:	dcec      	bgt.n	8089dfa <__multadd+0x12>
 8089e20:	b30e      	cbz	r6, 8089e66 <__multadd+0x7e>
 8089e22:	68a3      	ldr	r3, [r4, #8]
 8089e24:	42ab      	cmp	r3, r5
 8089e26:	dc19      	bgt.n	8089e5c <__multadd+0x74>
 8089e28:	6861      	ldr	r1, [r4, #4]
 8089e2a:	4638      	mov	r0, r7
 8089e2c:	3101      	adds	r1, #1
 8089e2e:	f7ff ff79 	bl	8089d24 <_Balloc>
 8089e32:	4680      	mov	r8, r0
 8089e34:	b928      	cbnz	r0, 8089e42 <__multadd+0x5a>
 8089e36:	4602      	mov	r2, r0
 8089e38:	4b0c      	ldr	r3, [pc, #48]	; (8089e6c <__multadd+0x84>)
 8089e3a:	480d      	ldr	r0, [pc, #52]	; (8089e70 <__multadd+0x88>)
 8089e3c:	21ba      	movs	r1, #186	; 0xba
 8089e3e:	f7fe ffd9 	bl	8088df4 <__assert_func>
 8089e42:	6922      	ldr	r2, [r4, #16]
 8089e44:	3202      	adds	r2, #2
 8089e46:	f104 010c 	add.w	r1, r4, #12
 8089e4a:	0092      	lsls	r2, r2, #2
 8089e4c:	300c      	adds	r0, #12
 8089e4e:	f7fe ffc2 	bl	8088dd6 <memcpy>
 8089e52:	4621      	mov	r1, r4
 8089e54:	4638      	mov	r0, r7
 8089e56:	f7ff ffa5 	bl	8089da4 <_Bfree>
 8089e5a:	4644      	mov	r4, r8
 8089e5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8089e60:	3501      	adds	r5, #1
 8089e62:	615e      	str	r6, [r3, #20]
 8089e64:	6125      	str	r5, [r4, #16]
 8089e66:	4620      	mov	r0, r4
 8089e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8089e6c:	0808b711 	.word	0x0808b711
 8089e70:	0808b722 	.word	0x0808b722

08089e74 <__hi0bits>:
 8089e74:	0c03      	lsrs	r3, r0, #16
 8089e76:	041b      	lsls	r3, r3, #16
 8089e78:	b9d3      	cbnz	r3, 8089eb0 <__hi0bits+0x3c>
 8089e7a:	0400      	lsls	r0, r0, #16
 8089e7c:	2310      	movs	r3, #16
 8089e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8089e82:	bf04      	itt	eq
 8089e84:	0200      	lsleq	r0, r0, #8
 8089e86:	3308      	addeq	r3, #8
 8089e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8089e8c:	bf04      	itt	eq
 8089e8e:	0100      	lsleq	r0, r0, #4
 8089e90:	3304      	addeq	r3, #4
 8089e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8089e96:	bf04      	itt	eq
 8089e98:	0080      	lsleq	r0, r0, #2
 8089e9a:	3302      	addeq	r3, #2
 8089e9c:	2800      	cmp	r0, #0
 8089e9e:	db05      	blt.n	8089eac <__hi0bits+0x38>
 8089ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8089ea4:	f103 0301 	add.w	r3, r3, #1
 8089ea8:	bf08      	it	eq
 8089eaa:	2320      	moveq	r3, #32
 8089eac:	4618      	mov	r0, r3
 8089eae:	4770      	bx	lr
 8089eb0:	2300      	movs	r3, #0
 8089eb2:	e7e4      	b.n	8089e7e <__hi0bits+0xa>

08089eb4 <__lo0bits>:
 8089eb4:	6803      	ldr	r3, [r0, #0]
 8089eb6:	f013 0207 	ands.w	r2, r3, #7
 8089eba:	d00c      	beq.n	8089ed6 <__lo0bits+0x22>
 8089ebc:	07d9      	lsls	r1, r3, #31
 8089ebe:	d422      	bmi.n	8089f06 <__lo0bits+0x52>
 8089ec0:	079a      	lsls	r2, r3, #30
 8089ec2:	bf49      	itett	mi
 8089ec4:	085b      	lsrmi	r3, r3, #1
 8089ec6:	089b      	lsrpl	r3, r3, #2
 8089ec8:	6003      	strmi	r3, [r0, #0]
 8089eca:	2201      	movmi	r2, #1
 8089ecc:	bf5c      	itt	pl
 8089ece:	6003      	strpl	r3, [r0, #0]
 8089ed0:	2202      	movpl	r2, #2
 8089ed2:	4610      	mov	r0, r2
 8089ed4:	4770      	bx	lr
 8089ed6:	b299      	uxth	r1, r3
 8089ed8:	b909      	cbnz	r1, 8089ede <__lo0bits+0x2a>
 8089eda:	0c1b      	lsrs	r3, r3, #16
 8089edc:	2210      	movs	r2, #16
 8089ede:	b2d9      	uxtb	r1, r3
 8089ee0:	b909      	cbnz	r1, 8089ee6 <__lo0bits+0x32>
 8089ee2:	3208      	adds	r2, #8
 8089ee4:	0a1b      	lsrs	r3, r3, #8
 8089ee6:	0719      	lsls	r1, r3, #28
 8089ee8:	bf04      	itt	eq
 8089eea:	091b      	lsreq	r3, r3, #4
 8089eec:	3204      	addeq	r2, #4
 8089eee:	0799      	lsls	r1, r3, #30
 8089ef0:	bf04      	itt	eq
 8089ef2:	089b      	lsreq	r3, r3, #2
 8089ef4:	3202      	addeq	r2, #2
 8089ef6:	07d9      	lsls	r1, r3, #31
 8089ef8:	d403      	bmi.n	8089f02 <__lo0bits+0x4e>
 8089efa:	085b      	lsrs	r3, r3, #1
 8089efc:	f102 0201 	add.w	r2, r2, #1
 8089f00:	d003      	beq.n	8089f0a <__lo0bits+0x56>
 8089f02:	6003      	str	r3, [r0, #0]
 8089f04:	e7e5      	b.n	8089ed2 <__lo0bits+0x1e>
 8089f06:	2200      	movs	r2, #0
 8089f08:	e7e3      	b.n	8089ed2 <__lo0bits+0x1e>
 8089f0a:	2220      	movs	r2, #32
 8089f0c:	e7e1      	b.n	8089ed2 <__lo0bits+0x1e>
	...

08089f10 <__i2b>:
 8089f10:	b510      	push	{r4, lr}
 8089f12:	460c      	mov	r4, r1
 8089f14:	2101      	movs	r1, #1
 8089f16:	f7ff ff05 	bl	8089d24 <_Balloc>
 8089f1a:	4602      	mov	r2, r0
 8089f1c:	b928      	cbnz	r0, 8089f2a <__i2b+0x1a>
 8089f1e:	4b05      	ldr	r3, [pc, #20]	; (8089f34 <__i2b+0x24>)
 8089f20:	4805      	ldr	r0, [pc, #20]	; (8089f38 <__i2b+0x28>)
 8089f22:	f240 1145 	movw	r1, #325	; 0x145
 8089f26:	f7fe ff65 	bl	8088df4 <__assert_func>
 8089f2a:	2301      	movs	r3, #1
 8089f2c:	6144      	str	r4, [r0, #20]
 8089f2e:	6103      	str	r3, [r0, #16]
 8089f30:	bd10      	pop	{r4, pc}
 8089f32:	bf00      	nop
 8089f34:	0808b711 	.word	0x0808b711
 8089f38:	0808b722 	.word	0x0808b722

08089f3c <__multiply>:
 8089f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089f40:	4691      	mov	r9, r2
 8089f42:	690a      	ldr	r2, [r1, #16]
 8089f44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8089f48:	429a      	cmp	r2, r3
 8089f4a:	bfb8      	it	lt
 8089f4c:	460b      	movlt	r3, r1
 8089f4e:	460c      	mov	r4, r1
 8089f50:	bfbc      	itt	lt
 8089f52:	464c      	movlt	r4, r9
 8089f54:	4699      	movlt	r9, r3
 8089f56:	6927      	ldr	r7, [r4, #16]
 8089f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8089f5c:	68a3      	ldr	r3, [r4, #8]
 8089f5e:	6861      	ldr	r1, [r4, #4]
 8089f60:	eb07 060a 	add.w	r6, r7, sl
 8089f64:	42b3      	cmp	r3, r6
 8089f66:	b085      	sub	sp, #20
 8089f68:	bfb8      	it	lt
 8089f6a:	3101      	addlt	r1, #1
 8089f6c:	f7ff feda 	bl	8089d24 <_Balloc>
 8089f70:	b930      	cbnz	r0, 8089f80 <__multiply+0x44>
 8089f72:	4602      	mov	r2, r0
 8089f74:	4b44      	ldr	r3, [pc, #272]	; (808a088 <__multiply+0x14c>)
 8089f76:	4845      	ldr	r0, [pc, #276]	; (808a08c <__multiply+0x150>)
 8089f78:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8089f7c:	f7fe ff3a 	bl	8088df4 <__assert_func>
 8089f80:	f100 0514 	add.w	r5, r0, #20
 8089f84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8089f88:	462b      	mov	r3, r5
 8089f8a:	2200      	movs	r2, #0
 8089f8c:	4543      	cmp	r3, r8
 8089f8e:	d321      	bcc.n	8089fd4 <__multiply+0x98>
 8089f90:	f104 0314 	add.w	r3, r4, #20
 8089f94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8089f98:	f109 0314 	add.w	r3, r9, #20
 8089f9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8089fa0:	9202      	str	r2, [sp, #8]
 8089fa2:	1b3a      	subs	r2, r7, r4
 8089fa4:	3a15      	subs	r2, #21
 8089fa6:	f022 0203 	bic.w	r2, r2, #3
 8089faa:	3204      	adds	r2, #4
 8089fac:	f104 0115 	add.w	r1, r4, #21
 8089fb0:	428f      	cmp	r7, r1
 8089fb2:	bf38      	it	cc
 8089fb4:	2204      	movcc	r2, #4
 8089fb6:	9201      	str	r2, [sp, #4]
 8089fb8:	9a02      	ldr	r2, [sp, #8]
 8089fba:	9303      	str	r3, [sp, #12]
 8089fbc:	429a      	cmp	r2, r3
 8089fbe:	d80c      	bhi.n	8089fda <__multiply+0x9e>
 8089fc0:	2e00      	cmp	r6, #0
 8089fc2:	dd03      	ble.n	8089fcc <__multiply+0x90>
 8089fc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8089fc8:	2b00      	cmp	r3, #0
 8089fca:	d05b      	beq.n	808a084 <__multiply+0x148>
 8089fcc:	6106      	str	r6, [r0, #16]
 8089fce:	b005      	add	sp, #20
 8089fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089fd4:	f843 2b04 	str.w	r2, [r3], #4
 8089fd8:	e7d8      	b.n	8089f8c <__multiply+0x50>
 8089fda:	f8b3 a000 	ldrh.w	sl, [r3]
 8089fde:	f1ba 0f00 	cmp.w	sl, #0
 8089fe2:	d024      	beq.n	808a02e <__multiply+0xf2>
 8089fe4:	f104 0e14 	add.w	lr, r4, #20
 8089fe8:	46a9      	mov	r9, r5
 8089fea:	f04f 0c00 	mov.w	ip, #0
 8089fee:	f85e 2b04 	ldr.w	r2, [lr], #4
 8089ff2:	f8d9 1000 	ldr.w	r1, [r9]
 8089ff6:	fa1f fb82 	uxth.w	fp, r2
 8089ffa:	b289      	uxth	r1, r1
 8089ffc:	fb0a 110b 	mla	r1, sl, fp, r1
 808a000:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 808a004:	f8d9 2000 	ldr.w	r2, [r9]
 808a008:	4461      	add	r1, ip
 808a00a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 808a00e:	fb0a c20b 	mla	r2, sl, fp, ip
 808a012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 808a016:	b289      	uxth	r1, r1
 808a018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 808a01c:	4577      	cmp	r7, lr
 808a01e:	f849 1b04 	str.w	r1, [r9], #4
 808a022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 808a026:	d8e2      	bhi.n	8089fee <__multiply+0xb2>
 808a028:	9a01      	ldr	r2, [sp, #4]
 808a02a:	f845 c002 	str.w	ip, [r5, r2]
 808a02e:	9a03      	ldr	r2, [sp, #12]
 808a030:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 808a034:	3304      	adds	r3, #4
 808a036:	f1b9 0f00 	cmp.w	r9, #0
 808a03a:	d021      	beq.n	808a080 <__multiply+0x144>
 808a03c:	6829      	ldr	r1, [r5, #0]
 808a03e:	f104 0c14 	add.w	ip, r4, #20
 808a042:	46ae      	mov	lr, r5
 808a044:	f04f 0a00 	mov.w	sl, #0
 808a048:	f8bc b000 	ldrh.w	fp, [ip]
 808a04c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 808a050:	fb09 220b 	mla	r2, r9, fp, r2
 808a054:	4452      	add	r2, sl
 808a056:	b289      	uxth	r1, r1
 808a058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 808a05c:	f84e 1b04 	str.w	r1, [lr], #4
 808a060:	f85c 1b04 	ldr.w	r1, [ip], #4
 808a064:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 808a068:	f8be 1000 	ldrh.w	r1, [lr]
 808a06c:	fb09 110a 	mla	r1, r9, sl, r1
 808a070:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 808a074:	4567      	cmp	r7, ip
 808a076:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 808a07a:	d8e5      	bhi.n	808a048 <__multiply+0x10c>
 808a07c:	9a01      	ldr	r2, [sp, #4]
 808a07e:	50a9      	str	r1, [r5, r2]
 808a080:	3504      	adds	r5, #4
 808a082:	e799      	b.n	8089fb8 <__multiply+0x7c>
 808a084:	3e01      	subs	r6, #1
 808a086:	e79b      	b.n	8089fc0 <__multiply+0x84>
 808a088:	0808b711 	.word	0x0808b711
 808a08c:	0808b722 	.word	0x0808b722

0808a090 <__pow5mult>:
 808a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808a094:	4615      	mov	r5, r2
 808a096:	f012 0203 	ands.w	r2, r2, #3
 808a09a:	4606      	mov	r6, r0
 808a09c:	460f      	mov	r7, r1
 808a09e:	d007      	beq.n	808a0b0 <__pow5mult+0x20>
 808a0a0:	4c25      	ldr	r4, [pc, #148]	; (808a138 <__pow5mult+0xa8>)
 808a0a2:	3a01      	subs	r2, #1
 808a0a4:	2300      	movs	r3, #0
 808a0a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808a0aa:	f7ff fe9d 	bl	8089de8 <__multadd>
 808a0ae:	4607      	mov	r7, r0
 808a0b0:	10ad      	asrs	r5, r5, #2
 808a0b2:	d03d      	beq.n	808a130 <__pow5mult+0xa0>
 808a0b4:	69f4      	ldr	r4, [r6, #28]
 808a0b6:	b97c      	cbnz	r4, 808a0d8 <__pow5mult+0x48>
 808a0b8:	2010      	movs	r0, #16
 808a0ba:	f7ff fd7f 	bl	8089bbc <malloc>
 808a0be:	4602      	mov	r2, r0
 808a0c0:	61f0      	str	r0, [r6, #28]
 808a0c2:	b928      	cbnz	r0, 808a0d0 <__pow5mult+0x40>
 808a0c4:	4b1d      	ldr	r3, [pc, #116]	; (808a13c <__pow5mult+0xac>)
 808a0c6:	481e      	ldr	r0, [pc, #120]	; (808a140 <__pow5mult+0xb0>)
 808a0c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 808a0cc:	f7fe fe92 	bl	8088df4 <__assert_func>
 808a0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808a0d4:	6004      	str	r4, [r0, #0]
 808a0d6:	60c4      	str	r4, [r0, #12]
 808a0d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 808a0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808a0e0:	b94c      	cbnz	r4, 808a0f6 <__pow5mult+0x66>
 808a0e2:	f240 2171 	movw	r1, #625	; 0x271
 808a0e6:	4630      	mov	r0, r6
 808a0e8:	f7ff ff12 	bl	8089f10 <__i2b>
 808a0ec:	2300      	movs	r3, #0
 808a0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 808a0f2:	4604      	mov	r4, r0
 808a0f4:	6003      	str	r3, [r0, #0]
 808a0f6:	f04f 0900 	mov.w	r9, #0
 808a0fa:	07eb      	lsls	r3, r5, #31
 808a0fc:	d50a      	bpl.n	808a114 <__pow5mult+0x84>
 808a0fe:	4639      	mov	r1, r7
 808a100:	4622      	mov	r2, r4
 808a102:	4630      	mov	r0, r6
 808a104:	f7ff ff1a 	bl	8089f3c <__multiply>
 808a108:	4639      	mov	r1, r7
 808a10a:	4680      	mov	r8, r0
 808a10c:	4630      	mov	r0, r6
 808a10e:	f7ff fe49 	bl	8089da4 <_Bfree>
 808a112:	4647      	mov	r7, r8
 808a114:	106d      	asrs	r5, r5, #1
 808a116:	d00b      	beq.n	808a130 <__pow5mult+0xa0>
 808a118:	6820      	ldr	r0, [r4, #0]
 808a11a:	b938      	cbnz	r0, 808a12c <__pow5mult+0x9c>
 808a11c:	4622      	mov	r2, r4
 808a11e:	4621      	mov	r1, r4
 808a120:	4630      	mov	r0, r6
 808a122:	f7ff ff0b 	bl	8089f3c <__multiply>
 808a126:	6020      	str	r0, [r4, #0]
 808a128:	f8c0 9000 	str.w	r9, [r0]
 808a12c:	4604      	mov	r4, r0
 808a12e:	e7e4      	b.n	808a0fa <__pow5mult+0x6a>
 808a130:	4638      	mov	r0, r7
 808a132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808a136:	bf00      	nop
 808a138:	0808b870 	.word	0x0808b870
 808a13c:	0808b6a2 	.word	0x0808b6a2
 808a140:	0808b722 	.word	0x0808b722

0808a144 <__lshift>:
 808a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a148:	460c      	mov	r4, r1
 808a14a:	6849      	ldr	r1, [r1, #4]
 808a14c:	6923      	ldr	r3, [r4, #16]
 808a14e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808a152:	68a3      	ldr	r3, [r4, #8]
 808a154:	4607      	mov	r7, r0
 808a156:	4691      	mov	r9, r2
 808a158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808a15c:	f108 0601 	add.w	r6, r8, #1
 808a160:	42b3      	cmp	r3, r6
 808a162:	db0b      	blt.n	808a17c <__lshift+0x38>
 808a164:	4638      	mov	r0, r7
 808a166:	f7ff fddd 	bl	8089d24 <_Balloc>
 808a16a:	4605      	mov	r5, r0
 808a16c:	b948      	cbnz	r0, 808a182 <__lshift+0x3e>
 808a16e:	4602      	mov	r2, r0
 808a170:	4b28      	ldr	r3, [pc, #160]	; (808a214 <__lshift+0xd0>)
 808a172:	4829      	ldr	r0, [pc, #164]	; (808a218 <__lshift+0xd4>)
 808a174:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 808a178:	f7fe fe3c 	bl	8088df4 <__assert_func>
 808a17c:	3101      	adds	r1, #1
 808a17e:	005b      	lsls	r3, r3, #1
 808a180:	e7ee      	b.n	808a160 <__lshift+0x1c>
 808a182:	2300      	movs	r3, #0
 808a184:	f100 0114 	add.w	r1, r0, #20
 808a188:	f100 0210 	add.w	r2, r0, #16
 808a18c:	4618      	mov	r0, r3
 808a18e:	4553      	cmp	r3, sl
 808a190:	db33      	blt.n	808a1fa <__lshift+0xb6>
 808a192:	6920      	ldr	r0, [r4, #16]
 808a194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808a198:	f104 0314 	add.w	r3, r4, #20
 808a19c:	f019 091f 	ands.w	r9, r9, #31
 808a1a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808a1a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 808a1a8:	d02b      	beq.n	808a202 <__lshift+0xbe>
 808a1aa:	f1c9 0e20 	rsb	lr, r9, #32
 808a1ae:	468a      	mov	sl, r1
 808a1b0:	2200      	movs	r2, #0
 808a1b2:	6818      	ldr	r0, [r3, #0]
 808a1b4:	fa00 f009 	lsl.w	r0, r0, r9
 808a1b8:	4310      	orrs	r0, r2
 808a1ba:	f84a 0b04 	str.w	r0, [sl], #4
 808a1be:	f853 2b04 	ldr.w	r2, [r3], #4
 808a1c2:	459c      	cmp	ip, r3
 808a1c4:	fa22 f20e 	lsr.w	r2, r2, lr
 808a1c8:	d8f3      	bhi.n	808a1b2 <__lshift+0x6e>
 808a1ca:	ebac 0304 	sub.w	r3, ip, r4
 808a1ce:	3b15      	subs	r3, #21
 808a1d0:	f023 0303 	bic.w	r3, r3, #3
 808a1d4:	3304      	adds	r3, #4
 808a1d6:	f104 0015 	add.w	r0, r4, #21
 808a1da:	4584      	cmp	ip, r0
 808a1dc:	bf38      	it	cc
 808a1de:	2304      	movcc	r3, #4
 808a1e0:	50ca      	str	r2, [r1, r3]
 808a1e2:	b10a      	cbz	r2, 808a1e8 <__lshift+0xa4>
 808a1e4:	f108 0602 	add.w	r6, r8, #2
 808a1e8:	3e01      	subs	r6, #1
 808a1ea:	4638      	mov	r0, r7
 808a1ec:	612e      	str	r6, [r5, #16]
 808a1ee:	4621      	mov	r1, r4
 808a1f0:	f7ff fdd8 	bl	8089da4 <_Bfree>
 808a1f4:	4628      	mov	r0, r5
 808a1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a1fa:	f842 0f04 	str.w	r0, [r2, #4]!
 808a1fe:	3301      	adds	r3, #1
 808a200:	e7c5      	b.n	808a18e <__lshift+0x4a>
 808a202:	3904      	subs	r1, #4
 808a204:	f853 2b04 	ldr.w	r2, [r3], #4
 808a208:	f841 2f04 	str.w	r2, [r1, #4]!
 808a20c:	459c      	cmp	ip, r3
 808a20e:	d8f9      	bhi.n	808a204 <__lshift+0xc0>
 808a210:	e7ea      	b.n	808a1e8 <__lshift+0xa4>
 808a212:	bf00      	nop
 808a214:	0808b711 	.word	0x0808b711
 808a218:	0808b722 	.word	0x0808b722

0808a21c <__mcmp>:
 808a21c:	b530      	push	{r4, r5, lr}
 808a21e:	6902      	ldr	r2, [r0, #16]
 808a220:	690c      	ldr	r4, [r1, #16]
 808a222:	1b12      	subs	r2, r2, r4
 808a224:	d10e      	bne.n	808a244 <__mcmp+0x28>
 808a226:	f100 0314 	add.w	r3, r0, #20
 808a22a:	3114      	adds	r1, #20
 808a22c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 808a230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 808a234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 808a238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 808a23c:	42a5      	cmp	r5, r4
 808a23e:	d003      	beq.n	808a248 <__mcmp+0x2c>
 808a240:	d305      	bcc.n	808a24e <__mcmp+0x32>
 808a242:	2201      	movs	r2, #1
 808a244:	4610      	mov	r0, r2
 808a246:	bd30      	pop	{r4, r5, pc}
 808a248:	4283      	cmp	r3, r0
 808a24a:	d3f3      	bcc.n	808a234 <__mcmp+0x18>
 808a24c:	e7fa      	b.n	808a244 <__mcmp+0x28>
 808a24e:	f04f 32ff 	mov.w	r2, #4294967295
 808a252:	e7f7      	b.n	808a244 <__mcmp+0x28>

0808a254 <__mdiff>:
 808a254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a258:	460c      	mov	r4, r1
 808a25a:	4606      	mov	r6, r0
 808a25c:	4611      	mov	r1, r2
 808a25e:	4620      	mov	r0, r4
 808a260:	4690      	mov	r8, r2
 808a262:	f7ff ffdb 	bl	808a21c <__mcmp>
 808a266:	1e05      	subs	r5, r0, #0
 808a268:	d110      	bne.n	808a28c <__mdiff+0x38>
 808a26a:	4629      	mov	r1, r5
 808a26c:	4630      	mov	r0, r6
 808a26e:	f7ff fd59 	bl	8089d24 <_Balloc>
 808a272:	b930      	cbnz	r0, 808a282 <__mdiff+0x2e>
 808a274:	4b3a      	ldr	r3, [pc, #232]	; (808a360 <__mdiff+0x10c>)
 808a276:	4602      	mov	r2, r0
 808a278:	f240 2137 	movw	r1, #567	; 0x237
 808a27c:	4839      	ldr	r0, [pc, #228]	; (808a364 <__mdiff+0x110>)
 808a27e:	f7fe fdb9 	bl	8088df4 <__assert_func>
 808a282:	2301      	movs	r3, #1
 808a284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808a288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a28c:	bfa4      	itt	ge
 808a28e:	4643      	movge	r3, r8
 808a290:	46a0      	movge	r8, r4
 808a292:	4630      	mov	r0, r6
 808a294:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808a298:	bfa6      	itte	ge
 808a29a:	461c      	movge	r4, r3
 808a29c:	2500      	movge	r5, #0
 808a29e:	2501      	movlt	r5, #1
 808a2a0:	f7ff fd40 	bl	8089d24 <_Balloc>
 808a2a4:	b920      	cbnz	r0, 808a2b0 <__mdiff+0x5c>
 808a2a6:	4b2e      	ldr	r3, [pc, #184]	; (808a360 <__mdiff+0x10c>)
 808a2a8:	4602      	mov	r2, r0
 808a2aa:	f240 2145 	movw	r1, #581	; 0x245
 808a2ae:	e7e5      	b.n	808a27c <__mdiff+0x28>
 808a2b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808a2b4:	6926      	ldr	r6, [r4, #16]
 808a2b6:	60c5      	str	r5, [r0, #12]
 808a2b8:	f104 0914 	add.w	r9, r4, #20
 808a2bc:	f108 0514 	add.w	r5, r8, #20
 808a2c0:	f100 0e14 	add.w	lr, r0, #20
 808a2c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 808a2c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808a2cc:	f108 0210 	add.w	r2, r8, #16
 808a2d0:	46f2      	mov	sl, lr
 808a2d2:	2100      	movs	r1, #0
 808a2d4:	f859 3b04 	ldr.w	r3, [r9], #4
 808a2d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808a2dc:	fa11 f88b 	uxtah	r8, r1, fp
 808a2e0:	b299      	uxth	r1, r3
 808a2e2:	0c1b      	lsrs	r3, r3, #16
 808a2e4:	eba8 0801 	sub.w	r8, r8, r1
 808a2e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808a2ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 808a2f0:	fa1f f888 	uxth.w	r8, r8
 808a2f4:	1419      	asrs	r1, r3, #16
 808a2f6:	454e      	cmp	r6, r9
 808a2f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 808a2fc:	f84a 3b04 	str.w	r3, [sl], #4
 808a300:	d8e8      	bhi.n	808a2d4 <__mdiff+0x80>
 808a302:	1b33      	subs	r3, r6, r4
 808a304:	3b15      	subs	r3, #21
 808a306:	f023 0303 	bic.w	r3, r3, #3
 808a30a:	3304      	adds	r3, #4
 808a30c:	3415      	adds	r4, #21
 808a30e:	42a6      	cmp	r6, r4
 808a310:	bf38      	it	cc
 808a312:	2304      	movcc	r3, #4
 808a314:	441d      	add	r5, r3
 808a316:	4473      	add	r3, lr
 808a318:	469e      	mov	lr, r3
 808a31a:	462e      	mov	r6, r5
 808a31c:	4566      	cmp	r6, ip
 808a31e:	d30e      	bcc.n	808a33e <__mdiff+0xea>
 808a320:	f10c 0203 	add.w	r2, ip, #3
 808a324:	1b52      	subs	r2, r2, r5
 808a326:	f022 0203 	bic.w	r2, r2, #3
 808a32a:	3d03      	subs	r5, #3
 808a32c:	45ac      	cmp	ip, r5
 808a32e:	bf38      	it	cc
 808a330:	2200      	movcc	r2, #0
 808a332:	4413      	add	r3, r2
 808a334:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 808a338:	b17a      	cbz	r2, 808a35a <__mdiff+0x106>
 808a33a:	6107      	str	r7, [r0, #16]
 808a33c:	e7a4      	b.n	808a288 <__mdiff+0x34>
 808a33e:	f856 8b04 	ldr.w	r8, [r6], #4
 808a342:	fa11 f288 	uxtah	r2, r1, r8
 808a346:	1414      	asrs	r4, r2, #16
 808a348:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 808a34c:	b292      	uxth	r2, r2
 808a34e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 808a352:	f84e 2b04 	str.w	r2, [lr], #4
 808a356:	1421      	asrs	r1, r4, #16
 808a358:	e7e0      	b.n	808a31c <__mdiff+0xc8>
 808a35a:	3f01      	subs	r7, #1
 808a35c:	e7ea      	b.n	808a334 <__mdiff+0xe0>
 808a35e:	bf00      	nop
 808a360:	0808b711 	.word	0x0808b711
 808a364:	0808b722 	.word	0x0808b722

0808a368 <__d2b>:
 808a368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808a36c:	460f      	mov	r7, r1
 808a36e:	2101      	movs	r1, #1
 808a370:	ec59 8b10 	vmov	r8, r9, d0
 808a374:	4616      	mov	r6, r2
 808a376:	f7ff fcd5 	bl	8089d24 <_Balloc>
 808a37a:	4604      	mov	r4, r0
 808a37c:	b930      	cbnz	r0, 808a38c <__d2b+0x24>
 808a37e:	4602      	mov	r2, r0
 808a380:	4b24      	ldr	r3, [pc, #144]	; (808a414 <__d2b+0xac>)
 808a382:	4825      	ldr	r0, [pc, #148]	; (808a418 <__d2b+0xb0>)
 808a384:	f240 310f 	movw	r1, #783	; 0x30f
 808a388:	f7fe fd34 	bl	8088df4 <__assert_func>
 808a38c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 808a390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808a394:	bb2d      	cbnz	r5, 808a3e2 <__d2b+0x7a>
 808a396:	9301      	str	r3, [sp, #4]
 808a398:	f1b8 0300 	subs.w	r3, r8, #0
 808a39c:	d026      	beq.n	808a3ec <__d2b+0x84>
 808a39e:	4668      	mov	r0, sp
 808a3a0:	9300      	str	r3, [sp, #0]
 808a3a2:	f7ff fd87 	bl	8089eb4 <__lo0bits>
 808a3a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 808a3aa:	b1e8      	cbz	r0, 808a3e8 <__d2b+0x80>
 808a3ac:	f1c0 0320 	rsb	r3, r0, #32
 808a3b0:	fa02 f303 	lsl.w	r3, r2, r3
 808a3b4:	430b      	orrs	r3, r1
 808a3b6:	40c2      	lsrs	r2, r0
 808a3b8:	6163      	str	r3, [r4, #20]
 808a3ba:	9201      	str	r2, [sp, #4]
 808a3bc:	9b01      	ldr	r3, [sp, #4]
 808a3be:	61a3      	str	r3, [r4, #24]
 808a3c0:	2b00      	cmp	r3, #0
 808a3c2:	bf14      	ite	ne
 808a3c4:	2202      	movne	r2, #2
 808a3c6:	2201      	moveq	r2, #1
 808a3c8:	6122      	str	r2, [r4, #16]
 808a3ca:	b1bd      	cbz	r5, 808a3fc <__d2b+0x94>
 808a3cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 808a3d0:	4405      	add	r5, r0
 808a3d2:	603d      	str	r5, [r7, #0]
 808a3d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808a3d8:	6030      	str	r0, [r6, #0]
 808a3da:	4620      	mov	r0, r4
 808a3dc:	b003      	add	sp, #12
 808a3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808a3e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808a3e6:	e7d6      	b.n	808a396 <__d2b+0x2e>
 808a3e8:	6161      	str	r1, [r4, #20]
 808a3ea:	e7e7      	b.n	808a3bc <__d2b+0x54>
 808a3ec:	a801      	add	r0, sp, #4
 808a3ee:	f7ff fd61 	bl	8089eb4 <__lo0bits>
 808a3f2:	9b01      	ldr	r3, [sp, #4]
 808a3f4:	6163      	str	r3, [r4, #20]
 808a3f6:	3020      	adds	r0, #32
 808a3f8:	2201      	movs	r2, #1
 808a3fa:	e7e5      	b.n	808a3c8 <__d2b+0x60>
 808a3fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 808a400:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808a404:	6038      	str	r0, [r7, #0]
 808a406:	6918      	ldr	r0, [r3, #16]
 808a408:	f7ff fd34 	bl	8089e74 <__hi0bits>
 808a40c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 808a410:	e7e2      	b.n	808a3d8 <__d2b+0x70>
 808a412:	bf00      	nop
 808a414:	0808b711 	.word	0x0808b711
 808a418:	0808b722 	.word	0x0808b722

0808a41c <__ssputs_r>:
 808a41c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a420:	688e      	ldr	r6, [r1, #8]
 808a422:	461f      	mov	r7, r3
 808a424:	42be      	cmp	r6, r7
 808a426:	680b      	ldr	r3, [r1, #0]
 808a428:	4682      	mov	sl, r0
 808a42a:	460c      	mov	r4, r1
 808a42c:	4690      	mov	r8, r2
 808a42e:	d82c      	bhi.n	808a48a <__ssputs_r+0x6e>
 808a430:	898a      	ldrh	r2, [r1, #12]
 808a432:	f412 6f90 	tst.w	r2, #1152	; 0x480
 808a436:	d026      	beq.n	808a486 <__ssputs_r+0x6a>
 808a438:	6965      	ldr	r5, [r4, #20]
 808a43a:	6909      	ldr	r1, [r1, #16]
 808a43c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 808a440:	eba3 0901 	sub.w	r9, r3, r1
 808a444:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 808a448:	1c7b      	adds	r3, r7, #1
 808a44a:	444b      	add	r3, r9
 808a44c:	106d      	asrs	r5, r5, #1
 808a44e:	429d      	cmp	r5, r3
 808a450:	bf38      	it	cc
 808a452:	461d      	movcc	r5, r3
 808a454:	0553      	lsls	r3, r2, #21
 808a456:	d527      	bpl.n	808a4a8 <__ssputs_r+0x8c>
 808a458:	4629      	mov	r1, r5
 808a45a:	f7ff fbd7 	bl	8089c0c <_malloc_r>
 808a45e:	4606      	mov	r6, r0
 808a460:	b360      	cbz	r0, 808a4bc <__ssputs_r+0xa0>
 808a462:	6921      	ldr	r1, [r4, #16]
 808a464:	464a      	mov	r2, r9
 808a466:	f7fe fcb6 	bl	8088dd6 <memcpy>
 808a46a:	89a3      	ldrh	r3, [r4, #12]
 808a46c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 808a470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808a474:	81a3      	strh	r3, [r4, #12]
 808a476:	6126      	str	r6, [r4, #16]
 808a478:	6165      	str	r5, [r4, #20]
 808a47a:	444e      	add	r6, r9
 808a47c:	eba5 0509 	sub.w	r5, r5, r9
 808a480:	6026      	str	r6, [r4, #0]
 808a482:	60a5      	str	r5, [r4, #8]
 808a484:	463e      	mov	r6, r7
 808a486:	42be      	cmp	r6, r7
 808a488:	d900      	bls.n	808a48c <__ssputs_r+0x70>
 808a48a:	463e      	mov	r6, r7
 808a48c:	6820      	ldr	r0, [r4, #0]
 808a48e:	4632      	mov	r2, r6
 808a490:	4641      	mov	r1, r8
 808a492:	f000 fbb5 	bl	808ac00 <memmove>
 808a496:	68a3      	ldr	r3, [r4, #8]
 808a498:	1b9b      	subs	r3, r3, r6
 808a49a:	60a3      	str	r3, [r4, #8]
 808a49c:	6823      	ldr	r3, [r4, #0]
 808a49e:	4433      	add	r3, r6
 808a4a0:	6023      	str	r3, [r4, #0]
 808a4a2:	2000      	movs	r0, #0
 808a4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a4a8:	462a      	mov	r2, r5
 808a4aa:	f000 fc02 	bl	808acb2 <_realloc_r>
 808a4ae:	4606      	mov	r6, r0
 808a4b0:	2800      	cmp	r0, #0
 808a4b2:	d1e0      	bne.n	808a476 <__ssputs_r+0x5a>
 808a4b4:	6921      	ldr	r1, [r4, #16]
 808a4b6:	4650      	mov	r0, sl
 808a4b8:	f7ff fb34 	bl	8089b24 <_free_r>
 808a4bc:	230c      	movs	r3, #12
 808a4be:	f8ca 3000 	str.w	r3, [sl]
 808a4c2:	89a3      	ldrh	r3, [r4, #12]
 808a4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808a4c8:	81a3      	strh	r3, [r4, #12]
 808a4ca:	f04f 30ff 	mov.w	r0, #4294967295
 808a4ce:	e7e9      	b.n	808a4a4 <__ssputs_r+0x88>

0808a4d0 <_svfiprintf_r>:
 808a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a4d4:	4698      	mov	r8, r3
 808a4d6:	898b      	ldrh	r3, [r1, #12]
 808a4d8:	061b      	lsls	r3, r3, #24
 808a4da:	b09d      	sub	sp, #116	; 0x74
 808a4dc:	4607      	mov	r7, r0
 808a4de:	460d      	mov	r5, r1
 808a4e0:	4614      	mov	r4, r2
 808a4e2:	d50e      	bpl.n	808a502 <_svfiprintf_r+0x32>
 808a4e4:	690b      	ldr	r3, [r1, #16]
 808a4e6:	b963      	cbnz	r3, 808a502 <_svfiprintf_r+0x32>
 808a4e8:	2140      	movs	r1, #64	; 0x40
 808a4ea:	f7ff fb8f 	bl	8089c0c <_malloc_r>
 808a4ee:	6028      	str	r0, [r5, #0]
 808a4f0:	6128      	str	r0, [r5, #16]
 808a4f2:	b920      	cbnz	r0, 808a4fe <_svfiprintf_r+0x2e>
 808a4f4:	230c      	movs	r3, #12
 808a4f6:	603b      	str	r3, [r7, #0]
 808a4f8:	f04f 30ff 	mov.w	r0, #4294967295
 808a4fc:	e0d0      	b.n	808a6a0 <_svfiprintf_r+0x1d0>
 808a4fe:	2340      	movs	r3, #64	; 0x40
 808a500:	616b      	str	r3, [r5, #20]
 808a502:	2300      	movs	r3, #0
 808a504:	9309      	str	r3, [sp, #36]	; 0x24
 808a506:	2320      	movs	r3, #32
 808a508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808a50c:	f8cd 800c 	str.w	r8, [sp, #12]
 808a510:	2330      	movs	r3, #48	; 0x30
 808a512:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 808a6b8 <_svfiprintf_r+0x1e8>
 808a516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808a51a:	f04f 0901 	mov.w	r9, #1
 808a51e:	4623      	mov	r3, r4
 808a520:	469a      	mov	sl, r3
 808a522:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a526:	b10a      	cbz	r2, 808a52c <_svfiprintf_r+0x5c>
 808a528:	2a25      	cmp	r2, #37	; 0x25
 808a52a:	d1f9      	bne.n	808a520 <_svfiprintf_r+0x50>
 808a52c:	ebba 0b04 	subs.w	fp, sl, r4
 808a530:	d00b      	beq.n	808a54a <_svfiprintf_r+0x7a>
 808a532:	465b      	mov	r3, fp
 808a534:	4622      	mov	r2, r4
 808a536:	4629      	mov	r1, r5
 808a538:	4638      	mov	r0, r7
 808a53a:	f7ff ff6f 	bl	808a41c <__ssputs_r>
 808a53e:	3001      	adds	r0, #1
 808a540:	f000 80a9 	beq.w	808a696 <_svfiprintf_r+0x1c6>
 808a544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808a546:	445a      	add	r2, fp
 808a548:	9209      	str	r2, [sp, #36]	; 0x24
 808a54a:	f89a 3000 	ldrb.w	r3, [sl]
 808a54e:	2b00      	cmp	r3, #0
 808a550:	f000 80a1 	beq.w	808a696 <_svfiprintf_r+0x1c6>
 808a554:	2300      	movs	r3, #0
 808a556:	f04f 32ff 	mov.w	r2, #4294967295
 808a55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808a55e:	f10a 0a01 	add.w	sl, sl, #1
 808a562:	9304      	str	r3, [sp, #16]
 808a564:	9307      	str	r3, [sp, #28]
 808a566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808a56a:	931a      	str	r3, [sp, #104]	; 0x68
 808a56c:	4654      	mov	r4, sl
 808a56e:	2205      	movs	r2, #5
 808a570:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a574:	4850      	ldr	r0, [pc, #320]	; (808a6b8 <_svfiprintf_r+0x1e8>)
 808a576:	f7f5 fe2b 	bl	80801d0 <memchr>
 808a57a:	9a04      	ldr	r2, [sp, #16]
 808a57c:	b9d8      	cbnz	r0, 808a5b6 <_svfiprintf_r+0xe6>
 808a57e:	06d0      	lsls	r0, r2, #27
 808a580:	bf44      	itt	mi
 808a582:	2320      	movmi	r3, #32
 808a584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808a588:	0711      	lsls	r1, r2, #28
 808a58a:	bf44      	itt	mi
 808a58c:	232b      	movmi	r3, #43	; 0x2b
 808a58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808a592:	f89a 3000 	ldrb.w	r3, [sl]
 808a596:	2b2a      	cmp	r3, #42	; 0x2a
 808a598:	d015      	beq.n	808a5c6 <_svfiprintf_r+0xf6>
 808a59a:	9a07      	ldr	r2, [sp, #28]
 808a59c:	4654      	mov	r4, sl
 808a59e:	2000      	movs	r0, #0
 808a5a0:	f04f 0c0a 	mov.w	ip, #10
 808a5a4:	4621      	mov	r1, r4
 808a5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 808a5aa:	3b30      	subs	r3, #48	; 0x30
 808a5ac:	2b09      	cmp	r3, #9
 808a5ae:	d94d      	bls.n	808a64c <_svfiprintf_r+0x17c>
 808a5b0:	b1b0      	cbz	r0, 808a5e0 <_svfiprintf_r+0x110>
 808a5b2:	9207      	str	r2, [sp, #28]
 808a5b4:	e014      	b.n	808a5e0 <_svfiprintf_r+0x110>
 808a5b6:	eba0 0308 	sub.w	r3, r0, r8
 808a5ba:	fa09 f303 	lsl.w	r3, r9, r3
 808a5be:	4313      	orrs	r3, r2
 808a5c0:	9304      	str	r3, [sp, #16]
 808a5c2:	46a2      	mov	sl, r4
 808a5c4:	e7d2      	b.n	808a56c <_svfiprintf_r+0x9c>
 808a5c6:	9b03      	ldr	r3, [sp, #12]
 808a5c8:	1d19      	adds	r1, r3, #4
 808a5ca:	681b      	ldr	r3, [r3, #0]
 808a5cc:	9103      	str	r1, [sp, #12]
 808a5ce:	2b00      	cmp	r3, #0
 808a5d0:	bfbb      	ittet	lt
 808a5d2:	425b      	neglt	r3, r3
 808a5d4:	f042 0202 	orrlt.w	r2, r2, #2
 808a5d8:	9307      	strge	r3, [sp, #28]
 808a5da:	9307      	strlt	r3, [sp, #28]
 808a5dc:	bfb8      	it	lt
 808a5de:	9204      	strlt	r2, [sp, #16]
 808a5e0:	7823      	ldrb	r3, [r4, #0]
 808a5e2:	2b2e      	cmp	r3, #46	; 0x2e
 808a5e4:	d10c      	bne.n	808a600 <_svfiprintf_r+0x130>
 808a5e6:	7863      	ldrb	r3, [r4, #1]
 808a5e8:	2b2a      	cmp	r3, #42	; 0x2a
 808a5ea:	d134      	bne.n	808a656 <_svfiprintf_r+0x186>
 808a5ec:	9b03      	ldr	r3, [sp, #12]
 808a5ee:	1d1a      	adds	r2, r3, #4
 808a5f0:	681b      	ldr	r3, [r3, #0]
 808a5f2:	9203      	str	r2, [sp, #12]
 808a5f4:	2b00      	cmp	r3, #0
 808a5f6:	bfb8      	it	lt
 808a5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 808a5fc:	3402      	adds	r4, #2
 808a5fe:	9305      	str	r3, [sp, #20]
 808a600:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 808a6c8 <_svfiprintf_r+0x1f8>
 808a604:	7821      	ldrb	r1, [r4, #0]
 808a606:	2203      	movs	r2, #3
 808a608:	4650      	mov	r0, sl
 808a60a:	f7f5 fde1 	bl	80801d0 <memchr>
 808a60e:	b138      	cbz	r0, 808a620 <_svfiprintf_r+0x150>
 808a610:	9b04      	ldr	r3, [sp, #16]
 808a612:	eba0 000a 	sub.w	r0, r0, sl
 808a616:	2240      	movs	r2, #64	; 0x40
 808a618:	4082      	lsls	r2, r0
 808a61a:	4313      	orrs	r3, r2
 808a61c:	3401      	adds	r4, #1
 808a61e:	9304      	str	r3, [sp, #16]
 808a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a624:	4825      	ldr	r0, [pc, #148]	; (808a6bc <_svfiprintf_r+0x1ec>)
 808a626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808a62a:	2206      	movs	r2, #6
 808a62c:	f7f5 fdd0 	bl	80801d0 <memchr>
 808a630:	2800      	cmp	r0, #0
 808a632:	d038      	beq.n	808a6a6 <_svfiprintf_r+0x1d6>
 808a634:	4b22      	ldr	r3, [pc, #136]	; (808a6c0 <_svfiprintf_r+0x1f0>)
 808a636:	bb1b      	cbnz	r3, 808a680 <_svfiprintf_r+0x1b0>
 808a638:	9b03      	ldr	r3, [sp, #12]
 808a63a:	3307      	adds	r3, #7
 808a63c:	f023 0307 	bic.w	r3, r3, #7
 808a640:	3308      	adds	r3, #8
 808a642:	9303      	str	r3, [sp, #12]
 808a644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a646:	4433      	add	r3, r6
 808a648:	9309      	str	r3, [sp, #36]	; 0x24
 808a64a:	e768      	b.n	808a51e <_svfiprintf_r+0x4e>
 808a64c:	fb0c 3202 	mla	r2, ip, r2, r3
 808a650:	460c      	mov	r4, r1
 808a652:	2001      	movs	r0, #1
 808a654:	e7a6      	b.n	808a5a4 <_svfiprintf_r+0xd4>
 808a656:	2300      	movs	r3, #0
 808a658:	3401      	adds	r4, #1
 808a65a:	9305      	str	r3, [sp, #20]
 808a65c:	4619      	mov	r1, r3
 808a65e:	f04f 0c0a 	mov.w	ip, #10
 808a662:	4620      	mov	r0, r4
 808a664:	f810 2b01 	ldrb.w	r2, [r0], #1
 808a668:	3a30      	subs	r2, #48	; 0x30
 808a66a:	2a09      	cmp	r2, #9
 808a66c:	d903      	bls.n	808a676 <_svfiprintf_r+0x1a6>
 808a66e:	2b00      	cmp	r3, #0
 808a670:	d0c6      	beq.n	808a600 <_svfiprintf_r+0x130>
 808a672:	9105      	str	r1, [sp, #20]
 808a674:	e7c4      	b.n	808a600 <_svfiprintf_r+0x130>
 808a676:	fb0c 2101 	mla	r1, ip, r1, r2
 808a67a:	4604      	mov	r4, r0
 808a67c:	2301      	movs	r3, #1
 808a67e:	e7f0      	b.n	808a662 <_svfiprintf_r+0x192>
 808a680:	ab03      	add	r3, sp, #12
 808a682:	9300      	str	r3, [sp, #0]
 808a684:	462a      	mov	r2, r5
 808a686:	4b0f      	ldr	r3, [pc, #60]	; (808a6c4 <_svfiprintf_r+0x1f4>)
 808a688:	a904      	add	r1, sp, #16
 808a68a:	4638      	mov	r0, r7
 808a68c:	f7fd fe22 	bl	80882d4 <_printf_float>
 808a690:	1c42      	adds	r2, r0, #1
 808a692:	4606      	mov	r6, r0
 808a694:	d1d6      	bne.n	808a644 <_svfiprintf_r+0x174>
 808a696:	89ab      	ldrh	r3, [r5, #12]
 808a698:	065b      	lsls	r3, r3, #25
 808a69a:	f53f af2d 	bmi.w	808a4f8 <_svfiprintf_r+0x28>
 808a69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 808a6a0:	b01d      	add	sp, #116	; 0x74
 808a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a6a6:	ab03      	add	r3, sp, #12
 808a6a8:	9300      	str	r3, [sp, #0]
 808a6aa:	462a      	mov	r2, r5
 808a6ac:	4b05      	ldr	r3, [pc, #20]	; (808a6c4 <_svfiprintf_r+0x1f4>)
 808a6ae:	a904      	add	r1, sp, #16
 808a6b0:	4638      	mov	r0, r7
 808a6b2:	f7fe f8b3 	bl	808881c <_printf_i>
 808a6b6:	e7eb      	b.n	808a690 <_svfiprintf_r+0x1c0>
 808a6b8:	0808b87c 	.word	0x0808b87c
 808a6bc:	0808b886 	.word	0x0808b886
 808a6c0:	080882d5 	.word	0x080882d5
 808a6c4:	0808a41d 	.word	0x0808a41d
 808a6c8:	0808b882 	.word	0x0808b882

0808a6cc <__sfputc_r>:
 808a6cc:	6893      	ldr	r3, [r2, #8]
 808a6ce:	3b01      	subs	r3, #1
 808a6d0:	2b00      	cmp	r3, #0
 808a6d2:	b410      	push	{r4}
 808a6d4:	6093      	str	r3, [r2, #8]
 808a6d6:	da08      	bge.n	808a6ea <__sfputc_r+0x1e>
 808a6d8:	6994      	ldr	r4, [r2, #24]
 808a6da:	42a3      	cmp	r3, r4
 808a6dc:	db01      	blt.n	808a6e2 <__sfputc_r+0x16>
 808a6de:	290a      	cmp	r1, #10
 808a6e0:	d103      	bne.n	808a6ea <__sfputc_r+0x1e>
 808a6e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 808a6e6:	f000 b9f5 	b.w	808aad4 <__swbuf_r>
 808a6ea:	6813      	ldr	r3, [r2, #0]
 808a6ec:	1c58      	adds	r0, r3, #1
 808a6ee:	6010      	str	r0, [r2, #0]
 808a6f0:	7019      	strb	r1, [r3, #0]
 808a6f2:	4608      	mov	r0, r1
 808a6f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 808a6f8:	4770      	bx	lr

0808a6fa <__sfputs_r>:
 808a6fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a6fc:	4606      	mov	r6, r0
 808a6fe:	460f      	mov	r7, r1
 808a700:	4614      	mov	r4, r2
 808a702:	18d5      	adds	r5, r2, r3
 808a704:	42ac      	cmp	r4, r5
 808a706:	d101      	bne.n	808a70c <__sfputs_r+0x12>
 808a708:	2000      	movs	r0, #0
 808a70a:	e007      	b.n	808a71c <__sfputs_r+0x22>
 808a70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a710:	463a      	mov	r2, r7
 808a712:	4630      	mov	r0, r6
 808a714:	f7ff ffda 	bl	808a6cc <__sfputc_r>
 808a718:	1c43      	adds	r3, r0, #1
 808a71a:	d1f3      	bne.n	808a704 <__sfputs_r+0xa>
 808a71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808a720 <_vfiprintf_r>:
 808a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a724:	460d      	mov	r5, r1
 808a726:	b09d      	sub	sp, #116	; 0x74
 808a728:	4614      	mov	r4, r2
 808a72a:	4698      	mov	r8, r3
 808a72c:	4606      	mov	r6, r0
 808a72e:	b118      	cbz	r0, 808a738 <_vfiprintf_r+0x18>
 808a730:	6a03      	ldr	r3, [r0, #32]
 808a732:	b90b      	cbnz	r3, 808a738 <_vfiprintf_r+0x18>
 808a734:	f7fe fa20 	bl	8088b78 <__sinit>
 808a738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808a73a:	07d9      	lsls	r1, r3, #31
 808a73c:	d405      	bmi.n	808a74a <_vfiprintf_r+0x2a>
 808a73e:	89ab      	ldrh	r3, [r5, #12]
 808a740:	059a      	lsls	r2, r3, #22
 808a742:	d402      	bmi.n	808a74a <_vfiprintf_r+0x2a>
 808a744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808a746:	f7fe fb44 	bl	8088dd2 <__retarget_lock_acquire_recursive>
 808a74a:	89ab      	ldrh	r3, [r5, #12]
 808a74c:	071b      	lsls	r3, r3, #28
 808a74e:	d501      	bpl.n	808a754 <_vfiprintf_r+0x34>
 808a750:	692b      	ldr	r3, [r5, #16]
 808a752:	b99b      	cbnz	r3, 808a77c <_vfiprintf_r+0x5c>
 808a754:	4629      	mov	r1, r5
 808a756:	4630      	mov	r0, r6
 808a758:	f000 f9fa 	bl	808ab50 <__swsetup_r>
 808a75c:	b170      	cbz	r0, 808a77c <_vfiprintf_r+0x5c>
 808a75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808a760:	07dc      	lsls	r4, r3, #31
 808a762:	d504      	bpl.n	808a76e <_vfiprintf_r+0x4e>
 808a764:	f04f 30ff 	mov.w	r0, #4294967295
 808a768:	b01d      	add	sp, #116	; 0x74
 808a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a76e:	89ab      	ldrh	r3, [r5, #12]
 808a770:	0598      	lsls	r0, r3, #22
 808a772:	d4f7      	bmi.n	808a764 <_vfiprintf_r+0x44>
 808a774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808a776:	f7fe fb2d 	bl	8088dd4 <__retarget_lock_release_recursive>
 808a77a:	e7f3      	b.n	808a764 <_vfiprintf_r+0x44>
 808a77c:	2300      	movs	r3, #0
 808a77e:	9309      	str	r3, [sp, #36]	; 0x24
 808a780:	2320      	movs	r3, #32
 808a782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808a786:	f8cd 800c 	str.w	r8, [sp, #12]
 808a78a:	2330      	movs	r3, #48	; 0x30
 808a78c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 808a940 <_vfiprintf_r+0x220>
 808a790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808a794:	f04f 0901 	mov.w	r9, #1
 808a798:	4623      	mov	r3, r4
 808a79a:	469a      	mov	sl, r3
 808a79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 808a7a0:	b10a      	cbz	r2, 808a7a6 <_vfiprintf_r+0x86>
 808a7a2:	2a25      	cmp	r2, #37	; 0x25
 808a7a4:	d1f9      	bne.n	808a79a <_vfiprintf_r+0x7a>
 808a7a6:	ebba 0b04 	subs.w	fp, sl, r4
 808a7aa:	d00b      	beq.n	808a7c4 <_vfiprintf_r+0xa4>
 808a7ac:	465b      	mov	r3, fp
 808a7ae:	4622      	mov	r2, r4
 808a7b0:	4629      	mov	r1, r5
 808a7b2:	4630      	mov	r0, r6
 808a7b4:	f7ff ffa1 	bl	808a6fa <__sfputs_r>
 808a7b8:	3001      	adds	r0, #1
 808a7ba:	f000 80a9 	beq.w	808a910 <_vfiprintf_r+0x1f0>
 808a7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808a7c0:	445a      	add	r2, fp
 808a7c2:	9209      	str	r2, [sp, #36]	; 0x24
 808a7c4:	f89a 3000 	ldrb.w	r3, [sl]
 808a7c8:	2b00      	cmp	r3, #0
 808a7ca:	f000 80a1 	beq.w	808a910 <_vfiprintf_r+0x1f0>
 808a7ce:	2300      	movs	r3, #0
 808a7d0:	f04f 32ff 	mov.w	r2, #4294967295
 808a7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808a7d8:	f10a 0a01 	add.w	sl, sl, #1
 808a7dc:	9304      	str	r3, [sp, #16]
 808a7de:	9307      	str	r3, [sp, #28]
 808a7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808a7e4:	931a      	str	r3, [sp, #104]	; 0x68
 808a7e6:	4654      	mov	r4, sl
 808a7e8:	2205      	movs	r2, #5
 808a7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a7ee:	4854      	ldr	r0, [pc, #336]	; (808a940 <_vfiprintf_r+0x220>)
 808a7f0:	f7f5 fcee 	bl	80801d0 <memchr>
 808a7f4:	9a04      	ldr	r2, [sp, #16]
 808a7f6:	b9d8      	cbnz	r0, 808a830 <_vfiprintf_r+0x110>
 808a7f8:	06d1      	lsls	r1, r2, #27
 808a7fa:	bf44      	itt	mi
 808a7fc:	2320      	movmi	r3, #32
 808a7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808a802:	0713      	lsls	r3, r2, #28
 808a804:	bf44      	itt	mi
 808a806:	232b      	movmi	r3, #43	; 0x2b
 808a808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808a80c:	f89a 3000 	ldrb.w	r3, [sl]
 808a810:	2b2a      	cmp	r3, #42	; 0x2a
 808a812:	d015      	beq.n	808a840 <_vfiprintf_r+0x120>
 808a814:	9a07      	ldr	r2, [sp, #28]
 808a816:	4654      	mov	r4, sl
 808a818:	2000      	movs	r0, #0
 808a81a:	f04f 0c0a 	mov.w	ip, #10
 808a81e:	4621      	mov	r1, r4
 808a820:	f811 3b01 	ldrb.w	r3, [r1], #1
 808a824:	3b30      	subs	r3, #48	; 0x30
 808a826:	2b09      	cmp	r3, #9
 808a828:	d94d      	bls.n	808a8c6 <_vfiprintf_r+0x1a6>
 808a82a:	b1b0      	cbz	r0, 808a85a <_vfiprintf_r+0x13a>
 808a82c:	9207      	str	r2, [sp, #28]
 808a82e:	e014      	b.n	808a85a <_vfiprintf_r+0x13a>
 808a830:	eba0 0308 	sub.w	r3, r0, r8
 808a834:	fa09 f303 	lsl.w	r3, r9, r3
 808a838:	4313      	orrs	r3, r2
 808a83a:	9304      	str	r3, [sp, #16]
 808a83c:	46a2      	mov	sl, r4
 808a83e:	e7d2      	b.n	808a7e6 <_vfiprintf_r+0xc6>
 808a840:	9b03      	ldr	r3, [sp, #12]
 808a842:	1d19      	adds	r1, r3, #4
 808a844:	681b      	ldr	r3, [r3, #0]
 808a846:	9103      	str	r1, [sp, #12]
 808a848:	2b00      	cmp	r3, #0
 808a84a:	bfbb      	ittet	lt
 808a84c:	425b      	neglt	r3, r3
 808a84e:	f042 0202 	orrlt.w	r2, r2, #2
 808a852:	9307      	strge	r3, [sp, #28]
 808a854:	9307      	strlt	r3, [sp, #28]
 808a856:	bfb8      	it	lt
 808a858:	9204      	strlt	r2, [sp, #16]
 808a85a:	7823      	ldrb	r3, [r4, #0]
 808a85c:	2b2e      	cmp	r3, #46	; 0x2e
 808a85e:	d10c      	bne.n	808a87a <_vfiprintf_r+0x15a>
 808a860:	7863      	ldrb	r3, [r4, #1]
 808a862:	2b2a      	cmp	r3, #42	; 0x2a
 808a864:	d134      	bne.n	808a8d0 <_vfiprintf_r+0x1b0>
 808a866:	9b03      	ldr	r3, [sp, #12]
 808a868:	1d1a      	adds	r2, r3, #4
 808a86a:	681b      	ldr	r3, [r3, #0]
 808a86c:	9203      	str	r2, [sp, #12]
 808a86e:	2b00      	cmp	r3, #0
 808a870:	bfb8      	it	lt
 808a872:	f04f 33ff 	movlt.w	r3, #4294967295
 808a876:	3402      	adds	r4, #2
 808a878:	9305      	str	r3, [sp, #20]
 808a87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 808a950 <_vfiprintf_r+0x230>
 808a87e:	7821      	ldrb	r1, [r4, #0]
 808a880:	2203      	movs	r2, #3
 808a882:	4650      	mov	r0, sl
 808a884:	f7f5 fca4 	bl	80801d0 <memchr>
 808a888:	b138      	cbz	r0, 808a89a <_vfiprintf_r+0x17a>
 808a88a:	9b04      	ldr	r3, [sp, #16]
 808a88c:	eba0 000a 	sub.w	r0, r0, sl
 808a890:	2240      	movs	r2, #64	; 0x40
 808a892:	4082      	lsls	r2, r0
 808a894:	4313      	orrs	r3, r2
 808a896:	3401      	adds	r4, #1
 808a898:	9304      	str	r3, [sp, #16]
 808a89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a89e:	4829      	ldr	r0, [pc, #164]	; (808a944 <_vfiprintf_r+0x224>)
 808a8a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808a8a4:	2206      	movs	r2, #6
 808a8a6:	f7f5 fc93 	bl	80801d0 <memchr>
 808a8aa:	2800      	cmp	r0, #0
 808a8ac:	d03f      	beq.n	808a92e <_vfiprintf_r+0x20e>
 808a8ae:	4b26      	ldr	r3, [pc, #152]	; (808a948 <_vfiprintf_r+0x228>)
 808a8b0:	bb1b      	cbnz	r3, 808a8fa <_vfiprintf_r+0x1da>
 808a8b2:	9b03      	ldr	r3, [sp, #12]
 808a8b4:	3307      	adds	r3, #7
 808a8b6:	f023 0307 	bic.w	r3, r3, #7
 808a8ba:	3308      	adds	r3, #8
 808a8bc:	9303      	str	r3, [sp, #12]
 808a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a8c0:	443b      	add	r3, r7
 808a8c2:	9309      	str	r3, [sp, #36]	; 0x24
 808a8c4:	e768      	b.n	808a798 <_vfiprintf_r+0x78>
 808a8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 808a8ca:	460c      	mov	r4, r1
 808a8cc:	2001      	movs	r0, #1
 808a8ce:	e7a6      	b.n	808a81e <_vfiprintf_r+0xfe>
 808a8d0:	2300      	movs	r3, #0
 808a8d2:	3401      	adds	r4, #1
 808a8d4:	9305      	str	r3, [sp, #20]
 808a8d6:	4619      	mov	r1, r3
 808a8d8:	f04f 0c0a 	mov.w	ip, #10
 808a8dc:	4620      	mov	r0, r4
 808a8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 808a8e2:	3a30      	subs	r2, #48	; 0x30
 808a8e4:	2a09      	cmp	r2, #9
 808a8e6:	d903      	bls.n	808a8f0 <_vfiprintf_r+0x1d0>
 808a8e8:	2b00      	cmp	r3, #0
 808a8ea:	d0c6      	beq.n	808a87a <_vfiprintf_r+0x15a>
 808a8ec:	9105      	str	r1, [sp, #20]
 808a8ee:	e7c4      	b.n	808a87a <_vfiprintf_r+0x15a>
 808a8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 808a8f4:	4604      	mov	r4, r0
 808a8f6:	2301      	movs	r3, #1
 808a8f8:	e7f0      	b.n	808a8dc <_vfiprintf_r+0x1bc>
 808a8fa:	ab03      	add	r3, sp, #12
 808a8fc:	9300      	str	r3, [sp, #0]
 808a8fe:	462a      	mov	r2, r5
 808a900:	4b12      	ldr	r3, [pc, #72]	; (808a94c <_vfiprintf_r+0x22c>)
 808a902:	a904      	add	r1, sp, #16
 808a904:	4630      	mov	r0, r6
 808a906:	f7fd fce5 	bl	80882d4 <_printf_float>
 808a90a:	4607      	mov	r7, r0
 808a90c:	1c78      	adds	r0, r7, #1
 808a90e:	d1d6      	bne.n	808a8be <_vfiprintf_r+0x19e>
 808a910:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808a912:	07d9      	lsls	r1, r3, #31
 808a914:	d405      	bmi.n	808a922 <_vfiprintf_r+0x202>
 808a916:	89ab      	ldrh	r3, [r5, #12]
 808a918:	059a      	lsls	r2, r3, #22
 808a91a:	d402      	bmi.n	808a922 <_vfiprintf_r+0x202>
 808a91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808a91e:	f7fe fa59 	bl	8088dd4 <__retarget_lock_release_recursive>
 808a922:	89ab      	ldrh	r3, [r5, #12]
 808a924:	065b      	lsls	r3, r3, #25
 808a926:	f53f af1d 	bmi.w	808a764 <_vfiprintf_r+0x44>
 808a92a:	9809      	ldr	r0, [sp, #36]	; 0x24
 808a92c:	e71c      	b.n	808a768 <_vfiprintf_r+0x48>
 808a92e:	ab03      	add	r3, sp, #12
 808a930:	9300      	str	r3, [sp, #0]
 808a932:	462a      	mov	r2, r5
 808a934:	4b05      	ldr	r3, [pc, #20]	; (808a94c <_vfiprintf_r+0x22c>)
 808a936:	a904      	add	r1, sp, #16
 808a938:	4630      	mov	r0, r6
 808a93a:	f7fd ff6f 	bl	808881c <_printf_i>
 808a93e:	e7e4      	b.n	808a90a <_vfiprintf_r+0x1ea>
 808a940:	0808b87c 	.word	0x0808b87c
 808a944:	0808b886 	.word	0x0808b886
 808a948:	080882d5 	.word	0x080882d5
 808a94c:	0808a6fb 	.word	0x0808a6fb
 808a950:	0808b882 	.word	0x0808b882

0808a954 <__sflush_r>:
 808a954:	898a      	ldrh	r2, [r1, #12]
 808a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a95a:	4605      	mov	r5, r0
 808a95c:	0710      	lsls	r0, r2, #28
 808a95e:	460c      	mov	r4, r1
 808a960:	d458      	bmi.n	808aa14 <__sflush_r+0xc0>
 808a962:	684b      	ldr	r3, [r1, #4]
 808a964:	2b00      	cmp	r3, #0
 808a966:	dc05      	bgt.n	808a974 <__sflush_r+0x20>
 808a968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 808a96a:	2b00      	cmp	r3, #0
 808a96c:	dc02      	bgt.n	808a974 <__sflush_r+0x20>
 808a96e:	2000      	movs	r0, #0
 808a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808a976:	2e00      	cmp	r6, #0
 808a978:	d0f9      	beq.n	808a96e <__sflush_r+0x1a>
 808a97a:	2300      	movs	r3, #0
 808a97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 808a980:	682f      	ldr	r7, [r5, #0]
 808a982:	6a21      	ldr	r1, [r4, #32]
 808a984:	602b      	str	r3, [r5, #0]
 808a986:	d032      	beq.n	808a9ee <__sflush_r+0x9a>
 808a988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 808a98a:	89a3      	ldrh	r3, [r4, #12]
 808a98c:	075a      	lsls	r2, r3, #29
 808a98e:	d505      	bpl.n	808a99c <__sflush_r+0x48>
 808a990:	6863      	ldr	r3, [r4, #4]
 808a992:	1ac0      	subs	r0, r0, r3
 808a994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808a996:	b10b      	cbz	r3, 808a99c <__sflush_r+0x48>
 808a998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808a99a:	1ac0      	subs	r0, r0, r3
 808a99c:	2300      	movs	r3, #0
 808a99e:	4602      	mov	r2, r0
 808a9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808a9a2:	6a21      	ldr	r1, [r4, #32]
 808a9a4:	4628      	mov	r0, r5
 808a9a6:	47b0      	blx	r6
 808a9a8:	1c43      	adds	r3, r0, #1
 808a9aa:	89a3      	ldrh	r3, [r4, #12]
 808a9ac:	d106      	bne.n	808a9bc <__sflush_r+0x68>
 808a9ae:	6829      	ldr	r1, [r5, #0]
 808a9b0:	291d      	cmp	r1, #29
 808a9b2:	d82b      	bhi.n	808aa0c <__sflush_r+0xb8>
 808a9b4:	4a29      	ldr	r2, [pc, #164]	; (808aa5c <__sflush_r+0x108>)
 808a9b6:	410a      	asrs	r2, r1
 808a9b8:	07d6      	lsls	r6, r2, #31
 808a9ba:	d427      	bmi.n	808aa0c <__sflush_r+0xb8>
 808a9bc:	2200      	movs	r2, #0
 808a9be:	6062      	str	r2, [r4, #4]
 808a9c0:	04d9      	lsls	r1, r3, #19
 808a9c2:	6922      	ldr	r2, [r4, #16]
 808a9c4:	6022      	str	r2, [r4, #0]
 808a9c6:	d504      	bpl.n	808a9d2 <__sflush_r+0x7e>
 808a9c8:	1c42      	adds	r2, r0, #1
 808a9ca:	d101      	bne.n	808a9d0 <__sflush_r+0x7c>
 808a9cc:	682b      	ldr	r3, [r5, #0]
 808a9ce:	b903      	cbnz	r3, 808a9d2 <__sflush_r+0x7e>
 808a9d0:	6560      	str	r0, [r4, #84]	; 0x54
 808a9d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808a9d4:	602f      	str	r7, [r5, #0]
 808a9d6:	2900      	cmp	r1, #0
 808a9d8:	d0c9      	beq.n	808a96e <__sflush_r+0x1a>
 808a9da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808a9de:	4299      	cmp	r1, r3
 808a9e0:	d002      	beq.n	808a9e8 <__sflush_r+0x94>
 808a9e2:	4628      	mov	r0, r5
 808a9e4:	f7ff f89e 	bl	8089b24 <_free_r>
 808a9e8:	2000      	movs	r0, #0
 808a9ea:	6360      	str	r0, [r4, #52]	; 0x34
 808a9ec:	e7c0      	b.n	808a970 <__sflush_r+0x1c>
 808a9ee:	2301      	movs	r3, #1
 808a9f0:	4628      	mov	r0, r5
 808a9f2:	47b0      	blx	r6
 808a9f4:	1c41      	adds	r1, r0, #1
 808a9f6:	d1c8      	bne.n	808a98a <__sflush_r+0x36>
 808a9f8:	682b      	ldr	r3, [r5, #0]
 808a9fa:	2b00      	cmp	r3, #0
 808a9fc:	d0c5      	beq.n	808a98a <__sflush_r+0x36>
 808a9fe:	2b1d      	cmp	r3, #29
 808aa00:	d001      	beq.n	808aa06 <__sflush_r+0xb2>
 808aa02:	2b16      	cmp	r3, #22
 808aa04:	d101      	bne.n	808aa0a <__sflush_r+0xb6>
 808aa06:	602f      	str	r7, [r5, #0]
 808aa08:	e7b1      	b.n	808a96e <__sflush_r+0x1a>
 808aa0a:	89a3      	ldrh	r3, [r4, #12]
 808aa0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808aa10:	81a3      	strh	r3, [r4, #12]
 808aa12:	e7ad      	b.n	808a970 <__sflush_r+0x1c>
 808aa14:	690f      	ldr	r7, [r1, #16]
 808aa16:	2f00      	cmp	r7, #0
 808aa18:	d0a9      	beq.n	808a96e <__sflush_r+0x1a>
 808aa1a:	0793      	lsls	r3, r2, #30
 808aa1c:	680e      	ldr	r6, [r1, #0]
 808aa1e:	bf08      	it	eq
 808aa20:	694b      	ldreq	r3, [r1, #20]
 808aa22:	600f      	str	r7, [r1, #0]
 808aa24:	bf18      	it	ne
 808aa26:	2300      	movne	r3, #0
 808aa28:	eba6 0807 	sub.w	r8, r6, r7
 808aa2c:	608b      	str	r3, [r1, #8]
 808aa2e:	f1b8 0f00 	cmp.w	r8, #0
 808aa32:	dd9c      	ble.n	808a96e <__sflush_r+0x1a>
 808aa34:	6a21      	ldr	r1, [r4, #32]
 808aa36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 808aa38:	4643      	mov	r3, r8
 808aa3a:	463a      	mov	r2, r7
 808aa3c:	4628      	mov	r0, r5
 808aa3e:	47b0      	blx	r6
 808aa40:	2800      	cmp	r0, #0
 808aa42:	dc06      	bgt.n	808aa52 <__sflush_r+0xfe>
 808aa44:	89a3      	ldrh	r3, [r4, #12]
 808aa46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808aa4a:	81a3      	strh	r3, [r4, #12]
 808aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 808aa50:	e78e      	b.n	808a970 <__sflush_r+0x1c>
 808aa52:	4407      	add	r7, r0
 808aa54:	eba8 0800 	sub.w	r8, r8, r0
 808aa58:	e7e9      	b.n	808aa2e <__sflush_r+0xda>
 808aa5a:	bf00      	nop
 808aa5c:	dfbffffe 	.word	0xdfbffffe

0808aa60 <_fflush_r>:
 808aa60:	b538      	push	{r3, r4, r5, lr}
 808aa62:	690b      	ldr	r3, [r1, #16]
 808aa64:	4605      	mov	r5, r0
 808aa66:	460c      	mov	r4, r1
 808aa68:	b913      	cbnz	r3, 808aa70 <_fflush_r+0x10>
 808aa6a:	2500      	movs	r5, #0
 808aa6c:	4628      	mov	r0, r5
 808aa6e:	bd38      	pop	{r3, r4, r5, pc}
 808aa70:	b118      	cbz	r0, 808aa7a <_fflush_r+0x1a>
 808aa72:	6a03      	ldr	r3, [r0, #32]
 808aa74:	b90b      	cbnz	r3, 808aa7a <_fflush_r+0x1a>
 808aa76:	f7fe f87f 	bl	8088b78 <__sinit>
 808aa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808aa7e:	2b00      	cmp	r3, #0
 808aa80:	d0f3      	beq.n	808aa6a <_fflush_r+0xa>
 808aa82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808aa84:	07d0      	lsls	r0, r2, #31
 808aa86:	d404      	bmi.n	808aa92 <_fflush_r+0x32>
 808aa88:	0599      	lsls	r1, r3, #22
 808aa8a:	d402      	bmi.n	808aa92 <_fflush_r+0x32>
 808aa8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808aa8e:	f7fe f9a0 	bl	8088dd2 <__retarget_lock_acquire_recursive>
 808aa92:	4628      	mov	r0, r5
 808aa94:	4621      	mov	r1, r4
 808aa96:	f7ff ff5d 	bl	808a954 <__sflush_r>
 808aa9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808aa9c:	07da      	lsls	r2, r3, #31
 808aa9e:	4605      	mov	r5, r0
 808aaa0:	d4e4      	bmi.n	808aa6c <_fflush_r+0xc>
 808aaa2:	89a3      	ldrh	r3, [r4, #12]
 808aaa4:	059b      	lsls	r3, r3, #22
 808aaa6:	d4e1      	bmi.n	808aa6c <_fflush_r+0xc>
 808aaa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808aaaa:	f7fe f993 	bl	8088dd4 <__retarget_lock_release_recursive>
 808aaae:	e7dd      	b.n	808aa6c <_fflush_r+0xc>

0808aab0 <fiprintf>:
 808aab0:	b40e      	push	{r1, r2, r3}
 808aab2:	b503      	push	{r0, r1, lr}
 808aab4:	4601      	mov	r1, r0
 808aab6:	ab03      	add	r3, sp, #12
 808aab8:	4805      	ldr	r0, [pc, #20]	; (808aad0 <fiprintf+0x20>)
 808aaba:	f853 2b04 	ldr.w	r2, [r3], #4
 808aabe:	6800      	ldr	r0, [r0, #0]
 808aac0:	9301      	str	r3, [sp, #4]
 808aac2:	f7ff fe2d 	bl	808a720 <_vfiprintf_r>
 808aac6:	b002      	add	sp, #8
 808aac8:	f85d eb04 	ldr.w	lr, [sp], #4
 808aacc:	b003      	add	sp, #12
 808aace:	4770      	bx	lr
 808aad0:	200000e4 	.word	0x200000e4

0808aad4 <__swbuf_r>:
 808aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808aad6:	460e      	mov	r6, r1
 808aad8:	4614      	mov	r4, r2
 808aada:	4605      	mov	r5, r0
 808aadc:	b118      	cbz	r0, 808aae6 <__swbuf_r+0x12>
 808aade:	6a03      	ldr	r3, [r0, #32]
 808aae0:	b90b      	cbnz	r3, 808aae6 <__swbuf_r+0x12>
 808aae2:	f7fe f849 	bl	8088b78 <__sinit>
 808aae6:	69a3      	ldr	r3, [r4, #24]
 808aae8:	60a3      	str	r3, [r4, #8]
 808aaea:	89a3      	ldrh	r3, [r4, #12]
 808aaec:	071a      	lsls	r2, r3, #28
 808aaee:	d525      	bpl.n	808ab3c <__swbuf_r+0x68>
 808aaf0:	6923      	ldr	r3, [r4, #16]
 808aaf2:	b31b      	cbz	r3, 808ab3c <__swbuf_r+0x68>
 808aaf4:	6823      	ldr	r3, [r4, #0]
 808aaf6:	6922      	ldr	r2, [r4, #16]
 808aaf8:	1a98      	subs	r0, r3, r2
 808aafa:	6963      	ldr	r3, [r4, #20]
 808aafc:	b2f6      	uxtb	r6, r6
 808aafe:	4283      	cmp	r3, r0
 808ab00:	4637      	mov	r7, r6
 808ab02:	dc04      	bgt.n	808ab0e <__swbuf_r+0x3a>
 808ab04:	4621      	mov	r1, r4
 808ab06:	4628      	mov	r0, r5
 808ab08:	f7ff ffaa 	bl	808aa60 <_fflush_r>
 808ab0c:	b9e0      	cbnz	r0, 808ab48 <__swbuf_r+0x74>
 808ab0e:	68a3      	ldr	r3, [r4, #8]
 808ab10:	3b01      	subs	r3, #1
 808ab12:	60a3      	str	r3, [r4, #8]
 808ab14:	6823      	ldr	r3, [r4, #0]
 808ab16:	1c5a      	adds	r2, r3, #1
 808ab18:	6022      	str	r2, [r4, #0]
 808ab1a:	701e      	strb	r6, [r3, #0]
 808ab1c:	6962      	ldr	r2, [r4, #20]
 808ab1e:	1c43      	adds	r3, r0, #1
 808ab20:	429a      	cmp	r2, r3
 808ab22:	d004      	beq.n	808ab2e <__swbuf_r+0x5a>
 808ab24:	89a3      	ldrh	r3, [r4, #12]
 808ab26:	07db      	lsls	r3, r3, #31
 808ab28:	d506      	bpl.n	808ab38 <__swbuf_r+0x64>
 808ab2a:	2e0a      	cmp	r6, #10
 808ab2c:	d104      	bne.n	808ab38 <__swbuf_r+0x64>
 808ab2e:	4621      	mov	r1, r4
 808ab30:	4628      	mov	r0, r5
 808ab32:	f7ff ff95 	bl	808aa60 <_fflush_r>
 808ab36:	b938      	cbnz	r0, 808ab48 <__swbuf_r+0x74>
 808ab38:	4638      	mov	r0, r7
 808ab3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808ab3c:	4621      	mov	r1, r4
 808ab3e:	4628      	mov	r0, r5
 808ab40:	f000 f806 	bl	808ab50 <__swsetup_r>
 808ab44:	2800      	cmp	r0, #0
 808ab46:	d0d5      	beq.n	808aaf4 <__swbuf_r+0x20>
 808ab48:	f04f 37ff 	mov.w	r7, #4294967295
 808ab4c:	e7f4      	b.n	808ab38 <__swbuf_r+0x64>
	...

0808ab50 <__swsetup_r>:
 808ab50:	b538      	push	{r3, r4, r5, lr}
 808ab52:	4b2a      	ldr	r3, [pc, #168]	; (808abfc <__swsetup_r+0xac>)
 808ab54:	4605      	mov	r5, r0
 808ab56:	6818      	ldr	r0, [r3, #0]
 808ab58:	460c      	mov	r4, r1
 808ab5a:	b118      	cbz	r0, 808ab64 <__swsetup_r+0x14>
 808ab5c:	6a03      	ldr	r3, [r0, #32]
 808ab5e:	b90b      	cbnz	r3, 808ab64 <__swsetup_r+0x14>
 808ab60:	f7fe f80a 	bl	8088b78 <__sinit>
 808ab64:	89a3      	ldrh	r3, [r4, #12]
 808ab66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808ab6a:	0718      	lsls	r0, r3, #28
 808ab6c:	d422      	bmi.n	808abb4 <__swsetup_r+0x64>
 808ab6e:	06d9      	lsls	r1, r3, #27
 808ab70:	d407      	bmi.n	808ab82 <__swsetup_r+0x32>
 808ab72:	2309      	movs	r3, #9
 808ab74:	602b      	str	r3, [r5, #0]
 808ab76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 808ab7a:	81a3      	strh	r3, [r4, #12]
 808ab7c:	f04f 30ff 	mov.w	r0, #4294967295
 808ab80:	e034      	b.n	808abec <__swsetup_r+0x9c>
 808ab82:	0758      	lsls	r0, r3, #29
 808ab84:	d512      	bpl.n	808abac <__swsetup_r+0x5c>
 808ab86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808ab88:	b141      	cbz	r1, 808ab9c <__swsetup_r+0x4c>
 808ab8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808ab8e:	4299      	cmp	r1, r3
 808ab90:	d002      	beq.n	808ab98 <__swsetup_r+0x48>
 808ab92:	4628      	mov	r0, r5
 808ab94:	f7fe ffc6 	bl	8089b24 <_free_r>
 808ab98:	2300      	movs	r3, #0
 808ab9a:	6363      	str	r3, [r4, #52]	; 0x34
 808ab9c:	89a3      	ldrh	r3, [r4, #12]
 808ab9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 808aba2:	81a3      	strh	r3, [r4, #12]
 808aba4:	2300      	movs	r3, #0
 808aba6:	6063      	str	r3, [r4, #4]
 808aba8:	6923      	ldr	r3, [r4, #16]
 808abaa:	6023      	str	r3, [r4, #0]
 808abac:	89a3      	ldrh	r3, [r4, #12]
 808abae:	f043 0308 	orr.w	r3, r3, #8
 808abb2:	81a3      	strh	r3, [r4, #12]
 808abb4:	6923      	ldr	r3, [r4, #16]
 808abb6:	b94b      	cbnz	r3, 808abcc <__swsetup_r+0x7c>
 808abb8:	89a3      	ldrh	r3, [r4, #12]
 808abba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 808abbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808abc2:	d003      	beq.n	808abcc <__swsetup_r+0x7c>
 808abc4:	4621      	mov	r1, r4
 808abc6:	4628      	mov	r0, r5
 808abc8:	f000 f8d5 	bl	808ad76 <__smakebuf_r>
 808abcc:	89a0      	ldrh	r0, [r4, #12]
 808abce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808abd2:	f010 0301 	ands.w	r3, r0, #1
 808abd6:	d00a      	beq.n	808abee <__swsetup_r+0x9e>
 808abd8:	2300      	movs	r3, #0
 808abda:	60a3      	str	r3, [r4, #8]
 808abdc:	6963      	ldr	r3, [r4, #20]
 808abde:	425b      	negs	r3, r3
 808abe0:	61a3      	str	r3, [r4, #24]
 808abe2:	6923      	ldr	r3, [r4, #16]
 808abe4:	b943      	cbnz	r3, 808abf8 <__swsetup_r+0xa8>
 808abe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 808abea:	d1c4      	bne.n	808ab76 <__swsetup_r+0x26>
 808abec:	bd38      	pop	{r3, r4, r5, pc}
 808abee:	0781      	lsls	r1, r0, #30
 808abf0:	bf58      	it	pl
 808abf2:	6963      	ldrpl	r3, [r4, #20]
 808abf4:	60a3      	str	r3, [r4, #8]
 808abf6:	e7f4      	b.n	808abe2 <__swsetup_r+0x92>
 808abf8:	2000      	movs	r0, #0
 808abfa:	e7f7      	b.n	808abec <__swsetup_r+0x9c>
 808abfc:	200000e4 	.word	0x200000e4

0808ac00 <memmove>:
 808ac00:	4288      	cmp	r0, r1
 808ac02:	b510      	push	{r4, lr}
 808ac04:	eb01 0402 	add.w	r4, r1, r2
 808ac08:	d902      	bls.n	808ac10 <memmove+0x10>
 808ac0a:	4284      	cmp	r4, r0
 808ac0c:	4623      	mov	r3, r4
 808ac0e:	d807      	bhi.n	808ac20 <memmove+0x20>
 808ac10:	1e43      	subs	r3, r0, #1
 808ac12:	42a1      	cmp	r1, r4
 808ac14:	d008      	beq.n	808ac28 <memmove+0x28>
 808ac16:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ac1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 808ac1e:	e7f8      	b.n	808ac12 <memmove+0x12>
 808ac20:	4402      	add	r2, r0
 808ac22:	4601      	mov	r1, r0
 808ac24:	428a      	cmp	r2, r1
 808ac26:	d100      	bne.n	808ac2a <memmove+0x2a>
 808ac28:	bd10      	pop	{r4, pc}
 808ac2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808ac2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808ac32:	e7f7      	b.n	808ac24 <memmove+0x24>

0808ac34 <_sbrk_r>:
 808ac34:	b538      	push	{r3, r4, r5, lr}
 808ac36:	4d06      	ldr	r5, [pc, #24]	; (808ac50 <_sbrk_r+0x1c>)
 808ac38:	2300      	movs	r3, #0
 808ac3a:	4604      	mov	r4, r0
 808ac3c:	4608      	mov	r0, r1
 808ac3e:	602b      	str	r3, [r5, #0]
 808ac40:	f7f7 fb5a 	bl	80822f8 <_sbrk>
 808ac44:	1c43      	adds	r3, r0, #1
 808ac46:	d102      	bne.n	808ac4e <_sbrk_r+0x1a>
 808ac48:	682b      	ldr	r3, [r5, #0]
 808ac4a:	b103      	cbz	r3, 808ac4e <_sbrk_r+0x1a>
 808ac4c:	6023      	str	r3, [r4, #0]
 808ac4e:	bd38      	pop	{r3, r4, r5, pc}
 808ac50:	20000bb8 	.word	0x20000bb8

0808ac54 <abort>:
 808ac54:	b508      	push	{r3, lr}
 808ac56:	2006      	movs	r0, #6
 808ac58:	f000 f8f2 	bl	808ae40 <raise>
 808ac5c:	2001      	movs	r0, #1
 808ac5e:	f7f7 fad3 	bl	8082208 <_exit>

0808ac62 <_calloc_r>:
 808ac62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ac64:	fba1 2402 	umull	r2, r4, r1, r2
 808ac68:	b94c      	cbnz	r4, 808ac7e <_calloc_r+0x1c>
 808ac6a:	4611      	mov	r1, r2
 808ac6c:	9201      	str	r2, [sp, #4]
 808ac6e:	f7fe ffcd 	bl	8089c0c <_malloc_r>
 808ac72:	9a01      	ldr	r2, [sp, #4]
 808ac74:	4605      	mov	r5, r0
 808ac76:	b930      	cbnz	r0, 808ac86 <_calloc_r+0x24>
 808ac78:	4628      	mov	r0, r5
 808ac7a:	b003      	add	sp, #12
 808ac7c:	bd30      	pop	{r4, r5, pc}
 808ac7e:	220c      	movs	r2, #12
 808ac80:	6002      	str	r2, [r0, #0]
 808ac82:	2500      	movs	r5, #0
 808ac84:	e7f8      	b.n	808ac78 <_calloc_r+0x16>
 808ac86:	4621      	mov	r1, r4
 808ac88:	f7fe f80f 	bl	8088caa <memset>
 808ac8c:	e7f4      	b.n	808ac78 <_calloc_r+0x16>

0808ac8e <__ascii_mbtowc>:
 808ac8e:	b082      	sub	sp, #8
 808ac90:	b901      	cbnz	r1, 808ac94 <__ascii_mbtowc+0x6>
 808ac92:	a901      	add	r1, sp, #4
 808ac94:	b142      	cbz	r2, 808aca8 <__ascii_mbtowc+0x1a>
 808ac96:	b14b      	cbz	r3, 808acac <__ascii_mbtowc+0x1e>
 808ac98:	7813      	ldrb	r3, [r2, #0]
 808ac9a:	600b      	str	r3, [r1, #0]
 808ac9c:	7812      	ldrb	r2, [r2, #0]
 808ac9e:	1e10      	subs	r0, r2, #0
 808aca0:	bf18      	it	ne
 808aca2:	2001      	movne	r0, #1
 808aca4:	b002      	add	sp, #8
 808aca6:	4770      	bx	lr
 808aca8:	4610      	mov	r0, r2
 808acaa:	e7fb      	b.n	808aca4 <__ascii_mbtowc+0x16>
 808acac:	f06f 0001 	mvn.w	r0, #1
 808acb0:	e7f8      	b.n	808aca4 <__ascii_mbtowc+0x16>

0808acb2 <_realloc_r>:
 808acb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808acb6:	4680      	mov	r8, r0
 808acb8:	4614      	mov	r4, r2
 808acba:	460e      	mov	r6, r1
 808acbc:	b921      	cbnz	r1, 808acc8 <_realloc_r+0x16>
 808acbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808acc2:	4611      	mov	r1, r2
 808acc4:	f7fe bfa2 	b.w	8089c0c <_malloc_r>
 808acc8:	b92a      	cbnz	r2, 808acd6 <_realloc_r+0x24>
 808acca:	f7fe ff2b 	bl	8089b24 <_free_r>
 808acce:	4625      	mov	r5, r4
 808acd0:	4628      	mov	r0, r5
 808acd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808acd6:	f000 f8f1 	bl	808aebc <_malloc_usable_size_r>
 808acda:	4284      	cmp	r4, r0
 808acdc:	4607      	mov	r7, r0
 808acde:	d802      	bhi.n	808ace6 <_realloc_r+0x34>
 808ace0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 808ace4:	d812      	bhi.n	808ad0c <_realloc_r+0x5a>
 808ace6:	4621      	mov	r1, r4
 808ace8:	4640      	mov	r0, r8
 808acea:	f7fe ff8f 	bl	8089c0c <_malloc_r>
 808acee:	4605      	mov	r5, r0
 808acf0:	2800      	cmp	r0, #0
 808acf2:	d0ed      	beq.n	808acd0 <_realloc_r+0x1e>
 808acf4:	42bc      	cmp	r4, r7
 808acf6:	4622      	mov	r2, r4
 808acf8:	4631      	mov	r1, r6
 808acfa:	bf28      	it	cs
 808acfc:	463a      	movcs	r2, r7
 808acfe:	f7fe f86a 	bl	8088dd6 <memcpy>
 808ad02:	4631      	mov	r1, r6
 808ad04:	4640      	mov	r0, r8
 808ad06:	f7fe ff0d 	bl	8089b24 <_free_r>
 808ad0a:	e7e1      	b.n	808acd0 <_realloc_r+0x1e>
 808ad0c:	4635      	mov	r5, r6
 808ad0e:	e7df      	b.n	808acd0 <_realloc_r+0x1e>

0808ad10 <__ascii_wctomb>:
 808ad10:	b149      	cbz	r1, 808ad26 <__ascii_wctomb+0x16>
 808ad12:	2aff      	cmp	r2, #255	; 0xff
 808ad14:	bf85      	ittet	hi
 808ad16:	238a      	movhi	r3, #138	; 0x8a
 808ad18:	6003      	strhi	r3, [r0, #0]
 808ad1a:	700a      	strbls	r2, [r1, #0]
 808ad1c:	f04f 30ff 	movhi.w	r0, #4294967295
 808ad20:	bf98      	it	ls
 808ad22:	2001      	movls	r0, #1
 808ad24:	4770      	bx	lr
 808ad26:	4608      	mov	r0, r1
 808ad28:	4770      	bx	lr

0808ad2a <__swhatbuf_r>:
 808ad2a:	b570      	push	{r4, r5, r6, lr}
 808ad2c:	460c      	mov	r4, r1
 808ad2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808ad32:	2900      	cmp	r1, #0
 808ad34:	b096      	sub	sp, #88	; 0x58
 808ad36:	4615      	mov	r5, r2
 808ad38:	461e      	mov	r6, r3
 808ad3a:	da0d      	bge.n	808ad58 <__swhatbuf_r+0x2e>
 808ad3c:	89a3      	ldrh	r3, [r4, #12]
 808ad3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 808ad42:	f04f 0100 	mov.w	r1, #0
 808ad46:	bf0c      	ite	eq
 808ad48:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 808ad4c:	2340      	movne	r3, #64	; 0x40
 808ad4e:	2000      	movs	r0, #0
 808ad50:	6031      	str	r1, [r6, #0]
 808ad52:	602b      	str	r3, [r5, #0]
 808ad54:	b016      	add	sp, #88	; 0x58
 808ad56:	bd70      	pop	{r4, r5, r6, pc}
 808ad58:	466a      	mov	r2, sp
 808ad5a:	f000 f879 	bl	808ae50 <_fstat_r>
 808ad5e:	2800      	cmp	r0, #0
 808ad60:	dbec      	blt.n	808ad3c <__swhatbuf_r+0x12>
 808ad62:	9901      	ldr	r1, [sp, #4]
 808ad64:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 808ad68:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 808ad6c:	4259      	negs	r1, r3
 808ad6e:	4159      	adcs	r1, r3
 808ad70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808ad74:	e7eb      	b.n	808ad4e <__swhatbuf_r+0x24>

0808ad76 <__smakebuf_r>:
 808ad76:	898b      	ldrh	r3, [r1, #12]
 808ad78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808ad7a:	079d      	lsls	r5, r3, #30
 808ad7c:	4606      	mov	r6, r0
 808ad7e:	460c      	mov	r4, r1
 808ad80:	d507      	bpl.n	808ad92 <__smakebuf_r+0x1c>
 808ad82:	f104 0347 	add.w	r3, r4, #71	; 0x47
 808ad86:	6023      	str	r3, [r4, #0]
 808ad88:	6123      	str	r3, [r4, #16]
 808ad8a:	2301      	movs	r3, #1
 808ad8c:	6163      	str	r3, [r4, #20]
 808ad8e:	b002      	add	sp, #8
 808ad90:	bd70      	pop	{r4, r5, r6, pc}
 808ad92:	ab01      	add	r3, sp, #4
 808ad94:	466a      	mov	r2, sp
 808ad96:	f7ff ffc8 	bl	808ad2a <__swhatbuf_r>
 808ad9a:	9900      	ldr	r1, [sp, #0]
 808ad9c:	4605      	mov	r5, r0
 808ad9e:	4630      	mov	r0, r6
 808ada0:	f7fe ff34 	bl	8089c0c <_malloc_r>
 808ada4:	b948      	cbnz	r0, 808adba <__smakebuf_r+0x44>
 808ada6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808adaa:	059a      	lsls	r2, r3, #22
 808adac:	d4ef      	bmi.n	808ad8e <__smakebuf_r+0x18>
 808adae:	f023 0303 	bic.w	r3, r3, #3
 808adb2:	f043 0302 	orr.w	r3, r3, #2
 808adb6:	81a3      	strh	r3, [r4, #12]
 808adb8:	e7e3      	b.n	808ad82 <__smakebuf_r+0xc>
 808adba:	89a3      	ldrh	r3, [r4, #12]
 808adbc:	6020      	str	r0, [r4, #0]
 808adbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808adc2:	81a3      	strh	r3, [r4, #12]
 808adc4:	9b00      	ldr	r3, [sp, #0]
 808adc6:	6163      	str	r3, [r4, #20]
 808adc8:	9b01      	ldr	r3, [sp, #4]
 808adca:	6120      	str	r0, [r4, #16]
 808adcc:	b15b      	cbz	r3, 808ade6 <__smakebuf_r+0x70>
 808adce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 808add2:	4630      	mov	r0, r6
 808add4:	f000 f84e 	bl	808ae74 <_isatty_r>
 808add8:	b128      	cbz	r0, 808ade6 <__smakebuf_r+0x70>
 808adda:	89a3      	ldrh	r3, [r4, #12]
 808addc:	f023 0303 	bic.w	r3, r3, #3
 808ade0:	f043 0301 	orr.w	r3, r3, #1
 808ade4:	81a3      	strh	r3, [r4, #12]
 808ade6:	89a3      	ldrh	r3, [r4, #12]
 808ade8:	431d      	orrs	r5, r3
 808adea:	81a5      	strh	r5, [r4, #12]
 808adec:	e7cf      	b.n	808ad8e <__smakebuf_r+0x18>

0808adee <_raise_r>:
 808adee:	291f      	cmp	r1, #31
 808adf0:	b538      	push	{r3, r4, r5, lr}
 808adf2:	4604      	mov	r4, r0
 808adf4:	460d      	mov	r5, r1
 808adf6:	d904      	bls.n	808ae02 <_raise_r+0x14>
 808adf8:	2316      	movs	r3, #22
 808adfa:	6003      	str	r3, [r0, #0]
 808adfc:	f04f 30ff 	mov.w	r0, #4294967295
 808ae00:	bd38      	pop	{r3, r4, r5, pc}
 808ae02:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 808ae04:	b112      	cbz	r2, 808ae0c <_raise_r+0x1e>
 808ae06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808ae0a:	b94b      	cbnz	r3, 808ae20 <_raise_r+0x32>
 808ae0c:	4620      	mov	r0, r4
 808ae0e:	f000 f853 	bl	808aeb8 <_getpid_r>
 808ae12:	462a      	mov	r2, r5
 808ae14:	4601      	mov	r1, r0
 808ae16:	4620      	mov	r0, r4
 808ae18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808ae1c:	f000 b83a 	b.w	808ae94 <_kill_r>
 808ae20:	2b01      	cmp	r3, #1
 808ae22:	d00a      	beq.n	808ae3a <_raise_r+0x4c>
 808ae24:	1c59      	adds	r1, r3, #1
 808ae26:	d103      	bne.n	808ae30 <_raise_r+0x42>
 808ae28:	2316      	movs	r3, #22
 808ae2a:	6003      	str	r3, [r0, #0]
 808ae2c:	2001      	movs	r0, #1
 808ae2e:	e7e7      	b.n	808ae00 <_raise_r+0x12>
 808ae30:	2400      	movs	r4, #0
 808ae32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 808ae36:	4628      	mov	r0, r5
 808ae38:	4798      	blx	r3
 808ae3a:	2000      	movs	r0, #0
 808ae3c:	e7e0      	b.n	808ae00 <_raise_r+0x12>
	...

0808ae40 <raise>:
 808ae40:	4b02      	ldr	r3, [pc, #8]	; (808ae4c <raise+0xc>)
 808ae42:	4601      	mov	r1, r0
 808ae44:	6818      	ldr	r0, [r3, #0]
 808ae46:	f7ff bfd2 	b.w	808adee <_raise_r>
 808ae4a:	bf00      	nop
 808ae4c:	200000e4 	.word	0x200000e4

0808ae50 <_fstat_r>:
 808ae50:	b538      	push	{r3, r4, r5, lr}
 808ae52:	4d07      	ldr	r5, [pc, #28]	; (808ae70 <_fstat_r+0x20>)
 808ae54:	2300      	movs	r3, #0
 808ae56:	4604      	mov	r4, r0
 808ae58:	4608      	mov	r0, r1
 808ae5a:	4611      	mov	r1, r2
 808ae5c:	602b      	str	r3, [r5, #0]
 808ae5e:	f7f7 fa22 	bl	80822a6 <_fstat>
 808ae62:	1c43      	adds	r3, r0, #1
 808ae64:	d102      	bne.n	808ae6c <_fstat_r+0x1c>
 808ae66:	682b      	ldr	r3, [r5, #0]
 808ae68:	b103      	cbz	r3, 808ae6c <_fstat_r+0x1c>
 808ae6a:	6023      	str	r3, [r4, #0]
 808ae6c:	bd38      	pop	{r3, r4, r5, pc}
 808ae6e:	bf00      	nop
 808ae70:	20000bb8 	.word	0x20000bb8

0808ae74 <_isatty_r>:
 808ae74:	b538      	push	{r3, r4, r5, lr}
 808ae76:	4d06      	ldr	r5, [pc, #24]	; (808ae90 <_isatty_r+0x1c>)
 808ae78:	2300      	movs	r3, #0
 808ae7a:	4604      	mov	r4, r0
 808ae7c:	4608      	mov	r0, r1
 808ae7e:	602b      	str	r3, [r5, #0]
 808ae80:	f7f7 fa21 	bl	80822c6 <_isatty>
 808ae84:	1c43      	adds	r3, r0, #1
 808ae86:	d102      	bne.n	808ae8e <_isatty_r+0x1a>
 808ae88:	682b      	ldr	r3, [r5, #0]
 808ae8a:	b103      	cbz	r3, 808ae8e <_isatty_r+0x1a>
 808ae8c:	6023      	str	r3, [r4, #0]
 808ae8e:	bd38      	pop	{r3, r4, r5, pc}
 808ae90:	20000bb8 	.word	0x20000bb8

0808ae94 <_kill_r>:
 808ae94:	b538      	push	{r3, r4, r5, lr}
 808ae96:	4d07      	ldr	r5, [pc, #28]	; (808aeb4 <_kill_r+0x20>)
 808ae98:	2300      	movs	r3, #0
 808ae9a:	4604      	mov	r4, r0
 808ae9c:	4608      	mov	r0, r1
 808ae9e:	4611      	mov	r1, r2
 808aea0:	602b      	str	r3, [r5, #0]
 808aea2:	f7f7 f9a1 	bl	80821e8 <_kill>
 808aea6:	1c43      	adds	r3, r0, #1
 808aea8:	d102      	bne.n	808aeb0 <_kill_r+0x1c>
 808aeaa:	682b      	ldr	r3, [r5, #0]
 808aeac:	b103      	cbz	r3, 808aeb0 <_kill_r+0x1c>
 808aeae:	6023      	str	r3, [r4, #0]
 808aeb0:	bd38      	pop	{r3, r4, r5, pc}
 808aeb2:	bf00      	nop
 808aeb4:	20000bb8 	.word	0x20000bb8

0808aeb8 <_getpid_r>:
 808aeb8:	f7f7 b98e 	b.w	80821d8 <_getpid>

0808aebc <_malloc_usable_size_r>:
 808aebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808aec0:	1f18      	subs	r0, r3, #4
 808aec2:	2b00      	cmp	r3, #0
 808aec4:	bfbc      	itt	lt
 808aec6:	580b      	ldrlt	r3, [r1, r0]
 808aec8:	18c0      	addlt	r0, r0, r3
 808aeca:	4770      	bx	lr

0808aecc <_init>:
 808aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808aece:	bf00      	nop
 808aed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808aed2:	bc08      	pop	{r3}
 808aed4:	469e      	mov	lr, r3
 808aed6:	4770      	bx	lr

0808aed8 <_fini>:
 808aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808aeda:	bf00      	nop
 808aedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808aede:	bc08      	pop	{r3}
 808aee0:	469e      	mov	lr, r3
 808aee2:	4770      	bx	lr
