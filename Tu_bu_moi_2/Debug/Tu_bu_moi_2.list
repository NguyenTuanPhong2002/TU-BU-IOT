
Tu_bu_moi_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08080000  08080000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6d8  08080190  08080190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0808c868  0808c868  0001c868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808d350  0808d350  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0808d350  0808d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808d358  0808d358  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808d358  0808d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808d35c  0808d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0808d360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020260  2**0
                  CONTENTS
 10 .bss          00000bd8  20000260  20000260  00020260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000e38  20000e38  00020260  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001551b  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003794  00000000  00000000  000357ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00038f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  0003a0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c7f  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016322  00000000  00000000  0005fd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ac4  00000000  00000000  00076099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147b5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a18  00000000  00000000  00147bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08080190 <__do_global_dtors_aux>:
 8080190:	b510      	push	{r4, lr}
 8080192:	4c05      	ldr	r4, [pc, #20]	; (80801a8 <__do_global_dtors_aux+0x18>)
 8080194:	7823      	ldrb	r3, [r4, #0]
 8080196:	b933      	cbnz	r3, 80801a6 <__do_global_dtors_aux+0x16>
 8080198:	4b04      	ldr	r3, [pc, #16]	; (80801ac <__do_global_dtors_aux+0x1c>)
 808019a:	b113      	cbz	r3, 80801a2 <__do_global_dtors_aux+0x12>
 808019c:	4804      	ldr	r0, [pc, #16]	; (80801b0 <__do_global_dtors_aux+0x20>)
 808019e:	f3af 8000 	nop.w
 80801a2:	2301      	movs	r3, #1
 80801a4:	7023      	strb	r3, [r4, #0]
 80801a6:	bd10      	pop	{r4, pc}
 80801a8:	20000260 	.word	0x20000260
 80801ac:	00000000 	.word	0x00000000
 80801b0:	0808c850 	.word	0x0808c850

080801b4 <frame_dummy>:
 80801b4:	b508      	push	{r3, lr}
 80801b6:	4b03      	ldr	r3, [pc, #12]	; (80801c4 <frame_dummy+0x10>)
 80801b8:	b11b      	cbz	r3, 80801c2 <frame_dummy+0xe>
 80801ba:	4903      	ldr	r1, [pc, #12]	; (80801c8 <frame_dummy+0x14>)
 80801bc:	4803      	ldr	r0, [pc, #12]	; (80801cc <frame_dummy+0x18>)
 80801be:	f3af 8000 	nop.w
 80801c2:	bd08      	pop	{r3, pc}
 80801c4:	00000000 	.word	0x00000000
 80801c8:	20000264 	.word	0x20000264
 80801cc:	0808c850 	.word	0x0808c850

080801d0 <strlen>:
 80801d0:	4603      	mov	r3, r0
 80801d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80801d6:	2a00      	cmp	r2, #0
 80801d8:	d1fb      	bne.n	80801d2 <strlen+0x2>
 80801da:	1a18      	subs	r0, r3, r0
 80801dc:	3801      	subs	r0, #1
 80801de:	4770      	bx	lr

080801e0 <memchr>:
 80801e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80801e4:	2a10      	cmp	r2, #16
 80801e6:	db2b      	blt.n	8080240 <memchr+0x60>
 80801e8:	f010 0f07 	tst.w	r0, #7
 80801ec:	d008      	beq.n	8080200 <memchr+0x20>
 80801ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80801f2:	3a01      	subs	r2, #1
 80801f4:	428b      	cmp	r3, r1
 80801f6:	d02d      	beq.n	8080254 <memchr+0x74>
 80801f8:	f010 0f07 	tst.w	r0, #7
 80801fc:	b342      	cbz	r2, 8080250 <memchr+0x70>
 80801fe:	d1f6      	bne.n	80801ee <memchr+0xe>
 8080200:	b4f0      	push	{r4, r5, r6, r7}
 8080202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8080206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 808020a:	f022 0407 	bic.w	r4, r2, #7
 808020e:	f07f 0700 	mvns.w	r7, #0
 8080212:	2300      	movs	r3, #0
 8080214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8080218:	3c08      	subs	r4, #8
 808021a:	ea85 0501 	eor.w	r5, r5, r1
 808021e:	ea86 0601 	eor.w	r6, r6, r1
 8080222:	fa85 f547 	uadd8	r5, r5, r7
 8080226:	faa3 f587 	sel	r5, r3, r7
 808022a:	fa86 f647 	uadd8	r6, r6, r7
 808022e:	faa5 f687 	sel	r6, r5, r7
 8080232:	b98e      	cbnz	r6, 8080258 <memchr+0x78>
 8080234:	d1ee      	bne.n	8080214 <memchr+0x34>
 8080236:	bcf0      	pop	{r4, r5, r6, r7}
 8080238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 808023c:	f002 0207 	and.w	r2, r2, #7
 8080240:	b132      	cbz	r2, 8080250 <memchr+0x70>
 8080242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8080246:	3a01      	subs	r2, #1
 8080248:	ea83 0301 	eor.w	r3, r3, r1
 808024c:	b113      	cbz	r3, 8080254 <memchr+0x74>
 808024e:	d1f8      	bne.n	8080242 <memchr+0x62>
 8080250:	2000      	movs	r0, #0
 8080252:	4770      	bx	lr
 8080254:	3801      	subs	r0, #1
 8080256:	4770      	bx	lr
 8080258:	2d00      	cmp	r5, #0
 808025a:	bf06      	itte	eq
 808025c:	4635      	moveq	r5, r6
 808025e:	3803      	subeq	r0, #3
 8080260:	3807      	subne	r0, #7
 8080262:	f015 0f01 	tst.w	r5, #1
 8080266:	d107      	bne.n	8080278 <memchr+0x98>
 8080268:	3001      	adds	r0, #1
 808026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 808026e:	bf02      	ittt	eq
 8080270:	3001      	addeq	r0, #1
 8080272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8080276:	3001      	addeq	r0, #1
 8080278:	bcf0      	pop	{r4, r5, r6, r7}
 808027a:	3801      	subs	r0, #1
 808027c:	4770      	bx	lr
 808027e:	bf00      	nop

08080280 <__aeabi_drsub>:
 8080280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8080284:	e002      	b.n	808028c <__adddf3>
 8080286:	bf00      	nop

08080288 <__aeabi_dsub>:
 8080288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808028c <__adddf3>:
 808028c:	b530      	push	{r4, r5, lr}
 808028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8080292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8080296:	ea94 0f05 	teq	r4, r5
 808029a:	bf08      	it	eq
 808029c:	ea90 0f02 	teqeq	r0, r2
 80802a0:	bf1f      	itttt	ne
 80802a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80802a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80802aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80802ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80802b2:	f000 80e2 	beq.w	808047a <__adddf3+0x1ee>
 80802b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80802ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80802be:	bfb8      	it	lt
 80802c0:	426d      	neglt	r5, r5
 80802c2:	dd0c      	ble.n	80802de <__adddf3+0x52>
 80802c4:	442c      	add	r4, r5
 80802c6:	ea80 0202 	eor.w	r2, r0, r2
 80802ca:	ea81 0303 	eor.w	r3, r1, r3
 80802ce:	ea82 0000 	eor.w	r0, r2, r0
 80802d2:	ea83 0101 	eor.w	r1, r3, r1
 80802d6:	ea80 0202 	eor.w	r2, r0, r2
 80802da:	ea81 0303 	eor.w	r3, r1, r3
 80802de:	2d36      	cmp	r5, #54	; 0x36
 80802e0:	bf88      	it	hi
 80802e2:	bd30      	pophi	{r4, r5, pc}
 80802e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80802e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80802ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80802f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80802f4:	d002      	beq.n	80802fc <__adddf3+0x70>
 80802f6:	4240      	negs	r0, r0
 80802f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80802fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8080300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8080308:	d002      	beq.n	8080310 <__adddf3+0x84>
 808030a:	4252      	negs	r2, r2
 808030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8080310:	ea94 0f05 	teq	r4, r5
 8080314:	f000 80a7 	beq.w	8080466 <__adddf3+0x1da>
 8080318:	f1a4 0401 	sub.w	r4, r4, #1
 808031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8080320:	db0d      	blt.n	808033e <__adddf3+0xb2>
 8080322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8080326:	fa22 f205 	lsr.w	r2, r2, r5
 808032a:	1880      	adds	r0, r0, r2
 808032c:	f141 0100 	adc.w	r1, r1, #0
 8080330:	fa03 f20e 	lsl.w	r2, r3, lr
 8080334:	1880      	adds	r0, r0, r2
 8080336:	fa43 f305 	asr.w	r3, r3, r5
 808033a:	4159      	adcs	r1, r3
 808033c:	e00e      	b.n	808035c <__adddf3+0xd0>
 808033e:	f1a5 0520 	sub.w	r5, r5, #32
 8080342:	f10e 0e20 	add.w	lr, lr, #32
 8080346:	2a01      	cmp	r2, #1
 8080348:	fa03 fc0e 	lsl.w	ip, r3, lr
 808034c:	bf28      	it	cs
 808034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8080352:	fa43 f305 	asr.w	r3, r3, r5
 8080356:	18c0      	adds	r0, r0, r3
 8080358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8080360:	d507      	bpl.n	8080372 <__adddf3+0xe6>
 8080362:	f04f 0e00 	mov.w	lr, #0
 8080366:	f1dc 0c00 	rsbs	ip, ip, #0
 808036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 808036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8080372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8080376:	d31b      	bcc.n	80803b0 <__adddf3+0x124>
 8080378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808037c:	d30c      	bcc.n	8080398 <__adddf3+0x10c>
 808037e:	0849      	lsrs	r1, r1, #1
 8080380:	ea5f 0030 	movs.w	r0, r0, rrx
 8080384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8080388:	f104 0401 	add.w	r4, r4, #1
 808038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8080390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8080394:	f080 809a 	bcs.w	80804cc <__adddf3+0x240>
 8080398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808039c:	bf08      	it	eq
 808039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80803a2:	f150 0000 	adcs.w	r0, r0, #0
 80803a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80803aa:	ea41 0105 	orr.w	r1, r1, r5
 80803ae:	bd30      	pop	{r4, r5, pc}
 80803b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80803b4:	4140      	adcs	r0, r0
 80803b6:	eb41 0101 	adc.w	r1, r1, r1
 80803ba:	3c01      	subs	r4, #1
 80803bc:	bf28      	it	cs
 80803be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80803c2:	d2e9      	bcs.n	8080398 <__adddf3+0x10c>
 80803c4:	f091 0f00 	teq	r1, #0
 80803c8:	bf04      	itt	eq
 80803ca:	4601      	moveq	r1, r0
 80803cc:	2000      	moveq	r0, #0
 80803ce:	fab1 f381 	clz	r3, r1
 80803d2:	bf08      	it	eq
 80803d4:	3320      	addeq	r3, #32
 80803d6:	f1a3 030b 	sub.w	r3, r3, #11
 80803da:	f1b3 0220 	subs.w	r2, r3, #32
 80803de:	da0c      	bge.n	80803fa <__adddf3+0x16e>
 80803e0:	320c      	adds	r2, #12
 80803e2:	dd08      	ble.n	80803f6 <__adddf3+0x16a>
 80803e4:	f102 0c14 	add.w	ip, r2, #20
 80803e8:	f1c2 020c 	rsb	r2, r2, #12
 80803ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80803f0:	fa21 f102 	lsr.w	r1, r1, r2
 80803f4:	e00c      	b.n	8080410 <__adddf3+0x184>
 80803f6:	f102 0214 	add.w	r2, r2, #20
 80803fa:	bfd8      	it	le
 80803fc:	f1c2 0c20 	rsble	ip, r2, #32
 8080400:	fa01 f102 	lsl.w	r1, r1, r2
 8080404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8080408:	bfdc      	itt	le
 808040a:	ea41 010c 	orrle.w	r1, r1, ip
 808040e:	4090      	lslle	r0, r2
 8080410:	1ae4      	subs	r4, r4, r3
 8080412:	bfa2      	ittt	ge
 8080414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8080418:	4329      	orrge	r1, r5
 808041a:	bd30      	popge	{r4, r5, pc}
 808041c:	ea6f 0404 	mvn.w	r4, r4
 8080420:	3c1f      	subs	r4, #31
 8080422:	da1c      	bge.n	808045e <__adddf3+0x1d2>
 8080424:	340c      	adds	r4, #12
 8080426:	dc0e      	bgt.n	8080446 <__adddf3+0x1ba>
 8080428:	f104 0414 	add.w	r4, r4, #20
 808042c:	f1c4 0220 	rsb	r2, r4, #32
 8080430:	fa20 f004 	lsr.w	r0, r0, r4
 8080434:	fa01 f302 	lsl.w	r3, r1, r2
 8080438:	ea40 0003 	orr.w	r0, r0, r3
 808043c:	fa21 f304 	lsr.w	r3, r1, r4
 8080440:	ea45 0103 	orr.w	r1, r5, r3
 8080444:	bd30      	pop	{r4, r5, pc}
 8080446:	f1c4 040c 	rsb	r4, r4, #12
 808044a:	f1c4 0220 	rsb	r2, r4, #32
 808044e:	fa20 f002 	lsr.w	r0, r0, r2
 8080452:	fa01 f304 	lsl.w	r3, r1, r4
 8080456:	ea40 0003 	orr.w	r0, r0, r3
 808045a:	4629      	mov	r1, r5
 808045c:	bd30      	pop	{r4, r5, pc}
 808045e:	fa21 f004 	lsr.w	r0, r1, r4
 8080462:	4629      	mov	r1, r5
 8080464:	bd30      	pop	{r4, r5, pc}
 8080466:	f094 0f00 	teq	r4, #0
 808046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808046e:	bf06      	itte	eq
 8080470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8080474:	3401      	addeq	r4, #1
 8080476:	3d01      	subne	r5, #1
 8080478:	e74e      	b.n	8080318 <__adddf3+0x8c>
 808047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808047e:	bf18      	it	ne
 8080480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8080484:	d029      	beq.n	80804da <__adddf3+0x24e>
 8080486:	ea94 0f05 	teq	r4, r5
 808048a:	bf08      	it	eq
 808048c:	ea90 0f02 	teqeq	r0, r2
 8080490:	d005      	beq.n	808049e <__adddf3+0x212>
 8080492:	ea54 0c00 	orrs.w	ip, r4, r0
 8080496:	bf04      	itt	eq
 8080498:	4619      	moveq	r1, r3
 808049a:	4610      	moveq	r0, r2
 808049c:	bd30      	pop	{r4, r5, pc}
 808049e:	ea91 0f03 	teq	r1, r3
 80804a2:	bf1e      	ittt	ne
 80804a4:	2100      	movne	r1, #0
 80804a6:	2000      	movne	r0, #0
 80804a8:	bd30      	popne	{r4, r5, pc}
 80804aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80804ae:	d105      	bne.n	80804bc <__adddf3+0x230>
 80804b0:	0040      	lsls	r0, r0, #1
 80804b2:	4149      	adcs	r1, r1
 80804b4:	bf28      	it	cs
 80804b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80804ba:	bd30      	pop	{r4, r5, pc}
 80804bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80804c0:	bf3c      	itt	cc
 80804c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80804c6:	bd30      	popcc	{r4, r5, pc}
 80804c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80804cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80804d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80804d4:	f04f 0000 	mov.w	r0, #0
 80804d8:	bd30      	pop	{r4, r5, pc}
 80804da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80804de:	bf1a      	itte	ne
 80804e0:	4619      	movne	r1, r3
 80804e2:	4610      	movne	r0, r2
 80804e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80804e8:	bf1c      	itt	ne
 80804ea:	460b      	movne	r3, r1
 80804ec:	4602      	movne	r2, r0
 80804ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80804f2:	bf06      	itte	eq
 80804f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80804f8:	ea91 0f03 	teqeq	r1, r3
 80804fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8080500:	bd30      	pop	{r4, r5, pc}
 8080502:	bf00      	nop

08080504 <__aeabi_ui2d>:
 8080504:	f090 0f00 	teq	r0, #0
 8080508:	bf04      	itt	eq
 808050a:	2100      	moveq	r1, #0
 808050c:	4770      	bxeq	lr
 808050e:	b530      	push	{r4, r5, lr}
 8080510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8080518:	f04f 0500 	mov.w	r5, #0
 808051c:	f04f 0100 	mov.w	r1, #0
 8080520:	e750      	b.n	80803c4 <__adddf3+0x138>
 8080522:	bf00      	nop

08080524 <__aeabi_i2d>:
 8080524:	f090 0f00 	teq	r0, #0
 8080528:	bf04      	itt	eq
 808052a:	2100      	moveq	r1, #0
 808052c:	4770      	bxeq	lr
 808052e:	b530      	push	{r4, r5, lr}
 8080530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8080534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8080538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808053c:	bf48      	it	mi
 808053e:	4240      	negmi	r0, r0
 8080540:	f04f 0100 	mov.w	r1, #0
 8080544:	e73e      	b.n	80803c4 <__adddf3+0x138>
 8080546:	bf00      	nop

08080548 <__aeabi_f2d>:
 8080548:	0042      	lsls	r2, r0, #1
 808054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8080552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8080556:	bf1f      	itttt	ne
 8080558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8080560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8080564:	4770      	bxne	lr
 8080566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 808056a:	bf08      	it	eq
 808056c:	4770      	bxeq	lr
 808056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8080572:	bf04      	itt	eq
 8080574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8080578:	4770      	bxeq	lr
 808057a:	b530      	push	{r4, r5, lr}
 808057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8080580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8080584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080588:	e71c      	b.n	80803c4 <__adddf3+0x138>
 808058a:	bf00      	nop

0808058c <__aeabi_ul2d>:
 808058c:	ea50 0201 	orrs.w	r2, r0, r1
 8080590:	bf08      	it	eq
 8080592:	4770      	bxeq	lr
 8080594:	b530      	push	{r4, r5, lr}
 8080596:	f04f 0500 	mov.w	r5, #0
 808059a:	e00a      	b.n	80805b2 <__aeabi_l2d+0x16>

0808059c <__aeabi_l2d>:
 808059c:	ea50 0201 	orrs.w	r2, r0, r1
 80805a0:	bf08      	it	eq
 80805a2:	4770      	bxeq	lr
 80805a4:	b530      	push	{r4, r5, lr}
 80805a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80805aa:	d502      	bpl.n	80805b2 <__aeabi_l2d+0x16>
 80805ac:	4240      	negs	r0, r0
 80805ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80805b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80805b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80805ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80805be:	f43f aed8 	beq.w	8080372 <__adddf3+0xe6>
 80805c2:	f04f 0203 	mov.w	r2, #3
 80805c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80805ca:	bf18      	it	ne
 80805cc:	3203      	addne	r2, #3
 80805ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80805d2:	bf18      	it	ne
 80805d4:	3203      	addne	r2, #3
 80805d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80805da:	f1c2 0320 	rsb	r3, r2, #32
 80805de:	fa00 fc03 	lsl.w	ip, r0, r3
 80805e2:	fa20 f002 	lsr.w	r0, r0, r2
 80805e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80805ea:	ea40 000e 	orr.w	r0, r0, lr
 80805ee:	fa21 f102 	lsr.w	r1, r1, r2
 80805f2:	4414      	add	r4, r2
 80805f4:	e6bd      	b.n	8080372 <__adddf3+0xe6>
 80805f6:	bf00      	nop

080805f8 <__aeabi_dmul>:
 80805f8:	b570      	push	{r4, r5, r6, lr}
 80805fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80805fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8080602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8080606:	bf1d      	ittte	ne
 8080608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808060c:	ea94 0f0c 	teqne	r4, ip
 8080610:	ea95 0f0c 	teqne	r5, ip
 8080614:	f000 f8de 	bleq	80807d4 <__aeabi_dmul+0x1dc>
 8080618:	442c      	add	r4, r5
 808061a:	ea81 0603 	eor.w	r6, r1, r3
 808061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8080622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8080626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808062a:	bf18      	it	ne
 808062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8080630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8080634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8080638:	d038      	beq.n	80806ac <__aeabi_dmul+0xb4>
 808063a:	fba0 ce02 	umull	ip, lr, r0, r2
 808063e:	f04f 0500 	mov.w	r5, #0
 8080642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8080646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808064e:	f04f 0600 	mov.w	r6, #0
 8080652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8080656:	f09c 0f00 	teq	ip, #0
 808065a:	bf18      	it	ne
 808065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8080660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8080664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8080668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808066c:	d204      	bcs.n	8080678 <__aeabi_dmul+0x80>
 808066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8080672:	416d      	adcs	r5, r5
 8080674:	eb46 0606 	adc.w	r6, r6, r6
 8080678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8080680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8080684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8080688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8080690:	bf88      	it	hi
 8080692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8080696:	d81e      	bhi.n	80806d6 <__aeabi_dmul+0xde>
 8080698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808069c:	bf08      	it	eq
 808069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80806a2:	f150 0000 	adcs.w	r0, r0, #0
 80806a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80806aa:	bd70      	pop	{r4, r5, r6, pc}
 80806ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80806b0:	ea46 0101 	orr.w	r1, r6, r1
 80806b4:	ea40 0002 	orr.w	r0, r0, r2
 80806b8:	ea81 0103 	eor.w	r1, r1, r3
 80806bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80806c0:	bfc2      	ittt	gt
 80806c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80806c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80806ca:	bd70      	popgt	{r4, r5, r6, pc}
 80806cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80806d0:	f04f 0e00 	mov.w	lr, #0
 80806d4:	3c01      	subs	r4, #1
 80806d6:	f300 80ab 	bgt.w	8080830 <__aeabi_dmul+0x238>
 80806da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80806de:	bfde      	ittt	le
 80806e0:	2000      	movle	r0, #0
 80806e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80806e6:	bd70      	pople	{r4, r5, r6, pc}
 80806e8:	f1c4 0400 	rsb	r4, r4, #0
 80806ec:	3c20      	subs	r4, #32
 80806ee:	da35      	bge.n	808075c <__aeabi_dmul+0x164>
 80806f0:	340c      	adds	r4, #12
 80806f2:	dc1b      	bgt.n	808072c <__aeabi_dmul+0x134>
 80806f4:	f104 0414 	add.w	r4, r4, #20
 80806f8:	f1c4 0520 	rsb	r5, r4, #32
 80806fc:	fa00 f305 	lsl.w	r3, r0, r5
 8080700:	fa20 f004 	lsr.w	r0, r0, r4
 8080704:	fa01 f205 	lsl.w	r2, r1, r5
 8080708:	ea40 0002 	orr.w	r0, r0, r2
 808070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8080710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8080714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8080718:	fa21 f604 	lsr.w	r6, r1, r4
 808071c:	eb42 0106 	adc.w	r1, r2, r6
 8080720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8080724:	bf08      	it	eq
 8080726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808072a:	bd70      	pop	{r4, r5, r6, pc}
 808072c:	f1c4 040c 	rsb	r4, r4, #12
 8080730:	f1c4 0520 	rsb	r5, r4, #32
 8080734:	fa00 f304 	lsl.w	r3, r0, r4
 8080738:	fa20 f005 	lsr.w	r0, r0, r5
 808073c:	fa01 f204 	lsl.w	r2, r1, r4
 8080740:	ea40 0002 	orr.w	r0, r0, r2
 8080744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8080748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808074c:	f141 0100 	adc.w	r1, r1, #0
 8080750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8080754:	bf08      	it	eq
 8080756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808075a:	bd70      	pop	{r4, r5, r6, pc}
 808075c:	f1c4 0520 	rsb	r5, r4, #32
 8080760:	fa00 f205 	lsl.w	r2, r0, r5
 8080764:	ea4e 0e02 	orr.w	lr, lr, r2
 8080768:	fa20 f304 	lsr.w	r3, r0, r4
 808076c:	fa01 f205 	lsl.w	r2, r1, r5
 8080770:	ea43 0302 	orr.w	r3, r3, r2
 8080774:	fa21 f004 	lsr.w	r0, r1, r4
 8080778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808077c:	fa21 f204 	lsr.w	r2, r1, r4
 8080780:	ea20 0002 	bic.w	r0, r0, r2
 8080784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8080788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808078c:	bf08      	it	eq
 808078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8080792:	bd70      	pop	{r4, r5, r6, pc}
 8080794:	f094 0f00 	teq	r4, #0
 8080798:	d10f      	bne.n	80807ba <__aeabi_dmul+0x1c2>
 808079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808079e:	0040      	lsls	r0, r0, #1
 80807a0:	eb41 0101 	adc.w	r1, r1, r1
 80807a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80807a8:	bf08      	it	eq
 80807aa:	3c01      	subeq	r4, #1
 80807ac:	d0f7      	beq.n	808079e <__aeabi_dmul+0x1a6>
 80807ae:	ea41 0106 	orr.w	r1, r1, r6
 80807b2:	f095 0f00 	teq	r5, #0
 80807b6:	bf18      	it	ne
 80807b8:	4770      	bxne	lr
 80807ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80807be:	0052      	lsls	r2, r2, #1
 80807c0:	eb43 0303 	adc.w	r3, r3, r3
 80807c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80807c8:	bf08      	it	eq
 80807ca:	3d01      	subeq	r5, #1
 80807cc:	d0f7      	beq.n	80807be <__aeabi_dmul+0x1c6>
 80807ce:	ea43 0306 	orr.w	r3, r3, r6
 80807d2:	4770      	bx	lr
 80807d4:	ea94 0f0c 	teq	r4, ip
 80807d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80807dc:	bf18      	it	ne
 80807de:	ea95 0f0c 	teqne	r5, ip
 80807e2:	d00c      	beq.n	80807fe <__aeabi_dmul+0x206>
 80807e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80807e8:	bf18      	it	ne
 80807ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80807ee:	d1d1      	bne.n	8080794 <__aeabi_dmul+0x19c>
 80807f0:	ea81 0103 	eor.w	r1, r1, r3
 80807f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80807f8:	f04f 0000 	mov.w	r0, #0
 80807fc:	bd70      	pop	{r4, r5, r6, pc}
 80807fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080802:	bf06      	itte	eq
 8080804:	4610      	moveq	r0, r2
 8080806:	4619      	moveq	r1, r3
 8080808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808080c:	d019      	beq.n	8080842 <__aeabi_dmul+0x24a>
 808080e:	ea94 0f0c 	teq	r4, ip
 8080812:	d102      	bne.n	808081a <__aeabi_dmul+0x222>
 8080814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8080818:	d113      	bne.n	8080842 <__aeabi_dmul+0x24a>
 808081a:	ea95 0f0c 	teq	r5, ip
 808081e:	d105      	bne.n	808082c <__aeabi_dmul+0x234>
 8080820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8080824:	bf1c      	itt	ne
 8080826:	4610      	movne	r0, r2
 8080828:	4619      	movne	r1, r3
 808082a:	d10a      	bne.n	8080842 <__aeabi_dmul+0x24a>
 808082c:	ea81 0103 	eor.w	r1, r1, r3
 8080830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8080834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8080838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808083c:	f04f 0000 	mov.w	r0, #0
 8080840:	bd70      	pop	{r4, r5, r6, pc}
 8080842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8080846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808084a:	bd70      	pop	{r4, r5, r6, pc}

0808084c <__aeabi_ddiv>:
 808084c:	b570      	push	{r4, r5, r6, lr}
 808084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8080852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8080856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808085a:	bf1d      	ittte	ne
 808085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8080860:	ea94 0f0c 	teqne	r4, ip
 8080864:	ea95 0f0c 	teqne	r5, ip
 8080868:	f000 f8a7 	bleq	80809ba <__aeabi_ddiv+0x16e>
 808086c:	eba4 0405 	sub.w	r4, r4, r5
 8080870:	ea81 0e03 	eor.w	lr, r1, r3
 8080874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8080878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808087c:	f000 8088 	beq.w	8080990 <__aeabi_ddiv+0x144>
 8080880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8080884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8080888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8080890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8080894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8080898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80808a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80808a4:	429d      	cmp	r5, r3
 80808a6:	bf08      	it	eq
 80808a8:	4296      	cmpeq	r6, r2
 80808aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80808ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80808b2:	d202      	bcs.n	80808ba <__aeabi_ddiv+0x6e>
 80808b4:	085b      	lsrs	r3, r3, #1
 80808b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80808ba:	1ab6      	subs	r6, r6, r2
 80808bc:	eb65 0503 	sbc.w	r5, r5, r3
 80808c0:	085b      	lsrs	r3, r3, #1
 80808c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80808c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80808ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80808ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80808d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80808d6:	bf22      	ittt	cs
 80808d8:	1ab6      	subcs	r6, r6, r2
 80808da:	4675      	movcs	r5, lr
 80808dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80808e0:	085b      	lsrs	r3, r3, #1
 80808e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80808e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80808ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80808ee:	bf22      	ittt	cs
 80808f0:	1ab6      	subcs	r6, r6, r2
 80808f2:	4675      	movcs	r5, lr
 80808f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80808f8:	085b      	lsrs	r3, r3, #1
 80808fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80808fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8080902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8080906:	bf22      	ittt	cs
 8080908:	1ab6      	subcs	r6, r6, r2
 808090a:	4675      	movcs	r5, lr
 808090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8080910:	085b      	lsrs	r3, r3, #1
 8080912:	ea4f 0232 	mov.w	r2, r2, rrx
 8080916:	ebb6 0e02 	subs.w	lr, r6, r2
 808091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808091e:	bf22      	ittt	cs
 8080920:	1ab6      	subcs	r6, r6, r2
 8080922:	4675      	movcs	r5, lr
 8080924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8080928:	ea55 0e06 	orrs.w	lr, r5, r6
 808092c:	d018      	beq.n	8080960 <__aeabi_ddiv+0x114>
 808092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8080932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8080936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8080942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8080946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808094a:	d1c0      	bne.n	80808ce <__aeabi_ddiv+0x82>
 808094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8080950:	d10b      	bne.n	808096a <__aeabi_ddiv+0x11e>
 8080952:	ea41 0100 	orr.w	r1, r1, r0
 8080956:	f04f 0000 	mov.w	r0, #0
 808095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808095e:	e7b6      	b.n	80808ce <__aeabi_ddiv+0x82>
 8080960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8080964:	bf04      	itt	eq
 8080966:	4301      	orreq	r1, r0
 8080968:	2000      	moveq	r0, #0
 808096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808096e:	bf88      	it	hi
 8080970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8080974:	f63f aeaf 	bhi.w	80806d6 <__aeabi_dmul+0xde>
 8080978:	ebb5 0c03 	subs.w	ip, r5, r3
 808097c:	bf04      	itt	eq
 808097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8080982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8080986:	f150 0000 	adcs.w	r0, r0, #0
 808098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808098e:	bd70      	pop	{r4, r5, r6, pc}
 8080990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8080994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8080998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808099c:	bfc2      	ittt	gt
 808099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80809a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80809a6:	bd70      	popgt	{r4, r5, r6, pc}
 80809a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80809ac:	f04f 0e00 	mov.w	lr, #0
 80809b0:	3c01      	subs	r4, #1
 80809b2:	e690      	b.n	80806d6 <__aeabi_dmul+0xde>
 80809b4:	ea45 0e06 	orr.w	lr, r5, r6
 80809b8:	e68d      	b.n	80806d6 <__aeabi_dmul+0xde>
 80809ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80809be:	ea94 0f0c 	teq	r4, ip
 80809c2:	bf08      	it	eq
 80809c4:	ea95 0f0c 	teqeq	r5, ip
 80809c8:	f43f af3b 	beq.w	8080842 <__aeabi_dmul+0x24a>
 80809cc:	ea94 0f0c 	teq	r4, ip
 80809d0:	d10a      	bne.n	80809e8 <__aeabi_ddiv+0x19c>
 80809d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80809d6:	f47f af34 	bne.w	8080842 <__aeabi_dmul+0x24a>
 80809da:	ea95 0f0c 	teq	r5, ip
 80809de:	f47f af25 	bne.w	808082c <__aeabi_dmul+0x234>
 80809e2:	4610      	mov	r0, r2
 80809e4:	4619      	mov	r1, r3
 80809e6:	e72c      	b.n	8080842 <__aeabi_dmul+0x24a>
 80809e8:	ea95 0f0c 	teq	r5, ip
 80809ec:	d106      	bne.n	80809fc <__aeabi_ddiv+0x1b0>
 80809ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80809f2:	f43f aefd 	beq.w	80807f0 <__aeabi_dmul+0x1f8>
 80809f6:	4610      	mov	r0, r2
 80809f8:	4619      	mov	r1, r3
 80809fa:	e722      	b.n	8080842 <__aeabi_dmul+0x24a>
 80809fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8080a00:	bf18      	it	ne
 8080a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8080a06:	f47f aec5 	bne.w	8080794 <__aeabi_dmul+0x19c>
 8080a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8080a0e:	f47f af0d 	bne.w	808082c <__aeabi_dmul+0x234>
 8080a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8080a16:	f47f aeeb 	bne.w	80807f0 <__aeabi_dmul+0x1f8>
 8080a1a:	e712      	b.n	8080842 <__aeabi_dmul+0x24a>

08080a1c <__gedf2>:
 8080a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8080a20:	e006      	b.n	8080a30 <__cmpdf2+0x4>
 8080a22:	bf00      	nop

08080a24 <__ledf2>:
 8080a24:	f04f 0c01 	mov.w	ip, #1
 8080a28:	e002      	b.n	8080a30 <__cmpdf2+0x4>
 8080a2a:	bf00      	nop

08080a2c <__cmpdf2>:
 8080a2c:	f04f 0c01 	mov.w	ip, #1
 8080a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8080a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080a40:	bf18      	it	ne
 8080a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8080a46:	d01b      	beq.n	8080a80 <__cmpdf2+0x54>
 8080a48:	b001      	add	sp, #4
 8080a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8080a4e:	bf0c      	ite	eq
 8080a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8080a54:	ea91 0f03 	teqne	r1, r3
 8080a58:	bf02      	ittt	eq
 8080a5a:	ea90 0f02 	teqeq	r0, r2
 8080a5e:	2000      	moveq	r0, #0
 8080a60:	4770      	bxeq	lr
 8080a62:	f110 0f00 	cmn.w	r0, #0
 8080a66:	ea91 0f03 	teq	r1, r3
 8080a6a:	bf58      	it	pl
 8080a6c:	4299      	cmppl	r1, r3
 8080a6e:	bf08      	it	eq
 8080a70:	4290      	cmpeq	r0, r2
 8080a72:	bf2c      	ite	cs
 8080a74:	17d8      	asrcs	r0, r3, #31
 8080a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8080a7a:	f040 0001 	orr.w	r0, r0, #1
 8080a7e:	4770      	bx	lr
 8080a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a88:	d102      	bne.n	8080a90 <__cmpdf2+0x64>
 8080a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8080a8e:	d107      	bne.n	8080aa0 <__cmpdf2+0x74>
 8080a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080a98:	d1d6      	bne.n	8080a48 <__cmpdf2+0x1c>
 8080a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8080a9e:	d0d3      	beq.n	8080a48 <__cmpdf2+0x1c>
 8080aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8080aa4:	4770      	bx	lr
 8080aa6:	bf00      	nop

08080aa8 <__aeabi_cdrcmple>:
 8080aa8:	4684      	mov	ip, r0
 8080aaa:	4610      	mov	r0, r2
 8080aac:	4662      	mov	r2, ip
 8080aae:	468c      	mov	ip, r1
 8080ab0:	4619      	mov	r1, r3
 8080ab2:	4663      	mov	r3, ip
 8080ab4:	e000      	b.n	8080ab8 <__aeabi_cdcmpeq>
 8080ab6:	bf00      	nop

08080ab8 <__aeabi_cdcmpeq>:
 8080ab8:	b501      	push	{r0, lr}
 8080aba:	f7ff ffb7 	bl	8080a2c <__cmpdf2>
 8080abe:	2800      	cmp	r0, #0
 8080ac0:	bf48      	it	mi
 8080ac2:	f110 0f00 	cmnmi.w	r0, #0
 8080ac6:	bd01      	pop	{r0, pc}

08080ac8 <__aeabi_dcmpeq>:
 8080ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080acc:	f7ff fff4 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080ad0:	bf0c      	ite	eq
 8080ad2:	2001      	moveq	r0, #1
 8080ad4:	2000      	movne	r0, #0
 8080ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8080ada:	bf00      	nop

08080adc <__aeabi_dcmplt>:
 8080adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080ae0:	f7ff ffea 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080ae4:	bf34      	ite	cc
 8080ae6:	2001      	movcc	r0, #1
 8080ae8:	2000      	movcs	r0, #0
 8080aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8080aee:	bf00      	nop

08080af0 <__aeabi_dcmple>:
 8080af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080af4:	f7ff ffe0 	bl	8080ab8 <__aeabi_cdcmpeq>
 8080af8:	bf94      	ite	ls
 8080afa:	2001      	movls	r0, #1
 8080afc:	2000      	movhi	r0, #0
 8080afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b02:	bf00      	nop

08080b04 <__aeabi_dcmpge>:
 8080b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080b08:	f7ff ffce 	bl	8080aa8 <__aeabi_cdrcmple>
 8080b0c:	bf94      	ite	ls
 8080b0e:	2001      	movls	r0, #1
 8080b10:	2000      	movhi	r0, #0
 8080b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b16:	bf00      	nop

08080b18 <__aeabi_dcmpgt>:
 8080b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8080b1c:	f7ff ffc4 	bl	8080aa8 <__aeabi_cdrcmple>
 8080b20:	bf34      	ite	cc
 8080b22:	2001      	movcc	r0, #1
 8080b24:	2000      	movcs	r0, #0
 8080b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8080b2a:	bf00      	nop

08080b2c <__aeabi_dcmpun>:
 8080b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8080b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080b34:	d102      	bne.n	8080b3c <__aeabi_dcmpun+0x10>
 8080b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8080b3a:	d10a      	bne.n	8080b52 <__aeabi_dcmpun+0x26>
 8080b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8080b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8080b44:	d102      	bne.n	8080b4c <__aeabi_dcmpun+0x20>
 8080b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8080b4a:	d102      	bne.n	8080b52 <__aeabi_dcmpun+0x26>
 8080b4c:	f04f 0000 	mov.w	r0, #0
 8080b50:	4770      	bx	lr
 8080b52:	f04f 0001 	mov.w	r0, #1
 8080b56:	4770      	bx	lr

08080b58 <__aeabi_d2iz>:
 8080b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8080b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8080b60:	d215      	bcs.n	8080b8e <__aeabi_d2iz+0x36>
 8080b62:	d511      	bpl.n	8080b88 <__aeabi_d2iz+0x30>
 8080b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8080b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8080b6c:	d912      	bls.n	8080b94 <__aeabi_d2iz+0x3c>
 8080b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8080b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8080b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8080b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8080b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8080b82:	bf18      	it	ne
 8080b84:	4240      	negne	r0, r0
 8080b86:	4770      	bx	lr
 8080b88:	f04f 0000 	mov.w	r0, #0
 8080b8c:	4770      	bx	lr
 8080b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8080b92:	d105      	bne.n	8080ba0 <__aeabi_d2iz+0x48>
 8080b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8080b98:	bf08      	it	eq
 8080b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8080b9e:	4770      	bx	lr
 8080ba0:	f04f 0000 	mov.w	r0, #0
 8080ba4:	4770      	bx	lr
 8080ba6:	bf00      	nop

08080ba8 <__aeabi_uldivmod>:
 8080ba8:	b953      	cbnz	r3, 8080bc0 <__aeabi_uldivmod+0x18>
 8080baa:	b94a      	cbnz	r2, 8080bc0 <__aeabi_uldivmod+0x18>
 8080bac:	2900      	cmp	r1, #0
 8080bae:	bf08      	it	eq
 8080bb0:	2800      	cmpeq	r0, #0
 8080bb2:	bf1c      	itt	ne
 8080bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8080bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8080bbc:	f000 b974 	b.w	8080ea8 <__aeabi_idiv0>
 8080bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8080bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8080bc8:	f000 f806 	bl	8080bd8 <__udivmoddi4>
 8080bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8080bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8080bd4:	b004      	add	sp, #16
 8080bd6:	4770      	bx	lr

08080bd8 <__udivmoddi4>:
 8080bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8080bdc:	9d08      	ldr	r5, [sp, #32]
 8080bde:	4604      	mov	r4, r0
 8080be0:	468e      	mov	lr, r1
 8080be2:	2b00      	cmp	r3, #0
 8080be4:	d14d      	bne.n	8080c82 <__udivmoddi4+0xaa>
 8080be6:	428a      	cmp	r2, r1
 8080be8:	4694      	mov	ip, r2
 8080bea:	d969      	bls.n	8080cc0 <__udivmoddi4+0xe8>
 8080bec:	fab2 f282 	clz	r2, r2
 8080bf0:	b152      	cbz	r2, 8080c08 <__udivmoddi4+0x30>
 8080bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8080bf6:	f1c2 0120 	rsb	r1, r2, #32
 8080bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8080bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8080c02:	ea41 0e03 	orr.w	lr, r1, r3
 8080c06:	4094      	lsls	r4, r2
 8080c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8080c0c:	0c21      	lsrs	r1, r4, #16
 8080c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8080c12:	fa1f f78c 	uxth.w	r7, ip
 8080c16:	fb08 e316 	mls	r3, r8, r6, lr
 8080c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8080c1e:	fb06 f107 	mul.w	r1, r6, r7
 8080c22:	4299      	cmp	r1, r3
 8080c24:	d90a      	bls.n	8080c3c <__udivmoddi4+0x64>
 8080c26:	eb1c 0303 	adds.w	r3, ip, r3
 8080c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8080c2e:	f080 811f 	bcs.w	8080e70 <__udivmoddi4+0x298>
 8080c32:	4299      	cmp	r1, r3
 8080c34:	f240 811c 	bls.w	8080e70 <__udivmoddi4+0x298>
 8080c38:	3e02      	subs	r6, #2
 8080c3a:	4463      	add	r3, ip
 8080c3c:	1a5b      	subs	r3, r3, r1
 8080c3e:	b2a4      	uxth	r4, r4
 8080c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8080c44:	fb08 3310 	mls	r3, r8, r0, r3
 8080c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8080c4c:	fb00 f707 	mul.w	r7, r0, r7
 8080c50:	42a7      	cmp	r7, r4
 8080c52:	d90a      	bls.n	8080c6a <__udivmoddi4+0x92>
 8080c54:	eb1c 0404 	adds.w	r4, ip, r4
 8080c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8080c5c:	f080 810a 	bcs.w	8080e74 <__udivmoddi4+0x29c>
 8080c60:	42a7      	cmp	r7, r4
 8080c62:	f240 8107 	bls.w	8080e74 <__udivmoddi4+0x29c>
 8080c66:	4464      	add	r4, ip
 8080c68:	3802      	subs	r0, #2
 8080c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8080c6e:	1be4      	subs	r4, r4, r7
 8080c70:	2600      	movs	r6, #0
 8080c72:	b11d      	cbz	r5, 8080c7c <__udivmoddi4+0xa4>
 8080c74:	40d4      	lsrs	r4, r2
 8080c76:	2300      	movs	r3, #0
 8080c78:	e9c5 4300 	strd	r4, r3, [r5]
 8080c7c:	4631      	mov	r1, r6
 8080c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080c82:	428b      	cmp	r3, r1
 8080c84:	d909      	bls.n	8080c9a <__udivmoddi4+0xc2>
 8080c86:	2d00      	cmp	r5, #0
 8080c88:	f000 80ef 	beq.w	8080e6a <__udivmoddi4+0x292>
 8080c8c:	2600      	movs	r6, #0
 8080c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8080c92:	4630      	mov	r0, r6
 8080c94:	4631      	mov	r1, r6
 8080c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080c9a:	fab3 f683 	clz	r6, r3
 8080c9e:	2e00      	cmp	r6, #0
 8080ca0:	d14a      	bne.n	8080d38 <__udivmoddi4+0x160>
 8080ca2:	428b      	cmp	r3, r1
 8080ca4:	d302      	bcc.n	8080cac <__udivmoddi4+0xd4>
 8080ca6:	4282      	cmp	r2, r0
 8080ca8:	f200 80f9 	bhi.w	8080e9e <__udivmoddi4+0x2c6>
 8080cac:	1a84      	subs	r4, r0, r2
 8080cae:	eb61 0303 	sbc.w	r3, r1, r3
 8080cb2:	2001      	movs	r0, #1
 8080cb4:	469e      	mov	lr, r3
 8080cb6:	2d00      	cmp	r5, #0
 8080cb8:	d0e0      	beq.n	8080c7c <__udivmoddi4+0xa4>
 8080cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8080cbe:	e7dd      	b.n	8080c7c <__udivmoddi4+0xa4>
 8080cc0:	b902      	cbnz	r2, 8080cc4 <__udivmoddi4+0xec>
 8080cc2:	deff      	udf	#255	; 0xff
 8080cc4:	fab2 f282 	clz	r2, r2
 8080cc8:	2a00      	cmp	r2, #0
 8080cca:	f040 8092 	bne.w	8080df2 <__udivmoddi4+0x21a>
 8080cce:	eba1 010c 	sub.w	r1, r1, ip
 8080cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080cd6:	fa1f fe8c 	uxth.w	lr, ip
 8080cda:	2601      	movs	r6, #1
 8080cdc:	0c20      	lsrs	r0, r4, #16
 8080cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8080ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8080ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8080cea:	fb0e f003 	mul.w	r0, lr, r3
 8080cee:	4288      	cmp	r0, r1
 8080cf0:	d908      	bls.n	8080d04 <__udivmoddi4+0x12c>
 8080cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8080cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8080cfa:	d202      	bcs.n	8080d02 <__udivmoddi4+0x12a>
 8080cfc:	4288      	cmp	r0, r1
 8080cfe:	f200 80cb 	bhi.w	8080e98 <__udivmoddi4+0x2c0>
 8080d02:	4643      	mov	r3, r8
 8080d04:	1a09      	subs	r1, r1, r0
 8080d06:	b2a4      	uxth	r4, r4
 8080d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8080d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8080d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8080d14:	fb0e fe00 	mul.w	lr, lr, r0
 8080d18:	45a6      	cmp	lr, r4
 8080d1a:	d908      	bls.n	8080d2e <__udivmoddi4+0x156>
 8080d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8080d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8080d24:	d202      	bcs.n	8080d2c <__udivmoddi4+0x154>
 8080d26:	45a6      	cmp	lr, r4
 8080d28:	f200 80bb 	bhi.w	8080ea2 <__udivmoddi4+0x2ca>
 8080d2c:	4608      	mov	r0, r1
 8080d2e:	eba4 040e 	sub.w	r4, r4, lr
 8080d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080d36:	e79c      	b.n	8080c72 <__udivmoddi4+0x9a>
 8080d38:	f1c6 0720 	rsb	r7, r6, #32
 8080d3c:	40b3      	lsls	r3, r6
 8080d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8080d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8080d46:	fa20 f407 	lsr.w	r4, r0, r7
 8080d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8080d4e:	431c      	orrs	r4, r3
 8080d50:	40f9      	lsrs	r1, r7
 8080d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8080d56:	fa00 f306 	lsl.w	r3, r0, r6
 8080d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8080d5e:	0c20      	lsrs	r0, r4, #16
 8080d60:	fa1f fe8c 	uxth.w	lr, ip
 8080d64:	fb09 1118 	mls	r1, r9, r8, r1
 8080d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8080d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8080d70:	4288      	cmp	r0, r1
 8080d72:	fa02 f206 	lsl.w	r2, r2, r6
 8080d76:	d90b      	bls.n	8080d90 <__udivmoddi4+0x1b8>
 8080d78:	eb1c 0101 	adds.w	r1, ip, r1
 8080d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8080d80:	f080 8088 	bcs.w	8080e94 <__udivmoddi4+0x2bc>
 8080d84:	4288      	cmp	r0, r1
 8080d86:	f240 8085 	bls.w	8080e94 <__udivmoddi4+0x2bc>
 8080d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8080d8e:	4461      	add	r1, ip
 8080d90:	1a09      	subs	r1, r1, r0
 8080d92:	b2a4      	uxth	r4, r4
 8080d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8080d98:	fb09 1110 	mls	r1, r9, r0, r1
 8080d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8080da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8080da4:	458e      	cmp	lr, r1
 8080da6:	d908      	bls.n	8080dba <__udivmoddi4+0x1e2>
 8080da8:	eb1c 0101 	adds.w	r1, ip, r1
 8080dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8080db0:	d26c      	bcs.n	8080e8c <__udivmoddi4+0x2b4>
 8080db2:	458e      	cmp	lr, r1
 8080db4:	d96a      	bls.n	8080e8c <__udivmoddi4+0x2b4>
 8080db6:	3802      	subs	r0, #2
 8080db8:	4461      	add	r1, ip
 8080dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8080dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8080dc2:	eba1 010e 	sub.w	r1, r1, lr
 8080dc6:	42a1      	cmp	r1, r4
 8080dc8:	46c8      	mov	r8, r9
 8080dca:	46a6      	mov	lr, r4
 8080dcc:	d356      	bcc.n	8080e7c <__udivmoddi4+0x2a4>
 8080dce:	d053      	beq.n	8080e78 <__udivmoddi4+0x2a0>
 8080dd0:	b15d      	cbz	r5, 8080dea <__udivmoddi4+0x212>
 8080dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8080dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8080dda:	fa01 f707 	lsl.w	r7, r1, r7
 8080dde:	fa22 f306 	lsr.w	r3, r2, r6
 8080de2:	40f1      	lsrs	r1, r6
 8080de4:	431f      	orrs	r7, r3
 8080de6:	e9c5 7100 	strd	r7, r1, [r5]
 8080dea:	2600      	movs	r6, #0
 8080dec:	4631      	mov	r1, r6
 8080dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8080df2:	f1c2 0320 	rsb	r3, r2, #32
 8080df6:	40d8      	lsrs	r0, r3
 8080df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8080dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8080e00:	4091      	lsls	r1, r2
 8080e02:	4301      	orrs	r1, r0
 8080e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8080e08:	fa1f fe8c 	uxth.w	lr, ip
 8080e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8080e10:	fb07 3610 	mls	r6, r7, r0, r3
 8080e14:	0c0b      	lsrs	r3, r1, #16
 8080e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8080e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8080e1e:	429e      	cmp	r6, r3
 8080e20:	fa04 f402 	lsl.w	r4, r4, r2
 8080e24:	d908      	bls.n	8080e38 <__udivmoddi4+0x260>
 8080e26:	eb1c 0303 	adds.w	r3, ip, r3
 8080e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8080e2e:	d22f      	bcs.n	8080e90 <__udivmoddi4+0x2b8>
 8080e30:	429e      	cmp	r6, r3
 8080e32:	d92d      	bls.n	8080e90 <__udivmoddi4+0x2b8>
 8080e34:	3802      	subs	r0, #2
 8080e36:	4463      	add	r3, ip
 8080e38:	1b9b      	subs	r3, r3, r6
 8080e3a:	b289      	uxth	r1, r1
 8080e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8080e40:	fb07 3316 	mls	r3, r7, r6, r3
 8080e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8080e48:	fb06 f30e 	mul.w	r3, r6, lr
 8080e4c:	428b      	cmp	r3, r1
 8080e4e:	d908      	bls.n	8080e62 <__udivmoddi4+0x28a>
 8080e50:	eb1c 0101 	adds.w	r1, ip, r1
 8080e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8080e58:	d216      	bcs.n	8080e88 <__udivmoddi4+0x2b0>
 8080e5a:	428b      	cmp	r3, r1
 8080e5c:	d914      	bls.n	8080e88 <__udivmoddi4+0x2b0>
 8080e5e:	3e02      	subs	r6, #2
 8080e60:	4461      	add	r1, ip
 8080e62:	1ac9      	subs	r1, r1, r3
 8080e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8080e68:	e738      	b.n	8080cdc <__udivmoddi4+0x104>
 8080e6a:	462e      	mov	r6, r5
 8080e6c:	4628      	mov	r0, r5
 8080e6e:	e705      	b.n	8080c7c <__udivmoddi4+0xa4>
 8080e70:	4606      	mov	r6, r0
 8080e72:	e6e3      	b.n	8080c3c <__udivmoddi4+0x64>
 8080e74:	4618      	mov	r0, r3
 8080e76:	e6f8      	b.n	8080c6a <__udivmoddi4+0x92>
 8080e78:	454b      	cmp	r3, r9
 8080e7a:	d2a9      	bcs.n	8080dd0 <__udivmoddi4+0x1f8>
 8080e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8080e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8080e84:	3801      	subs	r0, #1
 8080e86:	e7a3      	b.n	8080dd0 <__udivmoddi4+0x1f8>
 8080e88:	4646      	mov	r6, r8
 8080e8a:	e7ea      	b.n	8080e62 <__udivmoddi4+0x28a>
 8080e8c:	4620      	mov	r0, r4
 8080e8e:	e794      	b.n	8080dba <__udivmoddi4+0x1e2>
 8080e90:	4640      	mov	r0, r8
 8080e92:	e7d1      	b.n	8080e38 <__udivmoddi4+0x260>
 8080e94:	46d0      	mov	r8, sl
 8080e96:	e77b      	b.n	8080d90 <__udivmoddi4+0x1b8>
 8080e98:	3b02      	subs	r3, #2
 8080e9a:	4461      	add	r1, ip
 8080e9c:	e732      	b.n	8080d04 <__udivmoddi4+0x12c>
 8080e9e:	4630      	mov	r0, r6
 8080ea0:	e709      	b.n	8080cb6 <__udivmoddi4+0xde>
 8080ea2:	4464      	add	r4, ip
 8080ea4:	3802      	subs	r0, #2
 8080ea6:	e742      	b.n	8080d2e <__udivmoddi4+0x156>

08080ea8 <__aeabi_idiv0>:
 8080ea8:	4770      	bx	lr
 8080eaa:	bf00      	nop

08080eac <HAL_UARTEx_RxEventCallback>:
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SDIO_SD_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8080eac:	b580      	push	{r7, lr}
 8080eae:	b082      	sub	sp, #8
 8080eb0:	af00      	add	r7, sp, #0
 8080eb2:	6078      	str	r0, [r7, #4]
 8080eb4:	460b      	mov	r3, r1
 8080eb6:	807b      	strh	r3, [r7, #2]
  SIM_RxEvent();
 8080eb8:	f007 fd92 	bl	80889e0 <SIM_RxEvent>
}
 8080ebc:	bf00      	nop
 8080ebe:	3708      	adds	r7, #8
 8080ec0:	46bd      	mov	sp, r7
 8080ec2:	bd80      	pop	{r7, pc}

08080ec4 <CONTACTOR_READ>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CONTACTOR_READ()
{
 8080ec4:	b580      	push	{r7, lr}
 8080ec6:	af00      	add	r7, sp, #0
  IN[0] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_7);
 8080ec8:	2180      	movs	r1, #128	; 0x80
 8080eca:	484e      	ldr	r0, [pc, #312]	; (8081004 <CONTACTOR_READ+0x140>)
 8080ecc:	f002 fd82 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080ed0:	4603      	mov	r3, r0
 8080ed2:	2b00      	cmp	r3, #0
 8080ed4:	bf14      	ite	ne
 8080ed6:	2301      	movne	r3, #1
 8080ed8:	2300      	moveq	r3, #0
 8080eda:	b2da      	uxtb	r2, r3
 8080edc:	4b4a      	ldr	r3, [pc, #296]	; (8081008 <CONTACTOR_READ+0x144>)
 8080ede:	701a      	strb	r2, [r3, #0]
  IN[1] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9);
 8080ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080ee4:	4847      	ldr	r0, [pc, #284]	; (8081004 <CONTACTOR_READ+0x140>)
 8080ee6:	f002 fd75 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080eea:	4603      	mov	r3, r0
 8080eec:	2b00      	cmp	r3, #0
 8080eee:	bf14      	ite	ne
 8080ef0:	2301      	movne	r3, #1
 8080ef2:	2300      	moveq	r3, #0
 8080ef4:	b2da      	uxtb	r2, r3
 8080ef6:	4b44      	ldr	r3, [pc, #272]	; (8081008 <CONTACTOR_READ+0x144>)
 8080ef8:	705a      	strb	r2, [r3, #1]
  IN[2] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11);
 8080efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8080efe:	4841      	ldr	r0, [pc, #260]	; (8081004 <CONTACTOR_READ+0x140>)
 8080f00:	f002 fd68 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f04:	4603      	mov	r3, r0
 8080f06:	2b00      	cmp	r3, #0
 8080f08:	bf14      	ite	ne
 8080f0a:	2301      	movne	r3, #1
 8080f0c:	2300      	moveq	r3, #0
 8080f0e:	b2da      	uxtb	r2, r3
 8080f10:	4b3d      	ldr	r3, [pc, #244]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f12:	709a      	strb	r2, [r3, #2]
  IN[3] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8080f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8080f18:	483a      	ldr	r0, [pc, #232]	; (8081004 <CONTACTOR_READ+0x140>)
 8080f1a:	f002 fd5b 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f1e:	4603      	mov	r3, r0
 8080f20:	2b00      	cmp	r3, #0
 8080f22:	bf14      	ite	ne
 8080f24:	2301      	movne	r3, #1
 8080f26:	2300      	moveq	r3, #0
 8080f28:	b2da      	uxtb	r2, r3
 8080f2a:	4b37      	ldr	r3, [pc, #220]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f2c:	70da      	strb	r2, [r3, #3]
  IN[4] = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_15);
 8080f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8080f32:	4834      	ldr	r0, [pc, #208]	; (8081004 <CONTACTOR_READ+0x140>)
 8080f34:	f002 fd4e 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f38:	4603      	mov	r3, r0
 8080f3a:	2b00      	cmp	r3, #0
 8080f3c:	bf14      	ite	ne
 8080f3e:	2301      	movne	r3, #1
 8080f40:	2300      	moveq	r3, #0
 8080f42:	b2da      	uxtb	r2, r3
 8080f44:	4b30      	ldr	r3, [pc, #192]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f46:	711a      	strb	r2, [r3, #4]
  IN[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8080f48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8080f4c:	482f      	ldr	r0, [pc, #188]	; (808100c <CONTACTOR_READ+0x148>)
 8080f4e:	f002 fd41 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f52:	4603      	mov	r3, r0
 8080f54:	2b00      	cmp	r3, #0
 8080f56:	bf14      	ite	ne
 8080f58:	2301      	movne	r3, #1
 8080f5a:	2300      	moveq	r3, #0
 8080f5c:	b2da      	uxtb	r2, r3
 8080f5e:	4b2a      	ldr	r3, [pc, #168]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f60:	715a      	strb	r2, [r3, #5]
  IN[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8080f62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8080f66:	4829      	ldr	r0, [pc, #164]	; (808100c <CONTACTOR_READ+0x148>)
 8080f68:	f002 fd34 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f6c:	4603      	mov	r3, r0
 8080f6e:	2b00      	cmp	r3, #0
 8080f70:	bf14      	ite	ne
 8080f72:	2301      	movne	r3, #1
 8080f74:	2300      	moveq	r3, #0
 8080f76:	b2da      	uxtb	r2, r3
 8080f78:	4b23      	ldr	r3, [pc, #140]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f7a:	719a      	strb	r2, [r3, #6]
  IN[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8080f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8080f80:	4823      	ldr	r0, [pc, #140]	; (8081010 <CONTACTOR_READ+0x14c>)
 8080f82:	f002 fd27 	bl	80839d4 <HAL_GPIO_ReadPin>
 8080f86:	4603      	mov	r3, r0
 8080f88:	2b00      	cmp	r3, #0
 8080f8a:	bf14      	ite	ne
 8080f8c:	2301      	movne	r3, #1
 8080f8e:	2300      	moveq	r3, #0
 8080f90:	b2da      	uxtb	r2, r3
 8080f92:	4b1d      	ldr	r3, [pc, #116]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f94:	71da      	strb	r2, [r3, #7]
  CONTACTOR1 = ~((uint8_t)IN[4] << 3 | (uint8_t)IN[5] << 2 | (uint8_t)IN[6] << 1 | (uint8_t)IN[7]);
 8080f96:	4b1c      	ldr	r3, [pc, #112]	; (8081008 <CONTACTOR_READ+0x144>)
 8080f98:	791b      	ldrb	r3, [r3, #4]
 8080f9a:	00db      	lsls	r3, r3, #3
 8080f9c:	b25a      	sxtb	r2, r3
 8080f9e:	4b1a      	ldr	r3, [pc, #104]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fa0:	795b      	ldrb	r3, [r3, #5]
 8080fa2:	009b      	lsls	r3, r3, #2
 8080fa4:	b25b      	sxtb	r3, r3
 8080fa6:	4313      	orrs	r3, r2
 8080fa8:	b25a      	sxtb	r2, r3
 8080faa:	4b17      	ldr	r3, [pc, #92]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fac:	799b      	ldrb	r3, [r3, #6]
 8080fae:	005b      	lsls	r3, r3, #1
 8080fb0:	b25b      	sxtb	r3, r3
 8080fb2:	4313      	orrs	r3, r2
 8080fb4:	b25a      	sxtb	r2, r3
 8080fb6:	4b14      	ldr	r3, [pc, #80]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fb8:	79db      	ldrb	r3, [r3, #7]
 8080fba:	b25b      	sxtb	r3, r3
 8080fbc:	4313      	orrs	r3, r2
 8080fbe:	b25b      	sxtb	r3, r3
 8080fc0:	b2db      	uxtb	r3, r3
 8080fc2:	43db      	mvns	r3, r3
 8080fc4:	b2da      	uxtb	r2, r3
 8080fc6:	4b13      	ldr	r3, [pc, #76]	; (8081014 <CONTACTOR_READ+0x150>)
 8080fc8:	701a      	strb	r2, [r3, #0]
  CONTACTOR2 = ~((uint8_t)IN[0] << 3 | (uint8_t)IN[1] << 2 | (uint8_t)IN[2] << 1 | (uint8_t)IN[3]);
 8080fca:	4b0f      	ldr	r3, [pc, #60]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fcc:	781b      	ldrb	r3, [r3, #0]
 8080fce:	00db      	lsls	r3, r3, #3
 8080fd0:	b25a      	sxtb	r2, r3
 8080fd2:	4b0d      	ldr	r3, [pc, #52]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fd4:	785b      	ldrb	r3, [r3, #1]
 8080fd6:	009b      	lsls	r3, r3, #2
 8080fd8:	b25b      	sxtb	r3, r3
 8080fda:	4313      	orrs	r3, r2
 8080fdc:	b25a      	sxtb	r2, r3
 8080fde:	4b0a      	ldr	r3, [pc, #40]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fe0:	789b      	ldrb	r3, [r3, #2]
 8080fe2:	005b      	lsls	r3, r3, #1
 8080fe4:	b25b      	sxtb	r3, r3
 8080fe6:	4313      	orrs	r3, r2
 8080fe8:	b25a      	sxtb	r2, r3
 8080fea:	4b07      	ldr	r3, [pc, #28]	; (8081008 <CONTACTOR_READ+0x144>)
 8080fec:	78db      	ldrb	r3, [r3, #3]
 8080fee:	b25b      	sxtb	r3, r3
 8080ff0:	4313      	orrs	r3, r2
 8080ff2:	b25b      	sxtb	r3, r3
 8080ff4:	b2db      	uxtb	r3, r3
 8080ff6:	43db      	mvns	r3, r3
 8080ff8:	b2da      	uxtb	r2, r3
 8080ffa:	4b07      	ldr	r3, [pc, #28]	; (8081018 <CONTACTOR_READ+0x154>)
 8080ffc:	701a      	strb	r2, [r3, #0]
}
 8080ffe:	bf00      	nop
 8081000:	bd80      	pop	{r7, pc}
 8081002:	bf00      	nop
 8081004:	40021000 	.word	0x40021000
 8081008:	20000908 	.word	0x20000908
 808100c:	40020400 	.word	0x40020400
 8081010:	40020c00 	.word	0x40020c00
 8081014:	20000910 	.word	0x20000910
 8081018:	20000911 	.word	0x20000911

0808101c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 808101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081020:	b0d7      	sub	sp, #348	; 0x15c
 8081022:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */
  SCB->VTOR = (uint32_t)APP1_START_ADDR;
 8081024:	4b74      	ldr	r3, [pc, #464]	; (80811f8 <main+0x1dc>)
 8081026:	4a75      	ldr	r2, [pc, #468]	; (80811fc <main+0x1e0>)
 8081028:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 808102a:	f001 fb75 	bl	8082718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 808102e:	f000 f917 	bl	8081260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8081032:	f000 fb13 	bl	808165c <MX_GPIO_Init>
  MX_DMA_Init();
 8081036:	f000 fad3 	bl	80815e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 808103a:	f000 fa53 	bl	80814e4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 808103e:	f000 faa5 	bl	808158c <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8081042:	f000 fa79 	bl	8081538 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8081046:	f000 f975 	bl	8081334 <MX_RTC_Init>
  MX_USART1_UART_Init();
 808104a:	f000 fa21 	bl	8081490 <MX_USART1_UART_Init>
  MX_SDIO_SD_Init();
 808104e:	f000 f9ff 	bl	8081450 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8081052:	f007 f8cb 	bl	80881ec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  SIM_Init(PWR_GPIO_Port, PWR_Pin);
 8081056:	2110      	movs	r1, #16
 8081058:	4869      	ldr	r0, [pc, #420]	; (8081200 <main+0x1e4>)
 808105a:	f007 fc8f 	bl	808897c <SIM_Init>

  HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)"\r\nSIM_Init/102	 Connecting\r\n", 28, HAL_MAX_DELAY); // Truy�?n lệnh ATCommnd sang Sim
 808105e:	f04f 33ff 	mov.w	r3, #4294967295
 8081062:	221c      	movs	r2, #28
 8081064:	4967      	ldr	r1, [pc, #412]	; (8081204 <main+0x1e8>)
 8081066:	4868      	ldr	r0, [pc, #416]	; (8081208 <main+0x1ec>)
 8081068:	f005 f8a1 	bl	80861ae <HAL_UART_Transmit>
  SIM_Config();
 808106c:	f007 fce4 	bl	8088a38 <SIM_Config>
  SIM_GetLocalTime(TimeString);
 8081070:	4866      	ldr	r0, [pc, #408]	; (808120c <main+0x1f0>)
 8081072:	f007 fdbf 	bl	8088bf4 <SIM_GetLocalTime>
  HTTP_InfoTypeDef httpInfo = {0};
 8081076:	f107 0334 	add.w	r3, r7, #52	; 0x34
 808107a:	22cc      	movs	r2, #204	; 0xcc
 808107c:	2100      	movs	r1, #0
 808107e:	4618      	mov	r0, r3
 8081080:	f008 fbe8 	bl	8089854 <memset>

  SIM_GetPhoneNumber(phoneNumber);
 8081084:	4862      	ldr	r0, [pc, #392]	; (8081210 <main+0x1f4>)
 8081086:	f007 fddf 	bl	8088c48 <SIM_GetPhoneNumber>
  SplitTime(&GetMinSec);
 808108a:	4862      	ldr	r0, [pc, #392]	; (8081214 <main+0x1f8>)
 808108c:	f000 fbd8 	bl	8081840 <SplitTime>
  Set_Time(5, Timeptr->Minute, Timeptr->Second);
 8081090:	4b61      	ldr	r3, [pc, #388]	; (8081218 <main+0x1fc>)
 8081092:	681b      	ldr	r3, [r3, #0]
 8081094:	781b      	ldrb	r3, [r3, #0]
 8081096:	4619      	mov	r1, r3
 8081098:	4b5f      	ldr	r3, [pc, #380]	; (8081218 <main+0x1fc>)
 808109a:	681b      	ldr	r3, [r3, #0]
 808109c:	785b      	ldrb	r3, [r3, #1]
 808109e:	461a      	mov	r2, r3
 80810a0:	2005      	movs	r0, #5
 80810a2:	f000 fecd 	bl	8081e40 <Set_Time>
  Set_Alarm(Timeptr->Minute);
 80810a6:	4b5c      	ldr	r3, [pc, #368]	; (8081218 <main+0x1fc>)
 80810a8:	681b      	ldr	r3, [r3, #0]
 80810aa:	781b      	ldrb	r3, [r3, #0]
 80810ac:	4618      	mov	r0, r3
 80810ae:	f000 fe43 	bl	8081d38 <Set_Alarm>

  SIM_GetLocalTime(TimeString);
 80810b2:	4856      	ldr	r0, [pc, #344]	; (808120c <main+0x1f0>)
 80810b4:	f007 fd9e 	bl	8088bf4 <SIM_GetLocalTime>
  sprintf(jsonBuffer,
 80810b8:	4b58      	ldr	r3, [pc, #352]	; (808121c <main+0x200>)
 80810ba:	681b      	ldr	r3, [r3, #0]
 80810bc:	4618      	mov	r0, r3
 80810be:	f7ff fa43 	bl	8080548 <__aeabi_f2d>
 80810c2:	4680      	mov	r8, r0
 80810c4:	4689      	mov	r9, r1
 80810c6:	4b56      	ldr	r3, [pc, #344]	; (8081220 <main+0x204>)
 80810c8:	681b      	ldr	r3, [r3, #0]
 80810ca:	4618      	mov	r0, r3
 80810cc:	f7ff fa3c 	bl	8080548 <__aeabi_f2d>
 80810d0:	4682      	mov	sl, r0
 80810d2:	468b      	mov	fp, r1
 80810d4:	4b53      	ldr	r3, [pc, #332]	; (8081224 <main+0x208>)
 80810d6:	681b      	ldr	r3, [r3, #0]
 80810d8:	4618      	mov	r0, r3
 80810da:	f7ff fa35 	bl	8080548 <__aeabi_f2d>
 80810de:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80810e2:	4b51      	ldr	r3, [pc, #324]	; (8081228 <main+0x20c>)
 80810e4:	681b      	ldr	r3, [r3, #0]
 80810e6:	4618      	mov	r0, r3
 80810e8:	f7ff fa2e 	bl	8080548 <__aeabi_f2d>
 80810ec:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80810f0:	4b4e      	ldr	r3, [pc, #312]	; (808122c <main+0x210>)
 80810f2:	681b      	ldr	r3, [r3, #0]
 80810f4:	4618      	mov	r0, r3
 80810f6:	f7ff fa27 	bl	8080548 <__aeabi_f2d>
 80810fa:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80810fe:	4b4c      	ldr	r3, [pc, #304]	; (8081230 <main+0x214>)
 8081100:	681b      	ldr	r3, [r3, #0]
 8081102:	4618      	mov	r0, r3
 8081104:	f7ff fa20 	bl	8080548 <__aeabi_f2d>
 8081108:	4604      	mov	r4, r0
 808110a:	460d      	mov	r5, r1
 808110c:	4b49      	ldr	r3, [pc, #292]	; (8081234 <main+0x218>)
 808110e:	881b      	ldrh	r3, [r3, #0]
 8081110:	617b      	str	r3, [r7, #20]
 8081112:	4b49      	ldr	r3, [pc, #292]	; (8081238 <main+0x21c>)
 8081114:	881b      	ldrh	r3, [r3, #0]
 8081116:	613b      	str	r3, [r7, #16]
          ",\"Coil 1\":\"%u\""
          ",\"Coil 2\":\"%u\""
          ",\"Coil 3\":\"%u\""
          ",\"Coil 4\":\"%u\"}",
          TimeString, phoneNumber, CosFi, Voltage, Current, Frequency, ActivePower, ReactivePower,
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081118:	4b48      	ldr	r3, [pc, #288]	; (808123c <main+0x220>)
 808111a:	781b      	ldrb	r3, [r3, #0]
 808111c:	f083 0301 	eor.w	r3, r3, #1
 8081120:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 8081122:	60fb      	str	r3, [r7, #12]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081124:	4b45      	ldr	r3, [pc, #276]	; (808123c <main+0x220>)
 8081126:	785b      	ldrb	r3, [r3, #1]
 8081128:	f083 0301 	eor.w	r3, r3, #1
 808112c:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 808112e:	60bb      	str	r3, [r7, #8]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081130:	4b42      	ldr	r3, [pc, #264]	; (808123c <main+0x220>)
 8081132:	789b      	ldrb	r3, [r3, #2]
 8081134:	f083 0301 	eor.w	r3, r3, #1
 8081138:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 808113a:	607b      	str	r3, [r7, #4]
          AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 808113c:	4b3f      	ldr	r3, [pc, #252]	; (808123c <main+0x220>)
 808113e:	78db      	ldrb	r3, [r3, #3]
 8081140:	f083 0301 	eor.w	r3, r3, #1
 8081144:	b2db      	uxtb	r3, r3
  sprintf(jsonBuffer,
 8081146:	461e      	mov	r6, r3
          (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081148:	4b3d      	ldr	r3, [pc, #244]	; (8081240 <main+0x224>)
 808114a:	78db      	ldrb	r3, [r3, #3]
  sprintf(jsonBuffer,
 808114c:	f003 0001 	and.w	r0, r3, #1
          (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081150:	4b3b      	ldr	r3, [pc, #236]	; (8081240 <main+0x224>)
 8081152:	78db      	ldrb	r3, [r3, #3]
 8081154:	105b      	asrs	r3, r3, #1
  sprintf(jsonBuffer,
 8081156:	f003 0101 	and.w	r1, r3, #1
          ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 808115a:	4b39      	ldr	r3, [pc, #228]	; (8081240 <main+0x224>)
 808115c:	78db      	ldrb	r3, [r3, #3]
 808115e:	109b      	asrs	r3, r3, #2
  sprintf(jsonBuffer,
 8081160:	f003 0201 	and.w	r2, r3, #1
          ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081164:	4b36      	ldr	r3, [pc, #216]	; (8081240 <main+0x224>)
 8081166:	78db      	ldrb	r3, [r3, #3]
 8081168:	10db      	asrs	r3, r3, #3
  sprintf(jsonBuffer,
 808116a:	f003 0301 	and.w	r3, r3, #1
 808116e:	9315      	str	r3, [sp, #84]	; 0x54
 8081170:	9214      	str	r2, [sp, #80]	; 0x50
 8081172:	9113      	str	r1, [sp, #76]	; 0x4c
 8081174:	9012      	str	r0, [sp, #72]	; 0x48
 8081176:	9611      	str	r6, [sp, #68]	; 0x44
 8081178:	687a      	ldr	r2, [r7, #4]
 808117a:	9210      	str	r2, [sp, #64]	; 0x40
 808117c:	68ba      	ldr	r2, [r7, #8]
 808117e:	920f      	str	r2, [sp, #60]	; 0x3c
 8081180:	68fa      	ldr	r2, [r7, #12]
 8081182:	920e      	str	r2, [sp, #56]	; 0x38
 8081184:	693a      	ldr	r2, [r7, #16]
 8081186:	920d      	str	r2, [sp, #52]	; 0x34
 8081188:	697b      	ldr	r3, [r7, #20]
 808118a:	930c      	str	r3, [sp, #48]	; 0x30
 808118c:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8081190:	ed97 7b06 	vldr	d7, [r7, #24]
 8081194:	ed8d 7b08 	vstr	d7, [sp, #32]
 8081198:	ed97 7b08 	vldr	d7, [r7, #32]
 808119c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80811a0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80811a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80811a8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80811ac:	e9cd 8900 	strd	r8, r9, [sp]
 80811b0:	4b17      	ldr	r3, [pc, #92]	; (8081210 <main+0x1f4>)
 80811b2:	4a16      	ldr	r2, [pc, #88]	; (808120c <main+0x1f0>)
 80811b4:	4923      	ldr	r1, [pc, #140]	; (8081244 <main+0x228>)
 80811b6:	4824      	ldr	r0, [pc, #144]	; (8081248 <main+0x22c>)
 80811b8:	f008 ffd6 	bl	808a168 <siprintf>
  SIM_HTTP_POST(
 80811bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80811c0:	4a21      	ldr	r2, [pc, #132]	; (8081248 <main+0x22c>)
 80811c2:	4922      	ldr	r1, [pc, #136]	; (808124c <main+0x230>)
 80811c4:	4822      	ldr	r0, [pc, #136]	; (8081250 <main+0x234>)
 80811c6:	f007 fee7 	bl	8088f98 <SIM_HTTP_POST>
      "https://capacitor-129e8-default-rtdb.firebaseio.com/testA.json",
      "application/json", jsonBuffer, &httpInfo);

  HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_ReceivedBuff, 8);
 80811ca:	2208      	movs	r2, #8
 80811cc:	4921      	ldr	r1, [pc, #132]	; (8081254 <main+0x238>)
 80811ce:	4822      	ldr	r0, [pc, #136]	; (8081258 <main+0x23c>)
 80811d0:	f005 f921 	bl	8086416 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80811d4:	2201      	movs	r2, #1
 80811d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80811da:	4820      	ldr	r0, [pc, #128]	; (808125c <main+0x240>)
 80811dc:	f002 fc12 	bl	8083a04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80811e0:	2201      	movs	r2, #1
 80811e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80811e6:	4806      	ldr	r0, [pc, #24]	; (8081200 <main+0x1e4>)
 80811e8:	f002 fc0c 	bl	8083a04 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SMS_process();
 80811ec:	f007 fde2 	bl	8088db4 <SMS_process>
    SendDataToServer();
 80811f0:	f000 fb82 	bl	80818f8 <SendDataToServer>
    SMS_process();
 80811f4:	e7fa      	b.n	80811ec <main+0x1d0>
 80811f6:	bf00      	nop
 80811f8:	e000ed00 	.word	0xe000ed00
 80811fc:	08080000 	.word	0x08080000
 8081200:	40020800 	.word	0x40020800
 8081204:	0808c868 	.word	0x0808c868
 8081208:	20000320 	.word	0x20000320
 808120c:	20000b90 	.word	0x20000b90
 8081210:	20000dd8 	.word	0x20000dd8
 8081214:	20000594 	.word	0x20000594
 8081218:	20000000 	.word	0x20000000
 808121c:	2000000c 	.word	0x2000000c
 8081220:	20000014 	.word	0x20000014
 8081224:	20000010 	.word	0x20000010
 8081228:	20000020 	.word	0x20000020
 808122c:	20000018 	.word	0x20000018
 8081230:	2000001c 	.word	0x2000001c
 8081234:	20000912 	.word	0x20000912
 8081238:	20000914 	.word	0x20000914
 808123c:	20000908 	.word	0x20000908
 8081240:	200006b8 	.word	0x200006b8
 8081244:	0808c888 	.word	0x0808c888
 8081248:	200006d8 	.word	0x200006d8
 808124c:	0808ca00 	.word	0x0808ca00
 8081250:	0808ca14 	.word	0x0808ca14
 8081254:	200006cc 	.word	0x200006cc
 8081258:	20000364 	.word	0x20000364
 808125c:	40020000 	.word	0x40020000

08081260 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8081260:	b580      	push	{r7, lr}
 8081262:	b094      	sub	sp, #80	; 0x50
 8081264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8081266:	f107 0320 	add.w	r3, r7, #32
 808126a:	2230      	movs	r2, #48	; 0x30
 808126c:	2100      	movs	r1, #0
 808126e:	4618      	mov	r0, r3
 8081270:	f008 faf0 	bl	8089854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8081274:	f107 030c 	add.w	r3, r7, #12
 8081278:	2200      	movs	r2, #0
 808127a:	601a      	str	r2, [r3, #0]
 808127c:	605a      	str	r2, [r3, #4]
 808127e:	609a      	str	r2, [r3, #8]
 8081280:	60da      	str	r2, [r3, #12]
 8081282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8081284:	2300      	movs	r3, #0
 8081286:	60bb      	str	r3, [r7, #8]
 8081288:	4b28      	ldr	r3, [pc, #160]	; (808132c <SystemClock_Config+0xcc>)
 808128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808128c:	4a27      	ldr	r2, [pc, #156]	; (808132c <SystemClock_Config+0xcc>)
 808128e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8081292:	6413      	str	r3, [r2, #64]	; 0x40
 8081294:	4b25      	ldr	r3, [pc, #148]	; (808132c <SystemClock_Config+0xcc>)
 8081296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 808129c:	60bb      	str	r3, [r7, #8]
 808129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80812a0:	2300      	movs	r3, #0
 80812a2:	607b      	str	r3, [r7, #4]
 80812a4:	4b22      	ldr	r3, [pc, #136]	; (8081330 <SystemClock_Config+0xd0>)
 80812a6:	681b      	ldr	r3, [r3, #0]
 80812a8:	4a21      	ldr	r2, [pc, #132]	; (8081330 <SystemClock_Config+0xd0>)
 80812aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80812ae:	6013      	str	r3, [r2, #0]
 80812b0:	4b1f      	ldr	r3, [pc, #124]	; (8081330 <SystemClock_Config+0xd0>)
 80812b2:	681b      	ldr	r3, [r3, #0]
 80812b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80812b8:	607b      	str	r3, [r7, #4]
 80812ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80812bc:	2309      	movs	r3, #9
 80812be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80812c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80812c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80812c6:	2301      	movs	r3, #1
 80812c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80812ca:	2302      	movs	r3, #2
 80812cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80812ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80812d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80812d4:	2304      	movs	r3, #4
 80812d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80812d8:	2348      	movs	r3, #72	; 0x48
 80812da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80812dc:	2302      	movs	r3, #2
 80812de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80812e0:	2303      	movs	r3, #3
 80812e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80812e4:	f107 0320 	add.w	r3, r7, #32
 80812e8:	4618      	mov	r0, r3
 80812ea:	f002 fba5 	bl	8083a38 <HAL_RCC_OscConfig>
 80812ee:	4603      	mov	r3, r0
 80812f0:	2b00      	cmp	r3, #0
 80812f2:	d001      	beq.n	80812f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80812f4:	f000 fe08 	bl	8081f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80812f8:	230f      	movs	r3, #15
 80812fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80812fc:	2302      	movs	r3, #2
 80812fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8081300:	2300      	movs	r3, #0
 8081302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8081304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8081308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 808130a:	2300      	movs	r3, #0
 808130c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 808130e:	f107 030c 	add.w	r3, r7, #12
 8081312:	2102      	movs	r1, #2
 8081314:	4618      	mov	r0, r3
 8081316:	f002 fe07 	bl	8083f28 <HAL_RCC_ClockConfig>
 808131a:	4603      	mov	r3, r0
 808131c:	2b00      	cmp	r3, #0
 808131e:	d001      	beq.n	8081324 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8081320:	f000 fdf2 	bl	8081f08 <Error_Handler>
  }
}
 8081324:	bf00      	nop
 8081326:	3750      	adds	r7, #80	; 0x50
 8081328:	46bd      	mov	sp, r7
 808132a:	bd80      	pop	{r7, pc}
 808132c:	40023800 	.word	0x40023800
 8081330:	40007000 	.word	0x40007000

08081334 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8081334:	b580      	push	{r7, lr}
 8081336:	b090      	sub	sp, #64	; 0x40
 8081338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 808133a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 808133e:	2200      	movs	r2, #0
 8081340:	601a      	str	r2, [r3, #0]
 8081342:	605a      	str	r2, [r3, #4]
 8081344:	609a      	str	r2, [r3, #8]
 8081346:	60da      	str	r2, [r3, #12]
 8081348:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 808134a:	2300      	movs	r3, #0
 808134c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 808134e:	463b      	mov	r3, r7
 8081350:	2228      	movs	r2, #40	; 0x28
 8081352:	2100      	movs	r1, #0
 8081354:	4618      	mov	r0, r3
 8081356:	f008 fa7d 	bl	8089854 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 808135a:	4b3a      	ldr	r3, [pc, #232]	; (8081444 <MX_RTC_Init+0x110>)
 808135c:	4a3a      	ldr	r2, [pc, #232]	; (8081448 <MX_RTC_Init+0x114>)
 808135e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8081360:	4b38      	ldr	r3, [pc, #224]	; (8081444 <MX_RTC_Init+0x110>)
 8081362:	2200      	movs	r2, #0
 8081364:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8081366:	4b37      	ldr	r3, [pc, #220]	; (8081444 <MX_RTC_Init+0x110>)
 8081368:	227f      	movs	r2, #127	; 0x7f
 808136a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 808136c:	4b35      	ldr	r3, [pc, #212]	; (8081444 <MX_RTC_Init+0x110>)
 808136e:	22ff      	movs	r2, #255	; 0xff
 8081370:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8081372:	4b34      	ldr	r3, [pc, #208]	; (8081444 <MX_RTC_Init+0x110>)
 8081374:	2200      	movs	r2, #0
 8081376:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8081378:	4b32      	ldr	r3, [pc, #200]	; (8081444 <MX_RTC_Init+0x110>)
 808137a:	2200      	movs	r2, #0
 808137c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 808137e:	4b31      	ldr	r3, [pc, #196]	; (8081444 <MX_RTC_Init+0x110>)
 8081380:	2200      	movs	r2, #0
 8081382:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8081384:	482f      	ldr	r0, [pc, #188]	; (8081444 <MX_RTC_Init+0x110>)
 8081386:	f003 f8d1 	bl	808452c <HAL_RTC_Init>
 808138a:	4603      	mov	r3, r0
 808138c:	2b00      	cmp	r3, #0
 808138e:	d001      	beq.n	8081394 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8081390:	f000 fdba 	bl	8081f08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
   */
  sTime.Hours = 20;
 8081394:	2314      	movs	r3, #20
 8081396:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 808139a:	2300      	movs	r3, #0
 808139c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 80813a0:	2300      	movs	r3, #0
 80813a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80813a6:	2300      	movs	r3, #0
 80813a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80813aa:	2300      	movs	r3, #0
 80813ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80813ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80813b2:	2200      	movs	r2, #0
 80813b4:	4619      	mov	r1, r3
 80813b6:	4823      	ldr	r0, [pc, #140]	; (8081444 <MX_RTC_Init+0x110>)
 80813b8:	f003 f92e 	bl	8084618 <HAL_RTC_SetTime>
 80813bc:	4603      	mov	r3, r0
 80813be:	2b00      	cmp	r3, #0
 80813c0:	d001      	beq.n	80813c6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80813c2:	f000 fda1 	bl	8081f08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80813c6:	2303      	movs	r3, #3
 80813c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 80813cc:	2304      	movs	r3, #4
 80813ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 20;
 80813d2:	2314      	movs	r3, #20
 80813d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 22;
 80813d8:	2316      	movs	r3, #22
 80813da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80813de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80813e2:	2200      	movs	r2, #0
 80813e4:	4619      	mov	r1, r3
 80813e6:	4817      	ldr	r0, [pc, #92]	; (8081444 <MX_RTC_Init+0x110>)
 80813e8:	f003 f9b0 	bl	808474c <HAL_RTC_SetDate>
 80813ec:	4603      	mov	r3, r0
 80813ee:	2b00      	cmp	r3, #0
 80813f0:	d001      	beq.n	80813f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80813f2:	f000 fd89 	bl	8081f08 <Error_Handler>
  }

  /** Enable the Alarm A
   */
  sAlarm.AlarmTime.Hours = 0;
 80813f6:	2300      	movs	r3, #0
 80813f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 20;
 80813fa:	2314      	movs	r3, #20
 80813fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80813fe:	2300      	movs	r3, #0
 8081400:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8081402:	2300      	movs	r3, #0
 8081404:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8081406:	2300      	movs	r3, #0
 8081408:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 808140a:	2300      	movs	r3, #0
 808140c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 808140e:	4b0f      	ldr	r3, [pc, #60]	; (808144c <MX_RTC_Init+0x118>)
 8081410:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8081412:	2300      	movs	r3, #0
 8081414:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8081416:	2300      	movs	r3, #0
 8081418:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 808141a:	2301      	movs	r3, #1
 808141c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8081420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8081424:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8081426:	463b      	mov	r3, r7
 8081428:	2200      	movs	r2, #0
 808142a:	4619      	mov	r1, r3
 808142c:	4805      	ldr	r0, [pc, #20]	; (8081444 <MX_RTC_Init+0x110>)
 808142e:	f003 fa11 	bl	8084854 <HAL_RTC_SetAlarm_IT>
 8081432:	4603      	mov	r3, r0
 8081434:	2b00      	cmp	r3, #0
 8081436:	d001      	beq.n	808143c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8081438:	f000 fd66 	bl	8081f08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 808143c:	bf00      	nop
 808143e:	3740      	adds	r7, #64	; 0x40
 8081440:	46bd      	mov	sp, r7
 8081442:	bd80      	pop	{r7, pc}
 8081444:	2000027c 	.word	0x2000027c
 8081448:	40002800 	.word	0x40002800
 808144c:	80800080 	.word	0x80800080

08081450 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8081450:	b480      	push	{r7}
 8081452:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8081454:	4b0c      	ldr	r3, [pc, #48]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 8081456:	4a0d      	ldr	r2, [pc, #52]	; (808148c <MX_SDIO_SD_Init+0x3c>)
 8081458:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 808145a:	4b0b      	ldr	r3, [pc, #44]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 808145c:	2200      	movs	r2, #0
 808145e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8081460:	4b09      	ldr	r3, [pc, #36]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 8081462:	2200      	movs	r2, #0
 8081464:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8081466:	4b08      	ldr	r3, [pc, #32]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 8081468:	2200      	movs	r2, #0
 808146a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 808146c:	4b06      	ldr	r3, [pc, #24]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 808146e:	2200      	movs	r2, #0
 8081470:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8081472:	4b05      	ldr	r3, [pc, #20]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 8081474:	2200      	movs	r2, #0
 8081476:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8081478:	4b03      	ldr	r3, [pc, #12]	; (8081488 <MX_SDIO_SD_Init+0x38>)
 808147a:	2200      	movs	r2, #0
 808147c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 808147e:	bf00      	nop
 8081480:	46bd      	mov	sp, r7
 8081482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081486:	4770      	bx	lr
 8081488:	2000029c 	.word	0x2000029c
 808148c:	40012c00 	.word	0x40012c00

08081490 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8081490:	b580      	push	{r7, lr}
 8081492:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8081494:	4b11      	ldr	r3, [pc, #68]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 8081496:	4a12      	ldr	r2, [pc, #72]	; (80814e0 <MX_USART1_UART_Init+0x50>)
 8081498:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 808149a:	4b10      	ldr	r3, [pc, #64]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 808149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80814a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80814a2:	4b0e      	ldr	r3, [pc, #56]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814a4:	2200      	movs	r2, #0
 80814a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80814a8:	4b0c      	ldr	r3, [pc, #48]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814aa:	2200      	movs	r2, #0
 80814ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80814ae:	4b0b      	ldr	r3, [pc, #44]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814b0:	2200      	movs	r2, #0
 80814b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80814b4:	4b09      	ldr	r3, [pc, #36]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814b6:	220c      	movs	r2, #12
 80814b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80814ba:	4b08      	ldr	r3, [pc, #32]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814bc:	2200      	movs	r2, #0
 80814be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80814c0:	4b06      	ldr	r3, [pc, #24]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814c2:	2200      	movs	r2, #0
 80814c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80814c6:	4805      	ldr	r0, [pc, #20]	; (80814dc <MX_USART1_UART_Init+0x4c>)
 80814c8:	f004 fe24 	bl	8086114 <HAL_UART_Init>
 80814cc:	4603      	mov	r3, r0
 80814ce:	2b00      	cmp	r3, #0
 80814d0:	d001      	beq.n	80814d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80814d2:	f000 fd19 	bl	8081f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80814d6:	bf00      	nop
 80814d8:	bd80      	pop	{r7, pc}
 80814da:	bf00      	nop
 80814dc:	20000320 	.word	0x20000320
 80814e0:	40011000 	.word	0x40011000

080814e4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80814e4:	b580      	push	{r7, lr}
 80814e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80814e8:	4b11      	ldr	r3, [pc, #68]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 80814ea:	4a12      	ldr	r2, [pc, #72]	; (8081534 <MX_USART2_UART_Init+0x50>)
 80814ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80814ee:	4b10      	ldr	r3, [pc, #64]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 80814f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80814f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80814f6:	4b0e      	ldr	r3, [pc, #56]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 80814f8:	2200      	movs	r2, #0
 80814fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80814fc:	4b0c      	ldr	r3, [pc, #48]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 80814fe:	2200      	movs	r2, #0
 8081500:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8081502:	4b0b      	ldr	r3, [pc, #44]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 8081504:	2200      	movs	r2, #0
 8081506:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8081508:	4b09      	ldr	r3, [pc, #36]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 808150a:	220c      	movs	r2, #12
 808150c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 808150e:	4b08      	ldr	r3, [pc, #32]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 8081510:	2200      	movs	r2, #0
 8081512:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8081514:	4b06      	ldr	r3, [pc, #24]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 8081516:	2200      	movs	r2, #0
 8081518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 808151a:	4805      	ldr	r0, [pc, #20]	; (8081530 <MX_USART2_UART_Init+0x4c>)
 808151c:	f004 fdfa 	bl	8086114 <HAL_UART_Init>
 8081520:	4603      	mov	r3, r0
 8081522:	2b00      	cmp	r3, #0
 8081524:	d001      	beq.n	808152a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8081526:	f000 fcef 	bl	8081f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 808152a:	bf00      	nop
 808152c:	bd80      	pop	{r7, pc}
 808152e:	bf00      	nop
 8081530:	20000364 	.word	0x20000364
 8081534:	40004400 	.word	0x40004400

08081538 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8081538:	b580      	push	{r7, lr}
 808153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 808153c:	4b11      	ldr	r3, [pc, #68]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 808153e:	4a12      	ldr	r2, [pc, #72]	; (8081588 <MX_USART3_UART_Init+0x50>)
 8081540:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8081542:	4b10      	ldr	r3, [pc, #64]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 8081544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8081548:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 808154a:	4b0e      	ldr	r3, [pc, #56]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 808154c:	2200      	movs	r2, #0
 808154e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8081550:	4b0c      	ldr	r3, [pc, #48]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 8081552:	2200      	movs	r2, #0
 8081554:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8081556:	4b0b      	ldr	r3, [pc, #44]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 8081558:	2200      	movs	r2, #0
 808155a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 808155c:	4b09      	ldr	r3, [pc, #36]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 808155e:	220c      	movs	r2, #12
 8081560:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8081562:	4b08      	ldr	r3, [pc, #32]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 8081564:	2200      	movs	r2, #0
 8081566:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8081568:	4b06      	ldr	r3, [pc, #24]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 808156a:	2200      	movs	r2, #0
 808156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 808156e:	4805      	ldr	r0, [pc, #20]	; (8081584 <MX_USART3_UART_Init+0x4c>)
 8081570:	f004 fdd0 	bl	8086114 <HAL_UART_Init>
 8081574:	4603      	mov	r3, r0
 8081576:	2b00      	cmp	r3, #0
 8081578:	d001      	beq.n	808157e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 808157a:	f000 fcc5 	bl	8081f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 808157e:	bf00      	nop
 8081580:	bd80      	pop	{r7, pc}
 8081582:	bf00      	nop
 8081584:	200003a8 	.word	0x200003a8
 8081588:	40004800 	.word	0x40004800

0808158c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 808158c:	b580      	push	{r7, lr}
 808158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8081590:	4b11      	ldr	r3, [pc, #68]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 8081592:	4a12      	ldr	r2, [pc, #72]	; (80815dc <MX_USART6_UART_Init+0x50>)
 8081594:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8081596:	4b10      	ldr	r3, [pc, #64]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 8081598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 808159c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 808159e:	4b0e      	ldr	r3, [pc, #56]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815a0:	2200      	movs	r2, #0
 80815a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80815a4:	4b0c      	ldr	r3, [pc, #48]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815a6:	2200      	movs	r2, #0
 80815a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80815aa:	4b0b      	ldr	r3, [pc, #44]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815ac:	2200      	movs	r2, #0
 80815ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80815b0:	4b09      	ldr	r3, [pc, #36]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815b2:	220c      	movs	r2, #12
 80815b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80815b6:	4b08      	ldr	r3, [pc, #32]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815b8:	2200      	movs	r2, #0
 80815ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80815bc:	4b06      	ldr	r3, [pc, #24]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815be:	2200      	movs	r2, #0
 80815c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80815c2:	4805      	ldr	r0, [pc, #20]	; (80815d8 <MX_USART6_UART_Init+0x4c>)
 80815c4:	f004 fda6 	bl	8086114 <HAL_UART_Init>
 80815c8:	4603      	mov	r3, r0
 80815ca:	2b00      	cmp	r3, #0
 80815cc:	d001      	beq.n	80815d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80815ce:	f000 fc9b 	bl	8081f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */
}
 80815d2:	bf00      	nop
 80815d4:	bd80      	pop	{r7, pc}
 80815d6:	bf00      	nop
 80815d8:	200003ec 	.word	0x200003ec
 80815dc:	40011400 	.word	0x40011400

080815e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80815e0:	b580      	push	{r7, lr}
 80815e2:	b082      	sub	sp, #8
 80815e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80815e6:	2300      	movs	r3, #0
 80815e8:	607b      	str	r3, [r7, #4]
 80815ea:	4b1b      	ldr	r3, [pc, #108]	; (8081658 <MX_DMA_Init+0x78>)
 80815ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815ee:	4a1a      	ldr	r2, [pc, #104]	; (8081658 <MX_DMA_Init+0x78>)
 80815f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80815f4:	6313      	str	r3, [r2, #48]	; 0x30
 80815f6:	4b18      	ldr	r3, [pc, #96]	; (8081658 <MX_DMA_Init+0x78>)
 80815f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80815fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80815fe:	607b      	str	r3, [r7, #4]
 8081600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8081602:	2300      	movs	r3, #0
 8081604:	603b      	str	r3, [r7, #0]
 8081606:	4b14      	ldr	r3, [pc, #80]	; (8081658 <MX_DMA_Init+0x78>)
 8081608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808160a:	4a13      	ldr	r2, [pc, #76]	; (8081658 <MX_DMA_Init+0x78>)
 808160c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8081610:	6313      	str	r3, [r2, #48]	; 0x30
 8081612:	4b11      	ldr	r3, [pc, #68]	; (8081658 <MX_DMA_Init+0x78>)
 8081614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 808161a:	603b      	str	r3, [r7, #0]
 808161c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 808161e:	2200      	movs	r2, #0
 8081620:	2100      	movs	r1, #0
 8081622:	200c      	movs	r0, #12
 8081624:	f001 f9ff 	bl	8082a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8081628:	200c      	movs	r0, #12
 808162a:	f001 fa18 	bl	8082a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 808162e:	2200      	movs	r2, #0
 8081630:	2100      	movs	r1, #0
 8081632:	2010      	movs	r0, #16
 8081634:	f001 f9f7 	bl	8082a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8081638:	2010      	movs	r0, #16
 808163a:	f001 fa10 	bl	8082a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 808163e:	2200      	movs	r2, #0
 8081640:	2100      	movs	r1, #0
 8081642:	203a      	movs	r0, #58	; 0x3a
 8081644:	f001 f9ef 	bl	8082a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8081648:	203a      	movs	r0, #58	; 0x3a
 808164a:	f001 fa08 	bl	8082a5e <HAL_NVIC_EnableIRQ>
}
 808164e:	bf00      	nop
 8081650:	3708      	adds	r7, #8
 8081652:	46bd      	mov	sp, r7
 8081654:	bd80      	pop	{r7, pc}
 8081656:	bf00      	nop
 8081658:	40023800 	.word	0x40023800

0808165c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 808165c:	b580      	push	{r7, lr}
 808165e:	b08c      	sub	sp, #48	; 0x30
 8081660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8081662:	f107 031c 	add.w	r3, r7, #28
 8081666:	2200      	movs	r2, #0
 8081668:	601a      	str	r2, [r3, #0]
 808166a:	605a      	str	r2, [r3, #4]
 808166c:	609a      	str	r2, [r3, #8]
 808166e:	60da      	str	r2, [r3, #12]
 8081670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8081672:	2300      	movs	r3, #0
 8081674:	61bb      	str	r3, [r7, #24]
 8081676:	4b6c      	ldr	r3, [pc, #432]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808167a:	4a6b      	ldr	r2, [pc, #428]	; (8081828 <MX_GPIO_Init+0x1cc>)
 808167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8081680:	6313      	str	r3, [r2, #48]	; 0x30
 8081682:	4b69      	ldr	r3, [pc, #420]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808168a:	61bb      	str	r3, [r7, #24]
 808168c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 808168e:	2300      	movs	r3, #0
 8081690:	617b      	str	r3, [r7, #20]
 8081692:	4b65      	ldr	r3, [pc, #404]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081696:	4a64      	ldr	r2, [pc, #400]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081698:	f043 0304 	orr.w	r3, r3, #4
 808169c:	6313      	str	r3, [r2, #48]	; 0x30
 808169e:	4b62      	ldr	r3, [pc, #392]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816a2:	f003 0304 	and.w	r3, r3, #4
 80816a6:	617b      	str	r3, [r7, #20]
 80816a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80816aa:	2300      	movs	r3, #0
 80816ac:	613b      	str	r3, [r7, #16]
 80816ae:	4b5e      	ldr	r3, [pc, #376]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816b2:	4a5d      	ldr	r2, [pc, #372]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816b4:	f043 0301 	orr.w	r3, r3, #1
 80816b8:	6313      	str	r3, [r2, #48]	; 0x30
 80816ba:	4b5b      	ldr	r3, [pc, #364]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816be:	f003 0301 	and.w	r3, r3, #1
 80816c2:	613b      	str	r3, [r7, #16]
 80816c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80816c6:	2300      	movs	r3, #0
 80816c8:	60fb      	str	r3, [r7, #12]
 80816ca:	4b57      	ldr	r3, [pc, #348]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816ce:	4a56      	ldr	r2, [pc, #344]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816d0:	f043 0310 	orr.w	r3, r3, #16
 80816d4:	6313      	str	r3, [r2, #48]	; 0x30
 80816d6:	4b54      	ldr	r3, [pc, #336]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816da:	f003 0310 	and.w	r3, r3, #16
 80816de:	60fb      	str	r3, [r7, #12]
 80816e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80816e2:	2300      	movs	r3, #0
 80816e4:	60bb      	str	r3, [r7, #8]
 80816e6:	4b50      	ldr	r3, [pc, #320]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816ea:	4a4f      	ldr	r2, [pc, #316]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816ec:	f043 0302 	orr.w	r3, r3, #2
 80816f0:	6313      	str	r3, [r2, #48]	; 0x30
 80816f2:	4b4d      	ldr	r3, [pc, #308]	; (8081828 <MX_GPIO_Init+0x1cc>)
 80816f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816f6:	f003 0302 	and.w	r3, r3, #2
 80816fa:	60bb      	str	r3, [r7, #8]
 80816fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80816fe:	2300      	movs	r3, #0
 8081700:	607b      	str	r3, [r7, #4]
 8081702:	4b49      	ldr	r3, [pc, #292]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081706:	4a48      	ldr	r2, [pc, #288]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081708:	f043 0308 	orr.w	r3, r3, #8
 808170c:	6313      	str	r3, [r2, #48]	; 0x30
 808170e:	4b46      	ldr	r3, [pc, #280]	; (8081828 <MX_GPIO_Init+0x1cc>)
 8081710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081712:	f003 0308 	and.w	r3, r3, #8
 8081716:	607b      	str	r3, [r7, #4]
 8081718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | PWR_Pin | RST_Pin, GPIO_PIN_RESET);
 808171a:	2200      	movs	r2, #0
 808171c:	2138      	movs	r1, #56	; 0x38
 808171e:	4843      	ldr	r0, [pc, #268]	; (808182c <MX_GPIO_Init+0x1d0>)
 8081720:	f002 f970 	bl	8083a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DTR_Pin | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8081724:	2200      	movs	r2, #0
 8081726:	f240 6101 	movw	r1, #1537	; 0x601
 808172a:	4841      	ldr	r0, [pc, #260]	; (8081830 <MX_GPIO_Init+0x1d4>)
 808172c:	f002 f96a 	bl	8083a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | PWRD14_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8081730:	2200      	movs	r2, #0
 8081732:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8081736:	483f      	ldr	r0, [pc, #252]	; (8081834 <MX_GPIO_Init+0x1d8>)
 8081738:	f002 f964 	bl	8083a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 808173c:	2200      	movs	r2, #0
 808173e:	2101      	movs	r1, #1
 8081740:	483d      	ldr	r0, [pc, #244]	; (8081838 <MX_GPIO_Init+0x1dc>)
 8081742:	f002 f95f 	bl	8083a04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PWR_Pin RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3 | PWR_Pin | RST_Pin;
 8081746:	2338      	movs	r3, #56	; 0x38
 8081748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 808174a:	2301      	movs	r3, #1
 808174c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 808174e:	2300      	movs	r3, #0
 8081750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8081752:	2300      	movs	r3, #0
 8081754:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8081756:	f107 031c 	add.w	r3, r7, #28
 808175a:	4619      	mov	r1, r3
 808175c:	4833      	ldr	r0, [pc, #204]	; (808182c <MX_GPIO_Init+0x1d0>)
 808175e:	f001 ff9d 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pins : DTR_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = DTR_Pin | GPIO_PIN_9 | GPIO_PIN_10;
 8081762:	f240 6301 	movw	r3, #1537	; 0x601
 8081766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8081768:	2301      	movs	r3, #1
 808176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 808176c:	2300      	movs	r3, #0
 808176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8081770:	2300      	movs	r3, #0
 8081772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8081774:	f107 031c 	add.w	r3, r7, #28
 8081778:	4619      	mov	r1, r3
 808177a:	482d      	ldr	r0, [pc, #180]	; (8081830 <MX_GPIO_Init+0x1d4>)
 808177c:	f001 ff8e 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_15;
 8081780:	f64a 2380 	movw	r3, #43648	; 0xaa80
 8081784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8081786:	2300      	movs	r3, #0
 8081788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 808178a:	2301      	movs	r3, #1
 808178c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 808178e:	f107 031c 	add.w	r3, r7, #28
 8081792:	4619      	mov	r1, r3
 8081794:	4828      	ldr	r0, [pc, #160]	; (8081838 <MX_GPIO_Init+0x1dc>)
 8081796:	f001 ff81 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_15;
 808179a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 808179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80817a0:	2300      	movs	r3, #0
 80817a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80817a4:	2301      	movs	r3, #1
 80817a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80817a8:	f107 031c 	add.w	r3, r7, #28
 80817ac:	4619      	mov	r1, r3
 80817ae:	4823      	ldr	r0, [pc, #140]	; (808183c <MX_GPIO_Init+0x1e0>)
 80817b0:	f001 ff74 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80817b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80817b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80817ba:	2300      	movs	r3, #0
 80817bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80817be:	2301      	movs	r3, #1
 80817c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80817c2:	f107 031c 	add.w	r3, r7, #28
 80817c6:	4619      	mov	r1, r3
 80817c8:	481a      	ldr	r0, [pc, #104]	; (8081834 <MX_GPIO_Init+0x1d8>)
 80817ca:	f001 ff67 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PWRD14_Pin PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | PWRD14_Pin | GPIO_PIN_15;
 80817ce:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80817d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80817d4:	2301      	movs	r3, #1
 80817d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80817d8:	2300      	movs	r3, #0
 80817da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80817dc:	2300      	movs	r3, #0
 80817de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80817e0:	f107 031c 	add.w	r3, r7, #28
 80817e4:	4619      	mov	r1, r3
 80817e6:	4813      	ldr	r0, [pc, #76]	; (8081834 <MX_GPIO_Init+0x1d8>)
 80817e8:	f001 ff58 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80817ec:	2380      	movs	r3, #128	; 0x80
 80817ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80817f0:	2300      	movs	r3, #0
 80817f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80817f4:	2300      	movs	r3, #0
 80817f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80817f8:	f107 031c 	add.w	r3, r7, #28
 80817fc:	4619      	mov	r1, r3
 80817fe:	480d      	ldr	r0, [pc, #52]	; (8081834 <MX_GPIO_Init+0x1d8>)
 8081800:	f001 ff4c 	bl	808369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8081804:	2301      	movs	r3, #1
 8081806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8081808:	2301      	movs	r3, #1
 808180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 808180c:	2300      	movs	r3, #0
 808180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8081810:	2300      	movs	r3, #0
 8081812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8081814:	f107 031c 	add.w	r3, r7, #28
 8081818:	4619      	mov	r1, r3
 808181a:	4807      	ldr	r0, [pc, #28]	; (8081838 <MX_GPIO_Init+0x1dc>)
 808181c:	f001 ff3e 	bl	808369c <HAL_GPIO_Init>
}
 8081820:	bf00      	nop
 8081822:	3730      	adds	r7, #48	; 0x30
 8081824:	46bd      	mov	sp, r7
 8081826:	bd80      	pop	{r7, pc}
 8081828:	40023800 	.word	0x40023800
 808182c:	40020800 	.word	0x40020800
 8081830:	40020000 	.word	0x40020000
 8081834:	40020c00 	.word	0x40020c00
 8081838:	40021000 	.word	0x40021000
 808183c:	40020400 	.word	0x40020400

08081840 <SplitTime>:

/* USER CODE BEGIN 4 */
void SplitTime(Time_TypeDef *Timeptr)
{
 8081840:	b580      	push	{r7, lr}
 8081842:	b084      	sub	sp, #16
 8081844:	af00      	add	r7, sp, #0
 8081846:	6078      	str	r0, [r7, #4]
  char *p = NULL;
 8081848:	2300      	movs	r3, #0
 808184a:	60fb      	str	r3, [r7, #12]
  char *q = NULL;
 808184c:	2300      	movs	r3, #0
 808184e:	60bb      	str	r3, [r7, #8]
  SIM_GetLocalTime(TimeString);
 8081850:	4819      	ldr	r0, [pc, #100]	; (80818b8 <SplitTime+0x78>)
 8081852:	f007 f9cf 	bl	8088bf4 <SIM_GetLocalTime>
  p = strtok(TimeString, "/");
 8081856:	4919      	ldr	r1, [pc, #100]	; (80818bc <SplitTime+0x7c>)
 8081858:	4817      	ldr	r0, [pc, #92]	; (80818b8 <SplitTime+0x78>)
 808185a:	f008 fcc3 	bl	808a1e4 <strtok>
 808185e:	60f8      	str	r0, [r7, #12]
  p = strtok(NULL, "/");
 8081860:	4916      	ldr	r1, [pc, #88]	; (80818bc <SplitTime+0x7c>)
 8081862:	2000      	movs	r0, #0
 8081864:	f008 fcbe 	bl	808a1e4 <strtok>
 8081868:	60f8      	str	r0, [r7, #12]
  p = strtok(NULL, ",");
 808186a:	4915      	ldr	r1, [pc, #84]	; (80818c0 <SplitTime+0x80>)
 808186c:	2000      	movs	r0, #0
 808186e:	f008 fcb9 	bl	808a1e4 <strtok>
 8081872:	60f8      	str	r0, [r7, #12]
  p = strtok(NULL, ":");
 8081874:	4913      	ldr	r1, [pc, #76]	; (80818c4 <SplitTime+0x84>)
 8081876:	2000      	movs	r0, #0
 8081878:	f008 fcb4 	bl	808a1e4 <strtok>
 808187c:	60f8      	str	r0, [r7, #12]
  q = strtok(NULL, ":");
 808187e:	4911      	ldr	r1, [pc, #68]	; (80818c4 <SplitTime+0x84>)
 8081880:	2000      	movs	r0, #0
 8081882:	f008 fcaf 	bl	808a1e4 <strtok>
 8081886:	60b8      	str	r0, [r7, #8]
  Timeptr->Minute = atoi(q);
 8081888:	68b8      	ldr	r0, [r7, #8]
 808188a:	f007 ffa7 	bl	80897dc <atoi>
 808188e:	4603      	mov	r3, r0
 8081890:	b2da      	uxtb	r2, r3
 8081892:	687b      	ldr	r3, [r7, #4]
 8081894:	701a      	strb	r2, [r3, #0]
  p = strtok(NULL, ":");
 8081896:	490b      	ldr	r1, [pc, #44]	; (80818c4 <SplitTime+0x84>)
 8081898:	2000      	movs	r0, #0
 808189a:	f008 fca3 	bl	808a1e4 <strtok>
 808189e:	60f8      	str	r0, [r7, #12]
  Timeptr->Second = atoi(p);
 80818a0:	68f8      	ldr	r0, [r7, #12]
 80818a2:	f007 ff9b 	bl	80897dc <atoi>
 80818a6:	4603      	mov	r3, r0
 80818a8:	b2da      	uxtb	r2, r3
 80818aa:	687b      	ldr	r3, [r7, #4]
 80818ac:	705a      	strb	r2, [r3, #1]
}
 80818ae:	bf00      	nop
 80818b0:	3710      	adds	r7, #16
 80818b2:	46bd      	mov	sp, r7
 80818b4:	bd80      	pop	{r7, pc}
 80818b6:	bf00      	nop
 80818b8:	20000b90 	.word	0x20000b90
 80818bc:	0808ca54 	.word	0x0808ca54
 80818c0:	0808ca58 	.word	0x0808ca58
 80818c4:	0808ca5c 	.word	0x0808ca5c

080818c8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80818c8:	b580      	push	{r7, lr}
 80818ca:	b082      	sub	sp, #8
 80818cc:	af00      	add	r7, sp, #0
 80818ce:	6078      	str	r0, [r7, #4]
  if (huart->Instance == huart2.Instance)
 80818d0:	687b      	ldr	r3, [r7, #4]
 80818d2:	681a      	ldr	r2, [r3, #0]
 80818d4:	4b06      	ldr	r3, [pc, #24]	; (80818f0 <HAL_UART_RxCpltCallback+0x28>)
 80818d6:	681b      	ldr	r3, [r3, #0]
 80818d8:	429a      	cmp	r2, r3
 80818da:	d104      	bne.n	80818e6 <HAL_UART_RxCpltCallback+0x1e>
  {
    HAL_UART_Receive_IT(&huart2, (uint8_t *)UART2_ReceivedBuff, 8);
 80818dc:	2208      	movs	r2, #8
 80818de:	4905      	ldr	r1, [pc, #20]	; (80818f4 <HAL_UART_RxCpltCallback+0x2c>)
 80818e0:	4803      	ldr	r0, [pc, #12]	; (80818f0 <HAL_UART_RxCpltCallback+0x28>)
 80818e2:	f004 fd98 	bl	8086416 <HAL_UART_Receive_IT>
  }
}
 80818e6:	bf00      	nop
 80818e8:	3708      	adds	r7, #8
 80818ea:	46bd      	mov	sp, r7
 80818ec:	bd80      	pop	{r7, pc}
 80818ee:	bf00      	nop
 80818f0:	20000364 	.word	0x20000364
 80818f4:	200006cc 	.word	0x200006cc

080818f8 <SendDataToServer>:
void SendDataToServer()
{
 80818f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80818fc:	b0a3      	sub	sp, #140	; 0x8c
 80818fe:	af16      	add	r7, sp, #88	; 0x58
  if (RTC_Flag == true)
 8081900:	4bb3      	ldr	r3, [pc, #716]	; (8081bd0 <SendDataToServer+0x2d8>)
 8081902:	781b      	ldrb	r3, [r3, #0]
 8081904:	2b01      	cmp	r3, #1
 8081906:	f040 81f7 	bne.w	8081cf8 <SendDataToServer+0x400>
  {
    SplitTime(&GetMinSec);
 808190a:	48b2      	ldr	r0, [pc, #712]	; (8081bd4 <SendDataToServer+0x2dc>)
 808190c:	f7ff ff98 	bl	8081840 <SplitTime>
    if (Timeptr->Minute % 10 == 0)
 8081910:	4bb1      	ldr	r3, [pc, #708]	; (8081bd8 <SendDataToServer+0x2e0>)
 8081912:	681b      	ldr	r3, [r3, #0]
 8081914:	781a      	ldrb	r2, [r3, #0]
 8081916:	4bb1      	ldr	r3, [pc, #708]	; (8081bdc <SendDataToServer+0x2e4>)
 8081918:	fba3 1302 	umull	r1, r3, r3, r2
 808191c:	08d9      	lsrs	r1, r3, #3
 808191e:	460b      	mov	r3, r1
 8081920:	009b      	lsls	r3, r3, #2
 8081922:	440b      	add	r3, r1
 8081924:	005b      	lsls	r3, r3, #1
 8081926:	1ad3      	subs	r3, r2, r3
 8081928:	b2db      	uxtb	r3, r3
 808192a:	2b00      	cmp	r3, #0
 808192c:	f040 81e4 	bne.w	8081cf8 <SendDataToServer+0x400>
    {
      SIM_GetLocalTime(TimeString);
 8081930:	48ab      	ldr	r0, [pc, #684]	; (8081be0 <SendDataToServer+0x2e8>)
 8081932:	f007 f95f 	bl	8088bf4 <SIM_GetLocalTime>
      // Case 1:
      HAL_UART_Transmit(&huart6, (uint8_t *)RTU_CosFi, 8, 1000);
 8081936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808193a:	2208      	movs	r2, #8
 808193c:	49a9      	ldr	r1, [pc, #676]	; (8081be4 <SendDataToServer+0x2ec>)
 808193e:	48aa      	ldr	r0, [pc, #680]	; (8081be8 <SendDataToServer+0x2f0>)
 8081940:	f004 fc35 	bl	80861ae <HAL_UART_Transmit>
      RS485_Master_Receive(COSF_ReceivedBuff, 9);
 8081944:	2109      	movs	r1, #9
 8081946:	48a9      	ldr	r0, [pc, #676]	; (8081bec <SendDataToServer+0x2f4>)
 8081948:	f006 ffa0 	bl	808888c <RS485_Master_Receive>
      CosFi = (float)(((uint16_t)COSF_ReceivedBuff[5] << 8) | ((uint16_t)COSF_ReceivedBuff[6])) / 100;
 808194c:	4ba7      	ldr	r3, [pc, #668]	; (8081bec <SendDataToServer+0x2f4>)
 808194e:	795b      	ldrb	r3, [r3, #5]
 8081950:	021b      	lsls	r3, r3, #8
 8081952:	4aa6      	ldr	r2, [pc, #664]	; (8081bec <SendDataToServer+0x2f4>)
 8081954:	7992      	ldrb	r2, [r2, #6]
 8081956:	4313      	orrs	r3, r2
 8081958:	ee07 3a90 	vmov	s15, r3
 808195c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8081960:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8081bf0 <SendDataToServer+0x2f8>
 8081964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8081968:	4ba2      	ldr	r3, [pc, #648]	; (8081bf4 <SendDataToServer+0x2fc>)
 808196a:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 808196e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081972:	f000 ff43 	bl	80827fc <HAL_Delay>
      // Case 2:
      RS485_transmit(&huart6, m_RS485Query2);
 8081976:	4ba0      	ldr	r3, [pc, #640]	; (8081bf8 <SendDataToServer+0x300>)
 8081978:	cb0e      	ldmia	r3, {r1, r2, r3}
 808197a:	489b      	ldr	r0, [pc, #620]	; (8081be8 <SendDataToServer+0x2f0>)
 808197c:	f006 fefc 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(V_ReceivedBuff, 9);
 8081980:	2109      	movs	r1, #9
 8081982:	489e      	ldr	r0, [pc, #632]	; (8081bfc <SendDataToServer+0x304>)
 8081984:	f006 ff82 	bl	808888c <RS485_Master_Receive>
      Voltage = (float)(((uint16_t)V_ReceivedBuff[5] << 8) | ((uint16_t)V_ReceivedBuff[6]));
 8081988:	4b9c      	ldr	r3, [pc, #624]	; (8081bfc <SendDataToServer+0x304>)
 808198a:	795b      	ldrb	r3, [r3, #5]
 808198c:	021b      	lsls	r3, r3, #8
 808198e:	4a9b      	ldr	r2, [pc, #620]	; (8081bfc <SendDataToServer+0x304>)
 8081990:	7992      	ldrb	r2, [r2, #6]
 8081992:	4313      	orrs	r3, r2
 8081994:	ee07 3a90 	vmov	s15, r3
 8081998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 808199c:	4b98      	ldr	r3, [pc, #608]	; (8081c00 <SendDataToServer+0x308>)
 808199e:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 80819a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80819a6:	f000 ff29 	bl	80827fc <HAL_Delay>
      // Case 3:
      RS485_transmit(&huart6, m_RS485Query3);
 80819aa:	4b96      	ldr	r3, [pc, #600]	; (8081c04 <SendDataToServer+0x30c>)
 80819ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80819ae:	488e      	ldr	r0, [pc, #568]	; (8081be8 <SendDataToServer+0x2f0>)
 80819b0:	f006 fee2 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(I_ReceivedBuff, 9);
 80819b4:	2109      	movs	r1, #9
 80819b6:	4894      	ldr	r0, [pc, #592]	; (8081c08 <SendDataToServer+0x310>)
 80819b8:	f006 ff68 	bl	808888c <RS485_Master_Receive>
      Current = (float)(((uint16_t)I_ReceivedBuff[5] << 8) | ((uint16_t)I_ReceivedBuff[6])) / 100;
 80819bc:	4b92      	ldr	r3, [pc, #584]	; (8081c08 <SendDataToServer+0x310>)
 80819be:	795b      	ldrb	r3, [r3, #5]
 80819c0:	021b      	lsls	r3, r3, #8
 80819c2:	4a91      	ldr	r2, [pc, #580]	; (8081c08 <SendDataToServer+0x310>)
 80819c4:	7992      	ldrb	r2, [r2, #6]
 80819c6:	4313      	orrs	r3, r2
 80819c8:	ee07 3a90 	vmov	s15, r3
 80819cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80819d0:	eddf 6a87 	vldr	s13, [pc, #540]	; 8081bf0 <SendDataToServer+0x2f8>
 80819d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80819d8:	4b8c      	ldr	r3, [pc, #560]	; (8081c0c <SendDataToServer+0x314>)
 80819da:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 80819de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80819e2:	f000 ff0b 	bl	80827fc <HAL_Delay>
      // Case 4:
      RS485_transmit(&huart6, m_RS485Query4);
 80819e6:	4b8a      	ldr	r3, [pc, #552]	; (8081c10 <SendDataToServer+0x318>)
 80819e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80819ea:	487f      	ldr	r0, [pc, #508]	; (8081be8 <SendDataToServer+0x2f0>)
 80819ec:	f006 fec4 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(F_ReceivedBuff, 9);
 80819f0:	2109      	movs	r1, #9
 80819f2:	4888      	ldr	r0, [pc, #544]	; (8081c14 <SendDataToServer+0x31c>)
 80819f4:	f006 ff4a 	bl	808888c <RS485_Master_Receive>
      Frequency = (float)(((uint16_t)F_ReceivedBuff[5] << 8) | ((uint16_t)F_ReceivedBuff[6])) / 10;
 80819f8:	4b86      	ldr	r3, [pc, #536]	; (8081c14 <SendDataToServer+0x31c>)
 80819fa:	795b      	ldrb	r3, [r3, #5]
 80819fc:	021b      	lsls	r3, r3, #8
 80819fe:	4a85      	ldr	r2, [pc, #532]	; (8081c14 <SendDataToServer+0x31c>)
 8081a00:	7992      	ldrb	r2, [r2, #6]
 8081a02:	4313      	orrs	r3, r2
 8081a04:	ee07 3a90 	vmov	s15, r3
 8081a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8081a0c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8081a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8081a14:	4b80      	ldr	r3, [pc, #512]	; (8081c18 <SendDataToServer+0x320>)
 8081a16:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081a1e:	f000 feed 	bl	80827fc <HAL_Delay>
      // Case 5:
      RS485_transmit(&huart6, m_RS485QueryAvQ);
 8081a22:	4b7e      	ldr	r3, [pc, #504]	; (8081c1c <SendDataToServer+0x324>)
 8081a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081a26:	4870      	ldr	r0, [pc, #448]	; (8081be8 <SendDataToServer+0x2f0>)
 8081a28:	f006 fea6 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(AvQ_ReceivedBuff, 9);
 8081a2c:	2109      	movs	r1, #9
 8081a2e:	487c      	ldr	r0, [pc, #496]	; (8081c20 <SendDataToServer+0x328>)
 8081a30:	f006 ff2c 	bl	808888c <RS485_Master_Receive>
      AvQ = ((uint16_t)AvQ_ReceivedBuff[5] << 8) | ((uint16_t)AvQ_ReceivedBuff[6]);
 8081a34:	4b7a      	ldr	r3, [pc, #488]	; (8081c20 <SendDataToServer+0x328>)
 8081a36:	795b      	ldrb	r3, [r3, #5]
 8081a38:	021b      	lsls	r3, r3, #8
 8081a3a:	b21a      	sxth	r2, r3
 8081a3c:	4b78      	ldr	r3, [pc, #480]	; (8081c20 <SendDataToServer+0x328>)
 8081a3e:	799b      	ldrb	r3, [r3, #6]
 8081a40:	b21b      	sxth	r3, r3
 8081a42:	4313      	orrs	r3, r2
 8081a44:	b21b      	sxth	r3, r3
 8081a46:	b29a      	uxth	r2, r3
 8081a48:	4b76      	ldr	r3, [pc, #472]	; (8081c24 <SendDataToServer+0x32c>)
 8081a4a:	801a      	strh	r2, [r3, #0]
      HAL_Delay(500);
 8081a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081a50:	f000 fed4 	bl	80827fc <HAL_Delay>
      // Case 5:
      RS485_transmit(&huart6, m_RS485QueryP);
 8081a54:	4b74      	ldr	r3, [pc, #464]	; (8081c28 <SendDataToServer+0x330>)
 8081a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081a58:	4863      	ldr	r0, [pc, #396]	; (8081be8 <SendDataToServer+0x2f0>)
 8081a5a:	f006 fe8d 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(P_ReceivedBuff, 9);
 8081a5e:	2109      	movs	r1, #9
 8081a60:	4872      	ldr	r0, [pc, #456]	; (8081c2c <SendDataToServer+0x334>)
 8081a62:	f006 ff13 	bl	808888c <RS485_Master_Receive>
      ActivePower = (((uint16_t)P_ReceivedBuff[5] << 8) | ((uint16_t)P_ReceivedBuff[6])) / 1000;
 8081a66:	4b71      	ldr	r3, [pc, #452]	; (8081c2c <SendDataToServer+0x334>)
 8081a68:	795b      	ldrb	r3, [r3, #5]
 8081a6a:	021b      	lsls	r3, r3, #8
 8081a6c:	4a6f      	ldr	r2, [pc, #444]	; (8081c2c <SendDataToServer+0x334>)
 8081a6e:	7992      	ldrb	r2, [r2, #6]
 8081a70:	4313      	orrs	r3, r2
 8081a72:	4a6f      	ldr	r2, [pc, #444]	; (8081c30 <SendDataToServer+0x338>)
 8081a74:	fb82 1203 	smull	r1, r2, r2, r3
 8081a78:	1192      	asrs	r2, r2, #6
 8081a7a:	17db      	asrs	r3, r3, #31
 8081a7c:	1ad3      	subs	r3, r2, r3
 8081a7e:	ee07 3a90 	vmov	s15, r3
 8081a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8081a86:	4b6b      	ldr	r3, [pc, #428]	; (8081c34 <SendDataToServer+0x33c>)
 8081a88:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081a90:	f000 feb4 	bl	80827fc <HAL_Delay>
      // Case 7:
      RS485_transmit(&huart6, m_RS485QueryQ);
 8081a94:	4b68      	ldr	r3, [pc, #416]	; (8081c38 <SendDataToServer+0x340>)
 8081a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081a98:	4853      	ldr	r0, [pc, #332]	; (8081be8 <SendDataToServer+0x2f0>)
 8081a9a:	f006 fe6d 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(Q_ReceivedBuff, 9);
 8081a9e:	2109      	movs	r1, #9
 8081aa0:	4866      	ldr	r0, [pc, #408]	; (8081c3c <SendDataToServer+0x344>)
 8081aa2:	f006 fef3 	bl	808888c <RS485_Master_Receive>
      ReactivePower = (((uint16_t)Q_ReceivedBuff[5] << 8) | ((uint16_t)Q_ReceivedBuff[6])) / 1000;
 8081aa6:	4b65      	ldr	r3, [pc, #404]	; (8081c3c <SendDataToServer+0x344>)
 8081aa8:	795b      	ldrb	r3, [r3, #5]
 8081aaa:	021b      	lsls	r3, r3, #8
 8081aac:	4a63      	ldr	r2, [pc, #396]	; (8081c3c <SendDataToServer+0x344>)
 8081aae:	7992      	ldrb	r2, [r2, #6]
 8081ab0:	4313      	orrs	r3, r2
 8081ab2:	4a5f      	ldr	r2, [pc, #380]	; (8081c30 <SendDataToServer+0x338>)
 8081ab4:	fb82 1203 	smull	r1, r2, r2, r3
 8081ab8:	1192      	asrs	r2, r2, #6
 8081aba:	17db      	asrs	r3, r3, #31
 8081abc:	1ad3      	subs	r3, r2, r3
 8081abe:	ee07 3a90 	vmov	s15, r3
 8081ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8081ac6:	4b5e      	ldr	r3, [pc, #376]	; (8081c40 <SendDataToServer+0x348>)
 8081ac8:	edc3 7a00 	vstr	s15, [r3]
      HAL_Delay(500);
 8081acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081ad0:	f000 fe94 	bl	80827fc <HAL_Delay>
      // Case 8:
      RS485_transmit(&huart6, m_RS485QueryAvP);
 8081ad4:	4b5b      	ldr	r3, [pc, #364]	; (8081c44 <SendDataToServer+0x34c>)
 8081ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081ad8:	4843      	ldr	r0, [pc, #268]	; (8081be8 <SendDataToServer+0x2f0>)
 8081ada:	f006 fe4d 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(AvP_ReceivedBuff, 9);
 8081ade:	2109      	movs	r1, #9
 8081ae0:	4859      	ldr	r0, [pc, #356]	; (8081c48 <SendDataToServer+0x350>)
 8081ae2:	f006 fed3 	bl	808888c <RS485_Master_Receive>
      AvP = ((uint16_t)AvP_ReceivedBuff[5] << 8) | ((uint16_t)AvP_ReceivedBuff[6]);
 8081ae6:	4b58      	ldr	r3, [pc, #352]	; (8081c48 <SendDataToServer+0x350>)
 8081ae8:	795b      	ldrb	r3, [r3, #5]
 8081aea:	021b      	lsls	r3, r3, #8
 8081aec:	b21a      	sxth	r2, r3
 8081aee:	4b56      	ldr	r3, [pc, #344]	; (8081c48 <SendDataToServer+0x350>)
 8081af0:	799b      	ldrb	r3, [r3, #6]
 8081af2:	b21b      	sxth	r3, r3
 8081af4:	4313      	orrs	r3, r2
 8081af6:	b21b      	sxth	r3, r3
 8081af8:	b29a      	uxth	r2, r3
 8081afa:	4b54      	ldr	r3, [pc, #336]	; (8081c4c <SendDataToServer+0x354>)
 8081afc:	801a      	strh	r2, [r3, #0]
      HAL_Delay(500);
 8081afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081b02:	f000 fe7b 	bl	80827fc <HAL_Delay>
      ////Case 9:
      CONTACTOR_READ();
 8081b06:	f7ff f9dd 	bl	8080ec4 <CONTACTOR_READ>
      RS485_transmit(&huart6, m_RS485Query_coil);
 8081b0a:	4b51      	ldr	r3, [pc, #324]	; (8081c50 <SendDataToServer+0x358>)
 8081b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8081b0e:	4836      	ldr	r0, [pc, #216]	; (8081be8 <SendDataToServer+0x2f0>)
 8081b10:	f006 fe32 	bl	8088778 <RS485_transmit>
      RS485_Master_Receive(coil_ReceivedBuff, 7);
 8081b14:	2107      	movs	r1, #7
 8081b16:	484f      	ldr	r0, [pc, #316]	; (8081c54 <SendDataToServer+0x35c>)
 8081b18:	f006 feb8 	bl	808888c <RS485_Master_Receive>
      HAL_Delay(500);
 8081b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8081b20:	f000 fe6c 	bl	80827fc <HAL_Delay>
      //		Case 10:
      SIM_GetLocalTime(TimeString);
 8081b24:	482e      	ldr	r0, [pc, #184]	; (8081be0 <SendDataToServer+0x2e8>)
 8081b26:	f007 f865 	bl	8088bf4 <SIM_GetLocalTime>
      //		printf("Coil 1: %u\n", (coil_ReceivedBuff[3] &	 0x01));
      //		printf("Coil 2: %u\n", ((coil_ReceivedBuff[3] & 0x02)>>1));
      //		printf("Coil 3: %u\n", ((coil_ReceivedBuff[3] & 0x04)>>2));
      //		printf("Coil 4: %u\n\n", ((coil_ReceivedBuff[3] & 0x08)>>3));
      //		printf("\n");
      sprintf(jsonBuffer,
 8081b2a:	4b32      	ldr	r3, [pc, #200]	; (8081bf4 <SendDataToServer+0x2fc>)
 8081b2c:	681b      	ldr	r3, [r3, #0]
 8081b2e:	4618      	mov	r0, r3
 8081b30:	f7fe fd0a 	bl	8080548 <__aeabi_f2d>
 8081b34:	4680      	mov	r8, r0
 8081b36:	4689      	mov	r9, r1
 8081b38:	4b31      	ldr	r3, [pc, #196]	; (8081c00 <SendDataToServer+0x308>)
 8081b3a:	681b      	ldr	r3, [r3, #0]
 8081b3c:	4618      	mov	r0, r3
 8081b3e:	f7fe fd03 	bl	8080548 <__aeabi_f2d>
 8081b42:	4682      	mov	sl, r0
 8081b44:	468b      	mov	fp, r1
 8081b46:	4b31      	ldr	r3, [pc, #196]	; (8081c0c <SendDataToServer+0x314>)
 8081b48:	681b      	ldr	r3, [r3, #0]
 8081b4a:	4618      	mov	r0, r3
 8081b4c:	f7fe fcfc 	bl	8080548 <__aeabi_f2d>
 8081b50:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8081b54:	4b30      	ldr	r3, [pc, #192]	; (8081c18 <SendDataToServer+0x320>)
 8081b56:	681b      	ldr	r3, [r3, #0]
 8081b58:	4618      	mov	r0, r3
 8081b5a:	f7fe fcf5 	bl	8080548 <__aeabi_f2d>
 8081b5e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8081b62:	4b34      	ldr	r3, [pc, #208]	; (8081c34 <SendDataToServer+0x33c>)
 8081b64:	681b      	ldr	r3, [r3, #0]
 8081b66:	4618      	mov	r0, r3
 8081b68:	f7fe fcee 	bl	8080548 <__aeabi_f2d>
 8081b6c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8081b70:	4b33      	ldr	r3, [pc, #204]	; (8081c40 <SendDataToServer+0x348>)
 8081b72:	681b      	ldr	r3, [r3, #0]
 8081b74:	4618      	mov	r0, r3
 8081b76:	f7fe fce7 	bl	8080548 <__aeabi_f2d>
 8081b7a:	4604      	mov	r4, r0
 8081b7c:	460d      	mov	r5, r1
 8081b7e:	4b33      	ldr	r3, [pc, #204]	; (8081c4c <SendDataToServer+0x354>)
 8081b80:	881b      	ldrh	r3, [r3, #0]
 8081b82:	617b      	str	r3, [r7, #20]
 8081b84:	4b27      	ldr	r3, [pc, #156]	; (8081c24 <SendDataToServer+0x32c>)
 8081b86:	881b      	ldrh	r3, [r3, #0]
 8081b88:	613b      	str	r3, [r7, #16]
              ",\"Coil 1\":\"%u\""
              ",\"Coil 2\":\"%u\""
              ",\"Coil 3\":\"%u\""
              ",\"Coil 4\":\"%u\"}",
              TimeString, phoneNumber, CosFi, Voltage, Current, Frequency, ActivePower, ReactivePower,
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081b8a:	4b33      	ldr	r3, [pc, #204]	; (8081c58 <SendDataToServer+0x360>)
 8081b8c:	781b      	ldrb	r3, [r3, #0]
 8081b8e:	f083 0301 	eor.w	r3, r3, #1
 8081b92:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081b94:	60fb      	str	r3, [r7, #12]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081b96:	4b30      	ldr	r3, [pc, #192]	; (8081c58 <SendDataToServer+0x360>)
 8081b98:	785b      	ldrb	r3, [r3, #1]
 8081b9a:	f083 0301 	eor.w	r3, r3, #1
 8081b9e:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081ba0:	60bb      	str	r3, [r7, #8]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081ba2:	4b2d      	ldr	r3, [pc, #180]	; (8081c58 <SendDataToServer+0x360>)
 8081ba4:	789b      	ldrb	r3, [r3, #2]
 8081ba6:	f083 0301 	eor.w	r3, r3, #1
 8081baa:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081bac:	607b      	str	r3, [r7, #4]
              AvP, AvQ, (IN[0] ^ 0x01), (IN[1] ^ 0x01), (IN[2] ^ 0x01), (IN[3] ^ 0x01),
 8081bae:	4b2a      	ldr	r3, [pc, #168]	; (8081c58 <SendDataToServer+0x360>)
 8081bb0:	78db      	ldrb	r3, [r3, #3]
 8081bb2:	f083 0301 	eor.w	r3, r3, #1
 8081bb6:	b2db      	uxtb	r3, r3
      sprintf(jsonBuffer,
 8081bb8:	461e      	mov	r6, r3
              (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081bba:	4b26      	ldr	r3, [pc, #152]	; (8081c54 <SendDataToServer+0x35c>)
 8081bbc:	78db      	ldrb	r3, [r3, #3]
      sprintf(jsonBuffer,
 8081bbe:	f003 0001 	and.w	r0, r3, #1
              (coil_ReceivedBuff[3] & 0x01), ((coil_ReceivedBuff[3] & 0x02) >> 1),
 8081bc2:	4b24      	ldr	r3, [pc, #144]	; (8081c54 <SendDataToServer+0x35c>)
 8081bc4:	78db      	ldrb	r3, [r3, #3]
 8081bc6:	105b      	asrs	r3, r3, #1
      sprintf(jsonBuffer,
 8081bc8:	f003 0101 	and.w	r1, r3, #1
 8081bcc:	e046      	b.n	8081c5c <SendDataToServer+0x364>
 8081bce:	bf00      	nop
 8081bd0:	20000590 	.word	0x20000590
 8081bd4:	20000594 	.word	0x20000594
 8081bd8:	20000000 	.word	0x20000000
 8081bdc:	cccccccd 	.word	0xcccccccd
 8081be0:	20000b90 	.word	0x20000b90
 8081be4:	20000004 	.word	0x20000004
 8081be8:	200003ec 	.word	0x200003ec
 8081bec:	20000664 	.word	0x20000664
 8081bf0:	42c80000 	.word	0x42c80000
 8081bf4:	2000000c 	.word	0x2000000c
 8081bf8:	20000024 	.word	0x20000024
 8081bfc:	2000067c 	.word	0x2000067c
 8081c00:	20000014 	.word	0x20000014
 8081c04:	20000030 	.word	0x20000030
 8081c08:	20000670 	.word	0x20000670
 8081c0c:	20000010 	.word	0x20000010
 8081c10:	2000003c 	.word	0x2000003c
 8081c14:	200006c0 	.word	0x200006c0
 8081c18:	20000020 	.word	0x20000020
 8081c1c:	2000006c 	.word	0x2000006c
 8081c20:	200006ac 	.word	0x200006ac
 8081c24:	20000914 	.word	0x20000914
 8081c28:	20000048 	.word	0x20000048
 8081c2c:	20000688 	.word	0x20000688
 8081c30:	10624dd3 	.word	0x10624dd3
 8081c34:	20000018 	.word	0x20000018
 8081c38:	20000054 	.word	0x20000054
 8081c3c:	20000694 	.word	0x20000694
 8081c40:	2000001c 	.word	0x2000001c
 8081c44:	20000060 	.word	0x20000060
 8081c48:	200006a0 	.word	0x200006a0
 8081c4c:	20000912 	.word	0x20000912
 8081c50:	20000078 	.word	0x20000078
 8081c54:	200006b8 	.word	0x200006b8
 8081c58:	20000908 	.word	0x20000908
              ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081c5c:	4b2a      	ldr	r3, [pc, #168]	; (8081d08 <SendDataToServer+0x410>)
 8081c5e:	78db      	ldrb	r3, [r3, #3]
 8081c60:	109b      	asrs	r3, r3, #2
      sprintf(jsonBuffer,
 8081c62:	f003 0201 	and.w	r2, r3, #1
              ((coil_ReceivedBuff[3] & 0x04) >> 2), ((coil_ReceivedBuff[3] & 0x08) >> 3));
 8081c66:	4b28      	ldr	r3, [pc, #160]	; (8081d08 <SendDataToServer+0x410>)
 8081c68:	78db      	ldrb	r3, [r3, #3]
 8081c6a:	10db      	asrs	r3, r3, #3
      sprintf(jsonBuffer,
 8081c6c:	f003 0301 	and.w	r3, r3, #1
 8081c70:	9315      	str	r3, [sp, #84]	; 0x54
 8081c72:	9214      	str	r2, [sp, #80]	; 0x50
 8081c74:	9113      	str	r1, [sp, #76]	; 0x4c
 8081c76:	9012      	str	r0, [sp, #72]	; 0x48
 8081c78:	9611      	str	r6, [sp, #68]	; 0x44
 8081c7a:	687a      	ldr	r2, [r7, #4]
 8081c7c:	9210      	str	r2, [sp, #64]	; 0x40
 8081c7e:	68ba      	ldr	r2, [r7, #8]
 8081c80:	920f      	str	r2, [sp, #60]	; 0x3c
 8081c82:	68fa      	ldr	r2, [r7, #12]
 8081c84:	920e      	str	r2, [sp, #56]	; 0x38
 8081c86:	693a      	ldr	r2, [r7, #16]
 8081c88:	920d      	str	r2, [sp, #52]	; 0x34
 8081c8a:	697b      	ldr	r3, [r7, #20]
 8081c8c:	930c      	str	r3, [sp, #48]	; 0x30
 8081c8e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8081c92:	ed97 7b06 	vldr	d7, [r7, #24]
 8081c96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8081c9a:	ed97 7b08 	vldr	d7, [r7, #32]
 8081c9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8081ca2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8081ca6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8081caa:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8081cae:	e9cd 8900 	strd	r8, r9, [sp]
 8081cb2:	4b16      	ldr	r3, [pc, #88]	; (8081d0c <SendDataToServer+0x414>)
 8081cb4:	4a16      	ldr	r2, [pc, #88]	; (8081d10 <SendDataToServer+0x418>)
 8081cb6:	4917      	ldr	r1, [pc, #92]	; (8081d14 <SendDataToServer+0x41c>)
 8081cb8:	4817      	ldr	r0, [pc, #92]	; (8081d18 <SendDataToServer+0x420>)
 8081cba:	f008 fa55 	bl	808a168 <siprintf>
      SIM_HTTP_POST(
 8081cbe:	4b17      	ldr	r3, [pc, #92]	; (8081d1c <SendDataToServer+0x424>)
 8081cc0:	4a15      	ldr	r2, [pc, #84]	; (8081d18 <SendDataToServer+0x420>)
 8081cc2:	4917      	ldr	r1, [pc, #92]	; (8081d20 <SendDataToServer+0x428>)
 8081cc4:	4817      	ldr	r0, [pc, #92]	; (8081d24 <SendDataToServer+0x42c>)
 8081cc6:	f007 f967 	bl	8088f98 <SIM_HTTP_POST>
          "https://capacitor-129e8-default-rtdb.firebaseio.com/testA.json",
          "application/json", jsonBuffer, &httpInfo);
      HAL_Delay(120000);
 8081cca:	4817      	ldr	r0, [pc, #92]	; (8081d28 <SendDataToServer+0x430>)
 8081ccc:	f000 fd96 	bl	80827fc <HAL_Delay>
      SplitTime(&GetMinSec);
 8081cd0:	4816      	ldr	r0, [pc, #88]	; (8081d2c <SendDataToServer+0x434>)
 8081cd2:	f7ff fdb5 	bl	8081840 <SplitTime>
      Set_Time(5, Timeptr->Minute, Timeptr->Second);
 8081cd6:	4b16      	ldr	r3, [pc, #88]	; (8081d30 <SendDataToServer+0x438>)
 8081cd8:	681b      	ldr	r3, [r3, #0]
 8081cda:	781b      	ldrb	r3, [r3, #0]
 8081cdc:	4619      	mov	r1, r3
 8081cde:	4b14      	ldr	r3, [pc, #80]	; (8081d30 <SendDataToServer+0x438>)
 8081ce0:	681b      	ldr	r3, [r3, #0]
 8081ce2:	785b      	ldrb	r3, [r3, #1]
 8081ce4:	461a      	mov	r2, r3
 8081ce6:	2005      	movs	r0, #5
 8081ce8:	f000 f8aa 	bl	8081e40 <Set_Time>
      Set_Alarm(Timeptr->Minute);
 8081cec:	4b10      	ldr	r3, [pc, #64]	; (8081d30 <SendDataToServer+0x438>)
 8081cee:	681b      	ldr	r3, [r3, #0]
 8081cf0:	781b      	ldrb	r3, [r3, #0]
 8081cf2:	4618      	mov	r0, r3
 8081cf4:	f000 f820 	bl	8081d38 <Set_Alarm>
    }
  }
  RTC_Flag = false;
 8081cf8:	4b0e      	ldr	r3, [pc, #56]	; (8081d34 <SendDataToServer+0x43c>)
 8081cfa:	2200      	movs	r2, #0
 8081cfc:	701a      	strb	r2, [r3, #0]
}
 8081cfe:	bf00      	nop
 8081d00:	3734      	adds	r7, #52	; 0x34
 8081d02:	46bd      	mov	sp, r7
 8081d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081d08:	200006b8 	.word	0x200006b8
 8081d0c:	20000dd8 	.word	0x20000dd8
 8081d10:	20000b90 	.word	0x20000b90
 8081d14:	0808c888 	.word	0x0808c888
 8081d18:	200006d8 	.word	0x200006d8
 8081d1c:	20000598 	.word	0x20000598
 8081d20:	0808ca00 	.word	0x0808ca00
 8081d24:	0808ca14 	.word	0x0808ca14
 8081d28:	0001d4c0 	.word	0x0001d4c0
 8081d2c:	20000594 	.word	0x20000594
 8081d30:	20000000 	.word	0x20000000
 8081d34:	20000590 	.word	0x20000590

08081d38 <Set_Alarm>:

void Set_Alarm(int m)
{
 8081d38:	b580      	push	{r7, lr}
 8081d3a:	b082      	sub	sp, #8
 8081d3c:	af00      	add	r7, sp, #0
 8081d3e:	6078      	str	r0, [r7, #4]
  if (m % 10 == 0)
 8081d40:	6879      	ldr	r1, [r7, #4]
 8081d42:	4b3b      	ldr	r3, [pc, #236]	; (8081e30 <Set_Alarm+0xf8>)
 8081d44:	fb83 2301 	smull	r2, r3, r3, r1
 8081d48:	109a      	asrs	r2, r3, #2
 8081d4a:	17cb      	asrs	r3, r1, #31
 8081d4c:	1ad2      	subs	r2, r2, r3
 8081d4e:	4613      	mov	r3, r2
 8081d50:	009b      	lsls	r3, r3, #2
 8081d52:	4413      	add	r3, r2
 8081d54:	005b      	lsls	r3, r3, #1
 8081d56:	1aca      	subs	r2, r1, r3
 8081d58:	2a00      	cmp	r2, #0
 8081d5a:	d102      	bne.n	8081d62 <Set_Alarm+0x2a>
  {
    m = m + 10;
 8081d5c:	687b      	ldr	r3, [r7, #4]
 8081d5e:	330a      	adds	r3, #10
 8081d60:	607b      	str	r3, [r7, #4]
  }
  if (m == 60)
 8081d62:	687b      	ldr	r3, [r7, #4]
 8081d64:	2b3c      	cmp	r3, #60	; 0x3c
 8081d66:	d101      	bne.n	8081d6c <Set_Alarm+0x34>
  {
    m = 0;
 8081d68:	2300      	movs	r3, #0
 8081d6a:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 1) && (m <= 9))
 8081d6c:	687b      	ldr	r3, [r7, #4]
 8081d6e:	2b00      	cmp	r3, #0
 8081d70:	dd04      	ble.n	8081d7c <Set_Alarm+0x44>
 8081d72:	687b      	ldr	r3, [r7, #4]
 8081d74:	2b09      	cmp	r3, #9
 8081d76:	dc01      	bgt.n	8081d7c <Set_Alarm+0x44>
  {
    m = 10;
 8081d78:	230a      	movs	r3, #10
 8081d7a:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 11) && (m <= 19))
 8081d7c:	687b      	ldr	r3, [r7, #4]
 8081d7e:	2b0a      	cmp	r3, #10
 8081d80:	dd04      	ble.n	8081d8c <Set_Alarm+0x54>
 8081d82:	687b      	ldr	r3, [r7, #4]
 8081d84:	2b13      	cmp	r3, #19
 8081d86:	dc01      	bgt.n	8081d8c <Set_Alarm+0x54>
  {
    m = 20;
 8081d88:	2314      	movs	r3, #20
 8081d8a:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 21) && (m <= 29))
 8081d8c:	687b      	ldr	r3, [r7, #4]
 8081d8e:	2b14      	cmp	r3, #20
 8081d90:	dd04      	ble.n	8081d9c <Set_Alarm+0x64>
 8081d92:	687b      	ldr	r3, [r7, #4]
 8081d94:	2b1d      	cmp	r3, #29
 8081d96:	dc01      	bgt.n	8081d9c <Set_Alarm+0x64>
  {
    m = 30;
 8081d98:	231e      	movs	r3, #30
 8081d9a:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 31) && (m <= 39))
 8081d9c:	687b      	ldr	r3, [r7, #4]
 8081d9e:	2b1e      	cmp	r3, #30
 8081da0:	dd04      	ble.n	8081dac <Set_Alarm+0x74>
 8081da2:	687b      	ldr	r3, [r7, #4]
 8081da4:	2b27      	cmp	r3, #39	; 0x27
 8081da6:	dc01      	bgt.n	8081dac <Set_Alarm+0x74>
  {
    m = 40;
 8081da8:	2328      	movs	r3, #40	; 0x28
 8081daa:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 41) && (m <= 49))
 8081dac:	687b      	ldr	r3, [r7, #4]
 8081dae:	2b28      	cmp	r3, #40	; 0x28
 8081db0:	dd04      	ble.n	8081dbc <Set_Alarm+0x84>
 8081db2:	687b      	ldr	r3, [r7, #4]
 8081db4:	2b31      	cmp	r3, #49	; 0x31
 8081db6:	dc01      	bgt.n	8081dbc <Set_Alarm+0x84>
  {
    m = 50;
 8081db8:	2332      	movs	r3, #50	; 0x32
 8081dba:	607b      	str	r3, [r7, #4]
  }
  if ((m >= 51) && (m <= 59))
 8081dbc:	687b      	ldr	r3, [r7, #4]
 8081dbe:	2b32      	cmp	r3, #50	; 0x32
 8081dc0:	dd04      	ble.n	8081dcc <Set_Alarm+0x94>
 8081dc2:	687b      	ldr	r3, [r7, #4]
 8081dc4:	2b3b      	cmp	r3, #59	; 0x3b
 8081dc6:	dc01      	bgt.n	8081dcc <Set_Alarm+0x94>
  {
    m = 0;
 8081dc8:	2300      	movs	r3, #0
 8081dca:	607b      	str	r3, [r7, #4]
  }
  /** Enable the Alarm A
   */
  sAlarm.AlarmTime.Hours = 0;
 8081dcc:	4b19      	ldr	r3, [pc, #100]	; (8081e34 <Set_Alarm+0xfc>)
 8081dce:	2200      	movs	r2, #0
 8081dd0:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = m;
 8081dd2:	687b      	ldr	r3, [r7, #4]
 8081dd4:	b2da      	uxtb	r2, r3
 8081dd6:	4b17      	ldr	r3, [pc, #92]	; (8081e34 <Set_Alarm+0xfc>)
 8081dd8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8081dda:	4b16      	ldr	r3, [pc, #88]	; (8081e34 <Set_Alarm+0xfc>)
 8081ddc:	2200      	movs	r2, #0
 8081dde:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8081de0:	4b14      	ldr	r3, [pc, #80]	; (8081e34 <Set_Alarm+0xfc>)
 8081de2:	2200      	movs	r2, #0
 8081de4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8081de6:	4b13      	ldr	r3, [pc, #76]	; (8081e34 <Set_Alarm+0xfc>)
 8081de8:	2200      	movs	r2, #0
 8081dea:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8081dec:	4b11      	ldr	r3, [pc, #68]	; (8081e34 <Set_Alarm+0xfc>)
 8081dee:	2200      	movs	r2, #0
 8081df0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS | RTC_ALARMMASK_SECONDS;
 8081df2:	4b10      	ldr	r3, [pc, #64]	; (8081e34 <Set_Alarm+0xfc>)
 8081df4:	4a10      	ldr	r2, [pc, #64]	; (8081e38 <Set_Alarm+0x100>)
 8081df6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8081df8:	4b0e      	ldr	r3, [pc, #56]	; (8081e34 <Set_Alarm+0xfc>)
 8081dfa:	2200      	movs	r2, #0
 8081dfc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8081dfe:	4b0d      	ldr	r3, [pc, #52]	; (8081e34 <Set_Alarm+0xfc>)
 8081e00:	2200      	movs	r2, #0
 8081e02:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8081e04:	4b0b      	ldr	r3, [pc, #44]	; (8081e34 <Set_Alarm+0xfc>)
 8081e06:	2201      	movs	r2, #1
 8081e08:	f883 2020 	strb.w	r2, [r3, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8081e0c:	4b09      	ldr	r3, [pc, #36]	; (8081e34 <Set_Alarm+0xfc>)
 8081e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8081e12:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8081e14:	2200      	movs	r2, #0
 8081e16:	4907      	ldr	r1, [pc, #28]	; (8081e34 <Set_Alarm+0xfc>)
 8081e18:	4808      	ldr	r0, [pc, #32]	; (8081e3c <Set_Alarm+0x104>)
 8081e1a:	f002 fd1b 	bl	8084854 <HAL_RTC_SetAlarm_IT>
 8081e1e:	4603      	mov	r3, r0
 8081e20:	2b00      	cmp	r3, #0
 8081e22:	d001      	beq.n	8081e28 <Set_Alarm+0xf0>
  {
    Error_Handler();
 8081e24:	f000 f870 	bl	8081f08 <Error_Handler>
  }
}
 8081e28:	bf00      	nop
 8081e2a:	3708      	adds	r7, #8
 8081e2c:	46bd      	mov	sp, r7
 8081e2e:	bd80      	pop	{r7, pc}
 8081e30:	66666667 	.word	0x66666667
 8081e34:	20000568 	.word	0x20000568
 8081e38:	80800080 	.word	0x80800080
 8081e3c:	2000027c 	.word	0x2000027c

08081e40 <Set_Time>:

void Set_Time(int H, int M, int S)
{
 8081e40:	b580      	push	{r7, lr}
 8081e42:	b084      	sub	sp, #16
 8081e44:	af00      	add	r7, sp, #0
 8081e46:	60f8      	str	r0, [r7, #12]
 8081e48:	60b9      	str	r1, [r7, #8]
 8081e4a:	607a      	str	r2, [r7, #4]
  sTime.Hours = H;
 8081e4c:	68fb      	ldr	r3, [r7, #12]
 8081e4e:	b2da      	uxtb	r2, r3
 8081e50:	4b19      	ldr	r3, [pc, #100]	; (8081eb8 <Set_Time+0x78>)
 8081e52:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = M;
 8081e54:	68bb      	ldr	r3, [r7, #8]
 8081e56:	b2da      	uxtb	r2, r3
 8081e58:	4b17      	ldr	r3, [pc, #92]	; (8081eb8 <Set_Time+0x78>)
 8081e5a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = S;
 8081e5c:	687b      	ldr	r3, [r7, #4]
 8081e5e:	b2da      	uxtb	r2, r3
 8081e60:	4b15      	ldr	r3, [pc, #84]	; (8081eb8 <Set_Time+0x78>)
 8081e62:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8081e64:	4b14      	ldr	r3, [pc, #80]	; (8081eb8 <Set_Time+0x78>)
 8081e66:	2200      	movs	r2, #0
 8081e68:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8081e6a:	4b13      	ldr	r3, [pc, #76]	; (8081eb8 <Set_Time+0x78>)
 8081e6c:	2200      	movs	r2, #0
 8081e6e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8081e70:	2200      	movs	r2, #0
 8081e72:	4911      	ldr	r1, [pc, #68]	; (8081eb8 <Set_Time+0x78>)
 8081e74:	4811      	ldr	r0, [pc, #68]	; (8081ebc <Set_Time+0x7c>)
 8081e76:	f002 fbcf 	bl	8084618 <HAL_RTC_SetTime>
 8081e7a:	4603      	mov	r3, r0
 8081e7c:	2b00      	cmp	r3, #0
 8081e7e:	d001      	beq.n	8081e84 <Set_Time+0x44>
  {
    Error_Handler();
 8081e80:	f000 f842 	bl	8081f08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8081e84:	4b0e      	ldr	r3, [pc, #56]	; (8081ec0 <Set_Time+0x80>)
 8081e86:	2203      	movs	r2, #3
 8081e88:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_APRIL;
 8081e8a:	4b0d      	ldr	r3, [pc, #52]	; (8081ec0 <Set_Time+0x80>)
 8081e8c:	2204      	movs	r2, #4
 8081e8e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 5;
 8081e90:	4b0b      	ldr	r3, [pc, #44]	; (8081ec0 <Set_Time+0x80>)
 8081e92:	2205      	movs	r2, #5
 8081e94:	709a      	strb	r2, [r3, #2]
  sDate.Year = 5;
 8081e96:	4b0a      	ldr	r3, [pc, #40]	; (8081ec0 <Set_Time+0x80>)
 8081e98:	2205      	movs	r2, #5
 8081e9a:	70da      	strb	r2, [r3, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8081e9c:	2200      	movs	r2, #0
 8081e9e:	4908      	ldr	r1, [pc, #32]	; (8081ec0 <Set_Time+0x80>)
 8081ea0:	4806      	ldr	r0, [pc, #24]	; (8081ebc <Set_Time+0x7c>)
 8081ea2:	f002 fc53 	bl	808474c <HAL_RTC_SetDate>
 8081ea6:	4603      	mov	r3, r0
 8081ea8:	2b00      	cmp	r3, #0
 8081eaa:	d001      	beq.n	8081eb0 <Set_Time+0x70>
  {
    Error_Handler();
 8081eac:	f000 f82c 	bl	8081f08 <Error_Handler>
  }
}
 8081eb0:	bf00      	nop
 8081eb2:	3710      	adds	r7, #16
 8081eb4:	46bd      	mov	sp, r7
 8081eb6:	bd80      	pop	{r7, pc}
 8081eb8:	20000550 	.word	0x20000550
 8081ebc:	2000027c 	.word	0x2000027c
 8081ec0:	20000564 	.word	0x20000564

08081ec4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8081ec4:	b480      	push	{r7}
 8081ec6:	b083      	sub	sp, #12
 8081ec8:	af00      	add	r7, sp, #0
 8081eca:	6078      	str	r0, [r7, #4]
  //	if(RTC_Flag == 0)
  //	{
  //		RTC_Flag = 1;
  //	}
  RTC_Flag = true;
 8081ecc:	4b04      	ldr	r3, [pc, #16]	; (8081ee0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8081ece:	2201      	movs	r2, #1
 8081ed0:	701a      	strb	r2, [r3, #0]
}
 8081ed2:	bf00      	nop
 8081ed4:	370c      	adds	r7, #12
 8081ed6:	46bd      	mov	sp, r7
 8081ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081edc:	4770      	bx	lr
 8081ede:	bf00      	nop
 8081ee0:	20000590 	.word	0x20000590

08081ee4 <__io_putchar>:
#define PUTCHAR_PROTOPYTE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOPYTE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOPYTE
{
 8081ee4:	b580      	push	{r7, lr}
 8081ee6:	b082      	sub	sp, #8
 8081ee8:	af00      	add	r7, sp, #0
 8081eea:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&DEBUG_UART, (uint8_t *)&ch, 1, 0xFFFF);
 8081eec:	1d39      	adds	r1, r7, #4
 8081eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8081ef2:	2201      	movs	r2, #1
 8081ef4:	4803      	ldr	r0, [pc, #12]	; (8081f04 <__io_putchar+0x20>)
 8081ef6:	f004 f95a 	bl	80861ae <HAL_UART_Transmit>
  return ch;
 8081efa:	687b      	ldr	r3, [r7, #4]
}
 8081efc:	4618      	mov	r0, r3
 8081efe:	3708      	adds	r7, #8
 8081f00:	46bd      	mov	sp, r7
 8081f02:	bd80      	pop	{r7, pc}
 8081f04:	20000320 	.word	0x20000320

08081f08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8081f08:	b480      	push	{r7}
 8081f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8081f0c:	bf00      	nop
 8081f0e:	46bd      	mov	sp, r7
 8081f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8081f14:	4770      	bx	lr
	...

08081f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8081f18:	b580      	push	{r7, lr}
 8081f1a:	b082      	sub	sp, #8
 8081f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8081f1e:	2300      	movs	r3, #0
 8081f20:	607b      	str	r3, [r7, #4]
 8081f22:	4b13      	ldr	r3, [pc, #76]	; (8081f70 <HAL_MspInit+0x58>)
 8081f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f26:	4a12      	ldr	r2, [pc, #72]	; (8081f70 <HAL_MspInit+0x58>)
 8081f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8081f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8081f2e:	4b10      	ldr	r3, [pc, #64]	; (8081f70 <HAL_MspInit+0x58>)
 8081f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8081f36:	607b      	str	r3, [r7, #4]
 8081f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8081f3a:	2300      	movs	r3, #0
 8081f3c:	603b      	str	r3, [r7, #0]
 8081f3e:	4b0c      	ldr	r3, [pc, #48]	; (8081f70 <HAL_MspInit+0x58>)
 8081f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f42:	4a0b      	ldr	r2, [pc, #44]	; (8081f70 <HAL_MspInit+0x58>)
 8081f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8081f48:	6413      	str	r3, [r2, #64]	; 0x40
 8081f4a:	4b09      	ldr	r3, [pc, #36]	; (8081f70 <HAL_MspInit+0x58>)
 8081f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8081f52:	603b      	str	r3, [r7, #0]
 8081f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8081f56:	2200      	movs	r2, #0
 8081f58:	2100      	movs	r1, #0
 8081f5a:	2005      	movs	r0, #5
 8081f5c:	f000 fd63 	bl	8082a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8081f60:	2005      	movs	r0, #5
 8081f62:	f000 fd7c 	bl	8082a5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8081f66:	bf00      	nop
 8081f68:	3708      	adds	r7, #8
 8081f6a:	46bd      	mov	sp, r7
 8081f6c:	bd80      	pop	{r7, pc}
 8081f6e:	bf00      	nop
 8081f70:	40023800 	.word	0x40023800

08081f74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8081f74:	b580      	push	{r7, lr}
 8081f76:	b086      	sub	sp, #24
 8081f78:	af00      	add	r7, sp, #0
 8081f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8081f7c:	f107 0308 	add.w	r3, r7, #8
 8081f80:	2200      	movs	r2, #0
 8081f82:	601a      	str	r2, [r3, #0]
 8081f84:	605a      	str	r2, [r3, #4]
 8081f86:	609a      	str	r2, [r3, #8]
 8081f88:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8081f8a:	687b      	ldr	r3, [r7, #4]
 8081f8c:	681b      	ldr	r3, [r3, #0]
 8081f8e:	4a10      	ldr	r2, [pc, #64]	; (8081fd0 <HAL_RTC_MspInit+0x5c>)
 8081f90:	4293      	cmp	r3, r2
 8081f92:	d119      	bne.n	8081fc8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8081f94:	2302      	movs	r3, #2
 8081f96:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8081f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8081f9c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8081f9e:	f107 0308 	add.w	r3, r7, #8
 8081fa2:	4618      	mov	r0, r3
 8081fa4:	f002 f9e0 	bl	8084368 <HAL_RCCEx_PeriphCLKConfig>
 8081fa8:	4603      	mov	r3, r0
 8081faa:	2b00      	cmp	r3, #0
 8081fac:	d001      	beq.n	8081fb2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8081fae:	f7ff ffab 	bl	8081f08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8081fb2:	4b08      	ldr	r3, [pc, #32]	; (8081fd4 <HAL_RTC_MspInit+0x60>)
 8081fb4:	2201      	movs	r2, #1
 8081fb6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8081fb8:	2200      	movs	r2, #0
 8081fba:	2100      	movs	r1, #0
 8081fbc:	2029      	movs	r0, #41	; 0x29
 8081fbe:	f000 fd32 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8081fc2:	2029      	movs	r0, #41	; 0x29
 8081fc4:	f000 fd4b 	bl	8082a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8081fc8:	bf00      	nop
 8081fca:	3718      	adds	r7, #24
 8081fcc:	46bd      	mov	sp, r7
 8081fce:	bd80      	pop	{r7, pc}
 8081fd0:	40002800 	.word	0x40002800
 8081fd4:	42470e3c 	.word	0x42470e3c

08081fd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8081fd8:	b580      	push	{r7, lr}
 8081fda:	b08a      	sub	sp, #40	; 0x28
 8081fdc:	af00      	add	r7, sp, #0
 8081fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8081fe0:	f107 0314 	add.w	r3, r7, #20
 8081fe4:	2200      	movs	r2, #0
 8081fe6:	601a      	str	r2, [r3, #0]
 8081fe8:	605a      	str	r2, [r3, #4]
 8081fea:	609a      	str	r2, [r3, #8]
 8081fec:	60da      	str	r2, [r3, #12]
 8081fee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8081ff0:	687b      	ldr	r3, [r7, #4]
 8081ff2:	681b      	ldr	r3, [r3, #0]
 8081ff4:	4a2c      	ldr	r2, [pc, #176]	; (80820a8 <HAL_SD_MspInit+0xd0>)
 8081ff6:	4293      	cmp	r3, r2
 8081ff8:	d152      	bne.n	80820a0 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8081ffa:	2300      	movs	r3, #0
 8081ffc:	613b      	str	r3, [r7, #16]
 8081ffe:	4b2b      	ldr	r3, [pc, #172]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082002:	4a2a      	ldr	r2, [pc, #168]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082004:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8082008:	6453      	str	r3, [r2, #68]	; 0x44
 808200a:	4b28      	ldr	r3, [pc, #160]	; (80820ac <HAL_SD_MspInit+0xd4>)
 808200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808200e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8082012:	613b      	str	r3, [r7, #16]
 8082014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8082016:	2300      	movs	r3, #0
 8082018:	60fb      	str	r3, [r7, #12]
 808201a:	4b24      	ldr	r3, [pc, #144]	; (80820ac <HAL_SD_MspInit+0xd4>)
 808201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808201e:	4a23      	ldr	r2, [pc, #140]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082020:	f043 0304 	orr.w	r3, r3, #4
 8082024:	6313      	str	r3, [r2, #48]	; 0x30
 8082026:	4b21      	ldr	r3, [pc, #132]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808202a:	f003 0304 	and.w	r3, r3, #4
 808202e:	60fb      	str	r3, [r7, #12]
 8082030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8082032:	2300      	movs	r3, #0
 8082034:	60bb      	str	r3, [r7, #8]
 8082036:	4b1d      	ldr	r3, [pc, #116]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808203a:	4a1c      	ldr	r2, [pc, #112]	; (80820ac <HAL_SD_MspInit+0xd4>)
 808203c:	f043 0308 	orr.w	r3, r3, #8
 8082040:	6313      	str	r3, [r2, #48]	; 0x30
 8082042:	4b1a      	ldr	r3, [pc, #104]	; (80820ac <HAL_SD_MspInit+0xd4>)
 8082044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082046:	f003 0308 	and.w	r3, r3, #8
 808204a:	60bb      	str	r3, [r7, #8]
 808204c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 808204e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8082052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8082054:	2302      	movs	r3, #2
 8082056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8082058:	2300      	movs	r3, #0
 808205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 808205c:	2303      	movs	r3, #3
 808205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8082060:	230c      	movs	r3, #12
 8082062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8082064:	f107 0314 	add.w	r3, r7, #20
 8082068:	4619      	mov	r1, r3
 808206a:	4811      	ldr	r0, [pc, #68]	; (80820b0 <HAL_SD_MspInit+0xd8>)
 808206c:	f001 fb16 	bl	808369c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8082070:	2304      	movs	r3, #4
 8082072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8082074:	2302      	movs	r3, #2
 8082076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8082078:	2300      	movs	r3, #0
 808207a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 808207c:	2303      	movs	r3, #3
 808207e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8082080:	230c      	movs	r3, #12
 8082082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8082084:	f107 0314 	add.w	r3, r7, #20
 8082088:	4619      	mov	r1, r3
 808208a:	480a      	ldr	r0, [pc, #40]	; (80820b4 <HAL_SD_MspInit+0xdc>)
 808208c:	f001 fb06 	bl	808369c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8082090:	2200      	movs	r2, #0
 8082092:	2100      	movs	r1, #0
 8082094:	2031      	movs	r0, #49	; 0x31
 8082096:	f000 fcc6 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 808209a:	2031      	movs	r0, #49	; 0x31
 808209c:	f000 fcdf 	bl	8082a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80820a0:	bf00      	nop
 80820a2:	3728      	adds	r7, #40	; 0x28
 80820a4:	46bd      	mov	sp, r7
 80820a6:	bd80      	pop	{r7, pc}
 80820a8:	40012c00 	.word	0x40012c00
 80820ac:	40023800 	.word	0x40023800
 80820b0:	40020800 	.word	0x40020800
 80820b4:	40020c00 	.word	0x40020c00

080820b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80820b8:	b580      	push	{r7, lr}
 80820ba:	b090      	sub	sp, #64	; 0x40
 80820bc:	af00      	add	r7, sp, #0
 80820be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80820c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80820c4:	2200      	movs	r2, #0
 80820c6:	601a      	str	r2, [r3, #0]
 80820c8:	605a      	str	r2, [r3, #4]
 80820ca:	609a      	str	r2, [r3, #8]
 80820cc:	60da      	str	r2, [r3, #12]
 80820ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80820d0:	687b      	ldr	r3, [r7, #4]
 80820d2:	681b      	ldr	r3, [r3, #0]
 80820d4:	4a9b      	ldr	r2, [pc, #620]	; (8082344 <HAL_UART_MspInit+0x28c>)
 80820d6:	4293      	cmp	r3, r2
 80820d8:	d162      	bne.n	80821a0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80820da:	2300      	movs	r3, #0
 80820dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80820de:	4b9a      	ldr	r3, [pc, #616]	; (8082348 <HAL_UART_MspInit+0x290>)
 80820e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80820e2:	4a99      	ldr	r2, [pc, #612]	; (8082348 <HAL_UART_MspInit+0x290>)
 80820e4:	f043 0310 	orr.w	r3, r3, #16
 80820e8:	6453      	str	r3, [r2, #68]	; 0x44
 80820ea:	4b97      	ldr	r3, [pc, #604]	; (8082348 <HAL_UART_MspInit+0x290>)
 80820ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80820ee:	f003 0310 	and.w	r3, r3, #16
 80820f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80820f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80820f6:	2300      	movs	r3, #0
 80820f8:	627b      	str	r3, [r7, #36]	; 0x24
 80820fa:	4b93      	ldr	r3, [pc, #588]	; (8082348 <HAL_UART_MspInit+0x290>)
 80820fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80820fe:	4a92      	ldr	r2, [pc, #584]	; (8082348 <HAL_UART_MspInit+0x290>)
 8082100:	f043 0302 	orr.w	r3, r3, #2
 8082104:	6313      	str	r3, [r2, #48]	; 0x30
 8082106:	4b90      	ldr	r3, [pc, #576]	; (8082348 <HAL_UART_MspInit+0x290>)
 8082108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808210a:	f003 0302 	and.w	r3, r3, #2
 808210e:	627b      	str	r3, [r7, #36]	; 0x24
 8082110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8082112:	23c0      	movs	r3, #192	; 0xc0
 8082114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8082116:	2302      	movs	r3, #2
 8082118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 808211a:	2300      	movs	r3, #0
 808211c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 808211e:	2303      	movs	r3, #3
 8082120:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8082122:	2307      	movs	r3, #7
 8082124:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8082126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 808212a:	4619      	mov	r1, r3
 808212c:	4887      	ldr	r0, [pc, #540]	; (808234c <HAL_UART_MspInit+0x294>)
 808212e:	f001 fab5 	bl	808369c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8082132:	4b87      	ldr	r3, [pc, #540]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082134:	4a87      	ldr	r2, [pc, #540]	; (8082354 <HAL_UART_MspInit+0x29c>)
 8082136:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8082138:	4b85      	ldr	r3, [pc, #532]	; (8082350 <HAL_UART_MspInit+0x298>)
 808213a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 808213e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8082140:	4b83      	ldr	r3, [pc, #524]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082142:	2200      	movs	r2, #0
 8082144:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8082146:	4b82      	ldr	r3, [pc, #520]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082148:	2200      	movs	r2, #0
 808214a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 808214c:	4b80      	ldr	r3, [pc, #512]	; (8082350 <HAL_UART_MspInit+0x298>)
 808214e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8082152:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8082154:	4b7e      	ldr	r3, [pc, #504]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082156:	2200      	movs	r2, #0
 8082158:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 808215a:	4b7d      	ldr	r3, [pc, #500]	; (8082350 <HAL_UART_MspInit+0x298>)
 808215c:	2200      	movs	r2, #0
 808215e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8082160:	4b7b      	ldr	r3, [pc, #492]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082162:	2200      	movs	r2, #0
 8082164:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8082166:	4b7a      	ldr	r3, [pc, #488]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082168:	2200      	movs	r2, #0
 808216a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 808216c:	4b78      	ldr	r3, [pc, #480]	; (8082350 <HAL_UART_MspInit+0x298>)
 808216e:	2200      	movs	r2, #0
 8082170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8082172:	4877      	ldr	r0, [pc, #476]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082174:	f000 fc92 	bl	8082a9c <HAL_DMA_Init>
 8082178:	4603      	mov	r3, r0
 808217a:	2b00      	cmp	r3, #0
 808217c:	d001      	beq.n	8082182 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 808217e:	f7ff fec3 	bl	8081f08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8082182:	687b      	ldr	r3, [r7, #4]
 8082184:	4a72      	ldr	r2, [pc, #456]	; (8082350 <HAL_UART_MspInit+0x298>)
 8082186:	639a      	str	r2, [r3, #56]	; 0x38
 8082188:	4a71      	ldr	r2, [pc, #452]	; (8082350 <HAL_UART_MspInit+0x298>)
 808218a:	687b      	ldr	r3, [r7, #4]
 808218c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 808218e:	2200      	movs	r2, #0
 8082190:	2100      	movs	r1, #0
 8082192:	2025      	movs	r0, #37	; 0x25
 8082194:	f000 fc47 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8082198:	2025      	movs	r0, #37	; 0x25
 808219a:	f000 fc60 	bl	8082a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 808219e:	e122      	b.n	80823e6 <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART2)
 80821a0:	687b      	ldr	r3, [r7, #4]
 80821a2:	681b      	ldr	r3, [r3, #0]
 80821a4:	4a6c      	ldr	r2, [pc, #432]	; (8082358 <HAL_UART_MspInit+0x2a0>)
 80821a6:	4293      	cmp	r3, r2
 80821a8:	d162      	bne.n	8082270 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80821aa:	2300      	movs	r3, #0
 80821ac:	623b      	str	r3, [r7, #32]
 80821ae:	4b66      	ldr	r3, [pc, #408]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80821b2:	4a65      	ldr	r2, [pc, #404]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80821b8:	6413      	str	r3, [r2, #64]	; 0x40
 80821ba:	4b63      	ldr	r3, [pc, #396]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80821be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80821c2:	623b      	str	r3, [r7, #32]
 80821c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80821c6:	2300      	movs	r3, #0
 80821c8:	61fb      	str	r3, [r7, #28]
 80821ca:	4b5f      	ldr	r3, [pc, #380]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80821ce:	4a5e      	ldr	r2, [pc, #376]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821d0:	f043 0301 	orr.w	r3, r3, #1
 80821d4:	6313      	str	r3, [r2, #48]	; 0x30
 80821d6:	4b5c      	ldr	r3, [pc, #368]	; (8082348 <HAL_UART_MspInit+0x290>)
 80821d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80821da:	f003 0301 	and.w	r3, r3, #1
 80821de:	61fb      	str	r3, [r7, #28]
 80821e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80821e2:	230c      	movs	r3, #12
 80821e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80821e6:	2302      	movs	r3, #2
 80821e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80821ea:	2300      	movs	r3, #0
 80821ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80821ee:	2303      	movs	r3, #3
 80821f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80821f2:	2307      	movs	r3, #7
 80821f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80821f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80821fa:	4619      	mov	r1, r3
 80821fc:	4857      	ldr	r0, [pc, #348]	; (808235c <HAL_UART_MspInit+0x2a4>)
 80821fe:	f001 fa4d 	bl	808369c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8082202:	4b57      	ldr	r3, [pc, #348]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082204:	4a57      	ldr	r2, [pc, #348]	; (8082364 <HAL_UART_MspInit+0x2ac>)
 8082206:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8082208:	4b55      	ldr	r3, [pc, #340]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 808220a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 808220e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8082210:	4b53      	ldr	r3, [pc, #332]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082212:	2200      	movs	r2, #0
 8082214:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8082216:	4b52      	ldr	r3, [pc, #328]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082218:	2200      	movs	r2, #0
 808221a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 808221c:	4b50      	ldr	r3, [pc, #320]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 808221e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8082222:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8082224:	4b4e      	ldr	r3, [pc, #312]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082226:	2200      	movs	r2, #0
 8082228:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 808222a:	4b4d      	ldr	r3, [pc, #308]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 808222c:	2200      	movs	r2, #0
 808222e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8082230:	4b4b      	ldr	r3, [pc, #300]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082232:	2200      	movs	r2, #0
 8082234:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8082236:	4b4a      	ldr	r3, [pc, #296]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082238:	2200      	movs	r2, #0
 808223a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 808223c:	4b48      	ldr	r3, [pc, #288]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 808223e:	2200      	movs	r2, #0
 8082240:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8082242:	4847      	ldr	r0, [pc, #284]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082244:	f000 fc2a 	bl	8082a9c <HAL_DMA_Init>
 8082248:	4603      	mov	r3, r0
 808224a:	2b00      	cmp	r3, #0
 808224c:	d001      	beq.n	8082252 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 808224e:	f7ff fe5b 	bl	8081f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8082252:	687b      	ldr	r3, [r7, #4]
 8082254:	4a42      	ldr	r2, [pc, #264]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 8082256:	639a      	str	r2, [r3, #56]	; 0x38
 8082258:	4a41      	ldr	r2, [pc, #260]	; (8082360 <HAL_UART_MspInit+0x2a8>)
 808225a:	687b      	ldr	r3, [r7, #4]
 808225c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 808225e:	2200      	movs	r2, #0
 8082260:	2100      	movs	r1, #0
 8082262:	2026      	movs	r0, #38	; 0x26
 8082264:	f000 fbdf 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8082268:	2026      	movs	r0, #38	; 0x26
 808226a:	f000 fbf8 	bl	8082a5e <HAL_NVIC_EnableIRQ>
}
 808226e:	e0ba      	b.n	80823e6 <HAL_UART_MspInit+0x32e>
  else if(huart->Instance==USART3)
 8082270:	687b      	ldr	r3, [r7, #4]
 8082272:	681b      	ldr	r3, [r3, #0]
 8082274:	4a3c      	ldr	r2, [pc, #240]	; (8082368 <HAL_UART_MspInit+0x2b0>)
 8082276:	4293      	cmp	r3, r2
 8082278:	d17c      	bne.n	8082374 <HAL_UART_MspInit+0x2bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 808227a:	2300      	movs	r3, #0
 808227c:	61bb      	str	r3, [r7, #24]
 808227e:	4b32      	ldr	r3, [pc, #200]	; (8082348 <HAL_UART_MspInit+0x290>)
 8082280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082282:	4a31      	ldr	r2, [pc, #196]	; (8082348 <HAL_UART_MspInit+0x290>)
 8082284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8082288:	6413      	str	r3, [r2, #64]	; 0x40
 808228a:	4b2f      	ldr	r3, [pc, #188]	; (8082348 <HAL_UART_MspInit+0x290>)
 808228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808228e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082292:	61bb      	str	r3, [r7, #24]
 8082294:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8082296:	2300      	movs	r3, #0
 8082298:	617b      	str	r3, [r7, #20]
 808229a:	4b2b      	ldr	r3, [pc, #172]	; (8082348 <HAL_UART_MspInit+0x290>)
 808229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808229e:	4a2a      	ldr	r2, [pc, #168]	; (8082348 <HAL_UART_MspInit+0x290>)
 80822a0:	f043 0302 	orr.w	r3, r3, #2
 80822a4:	6313      	str	r3, [r2, #48]	; 0x30
 80822a6:	4b28      	ldr	r3, [pc, #160]	; (8082348 <HAL_UART_MspInit+0x290>)
 80822a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80822aa:	f003 0302 	and.w	r3, r3, #2
 80822ae:	617b      	str	r3, [r7, #20]
 80822b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80822b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80822b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80822b8:	2302      	movs	r3, #2
 80822ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80822bc:	2300      	movs	r3, #0
 80822be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80822c0:	2303      	movs	r3, #3
 80822c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80822c4:	2307      	movs	r3, #7
 80822c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80822c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80822cc:	4619      	mov	r1, r3
 80822ce:	481f      	ldr	r0, [pc, #124]	; (808234c <HAL_UART_MspInit+0x294>)
 80822d0:	f001 f9e4 	bl	808369c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80822d4:	4b25      	ldr	r3, [pc, #148]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822d6:	4a26      	ldr	r2, [pc, #152]	; (8082370 <HAL_UART_MspInit+0x2b8>)
 80822d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80822da:	4b24      	ldr	r3, [pc, #144]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80822e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80822e2:	4b22      	ldr	r3, [pc, #136]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822e4:	2200      	movs	r2, #0
 80822e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80822e8:	4b20      	ldr	r3, [pc, #128]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822ea:	2200      	movs	r2, #0
 80822ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80822ee:	4b1f      	ldr	r3, [pc, #124]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80822f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80822f6:	4b1d      	ldr	r3, [pc, #116]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822f8:	2200      	movs	r2, #0
 80822fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80822fc:	4b1b      	ldr	r3, [pc, #108]	; (808236c <HAL_UART_MspInit+0x2b4>)
 80822fe:	2200      	movs	r2, #0
 8082300:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8082302:	4b1a      	ldr	r3, [pc, #104]	; (808236c <HAL_UART_MspInit+0x2b4>)
 8082304:	2200      	movs	r2, #0
 8082306:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8082308:	4b18      	ldr	r3, [pc, #96]	; (808236c <HAL_UART_MspInit+0x2b4>)
 808230a:	2200      	movs	r2, #0
 808230c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 808230e:	4b17      	ldr	r3, [pc, #92]	; (808236c <HAL_UART_MspInit+0x2b4>)
 8082310:	2200      	movs	r2, #0
 8082312:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8082314:	4815      	ldr	r0, [pc, #84]	; (808236c <HAL_UART_MspInit+0x2b4>)
 8082316:	f000 fbc1 	bl	8082a9c <HAL_DMA_Init>
 808231a:	4603      	mov	r3, r0
 808231c:	2b00      	cmp	r3, #0
 808231e:	d001      	beq.n	8082324 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8082320:	f7ff fdf2 	bl	8081f08 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8082324:	687b      	ldr	r3, [r7, #4]
 8082326:	4a11      	ldr	r2, [pc, #68]	; (808236c <HAL_UART_MspInit+0x2b4>)
 8082328:	639a      	str	r2, [r3, #56]	; 0x38
 808232a:	4a10      	ldr	r2, [pc, #64]	; (808236c <HAL_UART_MspInit+0x2b4>)
 808232c:	687b      	ldr	r3, [r7, #4]
 808232e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8082330:	2200      	movs	r2, #0
 8082332:	2100      	movs	r1, #0
 8082334:	2027      	movs	r0, #39	; 0x27
 8082336:	f000 fb76 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 808233a:	2027      	movs	r0, #39	; 0x27
 808233c:	f000 fb8f 	bl	8082a5e <HAL_NVIC_EnableIRQ>
}
 8082340:	e051      	b.n	80823e6 <HAL_UART_MspInit+0x32e>
 8082342:	bf00      	nop
 8082344:	40011000 	.word	0x40011000
 8082348:	40023800 	.word	0x40023800
 808234c:	40020400 	.word	0x40020400
 8082350:	20000430 	.word	0x20000430
 8082354:	40026440 	.word	0x40026440
 8082358:	40004400 	.word	0x40004400
 808235c:	40020000 	.word	0x40020000
 8082360:	20000490 	.word	0x20000490
 8082364:	40026088 	.word	0x40026088
 8082368:	40004800 	.word	0x40004800
 808236c:	200004f0 	.word	0x200004f0
 8082370:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8082374:	687b      	ldr	r3, [r7, #4]
 8082376:	681b      	ldr	r3, [r3, #0]
 8082378:	4a1d      	ldr	r2, [pc, #116]	; (80823f0 <HAL_UART_MspInit+0x338>)
 808237a:	4293      	cmp	r3, r2
 808237c:	d133      	bne.n	80823e6 <HAL_UART_MspInit+0x32e>
    __HAL_RCC_USART6_CLK_ENABLE();
 808237e:	2300      	movs	r3, #0
 8082380:	613b      	str	r3, [r7, #16]
 8082382:	4b1c      	ldr	r3, [pc, #112]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 8082384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082386:	4a1b      	ldr	r2, [pc, #108]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 8082388:	f043 0320 	orr.w	r3, r3, #32
 808238c:	6453      	str	r3, [r2, #68]	; 0x44
 808238e:	4b19      	ldr	r3, [pc, #100]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 8082390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082392:	f003 0320 	and.w	r3, r3, #32
 8082396:	613b      	str	r3, [r7, #16]
 8082398:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 808239a:	2300      	movs	r3, #0
 808239c:	60fb      	str	r3, [r7, #12]
 808239e:	4b15      	ldr	r3, [pc, #84]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 80823a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80823a2:	4a14      	ldr	r2, [pc, #80]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 80823a4:	f043 0304 	orr.w	r3, r3, #4
 80823a8:	6313      	str	r3, [r2, #48]	; 0x30
 80823aa:	4b12      	ldr	r3, [pc, #72]	; (80823f4 <HAL_UART_MspInit+0x33c>)
 80823ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80823ae:	f003 0304 	and.w	r3, r3, #4
 80823b2:	60fb      	str	r3, [r7, #12]
 80823b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80823b6:	23c0      	movs	r3, #192	; 0xc0
 80823b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80823ba:	2302      	movs	r3, #2
 80823bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80823be:	2300      	movs	r3, #0
 80823c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80823c2:	2303      	movs	r3, #3
 80823c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80823c6:	2308      	movs	r3, #8
 80823c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80823ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80823ce:	4619      	mov	r1, r3
 80823d0:	4809      	ldr	r0, [pc, #36]	; (80823f8 <HAL_UART_MspInit+0x340>)
 80823d2:	f001 f963 	bl	808369c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80823d6:	2200      	movs	r2, #0
 80823d8:	2100      	movs	r1, #0
 80823da:	2047      	movs	r0, #71	; 0x47
 80823dc:	f000 fb23 	bl	8082a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80823e0:	2047      	movs	r0, #71	; 0x47
 80823e2:	f000 fb3c 	bl	8082a5e <HAL_NVIC_EnableIRQ>
}
 80823e6:	bf00      	nop
 80823e8:	3740      	adds	r7, #64	; 0x40
 80823ea:	46bd      	mov	sp, r7
 80823ec:	bd80      	pop	{r7, pc}
 80823ee:	bf00      	nop
 80823f0:	40011400 	.word	0x40011400
 80823f4:	40023800 	.word	0x40023800
 80823f8:	40020800 	.word	0x40020800

080823fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80823fc:	b480      	push	{r7}
 80823fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8082400:	e7fe      	b.n	8082400 <NMI_Handler+0x4>

08082402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8082402:	b480      	push	{r7}
 8082404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8082406:	e7fe      	b.n	8082406 <HardFault_Handler+0x4>

08082408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8082408:	b480      	push	{r7}
 808240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 808240c:	e7fe      	b.n	808240c <MemManage_Handler+0x4>

0808240e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 808240e:	b480      	push	{r7}
 8082410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8082412:	e7fe      	b.n	8082412 <BusFault_Handler+0x4>

08082414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8082414:	b480      	push	{r7}
 8082416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8082418:	e7fe      	b.n	8082418 <UsageFault_Handler+0x4>

0808241a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 808241a:	b480      	push	{r7}
 808241c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 808241e:	bf00      	nop
 8082420:	46bd      	mov	sp, r7
 8082422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082426:	4770      	bx	lr

08082428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8082428:	b480      	push	{r7}
 808242a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 808242c:	bf00      	nop
 808242e:	46bd      	mov	sp, r7
 8082430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082434:	4770      	bx	lr

08082436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8082436:	b480      	push	{r7}
 8082438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 808243a:	bf00      	nop
 808243c:	46bd      	mov	sp, r7
 808243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082442:	4770      	bx	lr

08082444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8082444:	b580      	push	{r7, lr}
 8082446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8082448:	f000 f9b8 	bl	80827bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 808244c:	bf00      	nop
 808244e:	bd80      	pop	{r7, pc}

08082450 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8082450:	b480      	push	{r7}
 8082452:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8082454:	bf00      	nop
 8082456:	46bd      	mov	sp, r7
 8082458:	f85d 7b04 	ldr.w	r7, [sp], #4
 808245c:	4770      	bx	lr
	...

08082460 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8082460:	b580      	push	{r7, lr}
 8082462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8082464:	4802      	ldr	r0, [pc, #8]	; (8082470 <DMA1_Stream1_IRQHandler+0x10>)
 8082466:	f000 fcb1 	bl	8082dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 808246a:	bf00      	nop
 808246c:	bd80      	pop	{r7, pc}
 808246e:	bf00      	nop
 8082470:	200004f0 	.word	0x200004f0

08082474 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8082474:	b580      	push	{r7, lr}
 8082476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8082478:	4802      	ldr	r0, [pc, #8]	; (8082484 <DMA1_Stream5_IRQHandler+0x10>)
 808247a:	f000 fca7 	bl	8082dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 808247e:	bf00      	nop
 8082480:	bd80      	pop	{r7, pc}
 8082482:	bf00      	nop
 8082484:	20000490 	.word	0x20000490

08082488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8082488:	b580      	push	{r7, lr}
 808248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 808248c:	4802      	ldr	r0, [pc, #8]	; (8082498 <USART1_IRQHandler+0x10>)
 808248e:	f004 f857 	bl	8086540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8082492:	bf00      	nop
 8082494:	bd80      	pop	{r7, pc}
 8082496:	bf00      	nop
 8082498:	20000320 	.word	0x20000320

0808249c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 808249c:	b580      	push	{r7, lr}
 808249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80824a0:	4802      	ldr	r0, [pc, #8]	; (80824ac <USART2_IRQHandler+0x10>)
 80824a2:	f004 f84d 	bl	8086540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80824a6:	bf00      	nop
 80824a8:	bd80      	pop	{r7, pc}
 80824aa:	bf00      	nop
 80824ac:	20000364 	.word	0x20000364

080824b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80824b0:	b580      	push	{r7, lr}
 80824b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80824b4:	4802      	ldr	r0, [pc, #8]	; (80824c0 <USART3_IRQHandler+0x10>)
 80824b6:	f004 f843 	bl	8086540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80824ba:	bf00      	nop
 80824bc:	bd80      	pop	{r7, pc}
 80824be:	bf00      	nop
 80824c0:	200003a8 	.word	0x200003a8

080824c4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80824c4:	b580      	push	{r7, lr}
 80824c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80824c8:	4802      	ldr	r0, [pc, #8]	; (80824d4 <RTC_Alarm_IRQHandler+0x10>)
 80824ca:	f002 fb05 	bl	8084ad8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80824ce:	bf00      	nop
 80824d0:	bd80      	pop	{r7, pc}
 80824d2:	bf00      	nop
 80824d4:	2000027c 	.word	0x2000027c

080824d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80824d8:	b580      	push	{r7, lr}
 80824da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80824dc:	4802      	ldr	r0, [pc, #8]	; (80824e8 <SDIO_IRQHandler+0x10>)
 80824de:	f003 f801 	bl	80854e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80824e2:	bf00      	nop
 80824e4:	bd80      	pop	{r7, pc}
 80824e6:	bf00      	nop
 80824e8:	2000029c 	.word	0x2000029c

080824ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80824ec:	b580      	push	{r7, lr}
 80824ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80824f0:	4802      	ldr	r0, [pc, #8]	; (80824fc <DMA2_Stream2_IRQHandler+0x10>)
 80824f2:	f000 fc6b 	bl	8082dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80824f6:	bf00      	nop
 80824f8:	bd80      	pop	{r7, pc}
 80824fa:	bf00      	nop
 80824fc:	20000430 	.word	0x20000430

08082500 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8082500:	b580      	push	{r7, lr}
 8082502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8082504:	4802      	ldr	r0, [pc, #8]	; (8082510 <USART6_IRQHandler+0x10>)
 8082506:	f004 f81b 	bl	8086540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 808250a:	bf00      	nop
 808250c:	bd80      	pop	{r7, pc}
 808250e:	bf00      	nop
 8082510:	200003ec 	.word	0x200003ec

08082514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8082514:	b480      	push	{r7}
 8082516:	af00      	add	r7, sp, #0
	return 1;
 8082518:	2301      	movs	r3, #1
}
 808251a:	4618      	mov	r0, r3
 808251c:	46bd      	mov	sp, r7
 808251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082522:	4770      	bx	lr

08082524 <_kill>:

int _kill(int pid, int sig)
{
 8082524:	b580      	push	{r7, lr}
 8082526:	b082      	sub	sp, #8
 8082528:	af00      	add	r7, sp, #0
 808252a:	6078      	str	r0, [r7, #4]
 808252c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 808252e:	f007 f959 	bl	80897e4 <__errno>
 8082532:	4603      	mov	r3, r0
 8082534:	2216      	movs	r2, #22
 8082536:	601a      	str	r2, [r3, #0]
	return -1;
 8082538:	f04f 33ff 	mov.w	r3, #4294967295
}
 808253c:	4618      	mov	r0, r3
 808253e:	3708      	adds	r7, #8
 8082540:	46bd      	mov	sp, r7
 8082542:	bd80      	pop	{r7, pc}

08082544 <_exit>:

void _exit (int status)
{
 8082544:	b580      	push	{r7, lr}
 8082546:	b082      	sub	sp, #8
 8082548:	af00      	add	r7, sp, #0
 808254a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 808254c:	f04f 31ff 	mov.w	r1, #4294967295
 8082550:	6878      	ldr	r0, [r7, #4]
 8082552:	f7ff ffe7 	bl	8082524 <_kill>
	while (1) {}		/* Make sure we hang here */
 8082556:	e7fe      	b.n	8082556 <_exit+0x12>

08082558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8082558:	b580      	push	{r7, lr}
 808255a:	b086      	sub	sp, #24
 808255c:	af00      	add	r7, sp, #0
 808255e:	60f8      	str	r0, [r7, #12]
 8082560:	60b9      	str	r1, [r7, #8]
 8082562:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8082564:	2300      	movs	r3, #0
 8082566:	617b      	str	r3, [r7, #20]
 8082568:	e00a      	b.n	8082580 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 808256a:	f3af 8000 	nop.w
 808256e:	4601      	mov	r1, r0
 8082570:	68bb      	ldr	r3, [r7, #8]
 8082572:	1c5a      	adds	r2, r3, #1
 8082574:	60ba      	str	r2, [r7, #8]
 8082576:	b2ca      	uxtb	r2, r1
 8082578:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 808257a:	697b      	ldr	r3, [r7, #20]
 808257c:	3301      	adds	r3, #1
 808257e:	617b      	str	r3, [r7, #20]
 8082580:	697a      	ldr	r2, [r7, #20]
 8082582:	687b      	ldr	r3, [r7, #4]
 8082584:	429a      	cmp	r2, r3
 8082586:	dbf0      	blt.n	808256a <_read+0x12>
	}

return len;
 8082588:	687b      	ldr	r3, [r7, #4]
}
 808258a:	4618      	mov	r0, r3
 808258c:	3718      	adds	r7, #24
 808258e:	46bd      	mov	sp, r7
 8082590:	bd80      	pop	{r7, pc}

08082592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8082592:	b580      	push	{r7, lr}
 8082594:	b086      	sub	sp, #24
 8082596:	af00      	add	r7, sp, #0
 8082598:	60f8      	str	r0, [r7, #12]
 808259a:	60b9      	str	r1, [r7, #8]
 808259c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 808259e:	2300      	movs	r3, #0
 80825a0:	617b      	str	r3, [r7, #20]
 80825a2:	e009      	b.n	80825b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80825a4:	68bb      	ldr	r3, [r7, #8]
 80825a6:	1c5a      	adds	r2, r3, #1
 80825a8:	60ba      	str	r2, [r7, #8]
 80825aa:	781b      	ldrb	r3, [r3, #0]
 80825ac:	4618      	mov	r0, r3
 80825ae:	f7ff fc99 	bl	8081ee4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80825b2:	697b      	ldr	r3, [r7, #20]
 80825b4:	3301      	adds	r3, #1
 80825b6:	617b      	str	r3, [r7, #20]
 80825b8:	697a      	ldr	r2, [r7, #20]
 80825ba:	687b      	ldr	r3, [r7, #4]
 80825bc:	429a      	cmp	r2, r3
 80825be:	dbf1      	blt.n	80825a4 <_write+0x12>
	}
	return len;
 80825c0:	687b      	ldr	r3, [r7, #4]
}
 80825c2:	4618      	mov	r0, r3
 80825c4:	3718      	adds	r7, #24
 80825c6:	46bd      	mov	sp, r7
 80825c8:	bd80      	pop	{r7, pc}

080825ca <_close>:

int _close(int file)
{
 80825ca:	b480      	push	{r7}
 80825cc:	b083      	sub	sp, #12
 80825ce:	af00      	add	r7, sp, #0
 80825d0:	6078      	str	r0, [r7, #4]
	return -1;
 80825d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80825d6:	4618      	mov	r0, r3
 80825d8:	370c      	adds	r7, #12
 80825da:	46bd      	mov	sp, r7
 80825dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80825e0:	4770      	bx	lr

080825e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80825e2:	b480      	push	{r7}
 80825e4:	b083      	sub	sp, #12
 80825e6:	af00      	add	r7, sp, #0
 80825e8:	6078      	str	r0, [r7, #4]
 80825ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80825ec:	683b      	ldr	r3, [r7, #0]
 80825ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80825f2:	605a      	str	r2, [r3, #4]
	return 0;
 80825f4:	2300      	movs	r3, #0
}
 80825f6:	4618      	mov	r0, r3
 80825f8:	370c      	adds	r7, #12
 80825fa:	46bd      	mov	sp, r7
 80825fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082600:	4770      	bx	lr

08082602 <_isatty>:

int _isatty(int file)
{
 8082602:	b480      	push	{r7}
 8082604:	b083      	sub	sp, #12
 8082606:	af00      	add	r7, sp, #0
 8082608:	6078      	str	r0, [r7, #4]
	return 1;
 808260a:	2301      	movs	r3, #1
}
 808260c:	4618      	mov	r0, r3
 808260e:	370c      	adds	r7, #12
 8082610:	46bd      	mov	sp, r7
 8082612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082616:	4770      	bx	lr

08082618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8082618:	b480      	push	{r7}
 808261a:	b085      	sub	sp, #20
 808261c:	af00      	add	r7, sp, #0
 808261e:	60f8      	str	r0, [r7, #12]
 8082620:	60b9      	str	r1, [r7, #8]
 8082622:	607a      	str	r2, [r7, #4]
	return 0;
 8082624:	2300      	movs	r3, #0
}
 8082626:	4618      	mov	r0, r3
 8082628:	3714      	adds	r7, #20
 808262a:	46bd      	mov	sp, r7
 808262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082630:	4770      	bx	lr
	...

08082634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8082634:	b580      	push	{r7, lr}
 8082636:	b086      	sub	sp, #24
 8082638:	af00      	add	r7, sp, #0
 808263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 808263c:	4a14      	ldr	r2, [pc, #80]	; (8082690 <_sbrk+0x5c>)
 808263e:	4b15      	ldr	r3, [pc, #84]	; (8082694 <_sbrk+0x60>)
 8082640:	1ad3      	subs	r3, r2, r3
 8082642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8082644:	697b      	ldr	r3, [r7, #20]
 8082646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8082648:	4b13      	ldr	r3, [pc, #76]	; (8082698 <_sbrk+0x64>)
 808264a:	681b      	ldr	r3, [r3, #0]
 808264c:	2b00      	cmp	r3, #0
 808264e:	d102      	bne.n	8082656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8082650:	4b11      	ldr	r3, [pc, #68]	; (8082698 <_sbrk+0x64>)
 8082652:	4a12      	ldr	r2, [pc, #72]	; (808269c <_sbrk+0x68>)
 8082654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8082656:	4b10      	ldr	r3, [pc, #64]	; (8082698 <_sbrk+0x64>)
 8082658:	681a      	ldr	r2, [r3, #0]
 808265a:	687b      	ldr	r3, [r7, #4]
 808265c:	4413      	add	r3, r2
 808265e:	693a      	ldr	r2, [r7, #16]
 8082660:	429a      	cmp	r2, r3
 8082662:	d207      	bcs.n	8082674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8082664:	f007 f8be 	bl	80897e4 <__errno>
 8082668:	4603      	mov	r3, r0
 808266a:	220c      	movs	r2, #12
 808266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 808266e:	f04f 33ff 	mov.w	r3, #4294967295
 8082672:	e009      	b.n	8082688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8082674:	4b08      	ldr	r3, [pc, #32]	; (8082698 <_sbrk+0x64>)
 8082676:	681b      	ldr	r3, [r3, #0]
 8082678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 808267a:	4b07      	ldr	r3, [pc, #28]	; (8082698 <_sbrk+0x64>)
 808267c:	681a      	ldr	r2, [r3, #0]
 808267e:	687b      	ldr	r3, [r7, #4]
 8082680:	4413      	add	r3, r2
 8082682:	4a05      	ldr	r2, [pc, #20]	; (8082698 <_sbrk+0x64>)
 8082684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8082686:	68fb      	ldr	r3, [r7, #12]
}
 8082688:	4618      	mov	r0, r3
 808268a:	3718      	adds	r7, #24
 808268c:	46bd      	mov	sp, r7
 808268e:	bd80      	pop	{r7, pc}
 8082690:	20020000 	.word	0x20020000
 8082694:	00000400 	.word	0x00000400
 8082698:	20000918 	.word	0x20000918
 808269c:	20000e38 	.word	0x20000e38

080826a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80826a0:	b480      	push	{r7}
 80826a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80826a4:	4b06      	ldr	r3, [pc, #24]	; (80826c0 <SystemInit+0x20>)
 80826a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80826aa:	4a05      	ldr	r2, [pc, #20]	; (80826c0 <SystemInit+0x20>)
 80826ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80826b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80826b4:	bf00      	nop
 80826b6:	46bd      	mov	sp, r7
 80826b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80826bc:	4770      	bx	lr
 80826be:	bf00      	nop
 80826c0:	e000ed00 	.word	0xe000ed00

080826c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80826c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80826fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80826c8:	480d      	ldr	r0, [pc, #52]	; (8082700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80826ca:	490e      	ldr	r1, [pc, #56]	; (8082704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80826cc:	4a0e      	ldr	r2, [pc, #56]	; (8082708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80826ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80826d0:	e002      	b.n	80826d8 <LoopCopyDataInit>

080826d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80826d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80826d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80826d6:	3304      	adds	r3, #4

080826d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80826d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80826da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80826dc:	d3f9      	bcc.n	80826d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80826de:	4a0b      	ldr	r2, [pc, #44]	; (808270c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80826e0:	4c0b      	ldr	r4, [pc, #44]	; (8082710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80826e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80826e4:	e001      	b.n	80826ea <LoopFillZerobss>

080826e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80826e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80826e8:	3204      	adds	r2, #4

080826ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80826ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80826ec:	d3fb      	bcc.n	80826e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80826ee:	f7ff ffd7 	bl	80826a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80826f2:	f007 f87d 	bl	80897f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80826f6:	f7fe fc91 	bl	808101c <main>
  bx  lr    
 80826fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80826fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8082700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8082704:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8082708:	0808d360 	.word	0x0808d360
  ldr r2, =_sbss
 808270c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8082710:	20000e38 	.word	0x20000e38

08082714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8082714:	e7fe      	b.n	8082714 <ADC_IRQHandler>
	...

08082718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8082718:	b580      	push	{r7, lr}
 808271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 808271c:	4b0e      	ldr	r3, [pc, #56]	; (8082758 <HAL_Init+0x40>)
 808271e:	681b      	ldr	r3, [r3, #0]
 8082720:	4a0d      	ldr	r2, [pc, #52]	; (8082758 <HAL_Init+0x40>)
 8082722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8082726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8082728:	4b0b      	ldr	r3, [pc, #44]	; (8082758 <HAL_Init+0x40>)
 808272a:	681b      	ldr	r3, [r3, #0]
 808272c:	4a0a      	ldr	r2, [pc, #40]	; (8082758 <HAL_Init+0x40>)
 808272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8082732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8082734:	4b08      	ldr	r3, [pc, #32]	; (8082758 <HAL_Init+0x40>)
 8082736:	681b      	ldr	r3, [r3, #0]
 8082738:	4a07      	ldr	r2, [pc, #28]	; (8082758 <HAL_Init+0x40>)
 808273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 808273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8082740:	2003      	movs	r0, #3
 8082742:	f000 f965 	bl	8082a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8082746:	200f      	movs	r0, #15
 8082748:	f000 f808 	bl	808275c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 808274c:	f7ff fbe4 	bl	8081f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8082750:	2300      	movs	r3, #0
}
 8082752:	4618      	mov	r0, r3
 8082754:	bd80      	pop	{r7, pc}
 8082756:	bf00      	nop
 8082758:	40023c00 	.word	0x40023c00

0808275c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 808275c:	b580      	push	{r7, lr}
 808275e:	b082      	sub	sp, #8
 8082760:	af00      	add	r7, sp, #0
 8082762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8082764:	4b12      	ldr	r3, [pc, #72]	; (80827b0 <HAL_InitTick+0x54>)
 8082766:	681a      	ldr	r2, [r3, #0]
 8082768:	4b12      	ldr	r3, [pc, #72]	; (80827b4 <HAL_InitTick+0x58>)
 808276a:	781b      	ldrb	r3, [r3, #0]
 808276c:	4619      	mov	r1, r3
 808276e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082772:	fbb3 f3f1 	udiv	r3, r3, r1
 8082776:	fbb2 f3f3 	udiv	r3, r2, r3
 808277a:	4618      	mov	r0, r3
 808277c:	f000 f981 	bl	8082a82 <HAL_SYSTICK_Config>
 8082780:	4603      	mov	r3, r0
 8082782:	2b00      	cmp	r3, #0
 8082784:	d001      	beq.n	808278a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8082786:	2301      	movs	r3, #1
 8082788:	e00e      	b.n	80827a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 808278a:	687b      	ldr	r3, [r7, #4]
 808278c:	2b0f      	cmp	r3, #15
 808278e:	d80a      	bhi.n	80827a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8082790:	2200      	movs	r2, #0
 8082792:	6879      	ldr	r1, [r7, #4]
 8082794:	f04f 30ff 	mov.w	r0, #4294967295
 8082798:	f000 f945 	bl	8082a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 808279c:	4a06      	ldr	r2, [pc, #24]	; (80827b8 <HAL_InitTick+0x5c>)
 808279e:	687b      	ldr	r3, [r7, #4]
 80827a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80827a2:	2300      	movs	r3, #0
 80827a4:	e000      	b.n	80827a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80827a6:	2301      	movs	r3, #1
}
 80827a8:	4618      	mov	r0, r3
 80827aa:	3708      	adds	r7, #8
 80827ac:	46bd      	mov	sp, r7
 80827ae:	bd80      	pop	{r7, pc}
 80827b0:	20000084 	.word	0x20000084
 80827b4:	2000008c 	.word	0x2000008c
 80827b8:	20000088 	.word	0x20000088

080827bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80827bc:	b480      	push	{r7}
 80827be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80827c0:	4b06      	ldr	r3, [pc, #24]	; (80827dc <HAL_IncTick+0x20>)
 80827c2:	781b      	ldrb	r3, [r3, #0]
 80827c4:	461a      	mov	r2, r3
 80827c6:	4b06      	ldr	r3, [pc, #24]	; (80827e0 <HAL_IncTick+0x24>)
 80827c8:	681b      	ldr	r3, [r3, #0]
 80827ca:	4413      	add	r3, r2
 80827cc:	4a04      	ldr	r2, [pc, #16]	; (80827e0 <HAL_IncTick+0x24>)
 80827ce:	6013      	str	r3, [r2, #0]
}
 80827d0:	bf00      	nop
 80827d2:	46bd      	mov	sp, r7
 80827d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80827d8:	4770      	bx	lr
 80827da:	bf00      	nop
 80827dc:	2000008c 	.word	0x2000008c
 80827e0:	2000091c 	.word	0x2000091c

080827e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80827e4:	b480      	push	{r7}
 80827e6:	af00      	add	r7, sp, #0
  return uwTick;
 80827e8:	4b03      	ldr	r3, [pc, #12]	; (80827f8 <HAL_GetTick+0x14>)
 80827ea:	681b      	ldr	r3, [r3, #0]
}
 80827ec:	4618      	mov	r0, r3
 80827ee:	46bd      	mov	sp, r7
 80827f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80827f4:	4770      	bx	lr
 80827f6:	bf00      	nop
 80827f8:	2000091c 	.word	0x2000091c

080827fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80827fc:	b580      	push	{r7, lr}
 80827fe:	b084      	sub	sp, #16
 8082800:	af00      	add	r7, sp, #0
 8082802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8082804:	f7ff ffee 	bl	80827e4 <HAL_GetTick>
 8082808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 808280a:	687b      	ldr	r3, [r7, #4]
 808280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 808280e:	68fb      	ldr	r3, [r7, #12]
 8082810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8082814:	d005      	beq.n	8082822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8082816:	4b0a      	ldr	r3, [pc, #40]	; (8082840 <HAL_Delay+0x44>)
 8082818:	781b      	ldrb	r3, [r3, #0]
 808281a:	461a      	mov	r2, r3
 808281c:	68fb      	ldr	r3, [r7, #12]
 808281e:	4413      	add	r3, r2
 8082820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8082822:	bf00      	nop
 8082824:	f7ff ffde 	bl	80827e4 <HAL_GetTick>
 8082828:	4602      	mov	r2, r0
 808282a:	68bb      	ldr	r3, [r7, #8]
 808282c:	1ad3      	subs	r3, r2, r3
 808282e:	68fa      	ldr	r2, [r7, #12]
 8082830:	429a      	cmp	r2, r3
 8082832:	d8f7      	bhi.n	8082824 <HAL_Delay+0x28>
  {
  }
}
 8082834:	bf00      	nop
 8082836:	bf00      	nop
 8082838:	3710      	adds	r7, #16
 808283a:	46bd      	mov	sp, r7
 808283c:	bd80      	pop	{r7, pc}
 808283e:	bf00      	nop
 8082840:	2000008c 	.word	0x2000008c

08082844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8082844:	b480      	push	{r7}
 8082846:	b085      	sub	sp, #20
 8082848:	af00      	add	r7, sp, #0
 808284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 808284c:	687b      	ldr	r3, [r7, #4]
 808284e:	f003 0307 	and.w	r3, r3, #7
 8082852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8082854:	4b0c      	ldr	r3, [pc, #48]	; (8082888 <__NVIC_SetPriorityGrouping+0x44>)
 8082856:	68db      	ldr	r3, [r3, #12]
 8082858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 808285a:	68ba      	ldr	r2, [r7, #8]
 808285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8082860:	4013      	ands	r3, r2
 8082862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8082864:	68fb      	ldr	r3, [r7, #12]
 8082866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8082868:	68bb      	ldr	r3, [r7, #8]
 808286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 808286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8082870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8082874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8082876:	4a04      	ldr	r2, [pc, #16]	; (8082888 <__NVIC_SetPriorityGrouping+0x44>)
 8082878:	68bb      	ldr	r3, [r7, #8]
 808287a:	60d3      	str	r3, [r2, #12]
}
 808287c:	bf00      	nop
 808287e:	3714      	adds	r7, #20
 8082880:	46bd      	mov	sp, r7
 8082882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082886:	4770      	bx	lr
 8082888:	e000ed00 	.word	0xe000ed00

0808288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 808288c:	b480      	push	{r7}
 808288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8082890:	4b04      	ldr	r3, [pc, #16]	; (80828a4 <__NVIC_GetPriorityGrouping+0x18>)
 8082892:	68db      	ldr	r3, [r3, #12]
 8082894:	0a1b      	lsrs	r3, r3, #8
 8082896:	f003 0307 	and.w	r3, r3, #7
}
 808289a:	4618      	mov	r0, r3
 808289c:	46bd      	mov	sp, r7
 808289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80828a2:	4770      	bx	lr
 80828a4:	e000ed00 	.word	0xe000ed00

080828a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80828a8:	b480      	push	{r7}
 80828aa:	b083      	sub	sp, #12
 80828ac:	af00      	add	r7, sp, #0
 80828ae:	4603      	mov	r3, r0
 80828b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80828b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80828b6:	2b00      	cmp	r3, #0
 80828b8:	db0b      	blt.n	80828d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80828ba:	79fb      	ldrb	r3, [r7, #7]
 80828bc:	f003 021f 	and.w	r2, r3, #31
 80828c0:	4907      	ldr	r1, [pc, #28]	; (80828e0 <__NVIC_EnableIRQ+0x38>)
 80828c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80828c6:	095b      	lsrs	r3, r3, #5
 80828c8:	2001      	movs	r0, #1
 80828ca:	fa00 f202 	lsl.w	r2, r0, r2
 80828ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80828d2:	bf00      	nop
 80828d4:	370c      	adds	r7, #12
 80828d6:	46bd      	mov	sp, r7
 80828d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80828dc:	4770      	bx	lr
 80828de:	bf00      	nop
 80828e0:	e000e100 	.word	0xe000e100

080828e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80828e4:	b480      	push	{r7}
 80828e6:	b083      	sub	sp, #12
 80828e8:	af00      	add	r7, sp, #0
 80828ea:	4603      	mov	r3, r0
 80828ec:	6039      	str	r1, [r7, #0]
 80828ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80828f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80828f4:	2b00      	cmp	r3, #0
 80828f6:	db0a      	blt.n	808290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80828f8:	683b      	ldr	r3, [r7, #0]
 80828fa:	b2da      	uxtb	r2, r3
 80828fc:	490c      	ldr	r1, [pc, #48]	; (8082930 <__NVIC_SetPriority+0x4c>)
 80828fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8082902:	0112      	lsls	r2, r2, #4
 8082904:	b2d2      	uxtb	r2, r2
 8082906:	440b      	add	r3, r1
 8082908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 808290c:	e00a      	b.n	8082924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 808290e:	683b      	ldr	r3, [r7, #0]
 8082910:	b2da      	uxtb	r2, r3
 8082912:	4908      	ldr	r1, [pc, #32]	; (8082934 <__NVIC_SetPriority+0x50>)
 8082914:	79fb      	ldrb	r3, [r7, #7]
 8082916:	f003 030f 	and.w	r3, r3, #15
 808291a:	3b04      	subs	r3, #4
 808291c:	0112      	lsls	r2, r2, #4
 808291e:	b2d2      	uxtb	r2, r2
 8082920:	440b      	add	r3, r1
 8082922:	761a      	strb	r2, [r3, #24]
}
 8082924:	bf00      	nop
 8082926:	370c      	adds	r7, #12
 8082928:	46bd      	mov	sp, r7
 808292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808292e:	4770      	bx	lr
 8082930:	e000e100 	.word	0xe000e100
 8082934:	e000ed00 	.word	0xe000ed00

08082938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8082938:	b480      	push	{r7}
 808293a:	b089      	sub	sp, #36	; 0x24
 808293c:	af00      	add	r7, sp, #0
 808293e:	60f8      	str	r0, [r7, #12]
 8082940:	60b9      	str	r1, [r7, #8]
 8082942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8082944:	68fb      	ldr	r3, [r7, #12]
 8082946:	f003 0307 	and.w	r3, r3, #7
 808294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 808294c:	69fb      	ldr	r3, [r7, #28]
 808294e:	f1c3 0307 	rsb	r3, r3, #7
 8082952:	2b04      	cmp	r3, #4
 8082954:	bf28      	it	cs
 8082956:	2304      	movcs	r3, #4
 8082958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 808295a:	69fb      	ldr	r3, [r7, #28]
 808295c:	3304      	adds	r3, #4
 808295e:	2b06      	cmp	r3, #6
 8082960:	d902      	bls.n	8082968 <NVIC_EncodePriority+0x30>
 8082962:	69fb      	ldr	r3, [r7, #28]
 8082964:	3b03      	subs	r3, #3
 8082966:	e000      	b.n	808296a <NVIC_EncodePriority+0x32>
 8082968:	2300      	movs	r3, #0
 808296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 808296c:	f04f 32ff 	mov.w	r2, #4294967295
 8082970:	69bb      	ldr	r3, [r7, #24]
 8082972:	fa02 f303 	lsl.w	r3, r2, r3
 8082976:	43da      	mvns	r2, r3
 8082978:	68bb      	ldr	r3, [r7, #8]
 808297a:	401a      	ands	r2, r3
 808297c:	697b      	ldr	r3, [r7, #20]
 808297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8082980:	f04f 31ff 	mov.w	r1, #4294967295
 8082984:	697b      	ldr	r3, [r7, #20]
 8082986:	fa01 f303 	lsl.w	r3, r1, r3
 808298a:	43d9      	mvns	r1, r3
 808298c:	687b      	ldr	r3, [r7, #4]
 808298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8082990:	4313      	orrs	r3, r2
         );
}
 8082992:	4618      	mov	r0, r3
 8082994:	3724      	adds	r7, #36	; 0x24
 8082996:	46bd      	mov	sp, r7
 8082998:	f85d 7b04 	ldr.w	r7, [sp], #4
 808299c:	4770      	bx	lr
	...

080829a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80829a0:	b480      	push	{r7}
 80829a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80829a4:	f3bf 8f4f 	dsb	sy
}
 80829a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80829aa:	4b06      	ldr	r3, [pc, #24]	; (80829c4 <__NVIC_SystemReset+0x24>)
 80829ac:	68db      	ldr	r3, [r3, #12]
 80829ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80829b2:	4904      	ldr	r1, [pc, #16]	; (80829c4 <__NVIC_SystemReset+0x24>)
 80829b4:	4b04      	ldr	r3, [pc, #16]	; (80829c8 <__NVIC_SystemReset+0x28>)
 80829b6:	4313      	orrs	r3, r2
 80829b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80829ba:	f3bf 8f4f 	dsb	sy
}
 80829be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80829c0:	bf00      	nop
 80829c2:	e7fd      	b.n	80829c0 <__NVIC_SystemReset+0x20>
 80829c4:	e000ed00 	.word	0xe000ed00
 80829c8:	05fa0004 	.word	0x05fa0004

080829cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80829cc:	b580      	push	{r7, lr}
 80829ce:	b082      	sub	sp, #8
 80829d0:	af00      	add	r7, sp, #0
 80829d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80829d4:	687b      	ldr	r3, [r7, #4]
 80829d6:	3b01      	subs	r3, #1
 80829d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80829dc:	d301      	bcc.n	80829e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80829de:	2301      	movs	r3, #1
 80829e0:	e00f      	b.n	8082a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80829e2:	4a0a      	ldr	r2, [pc, #40]	; (8082a0c <SysTick_Config+0x40>)
 80829e4:	687b      	ldr	r3, [r7, #4]
 80829e6:	3b01      	subs	r3, #1
 80829e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80829ea:	210f      	movs	r1, #15
 80829ec:	f04f 30ff 	mov.w	r0, #4294967295
 80829f0:	f7ff ff78 	bl	80828e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80829f4:	4b05      	ldr	r3, [pc, #20]	; (8082a0c <SysTick_Config+0x40>)
 80829f6:	2200      	movs	r2, #0
 80829f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80829fa:	4b04      	ldr	r3, [pc, #16]	; (8082a0c <SysTick_Config+0x40>)
 80829fc:	2207      	movs	r2, #7
 80829fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8082a00:	2300      	movs	r3, #0
}
 8082a02:	4618      	mov	r0, r3
 8082a04:	3708      	adds	r7, #8
 8082a06:	46bd      	mov	sp, r7
 8082a08:	bd80      	pop	{r7, pc}
 8082a0a:	bf00      	nop
 8082a0c:	e000e010 	.word	0xe000e010

08082a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8082a10:	b580      	push	{r7, lr}
 8082a12:	b082      	sub	sp, #8
 8082a14:	af00      	add	r7, sp, #0
 8082a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8082a18:	6878      	ldr	r0, [r7, #4]
 8082a1a:	f7ff ff13 	bl	8082844 <__NVIC_SetPriorityGrouping>
}
 8082a1e:	bf00      	nop
 8082a20:	3708      	adds	r7, #8
 8082a22:	46bd      	mov	sp, r7
 8082a24:	bd80      	pop	{r7, pc}

08082a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8082a26:	b580      	push	{r7, lr}
 8082a28:	b086      	sub	sp, #24
 8082a2a:	af00      	add	r7, sp, #0
 8082a2c:	4603      	mov	r3, r0
 8082a2e:	60b9      	str	r1, [r7, #8]
 8082a30:	607a      	str	r2, [r7, #4]
 8082a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8082a34:	2300      	movs	r3, #0
 8082a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8082a38:	f7ff ff28 	bl	808288c <__NVIC_GetPriorityGrouping>
 8082a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8082a3e:	687a      	ldr	r2, [r7, #4]
 8082a40:	68b9      	ldr	r1, [r7, #8]
 8082a42:	6978      	ldr	r0, [r7, #20]
 8082a44:	f7ff ff78 	bl	8082938 <NVIC_EncodePriority>
 8082a48:	4602      	mov	r2, r0
 8082a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8082a4e:	4611      	mov	r1, r2
 8082a50:	4618      	mov	r0, r3
 8082a52:	f7ff ff47 	bl	80828e4 <__NVIC_SetPriority>
}
 8082a56:	bf00      	nop
 8082a58:	3718      	adds	r7, #24
 8082a5a:	46bd      	mov	sp, r7
 8082a5c:	bd80      	pop	{r7, pc}

08082a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8082a5e:	b580      	push	{r7, lr}
 8082a60:	b082      	sub	sp, #8
 8082a62:	af00      	add	r7, sp, #0
 8082a64:	4603      	mov	r3, r0
 8082a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8082a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8082a6c:	4618      	mov	r0, r3
 8082a6e:	f7ff ff1b 	bl	80828a8 <__NVIC_EnableIRQ>
}
 8082a72:	bf00      	nop
 8082a74:	3708      	adds	r7, #8
 8082a76:	46bd      	mov	sp, r7
 8082a78:	bd80      	pop	{r7, pc}

08082a7a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8082a7a:	b580      	push	{r7, lr}
 8082a7c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8082a7e:	f7ff ff8f 	bl	80829a0 <__NVIC_SystemReset>

08082a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8082a82:	b580      	push	{r7, lr}
 8082a84:	b082      	sub	sp, #8
 8082a86:	af00      	add	r7, sp, #0
 8082a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8082a8a:	6878      	ldr	r0, [r7, #4]
 8082a8c:	f7ff ff9e 	bl	80829cc <SysTick_Config>
 8082a90:	4603      	mov	r3, r0
}
 8082a92:	4618      	mov	r0, r3
 8082a94:	3708      	adds	r7, #8
 8082a96:	46bd      	mov	sp, r7
 8082a98:	bd80      	pop	{r7, pc}
	...

08082a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8082a9c:	b580      	push	{r7, lr}
 8082a9e:	b086      	sub	sp, #24
 8082aa0:	af00      	add	r7, sp, #0
 8082aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8082aa4:	2300      	movs	r3, #0
 8082aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8082aa8:	f7ff fe9c 	bl	80827e4 <HAL_GetTick>
 8082aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8082aae:	687b      	ldr	r3, [r7, #4]
 8082ab0:	2b00      	cmp	r3, #0
 8082ab2:	d101      	bne.n	8082ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8082ab4:	2301      	movs	r3, #1
 8082ab6:	e099      	b.n	8082bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8082ab8:	687b      	ldr	r3, [r7, #4]
 8082aba:	2202      	movs	r2, #2
 8082abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8082ac0:	687b      	ldr	r3, [r7, #4]
 8082ac2:	2200      	movs	r2, #0
 8082ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8082ac8:	687b      	ldr	r3, [r7, #4]
 8082aca:	681b      	ldr	r3, [r3, #0]
 8082acc:	681a      	ldr	r2, [r3, #0]
 8082ace:	687b      	ldr	r3, [r7, #4]
 8082ad0:	681b      	ldr	r3, [r3, #0]
 8082ad2:	f022 0201 	bic.w	r2, r2, #1
 8082ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8082ad8:	e00f      	b.n	8082afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8082ada:	f7ff fe83 	bl	80827e4 <HAL_GetTick>
 8082ade:	4602      	mov	r2, r0
 8082ae0:	693b      	ldr	r3, [r7, #16]
 8082ae2:	1ad3      	subs	r3, r2, r3
 8082ae4:	2b05      	cmp	r3, #5
 8082ae6:	d908      	bls.n	8082afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8082ae8:	687b      	ldr	r3, [r7, #4]
 8082aea:	2220      	movs	r2, #32
 8082aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8082aee:	687b      	ldr	r3, [r7, #4]
 8082af0:	2203      	movs	r2, #3
 8082af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8082af6:	2303      	movs	r3, #3
 8082af8:	e078      	b.n	8082bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8082afa:	687b      	ldr	r3, [r7, #4]
 8082afc:	681b      	ldr	r3, [r3, #0]
 8082afe:	681b      	ldr	r3, [r3, #0]
 8082b00:	f003 0301 	and.w	r3, r3, #1
 8082b04:	2b00      	cmp	r3, #0
 8082b06:	d1e8      	bne.n	8082ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8082b08:	687b      	ldr	r3, [r7, #4]
 8082b0a:	681b      	ldr	r3, [r3, #0]
 8082b0c:	681b      	ldr	r3, [r3, #0]
 8082b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8082b10:	697a      	ldr	r2, [r7, #20]
 8082b12:	4b38      	ldr	r3, [pc, #224]	; (8082bf4 <HAL_DMA_Init+0x158>)
 8082b14:	4013      	ands	r3, r2
 8082b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8082b18:	687b      	ldr	r3, [r7, #4]
 8082b1a:	685a      	ldr	r2, [r3, #4]
 8082b1c:	687b      	ldr	r3, [r7, #4]
 8082b1e:	689b      	ldr	r3, [r3, #8]
 8082b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8082b22:	687b      	ldr	r3, [r7, #4]
 8082b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8082b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8082b28:	687b      	ldr	r3, [r7, #4]
 8082b2a:	691b      	ldr	r3, [r3, #16]
 8082b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8082b2e:	687b      	ldr	r3, [r7, #4]
 8082b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8082b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8082b34:	687b      	ldr	r3, [r7, #4]
 8082b36:	699b      	ldr	r3, [r3, #24]
 8082b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8082b3a:	687b      	ldr	r3, [r7, #4]
 8082b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8082b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8082b40:	687b      	ldr	r3, [r7, #4]
 8082b42:	6a1b      	ldr	r3, [r3, #32]
 8082b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8082b46:	697a      	ldr	r2, [r7, #20]
 8082b48:	4313      	orrs	r3, r2
 8082b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8082b4c:	687b      	ldr	r3, [r7, #4]
 8082b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082b50:	2b04      	cmp	r3, #4
 8082b52:	d107      	bne.n	8082b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8082b54:	687b      	ldr	r3, [r7, #4]
 8082b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8082b58:	687b      	ldr	r3, [r7, #4]
 8082b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082b5c:	4313      	orrs	r3, r2
 8082b5e:	697a      	ldr	r2, [r7, #20]
 8082b60:	4313      	orrs	r3, r2
 8082b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8082b64:	687b      	ldr	r3, [r7, #4]
 8082b66:	681b      	ldr	r3, [r3, #0]
 8082b68:	697a      	ldr	r2, [r7, #20]
 8082b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8082b6c:	687b      	ldr	r3, [r7, #4]
 8082b6e:	681b      	ldr	r3, [r3, #0]
 8082b70:	695b      	ldr	r3, [r3, #20]
 8082b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8082b74:	697b      	ldr	r3, [r7, #20]
 8082b76:	f023 0307 	bic.w	r3, r3, #7
 8082b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8082b7c:	687b      	ldr	r3, [r7, #4]
 8082b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082b80:	697a      	ldr	r2, [r7, #20]
 8082b82:	4313      	orrs	r3, r2
 8082b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8082b86:	687b      	ldr	r3, [r7, #4]
 8082b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082b8a:	2b04      	cmp	r3, #4
 8082b8c:	d117      	bne.n	8082bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8082b8e:	687b      	ldr	r3, [r7, #4]
 8082b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8082b92:	697a      	ldr	r2, [r7, #20]
 8082b94:	4313      	orrs	r3, r2
 8082b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8082b98:	687b      	ldr	r3, [r7, #4]
 8082b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8082b9c:	2b00      	cmp	r3, #0
 8082b9e:	d00e      	beq.n	8082bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8082ba0:	6878      	ldr	r0, [r7, #4]
 8082ba2:	f000 fb01 	bl	80831a8 <DMA_CheckFifoParam>
 8082ba6:	4603      	mov	r3, r0
 8082ba8:	2b00      	cmp	r3, #0
 8082baa:	d008      	beq.n	8082bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8082bac:	687b      	ldr	r3, [r7, #4]
 8082bae:	2240      	movs	r2, #64	; 0x40
 8082bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8082bb2:	687b      	ldr	r3, [r7, #4]
 8082bb4:	2201      	movs	r2, #1
 8082bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8082bba:	2301      	movs	r3, #1
 8082bbc:	e016      	b.n	8082bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8082bbe:	687b      	ldr	r3, [r7, #4]
 8082bc0:	681b      	ldr	r3, [r3, #0]
 8082bc2:	697a      	ldr	r2, [r7, #20]
 8082bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8082bc6:	6878      	ldr	r0, [r7, #4]
 8082bc8:	f000 fab8 	bl	808313c <DMA_CalcBaseAndBitshift>
 8082bcc:	4603      	mov	r3, r0
 8082bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082bd0:	687b      	ldr	r3, [r7, #4]
 8082bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082bd4:	223f      	movs	r2, #63	; 0x3f
 8082bd6:	409a      	lsls	r2, r3
 8082bd8:	68fb      	ldr	r3, [r7, #12]
 8082bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8082bdc:	687b      	ldr	r3, [r7, #4]
 8082bde:	2200      	movs	r2, #0
 8082be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8082be2:	687b      	ldr	r3, [r7, #4]
 8082be4:	2201      	movs	r2, #1
 8082be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8082bea:	2300      	movs	r3, #0
}
 8082bec:	4618      	mov	r0, r3
 8082bee:	3718      	adds	r7, #24
 8082bf0:	46bd      	mov	sp, r7
 8082bf2:	bd80      	pop	{r7, pc}
 8082bf4:	f010803f 	.word	0xf010803f

08082bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8082bf8:	b580      	push	{r7, lr}
 8082bfa:	b086      	sub	sp, #24
 8082bfc:	af00      	add	r7, sp, #0
 8082bfe:	60f8      	str	r0, [r7, #12]
 8082c00:	60b9      	str	r1, [r7, #8]
 8082c02:	607a      	str	r2, [r7, #4]
 8082c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8082c06:	2300      	movs	r3, #0
 8082c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8082c0a:	68fb      	ldr	r3, [r7, #12]
 8082c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8082c10:	68fb      	ldr	r3, [r7, #12]
 8082c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8082c16:	2b01      	cmp	r3, #1
 8082c18:	d101      	bne.n	8082c1e <HAL_DMA_Start_IT+0x26>
 8082c1a:	2302      	movs	r3, #2
 8082c1c:	e040      	b.n	8082ca0 <HAL_DMA_Start_IT+0xa8>
 8082c1e:	68fb      	ldr	r3, [r7, #12]
 8082c20:	2201      	movs	r2, #1
 8082c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8082c26:	68fb      	ldr	r3, [r7, #12]
 8082c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082c2c:	b2db      	uxtb	r3, r3
 8082c2e:	2b01      	cmp	r3, #1
 8082c30:	d12f      	bne.n	8082c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8082c32:	68fb      	ldr	r3, [r7, #12]
 8082c34:	2202      	movs	r2, #2
 8082c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8082c3a:	68fb      	ldr	r3, [r7, #12]
 8082c3c:	2200      	movs	r2, #0
 8082c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8082c40:	683b      	ldr	r3, [r7, #0]
 8082c42:	687a      	ldr	r2, [r7, #4]
 8082c44:	68b9      	ldr	r1, [r7, #8]
 8082c46:	68f8      	ldr	r0, [r7, #12]
 8082c48:	f000 fa4a 	bl	80830e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082c4c:	68fb      	ldr	r3, [r7, #12]
 8082c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082c50:	223f      	movs	r2, #63	; 0x3f
 8082c52:	409a      	lsls	r2, r3
 8082c54:	693b      	ldr	r3, [r7, #16]
 8082c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8082c58:	68fb      	ldr	r3, [r7, #12]
 8082c5a:	681b      	ldr	r3, [r3, #0]
 8082c5c:	681a      	ldr	r2, [r3, #0]
 8082c5e:	68fb      	ldr	r3, [r7, #12]
 8082c60:	681b      	ldr	r3, [r3, #0]
 8082c62:	f042 0216 	orr.w	r2, r2, #22
 8082c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8082c68:	68fb      	ldr	r3, [r7, #12]
 8082c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082c6c:	2b00      	cmp	r3, #0
 8082c6e:	d007      	beq.n	8082c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8082c70:	68fb      	ldr	r3, [r7, #12]
 8082c72:	681b      	ldr	r3, [r3, #0]
 8082c74:	681a      	ldr	r2, [r3, #0]
 8082c76:	68fb      	ldr	r3, [r7, #12]
 8082c78:	681b      	ldr	r3, [r3, #0]
 8082c7a:	f042 0208 	orr.w	r2, r2, #8
 8082c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8082c80:	68fb      	ldr	r3, [r7, #12]
 8082c82:	681b      	ldr	r3, [r3, #0]
 8082c84:	681a      	ldr	r2, [r3, #0]
 8082c86:	68fb      	ldr	r3, [r7, #12]
 8082c88:	681b      	ldr	r3, [r3, #0]
 8082c8a:	f042 0201 	orr.w	r2, r2, #1
 8082c8e:	601a      	str	r2, [r3, #0]
 8082c90:	e005      	b.n	8082c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8082c92:	68fb      	ldr	r3, [r7, #12]
 8082c94:	2200      	movs	r2, #0
 8082c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8082c9a:	2302      	movs	r3, #2
 8082c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8082c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8082ca0:	4618      	mov	r0, r3
 8082ca2:	3718      	adds	r7, #24
 8082ca4:	46bd      	mov	sp, r7
 8082ca6:	bd80      	pop	{r7, pc}

08082ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8082ca8:	b580      	push	{r7, lr}
 8082caa:	b084      	sub	sp, #16
 8082cac:	af00      	add	r7, sp, #0
 8082cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8082cb0:	687b      	ldr	r3, [r7, #4]
 8082cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8082cb6:	f7ff fd95 	bl	80827e4 <HAL_GetTick>
 8082cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8082cbc:	687b      	ldr	r3, [r7, #4]
 8082cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082cc2:	b2db      	uxtb	r3, r3
 8082cc4:	2b02      	cmp	r3, #2
 8082cc6:	d008      	beq.n	8082cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8082cc8:	687b      	ldr	r3, [r7, #4]
 8082cca:	2280      	movs	r2, #128	; 0x80
 8082ccc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8082cce:	687b      	ldr	r3, [r7, #4]
 8082cd0:	2200      	movs	r2, #0
 8082cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8082cd6:	2301      	movs	r3, #1
 8082cd8:	e052      	b.n	8082d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8082cda:	687b      	ldr	r3, [r7, #4]
 8082cdc:	681b      	ldr	r3, [r3, #0]
 8082cde:	681a      	ldr	r2, [r3, #0]
 8082ce0:	687b      	ldr	r3, [r7, #4]
 8082ce2:	681b      	ldr	r3, [r3, #0]
 8082ce4:	f022 0216 	bic.w	r2, r2, #22
 8082ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8082cea:	687b      	ldr	r3, [r7, #4]
 8082cec:	681b      	ldr	r3, [r3, #0]
 8082cee:	695a      	ldr	r2, [r3, #20]
 8082cf0:	687b      	ldr	r3, [r7, #4]
 8082cf2:	681b      	ldr	r3, [r3, #0]
 8082cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8082cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8082cfa:	687b      	ldr	r3, [r7, #4]
 8082cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082cfe:	2b00      	cmp	r3, #0
 8082d00:	d103      	bne.n	8082d0a <HAL_DMA_Abort+0x62>
 8082d02:	687b      	ldr	r3, [r7, #4]
 8082d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082d06:	2b00      	cmp	r3, #0
 8082d08:	d007      	beq.n	8082d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8082d0a:	687b      	ldr	r3, [r7, #4]
 8082d0c:	681b      	ldr	r3, [r3, #0]
 8082d0e:	681a      	ldr	r2, [r3, #0]
 8082d10:	687b      	ldr	r3, [r7, #4]
 8082d12:	681b      	ldr	r3, [r3, #0]
 8082d14:	f022 0208 	bic.w	r2, r2, #8
 8082d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8082d1a:	687b      	ldr	r3, [r7, #4]
 8082d1c:	681b      	ldr	r3, [r3, #0]
 8082d1e:	681a      	ldr	r2, [r3, #0]
 8082d20:	687b      	ldr	r3, [r7, #4]
 8082d22:	681b      	ldr	r3, [r3, #0]
 8082d24:	f022 0201 	bic.w	r2, r2, #1
 8082d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8082d2a:	e013      	b.n	8082d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8082d2c:	f7ff fd5a 	bl	80827e4 <HAL_GetTick>
 8082d30:	4602      	mov	r2, r0
 8082d32:	68bb      	ldr	r3, [r7, #8]
 8082d34:	1ad3      	subs	r3, r2, r3
 8082d36:	2b05      	cmp	r3, #5
 8082d38:	d90c      	bls.n	8082d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8082d3a:	687b      	ldr	r3, [r7, #4]
 8082d3c:	2220      	movs	r2, #32
 8082d3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8082d40:	687b      	ldr	r3, [r7, #4]
 8082d42:	2203      	movs	r2, #3
 8082d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8082d48:	687b      	ldr	r3, [r7, #4]
 8082d4a:	2200      	movs	r2, #0
 8082d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8082d50:	2303      	movs	r3, #3
 8082d52:	e015      	b.n	8082d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8082d54:	687b      	ldr	r3, [r7, #4]
 8082d56:	681b      	ldr	r3, [r3, #0]
 8082d58:	681b      	ldr	r3, [r3, #0]
 8082d5a:	f003 0301 	and.w	r3, r3, #1
 8082d5e:	2b00      	cmp	r3, #0
 8082d60:	d1e4      	bne.n	8082d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082d62:	687b      	ldr	r3, [r7, #4]
 8082d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082d66:	223f      	movs	r2, #63	; 0x3f
 8082d68:	409a      	lsls	r2, r3
 8082d6a:	68fb      	ldr	r3, [r7, #12]
 8082d6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8082d6e:	687b      	ldr	r3, [r7, #4]
 8082d70:	2201      	movs	r2, #1
 8082d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8082d76:	687b      	ldr	r3, [r7, #4]
 8082d78:	2200      	movs	r2, #0
 8082d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8082d7e:	2300      	movs	r3, #0
}
 8082d80:	4618      	mov	r0, r3
 8082d82:	3710      	adds	r7, #16
 8082d84:	46bd      	mov	sp, r7
 8082d86:	bd80      	pop	{r7, pc}

08082d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8082d88:	b480      	push	{r7}
 8082d8a:	b083      	sub	sp, #12
 8082d8c:	af00      	add	r7, sp, #0
 8082d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8082d90:	687b      	ldr	r3, [r7, #4]
 8082d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082d96:	b2db      	uxtb	r3, r3
 8082d98:	2b02      	cmp	r3, #2
 8082d9a:	d004      	beq.n	8082da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8082d9c:	687b      	ldr	r3, [r7, #4]
 8082d9e:	2280      	movs	r2, #128	; 0x80
 8082da0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8082da2:	2301      	movs	r3, #1
 8082da4:	e00c      	b.n	8082dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8082da6:	687b      	ldr	r3, [r7, #4]
 8082da8:	2205      	movs	r2, #5
 8082daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8082dae:	687b      	ldr	r3, [r7, #4]
 8082db0:	681b      	ldr	r3, [r3, #0]
 8082db2:	681a      	ldr	r2, [r3, #0]
 8082db4:	687b      	ldr	r3, [r7, #4]
 8082db6:	681b      	ldr	r3, [r3, #0]
 8082db8:	f022 0201 	bic.w	r2, r2, #1
 8082dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8082dbe:	2300      	movs	r3, #0
}
 8082dc0:	4618      	mov	r0, r3
 8082dc2:	370c      	adds	r7, #12
 8082dc4:	46bd      	mov	sp, r7
 8082dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8082dca:	4770      	bx	lr

08082dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8082dcc:	b580      	push	{r7, lr}
 8082dce:	b086      	sub	sp, #24
 8082dd0:	af00      	add	r7, sp, #0
 8082dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8082dd4:	2300      	movs	r3, #0
 8082dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8082dd8:	4b8e      	ldr	r3, [pc, #568]	; (8083014 <HAL_DMA_IRQHandler+0x248>)
 8082dda:	681b      	ldr	r3, [r3, #0]
 8082ddc:	4a8e      	ldr	r2, [pc, #568]	; (8083018 <HAL_DMA_IRQHandler+0x24c>)
 8082dde:	fba2 2303 	umull	r2, r3, r2, r3
 8082de2:	0a9b      	lsrs	r3, r3, #10
 8082de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8082de6:	687b      	ldr	r3, [r7, #4]
 8082de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8082dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8082dec:	693b      	ldr	r3, [r7, #16]
 8082dee:	681b      	ldr	r3, [r3, #0]
 8082df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8082df2:	687b      	ldr	r3, [r7, #4]
 8082df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082df6:	2208      	movs	r2, #8
 8082df8:	409a      	lsls	r2, r3
 8082dfa:	68fb      	ldr	r3, [r7, #12]
 8082dfc:	4013      	ands	r3, r2
 8082dfe:	2b00      	cmp	r3, #0
 8082e00:	d01a      	beq.n	8082e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8082e02:	687b      	ldr	r3, [r7, #4]
 8082e04:	681b      	ldr	r3, [r3, #0]
 8082e06:	681b      	ldr	r3, [r3, #0]
 8082e08:	f003 0304 	and.w	r3, r3, #4
 8082e0c:	2b00      	cmp	r3, #0
 8082e0e:	d013      	beq.n	8082e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8082e10:	687b      	ldr	r3, [r7, #4]
 8082e12:	681b      	ldr	r3, [r3, #0]
 8082e14:	681a      	ldr	r2, [r3, #0]
 8082e16:	687b      	ldr	r3, [r7, #4]
 8082e18:	681b      	ldr	r3, [r3, #0]
 8082e1a:	f022 0204 	bic.w	r2, r2, #4
 8082e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8082e20:	687b      	ldr	r3, [r7, #4]
 8082e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082e24:	2208      	movs	r2, #8
 8082e26:	409a      	lsls	r2, r3
 8082e28:	693b      	ldr	r3, [r7, #16]
 8082e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8082e2c:	687b      	ldr	r3, [r7, #4]
 8082e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082e30:	f043 0201 	orr.w	r2, r3, #1
 8082e34:	687b      	ldr	r3, [r7, #4]
 8082e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8082e38:	687b      	ldr	r3, [r7, #4]
 8082e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082e3c:	2201      	movs	r2, #1
 8082e3e:	409a      	lsls	r2, r3
 8082e40:	68fb      	ldr	r3, [r7, #12]
 8082e42:	4013      	ands	r3, r2
 8082e44:	2b00      	cmp	r3, #0
 8082e46:	d012      	beq.n	8082e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8082e48:	687b      	ldr	r3, [r7, #4]
 8082e4a:	681b      	ldr	r3, [r3, #0]
 8082e4c:	695b      	ldr	r3, [r3, #20]
 8082e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8082e52:	2b00      	cmp	r3, #0
 8082e54:	d00b      	beq.n	8082e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8082e56:	687b      	ldr	r3, [r7, #4]
 8082e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082e5a:	2201      	movs	r2, #1
 8082e5c:	409a      	lsls	r2, r3
 8082e5e:	693b      	ldr	r3, [r7, #16]
 8082e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8082e62:	687b      	ldr	r3, [r7, #4]
 8082e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082e66:	f043 0202 	orr.w	r2, r3, #2
 8082e6a:	687b      	ldr	r3, [r7, #4]
 8082e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8082e6e:	687b      	ldr	r3, [r7, #4]
 8082e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082e72:	2204      	movs	r2, #4
 8082e74:	409a      	lsls	r2, r3
 8082e76:	68fb      	ldr	r3, [r7, #12]
 8082e78:	4013      	ands	r3, r2
 8082e7a:	2b00      	cmp	r3, #0
 8082e7c:	d012      	beq.n	8082ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8082e7e:	687b      	ldr	r3, [r7, #4]
 8082e80:	681b      	ldr	r3, [r3, #0]
 8082e82:	681b      	ldr	r3, [r3, #0]
 8082e84:	f003 0302 	and.w	r3, r3, #2
 8082e88:	2b00      	cmp	r3, #0
 8082e8a:	d00b      	beq.n	8082ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8082e8c:	687b      	ldr	r3, [r7, #4]
 8082e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082e90:	2204      	movs	r2, #4
 8082e92:	409a      	lsls	r2, r3
 8082e94:	693b      	ldr	r3, [r7, #16]
 8082e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8082e98:	687b      	ldr	r3, [r7, #4]
 8082e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8082e9c:	f043 0204 	orr.w	r2, r3, #4
 8082ea0:	687b      	ldr	r3, [r7, #4]
 8082ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8082ea4:	687b      	ldr	r3, [r7, #4]
 8082ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082ea8:	2210      	movs	r2, #16
 8082eaa:	409a      	lsls	r2, r3
 8082eac:	68fb      	ldr	r3, [r7, #12]
 8082eae:	4013      	ands	r3, r2
 8082eb0:	2b00      	cmp	r3, #0
 8082eb2:	d043      	beq.n	8082f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8082eb4:	687b      	ldr	r3, [r7, #4]
 8082eb6:	681b      	ldr	r3, [r3, #0]
 8082eb8:	681b      	ldr	r3, [r3, #0]
 8082eba:	f003 0308 	and.w	r3, r3, #8
 8082ebe:	2b00      	cmp	r3, #0
 8082ec0:	d03c      	beq.n	8082f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8082ec2:	687b      	ldr	r3, [r7, #4]
 8082ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082ec6:	2210      	movs	r2, #16
 8082ec8:	409a      	lsls	r2, r3
 8082eca:	693b      	ldr	r3, [r7, #16]
 8082ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8082ece:	687b      	ldr	r3, [r7, #4]
 8082ed0:	681b      	ldr	r3, [r3, #0]
 8082ed2:	681b      	ldr	r3, [r3, #0]
 8082ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082ed8:	2b00      	cmp	r3, #0
 8082eda:	d018      	beq.n	8082f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8082edc:	687b      	ldr	r3, [r7, #4]
 8082ede:	681b      	ldr	r3, [r3, #0]
 8082ee0:	681b      	ldr	r3, [r3, #0]
 8082ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8082ee6:	2b00      	cmp	r3, #0
 8082ee8:	d108      	bne.n	8082efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8082eea:	687b      	ldr	r3, [r7, #4]
 8082eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082eee:	2b00      	cmp	r3, #0
 8082ef0:	d024      	beq.n	8082f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8082ef2:	687b      	ldr	r3, [r7, #4]
 8082ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082ef6:	6878      	ldr	r0, [r7, #4]
 8082ef8:	4798      	blx	r3
 8082efa:	e01f      	b.n	8082f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8082efc:	687b      	ldr	r3, [r7, #4]
 8082efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082f00:	2b00      	cmp	r3, #0
 8082f02:	d01b      	beq.n	8082f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8082f04:	687b      	ldr	r3, [r7, #4]
 8082f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082f08:	6878      	ldr	r0, [r7, #4]
 8082f0a:	4798      	blx	r3
 8082f0c:	e016      	b.n	8082f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8082f0e:	687b      	ldr	r3, [r7, #4]
 8082f10:	681b      	ldr	r3, [r3, #0]
 8082f12:	681b      	ldr	r3, [r3, #0]
 8082f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8082f18:	2b00      	cmp	r3, #0
 8082f1a:	d107      	bne.n	8082f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8082f1c:	687b      	ldr	r3, [r7, #4]
 8082f1e:	681b      	ldr	r3, [r3, #0]
 8082f20:	681a      	ldr	r2, [r3, #0]
 8082f22:	687b      	ldr	r3, [r7, #4]
 8082f24:	681b      	ldr	r3, [r3, #0]
 8082f26:	f022 0208 	bic.w	r2, r2, #8
 8082f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8082f2c:	687b      	ldr	r3, [r7, #4]
 8082f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082f30:	2b00      	cmp	r3, #0
 8082f32:	d003      	beq.n	8082f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8082f34:	687b      	ldr	r3, [r7, #4]
 8082f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082f38:	6878      	ldr	r0, [r7, #4]
 8082f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8082f3c:	687b      	ldr	r3, [r7, #4]
 8082f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082f40:	2220      	movs	r2, #32
 8082f42:	409a      	lsls	r2, r3
 8082f44:	68fb      	ldr	r3, [r7, #12]
 8082f46:	4013      	ands	r3, r2
 8082f48:	2b00      	cmp	r3, #0
 8082f4a:	f000 808f 	beq.w	808306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8082f4e:	687b      	ldr	r3, [r7, #4]
 8082f50:	681b      	ldr	r3, [r3, #0]
 8082f52:	681b      	ldr	r3, [r3, #0]
 8082f54:	f003 0310 	and.w	r3, r3, #16
 8082f58:	2b00      	cmp	r3, #0
 8082f5a:	f000 8087 	beq.w	808306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8082f5e:	687b      	ldr	r3, [r7, #4]
 8082f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082f62:	2220      	movs	r2, #32
 8082f64:	409a      	lsls	r2, r3
 8082f66:	693b      	ldr	r3, [r7, #16]
 8082f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8082f6a:	687b      	ldr	r3, [r7, #4]
 8082f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8082f70:	b2db      	uxtb	r3, r3
 8082f72:	2b05      	cmp	r3, #5
 8082f74:	d136      	bne.n	8082fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8082f76:	687b      	ldr	r3, [r7, #4]
 8082f78:	681b      	ldr	r3, [r3, #0]
 8082f7a:	681a      	ldr	r2, [r3, #0]
 8082f7c:	687b      	ldr	r3, [r7, #4]
 8082f7e:	681b      	ldr	r3, [r3, #0]
 8082f80:	f022 0216 	bic.w	r2, r2, #22
 8082f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8082f86:	687b      	ldr	r3, [r7, #4]
 8082f88:	681b      	ldr	r3, [r3, #0]
 8082f8a:	695a      	ldr	r2, [r3, #20]
 8082f8c:	687b      	ldr	r3, [r7, #4]
 8082f8e:	681b      	ldr	r3, [r3, #0]
 8082f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8082f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8082f96:	687b      	ldr	r3, [r7, #4]
 8082f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082f9a:	2b00      	cmp	r3, #0
 8082f9c:	d103      	bne.n	8082fa6 <HAL_DMA_IRQHandler+0x1da>
 8082f9e:	687b      	ldr	r3, [r7, #4]
 8082fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8082fa2:	2b00      	cmp	r3, #0
 8082fa4:	d007      	beq.n	8082fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8082fa6:	687b      	ldr	r3, [r7, #4]
 8082fa8:	681b      	ldr	r3, [r3, #0]
 8082faa:	681a      	ldr	r2, [r3, #0]
 8082fac:	687b      	ldr	r3, [r7, #4]
 8082fae:	681b      	ldr	r3, [r3, #0]
 8082fb0:	f022 0208 	bic.w	r2, r2, #8
 8082fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8082fb6:	687b      	ldr	r3, [r7, #4]
 8082fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8082fba:	223f      	movs	r2, #63	; 0x3f
 8082fbc:	409a      	lsls	r2, r3
 8082fbe:	693b      	ldr	r3, [r7, #16]
 8082fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8082fc2:	687b      	ldr	r3, [r7, #4]
 8082fc4:	2201      	movs	r2, #1
 8082fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8082fca:	687b      	ldr	r3, [r7, #4]
 8082fcc:	2200      	movs	r2, #0
 8082fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8082fd2:	687b      	ldr	r3, [r7, #4]
 8082fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082fd6:	2b00      	cmp	r3, #0
 8082fd8:	d07e      	beq.n	80830d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8082fda:	687b      	ldr	r3, [r7, #4]
 8082fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082fde:	6878      	ldr	r0, [r7, #4]
 8082fe0:	4798      	blx	r3
        }
        return;
 8082fe2:	e079      	b.n	80830d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8082fe4:	687b      	ldr	r3, [r7, #4]
 8082fe6:	681b      	ldr	r3, [r3, #0]
 8082fe8:	681b      	ldr	r3, [r3, #0]
 8082fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8082fee:	2b00      	cmp	r3, #0
 8082ff0:	d01d      	beq.n	808302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8082ff2:	687b      	ldr	r3, [r7, #4]
 8082ff4:	681b      	ldr	r3, [r3, #0]
 8082ff6:	681b      	ldr	r3, [r3, #0]
 8082ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8082ffc:	2b00      	cmp	r3, #0
 8082ffe:	d10d      	bne.n	808301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8083000:	687b      	ldr	r3, [r7, #4]
 8083002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083004:	2b00      	cmp	r3, #0
 8083006:	d031      	beq.n	808306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8083008:	687b      	ldr	r3, [r7, #4]
 808300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808300c:	6878      	ldr	r0, [r7, #4]
 808300e:	4798      	blx	r3
 8083010:	e02c      	b.n	808306c <HAL_DMA_IRQHandler+0x2a0>
 8083012:	bf00      	nop
 8083014:	20000084 	.word	0x20000084
 8083018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 808301c:	687b      	ldr	r3, [r7, #4]
 808301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083020:	2b00      	cmp	r3, #0
 8083022:	d023      	beq.n	808306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8083024:	687b      	ldr	r3, [r7, #4]
 8083026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083028:	6878      	ldr	r0, [r7, #4]
 808302a:	4798      	blx	r3
 808302c:	e01e      	b.n	808306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 808302e:	687b      	ldr	r3, [r7, #4]
 8083030:	681b      	ldr	r3, [r3, #0]
 8083032:	681b      	ldr	r3, [r3, #0]
 8083034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083038:	2b00      	cmp	r3, #0
 808303a:	d10f      	bne.n	808305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 808303c:	687b      	ldr	r3, [r7, #4]
 808303e:	681b      	ldr	r3, [r3, #0]
 8083040:	681a      	ldr	r2, [r3, #0]
 8083042:	687b      	ldr	r3, [r7, #4]
 8083044:	681b      	ldr	r3, [r3, #0]
 8083046:	f022 0210 	bic.w	r2, r2, #16
 808304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 808304c:	687b      	ldr	r3, [r7, #4]
 808304e:	2201      	movs	r2, #1
 8083050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8083054:	687b      	ldr	r3, [r7, #4]
 8083056:	2200      	movs	r2, #0
 8083058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 808305c:	687b      	ldr	r3, [r7, #4]
 808305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083060:	2b00      	cmp	r3, #0
 8083062:	d003      	beq.n	808306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8083064:	687b      	ldr	r3, [r7, #4]
 8083066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8083068:	6878      	ldr	r0, [r7, #4]
 808306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 808306c:	687b      	ldr	r3, [r7, #4]
 808306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8083070:	2b00      	cmp	r3, #0
 8083072:	d032      	beq.n	80830da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8083074:	687b      	ldr	r3, [r7, #4]
 8083076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8083078:	f003 0301 	and.w	r3, r3, #1
 808307c:	2b00      	cmp	r3, #0
 808307e:	d022      	beq.n	80830c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8083080:	687b      	ldr	r3, [r7, #4]
 8083082:	2205      	movs	r2, #5
 8083084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8083088:	687b      	ldr	r3, [r7, #4]
 808308a:	681b      	ldr	r3, [r3, #0]
 808308c:	681a      	ldr	r2, [r3, #0]
 808308e:	687b      	ldr	r3, [r7, #4]
 8083090:	681b      	ldr	r3, [r3, #0]
 8083092:	f022 0201 	bic.w	r2, r2, #1
 8083096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8083098:	68bb      	ldr	r3, [r7, #8]
 808309a:	3301      	adds	r3, #1
 808309c:	60bb      	str	r3, [r7, #8]
 808309e:	697a      	ldr	r2, [r7, #20]
 80830a0:	429a      	cmp	r2, r3
 80830a2:	d307      	bcc.n	80830b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80830a4:	687b      	ldr	r3, [r7, #4]
 80830a6:	681b      	ldr	r3, [r3, #0]
 80830a8:	681b      	ldr	r3, [r3, #0]
 80830aa:	f003 0301 	and.w	r3, r3, #1
 80830ae:	2b00      	cmp	r3, #0
 80830b0:	d1f2      	bne.n	8083098 <HAL_DMA_IRQHandler+0x2cc>
 80830b2:	e000      	b.n	80830b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80830b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80830b6:	687b      	ldr	r3, [r7, #4]
 80830b8:	2201      	movs	r2, #1
 80830ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80830be:	687b      	ldr	r3, [r7, #4]
 80830c0:	2200      	movs	r2, #0
 80830c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80830c6:	687b      	ldr	r3, [r7, #4]
 80830c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80830ca:	2b00      	cmp	r3, #0
 80830cc:	d005      	beq.n	80830da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80830ce:	687b      	ldr	r3, [r7, #4]
 80830d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80830d2:	6878      	ldr	r0, [r7, #4]
 80830d4:	4798      	blx	r3
 80830d6:	e000      	b.n	80830da <HAL_DMA_IRQHandler+0x30e>
        return;
 80830d8:	bf00      	nop
    }
  }
}
 80830da:	3718      	adds	r7, #24
 80830dc:	46bd      	mov	sp, r7
 80830de:	bd80      	pop	{r7, pc}

080830e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80830e0:	b480      	push	{r7}
 80830e2:	b085      	sub	sp, #20
 80830e4:	af00      	add	r7, sp, #0
 80830e6:	60f8      	str	r0, [r7, #12]
 80830e8:	60b9      	str	r1, [r7, #8]
 80830ea:	607a      	str	r2, [r7, #4]
 80830ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80830ee:	68fb      	ldr	r3, [r7, #12]
 80830f0:	681b      	ldr	r3, [r3, #0]
 80830f2:	681a      	ldr	r2, [r3, #0]
 80830f4:	68fb      	ldr	r3, [r7, #12]
 80830f6:	681b      	ldr	r3, [r3, #0]
 80830f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80830fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80830fe:	68fb      	ldr	r3, [r7, #12]
 8083100:	681b      	ldr	r3, [r3, #0]
 8083102:	683a      	ldr	r2, [r7, #0]
 8083104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8083106:	68fb      	ldr	r3, [r7, #12]
 8083108:	689b      	ldr	r3, [r3, #8]
 808310a:	2b40      	cmp	r3, #64	; 0x40
 808310c:	d108      	bne.n	8083120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 808310e:	68fb      	ldr	r3, [r7, #12]
 8083110:	681b      	ldr	r3, [r3, #0]
 8083112:	687a      	ldr	r2, [r7, #4]
 8083114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8083116:	68fb      	ldr	r3, [r7, #12]
 8083118:	681b      	ldr	r3, [r3, #0]
 808311a:	68ba      	ldr	r2, [r7, #8]
 808311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 808311e:	e007      	b.n	8083130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8083120:	68fb      	ldr	r3, [r7, #12]
 8083122:	681b      	ldr	r3, [r3, #0]
 8083124:	68ba      	ldr	r2, [r7, #8]
 8083126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8083128:	68fb      	ldr	r3, [r7, #12]
 808312a:	681b      	ldr	r3, [r3, #0]
 808312c:	687a      	ldr	r2, [r7, #4]
 808312e:	60da      	str	r2, [r3, #12]
}
 8083130:	bf00      	nop
 8083132:	3714      	adds	r7, #20
 8083134:	46bd      	mov	sp, r7
 8083136:	f85d 7b04 	ldr.w	r7, [sp], #4
 808313a:	4770      	bx	lr

0808313c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 808313c:	b480      	push	{r7}
 808313e:	b085      	sub	sp, #20
 8083140:	af00      	add	r7, sp, #0
 8083142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8083144:	687b      	ldr	r3, [r7, #4]
 8083146:	681b      	ldr	r3, [r3, #0]
 8083148:	b2db      	uxtb	r3, r3
 808314a:	3b10      	subs	r3, #16
 808314c:	4a14      	ldr	r2, [pc, #80]	; (80831a0 <DMA_CalcBaseAndBitshift+0x64>)
 808314e:	fba2 2303 	umull	r2, r3, r2, r3
 8083152:	091b      	lsrs	r3, r3, #4
 8083154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8083156:	4a13      	ldr	r2, [pc, #76]	; (80831a4 <DMA_CalcBaseAndBitshift+0x68>)
 8083158:	68fb      	ldr	r3, [r7, #12]
 808315a:	4413      	add	r3, r2
 808315c:	781b      	ldrb	r3, [r3, #0]
 808315e:	461a      	mov	r2, r3
 8083160:	687b      	ldr	r3, [r7, #4]
 8083162:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8083164:	68fb      	ldr	r3, [r7, #12]
 8083166:	2b03      	cmp	r3, #3
 8083168:	d909      	bls.n	808317e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 808316a:	687b      	ldr	r3, [r7, #4]
 808316c:	681b      	ldr	r3, [r3, #0]
 808316e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8083172:	f023 0303 	bic.w	r3, r3, #3
 8083176:	1d1a      	adds	r2, r3, #4
 8083178:	687b      	ldr	r3, [r7, #4]
 808317a:	659a      	str	r2, [r3, #88]	; 0x58
 808317c:	e007      	b.n	808318e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 808317e:	687b      	ldr	r3, [r7, #4]
 8083180:	681b      	ldr	r3, [r3, #0]
 8083182:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8083186:	f023 0303 	bic.w	r3, r3, #3
 808318a:	687a      	ldr	r2, [r7, #4]
 808318c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 808318e:	687b      	ldr	r3, [r7, #4]
 8083190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8083192:	4618      	mov	r0, r3
 8083194:	3714      	adds	r7, #20
 8083196:	46bd      	mov	sp, r7
 8083198:	f85d 7b04 	ldr.w	r7, [sp], #4
 808319c:	4770      	bx	lr
 808319e:	bf00      	nop
 80831a0:	aaaaaaab 	.word	0xaaaaaaab
 80831a4:	0808cefc 	.word	0x0808cefc

080831a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80831a8:	b480      	push	{r7}
 80831aa:	b085      	sub	sp, #20
 80831ac:	af00      	add	r7, sp, #0
 80831ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80831b0:	2300      	movs	r3, #0
 80831b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80831b4:	687b      	ldr	r3, [r7, #4]
 80831b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80831b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80831ba:	687b      	ldr	r3, [r7, #4]
 80831bc:	699b      	ldr	r3, [r3, #24]
 80831be:	2b00      	cmp	r3, #0
 80831c0:	d11f      	bne.n	8083202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80831c2:	68bb      	ldr	r3, [r7, #8]
 80831c4:	2b03      	cmp	r3, #3
 80831c6:	d856      	bhi.n	8083276 <DMA_CheckFifoParam+0xce>
 80831c8:	a201      	add	r2, pc, #4	; (adr r2, 80831d0 <DMA_CheckFifoParam+0x28>)
 80831ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80831ce:	bf00      	nop
 80831d0:	080831e1 	.word	0x080831e1
 80831d4:	080831f3 	.word	0x080831f3
 80831d8:	080831e1 	.word	0x080831e1
 80831dc:	08083277 	.word	0x08083277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80831e0:	687b      	ldr	r3, [r7, #4]
 80831e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80831e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80831e8:	2b00      	cmp	r3, #0
 80831ea:	d046      	beq.n	808327a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80831ec:	2301      	movs	r3, #1
 80831ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80831f0:	e043      	b.n	808327a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80831f2:	687b      	ldr	r3, [r7, #4]
 80831f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80831f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80831fa:	d140      	bne.n	808327e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80831fc:	2301      	movs	r3, #1
 80831fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8083200:	e03d      	b.n	808327e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8083202:	687b      	ldr	r3, [r7, #4]
 8083204:	699b      	ldr	r3, [r3, #24]
 8083206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 808320a:	d121      	bne.n	8083250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 808320c:	68bb      	ldr	r3, [r7, #8]
 808320e:	2b03      	cmp	r3, #3
 8083210:	d837      	bhi.n	8083282 <DMA_CheckFifoParam+0xda>
 8083212:	a201      	add	r2, pc, #4	; (adr r2, 8083218 <DMA_CheckFifoParam+0x70>)
 8083214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8083218:	08083229 	.word	0x08083229
 808321c:	0808322f 	.word	0x0808322f
 8083220:	08083229 	.word	0x08083229
 8083224:	08083241 	.word	0x08083241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8083228:	2301      	movs	r3, #1
 808322a:	73fb      	strb	r3, [r7, #15]
      break;
 808322c:	e030      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 808322e:	687b      	ldr	r3, [r7, #4]
 8083230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8083236:	2b00      	cmp	r3, #0
 8083238:	d025      	beq.n	8083286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 808323a:	2301      	movs	r3, #1
 808323c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 808323e:	e022      	b.n	8083286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8083240:	687b      	ldr	r3, [r7, #4]
 8083242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083244:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8083248:	d11f      	bne.n	808328a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 808324a:	2301      	movs	r3, #1
 808324c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 808324e:	e01c      	b.n	808328a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8083250:	68bb      	ldr	r3, [r7, #8]
 8083252:	2b02      	cmp	r3, #2
 8083254:	d903      	bls.n	808325e <DMA_CheckFifoParam+0xb6>
 8083256:	68bb      	ldr	r3, [r7, #8]
 8083258:	2b03      	cmp	r3, #3
 808325a:	d003      	beq.n	8083264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 808325c:	e018      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 808325e:	2301      	movs	r3, #1
 8083260:	73fb      	strb	r3, [r7, #15]
      break;
 8083262:	e015      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8083264:	687b      	ldr	r3, [r7, #4]
 8083266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 808326c:	2b00      	cmp	r3, #0
 808326e:	d00e      	beq.n	808328e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8083270:	2301      	movs	r3, #1
 8083272:	73fb      	strb	r3, [r7, #15]
      break;
 8083274:	e00b      	b.n	808328e <DMA_CheckFifoParam+0xe6>
      break;
 8083276:	bf00      	nop
 8083278:	e00a      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;
 808327a:	bf00      	nop
 808327c:	e008      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;
 808327e:	bf00      	nop
 8083280:	e006      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;
 8083282:	bf00      	nop
 8083284:	e004      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;
 8083286:	bf00      	nop
 8083288:	e002      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;   
 808328a:	bf00      	nop
 808328c:	e000      	b.n	8083290 <DMA_CheckFifoParam+0xe8>
      break;
 808328e:	bf00      	nop
    }
  } 
  
  return status; 
 8083290:	7bfb      	ldrb	r3, [r7, #15]
}
 8083292:	4618      	mov	r0, r3
 8083294:	3714      	adds	r7, #20
 8083296:	46bd      	mov	sp, r7
 8083298:	f85d 7b04 	ldr.w	r7, [sp], #4
 808329c:	4770      	bx	lr
 808329e:	bf00      	nop

080832a0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80832a0:	b580      	push	{r7, lr}
 80832a2:	b086      	sub	sp, #24
 80832a4:	af00      	add	r7, sp, #0
 80832a6:	60f8      	str	r0, [r7, #12]
 80832a8:	60b9      	str	r1, [r7, #8]
 80832aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80832ae:	2301      	movs	r3, #1
 80832b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80832b2:	4b23      	ldr	r3, [pc, #140]	; (8083340 <HAL_FLASH_Program+0xa0>)
 80832b4:	7e1b      	ldrb	r3, [r3, #24]
 80832b6:	2b01      	cmp	r3, #1
 80832b8:	d101      	bne.n	80832be <HAL_FLASH_Program+0x1e>
 80832ba:	2302      	movs	r3, #2
 80832bc:	e03b      	b.n	8083336 <HAL_FLASH_Program+0x96>
 80832be:	4b20      	ldr	r3, [pc, #128]	; (8083340 <HAL_FLASH_Program+0xa0>)
 80832c0:	2201      	movs	r2, #1
 80832c2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80832c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80832c8:	f000 f870 	bl	80833ac <FLASH_WaitForLastOperation>
 80832cc:	4603      	mov	r3, r0
 80832ce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80832d0:	7dfb      	ldrb	r3, [r7, #23]
 80832d2:	2b00      	cmp	r3, #0
 80832d4:	d12b      	bne.n	808332e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80832d6:	68fb      	ldr	r3, [r7, #12]
 80832d8:	2b00      	cmp	r3, #0
 80832da:	d105      	bne.n	80832e8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80832dc:	783b      	ldrb	r3, [r7, #0]
 80832de:	4619      	mov	r1, r3
 80832e0:	68b8      	ldr	r0, [r7, #8]
 80832e2:	f000 f91b 	bl	808351c <FLASH_Program_Byte>
 80832e6:	e016      	b.n	8083316 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80832e8:	68fb      	ldr	r3, [r7, #12]
 80832ea:	2b01      	cmp	r3, #1
 80832ec:	d105      	bne.n	80832fa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80832ee:	883b      	ldrh	r3, [r7, #0]
 80832f0:	4619      	mov	r1, r3
 80832f2:	68b8      	ldr	r0, [r7, #8]
 80832f4:	f000 f8ee 	bl	80834d4 <FLASH_Program_HalfWord>
 80832f8:	e00d      	b.n	8083316 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80832fa:	68fb      	ldr	r3, [r7, #12]
 80832fc:	2b02      	cmp	r3, #2
 80832fe:	d105      	bne.n	808330c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8083300:	683b      	ldr	r3, [r7, #0]
 8083302:	4619      	mov	r1, r3
 8083304:	68b8      	ldr	r0, [r7, #8]
 8083306:	f000 f8c3 	bl	8083490 <FLASH_Program_Word>
 808330a:	e004      	b.n	8083316 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 808330c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8083310:	68b8      	ldr	r0, [r7, #8]
 8083312:	f000 f88b 	bl	808342c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8083316:	f24c 3050 	movw	r0, #50000	; 0xc350
 808331a:	f000 f847 	bl	80833ac <FLASH_WaitForLastOperation>
 808331e:	4603      	mov	r3, r0
 8083320:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8083322:	4b08      	ldr	r3, [pc, #32]	; (8083344 <HAL_FLASH_Program+0xa4>)
 8083324:	691b      	ldr	r3, [r3, #16]
 8083326:	4a07      	ldr	r2, [pc, #28]	; (8083344 <HAL_FLASH_Program+0xa4>)
 8083328:	f023 0301 	bic.w	r3, r3, #1
 808332c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 808332e:	4b04      	ldr	r3, [pc, #16]	; (8083340 <HAL_FLASH_Program+0xa0>)
 8083330:	2200      	movs	r2, #0
 8083332:	761a      	strb	r2, [r3, #24]
  
  return status;
 8083334:	7dfb      	ldrb	r3, [r7, #23]
}
 8083336:	4618      	mov	r0, r3
 8083338:	3718      	adds	r7, #24
 808333a:	46bd      	mov	sp, r7
 808333c:	bd80      	pop	{r7, pc}
 808333e:	bf00      	nop
 8083340:	20000920 	.word	0x20000920
 8083344:	40023c00 	.word	0x40023c00

08083348 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8083348:	b480      	push	{r7}
 808334a:	b083      	sub	sp, #12
 808334c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 808334e:	2300      	movs	r3, #0
 8083350:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8083352:	4b0b      	ldr	r3, [pc, #44]	; (8083380 <HAL_FLASH_Unlock+0x38>)
 8083354:	691b      	ldr	r3, [r3, #16]
 8083356:	2b00      	cmp	r3, #0
 8083358:	da0b      	bge.n	8083372 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 808335a:	4b09      	ldr	r3, [pc, #36]	; (8083380 <HAL_FLASH_Unlock+0x38>)
 808335c:	4a09      	ldr	r2, [pc, #36]	; (8083384 <HAL_FLASH_Unlock+0x3c>)
 808335e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8083360:	4b07      	ldr	r3, [pc, #28]	; (8083380 <HAL_FLASH_Unlock+0x38>)
 8083362:	4a09      	ldr	r2, [pc, #36]	; (8083388 <HAL_FLASH_Unlock+0x40>)
 8083364:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8083366:	4b06      	ldr	r3, [pc, #24]	; (8083380 <HAL_FLASH_Unlock+0x38>)
 8083368:	691b      	ldr	r3, [r3, #16]
 808336a:	2b00      	cmp	r3, #0
 808336c:	da01      	bge.n	8083372 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 808336e:	2301      	movs	r3, #1
 8083370:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8083372:	79fb      	ldrb	r3, [r7, #7]
}
 8083374:	4618      	mov	r0, r3
 8083376:	370c      	adds	r7, #12
 8083378:	46bd      	mov	sp, r7
 808337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808337e:	4770      	bx	lr
 8083380:	40023c00 	.word	0x40023c00
 8083384:	45670123 	.word	0x45670123
 8083388:	cdef89ab 	.word	0xcdef89ab

0808338c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 808338c:	b480      	push	{r7}
 808338e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8083390:	4b05      	ldr	r3, [pc, #20]	; (80833a8 <HAL_FLASH_Lock+0x1c>)
 8083392:	691b      	ldr	r3, [r3, #16]
 8083394:	4a04      	ldr	r2, [pc, #16]	; (80833a8 <HAL_FLASH_Lock+0x1c>)
 8083396:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808339a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 808339c:	2300      	movs	r3, #0
}
 808339e:	4618      	mov	r0, r3
 80833a0:	46bd      	mov	sp, r7
 80833a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80833a6:	4770      	bx	lr
 80833a8:	40023c00 	.word	0x40023c00

080833ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80833ac:	b580      	push	{r7, lr}
 80833ae:	b084      	sub	sp, #16
 80833b0:	af00      	add	r7, sp, #0
 80833b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80833b4:	2300      	movs	r3, #0
 80833b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80833b8:	4b1a      	ldr	r3, [pc, #104]	; (8083424 <FLASH_WaitForLastOperation+0x78>)
 80833ba:	2200      	movs	r2, #0
 80833bc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80833be:	f7ff fa11 	bl	80827e4 <HAL_GetTick>
 80833c2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80833c4:	e010      	b.n	80833e8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80833c6:	687b      	ldr	r3, [r7, #4]
 80833c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80833cc:	d00c      	beq.n	80833e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80833ce:	687b      	ldr	r3, [r7, #4]
 80833d0:	2b00      	cmp	r3, #0
 80833d2:	d007      	beq.n	80833e4 <FLASH_WaitForLastOperation+0x38>
 80833d4:	f7ff fa06 	bl	80827e4 <HAL_GetTick>
 80833d8:	4602      	mov	r2, r0
 80833da:	68fb      	ldr	r3, [r7, #12]
 80833dc:	1ad3      	subs	r3, r2, r3
 80833de:	687a      	ldr	r2, [r7, #4]
 80833e0:	429a      	cmp	r2, r3
 80833e2:	d201      	bcs.n	80833e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80833e4:	2303      	movs	r3, #3
 80833e6:	e019      	b.n	808341c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80833e8:	4b0f      	ldr	r3, [pc, #60]	; (8083428 <FLASH_WaitForLastOperation+0x7c>)
 80833ea:	68db      	ldr	r3, [r3, #12]
 80833ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80833f0:	2b00      	cmp	r3, #0
 80833f2:	d1e8      	bne.n	80833c6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80833f4:	4b0c      	ldr	r3, [pc, #48]	; (8083428 <FLASH_WaitForLastOperation+0x7c>)
 80833f6:	68db      	ldr	r3, [r3, #12]
 80833f8:	f003 0301 	and.w	r3, r3, #1
 80833fc:	2b00      	cmp	r3, #0
 80833fe:	d002      	beq.n	8083406 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8083400:	4b09      	ldr	r3, [pc, #36]	; (8083428 <FLASH_WaitForLastOperation+0x7c>)
 8083402:	2201      	movs	r2, #1
 8083404:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8083406:	4b08      	ldr	r3, [pc, #32]	; (8083428 <FLASH_WaitForLastOperation+0x7c>)
 8083408:	68db      	ldr	r3, [r3, #12]
 808340a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 808340e:	2b00      	cmp	r3, #0
 8083410:	d003      	beq.n	808341a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8083412:	f000 f8a5 	bl	8083560 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8083416:	2301      	movs	r3, #1
 8083418:	e000      	b.n	808341c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 808341a:	2300      	movs	r3, #0
  
}  
 808341c:	4618      	mov	r0, r3
 808341e:	3710      	adds	r7, #16
 8083420:	46bd      	mov	sp, r7
 8083422:	bd80      	pop	{r7, pc}
 8083424:	20000920 	.word	0x20000920
 8083428:	40023c00 	.word	0x40023c00

0808342c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 808342c:	b480      	push	{r7}
 808342e:	b085      	sub	sp, #20
 8083430:	af00      	add	r7, sp, #0
 8083432:	60f8      	str	r0, [r7, #12]
 8083434:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8083438:	4b14      	ldr	r3, [pc, #80]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 808343a:	691b      	ldr	r3, [r3, #16]
 808343c:	4a13      	ldr	r2, [pc, #76]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 808343e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8083442:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8083444:	4b11      	ldr	r3, [pc, #68]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 8083446:	691b      	ldr	r3, [r3, #16]
 8083448:	4a10      	ldr	r2, [pc, #64]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 808344a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 808344e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8083450:	4b0e      	ldr	r3, [pc, #56]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 8083452:	691b      	ldr	r3, [r3, #16]
 8083454:	4a0d      	ldr	r2, [pc, #52]	; (808348c <FLASH_Program_DoubleWord+0x60>)
 8083456:	f043 0301 	orr.w	r3, r3, #1
 808345a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 808345c:	68fb      	ldr	r3, [r7, #12]
 808345e:	683a      	ldr	r2, [r7, #0]
 8083460:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8083462:	f3bf 8f6f 	isb	sy
}
 8083466:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8083468:	e9d7 0100 	ldrd	r0, r1, [r7]
 808346c:	f04f 0200 	mov.w	r2, #0
 8083470:	f04f 0300 	mov.w	r3, #0
 8083474:	000a      	movs	r2, r1
 8083476:	2300      	movs	r3, #0
 8083478:	68f9      	ldr	r1, [r7, #12]
 808347a:	3104      	adds	r1, #4
 808347c:	4613      	mov	r3, r2
 808347e:	600b      	str	r3, [r1, #0]
}
 8083480:	bf00      	nop
 8083482:	3714      	adds	r7, #20
 8083484:	46bd      	mov	sp, r7
 8083486:	f85d 7b04 	ldr.w	r7, [sp], #4
 808348a:	4770      	bx	lr
 808348c:	40023c00 	.word	0x40023c00

08083490 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8083490:	b480      	push	{r7}
 8083492:	b083      	sub	sp, #12
 8083494:	af00      	add	r7, sp, #0
 8083496:	6078      	str	r0, [r7, #4]
 8083498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 808349a:	4b0d      	ldr	r3, [pc, #52]	; (80834d0 <FLASH_Program_Word+0x40>)
 808349c:	691b      	ldr	r3, [r3, #16]
 808349e:	4a0c      	ldr	r2, [pc, #48]	; (80834d0 <FLASH_Program_Word+0x40>)
 80834a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80834a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80834a6:	4b0a      	ldr	r3, [pc, #40]	; (80834d0 <FLASH_Program_Word+0x40>)
 80834a8:	691b      	ldr	r3, [r3, #16]
 80834aa:	4a09      	ldr	r2, [pc, #36]	; (80834d0 <FLASH_Program_Word+0x40>)
 80834ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80834b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80834b2:	4b07      	ldr	r3, [pc, #28]	; (80834d0 <FLASH_Program_Word+0x40>)
 80834b4:	691b      	ldr	r3, [r3, #16]
 80834b6:	4a06      	ldr	r2, [pc, #24]	; (80834d0 <FLASH_Program_Word+0x40>)
 80834b8:	f043 0301 	orr.w	r3, r3, #1
 80834bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80834be:	687b      	ldr	r3, [r7, #4]
 80834c0:	683a      	ldr	r2, [r7, #0]
 80834c2:	601a      	str	r2, [r3, #0]
}
 80834c4:	bf00      	nop
 80834c6:	370c      	adds	r7, #12
 80834c8:	46bd      	mov	sp, r7
 80834ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80834ce:	4770      	bx	lr
 80834d0:	40023c00 	.word	0x40023c00

080834d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80834d4:	b480      	push	{r7}
 80834d6:	b083      	sub	sp, #12
 80834d8:	af00      	add	r7, sp, #0
 80834da:	6078      	str	r0, [r7, #4]
 80834dc:	460b      	mov	r3, r1
 80834de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80834e0:	4b0d      	ldr	r3, [pc, #52]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834e2:	691b      	ldr	r3, [r3, #16]
 80834e4:	4a0c      	ldr	r2, [pc, #48]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80834ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80834ec:	4b0a      	ldr	r3, [pc, #40]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834ee:	691b      	ldr	r3, [r3, #16]
 80834f0:	4a09      	ldr	r2, [pc, #36]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80834f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80834f8:	4b07      	ldr	r3, [pc, #28]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834fa:	691b      	ldr	r3, [r3, #16]
 80834fc:	4a06      	ldr	r2, [pc, #24]	; (8083518 <FLASH_Program_HalfWord+0x44>)
 80834fe:	f043 0301 	orr.w	r3, r3, #1
 8083502:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8083504:	687b      	ldr	r3, [r7, #4]
 8083506:	887a      	ldrh	r2, [r7, #2]
 8083508:	801a      	strh	r2, [r3, #0]
}
 808350a:	bf00      	nop
 808350c:	370c      	adds	r7, #12
 808350e:	46bd      	mov	sp, r7
 8083510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083514:	4770      	bx	lr
 8083516:	bf00      	nop
 8083518:	40023c00 	.word	0x40023c00

0808351c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 808351c:	b480      	push	{r7}
 808351e:	b083      	sub	sp, #12
 8083520:	af00      	add	r7, sp, #0
 8083522:	6078      	str	r0, [r7, #4]
 8083524:	460b      	mov	r3, r1
 8083526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8083528:	4b0c      	ldr	r3, [pc, #48]	; (808355c <FLASH_Program_Byte+0x40>)
 808352a:	691b      	ldr	r3, [r3, #16]
 808352c:	4a0b      	ldr	r2, [pc, #44]	; (808355c <FLASH_Program_Byte+0x40>)
 808352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8083532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8083534:	4b09      	ldr	r3, [pc, #36]	; (808355c <FLASH_Program_Byte+0x40>)
 8083536:	4a09      	ldr	r2, [pc, #36]	; (808355c <FLASH_Program_Byte+0x40>)
 8083538:	691b      	ldr	r3, [r3, #16]
 808353a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 808353c:	4b07      	ldr	r3, [pc, #28]	; (808355c <FLASH_Program_Byte+0x40>)
 808353e:	691b      	ldr	r3, [r3, #16]
 8083540:	4a06      	ldr	r2, [pc, #24]	; (808355c <FLASH_Program_Byte+0x40>)
 8083542:	f043 0301 	orr.w	r3, r3, #1
 8083546:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8083548:	687b      	ldr	r3, [r7, #4]
 808354a:	78fa      	ldrb	r2, [r7, #3]
 808354c:	701a      	strb	r2, [r3, #0]
}
 808354e:	bf00      	nop
 8083550:	370c      	adds	r7, #12
 8083552:	46bd      	mov	sp, r7
 8083554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083558:	4770      	bx	lr
 808355a:	bf00      	nop
 808355c:	40023c00 	.word	0x40023c00

08083560 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8083560:	b480      	push	{r7}
 8083562:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8083564:	4b27      	ldr	r3, [pc, #156]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 8083566:	68db      	ldr	r3, [r3, #12]
 8083568:	f003 0310 	and.w	r3, r3, #16
 808356c:	2b00      	cmp	r3, #0
 808356e:	d008      	beq.n	8083582 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8083570:	4b25      	ldr	r3, [pc, #148]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 8083572:	69db      	ldr	r3, [r3, #28]
 8083574:	f043 0310 	orr.w	r3, r3, #16
 8083578:	4a23      	ldr	r2, [pc, #140]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 808357a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 808357c:	4b21      	ldr	r3, [pc, #132]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 808357e:	2210      	movs	r2, #16
 8083580:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8083582:	4b20      	ldr	r3, [pc, #128]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 8083584:	68db      	ldr	r3, [r3, #12]
 8083586:	f003 0320 	and.w	r3, r3, #32
 808358a:	2b00      	cmp	r3, #0
 808358c:	d008      	beq.n	80835a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 808358e:	4b1e      	ldr	r3, [pc, #120]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 8083590:	69db      	ldr	r3, [r3, #28]
 8083592:	f043 0308 	orr.w	r3, r3, #8
 8083596:	4a1c      	ldr	r2, [pc, #112]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 8083598:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 808359a:	4b1a      	ldr	r3, [pc, #104]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 808359c:	2220      	movs	r2, #32
 808359e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80835a0:	4b18      	ldr	r3, [pc, #96]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835a2:	68db      	ldr	r3, [r3, #12]
 80835a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80835a8:	2b00      	cmp	r3, #0
 80835aa:	d008      	beq.n	80835be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80835ac:	4b16      	ldr	r3, [pc, #88]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835ae:	69db      	ldr	r3, [r3, #28]
 80835b0:	f043 0304 	orr.w	r3, r3, #4
 80835b4:	4a14      	ldr	r2, [pc, #80]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80835b8:	4b12      	ldr	r3, [pc, #72]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835ba:	2240      	movs	r2, #64	; 0x40
 80835bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80835be:	4b11      	ldr	r3, [pc, #68]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835c0:	68db      	ldr	r3, [r3, #12]
 80835c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80835c6:	2b00      	cmp	r3, #0
 80835c8:	d008      	beq.n	80835dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80835ca:	4b0f      	ldr	r3, [pc, #60]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835cc:	69db      	ldr	r3, [r3, #28]
 80835ce:	f043 0302 	orr.w	r3, r3, #2
 80835d2:	4a0d      	ldr	r2, [pc, #52]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80835d6:	4b0b      	ldr	r3, [pc, #44]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835d8:	2280      	movs	r2, #128	; 0x80
 80835da:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80835dc:	4b09      	ldr	r3, [pc, #36]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835de:	68db      	ldr	r3, [r3, #12]
 80835e0:	f003 0302 	and.w	r3, r3, #2
 80835e4:	2b00      	cmp	r3, #0
 80835e6:	d008      	beq.n	80835fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80835e8:	4b07      	ldr	r3, [pc, #28]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835ea:	69db      	ldr	r3, [r3, #28]
 80835ec:	f043 0320 	orr.w	r3, r3, #32
 80835f0:	4a05      	ldr	r2, [pc, #20]	; (8083608 <FLASH_SetErrorCode+0xa8>)
 80835f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80835f4:	4b03      	ldr	r3, [pc, #12]	; (8083604 <FLASH_SetErrorCode+0xa4>)
 80835f6:	2202      	movs	r2, #2
 80835f8:	60da      	str	r2, [r3, #12]
  }
}
 80835fa:	bf00      	nop
 80835fc:	46bd      	mov	sp, r7
 80835fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083602:	4770      	bx	lr
 8083604:	40023c00 	.word	0x40023c00
 8083608:	20000920 	.word	0x20000920

0808360c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 808360c:	b480      	push	{r7}
 808360e:	b085      	sub	sp, #20
 8083610:	af00      	add	r7, sp, #0
 8083612:	6078      	str	r0, [r7, #4]
 8083614:	460b      	mov	r3, r1
 8083616:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8083618:	2300      	movs	r3, #0
 808361a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 808361c:	78fb      	ldrb	r3, [r7, #3]
 808361e:	2b00      	cmp	r3, #0
 8083620:	d102      	bne.n	8083628 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8083622:	2300      	movs	r3, #0
 8083624:	60fb      	str	r3, [r7, #12]
 8083626:	e010      	b.n	808364a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8083628:	78fb      	ldrb	r3, [r7, #3]
 808362a:	2b01      	cmp	r3, #1
 808362c:	d103      	bne.n	8083636 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 808362e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8083632:	60fb      	str	r3, [r7, #12]
 8083634:	e009      	b.n	808364a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8083636:	78fb      	ldrb	r3, [r7, #3]
 8083638:	2b02      	cmp	r3, #2
 808363a:	d103      	bne.n	8083644 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 808363c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8083640:	60fb      	str	r3, [r7, #12]
 8083642:	e002      	b.n	808364a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8083644:	f44f 7340 	mov.w	r3, #768	; 0x300
 8083648:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 808364a:	4b13      	ldr	r3, [pc, #76]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 808364c:	691b      	ldr	r3, [r3, #16]
 808364e:	4a12      	ldr	r2, [pc, #72]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8083654:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8083656:	4b10      	ldr	r3, [pc, #64]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083658:	691a      	ldr	r2, [r3, #16]
 808365a:	490f      	ldr	r1, [pc, #60]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 808365c:	68fb      	ldr	r3, [r7, #12]
 808365e:	4313      	orrs	r3, r2
 8083660:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8083662:	4b0d      	ldr	r3, [pc, #52]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083664:	691b      	ldr	r3, [r3, #16]
 8083666:	4a0c      	ldr	r2, [pc, #48]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083668:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 808366c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 808366e:	4b0a      	ldr	r3, [pc, #40]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083670:	691a      	ldr	r2, [r3, #16]
 8083672:	687b      	ldr	r3, [r7, #4]
 8083674:	00db      	lsls	r3, r3, #3
 8083676:	4313      	orrs	r3, r2
 8083678:	4a07      	ldr	r2, [pc, #28]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 808367a:	f043 0302 	orr.w	r3, r3, #2
 808367e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8083680:	4b05      	ldr	r3, [pc, #20]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083682:	691b      	ldr	r3, [r3, #16]
 8083684:	4a04      	ldr	r2, [pc, #16]	; (8083698 <FLASH_Erase_Sector+0x8c>)
 8083686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 808368a:	6113      	str	r3, [r2, #16]
}
 808368c:	bf00      	nop
 808368e:	3714      	adds	r7, #20
 8083690:	46bd      	mov	sp, r7
 8083692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083696:	4770      	bx	lr
 8083698:	40023c00 	.word	0x40023c00

0808369c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 808369c:	b480      	push	{r7}
 808369e:	b089      	sub	sp, #36	; 0x24
 80836a0:	af00      	add	r7, sp, #0
 80836a2:	6078      	str	r0, [r7, #4]
 80836a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80836a6:	2300      	movs	r3, #0
 80836a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80836aa:	2300      	movs	r3, #0
 80836ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80836ae:	2300      	movs	r3, #0
 80836b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80836b2:	2300      	movs	r3, #0
 80836b4:	61fb      	str	r3, [r7, #28]
 80836b6:	e16b      	b.n	8083990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80836b8:	2201      	movs	r2, #1
 80836ba:	69fb      	ldr	r3, [r7, #28]
 80836bc:	fa02 f303 	lsl.w	r3, r2, r3
 80836c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80836c2:	683b      	ldr	r3, [r7, #0]
 80836c4:	681b      	ldr	r3, [r3, #0]
 80836c6:	697a      	ldr	r2, [r7, #20]
 80836c8:	4013      	ands	r3, r2
 80836ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80836cc:	693a      	ldr	r2, [r7, #16]
 80836ce:	697b      	ldr	r3, [r7, #20]
 80836d0:	429a      	cmp	r2, r3
 80836d2:	f040 815a 	bne.w	808398a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80836d6:	683b      	ldr	r3, [r7, #0]
 80836d8:	685b      	ldr	r3, [r3, #4]
 80836da:	f003 0303 	and.w	r3, r3, #3
 80836de:	2b01      	cmp	r3, #1
 80836e0:	d005      	beq.n	80836ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80836e2:	683b      	ldr	r3, [r7, #0]
 80836e4:	685b      	ldr	r3, [r3, #4]
 80836e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80836ea:	2b02      	cmp	r3, #2
 80836ec:	d130      	bne.n	8083750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80836ee:	687b      	ldr	r3, [r7, #4]
 80836f0:	689b      	ldr	r3, [r3, #8]
 80836f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80836f4:	69fb      	ldr	r3, [r7, #28]
 80836f6:	005b      	lsls	r3, r3, #1
 80836f8:	2203      	movs	r2, #3
 80836fa:	fa02 f303 	lsl.w	r3, r2, r3
 80836fe:	43db      	mvns	r3, r3
 8083700:	69ba      	ldr	r2, [r7, #24]
 8083702:	4013      	ands	r3, r2
 8083704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8083706:	683b      	ldr	r3, [r7, #0]
 8083708:	68da      	ldr	r2, [r3, #12]
 808370a:	69fb      	ldr	r3, [r7, #28]
 808370c:	005b      	lsls	r3, r3, #1
 808370e:	fa02 f303 	lsl.w	r3, r2, r3
 8083712:	69ba      	ldr	r2, [r7, #24]
 8083714:	4313      	orrs	r3, r2
 8083716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8083718:	687b      	ldr	r3, [r7, #4]
 808371a:	69ba      	ldr	r2, [r7, #24]
 808371c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 808371e:	687b      	ldr	r3, [r7, #4]
 8083720:	685b      	ldr	r3, [r3, #4]
 8083722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8083724:	2201      	movs	r2, #1
 8083726:	69fb      	ldr	r3, [r7, #28]
 8083728:	fa02 f303 	lsl.w	r3, r2, r3
 808372c:	43db      	mvns	r3, r3
 808372e:	69ba      	ldr	r2, [r7, #24]
 8083730:	4013      	ands	r3, r2
 8083732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8083734:	683b      	ldr	r3, [r7, #0]
 8083736:	685b      	ldr	r3, [r3, #4]
 8083738:	091b      	lsrs	r3, r3, #4
 808373a:	f003 0201 	and.w	r2, r3, #1
 808373e:	69fb      	ldr	r3, [r7, #28]
 8083740:	fa02 f303 	lsl.w	r3, r2, r3
 8083744:	69ba      	ldr	r2, [r7, #24]
 8083746:	4313      	orrs	r3, r2
 8083748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 808374a:	687b      	ldr	r3, [r7, #4]
 808374c:	69ba      	ldr	r2, [r7, #24]
 808374e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8083750:	683b      	ldr	r3, [r7, #0]
 8083752:	685b      	ldr	r3, [r3, #4]
 8083754:	f003 0303 	and.w	r3, r3, #3
 8083758:	2b03      	cmp	r3, #3
 808375a:	d017      	beq.n	808378c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 808375c:	687b      	ldr	r3, [r7, #4]
 808375e:	68db      	ldr	r3, [r3, #12]
 8083760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8083762:	69fb      	ldr	r3, [r7, #28]
 8083764:	005b      	lsls	r3, r3, #1
 8083766:	2203      	movs	r2, #3
 8083768:	fa02 f303 	lsl.w	r3, r2, r3
 808376c:	43db      	mvns	r3, r3
 808376e:	69ba      	ldr	r2, [r7, #24]
 8083770:	4013      	ands	r3, r2
 8083772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8083774:	683b      	ldr	r3, [r7, #0]
 8083776:	689a      	ldr	r2, [r3, #8]
 8083778:	69fb      	ldr	r3, [r7, #28]
 808377a:	005b      	lsls	r3, r3, #1
 808377c:	fa02 f303 	lsl.w	r3, r2, r3
 8083780:	69ba      	ldr	r2, [r7, #24]
 8083782:	4313      	orrs	r3, r2
 8083784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8083786:	687b      	ldr	r3, [r7, #4]
 8083788:	69ba      	ldr	r2, [r7, #24]
 808378a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 808378c:	683b      	ldr	r3, [r7, #0]
 808378e:	685b      	ldr	r3, [r3, #4]
 8083790:	f003 0303 	and.w	r3, r3, #3
 8083794:	2b02      	cmp	r3, #2
 8083796:	d123      	bne.n	80837e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8083798:	69fb      	ldr	r3, [r7, #28]
 808379a:	08da      	lsrs	r2, r3, #3
 808379c:	687b      	ldr	r3, [r7, #4]
 808379e:	3208      	adds	r2, #8
 80837a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80837a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80837a6:	69fb      	ldr	r3, [r7, #28]
 80837a8:	f003 0307 	and.w	r3, r3, #7
 80837ac:	009b      	lsls	r3, r3, #2
 80837ae:	220f      	movs	r2, #15
 80837b0:	fa02 f303 	lsl.w	r3, r2, r3
 80837b4:	43db      	mvns	r3, r3
 80837b6:	69ba      	ldr	r2, [r7, #24]
 80837b8:	4013      	ands	r3, r2
 80837ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80837bc:	683b      	ldr	r3, [r7, #0]
 80837be:	691a      	ldr	r2, [r3, #16]
 80837c0:	69fb      	ldr	r3, [r7, #28]
 80837c2:	f003 0307 	and.w	r3, r3, #7
 80837c6:	009b      	lsls	r3, r3, #2
 80837c8:	fa02 f303 	lsl.w	r3, r2, r3
 80837cc:	69ba      	ldr	r2, [r7, #24]
 80837ce:	4313      	orrs	r3, r2
 80837d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80837d2:	69fb      	ldr	r3, [r7, #28]
 80837d4:	08da      	lsrs	r2, r3, #3
 80837d6:	687b      	ldr	r3, [r7, #4]
 80837d8:	3208      	adds	r2, #8
 80837da:	69b9      	ldr	r1, [r7, #24]
 80837dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80837e0:	687b      	ldr	r3, [r7, #4]
 80837e2:	681b      	ldr	r3, [r3, #0]
 80837e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80837e6:	69fb      	ldr	r3, [r7, #28]
 80837e8:	005b      	lsls	r3, r3, #1
 80837ea:	2203      	movs	r2, #3
 80837ec:	fa02 f303 	lsl.w	r3, r2, r3
 80837f0:	43db      	mvns	r3, r3
 80837f2:	69ba      	ldr	r2, [r7, #24]
 80837f4:	4013      	ands	r3, r2
 80837f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80837f8:	683b      	ldr	r3, [r7, #0]
 80837fa:	685b      	ldr	r3, [r3, #4]
 80837fc:	f003 0203 	and.w	r2, r3, #3
 8083800:	69fb      	ldr	r3, [r7, #28]
 8083802:	005b      	lsls	r3, r3, #1
 8083804:	fa02 f303 	lsl.w	r3, r2, r3
 8083808:	69ba      	ldr	r2, [r7, #24]
 808380a:	4313      	orrs	r3, r2
 808380c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 808380e:	687b      	ldr	r3, [r7, #4]
 8083810:	69ba      	ldr	r2, [r7, #24]
 8083812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8083814:	683b      	ldr	r3, [r7, #0]
 8083816:	685b      	ldr	r3, [r3, #4]
 8083818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 808381c:	2b00      	cmp	r3, #0
 808381e:	f000 80b4 	beq.w	808398a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8083822:	2300      	movs	r3, #0
 8083824:	60fb      	str	r3, [r7, #12]
 8083826:	4b60      	ldr	r3, [pc, #384]	; (80839a8 <HAL_GPIO_Init+0x30c>)
 8083828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808382a:	4a5f      	ldr	r2, [pc, #380]	; (80839a8 <HAL_GPIO_Init+0x30c>)
 808382c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8083830:	6453      	str	r3, [r2, #68]	; 0x44
 8083832:	4b5d      	ldr	r3, [pc, #372]	; (80839a8 <HAL_GPIO_Init+0x30c>)
 8083834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8083836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808383a:	60fb      	str	r3, [r7, #12]
 808383c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 808383e:	4a5b      	ldr	r2, [pc, #364]	; (80839ac <HAL_GPIO_Init+0x310>)
 8083840:	69fb      	ldr	r3, [r7, #28]
 8083842:	089b      	lsrs	r3, r3, #2
 8083844:	3302      	adds	r3, #2
 8083846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 808384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 808384c:	69fb      	ldr	r3, [r7, #28]
 808384e:	f003 0303 	and.w	r3, r3, #3
 8083852:	009b      	lsls	r3, r3, #2
 8083854:	220f      	movs	r2, #15
 8083856:	fa02 f303 	lsl.w	r3, r2, r3
 808385a:	43db      	mvns	r3, r3
 808385c:	69ba      	ldr	r2, [r7, #24]
 808385e:	4013      	ands	r3, r2
 8083860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8083862:	687b      	ldr	r3, [r7, #4]
 8083864:	4a52      	ldr	r2, [pc, #328]	; (80839b0 <HAL_GPIO_Init+0x314>)
 8083866:	4293      	cmp	r3, r2
 8083868:	d02b      	beq.n	80838c2 <HAL_GPIO_Init+0x226>
 808386a:	687b      	ldr	r3, [r7, #4]
 808386c:	4a51      	ldr	r2, [pc, #324]	; (80839b4 <HAL_GPIO_Init+0x318>)
 808386e:	4293      	cmp	r3, r2
 8083870:	d025      	beq.n	80838be <HAL_GPIO_Init+0x222>
 8083872:	687b      	ldr	r3, [r7, #4]
 8083874:	4a50      	ldr	r2, [pc, #320]	; (80839b8 <HAL_GPIO_Init+0x31c>)
 8083876:	4293      	cmp	r3, r2
 8083878:	d01f      	beq.n	80838ba <HAL_GPIO_Init+0x21e>
 808387a:	687b      	ldr	r3, [r7, #4]
 808387c:	4a4f      	ldr	r2, [pc, #316]	; (80839bc <HAL_GPIO_Init+0x320>)
 808387e:	4293      	cmp	r3, r2
 8083880:	d019      	beq.n	80838b6 <HAL_GPIO_Init+0x21a>
 8083882:	687b      	ldr	r3, [r7, #4]
 8083884:	4a4e      	ldr	r2, [pc, #312]	; (80839c0 <HAL_GPIO_Init+0x324>)
 8083886:	4293      	cmp	r3, r2
 8083888:	d013      	beq.n	80838b2 <HAL_GPIO_Init+0x216>
 808388a:	687b      	ldr	r3, [r7, #4]
 808388c:	4a4d      	ldr	r2, [pc, #308]	; (80839c4 <HAL_GPIO_Init+0x328>)
 808388e:	4293      	cmp	r3, r2
 8083890:	d00d      	beq.n	80838ae <HAL_GPIO_Init+0x212>
 8083892:	687b      	ldr	r3, [r7, #4]
 8083894:	4a4c      	ldr	r2, [pc, #304]	; (80839c8 <HAL_GPIO_Init+0x32c>)
 8083896:	4293      	cmp	r3, r2
 8083898:	d007      	beq.n	80838aa <HAL_GPIO_Init+0x20e>
 808389a:	687b      	ldr	r3, [r7, #4]
 808389c:	4a4b      	ldr	r2, [pc, #300]	; (80839cc <HAL_GPIO_Init+0x330>)
 808389e:	4293      	cmp	r3, r2
 80838a0:	d101      	bne.n	80838a6 <HAL_GPIO_Init+0x20a>
 80838a2:	2307      	movs	r3, #7
 80838a4:	e00e      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838a6:	2308      	movs	r3, #8
 80838a8:	e00c      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838aa:	2306      	movs	r3, #6
 80838ac:	e00a      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838ae:	2305      	movs	r3, #5
 80838b0:	e008      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838b2:	2304      	movs	r3, #4
 80838b4:	e006      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838b6:	2303      	movs	r3, #3
 80838b8:	e004      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838ba:	2302      	movs	r3, #2
 80838bc:	e002      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838be:	2301      	movs	r3, #1
 80838c0:	e000      	b.n	80838c4 <HAL_GPIO_Init+0x228>
 80838c2:	2300      	movs	r3, #0
 80838c4:	69fa      	ldr	r2, [r7, #28]
 80838c6:	f002 0203 	and.w	r2, r2, #3
 80838ca:	0092      	lsls	r2, r2, #2
 80838cc:	4093      	lsls	r3, r2
 80838ce:	69ba      	ldr	r2, [r7, #24]
 80838d0:	4313      	orrs	r3, r2
 80838d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80838d4:	4935      	ldr	r1, [pc, #212]	; (80839ac <HAL_GPIO_Init+0x310>)
 80838d6:	69fb      	ldr	r3, [r7, #28]
 80838d8:	089b      	lsrs	r3, r3, #2
 80838da:	3302      	adds	r3, #2
 80838dc:	69ba      	ldr	r2, [r7, #24]
 80838de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80838e2:	4b3b      	ldr	r3, [pc, #236]	; (80839d0 <HAL_GPIO_Init+0x334>)
 80838e4:	689b      	ldr	r3, [r3, #8]
 80838e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80838e8:	693b      	ldr	r3, [r7, #16]
 80838ea:	43db      	mvns	r3, r3
 80838ec:	69ba      	ldr	r2, [r7, #24]
 80838ee:	4013      	ands	r3, r2
 80838f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80838f2:	683b      	ldr	r3, [r7, #0]
 80838f4:	685b      	ldr	r3, [r3, #4]
 80838f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80838fa:	2b00      	cmp	r3, #0
 80838fc:	d003      	beq.n	8083906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80838fe:	69ba      	ldr	r2, [r7, #24]
 8083900:	693b      	ldr	r3, [r7, #16]
 8083902:	4313      	orrs	r3, r2
 8083904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8083906:	4a32      	ldr	r2, [pc, #200]	; (80839d0 <HAL_GPIO_Init+0x334>)
 8083908:	69bb      	ldr	r3, [r7, #24]
 808390a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 808390c:	4b30      	ldr	r3, [pc, #192]	; (80839d0 <HAL_GPIO_Init+0x334>)
 808390e:	68db      	ldr	r3, [r3, #12]
 8083910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8083912:	693b      	ldr	r3, [r7, #16]
 8083914:	43db      	mvns	r3, r3
 8083916:	69ba      	ldr	r2, [r7, #24]
 8083918:	4013      	ands	r3, r2
 808391a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 808391c:	683b      	ldr	r3, [r7, #0]
 808391e:	685b      	ldr	r3, [r3, #4]
 8083920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8083924:	2b00      	cmp	r3, #0
 8083926:	d003      	beq.n	8083930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8083928:	69ba      	ldr	r2, [r7, #24]
 808392a:	693b      	ldr	r3, [r7, #16]
 808392c:	4313      	orrs	r3, r2
 808392e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8083930:	4a27      	ldr	r2, [pc, #156]	; (80839d0 <HAL_GPIO_Init+0x334>)
 8083932:	69bb      	ldr	r3, [r7, #24]
 8083934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8083936:	4b26      	ldr	r3, [pc, #152]	; (80839d0 <HAL_GPIO_Init+0x334>)
 8083938:	685b      	ldr	r3, [r3, #4]
 808393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 808393c:	693b      	ldr	r3, [r7, #16]
 808393e:	43db      	mvns	r3, r3
 8083940:	69ba      	ldr	r2, [r7, #24]
 8083942:	4013      	ands	r3, r2
 8083944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8083946:	683b      	ldr	r3, [r7, #0]
 8083948:	685b      	ldr	r3, [r3, #4]
 808394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 808394e:	2b00      	cmp	r3, #0
 8083950:	d003      	beq.n	808395a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8083952:	69ba      	ldr	r2, [r7, #24]
 8083954:	693b      	ldr	r3, [r7, #16]
 8083956:	4313      	orrs	r3, r2
 8083958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 808395a:	4a1d      	ldr	r2, [pc, #116]	; (80839d0 <HAL_GPIO_Init+0x334>)
 808395c:	69bb      	ldr	r3, [r7, #24]
 808395e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8083960:	4b1b      	ldr	r3, [pc, #108]	; (80839d0 <HAL_GPIO_Init+0x334>)
 8083962:	681b      	ldr	r3, [r3, #0]
 8083964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8083966:	693b      	ldr	r3, [r7, #16]
 8083968:	43db      	mvns	r3, r3
 808396a:	69ba      	ldr	r2, [r7, #24]
 808396c:	4013      	ands	r3, r2
 808396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8083970:	683b      	ldr	r3, [r7, #0]
 8083972:	685b      	ldr	r3, [r3, #4]
 8083974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8083978:	2b00      	cmp	r3, #0
 808397a:	d003      	beq.n	8083984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 808397c:	69ba      	ldr	r2, [r7, #24]
 808397e:	693b      	ldr	r3, [r7, #16]
 8083980:	4313      	orrs	r3, r2
 8083982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8083984:	4a12      	ldr	r2, [pc, #72]	; (80839d0 <HAL_GPIO_Init+0x334>)
 8083986:	69bb      	ldr	r3, [r7, #24]
 8083988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 808398a:	69fb      	ldr	r3, [r7, #28]
 808398c:	3301      	adds	r3, #1
 808398e:	61fb      	str	r3, [r7, #28]
 8083990:	69fb      	ldr	r3, [r7, #28]
 8083992:	2b0f      	cmp	r3, #15
 8083994:	f67f ae90 	bls.w	80836b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8083998:	bf00      	nop
 808399a:	bf00      	nop
 808399c:	3724      	adds	r7, #36	; 0x24
 808399e:	46bd      	mov	sp, r7
 80839a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80839a4:	4770      	bx	lr
 80839a6:	bf00      	nop
 80839a8:	40023800 	.word	0x40023800
 80839ac:	40013800 	.word	0x40013800
 80839b0:	40020000 	.word	0x40020000
 80839b4:	40020400 	.word	0x40020400
 80839b8:	40020800 	.word	0x40020800
 80839bc:	40020c00 	.word	0x40020c00
 80839c0:	40021000 	.word	0x40021000
 80839c4:	40021400 	.word	0x40021400
 80839c8:	40021800 	.word	0x40021800
 80839cc:	40021c00 	.word	0x40021c00
 80839d0:	40013c00 	.word	0x40013c00

080839d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80839d4:	b480      	push	{r7}
 80839d6:	b085      	sub	sp, #20
 80839d8:	af00      	add	r7, sp, #0
 80839da:	6078      	str	r0, [r7, #4]
 80839dc:	460b      	mov	r3, r1
 80839de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80839e0:	687b      	ldr	r3, [r7, #4]
 80839e2:	691a      	ldr	r2, [r3, #16]
 80839e4:	887b      	ldrh	r3, [r7, #2]
 80839e6:	4013      	ands	r3, r2
 80839e8:	2b00      	cmp	r3, #0
 80839ea:	d002      	beq.n	80839f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80839ec:	2301      	movs	r3, #1
 80839ee:	73fb      	strb	r3, [r7, #15]
 80839f0:	e001      	b.n	80839f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80839f2:	2300      	movs	r3, #0
 80839f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80839f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80839f8:	4618      	mov	r0, r3
 80839fa:	3714      	adds	r7, #20
 80839fc:	46bd      	mov	sp, r7
 80839fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083a02:	4770      	bx	lr

08083a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8083a04:	b480      	push	{r7}
 8083a06:	b083      	sub	sp, #12
 8083a08:	af00      	add	r7, sp, #0
 8083a0a:	6078      	str	r0, [r7, #4]
 8083a0c:	460b      	mov	r3, r1
 8083a0e:	807b      	strh	r3, [r7, #2]
 8083a10:	4613      	mov	r3, r2
 8083a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8083a14:	787b      	ldrb	r3, [r7, #1]
 8083a16:	2b00      	cmp	r3, #0
 8083a18:	d003      	beq.n	8083a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8083a1a:	887a      	ldrh	r2, [r7, #2]
 8083a1c:	687b      	ldr	r3, [r7, #4]
 8083a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8083a20:	e003      	b.n	8083a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8083a22:	887b      	ldrh	r3, [r7, #2]
 8083a24:	041a      	lsls	r2, r3, #16
 8083a26:	687b      	ldr	r3, [r7, #4]
 8083a28:	619a      	str	r2, [r3, #24]
}
 8083a2a:	bf00      	nop
 8083a2c:	370c      	adds	r7, #12
 8083a2e:	46bd      	mov	sp, r7
 8083a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8083a34:	4770      	bx	lr
	...

08083a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8083a38:	b580      	push	{r7, lr}
 8083a3a:	b086      	sub	sp, #24
 8083a3c:	af00      	add	r7, sp, #0
 8083a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8083a40:	687b      	ldr	r3, [r7, #4]
 8083a42:	2b00      	cmp	r3, #0
 8083a44:	d101      	bne.n	8083a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8083a46:	2301      	movs	r3, #1
 8083a48:	e267      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8083a4a:	687b      	ldr	r3, [r7, #4]
 8083a4c:	681b      	ldr	r3, [r3, #0]
 8083a4e:	f003 0301 	and.w	r3, r3, #1
 8083a52:	2b00      	cmp	r3, #0
 8083a54:	d075      	beq.n	8083b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8083a56:	4b88      	ldr	r3, [pc, #544]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083a58:	689b      	ldr	r3, [r3, #8]
 8083a5a:	f003 030c 	and.w	r3, r3, #12
 8083a5e:	2b04      	cmp	r3, #4
 8083a60:	d00c      	beq.n	8083a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8083a62:	4b85      	ldr	r3, [pc, #532]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083a64:	689b      	ldr	r3, [r3, #8]
 8083a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8083a6a:	2b08      	cmp	r3, #8
 8083a6c:	d112      	bne.n	8083a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8083a6e:	4b82      	ldr	r3, [pc, #520]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083a70:	685b      	ldr	r3, [r3, #4]
 8083a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8083a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8083a7a:	d10b      	bne.n	8083a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8083a7c:	4b7e      	ldr	r3, [pc, #504]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083a7e:	681b      	ldr	r3, [r3, #0]
 8083a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083a84:	2b00      	cmp	r3, #0
 8083a86:	d05b      	beq.n	8083b40 <HAL_RCC_OscConfig+0x108>
 8083a88:	687b      	ldr	r3, [r7, #4]
 8083a8a:	685b      	ldr	r3, [r3, #4]
 8083a8c:	2b00      	cmp	r3, #0
 8083a8e:	d157      	bne.n	8083b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8083a90:	2301      	movs	r3, #1
 8083a92:	e242      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8083a94:	687b      	ldr	r3, [r7, #4]
 8083a96:	685b      	ldr	r3, [r3, #4]
 8083a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8083a9c:	d106      	bne.n	8083aac <HAL_RCC_OscConfig+0x74>
 8083a9e:	4b76      	ldr	r3, [pc, #472]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083aa0:	681b      	ldr	r3, [r3, #0]
 8083aa2:	4a75      	ldr	r2, [pc, #468]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8083aa8:	6013      	str	r3, [r2, #0]
 8083aaa:	e01d      	b.n	8083ae8 <HAL_RCC_OscConfig+0xb0>
 8083aac:	687b      	ldr	r3, [r7, #4]
 8083aae:	685b      	ldr	r3, [r3, #4]
 8083ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8083ab4:	d10c      	bne.n	8083ad0 <HAL_RCC_OscConfig+0x98>
 8083ab6:	4b70      	ldr	r3, [pc, #448]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ab8:	681b      	ldr	r3, [r3, #0]
 8083aba:	4a6f      	ldr	r2, [pc, #444]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8083ac0:	6013      	str	r3, [r2, #0]
 8083ac2:	4b6d      	ldr	r3, [pc, #436]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ac4:	681b      	ldr	r3, [r3, #0]
 8083ac6:	4a6c      	ldr	r2, [pc, #432]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8083acc:	6013      	str	r3, [r2, #0]
 8083ace:	e00b      	b.n	8083ae8 <HAL_RCC_OscConfig+0xb0>
 8083ad0:	4b69      	ldr	r3, [pc, #420]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ad2:	681b      	ldr	r3, [r3, #0]
 8083ad4:	4a68      	ldr	r2, [pc, #416]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8083ada:	6013      	str	r3, [r2, #0]
 8083adc:	4b66      	ldr	r3, [pc, #408]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ade:	681b      	ldr	r3, [r3, #0]
 8083ae0:	4a65      	ldr	r2, [pc, #404]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8083ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8083ae8:	687b      	ldr	r3, [r7, #4]
 8083aea:	685b      	ldr	r3, [r3, #4]
 8083aec:	2b00      	cmp	r3, #0
 8083aee:	d013      	beq.n	8083b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083af0:	f7fe fe78 	bl	80827e4 <HAL_GetTick>
 8083af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8083af6:	e008      	b.n	8083b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8083af8:	f7fe fe74 	bl	80827e4 <HAL_GetTick>
 8083afc:	4602      	mov	r2, r0
 8083afe:	693b      	ldr	r3, [r7, #16]
 8083b00:	1ad3      	subs	r3, r2, r3
 8083b02:	2b64      	cmp	r3, #100	; 0x64
 8083b04:	d901      	bls.n	8083b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8083b06:	2303      	movs	r3, #3
 8083b08:	e207      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8083b0a:	4b5b      	ldr	r3, [pc, #364]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b0c:	681b      	ldr	r3, [r3, #0]
 8083b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083b12:	2b00      	cmp	r3, #0
 8083b14:	d0f0      	beq.n	8083af8 <HAL_RCC_OscConfig+0xc0>
 8083b16:	e014      	b.n	8083b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083b18:	f7fe fe64 	bl	80827e4 <HAL_GetTick>
 8083b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8083b1e:	e008      	b.n	8083b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8083b20:	f7fe fe60 	bl	80827e4 <HAL_GetTick>
 8083b24:	4602      	mov	r2, r0
 8083b26:	693b      	ldr	r3, [r7, #16]
 8083b28:	1ad3      	subs	r3, r2, r3
 8083b2a:	2b64      	cmp	r3, #100	; 0x64
 8083b2c:	d901      	bls.n	8083b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8083b2e:	2303      	movs	r3, #3
 8083b30:	e1f3      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8083b32:	4b51      	ldr	r3, [pc, #324]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b34:	681b      	ldr	r3, [r3, #0]
 8083b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083b3a:	2b00      	cmp	r3, #0
 8083b3c:	d1f0      	bne.n	8083b20 <HAL_RCC_OscConfig+0xe8>
 8083b3e:	e000      	b.n	8083b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8083b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8083b42:	687b      	ldr	r3, [r7, #4]
 8083b44:	681b      	ldr	r3, [r3, #0]
 8083b46:	f003 0302 	and.w	r3, r3, #2
 8083b4a:	2b00      	cmp	r3, #0
 8083b4c:	d063      	beq.n	8083c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8083b4e:	4b4a      	ldr	r3, [pc, #296]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b50:	689b      	ldr	r3, [r3, #8]
 8083b52:	f003 030c 	and.w	r3, r3, #12
 8083b56:	2b00      	cmp	r3, #0
 8083b58:	d00b      	beq.n	8083b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8083b5a:	4b47      	ldr	r3, [pc, #284]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b5c:	689b      	ldr	r3, [r3, #8]
 8083b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8083b62:	2b08      	cmp	r3, #8
 8083b64:	d11c      	bne.n	8083ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8083b66:	4b44      	ldr	r3, [pc, #272]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b68:	685b      	ldr	r3, [r3, #4]
 8083b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8083b6e:	2b00      	cmp	r3, #0
 8083b70:	d116      	bne.n	8083ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8083b72:	4b41      	ldr	r3, [pc, #260]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b74:	681b      	ldr	r3, [r3, #0]
 8083b76:	f003 0302 	and.w	r3, r3, #2
 8083b7a:	2b00      	cmp	r3, #0
 8083b7c:	d005      	beq.n	8083b8a <HAL_RCC_OscConfig+0x152>
 8083b7e:	687b      	ldr	r3, [r7, #4]
 8083b80:	68db      	ldr	r3, [r3, #12]
 8083b82:	2b01      	cmp	r3, #1
 8083b84:	d001      	beq.n	8083b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8083b86:	2301      	movs	r3, #1
 8083b88:	e1c7      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8083b8a:	4b3b      	ldr	r3, [pc, #236]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b8c:	681b      	ldr	r3, [r3, #0]
 8083b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8083b92:	687b      	ldr	r3, [r7, #4]
 8083b94:	691b      	ldr	r3, [r3, #16]
 8083b96:	00db      	lsls	r3, r3, #3
 8083b98:	4937      	ldr	r1, [pc, #220]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083b9a:	4313      	orrs	r3, r2
 8083b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8083b9e:	e03a      	b.n	8083c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8083ba0:	687b      	ldr	r3, [r7, #4]
 8083ba2:	68db      	ldr	r3, [r3, #12]
 8083ba4:	2b00      	cmp	r3, #0
 8083ba6:	d020      	beq.n	8083bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8083ba8:	4b34      	ldr	r3, [pc, #208]	; (8083c7c <HAL_RCC_OscConfig+0x244>)
 8083baa:	2201      	movs	r2, #1
 8083bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8083bae:	f7fe fe19 	bl	80827e4 <HAL_GetTick>
 8083bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8083bb4:	e008      	b.n	8083bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8083bb6:	f7fe fe15 	bl	80827e4 <HAL_GetTick>
 8083bba:	4602      	mov	r2, r0
 8083bbc:	693b      	ldr	r3, [r7, #16]
 8083bbe:	1ad3      	subs	r3, r2, r3
 8083bc0:	2b02      	cmp	r3, #2
 8083bc2:	d901      	bls.n	8083bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8083bc4:	2303      	movs	r3, #3
 8083bc6:	e1a8      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8083bc8:	4b2b      	ldr	r3, [pc, #172]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083bca:	681b      	ldr	r3, [r3, #0]
 8083bcc:	f003 0302 	and.w	r3, r3, #2
 8083bd0:	2b00      	cmp	r3, #0
 8083bd2:	d0f0      	beq.n	8083bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8083bd4:	4b28      	ldr	r3, [pc, #160]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083bd6:	681b      	ldr	r3, [r3, #0]
 8083bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8083bdc:	687b      	ldr	r3, [r7, #4]
 8083bde:	691b      	ldr	r3, [r3, #16]
 8083be0:	00db      	lsls	r3, r3, #3
 8083be2:	4925      	ldr	r1, [pc, #148]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083be4:	4313      	orrs	r3, r2
 8083be6:	600b      	str	r3, [r1, #0]
 8083be8:	e015      	b.n	8083c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8083bea:	4b24      	ldr	r3, [pc, #144]	; (8083c7c <HAL_RCC_OscConfig+0x244>)
 8083bec:	2200      	movs	r2, #0
 8083bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8083bf0:	f7fe fdf8 	bl	80827e4 <HAL_GetTick>
 8083bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8083bf6:	e008      	b.n	8083c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8083bf8:	f7fe fdf4 	bl	80827e4 <HAL_GetTick>
 8083bfc:	4602      	mov	r2, r0
 8083bfe:	693b      	ldr	r3, [r7, #16]
 8083c00:	1ad3      	subs	r3, r2, r3
 8083c02:	2b02      	cmp	r3, #2
 8083c04:	d901      	bls.n	8083c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8083c06:	2303      	movs	r3, #3
 8083c08:	e187      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8083c0a:	4b1b      	ldr	r3, [pc, #108]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083c0c:	681b      	ldr	r3, [r3, #0]
 8083c0e:	f003 0302 	and.w	r3, r3, #2
 8083c12:	2b00      	cmp	r3, #0
 8083c14:	d1f0      	bne.n	8083bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8083c16:	687b      	ldr	r3, [r7, #4]
 8083c18:	681b      	ldr	r3, [r3, #0]
 8083c1a:	f003 0308 	and.w	r3, r3, #8
 8083c1e:	2b00      	cmp	r3, #0
 8083c20:	d036      	beq.n	8083c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8083c22:	687b      	ldr	r3, [r7, #4]
 8083c24:	695b      	ldr	r3, [r3, #20]
 8083c26:	2b00      	cmp	r3, #0
 8083c28:	d016      	beq.n	8083c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8083c2a:	4b15      	ldr	r3, [pc, #84]	; (8083c80 <HAL_RCC_OscConfig+0x248>)
 8083c2c:	2201      	movs	r2, #1
 8083c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8083c30:	f7fe fdd8 	bl	80827e4 <HAL_GetTick>
 8083c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8083c36:	e008      	b.n	8083c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8083c38:	f7fe fdd4 	bl	80827e4 <HAL_GetTick>
 8083c3c:	4602      	mov	r2, r0
 8083c3e:	693b      	ldr	r3, [r7, #16]
 8083c40:	1ad3      	subs	r3, r2, r3
 8083c42:	2b02      	cmp	r3, #2
 8083c44:	d901      	bls.n	8083c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8083c46:	2303      	movs	r3, #3
 8083c48:	e167      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8083c4a:	4b0b      	ldr	r3, [pc, #44]	; (8083c78 <HAL_RCC_OscConfig+0x240>)
 8083c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8083c4e:	f003 0302 	and.w	r3, r3, #2
 8083c52:	2b00      	cmp	r3, #0
 8083c54:	d0f0      	beq.n	8083c38 <HAL_RCC_OscConfig+0x200>
 8083c56:	e01b      	b.n	8083c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8083c58:	4b09      	ldr	r3, [pc, #36]	; (8083c80 <HAL_RCC_OscConfig+0x248>)
 8083c5a:	2200      	movs	r2, #0
 8083c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8083c5e:	f7fe fdc1 	bl	80827e4 <HAL_GetTick>
 8083c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8083c64:	e00e      	b.n	8083c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8083c66:	f7fe fdbd 	bl	80827e4 <HAL_GetTick>
 8083c6a:	4602      	mov	r2, r0
 8083c6c:	693b      	ldr	r3, [r7, #16]
 8083c6e:	1ad3      	subs	r3, r2, r3
 8083c70:	2b02      	cmp	r3, #2
 8083c72:	d907      	bls.n	8083c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8083c74:	2303      	movs	r3, #3
 8083c76:	e150      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
 8083c78:	40023800 	.word	0x40023800
 8083c7c:	42470000 	.word	0x42470000
 8083c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8083c84:	4b88      	ldr	r3, [pc, #544]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8083c88:	f003 0302 	and.w	r3, r3, #2
 8083c8c:	2b00      	cmp	r3, #0
 8083c8e:	d1ea      	bne.n	8083c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8083c90:	687b      	ldr	r3, [r7, #4]
 8083c92:	681b      	ldr	r3, [r3, #0]
 8083c94:	f003 0304 	and.w	r3, r3, #4
 8083c98:	2b00      	cmp	r3, #0
 8083c9a:	f000 8097 	beq.w	8083dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8083c9e:	2300      	movs	r3, #0
 8083ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8083ca2:	4b81      	ldr	r3, [pc, #516]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8083caa:	2b00      	cmp	r3, #0
 8083cac:	d10f      	bne.n	8083cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8083cae:	2300      	movs	r3, #0
 8083cb0:	60bb      	str	r3, [r7, #8]
 8083cb2:	4b7d      	ldr	r3, [pc, #500]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083cb6:	4a7c      	ldr	r2, [pc, #496]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8083cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8083cbe:	4b7a      	ldr	r3, [pc, #488]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8083cc6:	60bb      	str	r3, [r7, #8]
 8083cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8083cca:	2301      	movs	r3, #1
 8083ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083cce:	4b77      	ldr	r3, [pc, #476]	; (8083eac <HAL_RCC_OscConfig+0x474>)
 8083cd0:	681b      	ldr	r3, [r3, #0]
 8083cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083cd6:	2b00      	cmp	r3, #0
 8083cd8:	d118      	bne.n	8083d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8083cda:	4b74      	ldr	r3, [pc, #464]	; (8083eac <HAL_RCC_OscConfig+0x474>)
 8083cdc:	681b      	ldr	r3, [r3, #0]
 8083cde:	4a73      	ldr	r2, [pc, #460]	; (8083eac <HAL_RCC_OscConfig+0x474>)
 8083ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8083ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8083ce6:	f7fe fd7d 	bl	80827e4 <HAL_GetTick>
 8083cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083cec:	e008      	b.n	8083d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8083cee:	f7fe fd79 	bl	80827e4 <HAL_GetTick>
 8083cf2:	4602      	mov	r2, r0
 8083cf4:	693b      	ldr	r3, [r7, #16]
 8083cf6:	1ad3      	subs	r3, r2, r3
 8083cf8:	2b02      	cmp	r3, #2
 8083cfa:	d901      	bls.n	8083d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8083cfc:	2303      	movs	r3, #3
 8083cfe:	e10c      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8083d00:	4b6a      	ldr	r3, [pc, #424]	; (8083eac <HAL_RCC_OscConfig+0x474>)
 8083d02:	681b      	ldr	r3, [r3, #0]
 8083d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8083d08:	2b00      	cmp	r3, #0
 8083d0a:	d0f0      	beq.n	8083cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8083d0c:	687b      	ldr	r3, [r7, #4]
 8083d0e:	689b      	ldr	r3, [r3, #8]
 8083d10:	2b01      	cmp	r3, #1
 8083d12:	d106      	bne.n	8083d22 <HAL_RCC_OscConfig+0x2ea>
 8083d14:	4b64      	ldr	r3, [pc, #400]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d18:	4a63      	ldr	r2, [pc, #396]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d1a:	f043 0301 	orr.w	r3, r3, #1
 8083d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8083d20:	e01c      	b.n	8083d5c <HAL_RCC_OscConfig+0x324>
 8083d22:	687b      	ldr	r3, [r7, #4]
 8083d24:	689b      	ldr	r3, [r3, #8]
 8083d26:	2b05      	cmp	r3, #5
 8083d28:	d10c      	bne.n	8083d44 <HAL_RCC_OscConfig+0x30c>
 8083d2a:	4b5f      	ldr	r3, [pc, #380]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d2e:	4a5e      	ldr	r2, [pc, #376]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d30:	f043 0304 	orr.w	r3, r3, #4
 8083d34:	6713      	str	r3, [r2, #112]	; 0x70
 8083d36:	4b5c      	ldr	r3, [pc, #368]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d3a:	4a5b      	ldr	r2, [pc, #364]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d3c:	f043 0301 	orr.w	r3, r3, #1
 8083d40:	6713      	str	r3, [r2, #112]	; 0x70
 8083d42:	e00b      	b.n	8083d5c <HAL_RCC_OscConfig+0x324>
 8083d44:	4b58      	ldr	r3, [pc, #352]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d48:	4a57      	ldr	r2, [pc, #348]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d4a:	f023 0301 	bic.w	r3, r3, #1
 8083d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8083d50:	4b55      	ldr	r3, [pc, #340]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d54:	4a54      	ldr	r2, [pc, #336]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d56:	f023 0304 	bic.w	r3, r3, #4
 8083d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8083d5c:	687b      	ldr	r3, [r7, #4]
 8083d5e:	689b      	ldr	r3, [r3, #8]
 8083d60:	2b00      	cmp	r3, #0
 8083d62:	d015      	beq.n	8083d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8083d64:	f7fe fd3e 	bl	80827e4 <HAL_GetTick>
 8083d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8083d6a:	e00a      	b.n	8083d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8083d6c:	f7fe fd3a 	bl	80827e4 <HAL_GetTick>
 8083d70:	4602      	mov	r2, r0
 8083d72:	693b      	ldr	r3, [r7, #16]
 8083d74:	1ad3      	subs	r3, r2, r3
 8083d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8083d7a:	4293      	cmp	r3, r2
 8083d7c:	d901      	bls.n	8083d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8083d7e:	2303      	movs	r3, #3
 8083d80:	e0cb      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8083d82:	4b49      	ldr	r3, [pc, #292]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083d86:	f003 0302 	and.w	r3, r3, #2
 8083d8a:	2b00      	cmp	r3, #0
 8083d8c:	d0ee      	beq.n	8083d6c <HAL_RCC_OscConfig+0x334>
 8083d8e:	e014      	b.n	8083dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8083d90:	f7fe fd28 	bl	80827e4 <HAL_GetTick>
 8083d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8083d96:	e00a      	b.n	8083dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8083d98:	f7fe fd24 	bl	80827e4 <HAL_GetTick>
 8083d9c:	4602      	mov	r2, r0
 8083d9e:	693b      	ldr	r3, [r7, #16]
 8083da0:	1ad3      	subs	r3, r2, r3
 8083da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8083da6:	4293      	cmp	r3, r2
 8083da8:	d901      	bls.n	8083dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8083daa:	2303      	movs	r3, #3
 8083dac:	e0b5      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8083dae:	4b3e      	ldr	r3, [pc, #248]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8083db2:	f003 0302 	and.w	r3, r3, #2
 8083db6:	2b00      	cmp	r3, #0
 8083db8:	d1ee      	bne.n	8083d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8083dba:	7dfb      	ldrb	r3, [r7, #23]
 8083dbc:	2b01      	cmp	r3, #1
 8083dbe:	d105      	bne.n	8083dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8083dc0:	4b39      	ldr	r3, [pc, #228]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8083dc4:	4a38      	ldr	r2, [pc, #224]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8083dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8083dcc:	687b      	ldr	r3, [r7, #4]
 8083dce:	699b      	ldr	r3, [r3, #24]
 8083dd0:	2b00      	cmp	r3, #0
 8083dd2:	f000 80a1 	beq.w	8083f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8083dd6:	4b34      	ldr	r3, [pc, #208]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083dd8:	689b      	ldr	r3, [r3, #8]
 8083dda:	f003 030c 	and.w	r3, r3, #12
 8083dde:	2b08      	cmp	r3, #8
 8083de0:	d05c      	beq.n	8083e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8083de2:	687b      	ldr	r3, [r7, #4]
 8083de4:	699b      	ldr	r3, [r3, #24]
 8083de6:	2b02      	cmp	r3, #2
 8083de8:	d141      	bne.n	8083e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8083dea:	4b31      	ldr	r3, [pc, #196]	; (8083eb0 <HAL_RCC_OscConfig+0x478>)
 8083dec:	2200      	movs	r2, #0
 8083dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083df0:	f7fe fcf8 	bl	80827e4 <HAL_GetTick>
 8083df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8083df6:	e008      	b.n	8083e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8083df8:	f7fe fcf4 	bl	80827e4 <HAL_GetTick>
 8083dfc:	4602      	mov	r2, r0
 8083dfe:	693b      	ldr	r3, [r7, #16]
 8083e00:	1ad3      	subs	r3, r2, r3
 8083e02:	2b02      	cmp	r3, #2
 8083e04:	d901      	bls.n	8083e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8083e06:	2303      	movs	r3, #3
 8083e08:	e087      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8083e0a:	4b27      	ldr	r3, [pc, #156]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083e0c:	681b      	ldr	r3, [r3, #0]
 8083e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083e12:	2b00      	cmp	r3, #0
 8083e14:	d1f0      	bne.n	8083df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8083e16:	687b      	ldr	r3, [r7, #4]
 8083e18:	69da      	ldr	r2, [r3, #28]
 8083e1a:	687b      	ldr	r3, [r7, #4]
 8083e1c:	6a1b      	ldr	r3, [r3, #32]
 8083e1e:	431a      	orrs	r2, r3
 8083e20:	687b      	ldr	r3, [r7, #4]
 8083e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8083e24:	019b      	lsls	r3, r3, #6
 8083e26:	431a      	orrs	r2, r3
 8083e28:	687b      	ldr	r3, [r7, #4]
 8083e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083e2c:	085b      	lsrs	r3, r3, #1
 8083e2e:	3b01      	subs	r3, #1
 8083e30:	041b      	lsls	r3, r3, #16
 8083e32:	431a      	orrs	r2, r3
 8083e34:	687b      	ldr	r3, [r7, #4]
 8083e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083e38:	061b      	lsls	r3, r3, #24
 8083e3a:	491b      	ldr	r1, [pc, #108]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083e3c:	4313      	orrs	r3, r2
 8083e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8083e40:	4b1b      	ldr	r3, [pc, #108]	; (8083eb0 <HAL_RCC_OscConfig+0x478>)
 8083e42:	2201      	movs	r2, #1
 8083e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083e46:	f7fe fccd 	bl	80827e4 <HAL_GetTick>
 8083e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8083e4c:	e008      	b.n	8083e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8083e4e:	f7fe fcc9 	bl	80827e4 <HAL_GetTick>
 8083e52:	4602      	mov	r2, r0
 8083e54:	693b      	ldr	r3, [r7, #16]
 8083e56:	1ad3      	subs	r3, r2, r3
 8083e58:	2b02      	cmp	r3, #2
 8083e5a:	d901      	bls.n	8083e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8083e5c:	2303      	movs	r3, #3
 8083e5e:	e05c      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8083e60:	4b11      	ldr	r3, [pc, #68]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083e62:	681b      	ldr	r3, [r3, #0]
 8083e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083e68:	2b00      	cmp	r3, #0
 8083e6a:	d0f0      	beq.n	8083e4e <HAL_RCC_OscConfig+0x416>
 8083e6c:	e054      	b.n	8083f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8083e6e:	4b10      	ldr	r3, [pc, #64]	; (8083eb0 <HAL_RCC_OscConfig+0x478>)
 8083e70:	2200      	movs	r2, #0
 8083e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8083e74:	f7fe fcb6 	bl	80827e4 <HAL_GetTick>
 8083e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8083e7a:	e008      	b.n	8083e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8083e7c:	f7fe fcb2 	bl	80827e4 <HAL_GetTick>
 8083e80:	4602      	mov	r2, r0
 8083e82:	693b      	ldr	r3, [r7, #16]
 8083e84:	1ad3      	subs	r3, r2, r3
 8083e86:	2b02      	cmp	r3, #2
 8083e88:	d901      	bls.n	8083e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8083e8a:	2303      	movs	r3, #3
 8083e8c:	e045      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8083e8e:	4b06      	ldr	r3, [pc, #24]	; (8083ea8 <HAL_RCC_OscConfig+0x470>)
 8083e90:	681b      	ldr	r3, [r3, #0]
 8083e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083e96:	2b00      	cmp	r3, #0
 8083e98:	d1f0      	bne.n	8083e7c <HAL_RCC_OscConfig+0x444>
 8083e9a:	e03d      	b.n	8083f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8083e9c:	687b      	ldr	r3, [r7, #4]
 8083e9e:	699b      	ldr	r3, [r3, #24]
 8083ea0:	2b01      	cmp	r3, #1
 8083ea2:	d107      	bne.n	8083eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8083ea4:	2301      	movs	r3, #1
 8083ea6:	e038      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
 8083ea8:	40023800 	.word	0x40023800
 8083eac:	40007000 	.word	0x40007000
 8083eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8083eb4:	4b1b      	ldr	r3, [pc, #108]	; (8083f24 <HAL_RCC_OscConfig+0x4ec>)
 8083eb6:	685b      	ldr	r3, [r3, #4]
 8083eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8083eba:	687b      	ldr	r3, [r7, #4]
 8083ebc:	699b      	ldr	r3, [r3, #24]
 8083ebe:	2b01      	cmp	r3, #1
 8083ec0:	d028      	beq.n	8083f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8083ec2:	68fb      	ldr	r3, [r7, #12]
 8083ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8083ec8:	687b      	ldr	r3, [r7, #4]
 8083eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8083ecc:	429a      	cmp	r2, r3
 8083ece:	d121      	bne.n	8083f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8083ed0:	68fb      	ldr	r3, [r7, #12]
 8083ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8083ed6:	687b      	ldr	r3, [r7, #4]
 8083ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8083eda:	429a      	cmp	r2, r3
 8083edc:	d11a      	bne.n	8083f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8083ede:	68fa      	ldr	r2, [r7, #12]
 8083ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8083ee4:	4013      	ands	r3, r2
 8083ee6:	687a      	ldr	r2, [r7, #4]
 8083ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8083eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8083eec:	4293      	cmp	r3, r2
 8083eee:	d111      	bne.n	8083f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8083ef0:	68fb      	ldr	r3, [r7, #12]
 8083ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8083ef6:	687b      	ldr	r3, [r7, #4]
 8083ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8083efa:	085b      	lsrs	r3, r3, #1
 8083efc:	3b01      	subs	r3, #1
 8083efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8083f00:	429a      	cmp	r2, r3
 8083f02:	d107      	bne.n	8083f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8083f04:	68fb      	ldr	r3, [r7, #12]
 8083f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8083f0a:	687b      	ldr	r3, [r7, #4]
 8083f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8083f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8083f10:	429a      	cmp	r2, r3
 8083f12:	d001      	beq.n	8083f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8083f14:	2301      	movs	r3, #1
 8083f16:	e000      	b.n	8083f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8083f18:	2300      	movs	r3, #0
}
 8083f1a:	4618      	mov	r0, r3
 8083f1c:	3718      	adds	r7, #24
 8083f1e:	46bd      	mov	sp, r7
 8083f20:	bd80      	pop	{r7, pc}
 8083f22:	bf00      	nop
 8083f24:	40023800 	.word	0x40023800

08083f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8083f28:	b580      	push	{r7, lr}
 8083f2a:	b084      	sub	sp, #16
 8083f2c:	af00      	add	r7, sp, #0
 8083f2e:	6078      	str	r0, [r7, #4]
 8083f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8083f32:	687b      	ldr	r3, [r7, #4]
 8083f34:	2b00      	cmp	r3, #0
 8083f36:	d101      	bne.n	8083f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8083f38:	2301      	movs	r3, #1
 8083f3a:	e0cc      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8083f3c:	4b68      	ldr	r3, [pc, #416]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 8083f3e:	681b      	ldr	r3, [r3, #0]
 8083f40:	f003 0307 	and.w	r3, r3, #7
 8083f44:	683a      	ldr	r2, [r7, #0]
 8083f46:	429a      	cmp	r2, r3
 8083f48:	d90c      	bls.n	8083f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8083f4a:	4b65      	ldr	r3, [pc, #404]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 8083f4c:	683a      	ldr	r2, [r7, #0]
 8083f4e:	b2d2      	uxtb	r2, r2
 8083f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8083f52:	4b63      	ldr	r3, [pc, #396]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 8083f54:	681b      	ldr	r3, [r3, #0]
 8083f56:	f003 0307 	and.w	r3, r3, #7
 8083f5a:	683a      	ldr	r2, [r7, #0]
 8083f5c:	429a      	cmp	r2, r3
 8083f5e:	d001      	beq.n	8083f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8083f60:	2301      	movs	r3, #1
 8083f62:	e0b8      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8083f64:	687b      	ldr	r3, [r7, #4]
 8083f66:	681b      	ldr	r3, [r3, #0]
 8083f68:	f003 0302 	and.w	r3, r3, #2
 8083f6c:	2b00      	cmp	r3, #0
 8083f6e:	d020      	beq.n	8083fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8083f70:	687b      	ldr	r3, [r7, #4]
 8083f72:	681b      	ldr	r3, [r3, #0]
 8083f74:	f003 0304 	and.w	r3, r3, #4
 8083f78:	2b00      	cmp	r3, #0
 8083f7a:	d005      	beq.n	8083f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8083f7c:	4b59      	ldr	r3, [pc, #356]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083f7e:	689b      	ldr	r3, [r3, #8]
 8083f80:	4a58      	ldr	r2, [pc, #352]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8083f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8083f88:	687b      	ldr	r3, [r7, #4]
 8083f8a:	681b      	ldr	r3, [r3, #0]
 8083f8c:	f003 0308 	and.w	r3, r3, #8
 8083f90:	2b00      	cmp	r3, #0
 8083f92:	d005      	beq.n	8083fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8083f94:	4b53      	ldr	r3, [pc, #332]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083f96:	689b      	ldr	r3, [r3, #8]
 8083f98:	4a52      	ldr	r2, [pc, #328]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8083f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8083fa0:	4b50      	ldr	r3, [pc, #320]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083fa2:	689b      	ldr	r3, [r3, #8]
 8083fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8083fa8:	687b      	ldr	r3, [r7, #4]
 8083faa:	689b      	ldr	r3, [r3, #8]
 8083fac:	494d      	ldr	r1, [pc, #308]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083fae:	4313      	orrs	r3, r2
 8083fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8083fb2:	687b      	ldr	r3, [r7, #4]
 8083fb4:	681b      	ldr	r3, [r3, #0]
 8083fb6:	f003 0301 	and.w	r3, r3, #1
 8083fba:	2b00      	cmp	r3, #0
 8083fbc:	d044      	beq.n	8084048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8083fbe:	687b      	ldr	r3, [r7, #4]
 8083fc0:	685b      	ldr	r3, [r3, #4]
 8083fc2:	2b01      	cmp	r3, #1
 8083fc4:	d107      	bne.n	8083fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8083fc6:	4b47      	ldr	r3, [pc, #284]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083fc8:	681b      	ldr	r3, [r3, #0]
 8083fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8083fce:	2b00      	cmp	r3, #0
 8083fd0:	d119      	bne.n	8084006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083fd2:	2301      	movs	r3, #1
 8083fd4:	e07f      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8083fd6:	687b      	ldr	r3, [r7, #4]
 8083fd8:	685b      	ldr	r3, [r3, #4]
 8083fda:	2b02      	cmp	r3, #2
 8083fdc:	d003      	beq.n	8083fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8083fde:	687b      	ldr	r3, [r7, #4]
 8083fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8083fe2:	2b03      	cmp	r3, #3
 8083fe4:	d107      	bne.n	8083ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8083fe6:	4b3f      	ldr	r3, [pc, #252]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083fe8:	681b      	ldr	r3, [r3, #0]
 8083fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8083fee:	2b00      	cmp	r3, #0
 8083ff0:	d109      	bne.n	8084006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8083ff2:	2301      	movs	r3, #1
 8083ff4:	e06f      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8083ff6:	4b3b      	ldr	r3, [pc, #236]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8083ff8:	681b      	ldr	r3, [r3, #0]
 8083ffa:	f003 0302 	and.w	r3, r3, #2
 8083ffe:	2b00      	cmp	r3, #0
 8084000:	d101      	bne.n	8084006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8084002:	2301      	movs	r3, #1
 8084004:	e067      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8084006:	4b37      	ldr	r3, [pc, #220]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8084008:	689b      	ldr	r3, [r3, #8]
 808400a:	f023 0203 	bic.w	r2, r3, #3
 808400e:	687b      	ldr	r3, [r7, #4]
 8084010:	685b      	ldr	r3, [r3, #4]
 8084012:	4934      	ldr	r1, [pc, #208]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8084014:	4313      	orrs	r3, r2
 8084016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8084018:	f7fe fbe4 	bl	80827e4 <HAL_GetTick>
 808401c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 808401e:	e00a      	b.n	8084036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8084020:	f7fe fbe0 	bl	80827e4 <HAL_GetTick>
 8084024:	4602      	mov	r2, r0
 8084026:	68fb      	ldr	r3, [r7, #12]
 8084028:	1ad3      	subs	r3, r2, r3
 808402a:	f241 3288 	movw	r2, #5000	; 0x1388
 808402e:	4293      	cmp	r3, r2
 8084030:	d901      	bls.n	8084036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8084032:	2303      	movs	r3, #3
 8084034:	e04f      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8084036:	4b2b      	ldr	r3, [pc, #172]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 8084038:	689b      	ldr	r3, [r3, #8]
 808403a:	f003 020c 	and.w	r2, r3, #12
 808403e:	687b      	ldr	r3, [r7, #4]
 8084040:	685b      	ldr	r3, [r3, #4]
 8084042:	009b      	lsls	r3, r3, #2
 8084044:	429a      	cmp	r2, r3
 8084046:	d1eb      	bne.n	8084020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8084048:	4b25      	ldr	r3, [pc, #148]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 808404a:	681b      	ldr	r3, [r3, #0]
 808404c:	f003 0307 	and.w	r3, r3, #7
 8084050:	683a      	ldr	r2, [r7, #0]
 8084052:	429a      	cmp	r2, r3
 8084054:	d20c      	bcs.n	8084070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8084056:	4b22      	ldr	r3, [pc, #136]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 8084058:	683a      	ldr	r2, [r7, #0]
 808405a:	b2d2      	uxtb	r2, r2
 808405c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 808405e:	4b20      	ldr	r3, [pc, #128]	; (80840e0 <HAL_RCC_ClockConfig+0x1b8>)
 8084060:	681b      	ldr	r3, [r3, #0]
 8084062:	f003 0307 	and.w	r3, r3, #7
 8084066:	683a      	ldr	r2, [r7, #0]
 8084068:	429a      	cmp	r2, r3
 808406a:	d001      	beq.n	8084070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 808406c:	2301      	movs	r3, #1
 808406e:	e032      	b.n	80840d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8084070:	687b      	ldr	r3, [r7, #4]
 8084072:	681b      	ldr	r3, [r3, #0]
 8084074:	f003 0304 	and.w	r3, r3, #4
 8084078:	2b00      	cmp	r3, #0
 808407a:	d008      	beq.n	808408e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 808407c:	4b19      	ldr	r3, [pc, #100]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 808407e:	689b      	ldr	r3, [r3, #8]
 8084080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8084084:	687b      	ldr	r3, [r7, #4]
 8084086:	68db      	ldr	r3, [r3, #12]
 8084088:	4916      	ldr	r1, [pc, #88]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 808408a:	4313      	orrs	r3, r2
 808408c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 808408e:	687b      	ldr	r3, [r7, #4]
 8084090:	681b      	ldr	r3, [r3, #0]
 8084092:	f003 0308 	and.w	r3, r3, #8
 8084096:	2b00      	cmp	r3, #0
 8084098:	d009      	beq.n	80840ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 808409a:	4b12      	ldr	r3, [pc, #72]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 808409c:	689b      	ldr	r3, [r3, #8]
 808409e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80840a2:	687b      	ldr	r3, [r7, #4]
 80840a4:	691b      	ldr	r3, [r3, #16]
 80840a6:	00db      	lsls	r3, r3, #3
 80840a8:	490e      	ldr	r1, [pc, #56]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 80840aa:	4313      	orrs	r3, r2
 80840ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80840ae:	f000 f821 	bl	80840f4 <HAL_RCC_GetSysClockFreq>
 80840b2:	4602      	mov	r2, r0
 80840b4:	4b0b      	ldr	r3, [pc, #44]	; (80840e4 <HAL_RCC_ClockConfig+0x1bc>)
 80840b6:	689b      	ldr	r3, [r3, #8]
 80840b8:	091b      	lsrs	r3, r3, #4
 80840ba:	f003 030f 	and.w	r3, r3, #15
 80840be:	490a      	ldr	r1, [pc, #40]	; (80840e8 <HAL_RCC_ClockConfig+0x1c0>)
 80840c0:	5ccb      	ldrb	r3, [r1, r3]
 80840c2:	fa22 f303 	lsr.w	r3, r2, r3
 80840c6:	4a09      	ldr	r2, [pc, #36]	; (80840ec <HAL_RCC_ClockConfig+0x1c4>)
 80840c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80840ca:	4b09      	ldr	r3, [pc, #36]	; (80840f0 <HAL_RCC_ClockConfig+0x1c8>)
 80840cc:	681b      	ldr	r3, [r3, #0]
 80840ce:	4618      	mov	r0, r3
 80840d0:	f7fe fb44 	bl	808275c <HAL_InitTick>

  return HAL_OK;
 80840d4:	2300      	movs	r3, #0
}
 80840d6:	4618      	mov	r0, r3
 80840d8:	3710      	adds	r7, #16
 80840da:	46bd      	mov	sp, r7
 80840dc:	bd80      	pop	{r7, pc}
 80840de:	bf00      	nop
 80840e0:	40023c00 	.word	0x40023c00
 80840e4:	40023800 	.word	0x40023800
 80840e8:	0808cee4 	.word	0x0808cee4
 80840ec:	20000084 	.word	0x20000084
 80840f0:	20000088 	.word	0x20000088

080840f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80840f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80840f8:	b094      	sub	sp, #80	; 0x50
 80840fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80840fc:	2300      	movs	r3, #0
 80840fe:	647b      	str	r3, [r7, #68]	; 0x44
 8084100:	2300      	movs	r3, #0
 8084102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8084104:	2300      	movs	r3, #0
 8084106:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8084108:	2300      	movs	r3, #0
 808410a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 808410c:	4b79      	ldr	r3, [pc, #484]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 808410e:	689b      	ldr	r3, [r3, #8]
 8084110:	f003 030c 	and.w	r3, r3, #12
 8084114:	2b08      	cmp	r3, #8
 8084116:	d00d      	beq.n	8084134 <HAL_RCC_GetSysClockFreq+0x40>
 8084118:	2b08      	cmp	r3, #8
 808411a:	f200 80e1 	bhi.w	80842e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 808411e:	2b00      	cmp	r3, #0
 8084120:	d002      	beq.n	8084128 <HAL_RCC_GetSysClockFreq+0x34>
 8084122:	2b04      	cmp	r3, #4
 8084124:	d003      	beq.n	808412e <HAL_RCC_GetSysClockFreq+0x3a>
 8084126:	e0db      	b.n	80842e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8084128:	4b73      	ldr	r3, [pc, #460]	; (80842f8 <HAL_RCC_GetSysClockFreq+0x204>)
 808412a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 808412c:	e0db      	b.n	80842e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 808412e:	4b73      	ldr	r3, [pc, #460]	; (80842fc <HAL_RCC_GetSysClockFreq+0x208>)
 8084130:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8084132:	e0d8      	b.n	80842e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8084134:	4b6f      	ldr	r3, [pc, #444]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8084136:	685b      	ldr	r3, [r3, #4]
 8084138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 808413c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 808413e:	4b6d      	ldr	r3, [pc, #436]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8084140:	685b      	ldr	r3, [r3, #4]
 8084142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8084146:	2b00      	cmp	r3, #0
 8084148:	d063      	beq.n	8084212 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 808414a:	4b6a      	ldr	r3, [pc, #424]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 808414c:	685b      	ldr	r3, [r3, #4]
 808414e:	099b      	lsrs	r3, r3, #6
 8084150:	2200      	movs	r2, #0
 8084152:	63bb      	str	r3, [r7, #56]	; 0x38
 8084154:	63fa      	str	r2, [r7, #60]	; 0x3c
 8084156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8084158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808415c:	633b      	str	r3, [r7, #48]	; 0x30
 808415e:	2300      	movs	r3, #0
 8084160:	637b      	str	r3, [r7, #52]	; 0x34
 8084162:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8084166:	4622      	mov	r2, r4
 8084168:	462b      	mov	r3, r5
 808416a:	f04f 0000 	mov.w	r0, #0
 808416e:	f04f 0100 	mov.w	r1, #0
 8084172:	0159      	lsls	r1, r3, #5
 8084174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8084178:	0150      	lsls	r0, r2, #5
 808417a:	4602      	mov	r2, r0
 808417c:	460b      	mov	r3, r1
 808417e:	4621      	mov	r1, r4
 8084180:	1a51      	subs	r1, r2, r1
 8084182:	6139      	str	r1, [r7, #16]
 8084184:	4629      	mov	r1, r5
 8084186:	eb63 0301 	sbc.w	r3, r3, r1
 808418a:	617b      	str	r3, [r7, #20]
 808418c:	f04f 0200 	mov.w	r2, #0
 8084190:	f04f 0300 	mov.w	r3, #0
 8084194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8084198:	4659      	mov	r1, fp
 808419a:	018b      	lsls	r3, r1, #6
 808419c:	4651      	mov	r1, sl
 808419e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80841a2:	4651      	mov	r1, sl
 80841a4:	018a      	lsls	r2, r1, #6
 80841a6:	4651      	mov	r1, sl
 80841a8:	ebb2 0801 	subs.w	r8, r2, r1
 80841ac:	4659      	mov	r1, fp
 80841ae:	eb63 0901 	sbc.w	r9, r3, r1
 80841b2:	f04f 0200 	mov.w	r2, #0
 80841b6:	f04f 0300 	mov.w	r3, #0
 80841ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80841be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80841c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80841c6:	4690      	mov	r8, r2
 80841c8:	4699      	mov	r9, r3
 80841ca:	4623      	mov	r3, r4
 80841cc:	eb18 0303 	adds.w	r3, r8, r3
 80841d0:	60bb      	str	r3, [r7, #8]
 80841d2:	462b      	mov	r3, r5
 80841d4:	eb49 0303 	adc.w	r3, r9, r3
 80841d8:	60fb      	str	r3, [r7, #12]
 80841da:	f04f 0200 	mov.w	r2, #0
 80841de:	f04f 0300 	mov.w	r3, #0
 80841e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80841e6:	4629      	mov	r1, r5
 80841e8:	024b      	lsls	r3, r1, #9
 80841ea:	4621      	mov	r1, r4
 80841ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80841f0:	4621      	mov	r1, r4
 80841f2:	024a      	lsls	r2, r1, #9
 80841f4:	4610      	mov	r0, r2
 80841f6:	4619      	mov	r1, r3
 80841f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80841fa:	2200      	movs	r2, #0
 80841fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80841fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8084200:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8084204:	f7fc fcd0 	bl	8080ba8 <__aeabi_uldivmod>
 8084208:	4602      	mov	r2, r0
 808420a:	460b      	mov	r3, r1
 808420c:	4613      	mov	r3, r2
 808420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8084210:	e058      	b.n	80842c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8084212:	4b38      	ldr	r3, [pc, #224]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8084214:	685b      	ldr	r3, [r3, #4]
 8084216:	099b      	lsrs	r3, r3, #6
 8084218:	2200      	movs	r2, #0
 808421a:	4618      	mov	r0, r3
 808421c:	4611      	mov	r1, r2
 808421e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8084222:	623b      	str	r3, [r7, #32]
 8084224:	2300      	movs	r3, #0
 8084226:	627b      	str	r3, [r7, #36]	; 0x24
 8084228:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 808422c:	4642      	mov	r2, r8
 808422e:	464b      	mov	r3, r9
 8084230:	f04f 0000 	mov.w	r0, #0
 8084234:	f04f 0100 	mov.w	r1, #0
 8084238:	0159      	lsls	r1, r3, #5
 808423a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 808423e:	0150      	lsls	r0, r2, #5
 8084240:	4602      	mov	r2, r0
 8084242:	460b      	mov	r3, r1
 8084244:	4641      	mov	r1, r8
 8084246:	ebb2 0a01 	subs.w	sl, r2, r1
 808424a:	4649      	mov	r1, r9
 808424c:	eb63 0b01 	sbc.w	fp, r3, r1
 8084250:	f04f 0200 	mov.w	r2, #0
 8084254:	f04f 0300 	mov.w	r3, #0
 8084258:	ea4f 138b 	mov.w	r3, fp, lsl #6
 808425c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8084260:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8084264:	ebb2 040a 	subs.w	r4, r2, sl
 8084268:	eb63 050b 	sbc.w	r5, r3, fp
 808426c:	f04f 0200 	mov.w	r2, #0
 8084270:	f04f 0300 	mov.w	r3, #0
 8084274:	00eb      	lsls	r3, r5, #3
 8084276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 808427a:	00e2      	lsls	r2, r4, #3
 808427c:	4614      	mov	r4, r2
 808427e:	461d      	mov	r5, r3
 8084280:	4643      	mov	r3, r8
 8084282:	18e3      	adds	r3, r4, r3
 8084284:	603b      	str	r3, [r7, #0]
 8084286:	464b      	mov	r3, r9
 8084288:	eb45 0303 	adc.w	r3, r5, r3
 808428c:	607b      	str	r3, [r7, #4]
 808428e:	f04f 0200 	mov.w	r2, #0
 8084292:	f04f 0300 	mov.w	r3, #0
 8084296:	e9d7 4500 	ldrd	r4, r5, [r7]
 808429a:	4629      	mov	r1, r5
 808429c:	028b      	lsls	r3, r1, #10
 808429e:	4621      	mov	r1, r4
 80842a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80842a4:	4621      	mov	r1, r4
 80842a6:	028a      	lsls	r2, r1, #10
 80842a8:	4610      	mov	r0, r2
 80842aa:	4619      	mov	r1, r3
 80842ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80842ae:	2200      	movs	r2, #0
 80842b0:	61bb      	str	r3, [r7, #24]
 80842b2:	61fa      	str	r2, [r7, #28]
 80842b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80842b8:	f7fc fc76 	bl	8080ba8 <__aeabi_uldivmod>
 80842bc:	4602      	mov	r2, r0
 80842be:	460b      	mov	r3, r1
 80842c0:	4613      	mov	r3, r2
 80842c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80842c4:	4b0b      	ldr	r3, [pc, #44]	; (80842f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80842c6:	685b      	ldr	r3, [r3, #4]
 80842c8:	0c1b      	lsrs	r3, r3, #16
 80842ca:	f003 0303 	and.w	r3, r3, #3
 80842ce:	3301      	adds	r3, #1
 80842d0:	005b      	lsls	r3, r3, #1
 80842d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80842d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80842d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80842d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80842dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80842de:	e002      	b.n	80842e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80842e0:	4b05      	ldr	r3, [pc, #20]	; (80842f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80842e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80842e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80842e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80842e8:	4618      	mov	r0, r3
 80842ea:	3750      	adds	r7, #80	; 0x50
 80842ec:	46bd      	mov	sp, r7
 80842ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80842f2:	bf00      	nop
 80842f4:	40023800 	.word	0x40023800
 80842f8:	00f42400 	.word	0x00f42400
 80842fc:	007a1200 	.word	0x007a1200

08084300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8084300:	b480      	push	{r7}
 8084302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8084304:	4b03      	ldr	r3, [pc, #12]	; (8084314 <HAL_RCC_GetHCLKFreq+0x14>)
 8084306:	681b      	ldr	r3, [r3, #0]
}
 8084308:	4618      	mov	r0, r3
 808430a:	46bd      	mov	sp, r7
 808430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084310:	4770      	bx	lr
 8084312:	bf00      	nop
 8084314:	20000084 	.word	0x20000084

08084318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8084318:	b580      	push	{r7, lr}
 808431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 808431c:	f7ff fff0 	bl	8084300 <HAL_RCC_GetHCLKFreq>
 8084320:	4602      	mov	r2, r0
 8084322:	4b05      	ldr	r3, [pc, #20]	; (8084338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8084324:	689b      	ldr	r3, [r3, #8]
 8084326:	0a9b      	lsrs	r3, r3, #10
 8084328:	f003 0307 	and.w	r3, r3, #7
 808432c:	4903      	ldr	r1, [pc, #12]	; (808433c <HAL_RCC_GetPCLK1Freq+0x24>)
 808432e:	5ccb      	ldrb	r3, [r1, r3]
 8084330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8084334:	4618      	mov	r0, r3
 8084336:	bd80      	pop	{r7, pc}
 8084338:	40023800 	.word	0x40023800
 808433c:	0808cef4 	.word	0x0808cef4

08084340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8084340:	b580      	push	{r7, lr}
 8084342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8084344:	f7ff ffdc 	bl	8084300 <HAL_RCC_GetHCLKFreq>
 8084348:	4602      	mov	r2, r0
 808434a:	4b05      	ldr	r3, [pc, #20]	; (8084360 <HAL_RCC_GetPCLK2Freq+0x20>)
 808434c:	689b      	ldr	r3, [r3, #8]
 808434e:	0b5b      	lsrs	r3, r3, #13
 8084350:	f003 0307 	and.w	r3, r3, #7
 8084354:	4903      	ldr	r1, [pc, #12]	; (8084364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8084356:	5ccb      	ldrb	r3, [r1, r3]
 8084358:	fa22 f303 	lsr.w	r3, r2, r3
}
 808435c:	4618      	mov	r0, r3
 808435e:	bd80      	pop	{r7, pc}
 8084360:	40023800 	.word	0x40023800
 8084364:	0808cef4 	.word	0x0808cef4

08084368 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8084368:	b580      	push	{r7, lr}
 808436a:	b086      	sub	sp, #24
 808436c:	af00      	add	r7, sp, #0
 808436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8084370:	2300      	movs	r3, #0
 8084372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8084374:	2300      	movs	r3, #0
 8084376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8084378:	687b      	ldr	r3, [r7, #4]
 808437a:	681b      	ldr	r3, [r3, #0]
 808437c:	f003 0301 	and.w	r3, r3, #1
 8084380:	2b00      	cmp	r3, #0
 8084382:	d105      	bne.n	8084390 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8084384:	687b      	ldr	r3, [r7, #4]
 8084386:	681b      	ldr	r3, [r3, #0]
 8084388:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 808438c:	2b00      	cmp	r3, #0
 808438e:	d035      	beq.n	80843fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8084390:	4b62      	ldr	r3, [pc, #392]	; (808451c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8084392:	2200      	movs	r2, #0
 8084394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8084396:	f7fe fa25 	bl	80827e4 <HAL_GetTick>
 808439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 808439c:	e008      	b.n	80843b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 808439e:	f7fe fa21 	bl	80827e4 <HAL_GetTick>
 80843a2:	4602      	mov	r2, r0
 80843a4:	697b      	ldr	r3, [r7, #20]
 80843a6:	1ad3      	subs	r3, r2, r3
 80843a8:	2b02      	cmp	r3, #2
 80843aa:	d901      	bls.n	80843b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80843ac:	2303      	movs	r3, #3
 80843ae:	e0b0      	b.n	8084512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80843b0:	4b5b      	ldr	r3, [pc, #364]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80843b2:	681b      	ldr	r3, [r3, #0]
 80843b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80843b8:	2b00      	cmp	r3, #0
 80843ba:	d1f0      	bne.n	808439e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80843bc:	687b      	ldr	r3, [r7, #4]
 80843be:	685b      	ldr	r3, [r3, #4]
 80843c0:	019a      	lsls	r2, r3, #6
 80843c2:	687b      	ldr	r3, [r7, #4]
 80843c4:	689b      	ldr	r3, [r3, #8]
 80843c6:	071b      	lsls	r3, r3, #28
 80843c8:	4955      	ldr	r1, [pc, #340]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80843ca:	4313      	orrs	r3, r2
 80843cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80843d0:	4b52      	ldr	r3, [pc, #328]	; (808451c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80843d2:	2201      	movs	r2, #1
 80843d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80843d6:	f7fe fa05 	bl	80827e4 <HAL_GetTick>
 80843da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80843dc:	e008      	b.n	80843f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80843de:	f7fe fa01 	bl	80827e4 <HAL_GetTick>
 80843e2:	4602      	mov	r2, r0
 80843e4:	697b      	ldr	r3, [r7, #20]
 80843e6:	1ad3      	subs	r3, r2, r3
 80843e8:	2b02      	cmp	r3, #2
 80843ea:	d901      	bls.n	80843f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80843ec:	2303      	movs	r3, #3
 80843ee:	e090      	b.n	8084512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80843f0:	4b4b      	ldr	r3, [pc, #300]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80843f2:	681b      	ldr	r3, [r3, #0]
 80843f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80843f8:	2b00      	cmp	r3, #0
 80843fa:	d0f0      	beq.n	80843de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80843fc:	687b      	ldr	r3, [r7, #4]
 80843fe:	681b      	ldr	r3, [r3, #0]
 8084400:	f003 0302 	and.w	r3, r3, #2
 8084404:	2b00      	cmp	r3, #0
 8084406:	f000 8083 	beq.w	8084510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 808440a:	2300      	movs	r3, #0
 808440c:	60fb      	str	r3, [r7, #12]
 808440e:	4b44      	ldr	r3, [pc, #272]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8084410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8084412:	4a43      	ldr	r2, [pc, #268]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8084414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8084418:	6413      	str	r3, [r2, #64]	; 0x40
 808441a:	4b41      	ldr	r3, [pc, #260]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 808441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8084422:	60fb      	str	r3, [r7, #12]
 8084424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8084426:	4b3f      	ldr	r3, [pc, #252]	; (8084524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8084428:	681b      	ldr	r3, [r3, #0]
 808442a:	4a3e      	ldr	r2, [pc, #248]	; (8084524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 808442c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8084430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8084432:	f7fe f9d7 	bl	80827e4 <HAL_GetTick>
 8084436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8084438:	e008      	b.n	808444c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 808443a:	f7fe f9d3 	bl	80827e4 <HAL_GetTick>
 808443e:	4602      	mov	r2, r0
 8084440:	697b      	ldr	r3, [r7, #20]
 8084442:	1ad3      	subs	r3, r2, r3
 8084444:	2b02      	cmp	r3, #2
 8084446:	d901      	bls.n	808444c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8084448:	2303      	movs	r3, #3
 808444a:	e062      	b.n	8084512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 808444c:	4b35      	ldr	r3, [pc, #212]	; (8084524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 808444e:	681b      	ldr	r3, [r3, #0]
 8084450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084454:	2b00      	cmp	r3, #0
 8084456:	d0f0      	beq.n	808443a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8084458:	4b31      	ldr	r3, [pc, #196]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 808445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808445c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8084460:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8084462:	693b      	ldr	r3, [r7, #16]
 8084464:	2b00      	cmp	r3, #0
 8084466:	d02f      	beq.n	80844c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8084468:	687b      	ldr	r3, [r7, #4]
 808446a:	68db      	ldr	r3, [r3, #12]
 808446c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8084470:	693a      	ldr	r2, [r7, #16]
 8084472:	429a      	cmp	r2, r3
 8084474:	d028      	beq.n	80844c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8084476:	4b2a      	ldr	r3, [pc, #168]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8084478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 808447a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 808447e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8084480:	4b29      	ldr	r3, [pc, #164]	; (8084528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8084482:	2201      	movs	r2, #1
 8084484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8084486:	4b28      	ldr	r3, [pc, #160]	; (8084528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8084488:	2200      	movs	r2, #0
 808448a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 808448c:	4a24      	ldr	r2, [pc, #144]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 808448e:	693b      	ldr	r3, [r7, #16]
 8084490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8084492:	4b23      	ldr	r3, [pc, #140]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8084494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8084496:	f003 0301 	and.w	r3, r3, #1
 808449a:	2b01      	cmp	r3, #1
 808449c:	d114      	bne.n	80844c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 808449e:	f7fe f9a1 	bl	80827e4 <HAL_GetTick>
 80844a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80844a4:	e00a      	b.n	80844bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80844a6:	f7fe f99d 	bl	80827e4 <HAL_GetTick>
 80844aa:	4602      	mov	r2, r0
 80844ac:	697b      	ldr	r3, [r7, #20]
 80844ae:	1ad3      	subs	r3, r2, r3
 80844b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80844b4:	4293      	cmp	r3, r2
 80844b6:	d901      	bls.n	80844bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80844b8:	2303      	movs	r3, #3
 80844ba:	e02a      	b.n	8084512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80844bc:	4b18      	ldr	r3, [pc, #96]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80844be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80844c0:	f003 0302 	and.w	r3, r3, #2
 80844c4:	2b00      	cmp	r3, #0
 80844c6:	d0ee      	beq.n	80844a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80844c8:	687b      	ldr	r3, [r7, #4]
 80844ca:	68db      	ldr	r3, [r3, #12]
 80844cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80844d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80844d4:	d10d      	bne.n	80844f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80844d6:	4b12      	ldr	r3, [pc, #72]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80844d8:	689b      	ldr	r3, [r3, #8]
 80844da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80844de:	687b      	ldr	r3, [r7, #4]
 80844e0:	68db      	ldr	r3, [r3, #12]
 80844e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80844e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80844ea:	490d      	ldr	r1, [pc, #52]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80844ec:	4313      	orrs	r3, r2
 80844ee:	608b      	str	r3, [r1, #8]
 80844f0:	e005      	b.n	80844fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80844f2:	4b0b      	ldr	r3, [pc, #44]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80844f4:	689b      	ldr	r3, [r3, #8]
 80844f6:	4a0a      	ldr	r2, [pc, #40]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80844f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80844fc:	6093      	str	r3, [r2, #8]
 80844fe:	4b08      	ldr	r3, [pc, #32]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8084500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8084502:	687b      	ldr	r3, [r7, #4]
 8084504:	68db      	ldr	r3, [r3, #12]
 8084506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 808450a:	4905      	ldr	r1, [pc, #20]	; (8084520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 808450c:	4313      	orrs	r3, r2
 808450e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8084510:	2300      	movs	r3, #0
}
 8084512:	4618      	mov	r0, r3
 8084514:	3718      	adds	r7, #24
 8084516:	46bd      	mov	sp, r7
 8084518:	bd80      	pop	{r7, pc}
 808451a:	bf00      	nop
 808451c:	42470068 	.word	0x42470068
 8084520:	40023800 	.word	0x40023800
 8084524:	40007000 	.word	0x40007000
 8084528:	42470e40 	.word	0x42470e40

0808452c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 808452c:	b580      	push	{r7, lr}
 808452e:	b084      	sub	sp, #16
 8084530:	af00      	add	r7, sp, #0
 8084532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8084534:	2301      	movs	r3, #1
 8084536:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8084538:	687b      	ldr	r3, [r7, #4]
 808453a:	2b00      	cmp	r3, #0
 808453c:	d101      	bne.n	8084542 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 808453e:	2301      	movs	r3, #1
 8084540:	e066      	b.n	8084610 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8084542:	687b      	ldr	r3, [r7, #4]
 8084544:	7f5b      	ldrb	r3, [r3, #29]
 8084546:	b2db      	uxtb	r3, r3
 8084548:	2b00      	cmp	r3, #0
 808454a:	d105      	bne.n	8084558 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 808454c:	687b      	ldr	r3, [r7, #4]
 808454e:	2200      	movs	r2, #0
 8084550:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8084552:	6878      	ldr	r0, [r7, #4]
 8084554:	f7fd fd0e 	bl	8081f74 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8084558:	687b      	ldr	r3, [r7, #4]
 808455a:	2202      	movs	r2, #2
 808455c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 808455e:	687b      	ldr	r3, [r7, #4]
 8084560:	681b      	ldr	r3, [r3, #0]
 8084562:	22ca      	movs	r2, #202	; 0xca
 8084564:	625a      	str	r2, [r3, #36]	; 0x24
 8084566:	687b      	ldr	r3, [r7, #4]
 8084568:	681b      	ldr	r3, [r3, #0]
 808456a:	2253      	movs	r2, #83	; 0x53
 808456c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 808456e:	6878      	ldr	r0, [r7, #4]
 8084570:	f000 fb20 	bl	8084bb4 <RTC_EnterInitMode>
 8084574:	4603      	mov	r3, r0
 8084576:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8084578:	7bfb      	ldrb	r3, [r7, #15]
 808457a:	2b00      	cmp	r3, #0
 808457c:	d12c      	bne.n	80845d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 808457e:	687b      	ldr	r3, [r7, #4]
 8084580:	681b      	ldr	r3, [r3, #0]
 8084582:	689b      	ldr	r3, [r3, #8]
 8084584:	687a      	ldr	r2, [r7, #4]
 8084586:	6812      	ldr	r2, [r2, #0]
 8084588:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 808458c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8084590:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8084592:	687b      	ldr	r3, [r7, #4]
 8084594:	681b      	ldr	r3, [r3, #0]
 8084596:	6899      	ldr	r1, [r3, #8]
 8084598:	687b      	ldr	r3, [r7, #4]
 808459a:	685a      	ldr	r2, [r3, #4]
 808459c:	687b      	ldr	r3, [r7, #4]
 808459e:	691b      	ldr	r3, [r3, #16]
 80845a0:	431a      	orrs	r2, r3
 80845a2:	687b      	ldr	r3, [r7, #4]
 80845a4:	695b      	ldr	r3, [r3, #20]
 80845a6:	431a      	orrs	r2, r3
 80845a8:	687b      	ldr	r3, [r7, #4]
 80845aa:	681b      	ldr	r3, [r3, #0]
 80845ac:	430a      	orrs	r2, r1
 80845ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80845b0:	687b      	ldr	r3, [r7, #4]
 80845b2:	681b      	ldr	r3, [r3, #0]
 80845b4:	687a      	ldr	r2, [r7, #4]
 80845b6:	68d2      	ldr	r2, [r2, #12]
 80845b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80845ba:	687b      	ldr	r3, [r7, #4]
 80845bc:	681b      	ldr	r3, [r3, #0]
 80845be:	6919      	ldr	r1, [r3, #16]
 80845c0:	687b      	ldr	r3, [r7, #4]
 80845c2:	689b      	ldr	r3, [r3, #8]
 80845c4:	041a      	lsls	r2, r3, #16
 80845c6:	687b      	ldr	r3, [r7, #4]
 80845c8:	681b      	ldr	r3, [r3, #0]
 80845ca:	430a      	orrs	r2, r1
 80845cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80845ce:	6878      	ldr	r0, [r7, #4]
 80845d0:	f000 fb27 	bl	8084c22 <RTC_ExitInitMode>
 80845d4:	4603      	mov	r3, r0
 80845d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80845d8:	7bfb      	ldrb	r3, [r7, #15]
 80845da:	2b00      	cmp	r3, #0
 80845dc:	d113      	bne.n	8084606 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80845de:	687b      	ldr	r3, [r7, #4]
 80845e0:	681b      	ldr	r3, [r3, #0]
 80845e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80845e4:	687b      	ldr	r3, [r7, #4]
 80845e6:	681b      	ldr	r3, [r3, #0]
 80845e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80845ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80845ee:	687b      	ldr	r3, [r7, #4]
 80845f0:	681b      	ldr	r3, [r3, #0]
 80845f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80845f4:	687b      	ldr	r3, [r7, #4]
 80845f6:	699a      	ldr	r2, [r3, #24]
 80845f8:	687b      	ldr	r3, [r7, #4]
 80845fa:	681b      	ldr	r3, [r3, #0]
 80845fc:	430a      	orrs	r2, r1
 80845fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8084600:	687b      	ldr	r3, [r7, #4]
 8084602:	2201      	movs	r2, #1
 8084604:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8084606:	687b      	ldr	r3, [r7, #4]
 8084608:	681b      	ldr	r3, [r3, #0]
 808460a:	22ff      	movs	r2, #255	; 0xff
 808460c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 808460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8084610:	4618      	mov	r0, r3
 8084612:	3710      	adds	r7, #16
 8084614:	46bd      	mov	sp, r7
 8084616:	bd80      	pop	{r7, pc}

08084618 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8084618:	b590      	push	{r4, r7, lr}
 808461a:	b087      	sub	sp, #28
 808461c:	af00      	add	r7, sp, #0
 808461e:	60f8      	str	r0, [r7, #12]
 8084620:	60b9      	str	r1, [r7, #8]
 8084622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8084624:	2300      	movs	r3, #0
 8084626:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8084628:	68fb      	ldr	r3, [r7, #12]
 808462a:	7f1b      	ldrb	r3, [r3, #28]
 808462c:	2b01      	cmp	r3, #1
 808462e:	d101      	bne.n	8084634 <HAL_RTC_SetTime+0x1c>
 8084630:	2302      	movs	r3, #2
 8084632:	e087      	b.n	8084744 <HAL_RTC_SetTime+0x12c>
 8084634:	68fb      	ldr	r3, [r7, #12]
 8084636:	2201      	movs	r2, #1
 8084638:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 808463a:	68fb      	ldr	r3, [r7, #12]
 808463c:	2202      	movs	r2, #2
 808463e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8084640:	687b      	ldr	r3, [r7, #4]
 8084642:	2b00      	cmp	r3, #0
 8084644:	d126      	bne.n	8084694 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8084646:	68fb      	ldr	r3, [r7, #12]
 8084648:	681b      	ldr	r3, [r3, #0]
 808464a:	689b      	ldr	r3, [r3, #8]
 808464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8084650:	2b00      	cmp	r3, #0
 8084652:	d102      	bne.n	808465a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8084654:	68bb      	ldr	r3, [r7, #8]
 8084656:	2200      	movs	r2, #0
 8084658:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 808465a:	68bb      	ldr	r3, [r7, #8]
 808465c:	781b      	ldrb	r3, [r3, #0]
 808465e:	4618      	mov	r0, r3
 8084660:	f000 fb04 	bl	8084c6c <RTC_ByteToBcd2>
 8084664:	4603      	mov	r3, r0
 8084666:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8084668:	68bb      	ldr	r3, [r7, #8]
 808466a:	785b      	ldrb	r3, [r3, #1]
 808466c:	4618      	mov	r0, r3
 808466e:	f000 fafd 	bl	8084c6c <RTC_ByteToBcd2>
 8084672:	4603      	mov	r3, r0
 8084674:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8084676:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8084678:	68bb      	ldr	r3, [r7, #8]
 808467a:	789b      	ldrb	r3, [r3, #2]
 808467c:	4618      	mov	r0, r3
 808467e:	f000 faf5 	bl	8084c6c <RTC_ByteToBcd2>
 8084682:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8084684:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8084688:	68bb      	ldr	r3, [r7, #8]
 808468a:	78db      	ldrb	r3, [r3, #3]
 808468c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 808468e:	4313      	orrs	r3, r2
 8084690:	617b      	str	r3, [r7, #20]
 8084692:	e018      	b.n	80846c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8084694:	68fb      	ldr	r3, [r7, #12]
 8084696:	681b      	ldr	r3, [r3, #0]
 8084698:	689b      	ldr	r3, [r3, #8]
 808469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 808469e:	2b00      	cmp	r3, #0
 80846a0:	d102      	bne.n	80846a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80846a2:	68bb      	ldr	r3, [r7, #8]
 80846a4:	2200      	movs	r2, #0
 80846a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80846a8:	68bb      	ldr	r3, [r7, #8]
 80846aa:	781b      	ldrb	r3, [r3, #0]
 80846ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80846ae:	68bb      	ldr	r3, [r7, #8]
 80846b0:	785b      	ldrb	r3, [r3, #1]
 80846b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80846b4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80846b6:	68ba      	ldr	r2, [r7, #8]
 80846b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80846ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80846bc:	68bb      	ldr	r3, [r7, #8]
 80846be:	78db      	ldrb	r3, [r3, #3]
 80846c0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80846c2:	4313      	orrs	r3, r2
 80846c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80846c6:	68fb      	ldr	r3, [r7, #12]
 80846c8:	681b      	ldr	r3, [r3, #0]
 80846ca:	22ca      	movs	r2, #202	; 0xca
 80846cc:	625a      	str	r2, [r3, #36]	; 0x24
 80846ce:	68fb      	ldr	r3, [r7, #12]
 80846d0:	681b      	ldr	r3, [r3, #0]
 80846d2:	2253      	movs	r2, #83	; 0x53
 80846d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80846d6:	68f8      	ldr	r0, [r7, #12]
 80846d8:	f000 fa6c 	bl	8084bb4 <RTC_EnterInitMode>
 80846dc:	4603      	mov	r3, r0
 80846de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80846e0:	7cfb      	ldrb	r3, [r7, #19]
 80846e2:	2b00      	cmp	r3, #0
 80846e4:	d120      	bne.n	8084728 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80846e6:	68fb      	ldr	r3, [r7, #12]
 80846e8:	681a      	ldr	r2, [r3, #0]
 80846ea:	697b      	ldr	r3, [r7, #20]
 80846ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80846f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80846f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80846f6:	68fb      	ldr	r3, [r7, #12]
 80846f8:	681b      	ldr	r3, [r3, #0]
 80846fa:	689a      	ldr	r2, [r3, #8]
 80846fc:	68fb      	ldr	r3, [r7, #12]
 80846fe:	681b      	ldr	r3, [r3, #0]
 8084700:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8084704:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8084706:	68fb      	ldr	r3, [r7, #12]
 8084708:	681b      	ldr	r3, [r3, #0]
 808470a:	6899      	ldr	r1, [r3, #8]
 808470c:	68bb      	ldr	r3, [r7, #8]
 808470e:	68da      	ldr	r2, [r3, #12]
 8084710:	68bb      	ldr	r3, [r7, #8]
 8084712:	691b      	ldr	r3, [r3, #16]
 8084714:	431a      	orrs	r2, r3
 8084716:	68fb      	ldr	r3, [r7, #12]
 8084718:	681b      	ldr	r3, [r3, #0]
 808471a:	430a      	orrs	r2, r1
 808471c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 808471e:	68f8      	ldr	r0, [r7, #12]
 8084720:	f000 fa7f 	bl	8084c22 <RTC_ExitInitMode>
 8084724:	4603      	mov	r3, r0
 8084726:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8084728:	7cfb      	ldrb	r3, [r7, #19]
 808472a:	2b00      	cmp	r3, #0
 808472c:	d102      	bne.n	8084734 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 808472e:	68fb      	ldr	r3, [r7, #12]
 8084730:	2201      	movs	r2, #1
 8084732:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8084734:	68fb      	ldr	r3, [r7, #12]
 8084736:	681b      	ldr	r3, [r3, #0]
 8084738:	22ff      	movs	r2, #255	; 0xff
 808473a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 808473c:	68fb      	ldr	r3, [r7, #12]
 808473e:	2200      	movs	r2, #0
 8084740:	771a      	strb	r2, [r3, #28]

  return status;
 8084742:	7cfb      	ldrb	r3, [r7, #19]
}
 8084744:	4618      	mov	r0, r3
 8084746:	371c      	adds	r7, #28
 8084748:	46bd      	mov	sp, r7
 808474a:	bd90      	pop	{r4, r7, pc}

0808474c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 808474c:	b590      	push	{r4, r7, lr}
 808474e:	b087      	sub	sp, #28
 8084750:	af00      	add	r7, sp, #0
 8084752:	60f8      	str	r0, [r7, #12]
 8084754:	60b9      	str	r1, [r7, #8]
 8084756:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8084758:	2300      	movs	r3, #0
 808475a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 808475c:	68fb      	ldr	r3, [r7, #12]
 808475e:	7f1b      	ldrb	r3, [r3, #28]
 8084760:	2b01      	cmp	r3, #1
 8084762:	d101      	bne.n	8084768 <HAL_RTC_SetDate+0x1c>
 8084764:	2302      	movs	r3, #2
 8084766:	e071      	b.n	808484c <HAL_RTC_SetDate+0x100>
 8084768:	68fb      	ldr	r3, [r7, #12]
 808476a:	2201      	movs	r2, #1
 808476c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 808476e:	68fb      	ldr	r3, [r7, #12]
 8084770:	2202      	movs	r2, #2
 8084772:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8084774:	687b      	ldr	r3, [r7, #4]
 8084776:	2b00      	cmp	r3, #0
 8084778:	d10e      	bne.n	8084798 <HAL_RTC_SetDate+0x4c>
 808477a:	68bb      	ldr	r3, [r7, #8]
 808477c:	785b      	ldrb	r3, [r3, #1]
 808477e:	f003 0310 	and.w	r3, r3, #16
 8084782:	2b00      	cmp	r3, #0
 8084784:	d008      	beq.n	8084798 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8084786:	68bb      	ldr	r3, [r7, #8]
 8084788:	785b      	ldrb	r3, [r3, #1]
 808478a:	f023 0310 	bic.w	r3, r3, #16
 808478e:	b2db      	uxtb	r3, r3
 8084790:	330a      	adds	r3, #10
 8084792:	b2da      	uxtb	r2, r3
 8084794:	68bb      	ldr	r3, [r7, #8]
 8084796:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8084798:	687b      	ldr	r3, [r7, #4]
 808479a:	2b00      	cmp	r3, #0
 808479c:	d11c      	bne.n	80847d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 808479e:	68bb      	ldr	r3, [r7, #8]
 80847a0:	78db      	ldrb	r3, [r3, #3]
 80847a2:	4618      	mov	r0, r3
 80847a4:	f000 fa62 	bl	8084c6c <RTC_ByteToBcd2>
 80847a8:	4603      	mov	r3, r0
 80847aa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80847ac:	68bb      	ldr	r3, [r7, #8]
 80847ae:	785b      	ldrb	r3, [r3, #1]
 80847b0:	4618      	mov	r0, r3
 80847b2:	f000 fa5b 	bl	8084c6c <RTC_ByteToBcd2>
 80847b6:	4603      	mov	r3, r0
 80847b8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80847ba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80847bc:	68bb      	ldr	r3, [r7, #8]
 80847be:	789b      	ldrb	r3, [r3, #2]
 80847c0:	4618      	mov	r0, r3
 80847c2:	f000 fa53 	bl	8084c6c <RTC_ByteToBcd2>
 80847c6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80847c8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80847cc:	68bb      	ldr	r3, [r7, #8]
 80847ce:	781b      	ldrb	r3, [r3, #0]
 80847d0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80847d2:	4313      	orrs	r3, r2
 80847d4:	617b      	str	r3, [r7, #20]
 80847d6:	e00e      	b.n	80847f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80847d8:	68bb      	ldr	r3, [r7, #8]
 80847da:	78db      	ldrb	r3, [r3, #3]
 80847dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80847de:	68bb      	ldr	r3, [r7, #8]
 80847e0:	785b      	ldrb	r3, [r3, #1]
 80847e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80847e4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80847e6:	68ba      	ldr	r2, [r7, #8]
 80847e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80847ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80847ec:	68bb      	ldr	r3, [r7, #8]
 80847ee:	781b      	ldrb	r3, [r3, #0]
 80847f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80847f2:	4313      	orrs	r3, r2
 80847f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80847f6:	68fb      	ldr	r3, [r7, #12]
 80847f8:	681b      	ldr	r3, [r3, #0]
 80847fa:	22ca      	movs	r2, #202	; 0xca
 80847fc:	625a      	str	r2, [r3, #36]	; 0x24
 80847fe:	68fb      	ldr	r3, [r7, #12]
 8084800:	681b      	ldr	r3, [r3, #0]
 8084802:	2253      	movs	r2, #83	; 0x53
 8084804:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8084806:	68f8      	ldr	r0, [r7, #12]
 8084808:	f000 f9d4 	bl	8084bb4 <RTC_EnterInitMode>
 808480c:	4603      	mov	r3, r0
 808480e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8084810:	7cfb      	ldrb	r3, [r7, #19]
 8084812:	2b00      	cmp	r3, #0
 8084814:	d10c      	bne.n	8084830 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8084816:	68fb      	ldr	r3, [r7, #12]
 8084818:	681a      	ldr	r2, [r3, #0]
 808481a:	697b      	ldr	r3, [r7, #20]
 808481c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8084820:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8084824:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8084826:	68f8      	ldr	r0, [r7, #12]
 8084828:	f000 f9fb 	bl	8084c22 <RTC_ExitInitMode>
 808482c:	4603      	mov	r3, r0
 808482e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8084830:	7cfb      	ldrb	r3, [r7, #19]
 8084832:	2b00      	cmp	r3, #0
 8084834:	d102      	bne.n	808483c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8084836:	68fb      	ldr	r3, [r7, #12]
 8084838:	2201      	movs	r2, #1
 808483a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 808483c:	68fb      	ldr	r3, [r7, #12]
 808483e:	681b      	ldr	r3, [r3, #0]
 8084840:	22ff      	movs	r2, #255	; 0xff
 8084842:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8084844:	68fb      	ldr	r3, [r7, #12]
 8084846:	2200      	movs	r2, #0
 8084848:	771a      	strb	r2, [r3, #28]

  return status;
 808484a:	7cfb      	ldrb	r3, [r7, #19]
}
 808484c:	4618      	mov	r0, r3
 808484e:	371c      	adds	r7, #28
 8084850:	46bd      	mov	sp, r7
 8084852:	bd90      	pop	{r4, r7, pc}

08084854 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8084854:	b590      	push	{r4, r7, lr}
 8084856:	b089      	sub	sp, #36	; 0x24
 8084858:	af00      	add	r7, sp, #0
 808485a:	60f8      	str	r0, [r7, #12]
 808485c:	60b9      	str	r1, [r7, #8]
 808485e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8084860:	4b9a      	ldr	r3, [pc, #616]	; (8084acc <HAL_RTC_SetAlarm_IT+0x278>)
 8084862:	681b      	ldr	r3, [r3, #0]
 8084864:	4a9a      	ldr	r2, [pc, #616]	; (8084ad0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8084866:	fba2 2303 	umull	r2, r3, r2, r3
 808486a:	0adb      	lsrs	r3, r3, #11
 808486c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084870:	fb02 f303 	mul.w	r3, r2, r3
 8084874:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8084876:	2300      	movs	r3, #0
 8084878:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 808487a:	2300      	movs	r3, #0
 808487c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 808487e:	68fb      	ldr	r3, [r7, #12]
 8084880:	7f1b      	ldrb	r3, [r3, #28]
 8084882:	2b01      	cmp	r3, #1
 8084884:	d101      	bne.n	808488a <HAL_RTC_SetAlarm_IT+0x36>
 8084886:	2302      	movs	r3, #2
 8084888:	e11c      	b.n	8084ac4 <HAL_RTC_SetAlarm_IT+0x270>
 808488a:	68fb      	ldr	r3, [r7, #12]
 808488c:	2201      	movs	r2, #1
 808488e:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8084890:	68fb      	ldr	r3, [r7, #12]
 8084892:	2202      	movs	r2, #2
 8084894:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8084896:	687b      	ldr	r3, [r7, #4]
 8084898:	2b00      	cmp	r3, #0
 808489a:	d137      	bne.n	808490c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 808489c:	68fb      	ldr	r3, [r7, #12]
 808489e:	681b      	ldr	r3, [r3, #0]
 80848a0:	689b      	ldr	r3, [r3, #8]
 80848a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80848a6:	2b00      	cmp	r3, #0
 80848a8:	d102      	bne.n	80848b0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80848aa:	68bb      	ldr	r3, [r7, #8]
 80848ac:	2200      	movs	r2, #0
 80848ae:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80848b0:	68bb      	ldr	r3, [r7, #8]
 80848b2:	781b      	ldrb	r3, [r3, #0]
 80848b4:	4618      	mov	r0, r3
 80848b6:	f000 f9d9 	bl	8084c6c <RTC_ByteToBcd2>
 80848ba:	4603      	mov	r3, r0
 80848bc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80848be:	68bb      	ldr	r3, [r7, #8]
 80848c0:	785b      	ldrb	r3, [r3, #1]
 80848c2:	4618      	mov	r0, r3
 80848c4:	f000 f9d2 	bl	8084c6c <RTC_ByteToBcd2>
 80848c8:	4603      	mov	r3, r0
 80848ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80848cc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80848ce:	68bb      	ldr	r3, [r7, #8]
 80848d0:	789b      	ldrb	r3, [r3, #2]
 80848d2:	4618      	mov	r0, r3
 80848d4:	f000 f9ca 	bl	8084c6c <RTC_ByteToBcd2>
 80848d8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80848da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80848de:	68bb      	ldr	r3, [r7, #8]
 80848e0:	78db      	ldrb	r3, [r3, #3]
 80848e2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80848e4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80848e8:	68bb      	ldr	r3, [r7, #8]
 80848ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80848ee:	4618      	mov	r0, r3
 80848f0:	f000 f9bc 	bl	8084c6c <RTC_ByteToBcd2>
 80848f4:	4603      	mov	r3, r0
 80848f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80848f8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80848fc:	68bb      	ldr	r3, [r7, #8]
 80848fe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8084900:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8084902:	68bb      	ldr	r3, [r7, #8]
 8084904:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8084906:	4313      	orrs	r3, r2
 8084908:	61fb      	str	r3, [r7, #28]
 808490a:	e023      	b.n	8084954 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 808490c:	68fb      	ldr	r3, [r7, #12]
 808490e:	681b      	ldr	r3, [r3, #0]
 8084910:	689b      	ldr	r3, [r3, #8]
 8084912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8084916:	2b00      	cmp	r3, #0
 8084918:	d102      	bne.n	8084920 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 808491a:	68bb      	ldr	r3, [r7, #8]
 808491c:	2200      	movs	r2, #0
 808491e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8084920:	68bb      	ldr	r3, [r7, #8]
 8084922:	781b      	ldrb	r3, [r3, #0]
 8084924:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8084926:	68bb      	ldr	r3, [r7, #8]
 8084928:	785b      	ldrb	r3, [r3, #1]
 808492a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 808492c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 808492e:	68ba      	ldr	r2, [r7, #8]
 8084930:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8084932:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8084934:	68bb      	ldr	r3, [r7, #8]
 8084936:	78db      	ldrb	r3, [r3, #3]
 8084938:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 808493a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 808493c:	68bb      	ldr	r3, [r7, #8]
 808493e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8084942:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8084944:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8084946:	68bb      	ldr	r3, [r7, #8]
 8084948:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 808494a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 808494c:	68bb      	ldr	r3, [r7, #8]
 808494e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8084950:	4313      	orrs	r3, r2
 8084952:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8084954:	68bb      	ldr	r3, [r7, #8]
 8084956:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8084958:	68bb      	ldr	r3, [r7, #8]
 808495a:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 808495c:	4313      	orrs	r3, r2
 808495e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8084960:	68fb      	ldr	r3, [r7, #12]
 8084962:	681b      	ldr	r3, [r3, #0]
 8084964:	22ca      	movs	r2, #202	; 0xca
 8084966:	625a      	str	r2, [r3, #36]	; 0x24
 8084968:	68fb      	ldr	r3, [r7, #12]
 808496a:	681b      	ldr	r3, [r3, #0]
 808496c:	2253      	movs	r2, #83	; 0x53
 808496e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8084970:	68bb      	ldr	r3, [r7, #8]
 8084972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8084974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8084978:	d141      	bne.n	80849fe <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 808497a:	68fb      	ldr	r3, [r7, #12]
 808497c:	681b      	ldr	r3, [r3, #0]
 808497e:	689a      	ldr	r2, [r3, #8]
 8084980:	68fb      	ldr	r3, [r7, #12]
 8084982:	681b      	ldr	r3, [r3, #0]
 8084984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8084988:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 808498a:	68fb      	ldr	r3, [r7, #12]
 808498c:	681b      	ldr	r3, [r3, #0]
 808498e:	68db      	ldr	r3, [r3, #12]
 8084990:	b2da      	uxtb	r2, r3
 8084992:	68fb      	ldr	r3, [r7, #12]
 8084994:	681b      	ldr	r3, [r3, #0]
 8084996:	f462 72c0 	orn	r2, r2, #384	; 0x180
 808499a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 808499c:	697b      	ldr	r3, [r7, #20]
 808499e:	1e5a      	subs	r2, r3, #1
 80849a0:	617a      	str	r2, [r7, #20]
 80849a2:	2b00      	cmp	r3, #0
 80849a4:	d10b      	bne.n	80849be <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80849a6:	68fb      	ldr	r3, [r7, #12]
 80849a8:	681b      	ldr	r3, [r3, #0]
 80849aa:	22ff      	movs	r2, #255	; 0xff
 80849ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80849ae:	68fb      	ldr	r3, [r7, #12]
 80849b0:	2203      	movs	r2, #3
 80849b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80849b4:	68fb      	ldr	r3, [r7, #12]
 80849b6:	2200      	movs	r2, #0
 80849b8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80849ba:	2303      	movs	r3, #3
 80849bc:	e082      	b.n	8084ac4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80849be:	68fb      	ldr	r3, [r7, #12]
 80849c0:	681b      	ldr	r3, [r3, #0]
 80849c2:	68db      	ldr	r3, [r3, #12]
 80849c4:	f003 0301 	and.w	r3, r3, #1
 80849c8:	2b00      	cmp	r3, #0
 80849ca:	d0e7      	beq.n	808499c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80849cc:	68fb      	ldr	r3, [r7, #12]
 80849ce:	681b      	ldr	r3, [r3, #0]
 80849d0:	69fa      	ldr	r2, [r7, #28]
 80849d2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80849d4:	68fb      	ldr	r3, [r7, #12]
 80849d6:	681b      	ldr	r3, [r3, #0]
 80849d8:	69ba      	ldr	r2, [r7, #24]
 80849da:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80849dc:	68fb      	ldr	r3, [r7, #12]
 80849de:	681b      	ldr	r3, [r3, #0]
 80849e0:	689a      	ldr	r2, [r3, #8]
 80849e2:	68fb      	ldr	r3, [r7, #12]
 80849e4:	681b      	ldr	r3, [r3, #0]
 80849e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80849ea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80849ec:	68fb      	ldr	r3, [r7, #12]
 80849ee:	681b      	ldr	r3, [r3, #0]
 80849f0:	689a      	ldr	r2, [r3, #8]
 80849f2:	68fb      	ldr	r3, [r7, #12]
 80849f4:	681b      	ldr	r3, [r3, #0]
 80849f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80849fa:	609a      	str	r2, [r3, #8]
 80849fc:	e04b      	b.n	8084a96 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80849fe:	68fb      	ldr	r3, [r7, #12]
 8084a00:	681b      	ldr	r3, [r3, #0]
 8084a02:	689a      	ldr	r2, [r3, #8]
 8084a04:	68fb      	ldr	r3, [r7, #12]
 8084a06:	681b      	ldr	r3, [r3, #0]
 8084a08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8084a0c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8084a0e:	68fb      	ldr	r3, [r7, #12]
 8084a10:	681b      	ldr	r3, [r3, #0]
 8084a12:	68db      	ldr	r3, [r3, #12]
 8084a14:	b2da      	uxtb	r2, r3
 8084a16:	68fb      	ldr	r3, [r7, #12]
 8084a18:	681b      	ldr	r3, [r3, #0]
 8084a1a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8084a1e:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8084a20:	4b2a      	ldr	r3, [pc, #168]	; (8084acc <HAL_RTC_SetAlarm_IT+0x278>)
 8084a22:	681b      	ldr	r3, [r3, #0]
 8084a24:	4a2a      	ldr	r2, [pc, #168]	; (8084ad0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8084a26:	fba2 2303 	umull	r2, r3, r2, r3
 8084a2a:	0adb      	lsrs	r3, r3, #11
 8084a2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8084a30:	fb02 f303 	mul.w	r3, r2, r3
 8084a34:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8084a36:	697b      	ldr	r3, [r7, #20]
 8084a38:	1e5a      	subs	r2, r3, #1
 8084a3a:	617a      	str	r2, [r7, #20]
 8084a3c:	2b00      	cmp	r3, #0
 8084a3e:	d10b      	bne.n	8084a58 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8084a40:	68fb      	ldr	r3, [r7, #12]
 8084a42:	681b      	ldr	r3, [r3, #0]
 8084a44:	22ff      	movs	r2, #255	; 0xff
 8084a46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8084a48:	68fb      	ldr	r3, [r7, #12]
 8084a4a:	2203      	movs	r2, #3
 8084a4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8084a4e:	68fb      	ldr	r3, [r7, #12]
 8084a50:	2200      	movs	r2, #0
 8084a52:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8084a54:	2303      	movs	r3, #3
 8084a56:	e035      	b.n	8084ac4 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8084a58:	68fb      	ldr	r3, [r7, #12]
 8084a5a:	681b      	ldr	r3, [r3, #0]
 8084a5c:	68db      	ldr	r3, [r3, #12]
 8084a5e:	f003 0302 	and.w	r3, r3, #2
 8084a62:	2b00      	cmp	r3, #0
 8084a64:	d0e7      	beq.n	8084a36 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8084a66:	68fb      	ldr	r3, [r7, #12]
 8084a68:	681b      	ldr	r3, [r3, #0]
 8084a6a:	69fa      	ldr	r2, [r7, #28]
 8084a6c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8084a6e:	68fb      	ldr	r3, [r7, #12]
 8084a70:	681b      	ldr	r3, [r3, #0]
 8084a72:	69ba      	ldr	r2, [r7, #24]
 8084a74:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8084a76:	68fb      	ldr	r3, [r7, #12]
 8084a78:	681b      	ldr	r3, [r3, #0]
 8084a7a:	689a      	ldr	r2, [r3, #8]
 8084a7c:	68fb      	ldr	r3, [r7, #12]
 8084a7e:	681b      	ldr	r3, [r3, #0]
 8084a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8084a84:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8084a86:	68fb      	ldr	r3, [r7, #12]
 8084a88:	681b      	ldr	r3, [r3, #0]
 8084a8a:	689a      	ldr	r2, [r3, #8]
 8084a8c:	68fb      	ldr	r3, [r7, #12]
 8084a8e:	681b      	ldr	r3, [r3, #0]
 8084a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8084a94:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8084a96:	4b0f      	ldr	r3, [pc, #60]	; (8084ad4 <HAL_RTC_SetAlarm_IT+0x280>)
 8084a98:	681b      	ldr	r3, [r3, #0]
 8084a9a:	4a0e      	ldr	r2, [pc, #56]	; (8084ad4 <HAL_RTC_SetAlarm_IT+0x280>)
 8084a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8084aa0:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8084aa2:	4b0c      	ldr	r3, [pc, #48]	; (8084ad4 <HAL_RTC_SetAlarm_IT+0x280>)
 8084aa4:	689b      	ldr	r3, [r3, #8]
 8084aa6:	4a0b      	ldr	r2, [pc, #44]	; (8084ad4 <HAL_RTC_SetAlarm_IT+0x280>)
 8084aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8084aac:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8084aae:	68fb      	ldr	r3, [r7, #12]
 8084ab0:	681b      	ldr	r3, [r3, #0]
 8084ab2:	22ff      	movs	r2, #255	; 0xff
 8084ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8084ab6:	68fb      	ldr	r3, [r7, #12]
 8084ab8:	2201      	movs	r2, #1
 8084aba:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8084abc:	68fb      	ldr	r3, [r7, #12]
 8084abe:	2200      	movs	r2, #0
 8084ac0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8084ac2:	2300      	movs	r3, #0
}
 8084ac4:	4618      	mov	r0, r3
 8084ac6:	3724      	adds	r7, #36	; 0x24
 8084ac8:	46bd      	mov	sp, r7
 8084aca:	bd90      	pop	{r4, r7, pc}
 8084acc:	20000084 	.word	0x20000084
 8084ad0:	10624dd3 	.word	0x10624dd3
 8084ad4:	40013c00 	.word	0x40013c00

08084ad8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8084ad8:	b580      	push	{r7, lr}
 8084ada:	b082      	sub	sp, #8
 8084adc:	af00      	add	r7, sp, #0
 8084ade:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8084ae0:	687b      	ldr	r3, [r7, #4]
 8084ae2:	681b      	ldr	r3, [r3, #0]
 8084ae4:	689b      	ldr	r3, [r3, #8]
 8084ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8084aea:	2b00      	cmp	r3, #0
 8084aec:	d012      	beq.n	8084b14 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8084aee:	687b      	ldr	r3, [r7, #4]
 8084af0:	681b      	ldr	r3, [r3, #0]
 8084af2:	68db      	ldr	r3, [r3, #12]
 8084af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8084af8:	2b00      	cmp	r3, #0
 8084afa:	d00b      	beq.n	8084b14 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8084afc:	6878      	ldr	r0, [r7, #4]
 8084afe:	f7fd f9e1 	bl	8081ec4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8084b02:	687b      	ldr	r3, [r7, #4]
 8084b04:	681b      	ldr	r3, [r3, #0]
 8084b06:	68db      	ldr	r3, [r3, #12]
 8084b08:	b2da      	uxtb	r2, r3
 8084b0a:	687b      	ldr	r3, [r7, #4]
 8084b0c:	681b      	ldr	r3, [r3, #0]
 8084b0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8084b12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8084b14:	687b      	ldr	r3, [r7, #4]
 8084b16:	681b      	ldr	r3, [r3, #0]
 8084b18:	689b      	ldr	r3, [r3, #8]
 8084b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8084b1e:	2b00      	cmp	r3, #0
 8084b20:	d012      	beq.n	8084b48 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8084b22:	687b      	ldr	r3, [r7, #4]
 8084b24:	681b      	ldr	r3, [r3, #0]
 8084b26:	68db      	ldr	r3, [r3, #12]
 8084b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8084b2c:	2b00      	cmp	r3, #0
 8084b2e:	d00b      	beq.n	8084b48 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8084b30:	6878      	ldr	r0, [r7, #4]
 8084b32:	f000 f8b8 	bl	8084ca6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8084b36:	687b      	ldr	r3, [r7, #4]
 8084b38:	681b      	ldr	r3, [r3, #0]
 8084b3a:	68db      	ldr	r3, [r3, #12]
 8084b3c:	b2da      	uxtb	r2, r3
 8084b3e:	687b      	ldr	r3, [r7, #4]
 8084b40:	681b      	ldr	r3, [r3, #0]
 8084b42:	f462 7220 	orn	r2, r2, #640	; 0x280
 8084b46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8084b48:	4b05      	ldr	r3, [pc, #20]	; (8084b60 <HAL_RTC_AlarmIRQHandler+0x88>)
 8084b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8084b4e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8084b50:	687b      	ldr	r3, [r7, #4]
 8084b52:	2201      	movs	r2, #1
 8084b54:	775a      	strb	r2, [r3, #29]
}
 8084b56:	bf00      	nop
 8084b58:	3708      	adds	r7, #8
 8084b5a:	46bd      	mov	sp, r7
 8084b5c:	bd80      	pop	{r7, pc}
 8084b5e:	bf00      	nop
 8084b60:	40013c00 	.word	0x40013c00

08084b64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8084b64:	b580      	push	{r7, lr}
 8084b66:	b084      	sub	sp, #16
 8084b68:	af00      	add	r7, sp, #0
 8084b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8084b6c:	2300      	movs	r3, #0
 8084b6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8084b70:	687b      	ldr	r3, [r7, #4]
 8084b72:	681b      	ldr	r3, [r3, #0]
 8084b74:	68da      	ldr	r2, [r3, #12]
 8084b76:	687b      	ldr	r3, [r7, #4]
 8084b78:	681b      	ldr	r3, [r3, #0]
 8084b7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8084b7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8084b80:	f7fd fe30 	bl	80827e4 <HAL_GetTick>
 8084b84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8084b86:	e009      	b.n	8084b9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8084b88:	f7fd fe2c 	bl	80827e4 <HAL_GetTick>
 8084b8c:	4602      	mov	r2, r0
 8084b8e:	68fb      	ldr	r3, [r7, #12]
 8084b90:	1ad3      	subs	r3, r2, r3
 8084b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8084b96:	d901      	bls.n	8084b9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8084b98:	2303      	movs	r3, #3
 8084b9a:	e007      	b.n	8084bac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8084b9c:	687b      	ldr	r3, [r7, #4]
 8084b9e:	681b      	ldr	r3, [r3, #0]
 8084ba0:	68db      	ldr	r3, [r3, #12]
 8084ba2:	f003 0320 	and.w	r3, r3, #32
 8084ba6:	2b00      	cmp	r3, #0
 8084ba8:	d0ee      	beq.n	8084b88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8084baa:	2300      	movs	r3, #0
}
 8084bac:	4618      	mov	r0, r3
 8084bae:	3710      	adds	r7, #16
 8084bb0:	46bd      	mov	sp, r7
 8084bb2:	bd80      	pop	{r7, pc}

08084bb4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8084bb4:	b580      	push	{r7, lr}
 8084bb6:	b084      	sub	sp, #16
 8084bb8:	af00      	add	r7, sp, #0
 8084bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8084bbc:	2300      	movs	r3, #0
 8084bbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8084bc0:	2300      	movs	r3, #0
 8084bc2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8084bc4:	687b      	ldr	r3, [r7, #4]
 8084bc6:	681b      	ldr	r3, [r3, #0]
 8084bc8:	68db      	ldr	r3, [r3, #12]
 8084bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8084bce:	2b00      	cmp	r3, #0
 8084bd0:	d122      	bne.n	8084c18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8084bd2:	687b      	ldr	r3, [r7, #4]
 8084bd4:	681b      	ldr	r3, [r3, #0]
 8084bd6:	68da      	ldr	r2, [r3, #12]
 8084bd8:	687b      	ldr	r3, [r7, #4]
 8084bda:	681b      	ldr	r3, [r3, #0]
 8084bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8084be0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8084be2:	f7fd fdff 	bl	80827e4 <HAL_GetTick>
 8084be6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8084be8:	e00c      	b.n	8084c04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8084bea:	f7fd fdfb 	bl	80827e4 <HAL_GetTick>
 8084bee:	4602      	mov	r2, r0
 8084bf0:	68bb      	ldr	r3, [r7, #8]
 8084bf2:	1ad3      	subs	r3, r2, r3
 8084bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8084bf8:	d904      	bls.n	8084c04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8084bfa:	687b      	ldr	r3, [r7, #4]
 8084bfc:	2204      	movs	r2, #4
 8084bfe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8084c00:	2301      	movs	r3, #1
 8084c02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8084c04:	687b      	ldr	r3, [r7, #4]
 8084c06:	681b      	ldr	r3, [r3, #0]
 8084c08:	68db      	ldr	r3, [r3, #12]
 8084c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8084c0e:	2b00      	cmp	r3, #0
 8084c10:	d102      	bne.n	8084c18 <RTC_EnterInitMode+0x64>
 8084c12:	7bfb      	ldrb	r3, [r7, #15]
 8084c14:	2b01      	cmp	r3, #1
 8084c16:	d1e8      	bne.n	8084bea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8084c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8084c1a:	4618      	mov	r0, r3
 8084c1c:	3710      	adds	r7, #16
 8084c1e:	46bd      	mov	sp, r7
 8084c20:	bd80      	pop	{r7, pc}

08084c22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8084c22:	b580      	push	{r7, lr}
 8084c24:	b084      	sub	sp, #16
 8084c26:	af00      	add	r7, sp, #0
 8084c28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8084c2a:	2300      	movs	r3, #0
 8084c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8084c2e:	687b      	ldr	r3, [r7, #4]
 8084c30:	681b      	ldr	r3, [r3, #0]
 8084c32:	68da      	ldr	r2, [r3, #12]
 8084c34:	687b      	ldr	r3, [r7, #4]
 8084c36:	681b      	ldr	r3, [r3, #0]
 8084c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8084c3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8084c3e:	687b      	ldr	r3, [r7, #4]
 8084c40:	681b      	ldr	r3, [r3, #0]
 8084c42:	689b      	ldr	r3, [r3, #8]
 8084c44:	f003 0320 	and.w	r3, r3, #32
 8084c48:	2b00      	cmp	r3, #0
 8084c4a:	d10a      	bne.n	8084c62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8084c4c:	6878      	ldr	r0, [r7, #4]
 8084c4e:	f7ff ff89 	bl	8084b64 <HAL_RTC_WaitForSynchro>
 8084c52:	4603      	mov	r3, r0
 8084c54:	2b00      	cmp	r3, #0
 8084c56:	d004      	beq.n	8084c62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8084c58:	687b      	ldr	r3, [r7, #4]
 8084c5a:	2204      	movs	r2, #4
 8084c5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8084c5e:	2301      	movs	r3, #1
 8084c60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8084c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8084c64:	4618      	mov	r0, r3
 8084c66:	3710      	adds	r7, #16
 8084c68:	46bd      	mov	sp, r7
 8084c6a:	bd80      	pop	{r7, pc}

08084c6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8084c6c:	b480      	push	{r7}
 8084c6e:	b085      	sub	sp, #20
 8084c70:	af00      	add	r7, sp, #0
 8084c72:	4603      	mov	r3, r0
 8084c74:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8084c76:	2300      	movs	r3, #0
 8084c78:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8084c7a:	e005      	b.n	8084c88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8084c7c:	7bfb      	ldrb	r3, [r7, #15]
 8084c7e:	3301      	adds	r3, #1
 8084c80:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8084c82:	79fb      	ldrb	r3, [r7, #7]
 8084c84:	3b0a      	subs	r3, #10
 8084c86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8084c88:	79fb      	ldrb	r3, [r7, #7]
 8084c8a:	2b09      	cmp	r3, #9
 8084c8c:	d8f6      	bhi.n	8084c7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8084c8e:	7bfb      	ldrb	r3, [r7, #15]
 8084c90:	011b      	lsls	r3, r3, #4
 8084c92:	b2da      	uxtb	r2, r3
 8084c94:	79fb      	ldrb	r3, [r7, #7]
 8084c96:	4313      	orrs	r3, r2
 8084c98:	b2db      	uxtb	r3, r3
}
 8084c9a:	4618      	mov	r0, r3
 8084c9c:	3714      	adds	r7, #20
 8084c9e:	46bd      	mov	sp, r7
 8084ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084ca4:	4770      	bx	lr

08084ca6 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8084ca6:	b480      	push	{r7}
 8084ca8:	b083      	sub	sp, #12
 8084caa:	af00      	add	r7, sp, #0
 8084cac:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8084cae:	bf00      	nop
 8084cb0:	370c      	adds	r7, #12
 8084cb2:	46bd      	mov	sp, r7
 8084cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8084cb8:	4770      	bx	lr

08084cba <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8084cba:	b580      	push	{r7, lr}
 8084cbc:	b082      	sub	sp, #8
 8084cbe:	af00      	add	r7, sp, #0
 8084cc0:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8084cc2:	687b      	ldr	r3, [r7, #4]
 8084cc4:	2b00      	cmp	r3, #0
 8084cc6:	d101      	bne.n	8084ccc <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8084cc8:	2301      	movs	r3, #1
 8084cca:	e022      	b.n	8084d12 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8084ccc:	687b      	ldr	r3, [r7, #4]
 8084cce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8084cd2:	b2db      	uxtb	r3, r3
 8084cd4:	2b00      	cmp	r3, #0
 8084cd6:	d105      	bne.n	8084ce4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8084cd8:	687b      	ldr	r3, [r7, #4]
 8084cda:	2200      	movs	r2, #0
 8084cdc:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8084cde:	6878      	ldr	r0, [r7, #4]
 8084ce0:	f7fd f97a 	bl	8081fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8084ce4:	687b      	ldr	r3, [r7, #4]
 8084ce6:	2203      	movs	r2, #3
 8084ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8084cec:	6878      	ldr	r0, [r7, #4]
 8084cee:	f000 f815 	bl	8084d1c <HAL_SD_InitCard>
 8084cf2:	4603      	mov	r3, r0
 8084cf4:	2b00      	cmp	r3, #0
 8084cf6:	d001      	beq.n	8084cfc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8084cf8:	2301      	movs	r3, #1
 8084cfa:	e00a      	b.n	8084d12 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8084cfc:	687b      	ldr	r3, [r7, #4]
 8084cfe:	2200      	movs	r2, #0
 8084d00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8084d02:	687b      	ldr	r3, [r7, #4]
 8084d04:	2200      	movs	r2, #0
 8084d06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8084d08:	687b      	ldr	r3, [r7, #4]
 8084d0a:	2201      	movs	r2, #1
 8084d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8084d10:	2300      	movs	r3, #0
}
 8084d12:	4618      	mov	r0, r3
 8084d14:	3708      	adds	r7, #8
 8084d16:	46bd      	mov	sp, r7
 8084d18:	bd80      	pop	{r7, pc}
	...

08084d1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8084d1c:	b5b0      	push	{r4, r5, r7, lr}
 8084d1e:	b08e      	sub	sp, #56	; 0x38
 8084d20:	af04      	add	r7, sp, #16
 8084d22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8084d24:	2300      	movs	r3, #0
 8084d26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8084d28:	2300      	movs	r3, #0
 8084d2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8084d2c:	2300      	movs	r3, #0
 8084d2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8084d30:	2300      	movs	r3, #0
 8084d32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8084d34:	2300      	movs	r3, #0
 8084d36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8084d38:	2376      	movs	r3, #118	; 0x76
 8084d3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8084d3c:	687b      	ldr	r3, [r7, #4]
 8084d3e:	681d      	ldr	r5, [r3, #0]
 8084d40:	466c      	mov	r4, sp
 8084d42:	f107 0314 	add.w	r3, r7, #20
 8084d46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8084d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8084d4e:	f107 0308 	add.w	r3, r7, #8
 8084d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8084d54:	4628      	mov	r0, r5
 8084d56:	f002 fd17 	bl	8087788 <SDIO_Init>
 8084d5a:	4603      	mov	r3, r0
 8084d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8084d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8084d64:	2b00      	cmp	r3, #0
 8084d66:	d001      	beq.n	8084d6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8084d68:	2301      	movs	r3, #1
 8084d6a:	e04f      	b.n	8084e0c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8084d6c:	4b29      	ldr	r3, [pc, #164]	; (8084e14 <HAL_SD_InitCard+0xf8>)
 8084d6e:	2200      	movs	r2, #0
 8084d70:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8084d72:	687b      	ldr	r3, [r7, #4]
 8084d74:	681b      	ldr	r3, [r3, #0]
 8084d76:	4618      	mov	r0, r3
 8084d78:	f002 fd4f 	bl	808781a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8084d7c:	4b25      	ldr	r3, [pc, #148]	; (8084e14 <HAL_SD_InitCard+0xf8>)
 8084d7e:	2201      	movs	r2, #1
 8084d80:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8084d82:	2002      	movs	r0, #2
 8084d84:	f7fd fd3a 	bl	80827fc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8084d88:	6878      	ldr	r0, [r7, #4]
 8084d8a:	f001 f867 	bl	8085e5c <SD_PowerON>
 8084d8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8084d90:	6a3b      	ldr	r3, [r7, #32]
 8084d92:	2b00      	cmp	r3, #0
 8084d94:	d00b      	beq.n	8084dae <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8084d96:	687b      	ldr	r3, [r7, #4]
 8084d98:	2201      	movs	r2, #1
 8084d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8084d9e:	687b      	ldr	r3, [r7, #4]
 8084da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084da2:	6a3b      	ldr	r3, [r7, #32]
 8084da4:	431a      	orrs	r2, r3
 8084da6:	687b      	ldr	r3, [r7, #4]
 8084da8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084daa:	2301      	movs	r3, #1
 8084dac:	e02e      	b.n	8084e0c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8084dae:	6878      	ldr	r0, [r7, #4]
 8084db0:	f000 ff86 	bl	8085cc0 <SD_InitCard>
 8084db4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8084db6:	6a3b      	ldr	r3, [r7, #32]
 8084db8:	2b00      	cmp	r3, #0
 8084dba:	d00b      	beq.n	8084dd4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8084dbc:	687b      	ldr	r3, [r7, #4]
 8084dbe:	2201      	movs	r2, #1
 8084dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8084dc4:	687b      	ldr	r3, [r7, #4]
 8084dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084dc8:	6a3b      	ldr	r3, [r7, #32]
 8084dca:	431a      	orrs	r2, r3
 8084dcc:	687b      	ldr	r3, [r7, #4]
 8084dce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084dd0:	2301      	movs	r3, #1
 8084dd2:	e01b      	b.n	8084e0c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8084dd4:	687b      	ldr	r3, [r7, #4]
 8084dd6:	681b      	ldr	r3, [r3, #0]
 8084dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8084ddc:	4618      	mov	r0, r3
 8084dde:	f002 fdae 	bl	808793e <SDMMC_CmdBlockLength>
 8084de2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8084de4:	6a3b      	ldr	r3, [r7, #32]
 8084de6:	2b00      	cmp	r3, #0
 8084de8:	d00f      	beq.n	8084e0a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084dea:	687b      	ldr	r3, [r7, #4]
 8084dec:	681b      	ldr	r3, [r3, #0]
 8084dee:	4a0a      	ldr	r2, [pc, #40]	; (8084e18 <HAL_SD_InitCard+0xfc>)
 8084df0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8084df2:	687b      	ldr	r3, [r7, #4]
 8084df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084df6:	6a3b      	ldr	r3, [r7, #32]
 8084df8:	431a      	orrs	r2, r3
 8084dfa:	687b      	ldr	r3, [r7, #4]
 8084dfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8084dfe:	687b      	ldr	r3, [r7, #4]
 8084e00:	2201      	movs	r2, #1
 8084e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8084e06:	2301      	movs	r3, #1
 8084e08:	e000      	b.n	8084e0c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8084e0a:	2300      	movs	r3, #0
}
 8084e0c:	4618      	mov	r0, r3
 8084e0e:	3728      	adds	r7, #40	; 0x28
 8084e10:	46bd      	mov	sp, r7
 8084e12:	bdb0      	pop	{r4, r5, r7, pc}
 8084e14:	422580a0 	.word	0x422580a0
 8084e18:	004005ff 	.word	0x004005ff

08084e1c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8084e1c:	b580      	push	{r7, lr}
 8084e1e:	b092      	sub	sp, #72	; 0x48
 8084e20:	af00      	add	r7, sp, #0
 8084e22:	60f8      	str	r0, [r7, #12]
 8084e24:	60b9      	str	r1, [r7, #8]
 8084e26:	607a      	str	r2, [r7, #4]
 8084e28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8084e2a:	f7fd fcdb 	bl	80827e4 <HAL_GetTick>
 8084e2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8084e30:	687b      	ldr	r3, [r7, #4]
 8084e32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8084e34:	68bb      	ldr	r3, [r7, #8]
 8084e36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8084e38:	68bb      	ldr	r3, [r7, #8]
 8084e3a:	2b00      	cmp	r3, #0
 8084e3c:	d107      	bne.n	8084e4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8084e3e:	68fb      	ldr	r3, [r7, #12]
 8084e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084e42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8084e46:	68fb      	ldr	r3, [r7, #12]
 8084e48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8084e4a:	2301      	movs	r3, #1
 8084e4c:	e1bd      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8084e4e:	68fb      	ldr	r3, [r7, #12]
 8084e50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8084e54:	b2db      	uxtb	r3, r3
 8084e56:	2b01      	cmp	r3, #1
 8084e58:	f040 81b0 	bne.w	80851bc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8084e5c:	68fb      	ldr	r3, [r7, #12]
 8084e5e:	2200      	movs	r2, #0
 8084e60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8084e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084e64:	683b      	ldr	r3, [r7, #0]
 8084e66:	441a      	add	r2, r3
 8084e68:	68fb      	ldr	r3, [r7, #12]
 8084e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8084e6c:	429a      	cmp	r2, r3
 8084e6e:	d907      	bls.n	8084e80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8084e70:	68fb      	ldr	r3, [r7, #12]
 8084e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084e74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8084e78:	68fb      	ldr	r3, [r7, #12]
 8084e7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8084e7c:	2301      	movs	r3, #1
 8084e7e:	e1a4      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8084e80:	68fb      	ldr	r3, [r7, #12]
 8084e82:	2203      	movs	r2, #3
 8084e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8084e88:	68fb      	ldr	r3, [r7, #12]
 8084e8a:	681b      	ldr	r3, [r3, #0]
 8084e8c:	2200      	movs	r2, #0
 8084e8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8084e90:	68fb      	ldr	r3, [r7, #12]
 8084e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8084e94:	2b01      	cmp	r3, #1
 8084e96:	d002      	beq.n	8084e9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8084e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8084e9a:	025b      	lsls	r3, r3, #9
 8084e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8084e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8084ea2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8084ea4:	683b      	ldr	r3, [r7, #0]
 8084ea6:	025b      	lsls	r3, r3, #9
 8084ea8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8084eaa:	2390      	movs	r3, #144	; 0x90
 8084eac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8084eae:	2302      	movs	r3, #2
 8084eb0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8084eb2:	2300      	movs	r3, #0
 8084eb4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8084eb6:	2301      	movs	r3, #1
 8084eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8084eba:	68fb      	ldr	r3, [r7, #12]
 8084ebc:	681b      	ldr	r3, [r3, #0]
 8084ebe:	f107 0214 	add.w	r2, r7, #20
 8084ec2:	4611      	mov	r1, r2
 8084ec4:	4618      	mov	r0, r3
 8084ec6:	f002 fd0e 	bl	80878e6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8084eca:	683b      	ldr	r3, [r7, #0]
 8084ecc:	2b01      	cmp	r3, #1
 8084ece:	d90a      	bls.n	8084ee6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8084ed0:	68fb      	ldr	r3, [r7, #12]
 8084ed2:	2202      	movs	r2, #2
 8084ed4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8084ed6:	68fb      	ldr	r3, [r7, #12]
 8084ed8:	681b      	ldr	r3, [r3, #0]
 8084eda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084edc:	4618      	mov	r0, r3
 8084ede:	f002 fd72 	bl	80879c6 <SDMMC_CmdReadMultiBlock>
 8084ee2:	6478      	str	r0, [r7, #68]	; 0x44
 8084ee4:	e009      	b.n	8084efa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8084ee6:	68fb      	ldr	r3, [r7, #12]
 8084ee8:	2201      	movs	r2, #1
 8084eea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8084eec:	68fb      	ldr	r3, [r7, #12]
 8084eee:	681b      	ldr	r3, [r3, #0]
 8084ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8084ef2:	4618      	mov	r0, r3
 8084ef4:	f002 fd45 	bl	8087982 <SDMMC_CmdReadSingleBlock>
 8084ef8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8084efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084efc:	2b00      	cmp	r3, #0
 8084efe:	d012      	beq.n	8084f26 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084f00:	68fb      	ldr	r3, [r7, #12]
 8084f02:	681b      	ldr	r3, [r3, #0]
 8084f04:	4a7a      	ldr	r2, [pc, #488]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 8084f06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8084f08:	68fb      	ldr	r3, [r7, #12]
 8084f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8084f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8084f0e:	431a      	orrs	r2, r3
 8084f10:	68fb      	ldr	r3, [r7, #12]
 8084f12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8084f14:	68fb      	ldr	r3, [r7, #12]
 8084f16:	2201      	movs	r2, #1
 8084f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8084f1c:	68fb      	ldr	r3, [r7, #12]
 8084f1e:	2200      	movs	r2, #0
 8084f20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8084f22:	2301      	movs	r3, #1
 8084f24:	e151      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8084f26:	69bb      	ldr	r3, [r7, #24]
 8084f28:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8084f2a:	e061      	b.n	8084ff0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8084f2c:	68fb      	ldr	r3, [r7, #12]
 8084f2e:	681b      	ldr	r3, [r3, #0]
 8084f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8084f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8084f36:	2b00      	cmp	r3, #0
 8084f38:	d03c      	beq.n	8084fb4 <HAL_SD_ReadBlocks+0x198>
 8084f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084f3c:	2b00      	cmp	r3, #0
 8084f3e:	d039      	beq.n	8084fb4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8084f40:	2300      	movs	r3, #0
 8084f42:	643b      	str	r3, [r7, #64]	; 0x40
 8084f44:	e033      	b.n	8084fae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8084f46:	68fb      	ldr	r3, [r7, #12]
 8084f48:	681b      	ldr	r3, [r3, #0]
 8084f4a:	4618      	mov	r0, r3
 8084f4c:	f002 fc47 	bl	80877de <SDIO_ReadFIFO>
 8084f50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8084f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084f54:	b2da      	uxtb	r2, r3
 8084f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f5c:	3301      	adds	r3, #1
 8084f5e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084f62:	3b01      	subs	r3, #1
 8084f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8084f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084f68:	0a1b      	lsrs	r3, r3, #8
 8084f6a:	b2da      	uxtb	r2, r3
 8084f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f6e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f72:	3301      	adds	r3, #1
 8084f74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084f78:	3b01      	subs	r3, #1
 8084f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8084f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084f7e:	0c1b      	lsrs	r3, r3, #16
 8084f80:	b2da      	uxtb	r2, r3
 8084f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f88:	3301      	adds	r3, #1
 8084f8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084f8e:	3b01      	subs	r3, #1
 8084f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8084f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8084f94:	0e1b      	lsrs	r3, r3, #24
 8084f96:	b2da      	uxtb	r2, r3
 8084f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8084f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8084f9e:	3301      	adds	r3, #1
 8084fa0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8084fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8084fa4:	3b01      	subs	r3, #1
 8084fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8084fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8084faa:	3301      	adds	r3, #1
 8084fac:	643b      	str	r3, [r7, #64]	; 0x40
 8084fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8084fb0:	2b07      	cmp	r3, #7
 8084fb2:	d9c8      	bls.n	8084f46 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8084fb4:	f7fd fc16 	bl	80827e4 <HAL_GetTick>
 8084fb8:	4602      	mov	r2, r0
 8084fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8084fbc:	1ad3      	subs	r3, r2, r3
 8084fbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8084fc0:	429a      	cmp	r2, r3
 8084fc2:	d902      	bls.n	8084fca <HAL_SD_ReadBlocks+0x1ae>
 8084fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8084fc6:	2b00      	cmp	r3, #0
 8084fc8:	d112      	bne.n	8084ff0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8084fca:	68fb      	ldr	r3, [r7, #12]
 8084fcc:	681b      	ldr	r3, [r3, #0]
 8084fce:	4a48      	ldr	r2, [pc, #288]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 8084fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8084fd2:	68fb      	ldr	r3, [r7, #12]
 8084fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8084fd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8084fda:	68fb      	ldr	r3, [r7, #12]
 8084fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8084fde:	68fb      	ldr	r3, [r7, #12]
 8084fe0:	2201      	movs	r2, #1
 8084fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8084fe6:	68fb      	ldr	r3, [r7, #12]
 8084fe8:	2200      	movs	r2, #0
 8084fea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8084fec:	2303      	movs	r3, #3
 8084fee:	e0ec      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8084ff0:	68fb      	ldr	r3, [r7, #12]
 8084ff2:	681b      	ldr	r3, [r3, #0]
 8084ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8084ff6:	f240 332a 	movw	r3, #810	; 0x32a
 8084ffa:	4013      	ands	r3, r2
 8084ffc:	2b00      	cmp	r3, #0
 8084ffe:	d095      	beq.n	8084f2c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8085000:	68fb      	ldr	r3, [r7, #12]
 8085002:	681b      	ldr	r3, [r3, #0]
 8085004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808500a:	2b00      	cmp	r3, #0
 808500c:	d022      	beq.n	8085054 <HAL_SD_ReadBlocks+0x238>
 808500e:	683b      	ldr	r3, [r7, #0]
 8085010:	2b01      	cmp	r3, #1
 8085012:	d91f      	bls.n	8085054 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8085014:	68fb      	ldr	r3, [r7, #12]
 8085016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085018:	2b03      	cmp	r3, #3
 808501a:	d01b      	beq.n	8085054 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 808501c:	68fb      	ldr	r3, [r7, #12]
 808501e:	681b      	ldr	r3, [r3, #0]
 8085020:	4618      	mov	r0, r3
 8085022:	f002 fd37 	bl	8087a94 <SDMMC_CmdStopTransfer>
 8085026:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8085028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 808502a:	2b00      	cmp	r3, #0
 808502c:	d012      	beq.n	8085054 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808502e:	68fb      	ldr	r3, [r7, #12]
 8085030:	681b      	ldr	r3, [r3, #0]
 8085032:	4a2f      	ldr	r2, [pc, #188]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 8085034:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8085036:	68fb      	ldr	r3, [r7, #12]
 8085038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808503a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 808503c:	431a      	orrs	r2, r3
 808503e:	68fb      	ldr	r3, [r7, #12]
 8085040:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8085042:	68fb      	ldr	r3, [r7, #12]
 8085044:	2201      	movs	r2, #1
 8085046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 808504a:	68fb      	ldr	r3, [r7, #12]
 808504c:	2200      	movs	r2, #0
 808504e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8085050:	2301      	movs	r3, #1
 8085052:	e0ba      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8085054:	68fb      	ldr	r3, [r7, #12]
 8085056:	681b      	ldr	r3, [r3, #0]
 8085058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808505a:	f003 0308 	and.w	r3, r3, #8
 808505e:	2b00      	cmp	r3, #0
 8085060:	d012      	beq.n	8085088 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8085062:	68fb      	ldr	r3, [r7, #12]
 8085064:	681b      	ldr	r3, [r3, #0]
 8085066:	4a22      	ldr	r2, [pc, #136]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 8085068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 808506a:	68fb      	ldr	r3, [r7, #12]
 808506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808506e:	f043 0208 	orr.w	r2, r3, #8
 8085072:	68fb      	ldr	r3, [r7, #12]
 8085074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8085076:	68fb      	ldr	r3, [r7, #12]
 8085078:	2201      	movs	r2, #1
 808507a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 808507e:	68fb      	ldr	r3, [r7, #12]
 8085080:	2200      	movs	r2, #0
 8085082:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8085084:	2301      	movs	r3, #1
 8085086:	e0a0      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8085088:	68fb      	ldr	r3, [r7, #12]
 808508a:	681b      	ldr	r3, [r3, #0]
 808508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808508e:	f003 0302 	and.w	r3, r3, #2
 8085092:	2b00      	cmp	r3, #0
 8085094:	d012      	beq.n	80850bc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8085096:	68fb      	ldr	r3, [r7, #12]
 8085098:	681b      	ldr	r3, [r3, #0]
 808509a:	4a15      	ldr	r2, [pc, #84]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 808509c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 808509e:	68fb      	ldr	r3, [r7, #12]
 80850a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80850a2:	f043 0202 	orr.w	r2, r3, #2
 80850a6:	68fb      	ldr	r3, [r7, #12]
 80850a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80850aa:	68fb      	ldr	r3, [r7, #12]
 80850ac:	2201      	movs	r2, #1
 80850ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80850b2:	68fb      	ldr	r3, [r7, #12]
 80850b4:	2200      	movs	r2, #0
 80850b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80850b8:	2301      	movs	r3, #1
 80850ba:	e086      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80850bc:	68fb      	ldr	r3, [r7, #12]
 80850be:	681b      	ldr	r3, [r3, #0]
 80850c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80850c2:	f003 0320 	and.w	r3, r3, #32
 80850c6:	2b00      	cmp	r3, #0
 80850c8:	d063      	beq.n	8085192 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80850ca:	68fb      	ldr	r3, [r7, #12]
 80850cc:	681b      	ldr	r3, [r3, #0]
 80850ce:	4a08      	ldr	r2, [pc, #32]	; (80850f0 <HAL_SD_ReadBlocks+0x2d4>)
 80850d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80850d2:	68fb      	ldr	r3, [r7, #12]
 80850d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80850d6:	f043 0220 	orr.w	r2, r3, #32
 80850da:	68fb      	ldr	r3, [r7, #12]
 80850dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80850de:	68fb      	ldr	r3, [r7, #12]
 80850e0:	2201      	movs	r2, #1
 80850e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80850e6:	68fb      	ldr	r3, [r7, #12]
 80850e8:	2200      	movs	r2, #0
 80850ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80850ec:	2301      	movs	r3, #1
 80850ee:	e06c      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
 80850f0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80850f4:	68fb      	ldr	r3, [r7, #12]
 80850f6:	681b      	ldr	r3, [r3, #0]
 80850f8:	4618      	mov	r0, r3
 80850fa:	f002 fb70 	bl	80877de <SDIO_ReadFIFO>
 80850fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8085100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085102:	b2da      	uxtb	r2, r3
 8085104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085106:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8085108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808510a:	3301      	adds	r3, #1
 808510c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 808510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085110:	3b01      	subs	r3, #1
 8085112:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8085114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085116:	0a1b      	lsrs	r3, r3, #8
 8085118:	b2da      	uxtb	r2, r3
 808511a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808511c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 808511e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085120:	3301      	adds	r3, #1
 8085122:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8085124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085126:	3b01      	subs	r3, #1
 8085128:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 808512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808512c:	0c1b      	lsrs	r3, r3, #16
 808512e:	b2da      	uxtb	r2, r3
 8085130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085132:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8085134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085136:	3301      	adds	r3, #1
 8085138:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 808513a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808513c:	3b01      	subs	r3, #1
 808513e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8085140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8085142:	0e1b      	lsrs	r3, r3, #24
 8085144:	b2da      	uxtb	r2, r3
 8085146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085148:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 808514a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808514c:	3301      	adds	r3, #1
 808514e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8085150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085152:	3b01      	subs	r3, #1
 8085154:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8085156:	f7fd fb45 	bl	80827e4 <HAL_GetTick>
 808515a:	4602      	mov	r2, r0
 808515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808515e:	1ad3      	subs	r3, r2, r3
 8085160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8085162:	429a      	cmp	r2, r3
 8085164:	d902      	bls.n	808516c <HAL_SD_ReadBlocks+0x350>
 8085166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8085168:	2b00      	cmp	r3, #0
 808516a:	d112      	bne.n	8085192 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808516c:	68fb      	ldr	r3, [r7, #12]
 808516e:	681b      	ldr	r3, [r3, #0]
 8085170:	4a18      	ldr	r2, [pc, #96]	; (80851d4 <HAL_SD_ReadBlocks+0x3b8>)
 8085172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8085174:	68fb      	ldr	r3, [r7, #12]
 8085176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 808517c:	68fb      	ldr	r3, [r7, #12]
 808517e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8085180:	68fb      	ldr	r3, [r7, #12]
 8085182:	2201      	movs	r2, #1
 8085184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8085188:	68fb      	ldr	r3, [r7, #12]
 808518a:	2200      	movs	r2, #0
 808518c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 808518e:	2301      	movs	r3, #1
 8085190:	e01b      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8085192:	68fb      	ldr	r3, [r7, #12]
 8085194:	681b      	ldr	r3, [r3, #0]
 8085196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 808519c:	2b00      	cmp	r3, #0
 808519e:	d002      	beq.n	80851a6 <HAL_SD_ReadBlocks+0x38a>
 80851a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80851a2:	2b00      	cmp	r3, #0
 80851a4:	d1a6      	bne.n	80850f4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80851a6:	68fb      	ldr	r3, [r7, #12]
 80851a8:	681b      	ldr	r3, [r3, #0]
 80851aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80851ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80851b0:	68fb      	ldr	r3, [r7, #12]
 80851b2:	2201      	movs	r2, #1
 80851b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80851b8:	2300      	movs	r3, #0
 80851ba:	e006      	b.n	80851ca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80851bc:	68fb      	ldr	r3, [r7, #12]
 80851be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80851c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80851c4:	68fb      	ldr	r3, [r7, #12]
 80851c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80851c8:	2301      	movs	r3, #1
  }
}
 80851ca:	4618      	mov	r0, r3
 80851cc:	3748      	adds	r7, #72	; 0x48
 80851ce:	46bd      	mov	sp, r7
 80851d0:	bd80      	pop	{r7, pc}
 80851d2:	bf00      	nop
 80851d4:	004005ff 	.word	0x004005ff

080851d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80851d8:	b580      	push	{r7, lr}
 80851da:	b092      	sub	sp, #72	; 0x48
 80851dc:	af00      	add	r7, sp, #0
 80851de:	60f8      	str	r0, [r7, #12]
 80851e0:	60b9      	str	r1, [r7, #8]
 80851e2:	607a      	str	r2, [r7, #4]
 80851e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80851e6:	f7fd fafd 	bl	80827e4 <HAL_GetTick>
 80851ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80851ec:	687b      	ldr	r3, [r7, #4]
 80851ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80851f0:	68bb      	ldr	r3, [r7, #8]
 80851f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80851f4:	68bb      	ldr	r3, [r7, #8]
 80851f6:	2b00      	cmp	r3, #0
 80851f8:	d107      	bne.n	808520a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80851fa:	68fb      	ldr	r3, [r7, #12]
 80851fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80851fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8085202:	68fb      	ldr	r3, [r7, #12]
 8085204:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8085206:	2301      	movs	r3, #1
 8085208:	e166      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 808520a:	68fb      	ldr	r3, [r7, #12]
 808520c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8085210:	b2db      	uxtb	r3, r3
 8085212:	2b01      	cmp	r3, #1
 8085214:	f040 8159 	bne.w	80854ca <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8085218:	68fb      	ldr	r3, [r7, #12]
 808521a:	2200      	movs	r2, #0
 808521c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 808521e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8085220:	683b      	ldr	r3, [r7, #0]
 8085222:	441a      	add	r2, r3
 8085224:	68fb      	ldr	r3, [r7, #12]
 8085226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8085228:	429a      	cmp	r2, r3
 808522a:	d907      	bls.n	808523c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 808522c:	68fb      	ldr	r3, [r7, #12]
 808522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085230:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8085234:	68fb      	ldr	r3, [r7, #12]
 8085236:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8085238:	2301      	movs	r3, #1
 808523a:	e14d      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 808523c:	68fb      	ldr	r3, [r7, #12]
 808523e:	2203      	movs	r2, #3
 8085240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8085244:	68fb      	ldr	r3, [r7, #12]
 8085246:	681b      	ldr	r3, [r3, #0]
 8085248:	2200      	movs	r2, #0
 808524a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 808524c:	68fb      	ldr	r3, [r7, #12]
 808524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085250:	2b01      	cmp	r3, #1
 8085252:	d002      	beq.n	808525a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8085254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8085256:	025b      	lsls	r3, r3, #9
 8085258:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 808525a:	f04f 33ff 	mov.w	r3, #4294967295
 808525e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8085260:	683b      	ldr	r3, [r7, #0]
 8085262:	025b      	lsls	r3, r3, #9
 8085264:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8085266:	2390      	movs	r3, #144	; 0x90
 8085268:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 808526a:	2300      	movs	r3, #0
 808526c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 808526e:	2300      	movs	r3, #0
 8085270:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8085272:	2301      	movs	r3, #1
 8085274:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8085276:	68fb      	ldr	r3, [r7, #12]
 8085278:	681b      	ldr	r3, [r3, #0]
 808527a:	f107 0218 	add.w	r2, r7, #24
 808527e:	4611      	mov	r1, r2
 8085280:	4618      	mov	r0, r3
 8085282:	f002 fb30 	bl	80878e6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8085286:	683b      	ldr	r3, [r7, #0]
 8085288:	2b01      	cmp	r3, #1
 808528a:	d90a      	bls.n	80852a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 808528c:	68fb      	ldr	r3, [r7, #12]
 808528e:	2220      	movs	r2, #32
 8085290:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8085292:	68fb      	ldr	r3, [r7, #12]
 8085294:	681b      	ldr	r3, [r3, #0]
 8085296:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8085298:	4618      	mov	r0, r3
 808529a:	f002 fbd8 	bl	8087a4e <SDMMC_CmdWriteMultiBlock>
 808529e:	6478      	str	r0, [r7, #68]	; 0x44
 80852a0:	e009      	b.n	80852b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80852a2:	68fb      	ldr	r3, [r7, #12]
 80852a4:	2210      	movs	r2, #16
 80852a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80852a8:	68fb      	ldr	r3, [r7, #12]
 80852aa:	681b      	ldr	r3, [r3, #0]
 80852ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80852ae:	4618      	mov	r0, r3
 80852b0:	f002 fbab 	bl	8087a0a <SDMMC_CmdWriteSingleBlock>
 80852b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80852b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80852b8:	2b00      	cmp	r3, #0
 80852ba:	d012      	beq.n	80852e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80852bc:	68fb      	ldr	r3, [r7, #12]
 80852be:	681b      	ldr	r3, [r3, #0]
 80852c0:	4a87      	ldr	r2, [pc, #540]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 80852c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80852c4:	68fb      	ldr	r3, [r7, #12]
 80852c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80852c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80852ca:	431a      	orrs	r2, r3
 80852cc:	68fb      	ldr	r3, [r7, #12]
 80852ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80852d0:	68fb      	ldr	r3, [r7, #12]
 80852d2:	2201      	movs	r2, #1
 80852d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80852d8:	68fb      	ldr	r3, [r7, #12]
 80852da:	2200      	movs	r2, #0
 80852dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80852de:	2301      	movs	r3, #1
 80852e0:	e0fa      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80852e2:	69fb      	ldr	r3, [r7, #28]
 80852e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80852e6:	e065      	b.n	80853b4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80852e8:	68fb      	ldr	r3, [r7, #12]
 80852ea:	681b      	ldr	r3, [r3, #0]
 80852ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80852ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80852f2:	2b00      	cmp	r3, #0
 80852f4:	d040      	beq.n	8085378 <HAL_SD_WriteBlocks+0x1a0>
 80852f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80852f8:	2b00      	cmp	r3, #0
 80852fa:	d03d      	beq.n	8085378 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80852fc:	2300      	movs	r3, #0
 80852fe:	643b      	str	r3, [r7, #64]	; 0x40
 8085300:	e037      	b.n	8085372 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8085302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085304:	781b      	ldrb	r3, [r3, #0]
 8085306:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8085308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808530a:	3301      	adds	r3, #1
 808530c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 808530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085310:	3b01      	subs	r3, #1
 8085312:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8085314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085316:	781b      	ldrb	r3, [r3, #0]
 8085318:	021a      	lsls	r2, r3, #8
 808531a:	697b      	ldr	r3, [r7, #20]
 808531c:	4313      	orrs	r3, r2
 808531e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8085320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085322:	3301      	adds	r3, #1
 8085324:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8085326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085328:	3b01      	subs	r3, #1
 808532a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 808532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808532e:	781b      	ldrb	r3, [r3, #0]
 8085330:	041a      	lsls	r2, r3, #16
 8085332:	697b      	ldr	r3, [r7, #20]
 8085334:	4313      	orrs	r3, r2
 8085336:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8085338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 808533a:	3301      	adds	r3, #1
 808533c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 808533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085340:	3b01      	subs	r3, #1
 8085342:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8085344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085346:	781b      	ldrb	r3, [r3, #0]
 8085348:	061a      	lsls	r2, r3, #24
 808534a:	697b      	ldr	r3, [r7, #20]
 808534c:	4313      	orrs	r3, r2
 808534e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8085350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8085352:	3301      	adds	r3, #1
 8085354:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8085356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085358:	3b01      	subs	r3, #1
 808535a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 808535c:	68fb      	ldr	r3, [r7, #12]
 808535e:	681b      	ldr	r3, [r3, #0]
 8085360:	f107 0214 	add.w	r2, r7, #20
 8085364:	4611      	mov	r1, r2
 8085366:	4618      	mov	r0, r3
 8085368:	f002 fa46 	bl	80877f8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 808536c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 808536e:	3301      	adds	r3, #1
 8085370:	643b      	str	r3, [r7, #64]	; 0x40
 8085372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8085374:	2b07      	cmp	r3, #7
 8085376:	d9c4      	bls.n	8085302 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8085378:	f7fd fa34 	bl	80827e4 <HAL_GetTick>
 808537c:	4602      	mov	r2, r0
 808537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8085380:	1ad3      	subs	r3, r2, r3
 8085382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8085384:	429a      	cmp	r2, r3
 8085386:	d902      	bls.n	808538e <HAL_SD_WriteBlocks+0x1b6>
 8085388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 808538a:	2b00      	cmp	r3, #0
 808538c:	d112      	bne.n	80853b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808538e:	68fb      	ldr	r3, [r7, #12]
 8085390:	681b      	ldr	r3, [r3, #0]
 8085392:	4a53      	ldr	r2, [pc, #332]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 8085394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8085396:	68fb      	ldr	r3, [r7, #12]
 8085398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 808539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 808539c:	431a      	orrs	r2, r3
 808539e:	68fb      	ldr	r3, [r7, #12]
 80853a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80853a2:	68fb      	ldr	r3, [r7, #12]
 80853a4:	2201      	movs	r2, #1
 80853a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80853aa:	68fb      	ldr	r3, [r7, #12]
 80853ac:	2200      	movs	r2, #0
 80853ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80853b0:	2303      	movs	r3, #3
 80853b2:	e091      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80853b4:	68fb      	ldr	r3, [r7, #12]
 80853b6:	681b      	ldr	r3, [r3, #0]
 80853b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80853ba:	f240 331a 	movw	r3, #794	; 0x31a
 80853be:	4013      	ands	r3, r2
 80853c0:	2b00      	cmp	r3, #0
 80853c2:	d091      	beq.n	80852e8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80853c4:	68fb      	ldr	r3, [r7, #12]
 80853c6:	681b      	ldr	r3, [r3, #0]
 80853c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80853ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80853ce:	2b00      	cmp	r3, #0
 80853d0:	d022      	beq.n	8085418 <HAL_SD_WriteBlocks+0x240>
 80853d2:	683b      	ldr	r3, [r7, #0]
 80853d4:	2b01      	cmp	r3, #1
 80853d6:	d91f      	bls.n	8085418 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80853d8:	68fb      	ldr	r3, [r7, #12]
 80853da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80853dc:	2b03      	cmp	r3, #3
 80853de:	d01b      	beq.n	8085418 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80853e0:	68fb      	ldr	r3, [r7, #12]
 80853e2:	681b      	ldr	r3, [r3, #0]
 80853e4:	4618      	mov	r0, r3
 80853e6:	f002 fb55 	bl	8087a94 <SDMMC_CmdStopTransfer>
 80853ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80853ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80853ee:	2b00      	cmp	r3, #0
 80853f0:	d012      	beq.n	8085418 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80853f2:	68fb      	ldr	r3, [r7, #12]
 80853f4:	681b      	ldr	r3, [r3, #0]
 80853f6:	4a3a      	ldr	r2, [pc, #232]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 80853f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80853fa:	68fb      	ldr	r3, [r7, #12]
 80853fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80853fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8085400:	431a      	orrs	r2, r3
 8085402:	68fb      	ldr	r3, [r7, #12]
 8085404:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8085406:	68fb      	ldr	r3, [r7, #12]
 8085408:	2201      	movs	r2, #1
 808540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 808540e:	68fb      	ldr	r3, [r7, #12]
 8085410:	2200      	movs	r2, #0
 8085412:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8085414:	2301      	movs	r3, #1
 8085416:	e05f      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8085418:	68fb      	ldr	r3, [r7, #12]
 808541a:	681b      	ldr	r3, [r3, #0]
 808541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808541e:	f003 0308 	and.w	r3, r3, #8
 8085422:	2b00      	cmp	r3, #0
 8085424:	d012      	beq.n	808544c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8085426:	68fb      	ldr	r3, [r7, #12]
 8085428:	681b      	ldr	r3, [r3, #0]
 808542a:	4a2d      	ldr	r2, [pc, #180]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 808542c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 808542e:	68fb      	ldr	r3, [r7, #12]
 8085430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085432:	f043 0208 	orr.w	r2, r3, #8
 8085436:	68fb      	ldr	r3, [r7, #12]
 8085438:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808543a:	68fb      	ldr	r3, [r7, #12]
 808543c:	2201      	movs	r2, #1
 808543e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8085442:	68fb      	ldr	r3, [r7, #12]
 8085444:	2200      	movs	r2, #0
 8085446:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8085448:	2301      	movs	r3, #1
 808544a:	e045      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 808544c:	68fb      	ldr	r3, [r7, #12]
 808544e:	681b      	ldr	r3, [r3, #0]
 8085450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085452:	f003 0302 	and.w	r3, r3, #2
 8085456:	2b00      	cmp	r3, #0
 8085458:	d012      	beq.n	8085480 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808545a:	68fb      	ldr	r3, [r7, #12]
 808545c:	681b      	ldr	r3, [r3, #0]
 808545e:	4a20      	ldr	r2, [pc, #128]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 8085460:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8085462:	68fb      	ldr	r3, [r7, #12]
 8085464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085466:	f043 0202 	orr.w	r2, r3, #2
 808546a:	68fb      	ldr	r3, [r7, #12]
 808546c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 808546e:	68fb      	ldr	r3, [r7, #12]
 8085470:	2201      	movs	r2, #1
 8085472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8085476:	68fb      	ldr	r3, [r7, #12]
 8085478:	2200      	movs	r2, #0
 808547a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 808547c:	2301      	movs	r3, #1
 808547e:	e02b      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8085480:	68fb      	ldr	r3, [r7, #12]
 8085482:	681b      	ldr	r3, [r3, #0]
 8085484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085486:	f003 0310 	and.w	r3, r3, #16
 808548a:	2b00      	cmp	r3, #0
 808548c:	d012      	beq.n	80854b4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 808548e:	68fb      	ldr	r3, [r7, #12]
 8085490:	681b      	ldr	r3, [r3, #0]
 8085492:	4a13      	ldr	r2, [pc, #76]	; (80854e0 <HAL_SD_WriteBlocks+0x308>)
 8085494:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8085496:	68fb      	ldr	r3, [r7, #12]
 8085498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808549a:	f043 0210 	orr.w	r2, r3, #16
 808549e:	68fb      	ldr	r3, [r7, #12]
 80854a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80854a2:	68fb      	ldr	r3, [r7, #12]
 80854a4:	2201      	movs	r2, #1
 80854a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80854aa:	68fb      	ldr	r3, [r7, #12]
 80854ac:	2200      	movs	r2, #0
 80854ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80854b0:	2301      	movs	r3, #1
 80854b2:	e011      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80854b4:	68fb      	ldr	r3, [r7, #12]
 80854b6:	681b      	ldr	r3, [r3, #0]
 80854b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80854bc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80854be:	68fb      	ldr	r3, [r7, #12]
 80854c0:	2201      	movs	r2, #1
 80854c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80854c6:	2300      	movs	r3, #0
 80854c8:	e006      	b.n	80854d8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80854ca:	68fb      	ldr	r3, [r7, #12]
 80854cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80854ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80854d2:	68fb      	ldr	r3, [r7, #12]
 80854d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80854d6:	2301      	movs	r3, #1
  }
}
 80854d8:	4618      	mov	r0, r3
 80854da:	3748      	adds	r7, #72	; 0x48
 80854dc:	46bd      	mov	sp, r7
 80854de:	bd80      	pop	{r7, pc}
 80854e0:	004005ff 	.word	0x004005ff

080854e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80854e4:	b580      	push	{r7, lr}
 80854e6:	b084      	sub	sp, #16
 80854e8:	af00      	add	r7, sp, #0
 80854ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80854ec:	687b      	ldr	r3, [r7, #4]
 80854ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80854f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80854f2:	687b      	ldr	r3, [r7, #4]
 80854f4:	681b      	ldr	r3, [r3, #0]
 80854f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80854f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80854fc:	2b00      	cmp	r3, #0
 80854fe:	d008      	beq.n	8085512 <HAL_SD_IRQHandler+0x2e>
 8085500:	68fb      	ldr	r3, [r7, #12]
 8085502:	f003 0308 	and.w	r3, r3, #8
 8085506:	2b00      	cmp	r3, #0
 8085508:	d003      	beq.n	8085512 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 808550a:	6878      	ldr	r0, [r7, #4]
 808550c:	f000 fd5c 	bl	8085fc8 <SD_Read_IT>
 8085510:	e165      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8085512:	687b      	ldr	r3, [r7, #4]
 8085514:	681b      	ldr	r3, [r3, #0]
 8085516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 808551c:	2b00      	cmp	r3, #0
 808551e:	f000 808f 	beq.w	8085640 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8085522:	687b      	ldr	r3, [r7, #4]
 8085524:	681b      	ldr	r3, [r3, #0]
 8085526:	f44f 7280 	mov.w	r2, #256	; 0x100
 808552a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 808552c:	687b      	ldr	r3, [r7, #4]
 808552e:	681b      	ldr	r3, [r3, #0]
 8085530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085532:	687a      	ldr	r2, [r7, #4]
 8085534:	6812      	ldr	r2, [r2, #0]
 8085536:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 808553a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 808553e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8085540:	687b      	ldr	r3, [r7, #4]
 8085542:	681b      	ldr	r3, [r3, #0]
 8085544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8085546:	687b      	ldr	r3, [r7, #4]
 8085548:	681b      	ldr	r3, [r3, #0]
 808554a:	f022 0201 	bic.w	r2, r2, #1
 808554e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8085550:	68fb      	ldr	r3, [r7, #12]
 8085552:	f003 0308 	and.w	r3, r3, #8
 8085556:	2b00      	cmp	r3, #0
 8085558:	d039      	beq.n	80855ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 808555a:	68fb      	ldr	r3, [r7, #12]
 808555c:	f003 0302 	and.w	r3, r3, #2
 8085560:	2b00      	cmp	r3, #0
 8085562:	d104      	bne.n	808556e <HAL_SD_IRQHandler+0x8a>
 8085564:	68fb      	ldr	r3, [r7, #12]
 8085566:	f003 0320 	and.w	r3, r3, #32
 808556a:	2b00      	cmp	r3, #0
 808556c:	d011      	beq.n	8085592 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 808556e:	687b      	ldr	r3, [r7, #4]
 8085570:	681b      	ldr	r3, [r3, #0]
 8085572:	4618      	mov	r0, r3
 8085574:	f002 fa8e 	bl	8087a94 <SDMMC_CmdStopTransfer>
 8085578:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 808557a:	68bb      	ldr	r3, [r7, #8]
 808557c:	2b00      	cmp	r3, #0
 808557e:	d008      	beq.n	8085592 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8085580:	687b      	ldr	r3, [r7, #4]
 8085582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8085584:	68bb      	ldr	r3, [r7, #8]
 8085586:	431a      	orrs	r2, r3
 8085588:	687b      	ldr	r3, [r7, #4]
 808558a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 808558c:	6878      	ldr	r0, [r7, #4]
 808558e:	f000 f92f 	bl	80857f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8085592:	687b      	ldr	r3, [r7, #4]
 8085594:	681b      	ldr	r3, [r3, #0]
 8085596:	f240 523a 	movw	r2, #1338	; 0x53a
 808559a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 808559c:	687b      	ldr	r3, [r7, #4]
 808559e:	2201      	movs	r2, #1
 80855a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80855a4:	687b      	ldr	r3, [r7, #4]
 80855a6:	2200      	movs	r2, #0
 80855a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80855aa:	68fb      	ldr	r3, [r7, #12]
 80855ac:	f003 0301 	and.w	r3, r3, #1
 80855b0:	2b00      	cmp	r3, #0
 80855b2:	d104      	bne.n	80855be <HAL_SD_IRQHandler+0xda>
 80855b4:	68fb      	ldr	r3, [r7, #12]
 80855b6:	f003 0302 	and.w	r3, r3, #2
 80855ba:	2b00      	cmp	r3, #0
 80855bc:	d003      	beq.n	80855c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80855be:	6878      	ldr	r0, [r7, #4]
 80855c0:	f002 feac 	bl	808831c <HAL_SD_RxCpltCallback>
 80855c4:	e10b      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80855c6:	6878      	ldr	r0, [r7, #4]
 80855c8:	f002 fe9e 	bl	8088308 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80855cc:	e107      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80855ce:	68fb      	ldr	r3, [r7, #12]
 80855d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80855d4:	2b00      	cmp	r3, #0
 80855d6:	f000 8102 	beq.w	80857de <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80855da:	68fb      	ldr	r3, [r7, #12]
 80855dc:	f003 0320 	and.w	r3, r3, #32
 80855e0:	2b00      	cmp	r3, #0
 80855e2:	d011      	beq.n	8085608 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80855e4:	687b      	ldr	r3, [r7, #4]
 80855e6:	681b      	ldr	r3, [r3, #0]
 80855e8:	4618      	mov	r0, r3
 80855ea:	f002 fa53 	bl	8087a94 <SDMMC_CmdStopTransfer>
 80855ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80855f0:	68bb      	ldr	r3, [r7, #8]
 80855f2:	2b00      	cmp	r3, #0
 80855f4:	d008      	beq.n	8085608 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80855f6:	687b      	ldr	r3, [r7, #4]
 80855f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80855fa:	68bb      	ldr	r3, [r7, #8]
 80855fc:	431a      	orrs	r2, r3
 80855fe:	687b      	ldr	r3, [r7, #4]
 8085600:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8085602:	6878      	ldr	r0, [r7, #4]
 8085604:	f000 f8f4 	bl	80857f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8085608:	68fb      	ldr	r3, [r7, #12]
 808560a:	f003 0301 	and.w	r3, r3, #1
 808560e:	2b00      	cmp	r3, #0
 8085610:	f040 80e5 	bne.w	80857de <HAL_SD_IRQHandler+0x2fa>
 8085614:	68fb      	ldr	r3, [r7, #12]
 8085616:	f003 0302 	and.w	r3, r3, #2
 808561a:	2b00      	cmp	r3, #0
 808561c:	f040 80df 	bne.w	80857de <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8085620:	687b      	ldr	r3, [r7, #4]
 8085622:	681b      	ldr	r3, [r3, #0]
 8085624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8085626:	687b      	ldr	r3, [r7, #4]
 8085628:	681b      	ldr	r3, [r3, #0]
 808562a:	f022 0208 	bic.w	r2, r2, #8
 808562e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8085630:	687b      	ldr	r3, [r7, #4]
 8085632:	2201      	movs	r2, #1
 8085634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8085638:	6878      	ldr	r0, [r7, #4]
 808563a:	f002 fe65 	bl	8088308 <HAL_SD_TxCpltCallback>
}
 808563e:	e0ce      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8085640:	687b      	ldr	r3, [r7, #4]
 8085642:	681b      	ldr	r3, [r3, #0]
 8085644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 808564a:	2b00      	cmp	r3, #0
 808564c:	d008      	beq.n	8085660 <HAL_SD_IRQHandler+0x17c>
 808564e:	68fb      	ldr	r3, [r7, #12]
 8085650:	f003 0308 	and.w	r3, r3, #8
 8085654:	2b00      	cmp	r3, #0
 8085656:	d003      	beq.n	8085660 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8085658:	6878      	ldr	r0, [r7, #4]
 808565a:	f000 fd06 	bl	808606a <SD_Write_IT>
 808565e:	e0be      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8085660:	687b      	ldr	r3, [r7, #4]
 8085662:	681b      	ldr	r3, [r3, #0]
 8085664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8085666:	f240 233a 	movw	r3, #570	; 0x23a
 808566a:	4013      	ands	r3, r2
 808566c:	2b00      	cmp	r3, #0
 808566e:	f000 80b6 	beq.w	80857de <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8085672:	687b      	ldr	r3, [r7, #4]
 8085674:	681b      	ldr	r3, [r3, #0]
 8085676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085678:	f003 0302 	and.w	r3, r3, #2
 808567c:	2b00      	cmp	r3, #0
 808567e:	d005      	beq.n	808568c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8085680:	687b      	ldr	r3, [r7, #4]
 8085682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085684:	f043 0202 	orr.w	r2, r3, #2
 8085688:	687b      	ldr	r3, [r7, #4]
 808568a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 808568c:	687b      	ldr	r3, [r7, #4]
 808568e:	681b      	ldr	r3, [r3, #0]
 8085690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8085692:	f003 0308 	and.w	r3, r3, #8
 8085696:	2b00      	cmp	r3, #0
 8085698:	d005      	beq.n	80856a6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 808569a:	687b      	ldr	r3, [r7, #4]
 808569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808569e:	f043 0208 	orr.w	r2, r3, #8
 80856a2:	687b      	ldr	r3, [r7, #4]
 80856a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80856a6:	687b      	ldr	r3, [r7, #4]
 80856a8:	681b      	ldr	r3, [r3, #0]
 80856aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80856ac:	f003 0320 	and.w	r3, r3, #32
 80856b0:	2b00      	cmp	r3, #0
 80856b2:	d005      	beq.n	80856c0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80856b4:	687b      	ldr	r3, [r7, #4]
 80856b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80856b8:	f043 0220 	orr.w	r2, r3, #32
 80856bc:	687b      	ldr	r3, [r7, #4]
 80856be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80856c0:	687b      	ldr	r3, [r7, #4]
 80856c2:	681b      	ldr	r3, [r3, #0]
 80856c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80856c6:	f003 0310 	and.w	r3, r3, #16
 80856ca:	2b00      	cmp	r3, #0
 80856cc:	d005      	beq.n	80856da <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80856ce:	687b      	ldr	r3, [r7, #4]
 80856d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80856d2:	f043 0210 	orr.w	r2, r3, #16
 80856d6:	687b      	ldr	r3, [r7, #4]
 80856d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80856da:	687b      	ldr	r3, [r7, #4]
 80856dc:	681b      	ldr	r3, [r3, #0]
 80856de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80856e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80856e4:	2b00      	cmp	r3, #0
 80856e6:	d005      	beq.n	80856f4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80856e8:	687b      	ldr	r3, [r7, #4]
 80856ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80856ec:	f043 0208 	orr.w	r2, r3, #8
 80856f0:	687b      	ldr	r3, [r7, #4]
 80856f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80856f4:	687b      	ldr	r3, [r7, #4]
 80856f6:	681b      	ldr	r3, [r3, #0]
 80856f8:	f240 723a 	movw	r2, #1850	; 0x73a
 80856fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80856fe:	687b      	ldr	r3, [r7, #4]
 8085700:	681b      	ldr	r3, [r3, #0]
 8085702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085704:	687a      	ldr	r2, [r7, #4]
 8085706:	6812      	ldr	r2, [r2, #0]
 8085708:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 808570c:	f023 0302 	bic.w	r3, r3, #2
 8085710:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8085712:	687b      	ldr	r3, [r7, #4]
 8085714:	681b      	ldr	r3, [r3, #0]
 8085716:	4618      	mov	r0, r3
 8085718:	f002 f9bc 	bl	8087a94 <SDMMC_CmdStopTransfer>
 808571c:	4602      	mov	r2, r0
 808571e:	687b      	ldr	r3, [r7, #4]
 8085720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085722:	431a      	orrs	r2, r3
 8085724:	687b      	ldr	r3, [r7, #4]
 8085726:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8085728:	68fb      	ldr	r3, [r7, #12]
 808572a:	f003 0308 	and.w	r3, r3, #8
 808572e:	2b00      	cmp	r3, #0
 8085730:	d00a      	beq.n	8085748 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8085732:	687b      	ldr	r3, [r7, #4]
 8085734:	2201      	movs	r2, #1
 8085736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 808573a:	687b      	ldr	r3, [r7, #4]
 808573c:	2200      	movs	r2, #0
 808573e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8085740:	6878      	ldr	r0, [r7, #4]
 8085742:	f000 f855 	bl	80857f0 <HAL_SD_ErrorCallback>
}
 8085746:	e04a      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8085748:	68fb      	ldr	r3, [r7, #12]
 808574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 808574e:	2b00      	cmp	r3, #0
 8085750:	d045      	beq.n	80857de <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8085752:	68fb      	ldr	r3, [r7, #12]
 8085754:	f003 0310 	and.w	r3, r3, #16
 8085758:	2b00      	cmp	r3, #0
 808575a:	d104      	bne.n	8085766 <HAL_SD_IRQHandler+0x282>
 808575c:	68fb      	ldr	r3, [r7, #12]
 808575e:	f003 0320 	and.w	r3, r3, #32
 8085762:	2b00      	cmp	r3, #0
 8085764:	d011      	beq.n	808578a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8085766:	687b      	ldr	r3, [r7, #4]
 8085768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808576a:	4a1f      	ldr	r2, [pc, #124]	; (80857e8 <HAL_SD_IRQHandler+0x304>)
 808576c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 808576e:	687b      	ldr	r3, [r7, #4]
 8085770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085772:	4618      	mov	r0, r3
 8085774:	f7fd fb08 	bl	8082d88 <HAL_DMA_Abort_IT>
 8085778:	4603      	mov	r3, r0
 808577a:	2b00      	cmp	r3, #0
 808577c:	d02f      	beq.n	80857de <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 808577e:	687b      	ldr	r3, [r7, #4]
 8085780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8085782:	4618      	mov	r0, r3
 8085784:	f000 fa2e 	bl	8085be4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8085788:	e029      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 808578a:	68fb      	ldr	r3, [r7, #12]
 808578c:	f003 0301 	and.w	r3, r3, #1
 8085790:	2b00      	cmp	r3, #0
 8085792:	d104      	bne.n	808579e <HAL_SD_IRQHandler+0x2ba>
 8085794:	68fb      	ldr	r3, [r7, #12]
 8085796:	f003 0302 	and.w	r3, r3, #2
 808579a:	2b00      	cmp	r3, #0
 808579c:	d011      	beq.n	80857c2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 808579e:	687b      	ldr	r3, [r7, #4]
 80857a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80857a2:	4a12      	ldr	r2, [pc, #72]	; (80857ec <HAL_SD_IRQHandler+0x308>)
 80857a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80857a6:	687b      	ldr	r3, [r7, #4]
 80857a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80857aa:	4618      	mov	r0, r3
 80857ac:	f7fd faec 	bl	8082d88 <HAL_DMA_Abort_IT>
 80857b0:	4603      	mov	r3, r0
 80857b2:	2b00      	cmp	r3, #0
 80857b4:	d013      	beq.n	80857de <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80857b6:	687b      	ldr	r3, [r7, #4]
 80857b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80857ba:	4618      	mov	r0, r3
 80857bc:	f000 fa49 	bl	8085c52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80857c0:	e00d      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80857c2:	687b      	ldr	r3, [r7, #4]
 80857c4:	2200      	movs	r2, #0
 80857c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80857c8:	687b      	ldr	r3, [r7, #4]
 80857ca:	2201      	movs	r2, #1
 80857cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80857d0:	687b      	ldr	r3, [r7, #4]
 80857d2:	2200      	movs	r2, #0
 80857d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80857d6:	6878      	ldr	r0, [r7, #4]
 80857d8:	f002 fd8c 	bl	80882f4 <HAL_SD_AbortCallback>
}
 80857dc:	e7ff      	b.n	80857de <HAL_SD_IRQHandler+0x2fa>
 80857de:	bf00      	nop
 80857e0:	3710      	adds	r7, #16
 80857e2:	46bd      	mov	sp, r7
 80857e4:	bd80      	pop	{r7, pc}
 80857e6:	bf00      	nop
 80857e8:	08085be5 	.word	0x08085be5
 80857ec:	08085c53 	.word	0x08085c53

080857f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80857f0:	b480      	push	{r7}
 80857f2:	b083      	sub	sp, #12
 80857f4:	af00      	add	r7, sp, #0
 80857f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80857f8:	bf00      	nop
 80857fa:	370c      	adds	r7, #12
 80857fc:	46bd      	mov	sp, r7
 80857fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085802:	4770      	bx	lr

08085804 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8085804:	b480      	push	{r7}
 8085806:	b083      	sub	sp, #12
 8085808:	af00      	add	r7, sp, #0
 808580a:	6078      	str	r0, [r7, #4]
 808580c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 808580e:	687b      	ldr	r3, [r7, #4]
 8085810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8085812:	0f9b      	lsrs	r3, r3, #30
 8085814:	b2da      	uxtb	r2, r3
 8085816:	683b      	ldr	r3, [r7, #0]
 8085818:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 808581a:	687b      	ldr	r3, [r7, #4]
 808581c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808581e:	0e9b      	lsrs	r3, r3, #26
 8085820:	b2db      	uxtb	r3, r3
 8085822:	f003 030f 	and.w	r3, r3, #15
 8085826:	b2da      	uxtb	r2, r3
 8085828:	683b      	ldr	r3, [r7, #0]
 808582a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 808582c:	687b      	ldr	r3, [r7, #4]
 808582e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8085830:	0e1b      	lsrs	r3, r3, #24
 8085832:	b2db      	uxtb	r3, r3
 8085834:	f003 0303 	and.w	r3, r3, #3
 8085838:	b2da      	uxtb	r2, r3
 808583a:	683b      	ldr	r3, [r7, #0]
 808583c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 808583e:	687b      	ldr	r3, [r7, #4]
 8085840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8085842:	0c1b      	lsrs	r3, r3, #16
 8085844:	b2da      	uxtb	r2, r3
 8085846:	683b      	ldr	r3, [r7, #0]
 8085848:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 808584a:	687b      	ldr	r3, [r7, #4]
 808584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808584e:	0a1b      	lsrs	r3, r3, #8
 8085850:	b2da      	uxtb	r2, r3
 8085852:	683b      	ldr	r3, [r7, #0]
 8085854:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8085856:	687b      	ldr	r3, [r7, #4]
 8085858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808585a:	b2da      	uxtb	r2, r3
 808585c:	683b      	ldr	r3, [r7, #0]
 808585e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8085860:	687b      	ldr	r3, [r7, #4]
 8085862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085864:	0d1b      	lsrs	r3, r3, #20
 8085866:	b29a      	uxth	r2, r3
 8085868:	683b      	ldr	r3, [r7, #0]
 808586a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 808586c:	687b      	ldr	r3, [r7, #4]
 808586e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085870:	0c1b      	lsrs	r3, r3, #16
 8085872:	b2db      	uxtb	r3, r3
 8085874:	f003 030f 	and.w	r3, r3, #15
 8085878:	b2da      	uxtb	r2, r3
 808587a:	683b      	ldr	r3, [r7, #0]
 808587c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 808587e:	687b      	ldr	r3, [r7, #4]
 8085880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085882:	0bdb      	lsrs	r3, r3, #15
 8085884:	b2db      	uxtb	r3, r3
 8085886:	f003 0301 	and.w	r3, r3, #1
 808588a:	b2da      	uxtb	r2, r3
 808588c:	683b      	ldr	r3, [r7, #0]
 808588e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8085890:	687b      	ldr	r3, [r7, #4]
 8085892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8085894:	0b9b      	lsrs	r3, r3, #14
 8085896:	b2db      	uxtb	r3, r3
 8085898:	f003 0301 	and.w	r3, r3, #1
 808589c:	b2da      	uxtb	r2, r3
 808589e:	683b      	ldr	r3, [r7, #0]
 80858a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80858a2:	687b      	ldr	r3, [r7, #4]
 80858a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80858a6:	0b5b      	lsrs	r3, r3, #13
 80858a8:	b2db      	uxtb	r3, r3
 80858aa:	f003 0301 	and.w	r3, r3, #1
 80858ae:	b2da      	uxtb	r2, r3
 80858b0:	683b      	ldr	r3, [r7, #0]
 80858b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80858b4:	687b      	ldr	r3, [r7, #4]
 80858b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80858b8:	0b1b      	lsrs	r3, r3, #12
 80858ba:	b2db      	uxtb	r3, r3
 80858bc:	f003 0301 	and.w	r3, r3, #1
 80858c0:	b2da      	uxtb	r2, r3
 80858c2:	683b      	ldr	r3, [r7, #0]
 80858c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80858c6:	683b      	ldr	r3, [r7, #0]
 80858c8:	2200      	movs	r2, #0
 80858ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80858cc:	687b      	ldr	r3, [r7, #4]
 80858ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80858d0:	2b00      	cmp	r3, #0
 80858d2:	d163      	bne.n	808599c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80858d4:	687b      	ldr	r3, [r7, #4]
 80858d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80858d8:	009a      	lsls	r2, r3, #2
 80858da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80858de:	4013      	ands	r3, r2
 80858e0:	687a      	ldr	r2, [r7, #4]
 80858e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80858e4:	0f92      	lsrs	r2, r2, #30
 80858e6:	431a      	orrs	r2, r3
 80858e8:	683b      	ldr	r3, [r7, #0]
 80858ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80858ec:	687b      	ldr	r3, [r7, #4]
 80858ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80858f0:	0edb      	lsrs	r3, r3, #27
 80858f2:	b2db      	uxtb	r3, r3
 80858f4:	f003 0307 	and.w	r3, r3, #7
 80858f8:	b2da      	uxtb	r2, r3
 80858fa:	683b      	ldr	r3, [r7, #0]
 80858fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80858fe:	687b      	ldr	r3, [r7, #4]
 8085900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085902:	0e1b      	lsrs	r3, r3, #24
 8085904:	b2db      	uxtb	r3, r3
 8085906:	f003 0307 	and.w	r3, r3, #7
 808590a:	b2da      	uxtb	r2, r3
 808590c:	683b      	ldr	r3, [r7, #0]
 808590e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8085910:	687b      	ldr	r3, [r7, #4]
 8085912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085914:	0d5b      	lsrs	r3, r3, #21
 8085916:	b2db      	uxtb	r3, r3
 8085918:	f003 0307 	and.w	r3, r3, #7
 808591c:	b2da      	uxtb	r2, r3
 808591e:	683b      	ldr	r3, [r7, #0]
 8085920:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8085922:	687b      	ldr	r3, [r7, #4]
 8085924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085926:	0c9b      	lsrs	r3, r3, #18
 8085928:	b2db      	uxtb	r3, r3
 808592a:	f003 0307 	and.w	r3, r3, #7
 808592e:	b2da      	uxtb	r2, r3
 8085930:	683b      	ldr	r3, [r7, #0]
 8085932:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8085934:	687b      	ldr	r3, [r7, #4]
 8085936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085938:	0bdb      	lsrs	r3, r3, #15
 808593a:	b2db      	uxtb	r3, r3
 808593c:	f003 0307 	and.w	r3, r3, #7
 8085940:	b2da      	uxtb	r2, r3
 8085942:	683b      	ldr	r3, [r7, #0]
 8085944:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8085946:	683b      	ldr	r3, [r7, #0]
 8085948:	691b      	ldr	r3, [r3, #16]
 808594a:	1c5a      	adds	r2, r3, #1
 808594c:	687b      	ldr	r3, [r7, #4]
 808594e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8085950:	683b      	ldr	r3, [r7, #0]
 8085952:	7e1b      	ldrb	r3, [r3, #24]
 8085954:	b2db      	uxtb	r3, r3
 8085956:	f003 0307 	and.w	r3, r3, #7
 808595a:	3302      	adds	r3, #2
 808595c:	2201      	movs	r2, #1
 808595e:	fa02 f303 	lsl.w	r3, r2, r3
 8085962:	687a      	ldr	r2, [r7, #4]
 8085964:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8085966:	fb03 f202 	mul.w	r2, r3, r2
 808596a:	687b      	ldr	r3, [r7, #4]
 808596c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 808596e:	683b      	ldr	r3, [r7, #0]
 8085970:	7a1b      	ldrb	r3, [r3, #8]
 8085972:	b2db      	uxtb	r3, r3
 8085974:	f003 030f 	and.w	r3, r3, #15
 8085978:	2201      	movs	r2, #1
 808597a:	409a      	lsls	r2, r3
 808597c:	687b      	ldr	r3, [r7, #4]
 808597e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8085980:	687b      	ldr	r3, [r7, #4]
 8085982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8085984:	687a      	ldr	r2, [r7, #4]
 8085986:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8085988:	0a52      	lsrs	r2, r2, #9
 808598a:	fb03 f202 	mul.w	r2, r3, r2
 808598e:	687b      	ldr	r3, [r7, #4]
 8085990:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8085992:	687b      	ldr	r3, [r7, #4]
 8085994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085998:	661a      	str	r2, [r3, #96]	; 0x60
 808599a:	e031      	b.n	8085a00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 808599c:	687b      	ldr	r3, [r7, #4]
 808599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80859a0:	2b01      	cmp	r3, #1
 80859a2:	d11d      	bne.n	80859e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80859a4:	687b      	ldr	r3, [r7, #4]
 80859a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80859a8:	041b      	lsls	r3, r3, #16
 80859aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80859ae:	687b      	ldr	r3, [r7, #4]
 80859b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80859b2:	0c1b      	lsrs	r3, r3, #16
 80859b4:	431a      	orrs	r2, r3
 80859b6:	683b      	ldr	r3, [r7, #0]
 80859b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80859ba:	683b      	ldr	r3, [r7, #0]
 80859bc:	691b      	ldr	r3, [r3, #16]
 80859be:	3301      	adds	r3, #1
 80859c0:	029a      	lsls	r2, r3, #10
 80859c2:	687b      	ldr	r3, [r7, #4]
 80859c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80859c6:	687b      	ldr	r3, [r7, #4]
 80859c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80859ca:	687b      	ldr	r3, [r7, #4]
 80859cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80859ce:	687b      	ldr	r3, [r7, #4]
 80859d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80859d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80859d6:	687b      	ldr	r3, [r7, #4]
 80859d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80859da:	687b      	ldr	r3, [r7, #4]
 80859dc:	661a      	str	r2, [r3, #96]	; 0x60
 80859de:	e00f      	b.n	8085a00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80859e0:	687b      	ldr	r3, [r7, #4]
 80859e2:	681b      	ldr	r3, [r3, #0]
 80859e4:	4a58      	ldr	r2, [pc, #352]	; (8085b48 <HAL_SD_GetCardCSD+0x344>)
 80859e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80859e8:	687b      	ldr	r3, [r7, #4]
 80859ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80859ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80859f0:	687b      	ldr	r3, [r7, #4]
 80859f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80859f4:	687b      	ldr	r3, [r7, #4]
 80859f6:	2201      	movs	r2, #1
 80859f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80859fc:	2301      	movs	r3, #1
 80859fe:	e09d      	b.n	8085b3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8085a00:	687b      	ldr	r3, [r7, #4]
 8085a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085a04:	0b9b      	lsrs	r3, r3, #14
 8085a06:	b2db      	uxtb	r3, r3
 8085a08:	f003 0301 	and.w	r3, r3, #1
 8085a0c:	b2da      	uxtb	r2, r3
 8085a0e:	683b      	ldr	r3, [r7, #0]
 8085a10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8085a12:	687b      	ldr	r3, [r7, #4]
 8085a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085a16:	09db      	lsrs	r3, r3, #7
 8085a18:	b2db      	uxtb	r3, r3
 8085a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8085a1e:	b2da      	uxtb	r2, r3
 8085a20:	683b      	ldr	r3, [r7, #0]
 8085a22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8085a24:	687b      	ldr	r3, [r7, #4]
 8085a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8085a28:	b2db      	uxtb	r3, r3
 8085a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8085a2e:	b2da      	uxtb	r2, r3
 8085a30:	683b      	ldr	r3, [r7, #0]
 8085a32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8085a34:	687b      	ldr	r3, [r7, #4]
 8085a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a38:	0fdb      	lsrs	r3, r3, #31
 8085a3a:	b2da      	uxtb	r2, r3
 8085a3c:	683b      	ldr	r3, [r7, #0]
 8085a3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8085a40:	687b      	ldr	r3, [r7, #4]
 8085a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a44:	0f5b      	lsrs	r3, r3, #29
 8085a46:	b2db      	uxtb	r3, r3
 8085a48:	f003 0303 	and.w	r3, r3, #3
 8085a4c:	b2da      	uxtb	r2, r3
 8085a4e:	683b      	ldr	r3, [r7, #0]
 8085a50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8085a52:	687b      	ldr	r3, [r7, #4]
 8085a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a56:	0e9b      	lsrs	r3, r3, #26
 8085a58:	b2db      	uxtb	r3, r3
 8085a5a:	f003 0307 	and.w	r3, r3, #7
 8085a5e:	b2da      	uxtb	r2, r3
 8085a60:	683b      	ldr	r3, [r7, #0]
 8085a62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8085a64:	687b      	ldr	r3, [r7, #4]
 8085a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a68:	0d9b      	lsrs	r3, r3, #22
 8085a6a:	b2db      	uxtb	r3, r3
 8085a6c:	f003 030f 	and.w	r3, r3, #15
 8085a70:	b2da      	uxtb	r2, r3
 8085a72:	683b      	ldr	r3, [r7, #0]
 8085a74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8085a76:	687b      	ldr	r3, [r7, #4]
 8085a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a7a:	0d5b      	lsrs	r3, r3, #21
 8085a7c:	b2db      	uxtb	r3, r3
 8085a7e:	f003 0301 	and.w	r3, r3, #1
 8085a82:	b2da      	uxtb	r2, r3
 8085a84:	683b      	ldr	r3, [r7, #0]
 8085a86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8085a8a:	683b      	ldr	r3, [r7, #0]
 8085a8c:	2200      	movs	r2, #0
 8085a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8085a92:	687b      	ldr	r3, [r7, #4]
 8085a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085a96:	0c1b      	lsrs	r3, r3, #16
 8085a98:	b2db      	uxtb	r3, r3
 8085a9a:	f003 0301 	and.w	r3, r3, #1
 8085a9e:	b2da      	uxtb	r2, r3
 8085aa0:	683b      	ldr	r3, [r7, #0]
 8085aa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8085aa6:	687b      	ldr	r3, [r7, #4]
 8085aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085aaa:	0bdb      	lsrs	r3, r3, #15
 8085aac:	b2db      	uxtb	r3, r3
 8085aae:	f003 0301 	and.w	r3, r3, #1
 8085ab2:	b2da      	uxtb	r2, r3
 8085ab4:	683b      	ldr	r3, [r7, #0]
 8085ab6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8085aba:	687b      	ldr	r3, [r7, #4]
 8085abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085abe:	0b9b      	lsrs	r3, r3, #14
 8085ac0:	b2db      	uxtb	r3, r3
 8085ac2:	f003 0301 	and.w	r3, r3, #1
 8085ac6:	b2da      	uxtb	r2, r3
 8085ac8:	683b      	ldr	r3, [r7, #0]
 8085aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8085ace:	687b      	ldr	r3, [r7, #4]
 8085ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085ad2:	0b5b      	lsrs	r3, r3, #13
 8085ad4:	b2db      	uxtb	r3, r3
 8085ad6:	f003 0301 	and.w	r3, r3, #1
 8085ada:	b2da      	uxtb	r2, r3
 8085adc:	683b      	ldr	r3, [r7, #0]
 8085ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8085ae2:	687b      	ldr	r3, [r7, #4]
 8085ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085ae6:	0b1b      	lsrs	r3, r3, #12
 8085ae8:	b2db      	uxtb	r3, r3
 8085aea:	f003 0301 	and.w	r3, r3, #1
 8085aee:	b2da      	uxtb	r2, r3
 8085af0:	683b      	ldr	r3, [r7, #0]
 8085af2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8085af6:	687b      	ldr	r3, [r7, #4]
 8085af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085afa:	0a9b      	lsrs	r3, r3, #10
 8085afc:	b2db      	uxtb	r3, r3
 8085afe:	f003 0303 	and.w	r3, r3, #3
 8085b02:	b2da      	uxtb	r2, r3
 8085b04:	683b      	ldr	r3, [r7, #0]
 8085b06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8085b0a:	687b      	ldr	r3, [r7, #4]
 8085b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085b0e:	0a1b      	lsrs	r3, r3, #8
 8085b10:	b2db      	uxtb	r3, r3
 8085b12:	f003 0303 	and.w	r3, r3, #3
 8085b16:	b2da      	uxtb	r2, r3
 8085b18:	683b      	ldr	r3, [r7, #0]
 8085b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8085b1e:	687b      	ldr	r3, [r7, #4]
 8085b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8085b22:	085b      	lsrs	r3, r3, #1
 8085b24:	b2db      	uxtb	r3, r3
 8085b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8085b2a:	b2da      	uxtb	r2, r3
 8085b2c:	683b      	ldr	r3, [r7, #0]
 8085b2e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8085b32:	683b      	ldr	r3, [r7, #0]
 8085b34:	2201      	movs	r2, #1
 8085b36:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8085b3a:	2300      	movs	r3, #0
}
 8085b3c:	4618      	mov	r0, r3
 8085b3e:	370c      	adds	r7, #12
 8085b40:	46bd      	mov	sp, r7
 8085b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085b46:	4770      	bx	lr
 8085b48:	004005ff 	.word	0x004005ff

08085b4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8085b4c:	b480      	push	{r7}
 8085b4e:	b083      	sub	sp, #12
 8085b50:	af00      	add	r7, sp, #0
 8085b52:	6078      	str	r0, [r7, #4]
 8085b54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8085b56:	687b      	ldr	r3, [r7, #4]
 8085b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8085b5a:	683b      	ldr	r3, [r7, #0]
 8085b5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8085b5e:	687b      	ldr	r3, [r7, #4]
 8085b60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8085b62:	683b      	ldr	r3, [r7, #0]
 8085b64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8085b66:	687b      	ldr	r3, [r7, #4]
 8085b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8085b6a:	683b      	ldr	r3, [r7, #0]
 8085b6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8085b6e:	687b      	ldr	r3, [r7, #4]
 8085b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8085b72:	683b      	ldr	r3, [r7, #0]
 8085b74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8085b76:	687b      	ldr	r3, [r7, #4]
 8085b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8085b7a:	683b      	ldr	r3, [r7, #0]
 8085b7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8085b7e:	687b      	ldr	r3, [r7, #4]
 8085b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8085b82:	683b      	ldr	r3, [r7, #0]
 8085b84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8085b86:	687b      	ldr	r3, [r7, #4]
 8085b88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8085b8a:	683b      	ldr	r3, [r7, #0]
 8085b8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8085b8e:	687b      	ldr	r3, [r7, #4]
 8085b90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8085b92:	683b      	ldr	r3, [r7, #0]
 8085b94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8085b96:	2300      	movs	r3, #0
}
 8085b98:	4618      	mov	r0, r3
 8085b9a:	370c      	adds	r7, #12
 8085b9c:	46bd      	mov	sp, r7
 8085b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8085ba2:	4770      	bx	lr

08085ba4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8085ba4:	b580      	push	{r7, lr}
 8085ba6:	b086      	sub	sp, #24
 8085ba8:	af00      	add	r7, sp, #0
 8085baa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8085bac:	2300      	movs	r3, #0
 8085bae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8085bb0:	f107 030c 	add.w	r3, r7, #12
 8085bb4:	4619      	mov	r1, r3
 8085bb6:	6878      	ldr	r0, [r7, #4]
 8085bb8:	f000 f9de 	bl	8085f78 <SD_SendStatus>
 8085bbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085bbe:	697b      	ldr	r3, [r7, #20]
 8085bc0:	2b00      	cmp	r3, #0
 8085bc2:	d005      	beq.n	8085bd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8085bc4:	687b      	ldr	r3, [r7, #4]
 8085bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8085bc8:	697b      	ldr	r3, [r7, #20]
 8085bca:	431a      	orrs	r2, r3
 8085bcc:	687b      	ldr	r3, [r7, #4]
 8085bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8085bd0:	68fb      	ldr	r3, [r7, #12]
 8085bd2:	0a5b      	lsrs	r3, r3, #9
 8085bd4:	f003 030f 	and.w	r3, r3, #15
 8085bd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8085bda:	693b      	ldr	r3, [r7, #16]
}
 8085bdc:	4618      	mov	r0, r3
 8085bde:	3718      	adds	r7, #24
 8085be0:	46bd      	mov	sp, r7
 8085be2:	bd80      	pop	{r7, pc}

08085be4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8085be4:	b580      	push	{r7, lr}
 8085be6:	b084      	sub	sp, #16
 8085be8:	af00      	add	r7, sp, #0
 8085bea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8085bec:	687b      	ldr	r3, [r7, #4]
 8085bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085bf0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8085bf2:	68fb      	ldr	r3, [r7, #12]
 8085bf4:	681b      	ldr	r3, [r3, #0]
 8085bf6:	f240 523a 	movw	r2, #1338	; 0x53a
 8085bfa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8085bfc:	68f8      	ldr	r0, [r7, #12]
 8085bfe:	f7ff ffd1 	bl	8085ba4 <HAL_SD_GetCardState>
 8085c02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8085c04:	68fb      	ldr	r3, [r7, #12]
 8085c06:	2201      	movs	r2, #1
 8085c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8085c0c:	68fb      	ldr	r3, [r7, #12]
 8085c0e:	2200      	movs	r2, #0
 8085c10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8085c12:	68bb      	ldr	r3, [r7, #8]
 8085c14:	2b06      	cmp	r3, #6
 8085c16:	d002      	beq.n	8085c1e <SD_DMATxAbort+0x3a>
 8085c18:	68bb      	ldr	r3, [r7, #8]
 8085c1a:	2b05      	cmp	r3, #5
 8085c1c:	d10a      	bne.n	8085c34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8085c1e:	68fb      	ldr	r3, [r7, #12]
 8085c20:	681b      	ldr	r3, [r3, #0]
 8085c22:	4618      	mov	r0, r3
 8085c24:	f001 ff36 	bl	8087a94 <SDMMC_CmdStopTransfer>
 8085c28:	4602      	mov	r2, r0
 8085c2a:	68fb      	ldr	r3, [r7, #12]
 8085c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085c2e:	431a      	orrs	r2, r3
 8085c30:	68fb      	ldr	r3, [r7, #12]
 8085c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8085c34:	68fb      	ldr	r3, [r7, #12]
 8085c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085c38:	2b00      	cmp	r3, #0
 8085c3a:	d103      	bne.n	8085c44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8085c3c:	68f8      	ldr	r0, [r7, #12]
 8085c3e:	f002 fb59 	bl	80882f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8085c42:	e002      	b.n	8085c4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8085c44:	68f8      	ldr	r0, [r7, #12]
 8085c46:	f7ff fdd3 	bl	80857f0 <HAL_SD_ErrorCallback>
}
 8085c4a:	bf00      	nop
 8085c4c:	3710      	adds	r7, #16
 8085c4e:	46bd      	mov	sp, r7
 8085c50:	bd80      	pop	{r7, pc}

08085c52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8085c52:	b580      	push	{r7, lr}
 8085c54:	b084      	sub	sp, #16
 8085c56:	af00      	add	r7, sp, #0
 8085c58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8085c5a:	687b      	ldr	r3, [r7, #4]
 8085c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085c5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8085c60:	68fb      	ldr	r3, [r7, #12]
 8085c62:	681b      	ldr	r3, [r3, #0]
 8085c64:	f240 523a 	movw	r2, #1338	; 0x53a
 8085c68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8085c6a:	68f8      	ldr	r0, [r7, #12]
 8085c6c:	f7ff ff9a 	bl	8085ba4 <HAL_SD_GetCardState>
 8085c70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8085c72:	68fb      	ldr	r3, [r7, #12]
 8085c74:	2201      	movs	r2, #1
 8085c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8085c7a:	68fb      	ldr	r3, [r7, #12]
 8085c7c:	2200      	movs	r2, #0
 8085c7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8085c80:	68bb      	ldr	r3, [r7, #8]
 8085c82:	2b06      	cmp	r3, #6
 8085c84:	d002      	beq.n	8085c8c <SD_DMARxAbort+0x3a>
 8085c86:	68bb      	ldr	r3, [r7, #8]
 8085c88:	2b05      	cmp	r3, #5
 8085c8a:	d10a      	bne.n	8085ca2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8085c8c:	68fb      	ldr	r3, [r7, #12]
 8085c8e:	681b      	ldr	r3, [r3, #0]
 8085c90:	4618      	mov	r0, r3
 8085c92:	f001 feff 	bl	8087a94 <SDMMC_CmdStopTransfer>
 8085c96:	4602      	mov	r2, r0
 8085c98:	68fb      	ldr	r3, [r7, #12]
 8085c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085c9c:	431a      	orrs	r2, r3
 8085c9e:	68fb      	ldr	r3, [r7, #12]
 8085ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8085ca2:	68fb      	ldr	r3, [r7, #12]
 8085ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8085ca6:	2b00      	cmp	r3, #0
 8085ca8:	d103      	bne.n	8085cb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8085caa:	68f8      	ldr	r0, [r7, #12]
 8085cac:	f002 fb22 	bl	80882f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8085cb0:	e002      	b.n	8085cb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8085cb2:	68f8      	ldr	r0, [r7, #12]
 8085cb4:	f7ff fd9c 	bl	80857f0 <HAL_SD_ErrorCallback>
}
 8085cb8:	bf00      	nop
 8085cba:	3710      	adds	r7, #16
 8085cbc:	46bd      	mov	sp, r7
 8085cbe:	bd80      	pop	{r7, pc}

08085cc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8085cc0:	b5b0      	push	{r4, r5, r7, lr}
 8085cc2:	b094      	sub	sp, #80	; 0x50
 8085cc4:	af04      	add	r7, sp, #16
 8085cc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8085cc8:	2301      	movs	r3, #1
 8085cca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8085ccc:	687b      	ldr	r3, [r7, #4]
 8085cce:	681b      	ldr	r3, [r3, #0]
 8085cd0:	4618      	mov	r0, r3
 8085cd2:	f001 fdb0 	bl	8087836 <SDIO_GetPowerState>
 8085cd6:	4603      	mov	r3, r0
 8085cd8:	2b00      	cmp	r3, #0
 8085cda:	d102      	bne.n	8085ce2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8085cdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8085ce0:	e0b8      	b.n	8085e54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8085ce2:	687b      	ldr	r3, [r7, #4]
 8085ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085ce6:	2b03      	cmp	r3, #3
 8085ce8:	d02f      	beq.n	8085d4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8085cea:	687b      	ldr	r3, [r7, #4]
 8085cec:	681b      	ldr	r3, [r3, #0]
 8085cee:	4618      	mov	r0, r3
 8085cf0:	f001 ff97 	bl	8087c22 <SDMMC_CmdSendCID>
 8085cf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8085cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085cf8:	2b00      	cmp	r3, #0
 8085cfa:	d001      	beq.n	8085d00 <SD_InitCard+0x40>
    {
      return errorstate;
 8085cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085cfe:	e0a9      	b.n	8085e54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085d00:	687b      	ldr	r3, [r7, #4]
 8085d02:	681b      	ldr	r3, [r3, #0]
 8085d04:	2100      	movs	r1, #0
 8085d06:	4618      	mov	r0, r3
 8085d08:	f001 fdda 	bl	80878c0 <SDIO_GetResponse>
 8085d0c:	4602      	mov	r2, r0
 8085d0e:	687b      	ldr	r3, [r7, #4]
 8085d10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8085d12:	687b      	ldr	r3, [r7, #4]
 8085d14:	681b      	ldr	r3, [r3, #0]
 8085d16:	2104      	movs	r1, #4
 8085d18:	4618      	mov	r0, r3
 8085d1a:	f001 fdd1 	bl	80878c0 <SDIO_GetResponse>
 8085d1e:	4602      	mov	r2, r0
 8085d20:	687b      	ldr	r3, [r7, #4]
 8085d22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8085d24:	687b      	ldr	r3, [r7, #4]
 8085d26:	681b      	ldr	r3, [r3, #0]
 8085d28:	2108      	movs	r1, #8
 8085d2a:	4618      	mov	r0, r3
 8085d2c:	f001 fdc8 	bl	80878c0 <SDIO_GetResponse>
 8085d30:	4602      	mov	r2, r0
 8085d32:	687b      	ldr	r3, [r7, #4]
 8085d34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8085d36:	687b      	ldr	r3, [r7, #4]
 8085d38:	681b      	ldr	r3, [r3, #0]
 8085d3a:	210c      	movs	r1, #12
 8085d3c:	4618      	mov	r0, r3
 8085d3e:	f001 fdbf 	bl	80878c0 <SDIO_GetResponse>
 8085d42:	4602      	mov	r2, r0
 8085d44:	687b      	ldr	r3, [r7, #4]
 8085d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8085d4a:	687b      	ldr	r3, [r7, #4]
 8085d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085d4e:	2b03      	cmp	r3, #3
 8085d50:	d00d      	beq.n	8085d6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8085d52:	687b      	ldr	r3, [r7, #4]
 8085d54:	681b      	ldr	r3, [r3, #0]
 8085d56:	f107 020e 	add.w	r2, r7, #14
 8085d5a:	4611      	mov	r1, r2
 8085d5c:	4618      	mov	r0, r3
 8085d5e:	f001 ff9d 	bl	8087c9c <SDMMC_CmdSetRelAdd>
 8085d62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8085d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085d66:	2b00      	cmp	r3, #0
 8085d68:	d001      	beq.n	8085d6e <SD_InitCard+0xae>
    {
      return errorstate;
 8085d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085d6c:	e072      	b.n	8085e54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8085d6e:	687b      	ldr	r3, [r7, #4]
 8085d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8085d72:	2b03      	cmp	r3, #3
 8085d74:	d036      	beq.n	8085de4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8085d76:	89fb      	ldrh	r3, [r7, #14]
 8085d78:	461a      	mov	r2, r3
 8085d7a:	687b      	ldr	r3, [r7, #4]
 8085d7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8085d7e:	687b      	ldr	r3, [r7, #4]
 8085d80:	681a      	ldr	r2, [r3, #0]
 8085d82:	687b      	ldr	r3, [r7, #4]
 8085d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085d86:	041b      	lsls	r3, r3, #16
 8085d88:	4619      	mov	r1, r3
 8085d8a:	4610      	mov	r0, r2
 8085d8c:	f001 ff67 	bl	8087c5e <SDMMC_CmdSendCSD>
 8085d90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8085d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085d94:	2b00      	cmp	r3, #0
 8085d96:	d001      	beq.n	8085d9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8085d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085d9a:	e05b      	b.n	8085e54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085d9c:	687b      	ldr	r3, [r7, #4]
 8085d9e:	681b      	ldr	r3, [r3, #0]
 8085da0:	2100      	movs	r1, #0
 8085da2:	4618      	mov	r0, r3
 8085da4:	f001 fd8c 	bl	80878c0 <SDIO_GetResponse>
 8085da8:	4602      	mov	r2, r0
 8085daa:	687b      	ldr	r3, [r7, #4]
 8085dac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8085dae:	687b      	ldr	r3, [r7, #4]
 8085db0:	681b      	ldr	r3, [r3, #0]
 8085db2:	2104      	movs	r1, #4
 8085db4:	4618      	mov	r0, r3
 8085db6:	f001 fd83 	bl	80878c0 <SDIO_GetResponse>
 8085dba:	4602      	mov	r2, r0
 8085dbc:	687b      	ldr	r3, [r7, #4]
 8085dbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8085dc0:	687b      	ldr	r3, [r7, #4]
 8085dc2:	681b      	ldr	r3, [r3, #0]
 8085dc4:	2108      	movs	r1, #8
 8085dc6:	4618      	mov	r0, r3
 8085dc8:	f001 fd7a 	bl	80878c0 <SDIO_GetResponse>
 8085dcc:	4602      	mov	r2, r0
 8085dce:	687b      	ldr	r3, [r7, #4]
 8085dd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8085dd2:	687b      	ldr	r3, [r7, #4]
 8085dd4:	681b      	ldr	r3, [r3, #0]
 8085dd6:	210c      	movs	r1, #12
 8085dd8:	4618      	mov	r0, r3
 8085dda:	f001 fd71 	bl	80878c0 <SDIO_GetResponse>
 8085dde:	4602      	mov	r2, r0
 8085de0:	687b      	ldr	r3, [r7, #4]
 8085de2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8085de4:	687b      	ldr	r3, [r7, #4]
 8085de6:	681b      	ldr	r3, [r3, #0]
 8085de8:	2104      	movs	r1, #4
 8085dea:	4618      	mov	r0, r3
 8085dec:	f001 fd68 	bl	80878c0 <SDIO_GetResponse>
 8085df0:	4603      	mov	r3, r0
 8085df2:	0d1a      	lsrs	r2, r3, #20
 8085df4:	687b      	ldr	r3, [r7, #4]
 8085df6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8085df8:	f107 0310 	add.w	r3, r7, #16
 8085dfc:	4619      	mov	r1, r3
 8085dfe:	6878      	ldr	r0, [r7, #4]
 8085e00:	f7ff fd00 	bl	8085804 <HAL_SD_GetCardCSD>
 8085e04:	4603      	mov	r3, r0
 8085e06:	2b00      	cmp	r3, #0
 8085e08:	d002      	beq.n	8085e10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8085e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085e0e:	e021      	b.n	8085e54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8085e10:	687b      	ldr	r3, [r7, #4]
 8085e12:	6819      	ldr	r1, [r3, #0]
 8085e14:	687b      	ldr	r3, [r7, #4]
 8085e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085e18:	041b      	lsls	r3, r3, #16
 8085e1a:	2200      	movs	r2, #0
 8085e1c:	461c      	mov	r4, r3
 8085e1e:	4615      	mov	r5, r2
 8085e20:	4622      	mov	r2, r4
 8085e22:	462b      	mov	r3, r5
 8085e24:	4608      	mov	r0, r1
 8085e26:	f001 fe57 	bl	8087ad8 <SDMMC_CmdSelDesel>
 8085e2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8085e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085e2e:	2b00      	cmp	r3, #0
 8085e30:	d001      	beq.n	8085e36 <SD_InitCard+0x176>
  {
    return errorstate;
 8085e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8085e34:	e00e      	b.n	8085e54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8085e36:	687b      	ldr	r3, [r7, #4]
 8085e38:	681d      	ldr	r5, [r3, #0]
 8085e3a:	687b      	ldr	r3, [r7, #4]
 8085e3c:	466c      	mov	r4, sp
 8085e3e:	f103 0210 	add.w	r2, r3, #16
 8085e42:	ca07      	ldmia	r2, {r0, r1, r2}
 8085e44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8085e48:	3304      	adds	r3, #4
 8085e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8085e4c:	4628      	mov	r0, r5
 8085e4e:	f001 fc9b 	bl	8087788 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8085e52:	2300      	movs	r3, #0
}
 8085e54:	4618      	mov	r0, r3
 8085e56:	3740      	adds	r7, #64	; 0x40
 8085e58:	46bd      	mov	sp, r7
 8085e5a:	bdb0      	pop	{r4, r5, r7, pc}

08085e5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8085e5c:	b580      	push	{r7, lr}
 8085e5e:	b086      	sub	sp, #24
 8085e60:	af00      	add	r7, sp, #0
 8085e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8085e64:	2300      	movs	r3, #0
 8085e66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8085e68:	2300      	movs	r3, #0
 8085e6a:	617b      	str	r3, [r7, #20]
 8085e6c:	2300      	movs	r3, #0
 8085e6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8085e70:	687b      	ldr	r3, [r7, #4]
 8085e72:	681b      	ldr	r3, [r3, #0]
 8085e74:	4618      	mov	r0, r3
 8085e76:	f001 fe52 	bl	8087b1e <SDMMC_CmdGoIdleState>
 8085e7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085e7c:	68fb      	ldr	r3, [r7, #12]
 8085e7e:	2b00      	cmp	r3, #0
 8085e80:	d001      	beq.n	8085e86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8085e82:	68fb      	ldr	r3, [r7, #12]
 8085e84:	e072      	b.n	8085f6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8085e86:	687b      	ldr	r3, [r7, #4]
 8085e88:	681b      	ldr	r3, [r3, #0]
 8085e8a:	4618      	mov	r0, r3
 8085e8c:	f001 fe65 	bl	8087b5a <SDMMC_CmdOperCond>
 8085e90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085e92:	68fb      	ldr	r3, [r7, #12]
 8085e94:	2b00      	cmp	r3, #0
 8085e96:	d00d      	beq.n	8085eb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8085e98:	687b      	ldr	r3, [r7, #4]
 8085e9a:	2200      	movs	r2, #0
 8085e9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8085e9e:	687b      	ldr	r3, [r7, #4]
 8085ea0:	681b      	ldr	r3, [r3, #0]
 8085ea2:	4618      	mov	r0, r3
 8085ea4:	f001 fe3b 	bl	8087b1e <SDMMC_CmdGoIdleState>
 8085ea8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085eaa:	68fb      	ldr	r3, [r7, #12]
 8085eac:	2b00      	cmp	r3, #0
 8085eae:	d004      	beq.n	8085eba <SD_PowerON+0x5e>
    {
      return errorstate;
 8085eb0:	68fb      	ldr	r3, [r7, #12]
 8085eb2:	e05b      	b.n	8085f6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8085eb4:	687b      	ldr	r3, [r7, #4]
 8085eb6:	2201      	movs	r2, #1
 8085eb8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8085eba:	687b      	ldr	r3, [r7, #4]
 8085ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8085ebe:	2b01      	cmp	r3, #1
 8085ec0:	d137      	bne.n	8085f32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8085ec2:	687b      	ldr	r3, [r7, #4]
 8085ec4:	681b      	ldr	r3, [r3, #0]
 8085ec6:	2100      	movs	r1, #0
 8085ec8:	4618      	mov	r0, r3
 8085eca:	f001 fe65 	bl	8087b98 <SDMMC_CmdAppCommand>
 8085ece:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085ed0:	68fb      	ldr	r3, [r7, #12]
 8085ed2:	2b00      	cmp	r3, #0
 8085ed4:	d02d      	beq.n	8085f32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8085ed6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085eda:	e047      	b.n	8085f6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8085edc:	687b      	ldr	r3, [r7, #4]
 8085ede:	681b      	ldr	r3, [r3, #0]
 8085ee0:	2100      	movs	r1, #0
 8085ee2:	4618      	mov	r0, r3
 8085ee4:	f001 fe58 	bl	8087b98 <SDMMC_CmdAppCommand>
 8085ee8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085eea:	68fb      	ldr	r3, [r7, #12]
 8085eec:	2b00      	cmp	r3, #0
 8085eee:	d001      	beq.n	8085ef4 <SD_PowerON+0x98>
    {
      return errorstate;
 8085ef0:	68fb      	ldr	r3, [r7, #12]
 8085ef2:	e03b      	b.n	8085f6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8085ef4:	687b      	ldr	r3, [r7, #4]
 8085ef6:	681b      	ldr	r3, [r3, #0]
 8085ef8:	491e      	ldr	r1, [pc, #120]	; (8085f74 <SD_PowerON+0x118>)
 8085efa:	4618      	mov	r0, r3
 8085efc:	f001 fe6e 	bl	8087bdc <SDMMC_CmdAppOperCommand>
 8085f00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8085f02:	68fb      	ldr	r3, [r7, #12]
 8085f04:	2b00      	cmp	r3, #0
 8085f06:	d002      	beq.n	8085f0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8085f08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8085f0c:	e02e      	b.n	8085f6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085f0e:	687b      	ldr	r3, [r7, #4]
 8085f10:	681b      	ldr	r3, [r3, #0]
 8085f12:	2100      	movs	r1, #0
 8085f14:	4618      	mov	r0, r3
 8085f16:	f001 fcd3 	bl	80878c0 <SDIO_GetResponse>
 8085f1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8085f1c:	697b      	ldr	r3, [r7, #20]
 8085f1e:	0fdb      	lsrs	r3, r3, #31
 8085f20:	2b01      	cmp	r3, #1
 8085f22:	d101      	bne.n	8085f28 <SD_PowerON+0xcc>
 8085f24:	2301      	movs	r3, #1
 8085f26:	e000      	b.n	8085f2a <SD_PowerON+0xce>
 8085f28:	2300      	movs	r3, #0
 8085f2a:	613b      	str	r3, [r7, #16]

    count++;
 8085f2c:	68bb      	ldr	r3, [r7, #8]
 8085f2e:	3301      	adds	r3, #1
 8085f30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8085f32:	68bb      	ldr	r3, [r7, #8]
 8085f34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8085f38:	4293      	cmp	r3, r2
 8085f3a:	d802      	bhi.n	8085f42 <SD_PowerON+0xe6>
 8085f3c:	693b      	ldr	r3, [r7, #16]
 8085f3e:	2b00      	cmp	r3, #0
 8085f40:	d0cc      	beq.n	8085edc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8085f42:	68bb      	ldr	r3, [r7, #8]
 8085f44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8085f48:	4293      	cmp	r3, r2
 8085f4a:	d902      	bls.n	8085f52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8085f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8085f50:	e00c      	b.n	8085f6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8085f52:	697b      	ldr	r3, [r7, #20]
 8085f54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8085f58:	2b00      	cmp	r3, #0
 8085f5a:	d003      	beq.n	8085f64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8085f5c:	687b      	ldr	r3, [r7, #4]
 8085f5e:	2201      	movs	r2, #1
 8085f60:	645a      	str	r2, [r3, #68]	; 0x44
 8085f62:	e002      	b.n	8085f6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8085f64:	687b      	ldr	r3, [r7, #4]
 8085f66:	2200      	movs	r2, #0
 8085f68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8085f6a:	2300      	movs	r3, #0
}
 8085f6c:	4618      	mov	r0, r3
 8085f6e:	3718      	adds	r7, #24
 8085f70:	46bd      	mov	sp, r7
 8085f72:	bd80      	pop	{r7, pc}
 8085f74:	c1100000 	.word	0xc1100000

08085f78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8085f78:	b580      	push	{r7, lr}
 8085f7a:	b084      	sub	sp, #16
 8085f7c:	af00      	add	r7, sp, #0
 8085f7e:	6078      	str	r0, [r7, #4]
 8085f80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8085f82:	683b      	ldr	r3, [r7, #0]
 8085f84:	2b00      	cmp	r3, #0
 8085f86:	d102      	bne.n	8085f8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8085f88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8085f8c:	e018      	b.n	8085fc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8085f8e:	687b      	ldr	r3, [r7, #4]
 8085f90:	681a      	ldr	r2, [r3, #0]
 8085f92:	687b      	ldr	r3, [r7, #4]
 8085f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8085f96:	041b      	lsls	r3, r3, #16
 8085f98:	4619      	mov	r1, r3
 8085f9a:	4610      	mov	r0, r2
 8085f9c:	f001 fe9f 	bl	8087cde <SDMMC_CmdSendStatus>
 8085fa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8085fa2:	68fb      	ldr	r3, [r7, #12]
 8085fa4:	2b00      	cmp	r3, #0
 8085fa6:	d001      	beq.n	8085fac <SD_SendStatus+0x34>
  {
    return errorstate;
 8085fa8:	68fb      	ldr	r3, [r7, #12]
 8085faa:	e009      	b.n	8085fc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8085fac:	687b      	ldr	r3, [r7, #4]
 8085fae:	681b      	ldr	r3, [r3, #0]
 8085fb0:	2100      	movs	r1, #0
 8085fb2:	4618      	mov	r0, r3
 8085fb4:	f001 fc84 	bl	80878c0 <SDIO_GetResponse>
 8085fb8:	4602      	mov	r2, r0
 8085fba:	683b      	ldr	r3, [r7, #0]
 8085fbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8085fbe:	2300      	movs	r3, #0
}
 8085fc0:	4618      	mov	r0, r3
 8085fc2:	3710      	adds	r7, #16
 8085fc4:	46bd      	mov	sp, r7
 8085fc6:	bd80      	pop	{r7, pc}

08085fc8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8085fc8:	b580      	push	{r7, lr}
 8085fca:	b086      	sub	sp, #24
 8085fcc:	af00      	add	r7, sp, #0
 8085fce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8085fd0:	687b      	ldr	r3, [r7, #4]
 8085fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8085fd4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8085fd6:	687b      	ldr	r3, [r7, #4]
 8085fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8085fda:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8085fdc:	693b      	ldr	r3, [r7, #16]
 8085fde:	2b00      	cmp	r3, #0
 8085fe0:	d03f      	beq.n	8086062 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8085fe2:	2300      	movs	r3, #0
 8085fe4:	617b      	str	r3, [r7, #20]
 8085fe6:	e033      	b.n	8086050 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8085fe8:	687b      	ldr	r3, [r7, #4]
 8085fea:	681b      	ldr	r3, [r3, #0]
 8085fec:	4618      	mov	r0, r3
 8085fee:	f001 fbf6 	bl	80877de <SDIO_ReadFIFO>
 8085ff2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8085ff4:	68bb      	ldr	r3, [r7, #8]
 8085ff6:	b2da      	uxtb	r2, r3
 8085ff8:	68fb      	ldr	r3, [r7, #12]
 8085ffa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8085ffc:	68fb      	ldr	r3, [r7, #12]
 8085ffe:	3301      	adds	r3, #1
 8086000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8086002:	693b      	ldr	r3, [r7, #16]
 8086004:	3b01      	subs	r3, #1
 8086006:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8086008:	68bb      	ldr	r3, [r7, #8]
 808600a:	0a1b      	lsrs	r3, r3, #8
 808600c:	b2da      	uxtb	r2, r3
 808600e:	68fb      	ldr	r3, [r7, #12]
 8086010:	701a      	strb	r2, [r3, #0]
      tmp++;
 8086012:	68fb      	ldr	r3, [r7, #12]
 8086014:	3301      	adds	r3, #1
 8086016:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8086018:	693b      	ldr	r3, [r7, #16]
 808601a:	3b01      	subs	r3, #1
 808601c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 808601e:	68bb      	ldr	r3, [r7, #8]
 8086020:	0c1b      	lsrs	r3, r3, #16
 8086022:	b2da      	uxtb	r2, r3
 8086024:	68fb      	ldr	r3, [r7, #12]
 8086026:	701a      	strb	r2, [r3, #0]
      tmp++;
 8086028:	68fb      	ldr	r3, [r7, #12]
 808602a:	3301      	adds	r3, #1
 808602c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 808602e:	693b      	ldr	r3, [r7, #16]
 8086030:	3b01      	subs	r3, #1
 8086032:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8086034:	68bb      	ldr	r3, [r7, #8]
 8086036:	0e1b      	lsrs	r3, r3, #24
 8086038:	b2da      	uxtb	r2, r3
 808603a:	68fb      	ldr	r3, [r7, #12]
 808603c:	701a      	strb	r2, [r3, #0]
      tmp++;
 808603e:	68fb      	ldr	r3, [r7, #12]
 8086040:	3301      	adds	r3, #1
 8086042:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8086044:	693b      	ldr	r3, [r7, #16]
 8086046:	3b01      	subs	r3, #1
 8086048:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 808604a:	697b      	ldr	r3, [r7, #20]
 808604c:	3301      	adds	r3, #1
 808604e:	617b      	str	r3, [r7, #20]
 8086050:	697b      	ldr	r3, [r7, #20]
 8086052:	2b07      	cmp	r3, #7
 8086054:	d9c8      	bls.n	8085fe8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8086056:	687b      	ldr	r3, [r7, #4]
 8086058:	68fa      	ldr	r2, [r7, #12]
 808605a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 808605c:	687b      	ldr	r3, [r7, #4]
 808605e:	693a      	ldr	r2, [r7, #16]
 8086060:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8086062:	bf00      	nop
 8086064:	3718      	adds	r7, #24
 8086066:	46bd      	mov	sp, r7
 8086068:	bd80      	pop	{r7, pc}

0808606a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 808606a:	b580      	push	{r7, lr}
 808606c:	b086      	sub	sp, #24
 808606e:	af00      	add	r7, sp, #0
 8086070:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8086072:	687b      	ldr	r3, [r7, #4]
 8086074:	6a1b      	ldr	r3, [r3, #32]
 8086076:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8086078:	687b      	ldr	r3, [r7, #4]
 808607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808607c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 808607e:	693b      	ldr	r3, [r7, #16]
 8086080:	2b00      	cmp	r3, #0
 8086082:	d043      	beq.n	808610c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8086084:	2300      	movs	r3, #0
 8086086:	617b      	str	r3, [r7, #20]
 8086088:	e037      	b.n	80860fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 808608a:	68fb      	ldr	r3, [r7, #12]
 808608c:	781b      	ldrb	r3, [r3, #0]
 808608e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8086090:	68fb      	ldr	r3, [r7, #12]
 8086092:	3301      	adds	r3, #1
 8086094:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8086096:	693b      	ldr	r3, [r7, #16]
 8086098:	3b01      	subs	r3, #1
 808609a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 808609c:	68fb      	ldr	r3, [r7, #12]
 808609e:	781b      	ldrb	r3, [r3, #0]
 80860a0:	021a      	lsls	r2, r3, #8
 80860a2:	68bb      	ldr	r3, [r7, #8]
 80860a4:	4313      	orrs	r3, r2
 80860a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80860a8:	68fb      	ldr	r3, [r7, #12]
 80860aa:	3301      	adds	r3, #1
 80860ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80860ae:	693b      	ldr	r3, [r7, #16]
 80860b0:	3b01      	subs	r3, #1
 80860b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80860b4:	68fb      	ldr	r3, [r7, #12]
 80860b6:	781b      	ldrb	r3, [r3, #0]
 80860b8:	041a      	lsls	r2, r3, #16
 80860ba:	68bb      	ldr	r3, [r7, #8]
 80860bc:	4313      	orrs	r3, r2
 80860be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80860c0:	68fb      	ldr	r3, [r7, #12]
 80860c2:	3301      	adds	r3, #1
 80860c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80860c6:	693b      	ldr	r3, [r7, #16]
 80860c8:	3b01      	subs	r3, #1
 80860ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80860cc:	68fb      	ldr	r3, [r7, #12]
 80860ce:	781b      	ldrb	r3, [r3, #0]
 80860d0:	061a      	lsls	r2, r3, #24
 80860d2:	68bb      	ldr	r3, [r7, #8]
 80860d4:	4313      	orrs	r3, r2
 80860d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80860d8:	68fb      	ldr	r3, [r7, #12]
 80860da:	3301      	adds	r3, #1
 80860dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80860de:	693b      	ldr	r3, [r7, #16]
 80860e0:	3b01      	subs	r3, #1
 80860e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80860e4:	687b      	ldr	r3, [r7, #4]
 80860e6:	681b      	ldr	r3, [r3, #0]
 80860e8:	f107 0208 	add.w	r2, r7, #8
 80860ec:	4611      	mov	r1, r2
 80860ee:	4618      	mov	r0, r3
 80860f0:	f001 fb82 	bl	80877f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80860f4:	697b      	ldr	r3, [r7, #20]
 80860f6:	3301      	adds	r3, #1
 80860f8:	617b      	str	r3, [r7, #20]
 80860fa:	697b      	ldr	r3, [r7, #20]
 80860fc:	2b07      	cmp	r3, #7
 80860fe:	d9c4      	bls.n	808608a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8086100:	687b      	ldr	r3, [r7, #4]
 8086102:	68fa      	ldr	r2, [r7, #12]
 8086104:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8086106:	687b      	ldr	r3, [r7, #4]
 8086108:	693a      	ldr	r2, [r7, #16]
 808610a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 808610c:	bf00      	nop
 808610e:	3718      	adds	r7, #24
 8086110:	46bd      	mov	sp, r7
 8086112:	bd80      	pop	{r7, pc}

08086114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8086114:	b580      	push	{r7, lr}
 8086116:	b082      	sub	sp, #8
 8086118:	af00      	add	r7, sp, #0
 808611a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 808611c:	687b      	ldr	r3, [r7, #4]
 808611e:	2b00      	cmp	r3, #0
 8086120:	d101      	bne.n	8086126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8086122:	2301      	movs	r3, #1
 8086124:	e03f      	b.n	80861a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8086126:	687b      	ldr	r3, [r7, #4]
 8086128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 808612c:	b2db      	uxtb	r3, r3
 808612e:	2b00      	cmp	r3, #0
 8086130:	d106      	bne.n	8086140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8086132:	687b      	ldr	r3, [r7, #4]
 8086134:	2200      	movs	r2, #0
 8086136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 808613a:	6878      	ldr	r0, [r7, #4]
 808613c:	f7fb ffbc 	bl	80820b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8086140:	687b      	ldr	r3, [r7, #4]
 8086142:	2224      	movs	r2, #36	; 0x24
 8086144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8086148:	687b      	ldr	r3, [r7, #4]
 808614a:	681b      	ldr	r3, [r3, #0]
 808614c:	68da      	ldr	r2, [r3, #12]
 808614e:	687b      	ldr	r3, [r7, #4]
 8086150:	681b      	ldr	r3, [r3, #0]
 8086152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8086156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8086158:	6878      	ldr	r0, [r7, #4]
 808615a:	f001 f8a1 	bl	80872a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 808615e:	687b      	ldr	r3, [r7, #4]
 8086160:	681b      	ldr	r3, [r3, #0]
 8086162:	691a      	ldr	r2, [r3, #16]
 8086164:	687b      	ldr	r3, [r7, #4]
 8086166:	681b      	ldr	r3, [r3, #0]
 8086168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 808616c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 808616e:	687b      	ldr	r3, [r7, #4]
 8086170:	681b      	ldr	r3, [r3, #0]
 8086172:	695a      	ldr	r2, [r3, #20]
 8086174:	687b      	ldr	r3, [r7, #4]
 8086176:	681b      	ldr	r3, [r3, #0]
 8086178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 808617c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 808617e:	687b      	ldr	r3, [r7, #4]
 8086180:	681b      	ldr	r3, [r3, #0]
 8086182:	68da      	ldr	r2, [r3, #12]
 8086184:	687b      	ldr	r3, [r7, #4]
 8086186:	681b      	ldr	r3, [r3, #0]
 8086188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 808618c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 808618e:	687b      	ldr	r3, [r7, #4]
 8086190:	2200      	movs	r2, #0
 8086192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8086194:	687b      	ldr	r3, [r7, #4]
 8086196:	2220      	movs	r2, #32
 8086198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 808619c:	687b      	ldr	r3, [r7, #4]
 808619e:	2220      	movs	r2, #32
 80861a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80861a4:	2300      	movs	r3, #0
}
 80861a6:	4618      	mov	r0, r3
 80861a8:	3708      	adds	r7, #8
 80861aa:	46bd      	mov	sp, r7
 80861ac:	bd80      	pop	{r7, pc}

080861ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80861ae:	b580      	push	{r7, lr}
 80861b0:	b08a      	sub	sp, #40	; 0x28
 80861b2:	af02      	add	r7, sp, #8
 80861b4:	60f8      	str	r0, [r7, #12]
 80861b6:	60b9      	str	r1, [r7, #8]
 80861b8:	603b      	str	r3, [r7, #0]
 80861ba:	4613      	mov	r3, r2
 80861bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80861be:	2300      	movs	r3, #0
 80861c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80861c2:	68fb      	ldr	r3, [r7, #12]
 80861c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80861c8:	b2db      	uxtb	r3, r3
 80861ca:	2b20      	cmp	r3, #32
 80861cc:	d17c      	bne.n	80862c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80861ce:	68bb      	ldr	r3, [r7, #8]
 80861d0:	2b00      	cmp	r3, #0
 80861d2:	d002      	beq.n	80861da <HAL_UART_Transmit+0x2c>
 80861d4:	88fb      	ldrh	r3, [r7, #6]
 80861d6:	2b00      	cmp	r3, #0
 80861d8:	d101      	bne.n	80861de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80861da:	2301      	movs	r3, #1
 80861dc:	e075      	b.n	80862ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80861de:	68fb      	ldr	r3, [r7, #12]
 80861e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80861e4:	2b01      	cmp	r3, #1
 80861e6:	d101      	bne.n	80861ec <HAL_UART_Transmit+0x3e>
 80861e8:	2302      	movs	r3, #2
 80861ea:	e06e      	b.n	80862ca <HAL_UART_Transmit+0x11c>
 80861ec:	68fb      	ldr	r3, [r7, #12]
 80861ee:	2201      	movs	r2, #1
 80861f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80861f4:	68fb      	ldr	r3, [r7, #12]
 80861f6:	2200      	movs	r2, #0
 80861f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80861fa:	68fb      	ldr	r3, [r7, #12]
 80861fc:	2221      	movs	r2, #33	; 0x21
 80861fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8086202:	f7fc faef 	bl	80827e4 <HAL_GetTick>
 8086206:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8086208:	68fb      	ldr	r3, [r7, #12]
 808620a:	88fa      	ldrh	r2, [r7, #6]
 808620c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 808620e:	68fb      	ldr	r3, [r7, #12]
 8086210:	88fa      	ldrh	r2, [r7, #6]
 8086212:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8086214:	68fb      	ldr	r3, [r7, #12]
 8086216:	689b      	ldr	r3, [r3, #8]
 8086218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808621c:	d108      	bne.n	8086230 <HAL_UART_Transmit+0x82>
 808621e:	68fb      	ldr	r3, [r7, #12]
 8086220:	691b      	ldr	r3, [r3, #16]
 8086222:	2b00      	cmp	r3, #0
 8086224:	d104      	bne.n	8086230 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8086226:	2300      	movs	r3, #0
 8086228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 808622a:	68bb      	ldr	r3, [r7, #8]
 808622c:	61bb      	str	r3, [r7, #24]
 808622e:	e003      	b.n	8086238 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8086230:	68bb      	ldr	r3, [r7, #8]
 8086232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8086234:	2300      	movs	r3, #0
 8086236:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8086238:	68fb      	ldr	r3, [r7, #12]
 808623a:	2200      	movs	r2, #0
 808623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8086240:	e02a      	b.n	8086298 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8086242:	683b      	ldr	r3, [r7, #0]
 8086244:	9300      	str	r3, [sp, #0]
 8086246:	697b      	ldr	r3, [r7, #20]
 8086248:	2200      	movs	r2, #0
 808624a:	2180      	movs	r1, #128	; 0x80
 808624c:	68f8      	ldr	r0, [r7, #12]
 808624e:	f000 fd1b 	bl	8086c88 <UART_WaitOnFlagUntilTimeout>
 8086252:	4603      	mov	r3, r0
 8086254:	2b00      	cmp	r3, #0
 8086256:	d001      	beq.n	808625c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8086258:	2303      	movs	r3, #3
 808625a:	e036      	b.n	80862ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 808625c:	69fb      	ldr	r3, [r7, #28]
 808625e:	2b00      	cmp	r3, #0
 8086260:	d10b      	bne.n	808627a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8086262:	69bb      	ldr	r3, [r7, #24]
 8086264:	881b      	ldrh	r3, [r3, #0]
 8086266:	461a      	mov	r2, r3
 8086268:	68fb      	ldr	r3, [r7, #12]
 808626a:	681b      	ldr	r3, [r3, #0]
 808626c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8086270:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8086272:	69bb      	ldr	r3, [r7, #24]
 8086274:	3302      	adds	r3, #2
 8086276:	61bb      	str	r3, [r7, #24]
 8086278:	e007      	b.n	808628a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 808627a:	69fb      	ldr	r3, [r7, #28]
 808627c:	781a      	ldrb	r2, [r3, #0]
 808627e:	68fb      	ldr	r3, [r7, #12]
 8086280:	681b      	ldr	r3, [r3, #0]
 8086282:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8086284:	69fb      	ldr	r3, [r7, #28]
 8086286:	3301      	adds	r3, #1
 8086288:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 808628a:	68fb      	ldr	r3, [r7, #12]
 808628c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 808628e:	b29b      	uxth	r3, r3
 8086290:	3b01      	subs	r3, #1
 8086292:	b29a      	uxth	r2, r3
 8086294:	68fb      	ldr	r3, [r7, #12]
 8086296:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8086298:	68fb      	ldr	r3, [r7, #12]
 808629a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 808629c:	b29b      	uxth	r3, r3
 808629e:	2b00      	cmp	r3, #0
 80862a0:	d1cf      	bne.n	8086242 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80862a2:	683b      	ldr	r3, [r7, #0]
 80862a4:	9300      	str	r3, [sp, #0]
 80862a6:	697b      	ldr	r3, [r7, #20]
 80862a8:	2200      	movs	r2, #0
 80862aa:	2140      	movs	r1, #64	; 0x40
 80862ac:	68f8      	ldr	r0, [r7, #12]
 80862ae:	f000 fceb 	bl	8086c88 <UART_WaitOnFlagUntilTimeout>
 80862b2:	4603      	mov	r3, r0
 80862b4:	2b00      	cmp	r3, #0
 80862b6:	d001      	beq.n	80862bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80862b8:	2303      	movs	r3, #3
 80862ba:	e006      	b.n	80862ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80862bc:	68fb      	ldr	r3, [r7, #12]
 80862be:	2220      	movs	r2, #32
 80862c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80862c4:	2300      	movs	r3, #0
 80862c6:	e000      	b.n	80862ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80862c8:	2302      	movs	r3, #2
  }
}
 80862ca:	4618      	mov	r0, r3
 80862cc:	3720      	adds	r7, #32
 80862ce:	46bd      	mov	sp, r7
 80862d0:	bd80      	pop	{r7, pc}

080862d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80862d2:	b580      	push	{r7, lr}
 80862d4:	b08a      	sub	sp, #40	; 0x28
 80862d6:	af02      	add	r7, sp, #8
 80862d8:	60f8      	str	r0, [r7, #12]
 80862da:	60b9      	str	r1, [r7, #8]
 80862dc:	603b      	str	r3, [r7, #0]
 80862de:	4613      	mov	r3, r2
 80862e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80862e2:	2300      	movs	r3, #0
 80862e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80862e6:	68fb      	ldr	r3, [r7, #12]
 80862e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80862ec:	b2db      	uxtb	r3, r3
 80862ee:	2b20      	cmp	r3, #32
 80862f0:	f040 808c 	bne.w	808640c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80862f4:	68bb      	ldr	r3, [r7, #8]
 80862f6:	2b00      	cmp	r3, #0
 80862f8:	d002      	beq.n	8086300 <HAL_UART_Receive+0x2e>
 80862fa:	88fb      	ldrh	r3, [r7, #6]
 80862fc:	2b00      	cmp	r3, #0
 80862fe:	d101      	bne.n	8086304 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8086300:	2301      	movs	r3, #1
 8086302:	e084      	b.n	808640e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8086304:	68fb      	ldr	r3, [r7, #12]
 8086306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 808630a:	2b01      	cmp	r3, #1
 808630c:	d101      	bne.n	8086312 <HAL_UART_Receive+0x40>
 808630e:	2302      	movs	r3, #2
 8086310:	e07d      	b.n	808640e <HAL_UART_Receive+0x13c>
 8086312:	68fb      	ldr	r3, [r7, #12]
 8086314:	2201      	movs	r2, #1
 8086316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 808631a:	68fb      	ldr	r3, [r7, #12]
 808631c:	2200      	movs	r2, #0
 808631e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8086320:	68fb      	ldr	r3, [r7, #12]
 8086322:	2222      	movs	r2, #34	; 0x22
 8086324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8086328:	68fb      	ldr	r3, [r7, #12]
 808632a:	2200      	movs	r2, #0
 808632c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 808632e:	f7fc fa59 	bl	80827e4 <HAL_GetTick>
 8086332:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8086334:	68fb      	ldr	r3, [r7, #12]
 8086336:	88fa      	ldrh	r2, [r7, #6]
 8086338:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 808633a:	68fb      	ldr	r3, [r7, #12]
 808633c:	88fa      	ldrh	r2, [r7, #6]
 808633e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8086340:	68fb      	ldr	r3, [r7, #12]
 8086342:	689b      	ldr	r3, [r3, #8]
 8086344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8086348:	d108      	bne.n	808635c <HAL_UART_Receive+0x8a>
 808634a:	68fb      	ldr	r3, [r7, #12]
 808634c:	691b      	ldr	r3, [r3, #16]
 808634e:	2b00      	cmp	r3, #0
 8086350:	d104      	bne.n	808635c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8086352:	2300      	movs	r3, #0
 8086354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8086356:	68bb      	ldr	r3, [r7, #8]
 8086358:	61bb      	str	r3, [r7, #24]
 808635a:	e003      	b.n	8086364 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 808635c:	68bb      	ldr	r3, [r7, #8]
 808635e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8086360:	2300      	movs	r3, #0
 8086362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8086364:	68fb      	ldr	r3, [r7, #12]
 8086366:	2200      	movs	r2, #0
 8086368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 808636c:	e043      	b.n	80863f6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 808636e:	683b      	ldr	r3, [r7, #0]
 8086370:	9300      	str	r3, [sp, #0]
 8086372:	697b      	ldr	r3, [r7, #20]
 8086374:	2200      	movs	r2, #0
 8086376:	2120      	movs	r1, #32
 8086378:	68f8      	ldr	r0, [r7, #12]
 808637a:	f000 fc85 	bl	8086c88 <UART_WaitOnFlagUntilTimeout>
 808637e:	4603      	mov	r3, r0
 8086380:	2b00      	cmp	r3, #0
 8086382:	d001      	beq.n	8086388 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8086384:	2303      	movs	r3, #3
 8086386:	e042      	b.n	808640e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8086388:	69fb      	ldr	r3, [r7, #28]
 808638a:	2b00      	cmp	r3, #0
 808638c:	d10c      	bne.n	80863a8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 808638e:	68fb      	ldr	r3, [r7, #12]
 8086390:	681b      	ldr	r3, [r3, #0]
 8086392:	685b      	ldr	r3, [r3, #4]
 8086394:	b29b      	uxth	r3, r3
 8086396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 808639a:	b29a      	uxth	r2, r3
 808639c:	69bb      	ldr	r3, [r7, #24]
 808639e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80863a0:	69bb      	ldr	r3, [r7, #24]
 80863a2:	3302      	adds	r3, #2
 80863a4:	61bb      	str	r3, [r7, #24]
 80863a6:	e01f      	b.n	80863e8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80863a8:	68fb      	ldr	r3, [r7, #12]
 80863aa:	689b      	ldr	r3, [r3, #8]
 80863ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80863b0:	d007      	beq.n	80863c2 <HAL_UART_Receive+0xf0>
 80863b2:	68fb      	ldr	r3, [r7, #12]
 80863b4:	689b      	ldr	r3, [r3, #8]
 80863b6:	2b00      	cmp	r3, #0
 80863b8:	d10a      	bne.n	80863d0 <HAL_UART_Receive+0xfe>
 80863ba:	68fb      	ldr	r3, [r7, #12]
 80863bc:	691b      	ldr	r3, [r3, #16]
 80863be:	2b00      	cmp	r3, #0
 80863c0:	d106      	bne.n	80863d0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80863c2:	68fb      	ldr	r3, [r7, #12]
 80863c4:	681b      	ldr	r3, [r3, #0]
 80863c6:	685b      	ldr	r3, [r3, #4]
 80863c8:	b2da      	uxtb	r2, r3
 80863ca:	69fb      	ldr	r3, [r7, #28]
 80863cc:	701a      	strb	r2, [r3, #0]
 80863ce:	e008      	b.n	80863e2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80863d0:	68fb      	ldr	r3, [r7, #12]
 80863d2:	681b      	ldr	r3, [r3, #0]
 80863d4:	685b      	ldr	r3, [r3, #4]
 80863d6:	b2db      	uxtb	r3, r3
 80863d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80863dc:	b2da      	uxtb	r2, r3
 80863de:	69fb      	ldr	r3, [r7, #28]
 80863e0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80863e2:	69fb      	ldr	r3, [r7, #28]
 80863e4:	3301      	adds	r3, #1
 80863e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80863e8:	68fb      	ldr	r3, [r7, #12]
 80863ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80863ec:	b29b      	uxth	r3, r3
 80863ee:	3b01      	subs	r3, #1
 80863f0:	b29a      	uxth	r2, r3
 80863f2:	68fb      	ldr	r3, [r7, #12]
 80863f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80863f6:	68fb      	ldr	r3, [r7, #12]
 80863f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80863fa:	b29b      	uxth	r3, r3
 80863fc:	2b00      	cmp	r3, #0
 80863fe:	d1b6      	bne.n	808636e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8086400:	68fb      	ldr	r3, [r7, #12]
 8086402:	2220      	movs	r2, #32
 8086404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8086408:	2300      	movs	r3, #0
 808640a:	e000      	b.n	808640e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 808640c:	2302      	movs	r3, #2
  }
}
 808640e:	4618      	mov	r0, r3
 8086410:	3720      	adds	r7, #32
 8086412:	46bd      	mov	sp, r7
 8086414:	bd80      	pop	{r7, pc}

08086416 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8086416:	b580      	push	{r7, lr}
 8086418:	b084      	sub	sp, #16
 808641a:	af00      	add	r7, sp, #0
 808641c:	60f8      	str	r0, [r7, #12]
 808641e:	60b9      	str	r1, [r7, #8]
 8086420:	4613      	mov	r3, r2
 8086422:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8086424:	68fb      	ldr	r3, [r7, #12]
 8086426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 808642a:	b2db      	uxtb	r3, r3
 808642c:	2b20      	cmp	r3, #32
 808642e:	d11d      	bne.n	808646c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8086430:	68bb      	ldr	r3, [r7, #8]
 8086432:	2b00      	cmp	r3, #0
 8086434:	d002      	beq.n	808643c <HAL_UART_Receive_IT+0x26>
 8086436:	88fb      	ldrh	r3, [r7, #6]
 8086438:	2b00      	cmp	r3, #0
 808643a:	d101      	bne.n	8086440 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 808643c:	2301      	movs	r3, #1
 808643e:	e016      	b.n	808646e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8086440:	68fb      	ldr	r3, [r7, #12]
 8086442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8086446:	2b01      	cmp	r3, #1
 8086448:	d101      	bne.n	808644e <HAL_UART_Receive_IT+0x38>
 808644a:	2302      	movs	r3, #2
 808644c:	e00f      	b.n	808646e <HAL_UART_Receive_IT+0x58>
 808644e:	68fb      	ldr	r3, [r7, #12]
 8086450:	2201      	movs	r2, #1
 8086452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8086456:	68fb      	ldr	r3, [r7, #12]
 8086458:	2200      	movs	r2, #0
 808645a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 808645c:	88fb      	ldrh	r3, [r7, #6]
 808645e:	461a      	mov	r2, r3
 8086460:	68b9      	ldr	r1, [r7, #8]
 8086462:	68f8      	ldr	r0, [r7, #12]
 8086464:	f000 fc7e 	bl	8086d64 <UART_Start_Receive_IT>
 8086468:	4603      	mov	r3, r0
 808646a:	e000      	b.n	808646e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 808646c:	2302      	movs	r3, #2
  }
}
 808646e:	4618      	mov	r0, r3
 8086470:	3710      	adds	r7, #16
 8086472:	46bd      	mov	sp, r7
 8086474:	bd80      	pop	{r7, pc}

08086476 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8086476:	b580      	push	{r7, lr}
 8086478:	b08c      	sub	sp, #48	; 0x30
 808647a:	af00      	add	r7, sp, #0
 808647c:	60f8      	str	r0, [r7, #12]
 808647e:	60b9      	str	r1, [r7, #8]
 8086480:	4613      	mov	r3, r2
 8086482:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8086484:	68fb      	ldr	r3, [r7, #12]
 8086486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 808648a:	b2db      	uxtb	r3, r3
 808648c:	2b20      	cmp	r3, #32
 808648e:	d152      	bne.n	8086536 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8086490:	68bb      	ldr	r3, [r7, #8]
 8086492:	2b00      	cmp	r3, #0
 8086494:	d002      	beq.n	808649c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8086496:	88fb      	ldrh	r3, [r7, #6]
 8086498:	2b00      	cmp	r3, #0
 808649a:	d101      	bne.n	80864a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 808649c:	2301      	movs	r3, #1
 808649e:	e04b      	b.n	8086538 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80864a0:	68fb      	ldr	r3, [r7, #12]
 80864a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80864a6:	2b01      	cmp	r3, #1
 80864a8:	d101      	bne.n	80864ae <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80864aa:	2302      	movs	r3, #2
 80864ac:	e044      	b.n	8086538 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80864ae:	68fb      	ldr	r3, [r7, #12]
 80864b0:	2201      	movs	r2, #1
 80864b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80864b6:	68fb      	ldr	r3, [r7, #12]
 80864b8:	2201      	movs	r2, #1
 80864ba:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80864bc:	88fb      	ldrh	r3, [r7, #6]
 80864be:	461a      	mov	r2, r3
 80864c0:	68b9      	ldr	r1, [r7, #8]
 80864c2:	68f8      	ldr	r0, [r7, #12]
 80864c4:	f000 fc8c 	bl	8086de0 <UART_Start_Receive_DMA>
 80864c8:	4603      	mov	r3, r0
 80864ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80864ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80864d2:	2b00      	cmp	r3, #0
 80864d4:	d12c      	bne.n	8086530 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80864d6:	68fb      	ldr	r3, [r7, #12]
 80864d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80864da:	2b01      	cmp	r3, #1
 80864dc:	d125      	bne.n	808652a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80864de:	2300      	movs	r3, #0
 80864e0:	613b      	str	r3, [r7, #16]
 80864e2:	68fb      	ldr	r3, [r7, #12]
 80864e4:	681b      	ldr	r3, [r3, #0]
 80864e6:	681b      	ldr	r3, [r3, #0]
 80864e8:	613b      	str	r3, [r7, #16]
 80864ea:	68fb      	ldr	r3, [r7, #12]
 80864ec:	681b      	ldr	r3, [r3, #0]
 80864ee:	685b      	ldr	r3, [r3, #4]
 80864f0:	613b      	str	r3, [r7, #16]
 80864f2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80864f4:	68fb      	ldr	r3, [r7, #12]
 80864f6:	681b      	ldr	r3, [r3, #0]
 80864f8:	330c      	adds	r3, #12
 80864fa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80864fc:	69bb      	ldr	r3, [r7, #24]
 80864fe:	e853 3f00 	ldrex	r3, [r3]
 8086502:	617b      	str	r3, [r7, #20]
   return(result);
 8086504:	697b      	ldr	r3, [r7, #20]
 8086506:	f043 0310 	orr.w	r3, r3, #16
 808650a:	62bb      	str	r3, [r7, #40]	; 0x28
 808650c:	68fb      	ldr	r3, [r7, #12]
 808650e:	681b      	ldr	r3, [r3, #0]
 8086510:	330c      	adds	r3, #12
 8086512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8086514:	627a      	str	r2, [r7, #36]	; 0x24
 8086516:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086518:	6a39      	ldr	r1, [r7, #32]
 808651a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808651c:	e841 2300 	strex	r3, r2, [r1]
 8086520:	61fb      	str	r3, [r7, #28]
   return(result);
 8086522:	69fb      	ldr	r3, [r7, #28]
 8086524:	2b00      	cmp	r3, #0
 8086526:	d1e5      	bne.n	80864f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8086528:	e002      	b.n	8086530 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 808652a:	2301      	movs	r3, #1
 808652c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8086530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8086534:	e000      	b.n	8086538 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8086536:	2302      	movs	r3, #2
  }
}
 8086538:	4618      	mov	r0, r3
 808653a:	3730      	adds	r7, #48	; 0x30
 808653c:	46bd      	mov	sp, r7
 808653e:	bd80      	pop	{r7, pc}

08086540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8086540:	b580      	push	{r7, lr}
 8086542:	b0ba      	sub	sp, #232	; 0xe8
 8086544:	af00      	add	r7, sp, #0
 8086546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8086548:	687b      	ldr	r3, [r7, #4]
 808654a:	681b      	ldr	r3, [r3, #0]
 808654c:	681b      	ldr	r3, [r3, #0]
 808654e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8086552:	687b      	ldr	r3, [r7, #4]
 8086554:	681b      	ldr	r3, [r3, #0]
 8086556:	68db      	ldr	r3, [r3, #12]
 8086558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 808655c:	687b      	ldr	r3, [r7, #4]
 808655e:	681b      	ldr	r3, [r3, #0]
 8086560:	695b      	ldr	r3, [r3, #20]
 8086562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8086566:	2300      	movs	r3, #0
 8086568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 808656c:	2300      	movs	r3, #0
 808656e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8086572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8086576:	f003 030f 	and.w	r3, r3, #15
 808657a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 808657e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8086582:	2b00      	cmp	r3, #0
 8086584:	d10f      	bne.n	80865a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8086586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 808658a:	f003 0320 	and.w	r3, r3, #32
 808658e:	2b00      	cmp	r3, #0
 8086590:	d009      	beq.n	80865a6 <HAL_UART_IRQHandler+0x66>
 8086592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086596:	f003 0320 	and.w	r3, r3, #32
 808659a:	2b00      	cmp	r3, #0
 808659c:	d003      	beq.n	80865a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 808659e:	6878      	ldr	r0, [r7, #4]
 80865a0:	f000 fdc3 	bl	808712a <UART_Receive_IT>
      return;
 80865a4:	e256      	b.n	8086a54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80865a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80865aa:	2b00      	cmp	r3, #0
 80865ac:	f000 80de 	beq.w	808676c <HAL_UART_IRQHandler+0x22c>
 80865b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80865b4:	f003 0301 	and.w	r3, r3, #1
 80865b8:	2b00      	cmp	r3, #0
 80865ba:	d106      	bne.n	80865ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80865bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80865c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80865c4:	2b00      	cmp	r3, #0
 80865c6:	f000 80d1 	beq.w	808676c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80865ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80865ce:	f003 0301 	and.w	r3, r3, #1
 80865d2:	2b00      	cmp	r3, #0
 80865d4:	d00b      	beq.n	80865ee <HAL_UART_IRQHandler+0xae>
 80865d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80865da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80865de:	2b00      	cmp	r3, #0
 80865e0:	d005      	beq.n	80865ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80865e2:	687b      	ldr	r3, [r7, #4]
 80865e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80865e6:	f043 0201 	orr.w	r2, r3, #1
 80865ea:	687b      	ldr	r3, [r7, #4]
 80865ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80865ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80865f2:	f003 0304 	and.w	r3, r3, #4
 80865f6:	2b00      	cmp	r3, #0
 80865f8:	d00b      	beq.n	8086612 <HAL_UART_IRQHandler+0xd2>
 80865fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80865fe:	f003 0301 	and.w	r3, r3, #1
 8086602:	2b00      	cmp	r3, #0
 8086604:	d005      	beq.n	8086612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8086606:	687b      	ldr	r3, [r7, #4]
 8086608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808660a:	f043 0202 	orr.w	r2, r3, #2
 808660e:	687b      	ldr	r3, [r7, #4]
 8086610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8086612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8086616:	f003 0302 	and.w	r3, r3, #2
 808661a:	2b00      	cmp	r3, #0
 808661c:	d00b      	beq.n	8086636 <HAL_UART_IRQHandler+0xf6>
 808661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8086622:	f003 0301 	and.w	r3, r3, #1
 8086626:	2b00      	cmp	r3, #0
 8086628:	d005      	beq.n	8086636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 808662a:	687b      	ldr	r3, [r7, #4]
 808662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808662e:	f043 0204 	orr.w	r2, r3, #4
 8086632:	687b      	ldr	r3, [r7, #4]
 8086634:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8086636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 808663a:	f003 0308 	and.w	r3, r3, #8
 808663e:	2b00      	cmp	r3, #0
 8086640:	d011      	beq.n	8086666 <HAL_UART_IRQHandler+0x126>
 8086642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086646:	f003 0320 	and.w	r3, r3, #32
 808664a:	2b00      	cmp	r3, #0
 808664c:	d105      	bne.n	808665a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 808664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8086652:	f003 0301 	and.w	r3, r3, #1
 8086656:	2b00      	cmp	r3, #0
 8086658:	d005      	beq.n	8086666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 808665a:	687b      	ldr	r3, [r7, #4]
 808665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808665e:	f043 0208 	orr.w	r2, r3, #8
 8086662:	687b      	ldr	r3, [r7, #4]
 8086664:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8086666:	687b      	ldr	r3, [r7, #4]
 8086668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808666a:	2b00      	cmp	r3, #0
 808666c:	f000 81ed 	beq.w	8086a4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8086670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8086674:	f003 0320 	and.w	r3, r3, #32
 8086678:	2b00      	cmp	r3, #0
 808667a:	d008      	beq.n	808668e <HAL_UART_IRQHandler+0x14e>
 808667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086680:	f003 0320 	and.w	r3, r3, #32
 8086684:	2b00      	cmp	r3, #0
 8086686:	d002      	beq.n	808668e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8086688:	6878      	ldr	r0, [r7, #4]
 808668a:	f000 fd4e 	bl	808712a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 808668e:	687b      	ldr	r3, [r7, #4]
 8086690:	681b      	ldr	r3, [r3, #0]
 8086692:	695b      	ldr	r3, [r3, #20]
 8086694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086698:	2b40      	cmp	r3, #64	; 0x40
 808669a:	bf0c      	ite	eq
 808669c:	2301      	moveq	r3, #1
 808669e:	2300      	movne	r3, #0
 80866a0:	b2db      	uxtb	r3, r3
 80866a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80866a6:	687b      	ldr	r3, [r7, #4]
 80866a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80866aa:	f003 0308 	and.w	r3, r3, #8
 80866ae:	2b00      	cmp	r3, #0
 80866b0:	d103      	bne.n	80866ba <HAL_UART_IRQHandler+0x17a>
 80866b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80866b6:	2b00      	cmp	r3, #0
 80866b8:	d04f      	beq.n	808675a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80866ba:	6878      	ldr	r0, [r7, #4]
 80866bc:	f000 fc56 	bl	8086f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80866c0:	687b      	ldr	r3, [r7, #4]
 80866c2:	681b      	ldr	r3, [r3, #0]
 80866c4:	695b      	ldr	r3, [r3, #20]
 80866c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80866ca:	2b40      	cmp	r3, #64	; 0x40
 80866cc:	d141      	bne.n	8086752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80866ce:	687b      	ldr	r3, [r7, #4]
 80866d0:	681b      	ldr	r3, [r3, #0]
 80866d2:	3314      	adds	r3, #20
 80866d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80866d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80866dc:	e853 3f00 	ldrex	r3, [r3]
 80866e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80866e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80866e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80866ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80866f0:	687b      	ldr	r3, [r7, #4]
 80866f2:	681b      	ldr	r3, [r3, #0]
 80866f4:	3314      	adds	r3, #20
 80866f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80866fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80866fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8086706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 808670a:	e841 2300 	strex	r3, r2, [r1]
 808670e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8086712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8086716:	2b00      	cmp	r3, #0
 8086718:	d1d9      	bne.n	80866ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 808671a:	687b      	ldr	r3, [r7, #4]
 808671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808671e:	2b00      	cmp	r3, #0
 8086720:	d013      	beq.n	808674a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8086722:	687b      	ldr	r3, [r7, #4]
 8086724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086726:	4a7d      	ldr	r2, [pc, #500]	; (808691c <HAL_UART_IRQHandler+0x3dc>)
 8086728:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 808672a:	687b      	ldr	r3, [r7, #4]
 808672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808672e:	4618      	mov	r0, r3
 8086730:	f7fc fb2a 	bl	8082d88 <HAL_DMA_Abort_IT>
 8086734:	4603      	mov	r3, r0
 8086736:	2b00      	cmp	r3, #0
 8086738:	d016      	beq.n	8086768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 808673a:	687b      	ldr	r3, [r7, #4]
 808673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8086740:	687a      	ldr	r2, [r7, #4]
 8086742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8086744:	4610      	mov	r0, r2
 8086746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8086748:	e00e      	b.n	8086768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 808674a:	6878      	ldr	r0, [r7, #4]
 808674c:	f000 f99a 	bl	8086a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8086750:	e00a      	b.n	8086768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8086752:	6878      	ldr	r0, [r7, #4]
 8086754:	f000 f996 	bl	8086a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8086758:	e006      	b.n	8086768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 808675a:	6878      	ldr	r0, [r7, #4]
 808675c:	f000 f992 	bl	8086a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8086760:	687b      	ldr	r3, [r7, #4]
 8086762:	2200      	movs	r2, #0
 8086764:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8086766:	e170      	b.n	8086a4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8086768:	bf00      	nop
    return;
 808676a:	e16e      	b.n	8086a4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 808676c:	687b      	ldr	r3, [r7, #4]
 808676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086770:	2b01      	cmp	r3, #1
 8086772:	f040 814a 	bne.w	8086a0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8086776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 808677a:	f003 0310 	and.w	r3, r3, #16
 808677e:	2b00      	cmp	r3, #0
 8086780:	f000 8143 	beq.w	8086a0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8086784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086788:	f003 0310 	and.w	r3, r3, #16
 808678c:	2b00      	cmp	r3, #0
 808678e:	f000 813c 	beq.w	8086a0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8086792:	2300      	movs	r3, #0
 8086794:	60bb      	str	r3, [r7, #8]
 8086796:	687b      	ldr	r3, [r7, #4]
 8086798:	681b      	ldr	r3, [r3, #0]
 808679a:	681b      	ldr	r3, [r3, #0]
 808679c:	60bb      	str	r3, [r7, #8]
 808679e:	687b      	ldr	r3, [r7, #4]
 80867a0:	681b      	ldr	r3, [r3, #0]
 80867a2:	685b      	ldr	r3, [r3, #4]
 80867a4:	60bb      	str	r3, [r7, #8]
 80867a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80867a8:	687b      	ldr	r3, [r7, #4]
 80867aa:	681b      	ldr	r3, [r3, #0]
 80867ac:	695b      	ldr	r3, [r3, #20]
 80867ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80867b2:	2b40      	cmp	r3, #64	; 0x40
 80867b4:	f040 80b4 	bne.w	8086920 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80867b8:	687b      	ldr	r3, [r7, #4]
 80867ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80867bc:	681b      	ldr	r3, [r3, #0]
 80867be:	685b      	ldr	r3, [r3, #4]
 80867c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80867c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80867c8:	2b00      	cmp	r3, #0
 80867ca:	f000 8140 	beq.w	8086a4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80867ce:	687b      	ldr	r3, [r7, #4]
 80867d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80867d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80867d6:	429a      	cmp	r2, r3
 80867d8:	f080 8139 	bcs.w	8086a4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80867dc:	687b      	ldr	r3, [r7, #4]
 80867de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80867e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80867e4:	687b      	ldr	r3, [r7, #4]
 80867e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80867e8:	69db      	ldr	r3, [r3, #28]
 80867ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80867ee:	f000 8088 	beq.w	8086902 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80867f2:	687b      	ldr	r3, [r7, #4]
 80867f4:	681b      	ldr	r3, [r3, #0]
 80867f6:	330c      	adds	r3, #12
 80867f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80867fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8086800:	e853 3f00 	ldrex	r3, [r3]
 8086804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8086808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 808680c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8086810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8086814:	687b      	ldr	r3, [r7, #4]
 8086816:	681b      	ldr	r3, [r3, #0]
 8086818:	330c      	adds	r3, #12
 808681a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 808681e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8086822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 808682a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 808682e:	e841 2300 	strex	r3, r2, [r1]
 8086832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8086836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 808683a:	2b00      	cmp	r3, #0
 808683c:	d1d9      	bne.n	80867f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808683e:	687b      	ldr	r3, [r7, #4]
 8086840:	681b      	ldr	r3, [r3, #0]
 8086842:	3314      	adds	r3, #20
 8086844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8086848:	e853 3f00 	ldrex	r3, [r3]
 808684c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 808684e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8086850:	f023 0301 	bic.w	r3, r3, #1
 8086854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8086858:	687b      	ldr	r3, [r7, #4]
 808685a:	681b      	ldr	r3, [r3, #0]
 808685c:	3314      	adds	r3, #20
 808685e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8086862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8086866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 808686a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 808686e:	e841 2300 	strex	r3, r2, [r1]
 8086872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8086874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8086876:	2b00      	cmp	r3, #0
 8086878:	d1e1      	bne.n	808683e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 808687a:	687b      	ldr	r3, [r7, #4]
 808687c:	681b      	ldr	r3, [r3, #0]
 808687e:	3314      	adds	r3, #20
 8086880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8086884:	e853 3f00 	ldrex	r3, [r3]
 8086888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 808688a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 808688c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8086890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8086894:	687b      	ldr	r3, [r7, #4]
 8086896:	681b      	ldr	r3, [r3, #0]
 8086898:	3314      	adds	r3, #20
 808689a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 808689e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80868a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80868a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80868a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80868a6:	e841 2300 	strex	r3, r2, [r1]
 80868aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80868ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80868ae:	2b00      	cmp	r3, #0
 80868b0:	d1e3      	bne.n	808687a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80868b2:	687b      	ldr	r3, [r7, #4]
 80868b4:	2220      	movs	r2, #32
 80868b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80868ba:	687b      	ldr	r3, [r7, #4]
 80868bc:	2200      	movs	r2, #0
 80868be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80868c0:	687b      	ldr	r3, [r7, #4]
 80868c2:	681b      	ldr	r3, [r3, #0]
 80868c4:	330c      	adds	r3, #12
 80868c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80868c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80868ca:	e853 3f00 	ldrex	r3, [r3]
 80868ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80868d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80868d2:	f023 0310 	bic.w	r3, r3, #16
 80868d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80868da:	687b      	ldr	r3, [r7, #4]
 80868dc:	681b      	ldr	r3, [r3, #0]
 80868de:	330c      	adds	r3, #12
 80868e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80868e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80868e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80868e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80868ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80868ec:	e841 2300 	strex	r3, r2, [r1]
 80868f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80868f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80868f4:	2b00      	cmp	r3, #0
 80868f6:	d1e3      	bne.n	80868c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80868f8:	687b      	ldr	r3, [r7, #4]
 80868fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80868fc:	4618      	mov	r0, r3
 80868fe:	f7fc f9d3 	bl	8082ca8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8086902:	687b      	ldr	r3, [r7, #4]
 8086904:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8086906:	687b      	ldr	r3, [r7, #4]
 8086908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 808690a:	b29b      	uxth	r3, r3
 808690c:	1ad3      	subs	r3, r2, r3
 808690e:	b29b      	uxth	r3, r3
 8086910:	4619      	mov	r1, r3
 8086912:	6878      	ldr	r0, [r7, #4]
 8086914:	f7fa faca 	bl	8080eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8086918:	e099      	b.n	8086a4e <HAL_UART_IRQHandler+0x50e>
 808691a:	bf00      	nop
 808691c:	08087033 	.word	0x08087033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8086920:	687b      	ldr	r3, [r7, #4]
 8086922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8086924:	687b      	ldr	r3, [r7, #4]
 8086926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8086928:	b29b      	uxth	r3, r3
 808692a:	1ad3      	subs	r3, r2, r3
 808692c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8086930:	687b      	ldr	r3, [r7, #4]
 8086932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8086934:	b29b      	uxth	r3, r3
 8086936:	2b00      	cmp	r3, #0
 8086938:	f000 808b 	beq.w	8086a52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 808693c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8086940:	2b00      	cmp	r3, #0
 8086942:	f000 8086 	beq.w	8086a52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8086946:	687b      	ldr	r3, [r7, #4]
 8086948:	681b      	ldr	r3, [r3, #0]
 808694a:	330c      	adds	r3, #12
 808694c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8086950:	e853 3f00 	ldrex	r3, [r3]
 8086954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8086956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8086958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 808695c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8086960:	687b      	ldr	r3, [r7, #4]
 8086962:	681b      	ldr	r3, [r3, #0]
 8086964:	330c      	adds	r3, #12
 8086966:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 808696a:	647a      	str	r2, [r7, #68]	; 0x44
 808696c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 808696e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8086970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8086972:	e841 2300 	strex	r3, r2, [r1]
 8086976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8086978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 808697a:	2b00      	cmp	r3, #0
 808697c:	d1e3      	bne.n	8086946 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 808697e:	687b      	ldr	r3, [r7, #4]
 8086980:	681b      	ldr	r3, [r3, #0]
 8086982:	3314      	adds	r3, #20
 8086984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086988:	e853 3f00 	ldrex	r3, [r3]
 808698c:	623b      	str	r3, [r7, #32]
   return(result);
 808698e:	6a3b      	ldr	r3, [r7, #32]
 8086990:	f023 0301 	bic.w	r3, r3, #1
 8086994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8086998:	687b      	ldr	r3, [r7, #4]
 808699a:	681b      	ldr	r3, [r3, #0]
 808699c:	3314      	adds	r3, #20
 808699e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80869a2:	633a      	str	r2, [r7, #48]	; 0x30
 80869a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80869a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80869a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80869aa:	e841 2300 	strex	r3, r2, [r1]
 80869ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80869b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80869b2:	2b00      	cmp	r3, #0
 80869b4:	d1e3      	bne.n	808697e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80869b6:	687b      	ldr	r3, [r7, #4]
 80869b8:	2220      	movs	r2, #32
 80869ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80869be:	687b      	ldr	r3, [r7, #4]
 80869c0:	2200      	movs	r2, #0
 80869c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80869c4:	687b      	ldr	r3, [r7, #4]
 80869c6:	681b      	ldr	r3, [r3, #0]
 80869c8:	330c      	adds	r3, #12
 80869ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80869cc:	693b      	ldr	r3, [r7, #16]
 80869ce:	e853 3f00 	ldrex	r3, [r3]
 80869d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80869d4:	68fb      	ldr	r3, [r7, #12]
 80869d6:	f023 0310 	bic.w	r3, r3, #16
 80869da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80869de:	687b      	ldr	r3, [r7, #4]
 80869e0:	681b      	ldr	r3, [r3, #0]
 80869e2:	330c      	adds	r3, #12
 80869e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80869e8:	61fa      	str	r2, [r7, #28]
 80869ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80869ec:	69b9      	ldr	r1, [r7, #24]
 80869ee:	69fa      	ldr	r2, [r7, #28]
 80869f0:	e841 2300 	strex	r3, r2, [r1]
 80869f4:	617b      	str	r3, [r7, #20]
   return(result);
 80869f6:	697b      	ldr	r3, [r7, #20]
 80869f8:	2b00      	cmp	r3, #0
 80869fa:	d1e3      	bne.n	80869c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80869fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8086a00:	4619      	mov	r1, r3
 8086a02:	6878      	ldr	r0, [r7, #4]
 8086a04:	f7fa fa52 	bl	8080eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8086a08:	e023      	b.n	8086a52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8086a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8086a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8086a12:	2b00      	cmp	r3, #0
 8086a14:	d009      	beq.n	8086a2a <HAL_UART_IRQHandler+0x4ea>
 8086a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8086a1e:	2b00      	cmp	r3, #0
 8086a20:	d003      	beq.n	8086a2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8086a22:	6878      	ldr	r0, [r7, #4]
 8086a24:	f000 fb19 	bl	808705a <UART_Transmit_IT>
    return;
 8086a28:	e014      	b.n	8086a54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8086a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8086a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086a32:	2b00      	cmp	r3, #0
 8086a34:	d00e      	beq.n	8086a54 <HAL_UART_IRQHandler+0x514>
 8086a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8086a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086a3e:	2b00      	cmp	r3, #0
 8086a40:	d008      	beq.n	8086a54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8086a42:	6878      	ldr	r0, [r7, #4]
 8086a44:	f000 fb59 	bl	80870fa <UART_EndTransmit_IT>
    return;
 8086a48:	e004      	b.n	8086a54 <HAL_UART_IRQHandler+0x514>
    return;
 8086a4a:	bf00      	nop
 8086a4c:	e002      	b.n	8086a54 <HAL_UART_IRQHandler+0x514>
      return;
 8086a4e:	bf00      	nop
 8086a50:	e000      	b.n	8086a54 <HAL_UART_IRQHandler+0x514>
      return;
 8086a52:	bf00      	nop
  }
}
 8086a54:	37e8      	adds	r7, #232	; 0xe8
 8086a56:	46bd      	mov	sp, r7
 8086a58:	bd80      	pop	{r7, pc}
 8086a5a:	bf00      	nop

08086a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8086a5c:	b480      	push	{r7}
 8086a5e:	b083      	sub	sp, #12
 8086a60:	af00      	add	r7, sp, #0
 8086a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8086a64:	bf00      	nop
 8086a66:	370c      	adds	r7, #12
 8086a68:	46bd      	mov	sp, r7
 8086a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086a6e:	4770      	bx	lr

08086a70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8086a70:	b480      	push	{r7}
 8086a72:	b083      	sub	sp, #12
 8086a74:	af00      	add	r7, sp, #0
 8086a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8086a78:	bf00      	nop
 8086a7a:	370c      	adds	r7, #12
 8086a7c:	46bd      	mov	sp, r7
 8086a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086a82:	4770      	bx	lr

08086a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8086a84:	b480      	push	{r7}
 8086a86:	b083      	sub	sp, #12
 8086a88:	af00      	add	r7, sp, #0
 8086a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8086a8c:	bf00      	nop
 8086a8e:	370c      	adds	r7, #12
 8086a90:	46bd      	mov	sp, r7
 8086a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086a96:	4770      	bx	lr

08086a98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8086a98:	b580      	push	{r7, lr}
 8086a9a:	b09c      	sub	sp, #112	; 0x70
 8086a9c:	af00      	add	r7, sp, #0
 8086a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086aa0:	687b      	ldr	r3, [r7, #4]
 8086aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8086aa6:	687b      	ldr	r3, [r7, #4]
 8086aa8:	681b      	ldr	r3, [r3, #0]
 8086aaa:	681b      	ldr	r3, [r3, #0]
 8086aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8086ab0:	2b00      	cmp	r3, #0
 8086ab2:	d172      	bne.n	8086b9a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8086ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086ab6:	2200      	movs	r2, #0
 8086ab8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8086aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086abc:	681b      	ldr	r3, [r3, #0]
 8086abe:	330c      	adds	r3, #12
 8086ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8086ac4:	e853 3f00 	ldrex	r3, [r3]
 8086ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8086aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8086ad0:	66bb      	str	r3, [r7, #104]	; 0x68
 8086ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086ad4:	681b      	ldr	r3, [r3, #0]
 8086ad6:	330c      	adds	r3, #12
 8086ad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8086ada:	65ba      	str	r2, [r7, #88]	; 0x58
 8086adc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086ade:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8086ae0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8086ae2:	e841 2300 	strex	r3, r2, [r1]
 8086ae6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8086ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8086aea:	2b00      	cmp	r3, #0
 8086aec:	d1e5      	bne.n	8086aba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086af0:	681b      	ldr	r3, [r3, #0]
 8086af2:	3314      	adds	r3, #20
 8086af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8086af8:	e853 3f00 	ldrex	r3, [r3]
 8086afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8086afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8086b00:	f023 0301 	bic.w	r3, r3, #1
 8086b04:	667b      	str	r3, [r7, #100]	; 0x64
 8086b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b08:	681b      	ldr	r3, [r3, #0]
 8086b0a:	3314      	adds	r3, #20
 8086b0c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8086b0e:	647a      	str	r2, [r7, #68]	; 0x44
 8086b10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8086b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8086b16:	e841 2300 	strex	r3, r2, [r1]
 8086b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8086b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8086b1e:	2b00      	cmp	r3, #0
 8086b20:	d1e5      	bne.n	8086aee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8086b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b24:	681b      	ldr	r3, [r3, #0]
 8086b26:	3314      	adds	r3, #20
 8086b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086b2c:	e853 3f00 	ldrex	r3, [r3]
 8086b30:	623b      	str	r3, [r7, #32]
   return(result);
 8086b32:	6a3b      	ldr	r3, [r7, #32]
 8086b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8086b38:	663b      	str	r3, [r7, #96]	; 0x60
 8086b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b3c:	681b      	ldr	r3, [r3, #0]
 8086b3e:	3314      	adds	r3, #20
 8086b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8086b42:	633a      	str	r2, [r7, #48]	; 0x30
 8086b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8086b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8086b4a:	e841 2300 	strex	r3, r2, [r1]
 8086b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8086b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086b52:	2b00      	cmp	r3, #0
 8086b54:	d1e5      	bne.n	8086b22 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8086b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b58:	2220      	movs	r2, #32
 8086b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086b62:	2b01      	cmp	r3, #1
 8086b64:	d119      	bne.n	8086b9a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b68:	681b      	ldr	r3, [r3, #0]
 8086b6a:	330c      	adds	r3, #12
 8086b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086b6e:	693b      	ldr	r3, [r7, #16]
 8086b70:	e853 3f00 	ldrex	r3, [r3]
 8086b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8086b76:	68fb      	ldr	r3, [r7, #12]
 8086b78:	f023 0310 	bic.w	r3, r3, #16
 8086b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8086b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b80:	681b      	ldr	r3, [r3, #0]
 8086b82:	330c      	adds	r3, #12
 8086b84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8086b86:	61fa      	str	r2, [r7, #28]
 8086b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086b8a:	69b9      	ldr	r1, [r7, #24]
 8086b8c:	69fa      	ldr	r2, [r7, #28]
 8086b8e:	e841 2300 	strex	r3, r2, [r1]
 8086b92:	617b      	str	r3, [r7, #20]
   return(result);
 8086b94:	697b      	ldr	r3, [r7, #20]
 8086b96:	2b00      	cmp	r3, #0
 8086b98:	d1e5      	bne.n	8086b66 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086b9e:	2b01      	cmp	r3, #1
 8086ba0:	d106      	bne.n	8086bb0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8086ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8086ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8086ba6:	4619      	mov	r1, r3
 8086ba8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8086baa:	f7fa f97f 	bl	8080eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8086bae:	e002      	b.n	8086bb6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8086bb0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8086bb2:	f7fa fe89 	bl	80818c8 <HAL_UART_RxCpltCallback>
}
 8086bb6:	bf00      	nop
 8086bb8:	3770      	adds	r7, #112	; 0x70
 8086bba:	46bd      	mov	sp, r7
 8086bbc:	bd80      	pop	{r7, pc}

08086bbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8086bbe:	b580      	push	{r7, lr}
 8086bc0:	b084      	sub	sp, #16
 8086bc2:	af00      	add	r7, sp, #0
 8086bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086bc6:	687b      	ldr	r3, [r7, #4]
 8086bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086bca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086bcc:	68fb      	ldr	r3, [r7, #12]
 8086bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086bd0:	2b01      	cmp	r3, #1
 8086bd2:	d108      	bne.n	8086be6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8086bd4:	68fb      	ldr	r3, [r7, #12]
 8086bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8086bd8:	085b      	lsrs	r3, r3, #1
 8086bda:	b29b      	uxth	r3, r3
 8086bdc:	4619      	mov	r1, r3
 8086bde:	68f8      	ldr	r0, [r7, #12]
 8086be0:	f7fa f964 	bl	8080eac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8086be4:	e002      	b.n	8086bec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8086be6:	68f8      	ldr	r0, [r7, #12]
 8086be8:	f7ff ff42 	bl	8086a70 <HAL_UART_RxHalfCpltCallback>
}
 8086bec:	bf00      	nop
 8086bee:	3710      	adds	r7, #16
 8086bf0:	46bd      	mov	sp, r7
 8086bf2:	bd80      	pop	{r7, pc}

08086bf4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8086bf4:	b580      	push	{r7, lr}
 8086bf6:	b084      	sub	sp, #16
 8086bf8:	af00      	add	r7, sp, #0
 8086bfa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8086bfc:	2300      	movs	r3, #0
 8086bfe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8086c00:	687b      	ldr	r3, [r7, #4]
 8086c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086c04:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8086c06:	68bb      	ldr	r3, [r7, #8]
 8086c08:	681b      	ldr	r3, [r3, #0]
 8086c0a:	695b      	ldr	r3, [r3, #20]
 8086c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8086c10:	2b80      	cmp	r3, #128	; 0x80
 8086c12:	bf0c      	ite	eq
 8086c14:	2301      	moveq	r3, #1
 8086c16:	2300      	movne	r3, #0
 8086c18:	b2db      	uxtb	r3, r3
 8086c1a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8086c1c:	68bb      	ldr	r3, [r7, #8]
 8086c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8086c22:	b2db      	uxtb	r3, r3
 8086c24:	2b21      	cmp	r3, #33	; 0x21
 8086c26:	d108      	bne.n	8086c3a <UART_DMAError+0x46>
 8086c28:	68fb      	ldr	r3, [r7, #12]
 8086c2a:	2b00      	cmp	r3, #0
 8086c2c:	d005      	beq.n	8086c3a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8086c2e:	68bb      	ldr	r3, [r7, #8]
 8086c30:	2200      	movs	r2, #0
 8086c32:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8086c34:	68b8      	ldr	r0, [r7, #8]
 8086c36:	f000 f971 	bl	8086f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8086c3a:	68bb      	ldr	r3, [r7, #8]
 8086c3c:	681b      	ldr	r3, [r3, #0]
 8086c3e:	695b      	ldr	r3, [r3, #20]
 8086c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8086c44:	2b40      	cmp	r3, #64	; 0x40
 8086c46:	bf0c      	ite	eq
 8086c48:	2301      	moveq	r3, #1
 8086c4a:	2300      	movne	r3, #0
 8086c4c:	b2db      	uxtb	r3, r3
 8086c4e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8086c50:	68bb      	ldr	r3, [r7, #8]
 8086c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8086c56:	b2db      	uxtb	r3, r3
 8086c58:	2b22      	cmp	r3, #34	; 0x22
 8086c5a:	d108      	bne.n	8086c6e <UART_DMAError+0x7a>
 8086c5c:	68fb      	ldr	r3, [r7, #12]
 8086c5e:	2b00      	cmp	r3, #0
 8086c60:	d005      	beq.n	8086c6e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8086c62:	68bb      	ldr	r3, [r7, #8]
 8086c64:	2200      	movs	r2, #0
 8086c66:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8086c68:	68b8      	ldr	r0, [r7, #8]
 8086c6a:	f000 f97f 	bl	8086f6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8086c6e:	68bb      	ldr	r3, [r7, #8]
 8086c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8086c72:	f043 0210 	orr.w	r2, r3, #16
 8086c76:	68bb      	ldr	r3, [r7, #8]
 8086c78:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8086c7a:	68b8      	ldr	r0, [r7, #8]
 8086c7c:	f7ff ff02 	bl	8086a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8086c80:	bf00      	nop
 8086c82:	3710      	adds	r7, #16
 8086c84:	46bd      	mov	sp, r7
 8086c86:	bd80      	pop	{r7, pc}

08086c88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8086c88:	b580      	push	{r7, lr}
 8086c8a:	b090      	sub	sp, #64	; 0x40
 8086c8c:	af00      	add	r7, sp, #0
 8086c8e:	60f8      	str	r0, [r7, #12]
 8086c90:	60b9      	str	r1, [r7, #8]
 8086c92:	603b      	str	r3, [r7, #0]
 8086c94:	4613      	mov	r3, r2
 8086c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8086c98:	e050      	b.n	8086d3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8086c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8086ca0:	d04c      	beq.n	8086d3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8086ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8086ca4:	2b00      	cmp	r3, #0
 8086ca6:	d007      	beq.n	8086cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8086ca8:	f7fb fd9c 	bl	80827e4 <HAL_GetTick>
 8086cac:	4602      	mov	r2, r0
 8086cae:	683b      	ldr	r3, [r7, #0]
 8086cb0:	1ad3      	subs	r3, r2, r3
 8086cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8086cb4:	429a      	cmp	r2, r3
 8086cb6:	d241      	bcs.n	8086d3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8086cb8:	68fb      	ldr	r3, [r7, #12]
 8086cba:	681b      	ldr	r3, [r3, #0]
 8086cbc:	330c      	adds	r3, #12
 8086cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086cc2:	e853 3f00 	ldrex	r3, [r3]
 8086cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8086cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086cca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8086cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8086cd0:	68fb      	ldr	r3, [r7, #12]
 8086cd2:	681b      	ldr	r3, [r3, #0]
 8086cd4:	330c      	adds	r3, #12
 8086cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8086cd8:	637a      	str	r2, [r7, #52]	; 0x34
 8086cda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086cdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8086cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8086ce0:	e841 2300 	strex	r3, r2, [r1]
 8086ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8086ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086ce8:	2b00      	cmp	r3, #0
 8086cea:	d1e5      	bne.n	8086cb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086cec:	68fb      	ldr	r3, [r7, #12]
 8086cee:	681b      	ldr	r3, [r3, #0]
 8086cf0:	3314      	adds	r3, #20
 8086cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086cf4:	697b      	ldr	r3, [r7, #20]
 8086cf6:	e853 3f00 	ldrex	r3, [r3]
 8086cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8086cfc:	693b      	ldr	r3, [r7, #16]
 8086cfe:	f023 0301 	bic.w	r3, r3, #1
 8086d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8086d04:	68fb      	ldr	r3, [r7, #12]
 8086d06:	681b      	ldr	r3, [r3, #0]
 8086d08:	3314      	adds	r3, #20
 8086d0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8086d0c:	623a      	str	r2, [r7, #32]
 8086d0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086d10:	69f9      	ldr	r1, [r7, #28]
 8086d12:	6a3a      	ldr	r2, [r7, #32]
 8086d14:	e841 2300 	strex	r3, r2, [r1]
 8086d18:	61bb      	str	r3, [r7, #24]
   return(result);
 8086d1a:	69bb      	ldr	r3, [r7, #24]
 8086d1c:	2b00      	cmp	r3, #0
 8086d1e:	d1e5      	bne.n	8086cec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8086d20:	68fb      	ldr	r3, [r7, #12]
 8086d22:	2220      	movs	r2, #32
 8086d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8086d28:	68fb      	ldr	r3, [r7, #12]
 8086d2a:	2220      	movs	r2, #32
 8086d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8086d30:	68fb      	ldr	r3, [r7, #12]
 8086d32:	2200      	movs	r2, #0
 8086d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8086d38:	2303      	movs	r3, #3
 8086d3a:	e00f      	b.n	8086d5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8086d3c:	68fb      	ldr	r3, [r7, #12]
 8086d3e:	681b      	ldr	r3, [r3, #0]
 8086d40:	681a      	ldr	r2, [r3, #0]
 8086d42:	68bb      	ldr	r3, [r7, #8]
 8086d44:	4013      	ands	r3, r2
 8086d46:	68ba      	ldr	r2, [r7, #8]
 8086d48:	429a      	cmp	r2, r3
 8086d4a:	bf0c      	ite	eq
 8086d4c:	2301      	moveq	r3, #1
 8086d4e:	2300      	movne	r3, #0
 8086d50:	b2db      	uxtb	r3, r3
 8086d52:	461a      	mov	r2, r3
 8086d54:	79fb      	ldrb	r3, [r7, #7]
 8086d56:	429a      	cmp	r2, r3
 8086d58:	d09f      	beq.n	8086c9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8086d5a:	2300      	movs	r3, #0
}
 8086d5c:	4618      	mov	r0, r3
 8086d5e:	3740      	adds	r7, #64	; 0x40
 8086d60:	46bd      	mov	sp, r7
 8086d62:	bd80      	pop	{r7, pc}

08086d64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8086d64:	b480      	push	{r7}
 8086d66:	b085      	sub	sp, #20
 8086d68:	af00      	add	r7, sp, #0
 8086d6a:	60f8      	str	r0, [r7, #12]
 8086d6c:	60b9      	str	r1, [r7, #8]
 8086d6e:	4613      	mov	r3, r2
 8086d70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8086d72:	68fb      	ldr	r3, [r7, #12]
 8086d74:	68ba      	ldr	r2, [r7, #8]
 8086d76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8086d78:	68fb      	ldr	r3, [r7, #12]
 8086d7a:	88fa      	ldrh	r2, [r7, #6]
 8086d7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8086d7e:	68fb      	ldr	r3, [r7, #12]
 8086d80:	88fa      	ldrh	r2, [r7, #6]
 8086d82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8086d84:	68fb      	ldr	r3, [r7, #12]
 8086d86:	2200      	movs	r2, #0
 8086d88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8086d8a:	68fb      	ldr	r3, [r7, #12]
 8086d8c:	2222      	movs	r2, #34	; 0x22
 8086d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8086d92:	68fb      	ldr	r3, [r7, #12]
 8086d94:	2200      	movs	r2, #0
 8086d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8086d9a:	68fb      	ldr	r3, [r7, #12]
 8086d9c:	691b      	ldr	r3, [r3, #16]
 8086d9e:	2b00      	cmp	r3, #0
 8086da0:	d007      	beq.n	8086db2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8086da2:	68fb      	ldr	r3, [r7, #12]
 8086da4:	681b      	ldr	r3, [r3, #0]
 8086da6:	68da      	ldr	r2, [r3, #12]
 8086da8:	68fb      	ldr	r3, [r7, #12]
 8086daa:	681b      	ldr	r3, [r3, #0]
 8086dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8086db0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8086db2:	68fb      	ldr	r3, [r7, #12]
 8086db4:	681b      	ldr	r3, [r3, #0]
 8086db6:	695a      	ldr	r2, [r3, #20]
 8086db8:	68fb      	ldr	r3, [r7, #12]
 8086dba:	681b      	ldr	r3, [r3, #0]
 8086dbc:	f042 0201 	orr.w	r2, r2, #1
 8086dc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8086dc2:	68fb      	ldr	r3, [r7, #12]
 8086dc4:	681b      	ldr	r3, [r3, #0]
 8086dc6:	68da      	ldr	r2, [r3, #12]
 8086dc8:	68fb      	ldr	r3, [r7, #12]
 8086dca:	681b      	ldr	r3, [r3, #0]
 8086dcc:	f042 0220 	orr.w	r2, r2, #32
 8086dd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8086dd2:	2300      	movs	r3, #0
}
 8086dd4:	4618      	mov	r0, r3
 8086dd6:	3714      	adds	r7, #20
 8086dd8:	46bd      	mov	sp, r7
 8086dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086dde:	4770      	bx	lr

08086de0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8086de0:	b580      	push	{r7, lr}
 8086de2:	b098      	sub	sp, #96	; 0x60
 8086de4:	af00      	add	r7, sp, #0
 8086de6:	60f8      	str	r0, [r7, #12]
 8086de8:	60b9      	str	r1, [r7, #8]
 8086dea:	4613      	mov	r3, r2
 8086dec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8086dee:	68ba      	ldr	r2, [r7, #8]
 8086df0:	68fb      	ldr	r3, [r7, #12]
 8086df2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8086df4:	68fb      	ldr	r3, [r7, #12]
 8086df6:	88fa      	ldrh	r2, [r7, #6]
 8086df8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8086dfa:	68fb      	ldr	r3, [r7, #12]
 8086dfc:	2200      	movs	r2, #0
 8086dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8086e00:	68fb      	ldr	r3, [r7, #12]
 8086e02:	2222      	movs	r2, #34	; 0x22
 8086e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8086e08:	68fb      	ldr	r3, [r7, #12]
 8086e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086e0c:	4a40      	ldr	r2, [pc, #256]	; (8086f10 <UART_Start_Receive_DMA+0x130>)
 8086e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8086e10:	68fb      	ldr	r3, [r7, #12]
 8086e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086e14:	4a3f      	ldr	r2, [pc, #252]	; (8086f14 <UART_Start_Receive_DMA+0x134>)
 8086e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8086e18:	68fb      	ldr	r3, [r7, #12]
 8086e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086e1c:	4a3e      	ldr	r2, [pc, #248]	; (8086f18 <UART_Start_Receive_DMA+0x138>)
 8086e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8086e20:	68fb      	ldr	r3, [r7, #12]
 8086e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8086e24:	2200      	movs	r2, #0
 8086e26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8086e28:	f107 0308 	add.w	r3, r7, #8
 8086e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8086e2e:	68fb      	ldr	r3, [r7, #12]
 8086e30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8086e32:	68fb      	ldr	r3, [r7, #12]
 8086e34:	681b      	ldr	r3, [r3, #0]
 8086e36:	3304      	adds	r3, #4
 8086e38:	4619      	mov	r1, r3
 8086e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8086e3c:	681a      	ldr	r2, [r3, #0]
 8086e3e:	88fb      	ldrh	r3, [r7, #6]
 8086e40:	f7fb feda 	bl	8082bf8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8086e44:	2300      	movs	r3, #0
 8086e46:	613b      	str	r3, [r7, #16]
 8086e48:	68fb      	ldr	r3, [r7, #12]
 8086e4a:	681b      	ldr	r3, [r3, #0]
 8086e4c:	681b      	ldr	r3, [r3, #0]
 8086e4e:	613b      	str	r3, [r7, #16]
 8086e50:	68fb      	ldr	r3, [r7, #12]
 8086e52:	681b      	ldr	r3, [r3, #0]
 8086e54:	685b      	ldr	r3, [r3, #4]
 8086e56:	613b      	str	r3, [r7, #16]
 8086e58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8086e5a:	68fb      	ldr	r3, [r7, #12]
 8086e5c:	2200      	movs	r2, #0
 8086e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8086e62:	68fb      	ldr	r3, [r7, #12]
 8086e64:	691b      	ldr	r3, [r3, #16]
 8086e66:	2b00      	cmp	r3, #0
 8086e68:	d019      	beq.n	8086e9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8086e6a:	68fb      	ldr	r3, [r7, #12]
 8086e6c:	681b      	ldr	r3, [r3, #0]
 8086e6e:	330c      	adds	r3, #12
 8086e70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8086e74:	e853 3f00 	ldrex	r3, [r3]
 8086e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8086e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8086e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8086e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8086e82:	68fb      	ldr	r3, [r7, #12]
 8086e84:	681b      	ldr	r3, [r3, #0]
 8086e86:	330c      	adds	r3, #12
 8086e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8086e8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8086e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086e8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8086e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8086e92:	e841 2300 	strex	r3, r2, [r1]
 8086e96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8086e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8086e9a:	2b00      	cmp	r3, #0
 8086e9c:	d1e5      	bne.n	8086e6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086e9e:	68fb      	ldr	r3, [r7, #12]
 8086ea0:	681b      	ldr	r3, [r3, #0]
 8086ea2:	3314      	adds	r3, #20
 8086ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8086ea8:	e853 3f00 	ldrex	r3, [r3]
 8086eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8086eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8086eb0:	f043 0301 	orr.w	r3, r3, #1
 8086eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8086eb6:	68fb      	ldr	r3, [r7, #12]
 8086eb8:	681b      	ldr	r3, [r3, #0]
 8086eba:	3314      	adds	r3, #20
 8086ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8086ebe:	63ba      	str	r2, [r7, #56]	; 0x38
 8086ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8086ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8086ec6:	e841 2300 	strex	r3, r2, [r1]
 8086eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8086ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8086ece:	2b00      	cmp	r3, #0
 8086ed0:	d1e5      	bne.n	8086e9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8086ed2:	68fb      	ldr	r3, [r7, #12]
 8086ed4:	681b      	ldr	r3, [r3, #0]
 8086ed6:	3314      	adds	r3, #20
 8086ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086eda:	69bb      	ldr	r3, [r7, #24]
 8086edc:	e853 3f00 	ldrex	r3, [r3]
 8086ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8086ee2:	697b      	ldr	r3, [r7, #20]
 8086ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8086ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8086eea:	68fb      	ldr	r3, [r7, #12]
 8086eec:	681b      	ldr	r3, [r3, #0]
 8086eee:	3314      	adds	r3, #20
 8086ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8086ef2:	627a      	str	r2, [r7, #36]	; 0x24
 8086ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086ef6:	6a39      	ldr	r1, [r7, #32]
 8086ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8086efa:	e841 2300 	strex	r3, r2, [r1]
 8086efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8086f00:	69fb      	ldr	r3, [r7, #28]
 8086f02:	2b00      	cmp	r3, #0
 8086f04:	d1e5      	bne.n	8086ed2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8086f06:	2300      	movs	r3, #0
}
 8086f08:	4618      	mov	r0, r3
 8086f0a:	3760      	adds	r7, #96	; 0x60
 8086f0c:	46bd      	mov	sp, r7
 8086f0e:	bd80      	pop	{r7, pc}
 8086f10:	08086a99 	.word	0x08086a99
 8086f14:	08086bbf 	.word	0x08086bbf
 8086f18:	08086bf5 	.word	0x08086bf5

08086f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8086f1c:	b480      	push	{r7}
 8086f1e:	b089      	sub	sp, #36	; 0x24
 8086f20:	af00      	add	r7, sp, #0
 8086f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8086f24:	687b      	ldr	r3, [r7, #4]
 8086f26:	681b      	ldr	r3, [r3, #0]
 8086f28:	330c      	adds	r3, #12
 8086f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086f2c:	68fb      	ldr	r3, [r7, #12]
 8086f2e:	e853 3f00 	ldrex	r3, [r3]
 8086f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8086f34:	68bb      	ldr	r3, [r7, #8]
 8086f36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8086f3a:	61fb      	str	r3, [r7, #28]
 8086f3c:	687b      	ldr	r3, [r7, #4]
 8086f3e:	681b      	ldr	r3, [r3, #0]
 8086f40:	330c      	adds	r3, #12
 8086f42:	69fa      	ldr	r2, [r7, #28]
 8086f44:	61ba      	str	r2, [r7, #24]
 8086f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086f48:	6979      	ldr	r1, [r7, #20]
 8086f4a:	69ba      	ldr	r2, [r7, #24]
 8086f4c:	e841 2300 	strex	r3, r2, [r1]
 8086f50:	613b      	str	r3, [r7, #16]
   return(result);
 8086f52:	693b      	ldr	r3, [r7, #16]
 8086f54:	2b00      	cmp	r3, #0
 8086f56:	d1e5      	bne.n	8086f24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8086f58:	687b      	ldr	r3, [r7, #4]
 8086f5a:	2220      	movs	r2, #32
 8086f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8086f60:	bf00      	nop
 8086f62:	3724      	adds	r7, #36	; 0x24
 8086f64:	46bd      	mov	sp, r7
 8086f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8086f6a:	4770      	bx	lr

08086f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8086f6c:	b480      	push	{r7}
 8086f6e:	b095      	sub	sp, #84	; 0x54
 8086f70:	af00      	add	r7, sp, #0
 8086f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8086f74:	687b      	ldr	r3, [r7, #4]
 8086f76:	681b      	ldr	r3, [r3, #0]
 8086f78:	330c      	adds	r3, #12
 8086f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8086f7e:	e853 3f00 	ldrex	r3, [r3]
 8086f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8086f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8086f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8086f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8086f8c:	687b      	ldr	r3, [r7, #4]
 8086f8e:	681b      	ldr	r3, [r3, #0]
 8086f90:	330c      	adds	r3, #12
 8086f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8086f94:	643a      	str	r2, [r7, #64]	; 0x40
 8086f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8086f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8086f9c:	e841 2300 	strex	r3, r2, [r1]
 8086fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8086fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8086fa4:	2b00      	cmp	r3, #0
 8086fa6:	d1e5      	bne.n	8086f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8086fa8:	687b      	ldr	r3, [r7, #4]
 8086faa:	681b      	ldr	r3, [r3, #0]
 8086fac:	3314      	adds	r3, #20
 8086fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086fb0:	6a3b      	ldr	r3, [r7, #32]
 8086fb2:	e853 3f00 	ldrex	r3, [r3]
 8086fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8086fb8:	69fb      	ldr	r3, [r7, #28]
 8086fba:	f023 0301 	bic.w	r3, r3, #1
 8086fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8086fc0:	687b      	ldr	r3, [r7, #4]
 8086fc2:	681b      	ldr	r3, [r3, #0]
 8086fc4:	3314      	adds	r3, #20
 8086fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8086fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8086fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8086fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8086fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8086fd0:	e841 2300 	strex	r3, r2, [r1]
 8086fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8086fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8086fd8:	2b00      	cmp	r3, #0
 8086fda:	d1e5      	bne.n	8086fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8086fdc:	687b      	ldr	r3, [r7, #4]
 8086fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8086fe0:	2b01      	cmp	r3, #1
 8086fe2:	d119      	bne.n	8087018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8086fe4:	687b      	ldr	r3, [r7, #4]
 8086fe6:	681b      	ldr	r3, [r3, #0]
 8086fe8:	330c      	adds	r3, #12
 8086fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8086fec:	68fb      	ldr	r3, [r7, #12]
 8086fee:	e853 3f00 	ldrex	r3, [r3]
 8086ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8086ff4:	68bb      	ldr	r3, [r7, #8]
 8086ff6:	f023 0310 	bic.w	r3, r3, #16
 8086ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8086ffc:	687b      	ldr	r3, [r7, #4]
 8086ffe:	681b      	ldr	r3, [r3, #0]
 8087000:	330c      	adds	r3, #12
 8087002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8087004:	61ba      	str	r2, [r7, #24]
 8087006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8087008:	6979      	ldr	r1, [r7, #20]
 808700a:	69ba      	ldr	r2, [r7, #24]
 808700c:	e841 2300 	strex	r3, r2, [r1]
 8087010:	613b      	str	r3, [r7, #16]
   return(result);
 8087012:	693b      	ldr	r3, [r7, #16]
 8087014:	2b00      	cmp	r3, #0
 8087016:	d1e5      	bne.n	8086fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8087018:	687b      	ldr	r3, [r7, #4]
 808701a:	2220      	movs	r2, #32
 808701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8087020:	687b      	ldr	r3, [r7, #4]
 8087022:	2200      	movs	r2, #0
 8087024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8087026:	bf00      	nop
 8087028:	3754      	adds	r7, #84	; 0x54
 808702a:	46bd      	mov	sp, r7
 808702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087030:	4770      	bx	lr

08087032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8087032:	b580      	push	{r7, lr}
 8087034:	b084      	sub	sp, #16
 8087036:	af00      	add	r7, sp, #0
 8087038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 808703a:	687b      	ldr	r3, [r7, #4]
 808703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808703e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8087040:	68fb      	ldr	r3, [r7, #12]
 8087042:	2200      	movs	r2, #0
 8087044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8087046:	68fb      	ldr	r3, [r7, #12]
 8087048:	2200      	movs	r2, #0
 808704a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 808704c:	68f8      	ldr	r0, [r7, #12]
 808704e:	f7ff fd19 	bl	8086a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8087052:	bf00      	nop
 8087054:	3710      	adds	r7, #16
 8087056:	46bd      	mov	sp, r7
 8087058:	bd80      	pop	{r7, pc}

0808705a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 808705a:	b480      	push	{r7}
 808705c:	b085      	sub	sp, #20
 808705e:	af00      	add	r7, sp, #0
 8087060:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8087062:	687b      	ldr	r3, [r7, #4]
 8087064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8087068:	b2db      	uxtb	r3, r3
 808706a:	2b21      	cmp	r3, #33	; 0x21
 808706c:	d13e      	bne.n	80870ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 808706e:	687b      	ldr	r3, [r7, #4]
 8087070:	689b      	ldr	r3, [r3, #8]
 8087072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8087076:	d114      	bne.n	80870a2 <UART_Transmit_IT+0x48>
 8087078:	687b      	ldr	r3, [r7, #4]
 808707a:	691b      	ldr	r3, [r3, #16]
 808707c:	2b00      	cmp	r3, #0
 808707e:	d110      	bne.n	80870a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8087080:	687b      	ldr	r3, [r7, #4]
 8087082:	6a1b      	ldr	r3, [r3, #32]
 8087084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8087086:	68fb      	ldr	r3, [r7, #12]
 8087088:	881b      	ldrh	r3, [r3, #0]
 808708a:	461a      	mov	r2, r3
 808708c:	687b      	ldr	r3, [r7, #4]
 808708e:	681b      	ldr	r3, [r3, #0]
 8087090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8087094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8087096:	687b      	ldr	r3, [r7, #4]
 8087098:	6a1b      	ldr	r3, [r3, #32]
 808709a:	1c9a      	adds	r2, r3, #2
 808709c:	687b      	ldr	r3, [r7, #4]
 808709e:	621a      	str	r2, [r3, #32]
 80870a0:	e008      	b.n	80870b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80870a2:	687b      	ldr	r3, [r7, #4]
 80870a4:	6a1b      	ldr	r3, [r3, #32]
 80870a6:	1c59      	adds	r1, r3, #1
 80870a8:	687a      	ldr	r2, [r7, #4]
 80870aa:	6211      	str	r1, [r2, #32]
 80870ac:	781a      	ldrb	r2, [r3, #0]
 80870ae:	687b      	ldr	r3, [r7, #4]
 80870b0:	681b      	ldr	r3, [r3, #0]
 80870b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80870b4:	687b      	ldr	r3, [r7, #4]
 80870b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80870b8:	b29b      	uxth	r3, r3
 80870ba:	3b01      	subs	r3, #1
 80870bc:	b29b      	uxth	r3, r3
 80870be:	687a      	ldr	r2, [r7, #4]
 80870c0:	4619      	mov	r1, r3
 80870c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80870c4:	2b00      	cmp	r3, #0
 80870c6:	d10f      	bne.n	80870e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80870c8:	687b      	ldr	r3, [r7, #4]
 80870ca:	681b      	ldr	r3, [r3, #0]
 80870cc:	68da      	ldr	r2, [r3, #12]
 80870ce:	687b      	ldr	r3, [r7, #4]
 80870d0:	681b      	ldr	r3, [r3, #0]
 80870d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80870d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80870d8:	687b      	ldr	r3, [r7, #4]
 80870da:	681b      	ldr	r3, [r3, #0]
 80870dc:	68da      	ldr	r2, [r3, #12]
 80870de:	687b      	ldr	r3, [r7, #4]
 80870e0:	681b      	ldr	r3, [r3, #0]
 80870e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80870e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80870e8:	2300      	movs	r3, #0
 80870ea:	e000      	b.n	80870ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80870ec:	2302      	movs	r3, #2
  }
}
 80870ee:	4618      	mov	r0, r3
 80870f0:	3714      	adds	r7, #20
 80870f2:	46bd      	mov	sp, r7
 80870f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80870f8:	4770      	bx	lr

080870fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80870fa:	b580      	push	{r7, lr}
 80870fc:	b082      	sub	sp, #8
 80870fe:	af00      	add	r7, sp, #0
 8087100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8087102:	687b      	ldr	r3, [r7, #4]
 8087104:	681b      	ldr	r3, [r3, #0]
 8087106:	68da      	ldr	r2, [r3, #12]
 8087108:	687b      	ldr	r3, [r7, #4]
 808710a:	681b      	ldr	r3, [r3, #0]
 808710c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8087110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8087112:	687b      	ldr	r3, [r7, #4]
 8087114:	2220      	movs	r2, #32
 8087116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 808711a:	6878      	ldr	r0, [r7, #4]
 808711c:	f7ff fc9e 	bl	8086a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8087120:	2300      	movs	r3, #0
}
 8087122:	4618      	mov	r0, r3
 8087124:	3708      	adds	r7, #8
 8087126:	46bd      	mov	sp, r7
 8087128:	bd80      	pop	{r7, pc}

0808712a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 808712a:	b580      	push	{r7, lr}
 808712c:	b08c      	sub	sp, #48	; 0x30
 808712e:	af00      	add	r7, sp, #0
 8087130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8087132:	687b      	ldr	r3, [r7, #4]
 8087134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8087138:	b2db      	uxtb	r3, r3
 808713a:	2b22      	cmp	r3, #34	; 0x22
 808713c:	f040 80ab 	bne.w	8087296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8087140:	687b      	ldr	r3, [r7, #4]
 8087142:	689b      	ldr	r3, [r3, #8]
 8087144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8087148:	d117      	bne.n	808717a <UART_Receive_IT+0x50>
 808714a:	687b      	ldr	r3, [r7, #4]
 808714c:	691b      	ldr	r3, [r3, #16]
 808714e:	2b00      	cmp	r3, #0
 8087150:	d113      	bne.n	808717a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8087152:	2300      	movs	r3, #0
 8087154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8087156:	687b      	ldr	r3, [r7, #4]
 8087158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808715a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 808715c:	687b      	ldr	r3, [r7, #4]
 808715e:	681b      	ldr	r3, [r3, #0]
 8087160:	685b      	ldr	r3, [r3, #4]
 8087162:	b29b      	uxth	r3, r3
 8087164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8087168:	b29a      	uxth	r2, r3
 808716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808716c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 808716e:	687b      	ldr	r3, [r7, #4]
 8087170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087172:	1c9a      	adds	r2, r3, #2
 8087174:	687b      	ldr	r3, [r7, #4]
 8087176:	629a      	str	r2, [r3, #40]	; 0x28
 8087178:	e026      	b.n	80871c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 808717a:	687b      	ldr	r3, [r7, #4]
 808717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808717e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8087180:	2300      	movs	r3, #0
 8087182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8087184:	687b      	ldr	r3, [r7, #4]
 8087186:	689b      	ldr	r3, [r3, #8]
 8087188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 808718c:	d007      	beq.n	808719e <UART_Receive_IT+0x74>
 808718e:	687b      	ldr	r3, [r7, #4]
 8087190:	689b      	ldr	r3, [r3, #8]
 8087192:	2b00      	cmp	r3, #0
 8087194:	d10a      	bne.n	80871ac <UART_Receive_IT+0x82>
 8087196:	687b      	ldr	r3, [r7, #4]
 8087198:	691b      	ldr	r3, [r3, #16]
 808719a:	2b00      	cmp	r3, #0
 808719c:	d106      	bne.n	80871ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 808719e:	687b      	ldr	r3, [r7, #4]
 80871a0:	681b      	ldr	r3, [r3, #0]
 80871a2:	685b      	ldr	r3, [r3, #4]
 80871a4:	b2da      	uxtb	r2, r3
 80871a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80871a8:	701a      	strb	r2, [r3, #0]
 80871aa:	e008      	b.n	80871be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80871ac:	687b      	ldr	r3, [r7, #4]
 80871ae:	681b      	ldr	r3, [r3, #0]
 80871b0:	685b      	ldr	r3, [r3, #4]
 80871b2:	b2db      	uxtb	r3, r3
 80871b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80871b8:	b2da      	uxtb	r2, r3
 80871ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80871bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80871be:	687b      	ldr	r3, [r7, #4]
 80871c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80871c2:	1c5a      	adds	r2, r3, #1
 80871c4:	687b      	ldr	r3, [r7, #4]
 80871c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80871c8:	687b      	ldr	r3, [r7, #4]
 80871ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80871cc:	b29b      	uxth	r3, r3
 80871ce:	3b01      	subs	r3, #1
 80871d0:	b29b      	uxth	r3, r3
 80871d2:	687a      	ldr	r2, [r7, #4]
 80871d4:	4619      	mov	r1, r3
 80871d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80871d8:	2b00      	cmp	r3, #0
 80871da:	d15a      	bne.n	8087292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80871dc:	687b      	ldr	r3, [r7, #4]
 80871de:	681b      	ldr	r3, [r3, #0]
 80871e0:	68da      	ldr	r2, [r3, #12]
 80871e2:	687b      	ldr	r3, [r7, #4]
 80871e4:	681b      	ldr	r3, [r3, #0]
 80871e6:	f022 0220 	bic.w	r2, r2, #32
 80871ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80871ec:	687b      	ldr	r3, [r7, #4]
 80871ee:	681b      	ldr	r3, [r3, #0]
 80871f0:	68da      	ldr	r2, [r3, #12]
 80871f2:	687b      	ldr	r3, [r7, #4]
 80871f4:	681b      	ldr	r3, [r3, #0]
 80871f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80871fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80871fc:	687b      	ldr	r3, [r7, #4]
 80871fe:	681b      	ldr	r3, [r3, #0]
 8087200:	695a      	ldr	r2, [r3, #20]
 8087202:	687b      	ldr	r3, [r7, #4]
 8087204:	681b      	ldr	r3, [r3, #0]
 8087206:	f022 0201 	bic.w	r2, r2, #1
 808720a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 808720c:	687b      	ldr	r3, [r7, #4]
 808720e:	2220      	movs	r2, #32
 8087210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8087214:	687b      	ldr	r3, [r7, #4]
 8087216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087218:	2b01      	cmp	r3, #1
 808721a:	d135      	bne.n	8087288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 808721c:	687b      	ldr	r3, [r7, #4]
 808721e:	2200      	movs	r2, #0
 8087220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8087222:	687b      	ldr	r3, [r7, #4]
 8087224:	681b      	ldr	r3, [r3, #0]
 8087226:	330c      	adds	r3, #12
 8087228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 808722a:	697b      	ldr	r3, [r7, #20]
 808722c:	e853 3f00 	ldrex	r3, [r3]
 8087230:	613b      	str	r3, [r7, #16]
   return(result);
 8087232:	693b      	ldr	r3, [r7, #16]
 8087234:	f023 0310 	bic.w	r3, r3, #16
 8087238:	627b      	str	r3, [r7, #36]	; 0x24
 808723a:	687b      	ldr	r3, [r7, #4]
 808723c:	681b      	ldr	r3, [r3, #0]
 808723e:	330c      	adds	r3, #12
 8087240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8087242:	623a      	str	r2, [r7, #32]
 8087244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8087246:	69f9      	ldr	r1, [r7, #28]
 8087248:	6a3a      	ldr	r2, [r7, #32]
 808724a:	e841 2300 	strex	r3, r2, [r1]
 808724e:	61bb      	str	r3, [r7, #24]
   return(result);
 8087250:	69bb      	ldr	r3, [r7, #24]
 8087252:	2b00      	cmp	r3, #0
 8087254:	d1e5      	bne.n	8087222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8087256:	687b      	ldr	r3, [r7, #4]
 8087258:	681b      	ldr	r3, [r3, #0]
 808725a:	681b      	ldr	r3, [r3, #0]
 808725c:	f003 0310 	and.w	r3, r3, #16
 8087260:	2b10      	cmp	r3, #16
 8087262:	d10a      	bne.n	808727a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8087264:	2300      	movs	r3, #0
 8087266:	60fb      	str	r3, [r7, #12]
 8087268:	687b      	ldr	r3, [r7, #4]
 808726a:	681b      	ldr	r3, [r3, #0]
 808726c:	681b      	ldr	r3, [r3, #0]
 808726e:	60fb      	str	r3, [r7, #12]
 8087270:	687b      	ldr	r3, [r7, #4]
 8087272:	681b      	ldr	r3, [r3, #0]
 8087274:	685b      	ldr	r3, [r3, #4]
 8087276:	60fb      	str	r3, [r7, #12]
 8087278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 808727a:	687b      	ldr	r3, [r7, #4]
 808727c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 808727e:	4619      	mov	r1, r3
 8087280:	6878      	ldr	r0, [r7, #4]
 8087282:	f7f9 fe13 	bl	8080eac <HAL_UARTEx_RxEventCallback>
 8087286:	e002      	b.n	808728e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8087288:	6878      	ldr	r0, [r7, #4]
 808728a:	f7fa fb1d 	bl	80818c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 808728e:	2300      	movs	r3, #0
 8087290:	e002      	b.n	8087298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8087292:	2300      	movs	r3, #0
 8087294:	e000      	b.n	8087298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8087296:	2302      	movs	r3, #2
  }
}
 8087298:	4618      	mov	r0, r3
 808729a:	3730      	adds	r7, #48	; 0x30
 808729c:	46bd      	mov	sp, r7
 808729e:	bd80      	pop	{r7, pc}

080872a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80872a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80872a4:	b0c0      	sub	sp, #256	; 0x100
 80872a6:	af00      	add	r7, sp, #0
 80872a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80872ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872b0:	681b      	ldr	r3, [r3, #0]
 80872b2:	691b      	ldr	r3, [r3, #16]
 80872b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80872b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872bc:	68d9      	ldr	r1, [r3, #12]
 80872be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872c2:	681a      	ldr	r2, [r3, #0]
 80872c4:	ea40 0301 	orr.w	r3, r0, r1
 80872c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80872ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872ce:	689a      	ldr	r2, [r3, #8]
 80872d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872d4:	691b      	ldr	r3, [r3, #16]
 80872d6:	431a      	orrs	r2, r3
 80872d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872dc:	695b      	ldr	r3, [r3, #20]
 80872de:	431a      	orrs	r2, r3
 80872e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872e4:	69db      	ldr	r3, [r3, #28]
 80872e6:	4313      	orrs	r3, r2
 80872e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80872ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80872f0:	681b      	ldr	r3, [r3, #0]
 80872f2:	68db      	ldr	r3, [r3, #12]
 80872f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80872f8:	f021 010c 	bic.w	r1, r1, #12
 80872fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087300:	681a      	ldr	r2, [r3, #0]
 8087302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8087306:	430b      	orrs	r3, r1
 8087308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 808730a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 808730e:	681b      	ldr	r3, [r3, #0]
 8087310:	695b      	ldr	r3, [r3, #20]
 8087312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8087316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 808731a:	6999      	ldr	r1, [r3, #24]
 808731c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087320:	681a      	ldr	r2, [r3, #0]
 8087322:	ea40 0301 	orr.w	r3, r0, r1
 8087326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8087328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 808732c:	681a      	ldr	r2, [r3, #0]
 808732e:	4b8f      	ldr	r3, [pc, #572]	; (808756c <UART_SetConfig+0x2cc>)
 8087330:	429a      	cmp	r2, r3
 8087332:	d005      	beq.n	8087340 <UART_SetConfig+0xa0>
 8087334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087338:	681a      	ldr	r2, [r3, #0]
 808733a:	4b8d      	ldr	r3, [pc, #564]	; (8087570 <UART_SetConfig+0x2d0>)
 808733c:	429a      	cmp	r2, r3
 808733e:	d104      	bne.n	808734a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8087340:	f7fc fffe 	bl	8084340 <HAL_RCC_GetPCLK2Freq>
 8087344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8087348:	e003      	b.n	8087352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 808734a:	f7fc ffe5 	bl	8084318 <HAL_RCC_GetPCLK1Freq>
 808734e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8087352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087356:	69db      	ldr	r3, [r3, #28]
 8087358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 808735c:	f040 810c 	bne.w	8087578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8087360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8087364:	2200      	movs	r2, #0
 8087366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 808736a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 808736e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8087372:	4622      	mov	r2, r4
 8087374:	462b      	mov	r3, r5
 8087376:	1891      	adds	r1, r2, r2
 8087378:	65b9      	str	r1, [r7, #88]	; 0x58
 808737a:	415b      	adcs	r3, r3
 808737c:	65fb      	str	r3, [r7, #92]	; 0x5c
 808737e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8087382:	4621      	mov	r1, r4
 8087384:	eb12 0801 	adds.w	r8, r2, r1
 8087388:	4629      	mov	r1, r5
 808738a:	eb43 0901 	adc.w	r9, r3, r1
 808738e:	f04f 0200 	mov.w	r2, #0
 8087392:	f04f 0300 	mov.w	r3, #0
 8087396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 808739a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 808739e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80873a2:	4690      	mov	r8, r2
 80873a4:	4699      	mov	r9, r3
 80873a6:	4623      	mov	r3, r4
 80873a8:	eb18 0303 	adds.w	r3, r8, r3
 80873ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80873b0:	462b      	mov	r3, r5
 80873b2:	eb49 0303 	adc.w	r3, r9, r3
 80873b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80873ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80873be:	685b      	ldr	r3, [r3, #4]
 80873c0:	2200      	movs	r2, #0
 80873c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80873c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80873ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80873ce:	460b      	mov	r3, r1
 80873d0:	18db      	adds	r3, r3, r3
 80873d2:	653b      	str	r3, [r7, #80]	; 0x50
 80873d4:	4613      	mov	r3, r2
 80873d6:	eb42 0303 	adc.w	r3, r2, r3
 80873da:	657b      	str	r3, [r7, #84]	; 0x54
 80873dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80873e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80873e4:	f7f9 fbe0 	bl	8080ba8 <__aeabi_uldivmod>
 80873e8:	4602      	mov	r2, r0
 80873ea:	460b      	mov	r3, r1
 80873ec:	4b61      	ldr	r3, [pc, #388]	; (8087574 <UART_SetConfig+0x2d4>)
 80873ee:	fba3 2302 	umull	r2, r3, r3, r2
 80873f2:	095b      	lsrs	r3, r3, #5
 80873f4:	011c      	lsls	r4, r3, #4
 80873f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80873fa:	2200      	movs	r2, #0
 80873fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8087400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8087404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8087408:	4642      	mov	r2, r8
 808740a:	464b      	mov	r3, r9
 808740c:	1891      	adds	r1, r2, r2
 808740e:	64b9      	str	r1, [r7, #72]	; 0x48
 8087410:	415b      	adcs	r3, r3
 8087412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8087414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8087418:	4641      	mov	r1, r8
 808741a:	eb12 0a01 	adds.w	sl, r2, r1
 808741e:	4649      	mov	r1, r9
 8087420:	eb43 0b01 	adc.w	fp, r3, r1
 8087424:	f04f 0200 	mov.w	r2, #0
 8087428:	f04f 0300 	mov.w	r3, #0
 808742c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8087430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8087434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8087438:	4692      	mov	sl, r2
 808743a:	469b      	mov	fp, r3
 808743c:	4643      	mov	r3, r8
 808743e:	eb1a 0303 	adds.w	r3, sl, r3
 8087442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8087446:	464b      	mov	r3, r9
 8087448:	eb4b 0303 	adc.w	r3, fp, r3
 808744c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8087450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087454:	685b      	ldr	r3, [r3, #4]
 8087456:	2200      	movs	r2, #0
 8087458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 808745c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8087460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8087464:	460b      	mov	r3, r1
 8087466:	18db      	adds	r3, r3, r3
 8087468:	643b      	str	r3, [r7, #64]	; 0x40
 808746a:	4613      	mov	r3, r2
 808746c:	eb42 0303 	adc.w	r3, r2, r3
 8087470:	647b      	str	r3, [r7, #68]	; 0x44
 8087472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8087476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 808747a:	f7f9 fb95 	bl	8080ba8 <__aeabi_uldivmod>
 808747e:	4602      	mov	r2, r0
 8087480:	460b      	mov	r3, r1
 8087482:	4611      	mov	r1, r2
 8087484:	4b3b      	ldr	r3, [pc, #236]	; (8087574 <UART_SetConfig+0x2d4>)
 8087486:	fba3 2301 	umull	r2, r3, r3, r1
 808748a:	095b      	lsrs	r3, r3, #5
 808748c:	2264      	movs	r2, #100	; 0x64
 808748e:	fb02 f303 	mul.w	r3, r2, r3
 8087492:	1acb      	subs	r3, r1, r3
 8087494:	00db      	lsls	r3, r3, #3
 8087496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 808749a:	4b36      	ldr	r3, [pc, #216]	; (8087574 <UART_SetConfig+0x2d4>)
 808749c:	fba3 2302 	umull	r2, r3, r3, r2
 80874a0:	095b      	lsrs	r3, r3, #5
 80874a2:	005b      	lsls	r3, r3, #1
 80874a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80874a8:	441c      	add	r4, r3
 80874aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80874ae:	2200      	movs	r2, #0
 80874b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80874b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80874b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80874bc:	4642      	mov	r2, r8
 80874be:	464b      	mov	r3, r9
 80874c0:	1891      	adds	r1, r2, r2
 80874c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80874c4:	415b      	adcs	r3, r3
 80874c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80874c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80874cc:	4641      	mov	r1, r8
 80874ce:	1851      	adds	r1, r2, r1
 80874d0:	6339      	str	r1, [r7, #48]	; 0x30
 80874d2:	4649      	mov	r1, r9
 80874d4:	414b      	adcs	r3, r1
 80874d6:	637b      	str	r3, [r7, #52]	; 0x34
 80874d8:	f04f 0200 	mov.w	r2, #0
 80874dc:	f04f 0300 	mov.w	r3, #0
 80874e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80874e4:	4659      	mov	r1, fp
 80874e6:	00cb      	lsls	r3, r1, #3
 80874e8:	4651      	mov	r1, sl
 80874ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80874ee:	4651      	mov	r1, sl
 80874f0:	00ca      	lsls	r2, r1, #3
 80874f2:	4610      	mov	r0, r2
 80874f4:	4619      	mov	r1, r3
 80874f6:	4603      	mov	r3, r0
 80874f8:	4642      	mov	r2, r8
 80874fa:	189b      	adds	r3, r3, r2
 80874fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8087500:	464b      	mov	r3, r9
 8087502:	460a      	mov	r2, r1
 8087504:	eb42 0303 	adc.w	r3, r2, r3
 8087508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 808750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087510:	685b      	ldr	r3, [r3, #4]
 8087512:	2200      	movs	r2, #0
 8087514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8087518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 808751c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8087520:	460b      	mov	r3, r1
 8087522:	18db      	adds	r3, r3, r3
 8087524:	62bb      	str	r3, [r7, #40]	; 0x28
 8087526:	4613      	mov	r3, r2
 8087528:	eb42 0303 	adc.w	r3, r2, r3
 808752c:	62fb      	str	r3, [r7, #44]	; 0x2c
 808752e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8087532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8087536:	f7f9 fb37 	bl	8080ba8 <__aeabi_uldivmod>
 808753a:	4602      	mov	r2, r0
 808753c:	460b      	mov	r3, r1
 808753e:	4b0d      	ldr	r3, [pc, #52]	; (8087574 <UART_SetConfig+0x2d4>)
 8087540:	fba3 1302 	umull	r1, r3, r3, r2
 8087544:	095b      	lsrs	r3, r3, #5
 8087546:	2164      	movs	r1, #100	; 0x64
 8087548:	fb01 f303 	mul.w	r3, r1, r3
 808754c:	1ad3      	subs	r3, r2, r3
 808754e:	00db      	lsls	r3, r3, #3
 8087550:	3332      	adds	r3, #50	; 0x32
 8087552:	4a08      	ldr	r2, [pc, #32]	; (8087574 <UART_SetConfig+0x2d4>)
 8087554:	fba2 2303 	umull	r2, r3, r2, r3
 8087558:	095b      	lsrs	r3, r3, #5
 808755a:	f003 0207 	and.w	r2, r3, #7
 808755e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087562:	681b      	ldr	r3, [r3, #0]
 8087564:	4422      	add	r2, r4
 8087566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8087568:	e105      	b.n	8087776 <UART_SetConfig+0x4d6>
 808756a:	bf00      	nop
 808756c:	40011000 	.word	0x40011000
 8087570:	40011400 	.word	0x40011400
 8087574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8087578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 808757c:	2200      	movs	r2, #0
 808757e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8087582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8087586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 808758a:	4642      	mov	r2, r8
 808758c:	464b      	mov	r3, r9
 808758e:	1891      	adds	r1, r2, r2
 8087590:	6239      	str	r1, [r7, #32]
 8087592:	415b      	adcs	r3, r3
 8087594:	627b      	str	r3, [r7, #36]	; 0x24
 8087596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 808759a:	4641      	mov	r1, r8
 808759c:	1854      	adds	r4, r2, r1
 808759e:	4649      	mov	r1, r9
 80875a0:	eb43 0501 	adc.w	r5, r3, r1
 80875a4:	f04f 0200 	mov.w	r2, #0
 80875a8:	f04f 0300 	mov.w	r3, #0
 80875ac:	00eb      	lsls	r3, r5, #3
 80875ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80875b2:	00e2      	lsls	r2, r4, #3
 80875b4:	4614      	mov	r4, r2
 80875b6:	461d      	mov	r5, r3
 80875b8:	4643      	mov	r3, r8
 80875ba:	18e3      	adds	r3, r4, r3
 80875bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80875c0:	464b      	mov	r3, r9
 80875c2:	eb45 0303 	adc.w	r3, r5, r3
 80875c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80875ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80875ce:	685b      	ldr	r3, [r3, #4]
 80875d0:	2200      	movs	r2, #0
 80875d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80875d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80875da:	f04f 0200 	mov.w	r2, #0
 80875de:	f04f 0300 	mov.w	r3, #0
 80875e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80875e6:	4629      	mov	r1, r5
 80875e8:	008b      	lsls	r3, r1, #2
 80875ea:	4621      	mov	r1, r4
 80875ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80875f0:	4621      	mov	r1, r4
 80875f2:	008a      	lsls	r2, r1, #2
 80875f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80875f8:	f7f9 fad6 	bl	8080ba8 <__aeabi_uldivmod>
 80875fc:	4602      	mov	r2, r0
 80875fe:	460b      	mov	r3, r1
 8087600:	4b60      	ldr	r3, [pc, #384]	; (8087784 <UART_SetConfig+0x4e4>)
 8087602:	fba3 2302 	umull	r2, r3, r3, r2
 8087606:	095b      	lsrs	r3, r3, #5
 8087608:	011c      	lsls	r4, r3, #4
 808760a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 808760e:	2200      	movs	r2, #0
 8087610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8087614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8087618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 808761c:	4642      	mov	r2, r8
 808761e:	464b      	mov	r3, r9
 8087620:	1891      	adds	r1, r2, r2
 8087622:	61b9      	str	r1, [r7, #24]
 8087624:	415b      	adcs	r3, r3
 8087626:	61fb      	str	r3, [r7, #28]
 8087628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 808762c:	4641      	mov	r1, r8
 808762e:	1851      	adds	r1, r2, r1
 8087630:	6139      	str	r1, [r7, #16]
 8087632:	4649      	mov	r1, r9
 8087634:	414b      	adcs	r3, r1
 8087636:	617b      	str	r3, [r7, #20]
 8087638:	f04f 0200 	mov.w	r2, #0
 808763c:	f04f 0300 	mov.w	r3, #0
 8087640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8087644:	4659      	mov	r1, fp
 8087646:	00cb      	lsls	r3, r1, #3
 8087648:	4651      	mov	r1, sl
 808764a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 808764e:	4651      	mov	r1, sl
 8087650:	00ca      	lsls	r2, r1, #3
 8087652:	4610      	mov	r0, r2
 8087654:	4619      	mov	r1, r3
 8087656:	4603      	mov	r3, r0
 8087658:	4642      	mov	r2, r8
 808765a:	189b      	adds	r3, r3, r2
 808765c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8087660:	464b      	mov	r3, r9
 8087662:	460a      	mov	r2, r1
 8087664:	eb42 0303 	adc.w	r3, r2, r3
 8087668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 808766c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087670:	685b      	ldr	r3, [r3, #4]
 8087672:	2200      	movs	r2, #0
 8087674:	67bb      	str	r3, [r7, #120]	; 0x78
 8087676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8087678:	f04f 0200 	mov.w	r2, #0
 808767c:	f04f 0300 	mov.w	r3, #0
 8087680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8087684:	4649      	mov	r1, r9
 8087686:	008b      	lsls	r3, r1, #2
 8087688:	4641      	mov	r1, r8
 808768a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 808768e:	4641      	mov	r1, r8
 8087690:	008a      	lsls	r2, r1, #2
 8087692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8087696:	f7f9 fa87 	bl	8080ba8 <__aeabi_uldivmod>
 808769a:	4602      	mov	r2, r0
 808769c:	460b      	mov	r3, r1
 808769e:	4b39      	ldr	r3, [pc, #228]	; (8087784 <UART_SetConfig+0x4e4>)
 80876a0:	fba3 1302 	umull	r1, r3, r3, r2
 80876a4:	095b      	lsrs	r3, r3, #5
 80876a6:	2164      	movs	r1, #100	; 0x64
 80876a8:	fb01 f303 	mul.w	r3, r1, r3
 80876ac:	1ad3      	subs	r3, r2, r3
 80876ae:	011b      	lsls	r3, r3, #4
 80876b0:	3332      	adds	r3, #50	; 0x32
 80876b2:	4a34      	ldr	r2, [pc, #208]	; (8087784 <UART_SetConfig+0x4e4>)
 80876b4:	fba2 2303 	umull	r2, r3, r2, r3
 80876b8:	095b      	lsrs	r3, r3, #5
 80876ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80876be:	441c      	add	r4, r3
 80876c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80876c4:	2200      	movs	r2, #0
 80876c6:	673b      	str	r3, [r7, #112]	; 0x70
 80876c8:	677a      	str	r2, [r7, #116]	; 0x74
 80876ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80876ce:	4642      	mov	r2, r8
 80876d0:	464b      	mov	r3, r9
 80876d2:	1891      	adds	r1, r2, r2
 80876d4:	60b9      	str	r1, [r7, #8]
 80876d6:	415b      	adcs	r3, r3
 80876d8:	60fb      	str	r3, [r7, #12]
 80876da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80876de:	4641      	mov	r1, r8
 80876e0:	1851      	adds	r1, r2, r1
 80876e2:	6039      	str	r1, [r7, #0]
 80876e4:	4649      	mov	r1, r9
 80876e6:	414b      	adcs	r3, r1
 80876e8:	607b      	str	r3, [r7, #4]
 80876ea:	f04f 0200 	mov.w	r2, #0
 80876ee:	f04f 0300 	mov.w	r3, #0
 80876f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80876f6:	4659      	mov	r1, fp
 80876f8:	00cb      	lsls	r3, r1, #3
 80876fa:	4651      	mov	r1, sl
 80876fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8087700:	4651      	mov	r1, sl
 8087702:	00ca      	lsls	r2, r1, #3
 8087704:	4610      	mov	r0, r2
 8087706:	4619      	mov	r1, r3
 8087708:	4603      	mov	r3, r0
 808770a:	4642      	mov	r2, r8
 808770c:	189b      	adds	r3, r3, r2
 808770e:	66bb      	str	r3, [r7, #104]	; 0x68
 8087710:	464b      	mov	r3, r9
 8087712:	460a      	mov	r2, r1
 8087714:	eb42 0303 	adc.w	r3, r2, r3
 8087718:	66fb      	str	r3, [r7, #108]	; 0x6c
 808771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 808771e:	685b      	ldr	r3, [r3, #4]
 8087720:	2200      	movs	r2, #0
 8087722:	663b      	str	r3, [r7, #96]	; 0x60
 8087724:	667a      	str	r2, [r7, #100]	; 0x64
 8087726:	f04f 0200 	mov.w	r2, #0
 808772a:	f04f 0300 	mov.w	r3, #0
 808772e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8087732:	4649      	mov	r1, r9
 8087734:	008b      	lsls	r3, r1, #2
 8087736:	4641      	mov	r1, r8
 8087738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 808773c:	4641      	mov	r1, r8
 808773e:	008a      	lsls	r2, r1, #2
 8087740:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8087744:	f7f9 fa30 	bl	8080ba8 <__aeabi_uldivmod>
 8087748:	4602      	mov	r2, r0
 808774a:	460b      	mov	r3, r1
 808774c:	4b0d      	ldr	r3, [pc, #52]	; (8087784 <UART_SetConfig+0x4e4>)
 808774e:	fba3 1302 	umull	r1, r3, r3, r2
 8087752:	095b      	lsrs	r3, r3, #5
 8087754:	2164      	movs	r1, #100	; 0x64
 8087756:	fb01 f303 	mul.w	r3, r1, r3
 808775a:	1ad3      	subs	r3, r2, r3
 808775c:	011b      	lsls	r3, r3, #4
 808775e:	3332      	adds	r3, #50	; 0x32
 8087760:	4a08      	ldr	r2, [pc, #32]	; (8087784 <UART_SetConfig+0x4e4>)
 8087762:	fba2 2303 	umull	r2, r3, r2, r3
 8087766:	095b      	lsrs	r3, r3, #5
 8087768:	f003 020f 	and.w	r2, r3, #15
 808776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8087770:	681b      	ldr	r3, [r3, #0]
 8087772:	4422      	add	r2, r4
 8087774:	609a      	str	r2, [r3, #8]
}
 8087776:	bf00      	nop
 8087778:	f507 7780 	add.w	r7, r7, #256	; 0x100
 808777c:	46bd      	mov	sp, r7
 808777e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8087782:	bf00      	nop
 8087784:	51eb851f 	.word	0x51eb851f

08087788 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8087788:	b084      	sub	sp, #16
 808778a:	b480      	push	{r7}
 808778c:	b085      	sub	sp, #20
 808778e:	af00      	add	r7, sp, #0
 8087790:	6078      	str	r0, [r7, #4]
 8087792:	f107 001c 	add.w	r0, r7, #28
 8087796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 808779a:	2300      	movs	r3, #0
 808779c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 808779e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80877a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80877a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80877a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80877a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80877a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80877aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80877ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80877ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80877b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80877b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80877b4:	68fa      	ldr	r2, [r7, #12]
 80877b6:	4313      	orrs	r3, r2
 80877b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80877ba:	687b      	ldr	r3, [r7, #4]
 80877bc:	685b      	ldr	r3, [r3, #4]
 80877be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80877c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80877c6:	68fa      	ldr	r2, [r7, #12]
 80877c8:	431a      	orrs	r2, r3
 80877ca:	687b      	ldr	r3, [r7, #4]
 80877cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80877ce:	2300      	movs	r3, #0
}
 80877d0:	4618      	mov	r0, r3
 80877d2:	3714      	adds	r7, #20
 80877d4:	46bd      	mov	sp, r7
 80877d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80877da:	b004      	add	sp, #16
 80877dc:	4770      	bx	lr

080877de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80877de:	b480      	push	{r7}
 80877e0:	b083      	sub	sp, #12
 80877e2:	af00      	add	r7, sp, #0
 80877e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80877e6:	687b      	ldr	r3, [r7, #4]
 80877e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80877ec:	4618      	mov	r0, r3
 80877ee:	370c      	adds	r7, #12
 80877f0:	46bd      	mov	sp, r7
 80877f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80877f6:	4770      	bx	lr

080877f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80877f8:	b480      	push	{r7}
 80877fa:	b083      	sub	sp, #12
 80877fc:	af00      	add	r7, sp, #0
 80877fe:	6078      	str	r0, [r7, #4]
 8087800:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8087802:	683b      	ldr	r3, [r7, #0]
 8087804:	681a      	ldr	r2, [r3, #0]
 8087806:	687b      	ldr	r3, [r7, #4]
 8087808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 808780c:	2300      	movs	r3, #0
}
 808780e:	4618      	mov	r0, r3
 8087810:	370c      	adds	r7, #12
 8087812:	46bd      	mov	sp, r7
 8087814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087818:	4770      	bx	lr

0808781a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 808781a:	b480      	push	{r7}
 808781c:	b083      	sub	sp, #12
 808781e:	af00      	add	r7, sp, #0
 8087820:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8087822:	687b      	ldr	r3, [r7, #4]
 8087824:	2203      	movs	r2, #3
 8087826:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8087828:	2300      	movs	r3, #0
}
 808782a:	4618      	mov	r0, r3
 808782c:	370c      	adds	r7, #12
 808782e:	46bd      	mov	sp, r7
 8087830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087834:	4770      	bx	lr

08087836 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8087836:	b480      	push	{r7}
 8087838:	b083      	sub	sp, #12
 808783a:	af00      	add	r7, sp, #0
 808783c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 808783e:	687b      	ldr	r3, [r7, #4]
 8087840:	681b      	ldr	r3, [r3, #0]
 8087842:	f003 0303 	and.w	r3, r3, #3
}
 8087846:	4618      	mov	r0, r3
 8087848:	370c      	adds	r7, #12
 808784a:	46bd      	mov	sp, r7
 808784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087850:	4770      	bx	lr

08087852 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8087852:	b480      	push	{r7}
 8087854:	b085      	sub	sp, #20
 8087856:	af00      	add	r7, sp, #0
 8087858:	6078      	str	r0, [r7, #4]
 808785a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 808785c:	2300      	movs	r3, #0
 808785e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8087860:	683b      	ldr	r3, [r7, #0]
 8087862:	681a      	ldr	r2, [r3, #0]
 8087864:	687b      	ldr	r3, [r7, #4]
 8087866:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8087868:	683b      	ldr	r3, [r7, #0]
 808786a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 808786c:	683b      	ldr	r3, [r7, #0]
 808786e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8087870:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8087872:	683b      	ldr	r3, [r7, #0]
 8087874:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8087876:	431a      	orrs	r2, r3
                       Command->CPSM);
 8087878:	683b      	ldr	r3, [r7, #0]
 808787a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 808787c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 808787e:	68fa      	ldr	r2, [r7, #12]
 8087880:	4313      	orrs	r3, r2
 8087882:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8087884:	687b      	ldr	r3, [r7, #4]
 8087886:	68db      	ldr	r3, [r3, #12]
 8087888:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 808788c:	f023 030f 	bic.w	r3, r3, #15
 8087890:	68fa      	ldr	r2, [r7, #12]
 8087892:	431a      	orrs	r2, r3
 8087894:	687b      	ldr	r3, [r7, #4]
 8087896:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8087898:	2300      	movs	r3, #0
}
 808789a:	4618      	mov	r0, r3
 808789c:	3714      	adds	r7, #20
 808789e:	46bd      	mov	sp, r7
 80878a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80878a4:	4770      	bx	lr

080878a6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80878a6:	b480      	push	{r7}
 80878a8:	b083      	sub	sp, #12
 80878aa:	af00      	add	r7, sp, #0
 80878ac:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80878ae:	687b      	ldr	r3, [r7, #4]
 80878b0:	691b      	ldr	r3, [r3, #16]
 80878b2:	b2db      	uxtb	r3, r3
}
 80878b4:	4618      	mov	r0, r3
 80878b6:	370c      	adds	r7, #12
 80878b8:	46bd      	mov	sp, r7
 80878ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80878be:	4770      	bx	lr

080878c0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80878c0:	b480      	push	{r7}
 80878c2:	b085      	sub	sp, #20
 80878c4:	af00      	add	r7, sp, #0
 80878c6:	6078      	str	r0, [r7, #4]
 80878c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80878ca:	687b      	ldr	r3, [r7, #4]
 80878cc:	3314      	adds	r3, #20
 80878ce:	461a      	mov	r2, r3
 80878d0:	683b      	ldr	r3, [r7, #0]
 80878d2:	4413      	add	r3, r2
 80878d4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80878d6:	68fb      	ldr	r3, [r7, #12]
 80878d8:	681b      	ldr	r3, [r3, #0]
}  
 80878da:	4618      	mov	r0, r3
 80878dc:	3714      	adds	r7, #20
 80878de:	46bd      	mov	sp, r7
 80878e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80878e4:	4770      	bx	lr

080878e6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80878e6:	b480      	push	{r7}
 80878e8:	b085      	sub	sp, #20
 80878ea:	af00      	add	r7, sp, #0
 80878ec:	6078      	str	r0, [r7, #4]
 80878ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80878f0:	2300      	movs	r3, #0
 80878f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80878f4:	683b      	ldr	r3, [r7, #0]
 80878f6:	681a      	ldr	r2, [r3, #0]
 80878f8:	687b      	ldr	r3, [r7, #4]
 80878fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80878fc:	683b      	ldr	r3, [r7, #0]
 80878fe:	685a      	ldr	r2, [r3, #4]
 8087900:	687b      	ldr	r3, [r7, #4]
 8087902:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8087904:	683b      	ldr	r3, [r7, #0]
 8087906:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8087908:	683b      	ldr	r3, [r7, #0]
 808790a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 808790c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 808790e:	683b      	ldr	r3, [r7, #0]
 8087910:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8087912:	431a      	orrs	r2, r3
                       Data->DPSM);
 8087914:	683b      	ldr	r3, [r7, #0]
 8087916:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8087918:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 808791a:	68fa      	ldr	r2, [r7, #12]
 808791c:	4313      	orrs	r3, r2
 808791e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8087920:	687b      	ldr	r3, [r7, #4]
 8087922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087924:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8087928:	68fb      	ldr	r3, [r7, #12]
 808792a:	431a      	orrs	r2, r3
 808792c:	687b      	ldr	r3, [r7, #4]
 808792e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8087930:	2300      	movs	r3, #0

}
 8087932:	4618      	mov	r0, r3
 8087934:	3714      	adds	r7, #20
 8087936:	46bd      	mov	sp, r7
 8087938:	f85d 7b04 	ldr.w	r7, [sp], #4
 808793c:	4770      	bx	lr

0808793e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 808793e:	b580      	push	{r7, lr}
 8087940:	b088      	sub	sp, #32
 8087942:	af00      	add	r7, sp, #0
 8087944:	6078      	str	r0, [r7, #4]
 8087946:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8087948:	683b      	ldr	r3, [r7, #0]
 808794a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 808794c:	2310      	movs	r3, #16
 808794e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087950:	2340      	movs	r3, #64	; 0x40
 8087952:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087954:	2300      	movs	r3, #0
 8087956:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808795c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 808795e:	f107 0308 	add.w	r3, r7, #8
 8087962:	4619      	mov	r1, r3
 8087964:	6878      	ldr	r0, [r7, #4]
 8087966:	f7ff ff74 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 808796a:	f241 3288 	movw	r2, #5000	; 0x1388
 808796e:	2110      	movs	r1, #16
 8087970:	6878      	ldr	r0, [r7, #4]
 8087972:	f000 f9d7 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087978:	69fb      	ldr	r3, [r7, #28]
}
 808797a:	4618      	mov	r0, r3
 808797c:	3720      	adds	r7, #32
 808797e:	46bd      	mov	sp, r7
 8087980:	bd80      	pop	{r7, pc}

08087982 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8087982:	b580      	push	{r7, lr}
 8087984:	b088      	sub	sp, #32
 8087986:	af00      	add	r7, sp, #0
 8087988:	6078      	str	r0, [r7, #4]
 808798a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 808798c:	683b      	ldr	r3, [r7, #0]
 808798e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8087990:	2311      	movs	r3, #17
 8087992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087994:	2340      	movs	r3, #64	; 0x40
 8087996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087998:	2300      	movs	r3, #0
 808799a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 808799c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80879a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80879a2:	f107 0308 	add.w	r3, r7, #8
 80879a6:	4619      	mov	r1, r3
 80879a8:	6878      	ldr	r0, [r7, #4]
 80879aa:	f7ff ff52 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80879ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80879b2:	2111      	movs	r1, #17
 80879b4:	6878      	ldr	r0, [r7, #4]
 80879b6:	f000 f9b5 	bl	8087d24 <SDMMC_GetCmdResp1>
 80879ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80879bc:	69fb      	ldr	r3, [r7, #28]
}
 80879be:	4618      	mov	r0, r3
 80879c0:	3720      	adds	r7, #32
 80879c2:	46bd      	mov	sp, r7
 80879c4:	bd80      	pop	{r7, pc}

080879c6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80879c6:	b580      	push	{r7, lr}
 80879c8:	b088      	sub	sp, #32
 80879ca:	af00      	add	r7, sp, #0
 80879cc:	6078      	str	r0, [r7, #4]
 80879ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80879d0:	683b      	ldr	r3, [r7, #0]
 80879d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80879d4:	2312      	movs	r3, #18
 80879d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80879d8:	2340      	movs	r3, #64	; 0x40
 80879da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80879dc:	2300      	movs	r3, #0
 80879de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80879e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80879e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80879e6:	f107 0308 	add.w	r3, r7, #8
 80879ea:	4619      	mov	r1, r3
 80879ec:	6878      	ldr	r0, [r7, #4]
 80879ee:	f7ff ff30 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80879f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80879f6:	2112      	movs	r1, #18
 80879f8:	6878      	ldr	r0, [r7, #4]
 80879fa:	f000 f993 	bl	8087d24 <SDMMC_GetCmdResp1>
 80879fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087a00:	69fb      	ldr	r3, [r7, #28]
}
 8087a02:	4618      	mov	r0, r3
 8087a04:	3720      	adds	r7, #32
 8087a06:	46bd      	mov	sp, r7
 8087a08:	bd80      	pop	{r7, pc}

08087a0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8087a0a:	b580      	push	{r7, lr}
 8087a0c:	b088      	sub	sp, #32
 8087a0e:	af00      	add	r7, sp, #0
 8087a10:	6078      	str	r0, [r7, #4]
 8087a12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8087a14:	683b      	ldr	r3, [r7, #0]
 8087a16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8087a18:	2318      	movs	r3, #24
 8087a1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087a1c:	2340      	movs	r3, #64	; 0x40
 8087a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087a20:	2300      	movs	r3, #0
 8087a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087a28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087a2a:	f107 0308 	add.w	r3, r7, #8
 8087a2e:	4619      	mov	r1, r3
 8087a30:	6878      	ldr	r0, [r7, #4]
 8087a32:	f7ff ff0e 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8087a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8087a3a:	2118      	movs	r1, #24
 8087a3c:	6878      	ldr	r0, [r7, #4]
 8087a3e:	f000 f971 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087a44:	69fb      	ldr	r3, [r7, #28]
}
 8087a46:	4618      	mov	r0, r3
 8087a48:	3720      	adds	r7, #32
 8087a4a:	46bd      	mov	sp, r7
 8087a4c:	bd80      	pop	{r7, pc}

08087a4e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8087a4e:	b580      	push	{r7, lr}
 8087a50:	b088      	sub	sp, #32
 8087a52:	af00      	add	r7, sp, #0
 8087a54:	6078      	str	r0, [r7, #4]
 8087a56:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8087a58:	683b      	ldr	r3, [r7, #0]
 8087a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8087a5c:	2319      	movs	r3, #25
 8087a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087a60:	2340      	movs	r3, #64	; 0x40
 8087a62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087a64:	2300      	movs	r3, #0
 8087a66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087a6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087a6e:	f107 0308 	add.w	r3, r7, #8
 8087a72:	4619      	mov	r1, r3
 8087a74:	6878      	ldr	r0, [r7, #4]
 8087a76:	f7ff feec 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8087a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8087a7e:	2119      	movs	r1, #25
 8087a80:	6878      	ldr	r0, [r7, #4]
 8087a82:	f000 f94f 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087a88:	69fb      	ldr	r3, [r7, #28]
}
 8087a8a:	4618      	mov	r0, r3
 8087a8c:	3720      	adds	r7, #32
 8087a8e:	46bd      	mov	sp, r7
 8087a90:	bd80      	pop	{r7, pc}
	...

08087a94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8087a94:	b580      	push	{r7, lr}
 8087a96:	b088      	sub	sp, #32
 8087a98:	af00      	add	r7, sp, #0
 8087a9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8087a9c:	2300      	movs	r3, #0
 8087a9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8087aa0:	230c      	movs	r3, #12
 8087aa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087aa4:	2340      	movs	r3, #64	; 0x40
 8087aa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087aa8:	2300      	movs	r3, #0
 8087aaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087ab0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087ab2:	f107 0308 	add.w	r3, r7, #8
 8087ab6:	4619      	mov	r1, r3
 8087ab8:	6878      	ldr	r0, [r7, #4]
 8087aba:	f7ff feca 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8087abe:	4a05      	ldr	r2, [pc, #20]	; (8087ad4 <SDMMC_CmdStopTransfer+0x40>)
 8087ac0:	210c      	movs	r1, #12
 8087ac2:	6878      	ldr	r0, [r7, #4]
 8087ac4:	f000 f92e 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087ac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087aca:	69fb      	ldr	r3, [r7, #28]
}
 8087acc:	4618      	mov	r0, r3
 8087ace:	3720      	adds	r7, #32
 8087ad0:	46bd      	mov	sp, r7
 8087ad2:	bd80      	pop	{r7, pc}
 8087ad4:	05f5e100 	.word	0x05f5e100

08087ad8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8087ad8:	b580      	push	{r7, lr}
 8087ada:	b08a      	sub	sp, #40	; 0x28
 8087adc:	af00      	add	r7, sp, #0
 8087ade:	60f8      	str	r0, [r7, #12]
 8087ae0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8087ae4:	683b      	ldr	r3, [r7, #0]
 8087ae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8087ae8:	2307      	movs	r3, #7
 8087aea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087aec:	2340      	movs	r3, #64	; 0x40
 8087aee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087af0:	2300      	movs	r3, #0
 8087af2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087af8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087afa:	f107 0310 	add.w	r3, r7, #16
 8087afe:	4619      	mov	r1, r3
 8087b00:	68f8      	ldr	r0, [r7, #12]
 8087b02:	f7ff fea6 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8087b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8087b0a:	2107      	movs	r1, #7
 8087b0c:	68f8      	ldr	r0, [r7, #12]
 8087b0e:	f000 f909 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087b12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8087b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8087b16:	4618      	mov	r0, r3
 8087b18:	3728      	adds	r7, #40	; 0x28
 8087b1a:	46bd      	mov	sp, r7
 8087b1c:	bd80      	pop	{r7, pc}

08087b1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8087b1e:	b580      	push	{r7, lr}
 8087b20:	b088      	sub	sp, #32
 8087b22:	af00      	add	r7, sp, #0
 8087b24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8087b26:	2300      	movs	r3, #0
 8087b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8087b2a:	2300      	movs	r3, #0
 8087b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8087b2e:	2300      	movs	r3, #0
 8087b30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087b32:	2300      	movs	r3, #0
 8087b34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087b3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087b3c:	f107 0308 	add.w	r3, r7, #8
 8087b40:	4619      	mov	r1, r3
 8087b42:	6878      	ldr	r0, [r7, #4]
 8087b44:	f7ff fe85 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8087b48:	6878      	ldr	r0, [r7, #4]
 8087b4a:	f000 fb23 	bl	8088194 <SDMMC_GetCmdError>
 8087b4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087b50:	69fb      	ldr	r3, [r7, #28]
}
 8087b52:	4618      	mov	r0, r3
 8087b54:	3720      	adds	r7, #32
 8087b56:	46bd      	mov	sp, r7
 8087b58:	bd80      	pop	{r7, pc}

08087b5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8087b5a:	b580      	push	{r7, lr}
 8087b5c:	b088      	sub	sp, #32
 8087b5e:	af00      	add	r7, sp, #0
 8087b60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8087b62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8087b66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8087b68:	2308      	movs	r3, #8
 8087b6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087b6c:	2340      	movs	r3, #64	; 0x40
 8087b6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087b70:	2300      	movs	r3, #0
 8087b72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087b74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087b78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087b7a:	f107 0308 	add.w	r3, r7, #8
 8087b7e:	4619      	mov	r1, r3
 8087b80:	6878      	ldr	r0, [r7, #4]
 8087b82:	f7ff fe66 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8087b86:	6878      	ldr	r0, [r7, #4]
 8087b88:	f000 fab6 	bl	80880f8 <SDMMC_GetCmdResp7>
 8087b8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087b8e:	69fb      	ldr	r3, [r7, #28]
}
 8087b90:	4618      	mov	r0, r3
 8087b92:	3720      	adds	r7, #32
 8087b94:	46bd      	mov	sp, r7
 8087b96:	bd80      	pop	{r7, pc}

08087b98 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087b98:	b580      	push	{r7, lr}
 8087b9a:	b088      	sub	sp, #32
 8087b9c:	af00      	add	r7, sp, #0
 8087b9e:	6078      	str	r0, [r7, #4]
 8087ba0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8087ba2:	683b      	ldr	r3, [r7, #0]
 8087ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8087ba6:	2337      	movs	r3, #55	; 0x37
 8087ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087baa:	2340      	movs	r3, #64	; 0x40
 8087bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087bae:	2300      	movs	r3, #0
 8087bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087bb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087bb8:	f107 0308 	add.w	r3, r7, #8
 8087bbc:	4619      	mov	r1, r3
 8087bbe:	6878      	ldr	r0, [r7, #4]
 8087bc0:	f7ff fe47 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8087bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8087bc8:	2137      	movs	r1, #55	; 0x37
 8087bca:	6878      	ldr	r0, [r7, #4]
 8087bcc:	f000 f8aa 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087bd2:	69fb      	ldr	r3, [r7, #28]
}
 8087bd4:	4618      	mov	r0, r3
 8087bd6:	3720      	adds	r7, #32
 8087bd8:	46bd      	mov	sp, r7
 8087bda:	bd80      	pop	{r7, pc}

08087bdc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087bdc:	b580      	push	{r7, lr}
 8087bde:	b088      	sub	sp, #32
 8087be0:	af00      	add	r7, sp, #0
 8087be2:	6078      	str	r0, [r7, #4]
 8087be4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8087be6:	683b      	ldr	r3, [r7, #0]
 8087be8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8087bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8087bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8087bf2:	2329      	movs	r3, #41	; 0x29
 8087bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087bf6:	2340      	movs	r3, #64	; 0x40
 8087bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087bfa:	2300      	movs	r3, #0
 8087bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087c04:	f107 0308 	add.w	r3, r7, #8
 8087c08:	4619      	mov	r1, r3
 8087c0a:	6878      	ldr	r0, [r7, #4]
 8087c0c:	f7ff fe21 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8087c10:	6878      	ldr	r0, [r7, #4]
 8087c12:	f000 f9bd 	bl	8087f90 <SDMMC_GetCmdResp3>
 8087c16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087c18:	69fb      	ldr	r3, [r7, #28]
}
 8087c1a:	4618      	mov	r0, r3
 8087c1c:	3720      	adds	r7, #32
 8087c1e:	46bd      	mov	sp, r7
 8087c20:	bd80      	pop	{r7, pc}

08087c22 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8087c22:	b580      	push	{r7, lr}
 8087c24:	b088      	sub	sp, #32
 8087c26:	af00      	add	r7, sp, #0
 8087c28:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8087c2a:	2300      	movs	r3, #0
 8087c2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8087c2e:	2302      	movs	r3, #2
 8087c30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8087c32:	23c0      	movs	r3, #192	; 0xc0
 8087c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087c36:	2300      	movs	r3, #0
 8087c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087c3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087c40:	f107 0308 	add.w	r3, r7, #8
 8087c44:	4619      	mov	r1, r3
 8087c46:	6878      	ldr	r0, [r7, #4]
 8087c48:	f7ff fe03 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8087c4c:	6878      	ldr	r0, [r7, #4]
 8087c4e:	f000 f957 	bl	8087f00 <SDMMC_GetCmdResp2>
 8087c52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087c54:	69fb      	ldr	r3, [r7, #28]
}
 8087c56:	4618      	mov	r0, r3
 8087c58:	3720      	adds	r7, #32
 8087c5a:	46bd      	mov	sp, r7
 8087c5c:	bd80      	pop	{r7, pc}

08087c5e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087c5e:	b580      	push	{r7, lr}
 8087c60:	b088      	sub	sp, #32
 8087c62:	af00      	add	r7, sp, #0
 8087c64:	6078      	str	r0, [r7, #4]
 8087c66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8087c68:	683b      	ldr	r3, [r7, #0]
 8087c6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8087c6c:	2309      	movs	r3, #9
 8087c6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8087c70:	23c0      	movs	r3, #192	; 0xc0
 8087c72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087c74:	2300      	movs	r3, #0
 8087c76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087c7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087c7e:	f107 0308 	add.w	r3, r7, #8
 8087c82:	4619      	mov	r1, r3
 8087c84:	6878      	ldr	r0, [r7, #4]
 8087c86:	f7ff fde4 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8087c8a:	6878      	ldr	r0, [r7, #4]
 8087c8c:	f000 f938 	bl	8087f00 <SDMMC_GetCmdResp2>
 8087c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087c92:	69fb      	ldr	r3, [r7, #28]
}
 8087c94:	4618      	mov	r0, r3
 8087c96:	3720      	adds	r7, #32
 8087c98:	46bd      	mov	sp, r7
 8087c9a:	bd80      	pop	{r7, pc}

08087c9c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8087c9c:	b580      	push	{r7, lr}
 8087c9e:	b088      	sub	sp, #32
 8087ca0:	af00      	add	r7, sp, #0
 8087ca2:	6078      	str	r0, [r7, #4]
 8087ca4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8087ca6:	2300      	movs	r3, #0
 8087ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8087caa:	2303      	movs	r3, #3
 8087cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087cae:	2340      	movs	r3, #64	; 0x40
 8087cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087cb2:	2300      	movs	r3, #0
 8087cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087cba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087cbc:	f107 0308 	add.w	r3, r7, #8
 8087cc0:	4619      	mov	r1, r3
 8087cc2:	6878      	ldr	r0, [r7, #4]
 8087cc4:	f7ff fdc5 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8087cc8:	683a      	ldr	r2, [r7, #0]
 8087cca:	2103      	movs	r1, #3
 8087ccc:	6878      	ldr	r0, [r7, #4]
 8087cce:	f000 f99d 	bl	808800c <SDMMC_GetCmdResp6>
 8087cd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087cd4:	69fb      	ldr	r3, [r7, #28]
}
 8087cd6:	4618      	mov	r0, r3
 8087cd8:	3720      	adds	r7, #32
 8087cda:	46bd      	mov	sp, r7
 8087cdc:	bd80      	pop	{r7, pc}

08087cde <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8087cde:	b580      	push	{r7, lr}
 8087ce0:	b088      	sub	sp, #32
 8087ce2:	af00      	add	r7, sp, #0
 8087ce4:	6078      	str	r0, [r7, #4]
 8087ce6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8087ce8:	683b      	ldr	r3, [r7, #0]
 8087cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8087cec:	230d      	movs	r3, #13
 8087cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8087cf0:	2340      	movs	r3, #64	; 0x40
 8087cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8087cf4:	2300      	movs	r3, #0
 8087cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8087cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087cfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8087cfe:	f107 0308 	add.w	r3, r7, #8
 8087d02:	4619      	mov	r1, r3
 8087d04:	6878      	ldr	r0, [r7, #4]
 8087d06:	f7ff fda4 	bl	8087852 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8087d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8087d0e:	210d      	movs	r1, #13
 8087d10:	6878      	ldr	r0, [r7, #4]
 8087d12:	f000 f807 	bl	8087d24 <SDMMC_GetCmdResp1>
 8087d16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8087d18:	69fb      	ldr	r3, [r7, #28]
}
 8087d1a:	4618      	mov	r0, r3
 8087d1c:	3720      	adds	r7, #32
 8087d1e:	46bd      	mov	sp, r7
 8087d20:	bd80      	pop	{r7, pc}
	...

08087d24 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8087d24:	b580      	push	{r7, lr}
 8087d26:	b088      	sub	sp, #32
 8087d28:	af00      	add	r7, sp, #0
 8087d2a:	60f8      	str	r0, [r7, #12]
 8087d2c:	460b      	mov	r3, r1
 8087d2e:	607a      	str	r2, [r7, #4]
 8087d30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8087d32:	4b70      	ldr	r3, [pc, #448]	; (8087ef4 <SDMMC_GetCmdResp1+0x1d0>)
 8087d34:	681b      	ldr	r3, [r3, #0]
 8087d36:	4a70      	ldr	r2, [pc, #448]	; (8087ef8 <SDMMC_GetCmdResp1+0x1d4>)
 8087d38:	fba2 2303 	umull	r2, r3, r2, r3
 8087d3c:	0a5a      	lsrs	r2, r3, #9
 8087d3e:	687b      	ldr	r3, [r7, #4]
 8087d40:	fb02 f303 	mul.w	r3, r2, r3
 8087d44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8087d46:	69fb      	ldr	r3, [r7, #28]
 8087d48:	1e5a      	subs	r2, r3, #1
 8087d4a:	61fa      	str	r2, [r7, #28]
 8087d4c:	2b00      	cmp	r3, #0
 8087d4e:	d102      	bne.n	8087d56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8087d50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8087d54:	e0c9      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8087d56:	68fb      	ldr	r3, [r7, #12]
 8087d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087d5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087d5c:	69bb      	ldr	r3, [r7, #24]
 8087d5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8087d62:	2b00      	cmp	r3, #0
 8087d64:	d0ef      	beq.n	8087d46 <SDMMC_GetCmdResp1+0x22>
 8087d66:	69bb      	ldr	r3, [r7, #24]
 8087d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087d6c:	2b00      	cmp	r3, #0
 8087d6e:	d1ea      	bne.n	8087d46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8087d70:	68fb      	ldr	r3, [r7, #12]
 8087d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087d74:	f003 0304 	and.w	r3, r3, #4
 8087d78:	2b00      	cmp	r3, #0
 8087d7a:	d004      	beq.n	8087d86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8087d7c:	68fb      	ldr	r3, [r7, #12]
 8087d7e:	2204      	movs	r2, #4
 8087d80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8087d82:	2304      	movs	r3, #4
 8087d84:	e0b1      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8087d86:	68fb      	ldr	r3, [r7, #12]
 8087d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087d8a:	f003 0301 	and.w	r3, r3, #1
 8087d8e:	2b00      	cmp	r3, #0
 8087d90:	d004      	beq.n	8087d9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8087d92:	68fb      	ldr	r3, [r7, #12]
 8087d94:	2201      	movs	r2, #1
 8087d96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087d98:	2301      	movs	r3, #1
 8087d9a:	e0a6      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087d9c:	68fb      	ldr	r3, [r7, #12]
 8087d9e:	22c5      	movs	r2, #197	; 0xc5
 8087da0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8087da2:	68f8      	ldr	r0, [r7, #12]
 8087da4:	f7ff fd7f 	bl	80878a6 <SDIO_GetCommandResponse>
 8087da8:	4603      	mov	r3, r0
 8087daa:	461a      	mov	r2, r3
 8087dac:	7afb      	ldrb	r3, [r7, #11]
 8087dae:	4293      	cmp	r3, r2
 8087db0:	d001      	beq.n	8087db6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087db2:	2301      	movs	r3, #1
 8087db4:	e099      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8087db6:	2100      	movs	r1, #0
 8087db8:	68f8      	ldr	r0, [r7, #12]
 8087dba:	f7ff fd81 	bl	80878c0 <SDIO_GetResponse>
 8087dbe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8087dc0:	697a      	ldr	r2, [r7, #20]
 8087dc2:	4b4e      	ldr	r3, [pc, #312]	; (8087efc <SDMMC_GetCmdResp1+0x1d8>)
 8087dc4:	4013      	ands	r3, r2
 8087dc6:	2b00      	cmp	r3, #0
 8087dc8:	d101      	bne.n	8087dce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8087dca:	2300      	movs	r3, #0
 8087dcc:	e08d      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8087dce:	697b      	ldr	r3, [r7, #20]
 8087dd0:	2b00      	cmp	r3, #0
 8087dd2:	da02      	bge.n	8087dda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8087dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8087dd8:	e087      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8087dda:	697b      	ldr	r3, [r7, #20]
 8087ddc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8087de0:	2b00      	cmp	r3, #0
 8087de2:	d001      	beq.n	8087de8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8087de4:	2340      	movs	r3, #64	; 0x40
 8087de6:	e080      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8087de8:	697b      	ldr	r3, [r7, #20]
 8087dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8087dee:	2b00      	cmp	r3, #0
 8087df0:	d001      	beq.n	8087df6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8087df2:	2380      	movs	r3, #128	; 0x80
 8087df4:	e079      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8087df6:	697b      	ldr	r3, [r7, #20]
 8087df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8087dfc:	2b00      	cmp	r3, #0
 8087dfe:	d002      	beq.n	8087e06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8087e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8087e04:	e071      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8087e06:	697b      	ldr	r3, [r7, #20]
 8087e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8087e0c:	2b00      	cmp	r3, #0
 8087e0e:	d002      	beq.n	8087e16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8087e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8087e14:	e069      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8087e16:	697b      	ldr	r3, [r7, #20]
 8087e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8087e1c:	2b00      	cmp	r3, #0
 8087e1e:	d002      	beq.n	8087e26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8087e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8087e24:	e061      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8087e26:	697b      	ldr	r3, [r7, #20]
 8087e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8087e2c:	2b00      	cmp	r3, #0
 8087e2e:	d002      	beq.n	8087e36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8087e30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8087e34:	e059      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8087e36:	697b      	ldr	r3, [r7, #20]
 8087e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8087e3c:	2b00      	cmp	r3, #0
 8087e3e:	d002      	beq.n	8087e46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8087e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8087e44:	e051      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8087e46:	697b      	ldr	r3, [r7, #20]
 8087e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8087e4c:	2b00      	cmp	r3, #0
 8087e4e:	d002      	beq.n	8087e56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8087e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8087e54:	e049      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8087e56:	697b      	ldr	r3, [r7, #20]
 8087e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8087e5c:	2b00      	cmp	r3, #0
 8087e5e:	d002      	beq.n	8087e66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8087e60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8087e64:	e041      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8087e66:	697b      	ldr	r3, [r7, #20]
 8087e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8087e6c:	2b00      	cmp	r3, #0
 8087e6e:	d002      	beq.n	8087e76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8087e70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8087e74:	e039      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8087e76:	697b      	ldr	r3, [r7, #20]
 8087e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8087e7c:	2b00      	cmp	r3, #0
 8087e7e:	d002      	beq.n	8087e86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8087e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8087e84:	e031      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8087e86:	697b      	ldr	r3, [r7, #20]
 8087e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8087e8c:	2b00      	cmp	r3, #0
 8087e8e:	d002      	beq.n	8087e96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8087e90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8087e94:	e029      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8087e96:	697b      	ldr	r3, [r7, #20]
 8087e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8087e9c:	2b00      	cmp	r3, #0
 8087e9e:	d002      	beq.n	8087ea6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8087ea0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8087ea4:	e021      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8087ea6:	697b      	ldr	r3, [r7, #20]
 8087ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8087eac:	2b00      	cmp	r3, #0
 8087eae:	d002      	beq.n	8087eb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8087eb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8087eb4:	e019      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8087eb6:	697b      	ldr	r3, [r7, #20]
 8087eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8087ebc:	2b00      	cmp	r3, #0
 8087ebe:	d002      	beq.n	8087ec6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8087ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8087ec4:	e011      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8087ec6:	697b      	ldr	r3, [r7, #20]
 8087ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8087ecc:	2b00      	cmp	r3, #0
 8087ece:	d002      	beq.n	8087ed6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8087ed0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8087ed4:	e009      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8087ed6:	697b      	ldr	r3, [r7, #20]
 8087ed8:	f003 0308 	and.w	r3, r3, #8
 8087edc:	2b00      	cmp	r3, #0
 8087ede:	d002      	beq.n	8087ee6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8087ee0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8087ee4:	e001      	b.n	8087eea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8087ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8087eea:	4618      	mov	r0, r3
 8087eec:	3720      	adds	r7, #32
 8087eee:	46bd      	mov	sp, r7
 8087ef0:	bd80      	pop	{r7, pc}
 8087ef2:	bf00      	nop
 8087ef4:	20000084 	.word	0x20000084
 8087ef8:	10624dd3 	.word	0x10624dd3
 8087efc:	fdffe008 	.word	0xfdffe008

08087f00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8087f00:	b480      	push	{r7}
 8087f02:	b085      	sub	sp, #20
 8087f04:	af00      	add	r7, sp, #0
 8087f06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8087f08:	4b1f      	ldr	r3, [pc, #124]	; (8087f88 <SDMMC_GetCmdResp2+0x88>)
 8087f0a:	681b      	ldr	r3, [r3, #0]
 8087f0c:	4a1f      	ldr	r2, [pc, #124]	; (8087f8c <SDMMC_GetCmdResp2+0x8c>)
 8087f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8087f12:	0a5b      	lsrs	r3, r3, #9
 8087f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8087f18:	fb02 f303 	mul.w	r3, r2, r3
 8087f1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8087f1e:	68fb      	ldr	r3, [r7, #12]
 8087f20:	1e5a      	subs	r2, r3, #1
 8087f22:	60fa      	str	r2, [r7, #12]
 8087f24:	2b00      	cmp	r3, #0
 8087f26:	d102      	bne.n	8087f2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8087f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8087f2c:	e026      	b.n	8087f7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8087f2e:	687b      	ldr	r3, [r7, #4]
 8087f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087f32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087f34:	68bb      	ldr	r3, [r7, #8]
 8087f36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8087f3a:	2b00      	cmp	r3, #0
 8087f3c:	d0ef      	beq.n	8087f1e <SDMMC_GetCmdResp2+0x1e>
 8087f3e:	68bb      	ldr	r3, [r7, #8]
 8087f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087f44:	2b00      	cmp	r3, #0
 8087f46:	d1ea      	bne.n	8087f1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8087f48:	687b      	ldr	r3, [r7, #4]
 8087f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087f4c:	f003 0304 	and.w	r3, r3, #4
 8087f50:	2b00      	cmp	r3, #0
 8087f52:	d004      	beq.n	8087f5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8087f54:	687b      	ldr	r3, [r7, #4]
 8087f56:	2204      	movs	r2, #4
 8087f58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8087f5a:	2304      	movs	r3, #4
 8087f5c:	e00e      	b.n	8087f7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8087f5e:	687b      	ldr	r3, [r7, #4]
 8087f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087f62:	f003 0301 	and.w	r3, r3, #1
 8087f66:	2b00      	cmp	r3, #0
 8087f68:	d004      	beq.n	8087f74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8087f6a:	687b      	ldr	r3, [r7, #4]
 8087f6c:	2201      	movs	r2, #1
 8087f6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8087f70:	2301      	movs	r3, #1
 8087f72:	e003      	b.n	8087f7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087f74:	687b      	ldr	r3, [r7, #4]
 8087f76:	22c5      	movs	r2, #197	; 0xc5
 8087f78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8087f7a:	2300      	movs	r3, #0
}
 8087f7c:	4618      	mov	r0, r3
 8087f7e:	3714      	adds	r7, #20
 8087f80:	46bd      	mov	sp, r7
 8087f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8087f86:	4770      	bx	lr
 8087f88:	20000084 	.word	0x20000084
 8087f8c:	10624dd3 	.word	0x10624dd3

08087f90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8087f90:	b480      	push	{r7}
 8087f92:	b085      	sub	sp, #20
 8087f94:	af00      	add	r7, sp, #0
 8087f96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8087f98:	4b1a      	ldr	r3, [pc, #104]	; (8088004 <SDMMC_GetCmdResp3+0x74>)
 8087f9a:	681b      	ldr	r3, [r3, #0]
 8087f9c:	4a1a      	ldr	r2, [pc, #104]	; (8088008 <SDMMC_GetCmdResp3+0x78>)
 8087f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8087fa2:	0a5b      	lsrs	r3, r3, #9
 8087fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8087fa8:	fb02 f303 	mul.w	r3, r2, r3
 8087fac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8087fae:	68fb      	ldr	r3, [r7, #12]
 8087fb0:	1e5a      	subs	r2, r3, #1
 8087fb2:	60fa      	str	r2, [r7, #12]
 8087fb4:	2b00      	cmp	r3, #0
 8087fb6:	d102      	bne.n	8087fbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8087fb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8087fbc:	e01b      	b.n	8087ff6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8087fbe:	687b      	ldr	r3, [r7, #4]
 8087fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087fc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087fc4:	68bb      	ldr	r3, [r7, #8]
 8087fc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8087fca:	2b00      	cmp	r3, #0
 8087fcc:	d0ef      	beq.n	8087fae <SDMMC_GetCmdResp3+0x1e>
 8087fce:	68bb      	ldr	r3, [r7, #8]
 8087fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8087fd4:	2b00      	cmp	r3, #0
 8087fd6:	d1ea      	bne.n	8087fae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8087fd8:	687b      	ldr	r3, [r7, #4]
 8087fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087fdc:	f003 0304 	and.w	r3, r3, #4
 8087fe0:	2b00      	cmp	r3, #0
 8087fe2:	d004      	beq.n	8087fee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8087fe4:	687b      	ldr	r3, [r7, #4]
 8087fe6:	2204      	movs	r2, #4
 8087fe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8087fea:	2304      	movs	r3, #4
 8087fec:	e003      	b.n	8087ff6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8087fee:	687b      	ldr	r3, [r7, #4]
 8087ff0:	22c5      	movs	r2, #197	; 0xc5
 8087ff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8087ff4:	2300      	movs	r3, #0
}
 8087ff6:	4618      	mov	r0, r3
 8087ff8:	3714      	adds	r7, #20
 8087ffa:	46bd      	mov	sp, r7
 8087ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088000:	4770      	bx	lr
 8088002:	bf00      	nop
 8088004:	20000084 	.word	0x20000084
 8088008:	10624dd3 	.word	0x10624dd3

0808800c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 808800c:	b580      	push	{r7, lr}
 808800e:	b088      	sub	sp, #32
 8088010:	af00      	add	r7, sp, #0
 8088012:	60f8      	str	r0, [r7, #12]
 8088014:	460b      	mov	r3, r1
 8088016:	607a      	str	r2, [r7, #4]
 8088018:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 808801a:	4b35      	ldr	r3, [pc, #212]	; (80880f0 <SDMMC_GetCmdResp6+0xe4>)
 808801c:	681b      	ldr	r3, [r3, #0]
 808801e:	4a35      	ldr	r2, [pc, #212]	; (80880f4 <SDMMC_GetCmdResp6+0xe8>)
 8088020:	fba2 2303 	umull	r2, r3, r2, r3
 8088024:	0a5b      	lsrs	r3, r3, #9
 8088026:	f241 3288 	movw	r2, #5000	; 0x1388
 808802a:	fb02 f303 	mul.w	r3, r2, r3
 808802e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8088030:	69fb      	ldr	r3, [r7, #28]
 8088032:	1e5a      	subs	r2, r3, #1
 8088034:	61fa      	str	r2, [r7, #28]
 8088036:	2b00      	cmp	r3, #0
 8088038:	d102      	bne.n	8088040 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 808803a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 808803e:	e052      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8088040:	68fb      	ldr	r3, [r7, #12]
 8088042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088044:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8088046:	69bb      	ldr	r3, [r7, #24]
 8088048:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 808804c:	2b00      	cmp	r3, #0
 808804e:	d0ef      	beq.n	8088030 <SDMMC_GetCmdResp6+0x24>
 8088050:	69bb      	ldr	r3, [r7, #24]
 8088052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8088056:	2b00      	cmp	r3, #0
 8088058:	d1ea      	bne.n	8088030 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 808805a:	68fb      	ldr	r3, [r7, #12]
 808805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808805e:	f003 0304 	and.w	r3, r3, #4
 8088062:	2b00      	cmp	r3, #0
 8088064:	d004      	beq.n	8088070 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8088066:	68fb      	ldr	r3, [r7, #12]
 8088068:	2204      	movs	r2, #4
 808806a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 808806c:	2304      	movs	r3, #4
 808806e:	e03a      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8088070:	68fb      	ldr	r3, [r7, #12]
 8088072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088074:	f003 0301 	and.w	r3, r3, #1
 8088078:	2b00      	cmp	r3, #0
 808807a:	d004      	beq.n	8088086 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 808807c:	68fb      	ldr	r3, [r7, #12]
 808807e:	2201      	movs	r2, #1
 8088080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8088082:	2301      	movs	r3, #1
 8088084:	e02f      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8088086:	68f8      	ldr	r0, [r7, #12]
 8088088:	f7ff fc0d 	bl	80878a6 <SDIO_GetCommandResponse>
 808808c:	4603      	mov	r3, r0
 808808e:	461a      	mov	r2, r3
 8088090:	7afb      	ldrb	r3, [r7, #11]
 8088092:	4293      	cmp	r3, r2
 8088094:	d001      	beq.n	808809a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8088096:	2301      	movs	r3, #1
 8088098:	e025      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 808809a:	68fb      	ldr	r3, [r7, #12]
 808809c:	22c5      	movs	r2, #197	; 0xc5
 808809e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80880a0:	2100      	movs	r1, #0
 80880a2:	68f8      	ldr	r0, [r7, #12]
 80880a4:	f7ff fc0c 	bl	80878c0 <SDIO_GetResponse>
 80880a8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80880aa:	697b      	ldr	r3, [r7, #20]
 80880ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80880b0:	2b00      	cmp	r3, #0
 80880b2:	d106      	bne.n	80880c2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80880b4:	697b      	ldr	r3, [r7, #20]
 80880b6:	0c1b      	lsrs	r3, r3, #16
 80880b8:	b29a      	uxth	r2, r3
 80880ba:	687b      	ldr	r3, [r7, #4]
 80880bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80880be:	2300      	movs	r3, #0
 80880c0:	e011      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80880c2:	697b      	ldr	r3, [r7, #20]
 80880c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80880c8:	2b00      	cmp	r3, #0
 80880ca:	d002      	beq.n	80880d2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80880cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80880d0:	e009      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80880d2:	697b      	ldr	r3, [r7, #20]
 80880d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80880d8:	2b00      	cmp	r3, #0
 80880da:	d002      	beq.n	80880e2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80880dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80880e0:	e001      	b.n	80880e6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80880e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80880e6:	4618      	mov	r0, r3
 80880e8:	3720      	adds	r7, #32
 80880ea:	46bd      	mov	sp, r7
 80880ec:	bd80      	pop	{r7, pc}
 80880ee:	bf00      	nop
 80880f0:	20000084 	.word	0x20000084
 80880f4:	10624dd3 	.word	0x10624dd3

080880f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80880f8:	b480      	push	{r7}
 80880fa:	b085      	sub	sp, #20
 80880fc:	af00      	add	r7, sp, #0
 80880fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8088100:	4b22      	ldr	r3, [pc, #136]	; (808818c <SDMMC_GetCmdResp7+0x94>)
 8088102:	681b      	ldr	r3, [r3, #0]
 8088104:	4a22      	ldr	r2, [pc, #136]	; (8088190 <SDMMC_GetCmdResp7+0x98>)
 8088106:	fba2 2303 	umull	r2, r3, r2, r3
 808810a:	0a5b      	lsrs	r3, r3, #9
 808810c:	f241 3288 	movw	r2, #5000	; 0x1388
 8088110:	fb02 f303 	mul.w	r3, r2, r3
 8088114:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8088116:	68fb      	ldr	r3, [r7, #12]
 8088118:	1e5a      	subs	r2, r3, #1
 808811a:	60fa      	str	r2, [r7, #12]
 808811c:	2b00      	cmp	r3, #0
 808811e:	d102      	bne.n	8088126 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8088120:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8088124:	e02c      	b.n	8088180 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8088126:	687b      	ldr	r3, [r7, #4]
 8088128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808812a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 808812c:	68bb      	ldr	r3, [r7, #8]
 808812e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8088132:	2b00      	cmp	r3, #0
 8088134:	d0ef      	beq.n	8088116 <SDMMC_GetCmdResp7+0x1e>
 8088136:	68bb      	ldr	r3, [r7, #8]
 8088138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 808813c:	2b00      	cmp	r3, #0
 808813e:	d1ea      	bne.n	8088116 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8088140:	687b      	ldr	r3, [r7, #4]
 8088142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088144:	f003 0304 	and.w	r3, r3, #4
 8088148:	2b00      	cmp	r3, #0
 808814a:	d004      	beq.n	8088156 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 808814c:	687b      	ldr	r3, [r7, #4]
 808814e:	2204      	movs	r2, #4
 8088150:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8088152:	2304      	movs	r3, #4
 8088154:	e014      	b.n	8088180 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8088156:	687b      	ldr	r3, [r7, #4]
 8088158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808815a:	f003 0301 	and.w	r3, r3, #1
 808815e:	2b00      	cmp	r3, #0
 8088160:	d004      	beq.n	808816c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8088162:	687b      	ldr	r3, [r7, #4]
 8088164:	2201      	movs	r2, #1
 8088166:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8088168:	2301      	movs	r3, #1
 808816a:	e009      	b.n	8088180 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 808816c:	687b      	ldr	r3, [r7, #4]
 808816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8088174:	2b00      	cmp	r3, #0
 8088176:	d002      	beq.n	808817e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8088178:	687b      	ldr	r3, [r7, #4]
 808817a:	2240      	movs	r2, #64	; 0x40
 808817c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 808817e:	2300      	movs	r3, #0
  
}
 8088180:	4618      	mov	r0, r3
 8088182:	3714      	adds	r7, #20
 8088184:	46bd      	mov	sp, r7
 8088186:	f85d 7b04 	ldr.w	r7, [sp], #4
 808818a:	4770      	bx	lr
 808818c:	20000084 	.word	0x20000084
 8088190:	10624dd3 	.word	0x10624dd3

08088194 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8088194:	b480      	push	{r7}
 8088196:	b085      	sub	sp, #20
 8088198:	af00      	add	r7, sp, #0
 808819a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 808819c:	4b11      	ldr	r3, [pc, #68]	; (80881e4 <SDMMC_GetCmdError+0x50>)
 808819e:	681b      	ldr	r3, [r3, #0]
 80881a0:	4a11      	ldr	r2, [pc, #68]	; (80881e8 <SDMMC_GetCmdError+0x54>)
 80881a2:	fba2 2303 	umull	r2, r3, r2, r3
 80881a6:	0a5b      	lsrs	r3, r3, #9
 80881a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80881ac:	fb02 f303 	mul.w	r3, r2, r3
 80881b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80881b2:	68fb      	ldr	r3, [r7, #12]
 80881b4:	1e5a      	subs	r2, r3, #1
 80881b6:	60fa      	str	r2, [r7, #12]
 80881b8:	2b00      	cmp	r3, #0
 80881ba:	d102      	bne.n	80881c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80881bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80881c0:	e009      	b.n	80881d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80881c2:	687b      	ldr	r3, [r7, #4]
 80881c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80881c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80881ca:	2b00      	cmp	r3, #0
 80881cc:	d0f1      	beq.n	80881b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80881ce:	687b      	ldr	r3, [r7, #4]
 80881d0:	22c5      	movs	r2, #197	; 0xc5
 80881d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80881d4:	2300      	movs	r3, #0
}
 80881d6:	4618      	mov	r0, r3
 80881d8:	3714      	adds	r7, #20
 80881da:	46bd      	mov	sp, r7
 80881dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80881e0:	4770      	bx	lr
 80881e2:	bf00      	nop
 80881e4:	20000084 	.word	0x20000084
 80881e8:	10624dd3 	.word	0x10624dd3

080881ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80881ec:	b580      	push	{r7, lr}
 80881ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80881f0:	4904      	ldr	r1, [pc, #16]	; (8088204 <MX_FATFS_Init+0x18>)
 80881f2:	4805      	ldr	r0, [pc, #20]	; (8088208 <MX_FATFS_Init+0x1c>)
 80881f4:	f000 fa0a 	bl	808860c <FATFS_LinkDriver>
 80881f8:	4603      	mov	r3, r0
 80881fa:	461a      	mov	r2, r3
 80881fc:	4b03      	ldr	r3, [pc, #12]	; (808820c <MX_FATFS_Init+0x20>)
 80881fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8088200:	bf00      	nop
 8088202:	bd80      	pop	{r7, pc}
 8088204:	20000944 	.word	0x20000944
 8088208:	0808cf04 	.word	0x0808cf04
 808820c:	20000940 	.word	0x20000940

08088210 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8088210:	b580      	push	{r7, lr}
 8088212:	b082      	sub	sp, #8
 8088214:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8088216:	2300      	movs	r3, #0
 8088218:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 808821a:	f000 f89e 	bl	808835a <BSP_SD_IsDetected>
 808821e:	4603      	mov	r3, r0
 8088220:	2b01      	cmp	r3, #1
 8088222:	d001      	beq.n	8088228 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8088224:	2301      	movs	r3, #1
 8088226:	e005      	b.n	8088234 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8088228:	4804      	ldr	r0, [pc, #16]	; (808823c <BSP_SD_Init+0x2c>)
 808822a:	f7fc fd46 	bl	8084cba <HAL_SD_Init>
 808822e:	4603      	mov	r3, r0
 8088230:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8088232:	79fb      	ldrb	r3, [r7, #7]
}
 8088234:	4618      	mov	r0, r3
 8088236:	3708      	adds	r7, #8
 8088238:	46bd      	mov	sp, r7
 808823a:	bd80      	pop	{r7, pc}
 808823c:	2000029c 	.word	0x2000029c

08088240 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8088240:	b580      	push	{r7, lr}
 8088242:	b088      	sub	sp, #32
 8088244:	af02      	add	r7, sp, #8
 8088246:	60f8      	str	r0, [r7, #12]
 8088248:	60b9      	str	r1, [r7, #8]
 808824a:	607a      	str	r2, [r7, #4]
 808824c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 808824e:	2300      	movs	r3, #0
 8088250:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8088252:	683b      	ldr	r3, [r7, #0]
 8088254:	9300      	str	r3, [sp, #0]
 8088256:	687b      	ldr	r3, [r7, #4]
 8088258:	68ba      	ldr	r2, [r7, #8]
 808825a:	68f9      	ldr	r1, [r7, #12]
 808825c:	4806      	ldr	r0, [pc, #24]	; (8088278 <BSP_SD_ReadBlocks+0x38>)
 808825e:	f7fc fddd 	bl	8084e1c <HAL_SD_ReadBlocks>
 8088262:	4603      	mov	r3, r0
 8088264:	2b00      	cmp	r3, #0
 8088266:	d001      	beq.n	808826c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8088268:	2301      	movs	r3, #1
 808826a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 808826c:	7dfb      	ldrb	r3, [r7, #23]
}
 808826e:	4618      	mov	r0, r3
 8088270:	3718      	adds	r7, #24
 8088272:	46bd      	mov	sp, r7
 8088274:	bd80      	pop	{r7, pc}
 8088276:	bf00      	nop
 8088278:	2000029c 	.word	0x2000029c

0808827c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 808827c:	b580      	push	{r7, lr}
 808827e:	b088      	sub	sp, #32
 8088280:	af02      	add	r7, sp, #8
 8088282:	60f8      	str	r0, [r7, #12]
 8088284:	60b9      	str	r1, [r7, #8]
 8088286:	607a      	str	r2, [r7, #4]
 8088288:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 808828a:	2300      	movs	r3, #0
 808828c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 808828e:	683b      	ldr	r3, [r7, #0]
 8088290:	9300      	str	r3, [sp, #0]
 8088292:	687b      	ldr	r3, [r7, #4]
 8088294:	68ba      	ldr	r2, [r7, #8]
 8088296:	68f9      	ldr	r1, [r7, #12]
 8088298:	4806      	ldr	r0, [pc, #24]	; (80882b4 <BSP_SD_WriteBlocks+0x38>)
 808829a:	f7fc ff9d 	bl	80851d8 <HAL_SD_WriteBlocks>
 808829e:	4603      	mov	r3, r0
 80882a0:	2b00      	cmp	r3, #0
 80882a2:	d001      	beq.n	80882a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80882a4:	2301      	movs	r3, #1
 80882a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80882a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80882aa:	4618      	mov	r0, r3
 80882ac:	3718      	adds	r7, #24
 80882ae:	46bd      	mov	sp, r7
 80882b0:	bd80      	pop	{r7, pc}
 80882b2:	bf00      	nop
 80882b4:	2000029c 	.word	0x2000029c

080882b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80882b8:	b580      	push	{r7, lr}
 80882ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80882bc:	4805      	ldr	r0, [pc, #20]	; (80882d4 <BSP_SD_GetCardState+0x1c>)
 80882be:	f7fd fc71 	bl	8085ba4 <HAL_SD_GetCardState>
 80882c2:	4603      	mov	r3, r0
 80882c4:	2b04      	cmp	r3, #4
 80882c6:	bf14      	ite	ne
 80882c8:	2301      	movne	r3, #1
 80882ca:	2300      	moveq	r3, #0
 80882cc:	b2db      	uxtb	r3, r3
}
 80882ce:	4618      	mov	r0, r3
 80882d0:	bd80      	pop	{r7, pc}
 80882d2:	bf00      	nop
 80882d4:	2000029c 	.word	0x2000029c

080882d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80882d8:	b580      	push	{r7, lr}
 80882da:	b082      	sub	sp, #8
 80882dc:	af00      	add	r7, sp, #0
 80882de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80882e0:	6879      	ldr	r1, [r7, #4]
 80882e2:	4803      	ldr	r0, [pc, #12]	; (80882f0 <BSP_SD_GetCardInfo+0x18>)
 80882e4:	f7fd fc32 	bl	8085b4c <HAL_SD_GetCardInfo>
}
 80882e8:	bf00      	nop
 80882ea:	3708      	adds	r7, #8
 80882ec:	46bd      	mov	sp, r7
 80882ee:	bd80      	pop	{r7, pc}
 80882f0:	2000029c 	.word	0x2000029c

080882f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80882f4:	b580      	push	{r7, lr}
 80882f6:	b082      	sub	sp, #8
 80882f8:	af00      	add	r7, sp, #0
 80882fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80882fc:	f000 f818 	bl	8088330 <BSP_SD_AbortCallback>
}
 8088300:	bf00      	nop
 8088302:	3708      	adds	r7, #8
 8088304:	46bd      	mov	sp, r7
 8088306:	bd80      	pop	{r7, pc}

08088308 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8088308:	b580      	push	{r7, lr}
 808830a:	b082      	sub	sp, #8
 808830c:	af00      	add	r7, sp, #0
 808830e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8088310:	f000 f815 	bl	808833e <BSP_SD_WriteCpltCallback>
}
 8088314:	bf00      	nop
 8088316:	3708      	adds	r7, #8
 8088318:	46bd      	mov	sp, r7
 808831a:	bd80      	pop	{r7, pc}

0808831c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 808831c:	b580      	push	{r7, lr}
 808831e:	b082      	sub	sp, #8
 8088320:	af00      	add	r7, sp, #0
 8088322:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8088324:	f000 f812 	bl	808834c <BSP_SD_ReadCpltCallback>
}
 8088328:	bf00      	nop
 808832a:	3708      	adds	r7, #8
 808832c:	46bd      	mov	sp, r7
 808832e:	bd80      	pop	{r7, pc}

08088330 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8088330:	b480      	push	{r7}
 8088332:	af00      	add	r7, sp, #0

}
 8088334:	bf00      	nop
 8088336:	46bd      	mov	sp, r7
 8088338:	f85d 7b04 	ldr.w	r7, [sp], #4
 808833c:	4770      	bx	lr

0808833e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 808833e:	b480      	push	{r7}
 8088340:	af00      	add	r7, sp, #0

}
 8088342:	bf00      	nop
 8088344:	46bd      	mov	sp, r7
 8088346:	f85d 7b04 	ldr.w	r7, [sp], #4
 808834a:	4770      	bx	lr

0808834c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 808834c:	b480      	push	{r7}
 808834e:	af00      	add	r7, sp, #0

}
 8088350:	bf00      	nop
 8088352:	46bd      	mov	sp, r7
 8088354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088358:	4770      	bx	lr

0808835a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 808835a:	b580      	push	{r7, lr}
 808835c:	b082      	sub	sp, #8
 808835e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8088360:	2301      	movs	r3, #1
 8088362:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8088364:	f000 f80c 	bl	8088380 <BSP_PlatformIsDetected>
 8088368:	4603      	mov	r3, r0
 808836a:	2b00      	cmp	r3, #0
 808836c:	d101      	bne.n	8088372 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 808836e:	2300      	movs	r3, #0
 8088370:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8088372:	79fb      	ldrb	r3, [r7, #7]
 8088374:	b2db      	uxtb	r3, r3
}
 8088376:	4618      	mov	r0, r3
 8088378:	3708      	adds	r7, #8
 808837a:	46bd      	mov	sp, r7
 808837c:	bd80      	pop	{r7, pc}
	...

08088380 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8088380:	b580      	push	{r7, lr}
 8088382:	b082      	sub	sp, #8
 8088384:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8088386:	2301      	movs	r3, #1
 8088388:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 808838a:	2180      	movs	r1, #128	; 0x80
 808838c:	4806      	ldr	r0, [pc, #24]	; (80883a8 <BSP_PlatformIsDetected+0x28>)
 808838e:	f7fb fb21 	bl	80839d4 <HAL_GPIO_ReadPin>
 8088392:	4603      	mov	r3, r0
 8088394:	2b00      	cmp	r3, #0
 8088396:	d001      	beq.n	808839c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8088398:	2300      	movs	r3, #0
 808839a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 808839c:	79fb      	ldrb	r3, [r7, #7]
}
 808839e:	4618      	mov	r0, r3
 80883a0:	3708      	adds	r7, #8
 80883a2:	46bd      	mov	sp, r7
 80883a4:	bd80      	pop	{r7, pc}
 80883a6:	bf00      	nop
 80883a8:	40020c00 	.word	0x40020c00

080883ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80883ac:	b580      	push	{r7, lr}
 80883ae:	b082      	sub	sp, #8
 80883b0:	af00      	add	r7, sp, #0
 80883b2:	4603      	mov	r3, r0
 80883b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80883b6:	4b0b      	ldr	r3, [pc, #44]	; (80883e4 <SD_CheckStatus+0x38>)
 80883b8:	2201      	movs	r2, #1
 80883ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80883bc:	f7ff ff7c 	bl	80882b8 <BSP_SD_GetCardState>
 80883c0:	4603      	mov	r3, r0
 80883c2:	2b00      	cmp	r3, #0
 80883c4:	d107      	bne.n	80883d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80883c6:	4b07      	ldr	r3, [pc, #28]	; (80883e4 <SD_CheckStatus+0x38>)
 80883c8:	781b      	ldrb	r3, [r3, #0]
 80883ca:	b2db      	uxtb	r3, r3
 80883cc:	f023 0301 	bic.w	r3, r3, #1
 80883d0:	b2da      	uxtb	r2, r3
 80883d2:	4b04      	ldr	r3, [pc, #16]	; (80883e4 <SD_CheckStatus+0x38>)
 80883d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80883d6:	4b03      	ldr	r3, [pc, #12]	; (80883e4 <SD_CheckStatus+0x38>)
 80883d8:	781b      	ldrb	r3, [r3, #0]
 80883da:	b2db      	uxtb	r3, r3
}
 80883dc:	4618      	mov	r0, r3
 80883de:	3708      	adds	r7, #8
 80883e0:	46bd      	mov	sp, r7
 80883e2:	bd80      	pop	{r7, pc}
 80883e4:	2000008d 	.word	0x2000008d

080883e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80883e8:	b580      	push	{r7, lr}
 80883ea:	b082      	sub	sp, #8
 80883ec:	af00      	add	r7, sp, #0
 80883ee:	4603      	mov	r3, r0
 80883f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80883f2:	4b0b      	ldr	r3, [pc, #44]	; (8088420 <SD_initialize+0x38>)
 80883f4:	2201      	movs	r2, #1
 80883f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80883f8:	f7ff ff0a 	bl	8088210 <BSP_SD_Init>
 80883fc:	4603      	mov	r3, r0
 80883fe:	2b00      	cmp	r3, #0
 8088400:	d107      	bne.n	8088412 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8088402:	79fb      	ldrb	r3, [r7, #7]
 8088404:	4618      	mov	r0, r3
 8088406:	f7ff ffd1 	bl	80883ac <SD_CheckStatus>
 808840a:	4603      	mov	r3, r0
 808840c:	461a      	mov	r2, r3
 808840e:	4b04      	ldr	r3, [pc, #16]	; (8088420 <SD_initialize+0x38>)
 8088410:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8088412:	4b03      	ldr	r3, [pc, #12]	; (8088420 <SD_initialize+0x38>)
 8088414:	781b      	ldrb	r3, [r3, #0]
 8088416:	b2db      	uxtb	r3, r3
}
 8088418:	4618      	mov	r0, r3
 808841a:	3708      	adds	r7, #8
 808841c:	46bd      	mov	sp, r7
 808841e:	bd80      	pop	{r7, pc}
 8088420:	2000008d 	.word	0x2000008d

08088424 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8088424:	b580      	push	{r7, lr}
 8088426:	b082      	sub	sp, #8
 8088428:	af00      	add	r7, sp, #0
 808842a:	4603      	mov	r3, r0
 808842c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 808842e:	79fb      	ldrb	r3, [r7, #7]
 8088430:	4618      	mov	r0, r3
 8088432:	f7ff ffbb 	bl	80883ac <SD_CheckStatus>
 8088436:	4603      	mov	r3, r0
}
 8088438:	4618      	mov	r0, r3
 808843a:	3708      	adds	r7, #8
 808843c:	46bd      	mov	sp, r7
 808843e:	bd80      	pop	{r7, pc}

08088440 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8088440:	b580      	push	{r7, lr}
 8088442:	b086      	sub	sp, #24
 8088444:	af00      	add	r7, sp, #0
 8088446:	60b9      	str	r1, [r7, #8]
 8088448:	607a      	str	r2, [r7, #4]
 808844a:	603b      	str	r3, [r7, #0]
 808844c:	4603      	mov	r3, r0
 808844e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8088450:	2301      	movs	r3, #1
 8088452:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8088454:	f04f 33ff 	mov.w	r3, #4294967295
 8088458:	683a      	ldr	r2, [r7, #0]
 808845a:	6879      	ldr	r1, [r7, #4]
 808845c:	68b8      	ldr	r0, [r7, #8]
 808845e:	f7ff feef 	bl	8088240 <BSP_SD_ReadBlocks>
 8088462:	4603      	mov	r3, r0
 8088464:	2b00      	cmp	r3, #0
 8088466:	d107      	bne.n	8088478 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8088468:	bf00      	nop
 808846a:	f7ff ff25 	bl	80882b8 <BSP_SD_GetCardState>
 808846e:	4603      	mov	r3, r0
 8088470:	2b00      	cmp	r3, #0
 8088472:	d1fa      	bne.n	808846a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8088474:	2300      	movs	r3, #0
 8088476:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8088478:	7dfb      	ldrb	r3, [r7, #23]
}
 808847a:	4618      	mov	r0, r3
 808847c:	3718      	adds	r7, #24
 808847e:	46bd      	mov	sp, r7
 8088480:	bd80      	pop	{r7, pc}

08088482 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8088482:	b580      	push	{r7, lr}
 8088484:	b086      	sub	sp, #24
 8088486:	af00      	add	r7, sp, #0
 8088488:	60b9      	str	r1, [r7, #8]
 808848a:	607a      	str	r2, [r7, #4]
 808848c:	603b      	str	r3, [r7, #0]
 808848e:	4603      	mov	r3, r0
 8088490:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8088492:	2301      	movs	r3, #1
 8088494:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8088496:	f04f 33ff 	mov.w	r3, #4294967295
 808849a:	683a      	ldr	r2, [r7, #0]
 808849c:	6879      	ldr	r1, [r7, #4]
 808849e:	68b8      	ldr	r0, [r7, #8]
 80884a0:	f7ff feec 	bl	808827c <BSP_SD_WriteBlocks>
 80884a4:	4603      	mov	r3, r0
 80884a6:	2b00      	cmp	r3, #0
 80884a8:	d107      	bne.n	80884ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80884aa:	bf00      	nop
 80884ac:	f7ff ff04 	bl	80882b8 <BSP_SD_GetCardState>
 80884b0:	4603      	mov	r3, r0
 80884b2:	2b00      	cmp	r3, #0
 80884b4:	d1fa      	bne.n	80884ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80884b6:	2300      	movs	r3, #0
 80884b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80884ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80884bc:	4618      	mov	r0, r3
 80884be:	3718      	adds	r7, #24
 80884c0:	46bd      	mov	sp, r7
 80884c2:	bd80      	pop	{r7, pc}

080884c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80884c4:	b580      	push	{r7, lr}
 80884c6:	b08c      	sub	sp, #48	; 0x30
 80884c8:	af00      	add	r7, sp, #0
 80884ca:	4603      	mov	r3, r0
 80884cc:	603a      	str	r2, [r7, #0]
 80884ce:	71fb      	strb	r3, [r7, #7]
 80884d0:	460b      	mov	r3, r1
 80884d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80884d4:	2301      	movs	r3, #1
 80884d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80884da:	4b25      	ldr	r3, [pc, #148]	; (8088570 <SD_ioctl+0xac>)
 80884dc:	781b      	ldrb	r3, [r3, #0]
 80884de:	b2db      	uxtb	r3, r3
 80884e0:	f003 0301 	and.w	r3, r3, #1
 80884e4:	2b00      	cmp	r3, #0
 80884e6:	d001      	beq.n	80884ec <SD_ioctl+0x28>
 80884e8:	2303      	movs	r3, #3
 80884ea:	e03c      	b.n	8088566 <SD_ioctl+0xa2>

  switch (cmd)
 80884ec:	79bb      	ldrb	r3, [r7, #6]
 80884ee:	2b03      	cmp	r3, #3
 80884f0:	d834      	bhi.n	808855c <SD_ioctl+0x98>
 80884f2:	a201      	add	r2, pc, #4	; (adr r2, 80884f8 <SD_ioctl+0x34>)
 80884f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80884f8:	08088509 	.word	0x08088509
 80884fc:	08088511 	.word	0x08088511
 8088500:	08088529 	.word	0x08088529
 8088504:	08088543 	.word	0x08088543
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8088508:	2300      	movs	r3, #0
 808850a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 808850e:	e028      	b.n	8088562 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8088510:	f107 030c 	add.w	r3, r7, #12
 8088514:	4618      	mov	r0, r3
 8088516:	f7ff fedf 	bl	80882d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 808851a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 808851c:	683b      	ldr	r3, [r7, #0]
 808851e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8088520:	2300      	movs	r3, #0
 8088522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8088526:	e01c      	b.n	8088562 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8088528:	f107 030c 	add.w	r3, r7, #12
 808852c:	4618      	mov	r0, r3
 808852e:	f7ff fed3 	bl	80882d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8088532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8088534:	b29a      	uxth	r2, r3
 8088536:	683b      	ldr	r3, [r7, #0]
 8088538:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 808853a:	2300      	movs	r3, #0
 808853c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8088540:	e00f      	b.n	8088562 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8088542:	f107 030c 	add.w	r3, r7, #12
 8088546:	4618      	mov	r0, r3
 8088548:	f7ff fec6 	bl	80882d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 808854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808854e:	0a5a      	lsrs	r2, r3, #9
 8088550:	683b      	ldr	r3, [r7, #0]
 8088552:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8088554:	2300      	movs	r3, #0
 8088556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 808855a:	e002      	b.n	8088562 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 808855c:	2304      	movs	r3, #4
 808855e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8088562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8088566:	4618      	mov	r0, r3
 8088568:	3730      	adds	r7, #48	; 0x30
 808856a:	46bd      	mov	sp, r7
 808856c:	bd80      	pop	{r7, pc}
 808856e:	bf00      	nop
 8088570:	2000008d 	.word	0x2000008d

08088574 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8088574:	b480      	push	{r7}
 8088576:	b087      	sub	sp, #28
 8088578:	af00      	add	r7, sp, #0
 808857a:	60f8      	str	r0, [r7, #12]
 808857c:	60b9      	str	r1, [r7, #8]
 808857e:	4613      	mov	r3, r2
 8088580:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8088582:	2301      	movs	r3, #1
 8088584:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8088586:	2300      	movs	r3, #0
 8088588:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 808858a:	4b1f      	ldr	r3, [pc, #124]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 808858c:	7a5b      	ldrb	r3, [r3, #9]
 808858e:	b2db      	uxtb	r3, r3
 8088590:	2b00      	cmp	r3, #0
 8088592:	d131      	bne.n	80885f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8088594:	4b1c      	ldr	r3, [pc, #112]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 8088596:	7a5b      	ldrb	r3, [r3, #9]
 8088598:	b2db      	uxtb	r3, r3
 808859a:	461a      	mov	r2, r3
 808859c:	4b1a      	ldr	r3, [pc, #104]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 808859e:	2100      	movs	r1, #0
 80885a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80885a2:	4b19      	ldr	r3, [pc, #100]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885a4:	7a5b      	ldrb	r3, [r3, #9]
 80885a6:	b2db      	uxtb	r3, r3
 80885a8:	4a17      	ldr	r2, [pc, #92]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885aa:	009b      	lsls	r3, r3, #2
 80885ac:	4413      	add	r3, r2
 80885ae:	68fa      	ldr	r2, [r7, #12]
 80885b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80885b2:	4b15      	ldr	r3, [pc, #84]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885b4:	7a5b      	ldrb	r3, [r3, #9]
 80885b6:	b2db      	uxtb	r3, r3
 80885b8:	461a      	mov	r2, r3
 80885ba:	4b13      	ldr	r3, [pc, #76]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885bc:	4413      	add	r3, r2
 80885be:	79fa      	ldrb	r2, [r7, #7]
 80885c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80885c2:	4b11      	ldr	r3, [pc, #68]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885c4:	7a5b      	ldrb	r3, [r3, #9]
 80885c6:	b2db      	uxtb	r3, r3
 80885c8:	1c5a      	adds	r2, r3, #1
 80885ca:	b2d1      	uxtb	r1, r2
 80885cc:	4a0e      	ldr	r2, [pc, #56]	; (8088608 <FATFS_LinkDriverEx+0x94>)
 80885ce:	7251      	strb	r1, [r2, #9]
 80885d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80885d2:	7dbb      	ldrb	r3, [r7, #22]
 80885d4:	3330      	adds	r3, #48	; 0x30
 80885d6:	b2da      	uxtb	r2, r3
 80885d8:	68bb      	ldr	r3, [r7, #8]
 80885da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80885dc:	68bb      	ldr	r3, [r7, #8]
 80885de:	3301      	adds	r3, #1
 80885e0:	223a      	movs	r2, #58	; 0x3a
 80885e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80885e4:	68bb      	ldr	r3, [r7, #8]
 80885e6:	3302      	adds	r3, #2
 80885e8:	222f      	movs	r2, #47	; 0x2f
 80885ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80885ec:	68bb      	ldr	r3, [r7, #8]
 80885ee:	3303      	adds	r3, #3
 80885f0:	2200      	movs	r2, #0
 80885f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80885f4:	2300      	movs	r3, #0
 80885f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80885f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80885fa:	4618      	mov	r0, r3
 80885fc:	371c      	adds	r7, #28
 80885fe:	46bd      	mov	sp, r7
 8088600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088604:	4770      	bx	lr
 8088606:	bf00      	nop
 8088608:	20000948 	.word	0x20000948

0808860c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 808860c:	b580      	push	{r7, lr}
 808860e:	b082      	sub	sp, #8
 8088610:	af00      	add	r7, sp, #0
 8088612:	6078      	str	r0, [r7, #4]
 8088614:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8088616:	2200      	movs	r2, #0
 8088618:	6839      	ldr	r1, [r7, #0]
 808861a:	6878      	ldr	r0, [r7, #4]
 808861c:	f7ff ffaa 	bl	8088574 <FATFS_LinkDriverEx>
 8088620:	4603      	mov	r3, r0
}
 8088622:	4618      	mov	r0, r3
 8088624:	3708      	adds	r7, #8
 8088626:	46bd      	mov	sp, r7
 8088628:	bd80      	pop	{r7, pc}

0808862a <flash_EraseSector>:
{
	HAL_FLASH_Lock();
}

void flash_EraseSector(uint8_t SectorNum)
{
 808862a:	b580      	push	{r7, lr}
 808862c:	b082      	sub	sp, #8
 808862e:	af00      	add	r7, sp, #0
 8088630:	4603      	mov	r3, r0
 8088632:	71fb      	strb	r3, [r7, #7]
	HAL_FLASH_Unlock();
 8088634:	f7fa fe88 	bl	8083348 <HAL_FLASH_Unlock>
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 8088638:	79fb      	ldrb	r3, [r7, #7]
 808863a:	2102      	movs	r1, #2
 808863c:	4618      	mov	r0, r3
 808863e:	f7fa ffe5 	bl	808360c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8088642:	f7fa fea3 	bl	808338c <HAL_FLASH_Lock>
}
 8088646:	bf00      	nop
 8088648:	3708      	adds	r7, #8
 808864a:	46bd      	mov	sp, r7
 808864c:	bd80      	pop	{r7, pc}

0808864e <flash_write_Int>:

void flash_write_Int(uint32_t address, uint32_t iData)
{
 808864e:	b5b0      	push	{r4, r5, r7, lr}
 8088650:	b082      	sub	sp, #8
 8088652:	af00      	add	r7, sp, #0
 8088654:	6078      	str	r0, [r7, #4]
 8088656:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 8088658:	f7fa fe76 	bl	8083348 <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, iData);
 808865c:	683b      	ldr	r3, [r7, #0]
 808865e:	2200      	movs	r2, #0
 8088660:	461c      	mov	r4, r3
 8088662:	4615      	mov	r5, r2
 8088664:	4622      	mov	r2, r4
 8088666:	462b      	mov	r3, r5
 8088668:	6879      	ldr	r1, [r7, #4]
 808866a:	2002      	movs	r0, #2
 808866c:	f7fa fe18 	bl	80832a0 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8088670:	f7fa fe8c 	bl	808338c <HAL_FLASH_Lock>
}
 8088674:	bf00      	nop
 8088676:	3708      	adds	r7, #8
 8088678:	46bd      	mov	sp, r7
 808867a:	bdb0      	pop	{r4, r5, r7, pc}

0808867c <flash_read_Int>:
uint32_t flash_read_Int(uint32_t address)
{
 808867c:	b480      	push	{r7}
 808867e:	b085      	sub	sp, #20
 8088680:	af00      	add	r7, sp, #0
 8088682:	6078      	str	r0, [r7, #4]
		uint32_t*val = (uint32_t *)address;
 8088684:	687b      	ldr	r3, [r7, #4]
 8088686:	60fb      	str	r3, [r7, #12]
		return *val;
 8088688:	68fb      	ldr	r3, [r7, #12]
 808868a:	681b      	ldr	r3, [r3, #0]
//	return *(__IO uint16_t *)(address);
}
 808868c:	4618      	mov	r0, r3
 808868e:	3714      	adds	r7, #20
 8088690:	46bd      	mov	sp, r7
 8088692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088696:	4770      	bx	lr

08088698 <flash_write_Array>:
{
	uint32_t data = *(__IO uint32_t *)(address);
	return *(float *)(&data);
}
void flash_write_Array(uint32_t address, char* arrData, uint16_t length)
{
 8088698:	b5b0      	push	{r4, r5, r7, lr}
 808869a:	b086      	sub	sp, #24
 808869c:	af00      	add	r7, sp, #0
 808869e:	60f8      	str	r0, [r7, #12]
 80886a0:	60b9      	str	r1, [r7, #8]
 80886a2:	4613      	mov	r3, r2
 80886a4:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80886a6:	f7fa fe4f 	bl	8083348 <HAL_FLASH_Unlock>
	uint32_t *pt = (uint32_t*) arrData;
 80886aa:	68bb      	ldr	r3, [r7, #8]
 80886ac:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (length + 3) / 4; i++)
 80886ae:	2300      	movs	r3, #0
 80886b0:	827b      	strh	r3, [r7, #18]
 80886b2:	e014      	b.n	80886de <flash_write_Array+0x46>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address+4*i, *pt);
 80886b4:	8a7b      	ldrh	r3, [r7, #18]
 80886b6:	009b      	lsls	r3, r3, #2
 80886b8:	461a      	mov	r2, r3
 80886ba:	68fb      	ldr	r3, [r7, #12]
 80886bc:	18d1      	adds	r1, r2, r3
 80886be:	697b      	ldr	r3, [r7, #20]
 80886c0:	681b      	ldr	r3, [r3, #0]
 80886c2:	2200      	movs	r2, #0
 80886c4:	461c      	mov	r4, r3
 80886c6:	4615      	mov	r5, r2
 80886c8:	4622      	mov	r2, r4
 80886ca:	462b      	mov	r3, r5
 80886cc:	2002      	movs	r0, #2
 80886ce:	f7fa fde7 	bl	80832a0 <HAL_FLASH_Program>
		pt++;
 80886d2:	697b      	ldr	r3, [r7, #20]
 80886d4:	3304      	adds	r3, #4
 80886d6:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (length + 3) / 4; i++)
 80886d8:	8a7b      	ldrh	r3, [r7, #18]
 80886da:	3301      	adds	r3, #1
 80886dc:	827b      	strh	r3, [r7, #18]
 80886de:	8a7a      	ldrh	r2, [r7, #18]
 80886e0:	88fb      	ldrh	r3, [r7, #6]
 80886e2:	3303      	adds	r3, #3
 80886e4:	2b00      	cmp	r3, #0
 80886e6:	da00      	bge.n	80886ea <flash_write_Array+0x52>
 80886e8:	3303      	adds	r3, #3
 80886ea:	109b      	asrs	r3, r3, #2
 80886ec:	429a      	cmp	r2, r3
 80886ee:	dbe1      	blt.n	80886b4 <flash_write_Array+0x1c>
	}
	HAL_FLASH_Lock();
 80886f0:	f7fa fe4c 	bl	808338c <HAL_FLASH_Lock>
}
 80886f4:	bf00      	nop
 80886f6:	3718      	adds	r7, #24
 80886f8:	46bd      	mov	sp, r7
 80886fa:	bdb0      	pop	{r4, r5, r7, pc}

080886fc <crcCalculation>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, status ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

uint16_t crcCalculation(uint8_t *rs485_data, int in_dx)
{
 80886fc:	b480      	push	{r7}
 80886fe:	b087      	sub	sp, #28
 8088700:	af00      	add	r7, sp, #0
 8088702:	6078      	str	r0, [r7, #4]
 8088704:	6039      	str	r1, [r7, #0]
	int i, j;
	uint16_t crc = 0xFFFF;
 8088706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808870a:	81fb      	strh	r3, [r7, #14]
	uint16_t crctemp;
	for (i = 0; i < in_dx; i++)
 808870c:	2300      	movs	r3, #0
 808870e:	617b      	str	r3, [r7, #20]
 8088710:	e026      	b.n	8088760 <crcCalculation+0x64>
	{
		crc = rs485_data[i] ^ crc;
 8088712:	697b      	ldr	r3, [r7, #20]
 8088714:	687a      	ldr	r2, [r7, #4]
 8088716:	4413      	add	r3, r2
 8088718:	781b      	ldrb	r3, [r3, #0]
 808871a:	b29a      	uxth	r2, r3
 808871c:	89fb      	ldrh	r3, [r7, #14]
 808871e:	4053      	eors	r3, r2
 8088720:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 8088722:	2301      	movs	r3, #1
 8088724:	613b      	str	r3, [r7, #16]
 8088726:	e015      	b.n	8088754 <crcCalculation+0x58>
		{
			crctemp = crc / 2;
 8088728:	89fb      	ldrh	r3, [r7, #14]
 808872a:	085b      	lsrs	r3, r3, #1
 808872c:	81bb      	strh	r3, [r7, #12]
			if (crc - crctemp * 2 == 1)
 808872e:	89fa      	ldrh	r2, [r7, #14]
 8088730:	89bb      	ldrh	r3, [r7, #12]
 8088732:	005b      	lsls	r3, r3, #1
 8088734:	1ad3      	subs	r3, r2, r3
 8088736:	2b01      	cmp	r3, #1
 8088738:	d107      	bne.n	808874a <crcCalculation+0x4e>
			{
				crc = crctemp ^ 0xA001;
 808873a:	89bb      	ldrh	r3, [r7, #12]
 808873c:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8088740:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8088744:	43db      	mvns	r3, r3
 8088746:	81fb      	strh	r3, [r7, #14]
 8088748:	e001      	b.n	808874e <crcCalculation+0x52>
			}
			else
			{
				crc = crctemp;
 808874a:	89bb      	ldrh	r3, [r7, #12]
 808874c:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 808874e:	693b      	ldr	r3, [r7, #16]
 8088750:	3301      	adds	r3, #1
 8088752:	613b      	str	r3, [r7, #16]
 8088754:	693b      	ldr	r3, [r7, #16]
 8088756:	2b08      	cmp	r3, #8
 8088758:	dde6      	ble.n	8088728 <crcCalculation+0x2c>
	for (i = 0; i < in_dx; i++)
 808875a:	697b      	ldr	r3, [r7, #20]
 808875c:	3301      	adds	r3, #1
 808875e:	617b      	str	r3, [r7, #20]
 8088760:	697a      	ldr	r2, [r7, #20]
 8088762:	683b      	ldr	r3, [r7, #0]
 8088764:	429a      	cmp	r2, r3
 8088766:	dbd4      	blt.n	8088712 <crcCalculation+0x16>
			}
		}
	}
	return crc;
 8088768:	89fb      	ldrh	r3, [r7, #14]
	//  crctemp1 = crc/256;
	//  crctemp2 = crc*256;
	//  crc= crctemp1 + crctemp2;
	//	crc1 =crc>>8;
	//	crc2=(uint8_t)crc;
}
 808876a:	4618      	mov	r0, r3
 808876c:	371c      	adds	r7, #28
 808876e:	46bd      	mov	sp, r7
 8088770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8088774:	4770      	bx	lr
	...

08088778 <RS485_transmit>:

void RS485_transmit(UART_HandleTypeDef *huart, RS485Query_t p_RS485Query)
{
 8088778:	b580      	push	{r7, lr}
 808877a:	b088      	sub	sp, #32
 808877c:	af00      	add	r7, sp, #0
 808877e:	60f8      	str	r0, [r7, #12]
 8088780:	4638      	mov	r0, r7
 8088782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t queryData[10];
	uint8_t ind = 0;
 8088786:	2300      	movs	r3, #0
 8088788:	77fb      	strb	r3, [r7, #31]
	queryData[ind++] = p_RS485Query.slaveAddress;
 808878a:	7ffb      	ldrb	r3, [r7, #31]
 808878c:	1c5a      	adds	r2, r3, #1
 808878e:	77fa      	strb	r2, [r7, #31]
 8088790:	783a      	ldrb	r2, [r7, #0]
 8088792:	3320      	adds	r3, #32
 8088794:	443b      	add	r3, r7
 8088796:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = p_RS485Query.mbFunction;
 808879a:	7ffb      	ldrb	r3, [r7, #31]
 808879c:	1c5a      	adds	r2, r3, #1
 808879e:	77fa      	strb	r2, [r7, #31]
 80887a0:	787a      	ldrb	r2, [r7, #1]
 80887a2:	3320      	adds	r3, #32
 80887a4:	443b      	add	r3, r7
 80887a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	if ((p_RS485Query.mbFunction == Read_CoilStatus) || (p_RS485Query.mbFunction == Read_InputStatus) || (p_RS485Query.mbFunction == Read_HoldingRegister) || (p_RS485Query.mbFunction == Read_InputRegister) || (p_RS485Query.mbFunction == Force_SingleCoil) || (p_RS485Query.mbFunction == Preset_SingleRegister))
 80887aa:	787b      	ldrb	r3, [r7, #1]
 80887ac:	2b01      	cmp	r3, #1
 80887ae:	d00e      	beq.n	80887ce <RS485_transmit+0x56>
 80887b0:	787b      	ldrb	r3, [r7, #1]
 80887b2:	2b02      	cmp	r3, #2
 80887b4:	d00b      	beq.n	80887ce <RS485_transmit+0x56>
 80887b6:	787b      	ldrb	r3, [r7, #1]
 80887b8:	2b03      	cmp	r3, #3
 80887ba:	d008      	beq.n	80887ce <RS485_transmit+0x56>
 80887bc:	787b      	ldrb	r3, [r7, #1]
 80887be:	2b04      	cmp	r3, #4
 80887c0:	d005      	beq.n	80887ce <RS485_transmit+0x56>
 80887c2:	787b      	ldrb	r3, [r7, #1]
 80887c4:	2b05      	cmp	r3, #5
 80887c6:	d002      	beq.n	80887ce <RS485_transmit+0x56>
 80887c8:	787b      	ldrb	r3, [r7, #1]
 80887ca:	2b06      	cmp	r3, #6
 80887cc:	d127      	bne.n	808881e <RS485_transmit+0xa6>
	{
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress >> 8);
 80887ce:	887b      	ldrh	r3, [r7, #2]
 80887d0:	0a1b      	lsrs	r3, r3, #8
 80887d2:	b29a      	uxth	r2, r3
 80887d4:	7ffb      	ldrb	r3, [r7, #31]
 80887d6:	1c59      	adds	r1, r3, #1
 80887d8:	77f9      	strb	r1, [r7, #31]
 80887da:	b2d2      	uxtb	r2, r2
 80887dc:	3320      	adds	r3, #32
 80887de:	443b      	add	r3, r7
 80887e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regAddress & 0xFF);
 80887e4:	887a      	ldrh	r2, [r7, #2]
 80887e6:	7ffb      	ldrb	r3, [r7, #31]
 80887e8:	1c59      	adds	r1, r3, #1
 80887ea:	77f9      	strb	r1, [r7, #31]
 80887ec:	b2d2      	uxtb	r2, r2
 80887ee:	3320      	adds	r3, #32
 80887f0:	443b      	add	r3, r7
 80887f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount >> 8);
 80887f6:	893b      	ldrh	r3, [r7, #8]
 80887f8:	0a1b      	lsrs	r3, r3, #8
 80887fa:	b29a      	uxth	r2, r3
 80887fc:	7ffb      	ldrb	r3, [r7, #31]
 80887fe:	1c59      	adds	r1, r3, #1
 8088800:	77f9      	strb	r1, [r7, #31]
 8088802:	b2d2      	uxtb	r2, r2
 8088804:	3320      	adds	r3, #32
 8088806:	443b      	add	r3, r7
 8088808:	f803 2c0c 	strb.w	r2, [r3, #-12]
		queryData[ind++] = (uint8_t)(p_RS485Query.regCount & 0xFF);
 808880c:	893a      	ldrh	r2, [r7, #8]
 808880e:	7ffb      	ldrb	r3, [r7, #31]
 8088810:	1c59      	adds	r1, r3, #1
 8088812:	77f9      	strb	r1, [r7, #31]
 8088814:	b2d2      	uxtb	r2, r2
 8088816:	3320      	adds	r3, #32
 8088818:	443b      	add	r3, r7
 808881a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	}
	else if ((p_RS485Query.mbFunction == Read_ExceptionStatus) || (p_RS485Query.mbFunction == Fetch_CommEventCounter) || (p_RS485Query.mbFunction == Fetch_CommEventLog))
	{
	}
	p_RS485Query.crc = crcCalculation(queryData, ind);
 808881e:	7ffa      	ldrb	r2, [r7, #31]
 8088820:	f107 0314 	add.w	r3, r7, #20
 8088824:	4611      	mov	r1, r2
 8088826:	4618      	mov	r0, r3
 8088828:	f7ff ff68 	bl	80886fc <crcCalculation>
 808882c:	4603      	mov	r3, r0
 808882e:	817b      	strh	r3, [r7, #10]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc & 0xFF);
 8088830:	897a      	ldrh	r2, [r7, #10]
 8088832:	7ffb      	ldrb	r3, [r7, #31]
 8088834:	1c59      	adds	r1, r3, #1
 8088836:	77f9      	strb	r1, [r7, #31]
 8088838:	b2d2      	uxtb	r2, r2
 808883a:	3320      	adds	r3, #32
 808883c:	443b      	add	r3, r7
 808883e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = (uint8_t)(p_RS485Query.crc >> 8);
 8088842:	897b      	ldrh	r3, [r7, #10]
 8088844:	0a1b      	lsrs	r3, r3, #8
 8088846:	b29a      	uxth	r2, r3
 8088848:	7ffb      	ldrb	r3, [r7, #31]
 808884a:	1c59      	adds	r1, r3, #1
 808884c:	77f9      	strb	r1, [r7, #31]
 808884e:	b2d2      	uxtb	r2, r2
 8088850:	3320      	adds	r3, #32
 8088852:	443b      	add	r3, r7
 8088854:	f803 2c0c 	strb.w	r2, [r3, #-12]
	//	RS485_EnablePin(TRANSMIT);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8088858:	2201      	movs	r2, #1
 808885a:	2108      	movs	r1, #8
 808885c:	480a      	ldr	r0, [pc, #40]	; (8088888 <RS485_transmit+0x110>)
 808885e:	f7fb f8d1 	bl	8083a04 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(huart, (uint8_t *)queryData, ind, 1000);
 8088862:	7ffb      	ldrb	r3, [r7, #31]
 8088864:	b29a      	uxth	r2, r3
 8088866:	f107 0114 	add.w	r1, r7, #20
 808886a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808886e:	68f8      	ldr	r0, [r7, #12]
 8088870:	f7fd fc9d 	bl	80861ae <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8088874:	2200      	movs	r2, #0
 8088876:	2108      	movs	r1, #8
 8088878:	4803      	ldr	r0, [pc, #12]	; (8088888 <RS485_transmit+0x110>)
 808887a:	f7fb f8c3 	bl	8083a04 <HAL_GPIO_WritePin>
	//	RS485_EnablePin(RECEIVE);
}
 808887e:	bf00      	nop
 8088880:	3720      	adds	r7, #32
 8088882:	46bd      	mov	sp, r7
 8088884:	bd80      	pop	{r7, pc}
 8088886:	bf00      	nop
 8088888:	40020800 	.word	0x40020800

0808888c <RS485_Master_Receive>:
		}
	}
	return rs485;
}
void RS485_Master_Receive(char Master_ReceivedBuff[], int length)
{
 808888c:	b580      	push	{r7, lr}
 808888e:	b088      	sub	sp, #32
 8088890:	af00      	add	r7, sp, #0
 8088892:	6078      	str	r0, [r7, #4]
 8088894:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(&RS485_UART, (uint8_t *)UART6_ReceivedBuff, length, 1000);
 8088896:	683b      	ldr	r3, [r7, #0]
 8088898:	b29a      	uxth	r2, r3
 808889a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808889e:	4935      	ldr	r1, [pc, #212]	; (8088974 <RS485_Master_Receive+0xe8>)
 80888a0:	4835      	ldr	r0, [pc, #212]	; (8088978 <RS485_Master_Receive+0xec>)
 80888a2:	f7fd fd16 	bl	80862d2 <HAL_UART_Receive>
	for (int s = 0; s < length; s++)
 80888a6:	2300      	movs	r3, #0
 80888a8:	61fb      	str	r3, [r7, #28]
 80888aa:	e05a      	b.n	8088962 <RS485_Master_Receive+0xd6>
	{
		int index_Adr = s;
 80888ac:	69fb      	ldr	r3, [r7, #28]
 80888ae:	613b      	str	r3, [r7, #16]
		int index_Func = (s + 1) % length;
 80888b0:	69fb      	ldr	r3, [r7, #28]
 80888b2:	3301      	adds	r3, #1
 80888b4:	683a      	ldr	r2, [r7, #0]
 80888b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80888ba:	6839      	ldr	r1, [r7, #0]
 80888bc:	fb01 f202 	mul.w	r2, r1, r2
 80888c0:	1a9b      	subs	r3, r3, r2
 80888c2:	60fb      	str	r3, [r7, #12]
		// int index_Reg = (s + 3) % length;
		if (UART6_ReceivedBuff[index_Adr] == 0x01 && UART6_ReceivedBuff[index_Func] == 0x03)
 80888c4:	4a2b      	ldr	r2, [pc, #172]	; (8088974 <RS485_Master_Receive+0xe8>)
 80888c6:	693b      	ldr	r3, [r7, #16]
 80888c8:	4413      	add	r3, r2
 80888ca:	781b      	ldrb	r3, [r3, #0]
 80888cc:	2b01      	cmp	r3, #1
 80888ce:	d11f      	bne.n	8088910 <RS485_Master_Receive+0x84>
 80888d0:	4a28      	ldr	r2, [pc, #160]	; (8088974 <RS485_Master_Receive+0xe8>)
 80888d2:	68fb      	ldr	r3, [r7, #12]
 80888d4:	4413      	add	r3, r2
 80888d6:	781b      	ldrb	r3, [r3, #0]
 80888d8:	2b03      	cmp	r3, #3
 80888da:	d119      	bne.n	8088910 <RS485_Master_Receive+0x84>
		{
			for (int v = 0; v < length; v++)
 80888dc:	2300      	movs	r3, #0
 80888de:	61bb      	str	r3, [r7, #24]
 80888e0:	e012      	b.n	8088908 <RS485_Master_Receive+0x7c>
			{
				Master_ReceivedBuff[v] = UART6_ReceivedBuff[(v + index_Adr) % length];
 80888e2:	69ba      	ldr	r2, [r7, #24]
 80888e4:	693b      	ldr	r3, [r7, #16]
 80888e6:	4413      	add	r3, r2
 80888e8:	683a      	ldr	r2, [r7, #0]
 80888ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80888ee:	6839      	ldr	r1, [r7, #0]
 80888f0:	fb01 f202 	mul.w	r2, r1, r2
 80888f4:	1a9a      	subs	r2, r3, r2
 80888f6:	69bb      	ldr	r3, [r7, #24]
 80888f8:	6879      	ldr	r1, [r7, #4]
 80888fa:	440b      	add	r3, r1
 80888fc:	491d      	ldr	r1, [pc, #116]	; (8088974 <RS485_Master_Receive+0xe8>)
 80888fe:	5c8a      	ldrb	r2, [r1, r2]
 8088900:	701a      	strb	r2, [r3, #0]
			for (int v = 0; v < length; v++)
 8088902:	69bb      	ldr	r3, [r7, #24]
 8088904:	3301      	adds	r3, #1
 8088906:	61bb      	str	r3, [r7, #24]
 8088908:	69ba      	ldr	r2, [r7, #24]
 808890a:	683b      	ldr	r3, [r7, #0]
 808890c:	429a      	cmp	r2, r3
 808890e:	dbe8      	blt.n	80888e2 <RS485_Master_Receive+0x56>
			}
		}
		if (UART6_ReceivedBuff[index_Adr] == 0x01 && UART6_ReceivedBuff[index_Func] == 0x01)
 8088910:	4a18      	ldr	r2, [pc, #96]	; (8088974 <RS485_Master_Receive+0xe8>)
 8088912:	693b      	ldr	r3, [r7, #16]
 8088914:	4413      	add	r3, r2
 8088916:	781b      	ldrb	r3, [r3, #0]
 8088918:	2b01      	cmp	r3, #1
 808891a:	d11f      	bne.n	808895c <RS485_Master_Receive+0xd0>
 808891c:	4a15      	ldr	r2, [pc, #84]	; (8088974 <RS485_Master_Receive+0xe8>)
 808891e:	68fb      	ldr	r3, [r7, #12]
 8088920:	4413      	add	r3, r2
 8088922:	781b      	ldrb	r3, [r3, #0]
 8088924:	2b01      	cmp	r3, #1
 8088926:	d119      	bne.n	808895c <RS485_Master_Receive+0xd0>
		{
			for (int v = 0; v < length; v++)
 8088928:	2300      	movs	r3, #0
 808892a:	617b      	str	r3, [r7, #20]
 808892c:	e012      	b.n	8088954 <RS485_Master_Receive+0xc8>
			{
				Master_ReceivedBuff[v] = UART6_ReceivedBuff[(v + index_Adr) % length];
 808892e:	697a      	ldr	r2, [r7, #20]
 8088930:	693b      	ldr	r3, [r7, #16]
 8088932:	4413      	add	r3, r2
 8088934:	683a      	ldr	r2, [r7, #0]
 8088936:	fb93 f2f2 	sdiv	r2, r3, r2
 808893a:	6839      	ldr	r1, [r7, #0]
 808893c:	fb01 f202 	mul.w	r2, r1, r2
 8088940:	1a9a      	subs	r2, r3, r2
 8088942:	697b      	ldr	r3, [r7, #20]
 8088944:	6879      	ldr	r1, [r7, #4]
 8088946:	440b      	add	r3, r1
 8088948:	490a      	ldr	r1, [pc, #40]	; (8088974 <RS485_Master_Receive+0xe8>)
 808894a:	5c8a      	ldrb	r2, [r1, r2]
 808894c:	701a      	strb	r2, [r3, #0]
			for (int v = 0; v < length; v++)
 808894e:	697b      	ldr	r3, [r7, #20]
 8088950:	3301      	adds	r3, #1
 8088952:	617b      	str	r3, [r7, #20]
 8088954:	697a      	ldr	r2, [r7, #20]
 8088956:	683b      	ldr	r3, [r7, #0]
 8088958:	429a      	cmp	r2, r3
 808895a:	dbe8      	blt.n	808892e <RS485_Master_Receive+0xa2>
	for (int s = 0; s < length; s++)
 808895c:	69fb      	ldr	r3, [r7, #28]
 808895e:	3301      	adds	r3, #1
 8088960:	61fb      	str	r3, [r7, #28]
 8088962:	69fa      	ldr	r2, [r7, #28]
 8088964:	683b      	ldr	r3, [r7, #0]
 8088966:	429a      	cmp	r2, r3
 8088968:	dba0      	blt.n	80888ac <RS485_Master_Receive+0x20>
			}
		}
	}
}
 808896a:	bf00      	nop
 808896c:	bf00      	nop
 808896e:	3720      	adds	r7, #32
 8088970:	46bd      	mov	sp, r7
 8088972:	bd80      	pop	{r7, pc}
 8088974:	20000954 	.word	0x20000954
 8088978:	200003ec 	.word	0x200003ec

0808897c <SIM_Init>:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*) rxBuffer, RX_LEN);
	__HAL_DMA_DISABLE_IT(&SIM_UART_DMA, DMA_IT_HT);
}*/

void SIM_Init(GPIO_TypeDef *PowerPort, uint16_t PowerPin)
{
 808897c:	b580      	push	{r7, lr}
 808897e:	b082      	sub	sp, #8
 8088980:	af00      	add	r7, sp, #0
 8088982:	6078      	str	r0, [r7, #4]
 8088984:	460b      	mov	r3, r1
 8088986:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(PowerPort, PowerPin, GPIO_PIN_SET);			//Bat PWR len
 8088988:	887b      	ldrh	r3, [r7, #2]
 808898a:	2201      	movs	r2, #1
 808898c:	4619      	mov	r1, r3
 808898e:	6878      	ldr	r0, [r7, #4]
 8088990:	f7fb f838 	bl	8083a04 <HAL_GPIO_WritePin>
	//	HAL_GPIO_WritePin(PowerPort, PowerPin, GPIO_PIN_RESET);			//Bat PWR len
	//	HAL_GPIO_WritePin(PowerPort, PowerPin, GPIO_PIN_SET);			//Bat PWR len
	//	HAL_GPIO_WritePin(PowerPort, PowerPin, GPIO_PIN_RESET);			//Bat PWR len

	HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_RESET);
 8088994:	2200      	movs	r2, #0
 8088996:	2101      	movs	r1, #1
 8088998:	480c      	ldr	r0, [pc, #48]	; (80889cc <SIM_Init+0x50>)
 808899a:	f7fb f833 	bl	8083a04 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(DTR_GPIO_Port, DTR_Pin, GPIO_PIN_SET);
//		HAL_Delay(2000);
//	}


	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);		//Khong Reset
 808899e:	2200      	movs	r2, #0
 80889a0:	2120      	movs	r1, #32
 80889a2:	480b      	ldr	r0, [pc, #44]	; (80889d0 <SIM_Init+0x54>)
 80889a4:	f7fb f82e 	bl	8083a04 <HAL_GPIO_WritePin>
	//	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);		// Reset
	//	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);		//Khong Reset
	//	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);		// Reset

	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*) rxBuffer, RX_LEN);
 80889a8:	f44f 720c 	mov.w	r2, #560	; 0x230
 80889ac:	4909      	ldr	r1, [pc, #36]	; (80889d4 <SIM_Init+0x58>)
 80889ae:	480a      	ldr	r0, [pc, #40]	; (80889d8 <SIM_Init+0x5c>)
 80889b0:	f7fd fd61 	bl	8086476 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&SIM_UART_DMA, DMA_IT_HT);
 80889b4:	4b09      	ldr	r3, [pc, #36]	; (80889dc <SIM_Init+0x60>)
 80889b6:	681b      	ldr	r3, [r3, #0]
 80889b8:	681a      	ldr	r2, [r3, #0]
 80889ba:	4b08      	ldr	r3, [pc, #32]	; (80889dc <SIM_Init+0x60>)
 80889bc:	681b      	ldr	r3, [r3, #0]
 80889be:	f022 0208 	bic.w	r2, r2, #8
 80889c2:	601a      	str	r2, [r3, #0]
}
 80889c4:	bf00      	nop
 80889c6:	3708      	adds	r7, #8
 80889c8:	46bd      	mov	sp, r7
 80889ca:	bd80      	pop	{r7, pc}
 80889cc:	40020000 	.word	0x40020000
 80889d0:	40020800 	.word	0x40020800
 80889d4:	20000960 	.word	0x20000960
 80889d8:	20000364 	.word	0x20000364
 80889dc:	20000490 	.word	0x20000490

080889e0 <SIM_RxEvent>:

void SIM_RxEvent(void)
{
 80889e0:	b580      	push	{r7, lr}
 80889e2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t*) rxBuffer, RX_LEN);
 80889e4:	f44f 720c 	mov.w	r2, #560	; 0x230
 80889e8:	490d      	ldr	r1, [pc, #52]	; (8088a20 <SIM_RxEvent+0x40>)
 80889ea:	480e      	ldr	r0, [pc, #56]	; (8088a24 <SIM_RxEvent+0x44>)
 80889ec:	f7fd fd43 	bl	8086476 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&SIM_UART_DMA, DMA_IT_HT);
 80889f0:	4b0d      	ldr	r3, [pc, #52]	; (8088a28 <SIM_RxEvent+0x48>)
 80889f2:	681b      	ldr	r3, [r3, #0]
 80889f4:	681a      	ldr	r2, [r3, #0]
 80889f6:	4b0c      	ldr	r3, [pc, #48]	; (8088a28 <SIM_RxEvent+0x48>)
 80889f8:	681b      	ldr	r3, [r3, #0]
 80889fa:	f022 0208 	bic.w	r2, r2, #8
 80889fe:	601a      	str	r2, [r3, #0]

	RxFlag = 1;
 8088a00:	4b0a      	ldr	r3, [pc, #40]	; (8088a2c <SIM_RxEvent+0x4c>)
 8088a02:	2201      	movs	r2, #1
 8088a04:	701a      	strb	r2, [r3, #0]
	if(strstr(rxBuffer, "+CMT:") != NULL)
 8088a06:	490a      	ldr	r1, [pc, #40]	; (8088a30 <SIM_RxEvent+0x50>)
 8088a08:	4805      	ldr	r0, [pc, #20]	; (8088a20 <SIM_RxEvent+0x40>)
 8088a0a:	f001 fbd5 	bl	808a1b8 <strstr>
 8088a0e:	4603      	mov	r3, r0
 8088a10:	2b00      	cmp	r3, #0
 8088a12:	d002      	beq.n	8088a1a <SIM_RxEvent+0x3a>
	{
		smsFlag = true;
 8088a14:	4b07      	ldr	r3, [pc, #28]	; (8088a34 <SIM_RxEvent+0x54>)
 8088a16:	2201      	movs	r2, #1
 8088a18:	701a      	strb	r2, [r3, #0]
	}
}
 8088a1a:	bf00      	nop
 8088a1c:	bd80      	pop	{r7, pc}
 8088a1e:	bf00      	nop
 8088a20:	20000960 	.word	0x20000960
 8088a24:	20000364 	.word	0x20000364
 8088a28:	20000490 	.word	0x20000490
 8088a2c:	2000095d 	.word	0x2000095d
 8088a30:	0808ca60 	.word	0x0808ca60
 8088a34:	2000095e 	.word	0x2000095e

08088a38 <SIM_Config>:
			HAL_NVIC_SystemReset();
		}
	}
}
void SIM_Config(void)
{
 8088a38:	b580      	push	{r7, lr}
 8088a3a:	af00      	add	r7, sp, #0
	//	SIM_Start();
	sendATcommand("AT+CSCLK=0", "OK", 1000);							// tắt Echo
 8088a3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088a40:	492a      	ldr	r1, [pc, #168]	; (8088aec <SIM_Config+0xb4>)
 8088a42:	482b      	ldr	r0, [pc, #172]	; (8088af0 <SIM_Config+0xb8>)
 8088a44:	f000 fdba 	bl	80895bc <sendATcommand>
	sendATcommand("ATE0", "OK", 1000);							// tắt Echo
 8088a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088a4c:	4927      	ldr	r1, [pc, #156]	; (8088aec <SIM_Config+0xb4>)
 8088a4e:	4829      	ldr	r0, [pc, #164]	; (8088af4 <SIM_Config+0xbc>)
 8088a50:	f000 fdb4 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CVALARM=1,3300,4300", "OK", 1000);
 8088a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088a58:	4924      	ldr	r1, [pc, #144]	; (8088aec <SIM_Config+0xb4>)
 8088a5a:	4827      	ldr	r0, [pc, #156]	; (8088af8 <SIM_Config+0xc0>)
 8088a5c:	f000 fdae 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CPMVT=0,3300,4300", "OK", 1000);
 8088a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8088a64:	4921      	ldr	r1, [pc, #132]	; (8088aec <SIM_Config+0xb4>)
 8088a66:	4825      	ldr	r0, [pc, #148]	; (8088afc <SIM_Config+0xc4>)
 8088a68:	f000 fda8 	bl	80895bc <sendATcommand>

	sendATcommand("AT+CPIN?", "OK", 9000);						//
 8088a6c:	f242 3228 	movw	r2, #9000	; 0x2328
 8088a70:	491e      	ldr	r1, [pc, #120]	; (8088aec <SIM_Config+0xb4>)
 8088a72:	4823      	ldr	r0, [pc, #140]	; (8088b00 <SIM_Config+0xc8>)
 8088a74:	f000 fda2 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CREG?", "OK", 9000);						//
 8088a78:	f242 3228 	movw	r2, #9000	; 0x2328
 8088a7c:	491b      	ldr	r1, [pc, #108]	; (8088aec <SIM_Config+0xb4>)
 8088a7e:	4821      	ldr	r0, [pc, #132]	; (8088b04 <SIM_Config+0xcc>)
 8088a80:	f000 fd9c 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CGREG?", "OK", 9000);						//
 8088a84:	f242 3228 	movw	r2, #9000	; 0x2328
 8088a88:	4918      	ldr	r1, [pc, #96]	; (8088aec <SIM_Config+0xb4>)
 8088a8a:	481f      	ldr	r0, [pc, #124]	; (8088b08 <SIM_Config+0xd0>)
 8088a8c:	f000 fd96 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CNMP=39", "OK",9000);						// Chọn chế độ cho thẻ sim
 8088a90:	f242 3228 	movw	r2, #9000	; 0x2328
 8088a94:	4915      	ldr	r1, [pc, #84]	; (8088aec <SIM_Config+0xb4>)
 8088a96:	481d      	ldr	r0, [pc, #116]	; (8088b0c <SIM_Config+0xd4>)
 8088a98:	f000 fd90 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CPBS=\"ME\"", "OK", 9000);				// Chọn chế độ lưu trữ cho module Sim
 8088a9c:	f242 3228 	movw	r2, #9000	; 0x2328
 8088aa0:	4912      	ldr	r1, [pc, #72]	; (8088aec <SIM_Config+0xb4>)
 8088aa2:	481b      	ldr	r0, [pc, #108]	; (8088b10 <SIM_Config+0xd8>)
 8088aa4:	f000 fd8a 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CPMS=\"SM\",\"SM\",\"SM\"", "OK", 9000);	// Lưu trữ tin nhắn ưu thích
 8088aa8:	f242 3228 	movw	r2, #9000	; 0x2328
 8088aac:	490f      	ldr	r1, [pc, #60]	; (8088aec <SIM_Config+0xb4>)
 8088aae:	4819      	ldr	r0, [pc, #100]	; (8088b14 <SIM_Config+0xdc>)
 8088ab0:	f000 fd84 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CMGL=\"ALL\"", "OK", 9000);
 8088ab4:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ab8:	490c      	ldr	r1, [pc, #48]	; (8088aec <SIM_Config+0xb4>)
 8088aba:	4817      	ldr	r0, [pc, #92]	; (8088b18 <SIM_Config+0xe0>)
 8088abc:	f000 fd7e 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CMGD=,4", "OK", 9000);						// Xóa tin nhắn khỏi bộ tin nhắn ưu thích
 8088ac0:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ac4:	4909      	ldr	r1, [pc, #36]	; (8088aec <SIM_Config+0xb4>)
 8088ac6:	4815      	ldr	r0, [pc, #84]	; (8088b1c <SIM_Config+0xe4>)
 8088ac8:	f000 fd78 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CTZU=1", "OK", 9000);						// cài đặt chế độ cập nhật thời gian, 0 là tắt, 1 là bật tự động
 8088acc:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ad0:	4906      	ldr	r1, [pc, #24]	; (8088aec <SIM_Config+0xb4>)
 8088ad2:	4813      	ldr	r0, [pc, #76]	; (8088b20 <SIM_Config+0xe8>)
 8088ad4:	f000 fd72 	bl	80895bc <sendATcommand>
	sendATcommand("AT+COPS?", "OK", 9000);						// cài đặt chế độ cập nhật thời gian, 0 là tắt, 1 là bật tự động
 8088ad8:	f242 3228 	movw	r2, #9000	; 0x2328
 8088adc:	4903      	ldr	r1, [pc, #12]	; (8088aec <SIM_Config+0xb4>)
 8088ade:	4811      	ldr	r0, [pc, #68]	; (8088b24 <SIM_Config+0xec>)
 8088ae0:	f000 fd6c 	bl	80895bc <sendATcommand>
	/*	Get parameters need for application*/
	SMS_Config();
 8088ae4:	f000 f820 	bl	8088b28 <SMS_Config>
}
 8088ae8:	bf00      	nop
 8088aea:	bd80      	pop	{r7, pc}
 8088aec:	0808ca90 	.word	0x0808ca90
 8088af0:	0808ca94 	.word	0x0808ca94
 8088af4:	0808caa0 	.word	0x0808caa0
 8088af8:	0808caa8 	.word	0x0808caa8
 8088afc:	0808cac0 	.word	0x0808cac0
 8088b00:	0808cad8 	.word	0x0808cad8
 8088b04:	0808cae4 	.word	0x0808cae4
 8088b08:	0808caf0 	.word	0x0808caf0
 8088b0c:	0808cafc 	.word	0x0808cafc
 8088b10:	0808cb08 	.word	0x0808cb08
 8088b14:	0808cb18 	.word	0x0808cb18
 8088b18:	0808cb30 	.word	0x0808cb30
 8088b1c:	0808cb40 	.word	0x0808cb40
 8088b20:	0808cb4c 	.word	0x0808cb4c
 8088b24:	0808cb58 	.word	0x0808cb58

08088b28 <SMS_Config>:

void SMS_Config(void)
{
 8088b28:	b580      	push	{r7, lr}
 8088b2a:	af00      	add	r7, sp, #0
	//	sendATcommand("AT+CMGL=\"ALL\"", "OK", 9000);
	sendATcommand("AT+CMGR=0", "OK", 9000);
 8088b2c:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b30:	4924      	ldr	r1, [pc, #144]	; (8088bc4 <SMS_Config+0x9c>)
 8088b32:	4825      	ldr	r0, [pc, #148]	; (8088bc8 <SMS_Config+0xa0>)
 8088b34:	f000 fd42 	bl	80895bc <sendATcommand>
	//	sendATcommand("AT+CMGD=0", "OK", 9000);
	sendATcommand("AT+CMGF=1", "OK", 9000);
 8088b38:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b3c:	4921      	ldr	r1, [pc, #132]	; (8088bc4 <SMS_Config+0x9c>)
 8088b3e:	4823      	ldr	r0, [pc, #140]	; (8088bcc <SMS_Config+0xa4>)
 8088b40:	f000 fd3c 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CSCS=\"GSM\"", "OK", 9000);
 8088b44:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b48:	491e      	ldr	r1, [pc, #120]	; (8088bc4 <SMS_Config+0x9c>)
 8088b4a:	4821      	ldr	r0, [pc, #132]	; (8088bd0 <SMS_Config+0xa8>)
 8088b4c:	f000 fd36 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CSMP=17,167,0,0", "OK", 9000);
 8088b50:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b54:	491b      	ldr	r1, [pc, #108]	; (8088bc4 <SMS_Config+0x9c>)
 8088b56:	481f      	ldr	r0, [pc, #124]	; (8088bd4 <SMS_Config+0xac>)
 8088b58:	f000 fd30 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CNMI=1,2,0,0,0", "OK", 100);
 8088b5c:	2264      	movs	r2, #100	; 0x64
 8088b5e:	4919      	ldr	r1, [pc, #100]	; (8088bc4 <SMS_Config+0x9c>)
 8088b60:	481d      	ldr	r0, [pc, #116]	; (8088bd8 <SMS_Config+0xb0>)
 8088b62:	f000 fd2b 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CPBW=1,\"+84934829856\",145,\"Hieu\"", "OK", 9000);
 8088b66:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b6a:	4916      	ldr	r1, [pc, #88]	; (8088bc4 <SMS_Config+0x9c>)
 8088b6c:	481b      	ldr	r0, [pc, #108]	; (8088bdc <SMS_Config+0xb4>)
 8088b6e:	f000 fd25 	bl	80895bc <sendATcommand>
	HAL_Delay(500);
 8088b72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8088b76:	f7f9 fe41 	bl	80827fc <HAL_Delay>
	sendATcommand("AT+CPBW=2,\"+84946109075\",145,\"Tien\"", "OK", 9000);
 8088b7a:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b7e:	4911      	ldr	r1, [pc, #68]	; (8088bc4 <SMS_Config+0x9c>)
 8088b80:	4817      	ldr	r0, [pc, #92]	; (8088be0 <SMS_Config+0xb8>)
 8088b82:	f000 fd1b 	bl	80895bc <sendATcommand>
	HAL_Delay(500);
 8088b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8088b8a:	f7f9 fe37 	bl	80827fc <HAL_Delay>
	sendATcommand("AT+CPBW=3,\"+84934927556\",145,\"Huy\"", "OK", 9000);
 8088b8e:	f242 3228 	movw	r2, #9000	; 0x2328
 8088b92:	490c      	ldr	r1, [pc, #48]	; (8088bc4 <SMS_Config+0x9c>)
 8088b94:	4813      	ldr	r0, [pc, #76]	; (8088be4 <SMS_Config+0xbc>)
 8088b96:	f000 fd11 	bl	80895bc <sendATcommand>
	HAL_Delay(500);
 8088b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8088b9e:	f7f9 fe2d 	bl	80827fc <HAL_Delay>
	sendATcommand("AT+CPBR=1,10", "OK", 9000);
 8088ba2:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ba6:	4907      	ldr	r1, [pc, #28]	; (8088bc4 <SMS_Config+0x9c>)
 8088ba8:	480f      	ldr	r0, [pc, #60]	; (8088be8 <SMS_Config+0xc0>)
 8088baa:	f000 fd07 	bl	80895bc <sendATcommand>
	memcpy(phoneBook, rxBuffer, RX_LEN);
 8088bae:	4a0f      	ldr	r2, [pc, #60]	; (8088bec <SMS_Config+0xc4>)
 8088bb0:	4b0f      	ldr	r3, [pc, #60]	; (8088bf0 <SMS_Config+0xc8>)
 8088bb2:	4610      	mov	r0, r2
 8088bb4:	4619      	mov	r1, r3
 8088bb6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8088bba:	461a      	mov	r2, r3
 8088bbc:	f000 fe3c 	bl	8089838 <memcpy>
}
 8088bc0:	bf00      	nop
 8088bc2:	bd80      	pop	{r7, pc}
 8088bc4:	0808ca90 	.word	0x0808ca90
 8088bc8:	0808cb64 	.word	0x0808cb64
 8088bcc:	0808cb70 	.word	0x0808cb70
 8088bd0:	0808cb7c 	.word	0x0808cb7c
 8088bd4:	0808cb8c 	.word	0x0808cb8c
 8088bd8:	0808cba0 	.word	0x0808cba0
 8088bdc:	0808cbb4 	.word	0x0808cbb4
 8088be0:	0808cbd8 	.word	0x0808cbd8
 8088be4:	0808cbfc 	.word	0x0808cbfc
 8088be8:	0808cc20 	.word	0x0808cc20
 8088bec:	20000ba8 	.word	0x20000ba8
 8088bf0:	20000960 	.word	0x20000960

08088bf4 <SIM_GetLocalTime>:
	sendATcommand("AT+CTZU=0", "OK", 9000);						// cài đặt chế độ cập nhật thời gian, 0 là tắt, 1 là bật tự động
	sendATcommand("AT+CCLK?", "OK", 9000);
}

char SIM_GetLocalTime(char TimeString[])
{
 8088bf4:	b580      	push	{r7, lr}
 8088bf6:	b084      	sub	sp, #16
 8088bf8:	af00      	add	r7, sp, #0
 8088bfa:	6078      	str	r0, [r7, #4]
	char *token = NULL;
 8088bfc:	2300      	movs	r3, #0
 8088bfe:	60fb      	str	r3, [r7, #12]
	sendATcommand("AT+CCLK?", "OK", 9000);
 8088c00:	f242 3228 	movw	r2, #9000	; 0x2328
 8088c04:	490b      	ldr	r1, [pc, #44]	; (8088c34 <SIM_GetLocalTime+0x40>)
 8088c06:	480c      	ldr	r0, [pc, #48]	; (8088c38 <SIM_GetLocalTime+0x44>)
 8088c08:	f000 fcd8 	bl	80895bc <sendATcommand>
	token= strtok(rxBuffer, "\"");
 8088c0c:	490b      	ldr	r1, [pc, #44]	; (8088c3c <SIM_GetLocalTime+0x48>)
 8088c0e:	480c      	ldr	r0, [pc, #48]	; (8088c40 <SIM_GetLocalTime+0x4c>)
 8088c10:	f001 fae8 	bl	808a1e4 <strtok>
 8088c14:	60f8      	str	r0, [r7, #12]
	token = strtok(NULL, "+");
 8088c16:	490b      	ldr	r1, [pc, #44]	; (8088c44 <SIM_GetLocalTime+0x50>)
 8088c18:	2000      	movs	r0, #0
 8088c1a:	f001 fae3 	bl	808a1e4 <strtok>
 8088c1e:	60f8      	str	r0, [r7, #12]
	strcpy(TimeString, token);
 8088c20:	68f9      	ldr	r1, [r7, #12]
 8088c22:	6878      	ldr	r0, [r7, #4]
 8088c24:	f001 fac0 	bl	808a1a8 <strcpy>
	return TimeString;
 8088c28:	687b      	ldr	r3, [r7, #4]
 8088c2a:	b2db      	uxtb	r3, r3
}
 8088c2c:	4618      	mov	r0, r3
 8088c2e:	3710      	adds	r7, #16
 8088c30:	46bd      	mov	sp, r7
 8088c32:	bd80      	pop	{r7, pc}
 8088c34:	0808ca90 	.word	0x0808ca90
 8088c38:	0808cc3c 	.word	0x0808cc3c
 8088c3c:	0808cc48 	.word	0x0808cc48
 8088c40:	20000960 	.word	0x20000960
 8088c44:	0808cc4c 	.word	0x0808cc4c

08088c48 <SIM_GetPhoneNumber>:
char SIM_GetPhoneNumber(char phoneNumber[])
{
 8088c48:	b580      	push	{r7, lr}
 8088c4a:	b084      	sub	sp, #16
 8088c4c:	af00      	add	r7, sp, #0
 8088c4e:	6078      	str	r0, [r7, #4]
	char *token = NULL;
 8088c50:	2300      	movs	r3, #0
 8088c52:	60fb      	str	r3, [r7, #12]
	sendATcommand("AT+CUSD=1,\"*098#\",15", "OK", 9000);
 8088c54:	f242 3228 	movw	r2, #9000	; 0x2328
 8088c58:	4917      	ldr	r1, [pc, #92]	; (8088cb8 <SIM_GetPhoneNumber+0x70>)
 8088c5a:	4818      	ldr	r0, [pc, #96]	; (8088cbc <SIM_GetPhoneNumber+0x74>)
 8088c5c:	f000 fcae 	bl	80895bc <sendATcommand>
	SIM_waitRespond("+CUSD", 9000);
 8088c60:	f242 3128 	movw	r1, #9000	; 0x2328
 8088c64:	4816      	ldr	r0, [pc, #88]	; (8088cc0 <SIM_GetPhoneNumber+0x78>)
 8088c66:	f000 fd3f 	bl	80896e8 <SIM_waitRespond>
	token = strtok (rxBuffer, "\"");
 8088c6a:	4916      	ldr	r1, [pc, #88]	; (8088cc4 <SIM_GetPhoneNumber+0x7c>)
 8088c6c:	4816      	ldr	r0, [pc, #88]	; (8088cc8 <SIM_GetPhoneNumber+0x80>)
 8088c6e:	f001 fab9 	bl	808a1e4 <strtok>
 8088c72:	60f8      	str	r0, [r7, #12]
	token = strtok (NULL, " ");
 8088c74:	4915      	ldr	r1, [pc, #84]	; (8088ccc <SIM_GetPhoneNumber+0x84>)
 8088c76:	2000      	movs	r0, #0
 8088c78:	f001 fab4 	bl	808a1e4 <strtok>
 8088c7c:	60f8      	str	r0, [r7, #12]
	token = strtok (NULL, " ");
 8088c7e:	4913      	ldr	r1, [pc, #76]	; (8088ccc <SIM_GetPhoneNumber+0x84>)
 8088c80:	2000      	movs	r0, #0
 8088c82:	f001 faaf 	bl	808a1e4 <strtok>
 8088c86:	60f8      	str	r0, [r7, #12]
	strcpy(phoneNumber, token);
 8088c88:	68f9      	ldr	r1, [r7, #12]
 8088c8a:	6878      	ldr	r0, [r7, #4]
 8088c8c:	f001 fa8c 	bl	808a1a8 <strcpy>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) phoneNumber, 13, HAL_MAX_DELAY); // Truy�?n lệnh ATCommnd sang Sim
 8088c90:	f04f 33ff 	mov.w	r3, #4294967295
 8088c94:	220d      	movs	r2, #13
 8088c96:	6879      	ldr	r1, [r7, #4]
 8088c98:	480d      	ldr	r0, [pc, #52]	; (8088cd0 <SIM_GetPhoneNumber+0x88>)
 8088c9a:	f7fd fa88 	bl	80861ae <HAL_UART_Transmit>
	sendATcommand("\nAT+CUSD=2", "OK", 9000);
 8088c9e:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ca2:	4905      	ldr	r1, [pc, #20]	; (8088cb8 <SIM_GetPhoneNumber+0x70>)
 8088ca4:	480b      	ldr	r0, [pc, #44]	; (8088cd4 <SIM_GetPhoneNumber+0x8c>)
 8088ca6:	f000 fc89 	bl	80895bc <sendATcommand>
	return phoneNumber;
 8088caa:	687b      	ldr	r3, [r7, #4]
 8088cac:	b2db      	uxtb	r3, r3
}
 8088cae:	4618      	mov	r0, r3
 8088cb0:	3710      	adds	r7, #16
 8088cb2:	46bd      	mov	sp, r7
 8088cb4:	bd80      	pop	{r7, pc}
 8088cb6:	bf00      	nop
 8088cb8:	0808ca90 	.word	0x0808ca90
 8088cbc:	0808cc50 	.word	0x0808cc50
 8088cc0:	0808cc68 	.word	0x0808cc68
 8088cc4:	0808cc48 	.word	0x0808cc48
 8088cc8:	20000960 	.word	0x20000960
 8088ccc:	0808cc70 	.word	0x0808cc70
 8088cd0:	20000320 	.word	0x20000320
 8088cd4:	0808cc74 	.word	0x0808cc74

08088cd8 <SIM_SendSMS>:
}
SIM_StatusTypeDef SIM_Reset()
{
	return sendATcommand("AT+CRESET", "OK", 9000);
}
SIM_StatusTypeDef SIM_SendSMS(const char *phoneNumber,const char *message) {
 8088cd8:	b580      	push	{r7, lr}
 8088cda:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8088cde:	af00      	add	r7, sp, #0
 8088ce0:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8088ce4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8088ce8:	6018      	str	r0, [r3, #0]
 8088cea:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8088cee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8088cf2:	6019      	str	r1, [r3, #0]
	uint8_t number[30] = { 0 };
 8088cf4:	2300      	movs	r3, #0
 8088cf6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8088cfa:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8088cfe:	2200      	movs	r2, #0
 8088d00:	601a      	str	r2, [r3, #0]
 8088d02:	605a      	str	r2, [r3, #4]
 8088d04:	609a      	str	r2, [r3, #8]
 8088d06:	60da      	str	r2, [r3, #12]
 8088d08:	611a      	str	r2, [r3, #16]
 8088d0a:	615a      	str	r2, [r3, #20]
 8088d0c:	831a      	strh	r2, [r3, #24]
	uint8_t sms[RX_LEN] = { 0 };
 8088d0e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8088d12:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8088d16:	2200      	movs	r2, #0
 8088d18:	601a      	str	r2, [r3, #0]
 8088d1a:	3304      	adds	r3, #4
 8088d1c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8088d20:	2100      	movs	r1, #0
 8088d22:	4618      	mov	r0, r3
 8088d24:	f000 fd96 	bl	8089854 <memset>
	SIM_StatusTypeDef status;
	sendATcommand("AT+CMGF=1", "OK", 9000);
 8088d28:	f242 3228 	movw	r2, #9000	; 0x2328
 8088d2c:	491c      	ldr	r1, [pc, #112]	; (8088da0 <SIM_SendSMS+0xc8>)
 8088d2e:	481d      	ldr	r0, [pc, #116]	; (8088da4 <SIM_SendSMS+0xcc>)
 8088d30:	f000 fc44 	bl	80895bc <sendATcommand>

	sprintf((char*) number, "AT+CMGS=\"%s\"", phoneNumber);
 8088d34:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8088d38:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8088d3c:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8088d40:	681a      	ldr	r2, [r3, #0]
 8088d42:	4919      	ldr	r1, [pc, #100]	; (8088da8 <SIM_SendSMS+0xd0>)
 8088d44:	f001 fa10 	bl	808a168 <siprintf>
	status = sendATcommand((char*) number, ">", 9000);
 8088d48:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8088d4c:	f242 3228 	movw	r2, #9000	; 0x2328
 8088d50:	4916      	ldr	r1, [pc, #88]	; (8088dac <SIM_SendSMS+0xd4>)
 8088d52:	4618      	mov	r0, r3
 8088d54:	f000 fc32 	bl	80895bc <sendATcommand>
 8088d58:	4603      	mov	r3, r0
 8088d5a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
	if (status == SIM_OK) {
 8088d5e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8088d62:	2b00      	cmp	r3, #0
 8088d64:	d114      	bne.n	8088d90 <SIM_SendSMS+0xb8>
		sprintf((char*) sms, "%s%c", message, 0x1A);
 8088d66:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8088d6a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8088d6e:	f107 0008 	add.w	r0, r7, #8
 8088d72:	231a      	movs	r3, #26
 8088d74:	6812      	ldr	r2, [r2, #0]
 8088d76:	490e      	ldr	r1, [pc, #56]	; (8088db0 <SIM_SendSMS+0xd8>)
 8088d78:	f001 f9f6 	bl	808a168 <siprintf>
		return sendATcommand((char*) sms, "OK", 9000);
 8088d7c:	f107 0308 	add.w	r3, r7, #8
 8088d80:	f242 3228 	movw	r2, #9000	; 0x2328
 8088d84:	4906      	ldr	r1, [pc, #24]	; (8088da0 <SIM_SendSMS+0xc8>)
 8088d86:	4618      	mov	r0, r3
 8088d88:	f000 fc18 	bl	80895bc <sendATcommand>
 8088d8c:	4603      	mov	r3, r0
 8088d8e:	e001      	b.n	8088d94 <SIM_SendSMS+0xbc>
	} else {
		return status;
 8088d90:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
	}
}
 8088d94:	4618      	mov	r0, r3
 8088d96:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8088d9a:	46bd      	mov	sp, r7
 8088d9c:	bd80      	pop	{r7, pc}
 8088d9e:	bf00      	nop
 8088da0:	0808ca90 	.word	0x0808ca90
 8088da4:	0808cb70 	.word	0x0808cb70
 8088da8:	0808cc90 	.word	0x0808cc90
 8088dac:	0808cca0 	.word	0x0808cca0
 8088db0:	0808cca4 	.word	0x0808cca4

08088db4 <SMS_process>:
	tok = strtok(NULL, "#");
	strcpy(Smsptr->SmsContent, tok);
	return *Smsptr;
}
void SMS_process()
{
 8088db4:	b580      	push	{r7, lr}
 8088db6:	b082      	sub	sp, #8
 8088db8:	af00      	add	r7, sp, #0
	if(smsFlag == true)
 8088dba:	4b36      	ldr	r3, [pc, #216]	; (8088e94 <SMS_process+0xe0>)
 8088dbc:	781b      	ldrb	r3, [r3, #0]
 8088dbe:	b2db      	uxtb	r3, r3
 8088dc0:	2b00      	cmp	r3, #0
 8088dc2:	d063      	beq.n	8088e8c <SMS_process+0xd8>
	{
		for(uint8_t j = 0; j < 12; j++)
 8088dc4:	2300      	movs	r3, #0
 8088dc6:	71fb      	strb	r3, [r7, #7]
 8088dc8:	e00a      	b.n	8088de0 <SMS_process+0x2c>
		{
			number[j] = rxBuffer[j+9];
 8088dca:	79fb      	ldrb	r3, [r7, #7]
 8088dcc:	f103 0209 	add.w	r2, r3, #9
 8088dd0:	79fb      	ldrb	r3, [r7, #7]
 8088dd2:	4931      	ldr	r1, [pc, #196]	; (8088e98 <SMS_process+0xe4>)
 8088dd4:	5c89      	ldrb	r1, [r1, r2]
 8088dd6:	4a31      	ldr	r2, [pc, #196]	; (8088e9c <SMS_process+0xe8>)
 8088dd8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 12; j++)
 8088dda:	79fb      	ldrb	r3, [r7, #7]
 8088ddc:	3301      	adds	r3, #1
 8088dde:	71fb      	strb	r3, [r7, #7]
 8088de0:	79fb      	ldrb	r3, [r7, #7]
 8088de2:	2b0b      	cmp	r3, #11
 8088de4:	d9f1      	bls.n	8088dca <SMS_process+0x16>
		}
		if(strstr(phoneBook, number)!= NULL)
 8088de6:	492d      	ldr	r1, [pc, #180]	; (8088e9c <SMS_process+0xe8>)
 8088de8:	482d      	ldr	r0, [pc, #180]	; (8088ea0 <SMS_process+0xec>)
 8088dea:	f001 f9e5 	bl	808a1b8 <strstr>
 8088dee:	4603      	mov	r3, r0
 8088df0:	2b00      	cmp	r3, #0
 8088df2:	d04b      	beq.n	8088e8c <SMS_process+0xd8>
		{
			if(strstr(rxBuffer, "DEBUG")!= NULL)
 8088df4:	492b      	ldr	r1, [pc, #172]	; (8088ea4 <SMS_process+0xf0>)
 8088df6:	4828      	ldr	r0, [pc, #160]	; (8088e98 <SMS_process+0xe4>)
 8088df8:	f001 f9de 	bl	808a1b8 <strstr>
 8088dfc:	4603      	mov	r3, r0
 8088dfe:	2b00      	cmp	r3, #0
 8088e00:	d004      	beq.n	8088e0c <SMS_process+0x58>
			{
				SIM_SendSMS(number, "SMS DEBUG");
 8088e02:	4929      	ldr	r1, [pc, #164]	; (8088ea8 <SMS_process+0xf4>)
 8088e04:	4825      	ldr	r0, [pc, #148]	; (8088e9c <SMS_process+0xe8>)
 8088e06:	f7ff ff67 	bl	8088cd8 <SIM_SendSMS>
 8088e0a:	e03c      	b.n	8088e86 <SMS_process+0xd2>
			}
			else if (strstr(rxBuffer, "CHECKPHONEBOOK") != NULL)
 8088e0c:	4927      	ldr	r1, [pc, #156]	; (8088eac <SMS_process+0xf8>)
 8088e0e:	4822      	ldr	r0, [pc, #136]	; (8088e98 <SMS_process+0xe4>)
 8088e10:	f001 f9d2 	bl	808a1b8 <strstr>
 8088e14:	4603      	mov	r3, r0
 8088e16:	2b00      	cmp	r3, #0
 8088e18:	d00a      	beq.n	8088e30 <SMS_process+0x7c>
			{
				sendATcommand("AT+CPBR=1,10", "OK", 9000);
 8088e1a:	f242 3228 	movw	r2, #9000	; 0x2328
 8088e1e:	4924      	ldr	r1, [pc, #144]	; (8088eb0 <SMS_process+0xfc>)
 8088e20:	4824      	ldr	r0, [pc, #144]	; (8088eb4 <SMS_process+0x100>)
 8088e22:	f000 fbcb 	bl	80895bc <sendATcommand>
				SIM_SendSMS(number, rxBuffer);
 8088e26:	491c      	ldr	r1, [pc, #112]	; (8088e98 <SMS_process+0xe4>)
 8088e28:	481c      	ldr	r0, [pc, #112]	; (8088e9c <SMS_process+0xe8>)
 8088e2a:	f7ff ff55 	bl	8088cd8 <SIM_SendSMS>
 8088e2e:	e02a      	b.n	8088e86 <SMS_process+0xd2>
			}
			else if (strstr(rxBuffer, "SEND") != NULL)
 8088e30:	4921      	ldr	r1, [pc, #132]	; (8088eb8 <SMS_process+0x104>)
 8088e32:	4819      	ldr	r0, [pc, #100]	; (8088e98 <SMS_process+0xe4>)
 8088e34:	f001 f9c0 	bl	808a1b8 <strstr>
 8088e38:	4603      	mov	r3, r0
 8088e3a:	2b00      	cmp	r3, #0
 8088e3c:	d004      	beq.n	8088e48 <SMS_process+0x94>
			{
				SIM_SendSMS(number, "Hello Hieu NGU");
 8088e3e:	491f      	ldr	r1, [pc, #124]	; (8088ebc <SMS_process+0x108>)
 8088e40:	4816      	ldr	r0, [pc, #88]	; (8088e9c <SMS_process+0xe8>)
 8088e42:	f7ff ff49 	bl	8088cd8 <SIM_SendSMS>
 8088e46:	e01e      	b.n	8088e86 <SMS_process+0xd2>
			}
			else if (strstr(rxBuffer, "RESET") != NULL)
 8088e48:	491d      	ldr	r1, [pc, #116]	; (8088ec0 <SMS_process+0x10c>)
 8088e4a:	4813      	ldr	r0, [pc, #76]	; (8088e98 <SMS_process+0xe4>)
 8088e4c:	f001 f9b4 	bl	808a1b8 <strstr>
 8088e50:	4603      	mov	r3, r0
 8088e52:	2b00      	cmp	r3, #0
 8088e54:	d002      	beq.n	8088e5c <SMS_process+0xa8>
			{
				HAL_NVIC_SystemReset();
 8088e56:	f7f9 fe10 	bl	8082a7a <HAL_NVIC_SystemReset>
 8088e5a:	e014      	b.n	8088e86 <SMS_process+0xd2>
			}
			else if (strstr(rxBuffer, "UPFW") != NULL)
 8088e5c:	4919      	ldr	r1, [pc, #100]	; (8088ec4 <SMS_process+0x110>)
 8088e5e:	480e      	ldr	r0, [pc, #56]	; (8088e98 <SMS_process+0xe4>)
 8088e60:	f001 f9aa 	bl	808a1b8 <strstr>
 8088e64:	4603      	mov	r3, r0
 8088e66:	2b00      	cmp	r3, #0
 8088e68:	d004      	beq.n	8088e74 <SMS_process+0xc0>
			{
				SIM_GetNewFWFileInfo("https://test-fota-default-rtdb.asia-southeast1.firebasedatabase.app/fota1.json",&httpInfo);
 8088e6a:	4917      	ldr	r1, [pc, #92]	; (8088ec8 <SMS_process+0x114>)
 8088e6c:	4817      	ldr	r0, [pc, #92]	; (8088ecc <SMS_process+0x118>)
 8088e6e:	f000 f96d 	bl	808914c <SIM_GetNewFWFileInfo>
 8088e72:	e008      	b.n	8088e86 <SMS_process+0xd2>
			}
			else if (strstr(rxBuffer, "SETID") != NULL)
 8088e74:	4916      	ldr	r1, [pc, #88]	; (8088ed0 <SMS_process+0x11c>)
 8088e76:	4808      	ldr	r0, [pc, #32]	; (8088e98 <SMS_process+0xe4>)
 8088e78:	f001 f99e 	bl	808a1b8 <strstr>
 8088e7c:	4603      	mov	r3, r0
 8088e7e:	2b00      	cmp	r3, #0
 8088e80:	d001      	beq.n	8088e86 <SMS_process+0xd2>
			{
				SIM_SetID();
 8088e82:	f000 f827 	bl	8088ed4 <SIM_SetID>
			}
			smsFlag = false;
 8088e86:	4b03      	ldr	r3, [pc, #12]	; (8088e94 <SMS_process+0xe0>)
 8088e88:	2200      	movs	r2, #0
 8088e8a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8088e8c:	bf00      	nop
 8088e8e:	3708      	adds	r7, #8
 8088e90:	46bd      	mov	sp, r7
 8088e92:	bd80      	pop	{r7, pc}
 8088e94:	2000095e 	.word	0x2000095e
 8088e98:	20000960 	.word	0x20000960
 8088e9c:	20000de8 	.word	0x20000de8
 8088ea0:	20000ba8 	.word	0x20000ba8
 8088ea4:	0808ccb4 	.word	0x0808ccb4
 8088ea8:	0808ccbc 	.word	0x0808ccbc
 8088eac:	0808ccc8 	.word	0x0808ccc8
 8088eb0:	0808ca90 	.word	0x0808ca90
 8088eb4:	0808cc20 	.word	0x0808cc20
 8088eb8:	0808ccd8 	.word	0x0808ccd8
 8088ebc:	0808cce0 	.word	0x0808cce0
 8088ec0:	0808ccf0 	.word	0x0808ccf0
 8088ec4:	0808ccf8 	.word	0x0808ccf8
 8088ec8:	20000598 	.word	0x20000598
 8088ecc:	0808cd00 	.word	0x0808cd00
 8088ed0:	0808cd50 	.word	0x0808cd50

08088ed4 <SIM_SetID>:
//		}
//	}
//	return *Smsptr;
//}
void SIM_SetID()
{
 8088ed4:	b580      	push	{r7, lr}
 8088ed6:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8088eda:	af02      	add	r7, sp, #8
	char *tok1 = NULL;
 8088edc:	2300      	movs	r3, #0
 8088ede:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	char *tok2 = NULL;
 8088ee2:	2300      	movs	r3, #0
 8088ee4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	char *tok3 = NULL;
 8088ee8:	2300      	movs	r3, #0
 8088eea:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	char paraString[RX_LEN] = {0};
 8088eee:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8088ef2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8088ef6:	2200      	movs	r2, #0
 8088ef8:	601a      	str	r2, [r3, #0]
 8088efa:	3304      	adds	r3, #4
 8088efc:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8088f00:	2100      	movs	r1, #0
 8088f02:	4618      	mov	r0, r3
 8088f04:	f000 fca6 	bl	8089854 <memset>
	tok1 = strtok(rxBuffer, "*");
 8088f08:	491d      	ldr	r1, [pc, #116]	; (8088f80 <SIM_SetID+0xac>)
 8088f0a:	481e      	ldr	r0, [pc, #120]	; (8088f84 <SIM_SetID+0xb0>)
 8088f0c:	f001 f96a 	bl	808a1e4 <strtok>
 8088f10:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	tok1 = strtok(NULL, "*");
 8088f14:	491a      	ldr	r1, [pc, #104]	; (8088f80 <SIM_SetID+0xac>)
 8088f16:	2000      	movs	r0, #0
 8088f18:	f001 f964 	bl	808a1e4 <strtok>
 8088f1c:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	tok1 = strtok(NULL, "*");	//vị trí lưu
 8088f20:	4917      	ldr	r1, [pc, #92]	; (8088f80 <SIM_SetID+0xac>)
 8088f22:	2000      	movs	r0, #0
 8088f24:	f001 f95e 	bl	808a1e4 <strtok>
 8088f28:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
	tok2 = strtok(NULL, "*");	//số điện thoại
 8088f2c:	4914      	ldr	r1, [pc, #80]	; (8088f80 <SIM_SetID+0xac>)
 8088f2e:	2000      	movs	r0, #0
 8088f30:	f001 f958 	bl	808a1e4 <strtok>
 8088f34:	f8c7 0238 	str.w	r0, [r7, #568]	; 0x238
	tok3 = strtok(NULL, "#");	//Người sở hữu SĐT
 8088f38:	4913      	ldr	r1, [pc, #76]	; (8088f88 <SIM_SetID+0xb4>)
 8088f3a:	2000      	movs	r0, #0
 8088f3c:	f001 f952 	bl	808a1e4 <strtok>
 8088f40:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
	sprintf(paraString, "AT+CPBW=%s,\"%s\",129,\"%s\"", tok1,tok2,tok3);
 8088f44:	1d38      	adds	r0, r7, #4
 8088f46:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8088f4a:	9300      	str	r3, [sp, #0]
 8088f4c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8088f50:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8088f54:	490d      	ldr	r1, [pc, #52]	; (8088f8c <SIM_SetID+0xb8>)
 8088f56:	f001 f907 	bl	808a168 <siprintf>
	sendATcommand(paraString, "OK", 9000);
 8088f5a:	1d3b      	adds	r3, r7, #4
 8088f5c:	f242 3228 	movw	r2, #9000	; 0x2328
 8088f60:	490b      	ldr	r1, [pc, #44]	; (8088f90 <SIM_SetID+0xbc>)
 8088f62:	4618      	mov	r0, r3
 8088f64:	f000 fb2a 	bl	80895bc <sendATcommand>
	sendATcommand("AT+CPBR=1,10", "OK", 9000);
 8088f68:	f242 3228 	movw	r2, #9000	; 0x2328
 8088f6c:	4908      	ldr	r1, [pc, #32]	; (8088f90 <SIM_SetID+0xbc>)
 8088f6e:	4809      	ldr	r0, [pc, #36]	; (8088f94 <SIM_SetID+0xc0>)
 8088f70:	f000 fb24 	bl	80895bc <sendATcommand>
}
 8088f74:	bf00      	nop
 8088f76:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8088f7a:	46bd      	mov	sp, r7
 8088f7c:	bd80      	pop	{r7, pc}
 8088f7e:	bf00      	nop
 8088f80:	0808ccac 	.word	0x0808ccac
 8088f84:	20000960 	.word	0x20000960
 8088f88:	0808ccb0 	.word	0x0808ccb0
 8088f8c:	0808cd58 	.word	0x0808cd58
 8088f90:	0808ca90 	.word	0x0808ca90
 8088f94:	0808cc20 	.word	0x0808cc20

08088f98 <SIM_HTTP_POST>:
SIM_StatusTypeDef SIM_HTTP_POST(const char *URL, const char *ContentType,
		const char *Data, HTTP_InfoTypeDef *RespInfo)
{
 8088f98:	b590      	push	{r4, r7, lr}
 8088f9a:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
 8088f9e:	af00      	add	r7, sp, #0
 8088fa0:	f507 7444 	add.w	r4, r7, #784	; 0x310
 8088fa4:	f5a4 740d 	sub.w	r4, r4, #564	; 0x234
 8088fa8:	6020      	str	r0, [r4, #0]
 8088faa:	f507 7044 	add.w	r0, r7, #784	; 0x310
 8088fae:	f5a0 700e 	sub.w	r0, r0, #568	; 0x238
 8088fb2:	6001      	str	r1, [r0, #0]
 8088fb4:	f507 7144 	add.w	r1, r7, #784	; 0x310
 8088fb8:	f5a1 710f 	sub.w	r1, r1, #572	; 0x23c
 8088fbc:	600a      	str	r2, [r1, #0]
 8088fbe:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8088fc2:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8088fc6:	6013      	str	r3, [r2, #0]
	char paraString[RX_LEN] = {0};
 8088fc8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8088fcc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8088fd0:	2200      	movs	r2, #0
 8088fd2:	601a      	str	r2, [r3, #0]
 8088fd4:	3304      	adds	r3, #4
 8088fd6:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8088fda:	2100      	movs	r1, #0
 8088fdc:	4618      	mov	r0, r3
 8088fde:	f000 fc39 	bl	8089854 <memset>
	sendATcommand("AT+HTTPTERM", "OK", 9000);
 8088fe2:	f242 3228 	movw	r2, #9000	; 0x2328
 8088fe6:	494d      	ldr	r1, [pc, #308]	; (808911c <SIM_HTTP_POST+0x184>)
 8088fe8:	484d      	ldr	r0, [pc, #308]	; (8089120 <SIM_HTTP_POST+0x188>)
 8088fea:	f000 fae7 	bl	80895bc <sendATcommand>
	sendATcommand("AT+HTTPINIT", "OK", 9000);
 8088fee:	f242 3228 	movw	r2, #9000	; 0x2328
 8088ff2:	494a      	ldr	r1, [pc, #296]	; (808911c <SIM_HTTP_POST+0x184>)
 8088ff4:	484b      	ldr	r0, [pc, #300]	; (8089124 <SIM_HTTP_POST+0x18c>)
 8088ff6:	f000 fae1 	bl	80895bc <sendATcommand>
	sprintf(paraString, "AT+HTTPPARA=\"URL\",\"%s\"", URL);
 8088ffa:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8088ffe:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8089002:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8089006:	681a      	ldr	r2, [r3, #0]
 8089008:	4947      	ldr	r1, [pc, #284]	; (8089128 <SIM_HTTP_POST+0x190>)
 808900a:	f001 f8ad 	bl	808a168 <siprintf>
	sendATcommand(paraString, "OK", 9000);								//"AT+HTTPPARA=\"URL\",\"%s\"", URL
 808900e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8089012:	f242 3228 	movw	r2, #9000	; 0x2328
 8089016:	4941      	ldr	r1, [pc, #260]	; (808911c <SIM_HTTP_POST+0x184>)
 8089018:	4618      	mov	r0, r3
 808901a:	f000 facf 	bl	80895bc <sendATcommand>
	memset((char*) paraString,0, 100);
 808901e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8089022:	2264      	movs	r2, #100	; 0x64
 8089024:	2100      	movs	r1, #0
 8089026:	4618      	mov	r0, r3
 8089028:	f000 fc14 	bl	8089854 <memset>

	sprintf(paraString, "AT+HTTPPARA=\"CONTENT\",\"%s\"", ContentType);
 808902c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8089030:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8089034:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8089038:	681a      	ldr	r2, [r3, #0]
 808903a:	493c      	ldr	r1, [pc, #240]	; (808912c <SIM_HTTP_POST+0x194>)
 808903c:	f001 f894 	bl	808a168 <siprintf>
	sendATcommand(paraString, "OK", 9000);								//"AT+HTTPPARA=\"CONTENT\",\"%s\"", ContentType
 8089040:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8089044:	f242 3228 	movw	r2, #9000	; 0x2328
 8089048:	4934      	ldr	r1, [pc, #208]	; (808911c <SIM_HTTP_POST+0x184>)
 808904a:	4618      	mov	r0, r3
 808904c:	f000 fab6 	bl	80895bc <sendATcommand>
	memset((char*) paraString,0, 100);
 8089050:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8089054:	2264      	movs	r2, #100	; 0x64
 8089056:	2100      	movs	r1, #0
 8089058:	4618      	mov	r0, r3
 808905a:	f000 fbfb 	bl	8089854 <memset>

	sprintf(paraString, "AT+HTTPDATA=%d,10000", strlen(Data));
 808905e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8089062:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8089066:	6818      	ldr	r0, [r3, #0]
 8089068:	f7f7 f8b2 	bl	80801d0 <strlen>
 808906c:	4602      	mov	r2, r0
 808906e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8089072:	492f      	ldr	r1, [pc, #188]	; (8089130 <SIM_HTTP_POST+0x198>)
 8089074:	4618      	mov	r0, r3
 8089076:	f001 f877 	bl	808a168 <siprintf>
	sendATcommand(paraString, "DOWNLOAD", 9000);						//"AT+HTTPDATA=%d,10000", strlen(Data)
 808907a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 808907e:	f242 3228 	movw	r2, #9000	; 0x2328
 8089082:	492c      	ldr	r1, [pc, #176]	; (8089134 <SIM_HTTP_POST+0x19c>)
 8089084:	4618      	mov	r0, r3
 8089086:	f000 fa99 	bl	80895bc <sendATcommand>
	memset((char*) paraString,0, 100);
 808908a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 808908e:	2264      	movs	r2, #100	; 0x64
 8089090:	2100      	movs	r1, #0
 8089092:	4618      	mov	r0, r3
 8089094:	f000 fbde 	bl	8089854 <memset>

	sendATcommand(Data, "OK", 9000);								//DATA gửi đi
 8089098:	f507 7344 	add.w	r3, r7, #784	; 0x310
 808909c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80890a0:	f242 3228 	movw	r2, #9000	; 0x2328
 80890a4:	491d      	ldr	r1, [pc, #116]	; (808911c <SIM_HTTP_POST+0x184>)
 80890a6:	6818      	ldr	r0, [r3, #0]
 80890a8:	f000 fa88 	bl	80895bc <sendATcommand>
	sendATcommand("AT+HTTPACTION=1", "OK", 9000);					//Chọn phương thức Post cho dữ liệu gửi lên
 80890ac:	f242 3228 	movw	r2, #9000	; 0x2328
 80890b0:	491a      	ldr	r1, [pc, #104]	; (808911c <SIM_HTTP_POST+0x184>)
 80890b2:	4821      	ldr	r0, [pc, #132]	; (8089138 <SIM_HTTP_POST+0x1a0>)
 80890b4:	f000 fa82 	bl	80895bc <sendATcommand>
	SIM_waitRespond("+HTTPACTION: 1", 9000);
 80890b8:	f242 3128 	movw	r1, #9000	; 0x2328
 80890bc:	481f      	ldr	r0, [pc, #124]	; (808913c <SIM_HTTP_POST+0x1a4>)
 80890be:	f000 fb13 	bl	80896e8 <SIM_waitRespond>
	printf((char*) rxBuffer);										// In Buffer này ra log
 80890c2:	481f      	ldr	r0, [pc, #124]	; (8089140 <SIM_HTTP_POST+0x1a8>)
 80890c4:	f001 f838 	bl	808a138 <iprintf>

	SIM_GetHTTP_Info(RespInfo);
 80890c8:	463a      	mov	r2, r7
 80890ca:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80890ce:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80890d2:	6819      	ldr	r1, [r3, #0]
 80890d4:	4610      	mov	r0, r2
 80890d6:	f000 fb47 	bl	8089768 <SIM_GetHTTP_Info>

	sprintf(paraString, "AT+HTTPREAD=0,%u", RespInfo->ContentLen);
 80890da:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80890de:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80890e2:	681b      	ldr	r3, [r3, #0]
 80890e4:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 80890e8:	461a      	mov	r2, r3
 80890ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80890ee:	4915      	ldr	r1, [pc, #84]	; (8089144 <SIM_HTTP_POST+0x1ac>)
 80890f0:	4618      	mov	r0, r3
 80890f2:	f001 f839 	bl	808a168 <siprintf>
	sendATcommand(paraString, "OK", 9000);
 80890f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80890fa:	f242 3228 	movw	r2, #9000	; 0x2328
 80890fe:	4907      	ldr	r1, [pc, #28]	; (808911c <SIM_HTTP_POST+0x184>)
 8089100:	4618      	mov	r0, r3
 8089102:	f000 fa5b 	bl	80895bc <sendATcommand>
	SIM_waitRespond("+HTTPREAD: 0", 9000);
 8089106:	f242 3128 	movw	r1, #9000	; 0x2328
 808910a:	480f      	ldr	r0, [pc, #60]	; (8089148 <SIM_HTTP_POST+0x1b0>)
 808910c:	f000 faec 	bl	80896e8 <SIM_waitRespond>

	//	sendATcommand("AT+HTTPTERM", "OK", 9000);
	return SIM_OK;
 8089110:	2300      	movs	r3, #0
}
 8089112:	4618      	mov	r0, r3
 8089114:	f507 7745 	add.w	r7, r7, #788	; 0x314
 8089118:	46bd      	mov	sp, r7
 808911a:	bd90      	pop	{r4, r7, pc}
 808911c:	0808ca90 	.word	0x0808ca90
 8089120:	0808cd74 	.word	0x0808cd74
 8089124:	0808cd80 	.word	0x0808cd80
 8089128:	0808cd8c 	.word	0x0808cd8c
 808912c:	0808cda4 	.word	0x0808cda4
 8089130:	0808cdc0 	.word	0x0808cdc0
 8089134:	0808cdd8 	.word	0x0808cdd8
 8089138:	0808cde4 	.word	0x0808cde4
 808913c:	0808cdf4 	.word	0x0808cdf4
 8089140:	20000960 	.word	0x20000960
 8089144:	0808ce04 	.word	0x0808ce04
 8089148:	0808ce18 	.word	0x0808ce18

0808914c <SIM_GetNewFWFileInfo>:
void SIM_GetNewFWFileInfo(const char *URL, HTTP_InfoTypeDef *RespInfo)
{
 808914c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8089150:	f5ad 6dae 	sub.w	sp, sp, #1392	; 0x570
 8089154:	af00      	add	r7, sp, #0
 8089156:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 808915a:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 808915e:	6018      	str	r0, [r3, #0]
 8089160:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8089164:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8089168:	6019      	str	r1, [r3, #0]
	char buffer[RX_LEN]={0};
 808916a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 808916e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8089172:	2200      	movs	r2, #0
 8089174:	601a      	str	r2, [r3, #0]
 8089176:	1d18      	adds	r0, r3, #4
 8089178:	f44f 730b 	mov.w	r3, #556	; 0x22c
 808917c:	461a      	mov	r2, r3
 808917e:	2100      	movs	r1, #0
 8089180:	f000 fb68 	bl	8089854 <memset>
	char paraString[RX_LEN] = {0};
 8089184:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8089188:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 808918c:	2200      	movs	r2, #0
 808918e:	601a      	str	r2, [r3, #0]
 8089190:	1d18      	adds	r0, r3, #4
 8089192:	f44f 730b 	mov.w	r3, #556	; 0x22c
 8089196:	461a      	mov	r2, r3
 8089198:	2100      	movs	r1, #0
 808919a:	f000 fb5b 	bl	8089854 <memset>

	char *linkFirebaseStorage = NULL;
 808919e:	2300      	movs	r3, #0
 80891a0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
	char *nameOffireware = NULL;
 80891a4:	2300      	movs	r3, #0
 80891a6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
	char *major = NULL;
 80891aa:	2300      	movs	r3, #0
 80891ac:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
	char *minor = NULL;
 80891b0:	2300      	movs	r3, #0
 80891b2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
	char *patch = NULL;
 80891b6:	2300      	movs	r3, #0
 80891b8:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550

	sendATcommand("AT+HTTPTERM", "OK", 2000);
 80891bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80891c0:	49be      	ldr	r1, [pc, #760]	; (80894bc <SIM_GetNewFWFileInfo+0x370>)
 80891c2:	48bf      	ldr	r0, [pc, #764]	; (80894c0 <SIM_GetNewFWFileInfo+0x374>)
 80891c4:	f000 f9fa 	bl	80895bc <sendATcommand>
	sendATcommand("AT+HTTPINIT", "OK", 2000);
 80891c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80891cc:	49bb      	ldr	r1, [pc, #748]	; (80894bc <SIM_GetNewFWFileInfo+0x370>)
 80891ce:	48bd      	ldr	r0, [pc, #756]	; (80894c4 <SIM_GetNewFWFileInfo+0x378>)
 80891d0:	f000 f9f4 	bl	80895bc <sendATcommand>
	sprintf(paraString, "AT+HTTPPARA=\"URL\",\"%s\"", URL);					//Truy cập vào link (Realtime Database) chứa dữ liệu tên của firmware mới
 80891d4:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80891d8:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 80891dc:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 80891e0:	681a      	ldr	r2, [r3, #0]
 80891e2:	49b9      	ldr	r1, [pc, #740]	; (80894c8 <SIM_GetNewFWFileInfo+0x37c>)
 80891e4:	f000 ffc0 	bl	808a168 <siprintf>
	sendATcommand(paraString, "OK", 9000);									//"AT+HTTPPARA=\"URL\",\"%s\"", URL
 80891e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80891ec:	f242 3228 	movw	r2, #9000	; 0x2328
 80891f0:	49b2      	ldr	r1, [pc, #712]	; (80894bc <SIM_GetNewFWFileInfo+0x370>)
 80891f2:	4618      	mov	r0, r3
 80891f4:	f000 f9e2 	bl	80895bc <sendATcommand>

	sendATcommand("AT+HTTPACTION=0","200", 9000);							//HTTP GET
 80891f8:	f242 3228 	movw	r2, #9000	; 0x2328
 80891fc:	49b3      	ldr	r1, [pc, #716]	; (80894cc <SIM_GetNewFWFileInfo+0x380>)
 80891fe:	48b4      	ldr	r0, [pc, #720]	; (80894d0 <SIM_GetNewFWFileInfo+0x384>)
 8089200:	f000 f9dc 	bl	80895bc <sendATcommand>
	SIM_waitRespond("+HTTPACTION: 0", 9000);
 8089204:	f242 3128 	movw	r1, #9000	; 0x2328
 8089208:	48b2      	ldr	r0, [pc, #712]	; (80894d4 <SIM_GetNewFWFileInfo+0x388>)
 808920a:	f000 fa6d 	bl	80896e8 <SIM_waitRespond>

	SIM_GetHTTP_Info(RespInfo);
 808920e:	f107 0218 	add.w	r2, r7, #24
 8089212:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8089216:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 808921a:	6819      	ldr	r1, [r3, #0]
 808921c:	4610      	mov	r0, r2
 808921e:	f000 faa3 	bl	8089768 <SIM_GetHTTP_Info>

	memset((char*) paraString, 0, RX_LEN);
 8089222:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089226:	f44f 720c 	mov.w	r2, #560	; 0x230
 808922a:	2100      	movs	r1, #0
 808922c:	4618      	mov	r0, r3
 808922e:	f000 fb11 	bl	8089854 <memset>
	sprintf(paraString, "AT+HTTPREAD=0,%u", RespInfo->ContentLen);			//AT+HTTPREAD=0,151
 8089232:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8089236:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 808923a:	681b      	ldr	r3, [r3, #0]
 808923c:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8089240:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8089244:	461a      	mov	r2, r3
 8089246:	49a4      	ldr	r1, [pc, #656]	; (80894d8 <SIM_GetNewFWFileInfo+0x38c>)
 8089248:	f000 ff8e 	bl	808a168 <siprintf>
	sendATcommand(paraString, "}", 9000);									//Send message, nhận về phản hồi là đường dẫn chứa firmware mới, có tên của firmware
 808924c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089250:	f242 3228 	movw	r2, #9000	; 0x2328
 8089254:	49a1      	ldr	r1, [pc, #644]	; (80894dc <SIM_GetNewFWFileInfo+0x390>)
 8089256:	4618      	mov	r0, r3
 8089258:	f000 f9b0 	bl	80895bc <sendATcommand>
	linkFirebaseStorage = strtok(rxBuffer, "{");
 808925c:	49a0      	ldr	r1, [pc, #640]	; (80894e0 <SIM_GetNewFWFileInfo+0x394>)
 808925e:	48a1      	ldr	r0, [pc, #644]	; (80894e4 <SIM_GetNewFWFileInfo+0x398>)
 8089260:	f000 ffc0 	bl	808a1e4 <strtok>
 8089264:	f8c7 056c 	str.w	r0, [r7, #1388]	; 0x56c
	for(int i =0; i<3; i++)
 8089268:	2300      	movs	r3, #0
 808926a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 808926e:	e00a      	b.n	8089286 <SIM_GetNewFWFileInfo+0x13a>
	{
		linkFirebaseStorage = strtok(NULL, "\"");
 8089270:	499d      	ldr	r1, [pc, #628]	; (80894e8 <SIM_GetNewFWFileInfo+0x39c>)
 8089272:	2000      	movs	r0, #0
 8089274:	f000 ffb6 	bl	808a1e4 <strtok>
 8089278:	f8c7 056c 	str.w	r0, [r7, #1388]	; 0x56c
	for(int i =0; i<3; i++)
 808927c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8089280:	3301      	adds	r3, #1
 8089282:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 8089286:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 808928a:	2b02      	cmp	r3, #2
 808928c:	ddf0      	ble.n	8089270 <SIM_GetNewFWFileInfo+0x124>
	}
	strcpy(buffer, linkFirebaseStorage);
 808928e:	f507 7348 	add.w	r3, r7, #800	; 0x320
 8089292:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 8089296:	4618      	mov	r0, r3
 8089298:	f000 ff86 	bl	808a1a8 <strcpy>
	nameOffireware = strtok(buffer, "/");
 808929c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80892a0:	4992      	ldr	r1, [pc, #584]	; (80894ec <SIM_GetNewFWFileInfo+0x3a0>)
 80892a2:	4618      	mov	r0, r3
 80892a4:	f000 ff9e 	bl	808a1e4 <strtok>
 80892a8:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
	for(int i = 0; i< 5; i++)
 80892ac:	2300      	movs	r3, #0
 80892ae:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80892b2:	e00a      	b.n	80892ca <SIM_GetNewFWFileInfo+0x17e>
	{
		nameOffireware = strtok(NULL, "/");
 80892b4:	498d      	ldr	r1, [pc, #564]	; (80894ec <SIM_GetNewFWFileInfo+0x3a0>)
 80892b6:	2000      	movs	r0, #0
 80892b8:	f000 ff94 	bl	808a1e4 <strtok>
 80892bc:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
	for(int i = 0; i< 5; i++)
 80892c0:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80892c4:	3301      	adds	r3, #1
 80892c6:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80892ca:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80892ce:	2b04      	cmp	r3, #4
 80892d0:	ddf0      	ble.n	80892b4 <SIM_GetNewFWFileInfo+0x168>
	}
	nameOffireware = strtok(NULL, "?");
 80892d2:	4987      	ldr	r1, [pc, #540]	; (80894f0 <SIM_GetNewFWFileInfo+0x3a4>)
 80892d4:	2000      	movs	r0, #0
 80892d6:	f000 ff85 	bl	808a1e4 <strtok>
 80892da:	f8c7 055c 	str.w	r0, [r7, #1372]	; 0x55c
	major = strtok(nameOffireware, "_");
 80892de:	4985      	ldr	r1, [pc, #532]	; (80894f4 <SIM_GetNewFWFileInfo+0x3a8>)
 80892e0:	f8d7 055c 	ldr.w	r0, [r7, #1372]	; 0x55c
 80892e4:	f000 ff7e 	bl	808a1e4 <strtok>
 80892e8:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
	major = strtok(NULL, ".");
 80892ec:	4982      	ldr	r1, [pc, #520]	; (80894f8 <SIM_GetNewFWFileInfo+0x3ac>)
 80892ee:	2000      	movs	r0, #0
 80892f0:	f000 ff78 	bl	808a1e4 <strtok>
 80892f4:	f8c7 0558 	str.w	r0, [r7, #1368]	; 0x558
	newFwVerOnServer.major = atoi(major);
 80892f8:	f8d7 0558 	ldr.w	r0, [r7, #1368]	; 0x558
 80892fc:	f000 fa6e 	bl	80897dc <atoi>
 8089300:	4603      	mov	r3, r0
 8089302:	17da      	asrs	r2, r3, #31
 8089304:	461c      	mov	r4, r3
 8089306:	4615      	mov	r5, r2
 8089308:	4b7c      	ldr	r3, [pc, #496]	; (80894fc <SIM_GetNewFWFileInfo+0x3b0>)
 808930a:	e9c3 4500 	strd	r4, r5, [r3]

	minor = strtok(NULL, ".");
 808930e:	497a      	ldr	r1, [pc, #488]	; (80894f8 <SIM_GetNewFWFileInfo+0x3ac>)
 8089310:	2000      	movs	r0, #0
 8089312:	f000 ff67 	bl	808a1e4 <strtok>
 8089316:	f8c7 0554 	str.w	r0, [r7, #1364]	; 0x554
	newFwVerOnServer.minor = atoi(minor);
 808931a:	f8d7 0554 	ldr.w	r0, [r7, #1364]	; 0x554
 808931e:	f000 fa5d 	bl	80897dc <atoi>
 8089322:	4603      	mov	r3, r0
 8089324:	17da      	asrs	r2, r3, #31
 8089326:	613b      	str	r3, [r7, #16]
 8089328:	617a      	str	r2, [r7, #20]
 808932a:	4b74      	ldr	r3, [pc, #464]	; (80894fc <SIM_GetNewFWFileInfo+0x3b0>)
 808932c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8089330:	e9c3 1202 	strd	r1, r2, [r3, #8]

	patch = strtok(NULL, "_");
 8089334:	496f      	ldr	r1, [pc, #444]	; (80894f4 <SIM_GetNewFWFileInfo+0x3a8>)
 8089336:	2000      	movs	r0, #0
 8089338:	f000 ff54 	bl	808a1e4 <strtok>
 808933c:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
	newFwVerOnServer.patch = atoi(patch);
 8089340:	f8d7 0550 	ldr.w	r0, [r7, #1360]	; 0x550
 8089344:	f000 fa4a 	bl	80897dc <atoi>
 8089348:	4603      	mov	r3, r0
 808934a:	17da      	asrs	r2, r3, #31
 808934c:	60bb      	str	r3, [r7, #8]
 808934e:	60fa      	str	r2, [r7, #12]
 8089350:	4b6a      	ldr	r3, [pc, #424]	; (80894fc <SIM_GetNewFWFileInfo+0x3b0>)
 8089352:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8089356:	e9c3 1204 	strd	r1, r2, [r3, #16]

	curFwRunningVer.major 	= flash_read_Int(CURRENT_RUNNING_FW_VER_MAJOR_ADDR);
 808935a:	4869      	ldr	r0, [pc, #420]	; (8089500 <SIM_GetNewFWFileInfo+0x3b4>)
 808935c:	f7ff f98e 	bl	808867c <flash_read_Int>
 8089360:	4603      	mov	r3, r0
 8089362:	2200      	movs	r2, #0
 8089364:	603b      	str	r3, [r7, #0]
 8089366:	607a      	str	r2, [r7, #4]
 8089368:	4b66      	ldr	r3, [pc, #408]	; (8089504 <SIM_GetNewFWFileInfo+0x3b8>)
 808936a:	e9d7 1200 	ldrd	r1, r2, [r7]
 808936e:	e9c3 1200 	strd	r1, r2, [r3]
	curFwRunningVer.minor 	= flash_read_Int(CURRENT_RUNNING_FW_VER_MINOR_ADDR);
 8089372:	4865      	ldr	r0, [pc, #404]	; (8089508 <SIM_GetNewFWFileInfo+0x3bc>)
 8089374:	f7ff f982 	bl	808867c <flash_read_Int>
 8089378:	4603      	mov	r3, r0
 808937a:	2200      	movs	r2, #0
 808937c:	469a      	mov	sl, r3
 808937e:	4693      	mov	fp, r2
 8089380:	4b60      	ldr	r3, [pc, #384]	; (8089504 <SIM_GetNewFWFileInfo+0x3b8>)
 8089382:	e9c3 ab02 	strd	sl, fp, [r3, #8]
	curFwRunningVer.patch 	= flash_read_Int(CURRENT_RUNNING_FW_VER_PATCH_ADDR);
 8089386:	4861      	ldr	r0, [pc, #388]	; (808950c <SIM_GetNewFWFileInfo+0x3c0>)
 8089388:	f7ff f978 	bl	808867c <flash_read_Int>
 808938c:	4603      	mov	r3, r0
 808938e:	2200      	movs	r2, #0
 8089390:	4698      	mov	r8, r3
 8089392:	4691      	mov	r9, r2
 8089394:	4b5b      	ldr	r3, [pc, #364]	; (8089504 <SIM_GetNewFWFileInfo+0x3b8>)
 8089396:	e9c3 8904 	strd	r8, r9, [r3, #16]
	if(newFwVerOnServer.patch > curFwRunningVer.patch)
 808939a:	4b58      	ldr	r3, [pc, #352]	; (80894fc <SIM_GetNewFWFileInfo+0x3b0>)
 808939c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80893a0:	4958      	ldr	r1, [pc, #352]	; (8089504 <SIM_GetNewFWFileInfo+0x3b8>)
 80893a2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80893a6:	4290      	cmp	r0, r2
 80893a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80893ac:	f080 80f3 	bcs.w	8089596 <SIM_GetNewFWFileInfo+0x44a>
	{
		if(newFwVerOnServer.minor != curFwRunningVer.minor)
 80893b0:	4b52      	ldr	r3, [pc, #328]	; (80894fc <SIM_GetNewFWFileInfo+0x3b0>)
 80893b2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80893b6:	4b53      	ldr	r3, [pc, #332]	; (8089504 <SIM_GetNewFWFileInfo+0x3b8>)
 80893b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80893bc:	4299      	cmp	r1, r3
 80893be:	bf08      	it	eq
 80893c0:	4290      	cmpeq	r0, r2
 80893c2:	d024      	beq.n	808940e <SIM_GetNewFWFileInfo+0x2c2>
		{
			flash_EraseSector(5);
 80893c4:	2005      	movs	r0, #5
 80893c6:	f7ff f930 	bl	808862a <flash_EraseSector>
			flash_write_Int(FLAG_NEED_UPDATE_FW_ADDR, 1);
 80893ca:	2101      	movs	r1, #1
 80893cc:	4850      	ldr	r0, [pc, #320]	; (8089510 <SIM_GetNewFWFileInfo+0x3c4>)
 80893ce:	f7ff f93e 	bl	808864e <flash_write_Int>
			flash_EraseSector(6);
 80893d2:	2006      	movs	r0, #6
 80893d4:	f7ff f929 	bl	808862a <flash_EraseSector>
			flash_write_Array(PHONE_NUMBER_REQUESTED_ADDR, number, 12);
 80893d8:	220c      	movs	r2, #12
 80893da:	494e      	ldr	r1, [pc, #312]	; (8089514 <SIM_GetNewFWFileInfo+0x3c8>)
 80893dc:	484e      	ldr	r0, [pc, #312]	; (8089518 <SIM_GetNewFWFileInfo+0x3cc>)
 80893de:	f7ff f95b 	bl	8088698 <flash_write_Array>
			flash_write_Array(LINK_FW_ON_SERVER, linkFirebaseStorage, strlen(linkFirebaseStorage));
 80893e2:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 80893e6:	f7f6 fef3 	bl	80801d0 <strlen>
 80893ea:	4603      	mov	r3, r0
 80893ec:	b29b      	uxth	r3, r3
 80893ee:	461a      	mov	r2, r3
 80893f0:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 80893f4:	4849      	ldr	r0, [pc, #292]	; (808951c <SIM_GetNewFWFileInfo+0x3d0>)
 80893f6:	f7ff f94f 	bl	8088698 <flash_write_Array>
			flash_write_Int(SIZE_LINK_FW_ON_SERVER, strlen(linkFirebaseStorage));
 80893fa:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 80893fe:	f7f6 fee7 	bl	80801d0 <strlen>
 8089402:	4603      	mov	r3, r0
 8089404:	4619      	mov	r1, r3
 8089406:	4846      	ldr	r0, [pc, #280]	; (8089520 <SIM_GetNewFWFileInfo+0x3d4>)
 8089408:	f7ff f921 	bl	808864e <flash_write_Int>
 808940c:	e0c1      	b.n	8089592 <SIM_GetNewFWFileInfo+0x446>
		}
		else
		{
			memset((char*) paraString, 0, RX_LEN);
 808940e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089412:	f44f 720c 	mov.w	r2, #560	; 0x230
 8089416:	2100      	movs	r1, #0
 8089418:	4618      	mov	r0, r3
 808941a:	f000 fa1b 	bl	8089854 <memset>
			sprintf(paraString, "\r\nAT+HTTPPARA=\"URL\",\"%s\"",
 808941e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089422:	4a40      	ldr	r2, [pc, #256]	; (8089524 <SIM_GetNewFWFileInfo+0x3d8>)
 8089424:	4940      	ldr	r1, [pc, #256]	; (8089528 <SIM_GetNewFWFileInfo+0x3dc>)
 8089426:	4618      	mov	r0, r3
 8089428:	f000 fe9e 	bl	808a168 <siprintf>
					"https://test-fota-default-rtdb.asia-southeast1.firebasedatabase.app/fota2.json");
			sendATcommand(paraString, "OK", 9000);									//"AT+HTTPPARA=\"URL\",\"%s\"", URL
 808942c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089430:	f242 3228 	movw	r2, #9000	; 0x2328
 8089434:	4921      	ldr	r1, [pc, #132]	; (80894bc <SIM_GetNewFWFileInfo+0x370>)
 8089436:	4618      	mov	r0, r3
 8089438:	f000 f8c0 	bl	80895bc <sendATcommand>
			sendATcommand("AT+HTTPACTION=0", "OK", 9000);							//HTTP GET
 808943c:	f242 3228 	movw	r2, #9000	; 0x2328
 8089440:	491e      	ldr	r1, [pc, #120]	; (80894bc <SIM_GetNewFWFileInfo+0x370>)
 8089442:	4823      	ldr	r0, [pc, #140]	; (80894d0 <SIM_GetNewFWFileInfo+0x384>)
 8089444:	f000 f8ba 	bl	80895bc <sendATcommand>
			SIM_waitRespond("+HTTPACTION: 0", 9000);
 8089448:	f242 3128 	movw	r1, #9000	; 0x2328
 808944c:	4821      	ldr	r0, [pc, #132]	; (80894d4 <SIM_GetNewFWFileInfo+0x388>)
 808944e:	f000 f94b 	bl	80896e8 <SIM_waitRespond>

			SIM_GetHTTP_Info(RespInfo);
 8089452:	f107 0218 	add.w	r2, r7, #24
 8089456:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 808945a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 808945e:	6819      	ldr	r1, [r3, #0]
 8089460:	4610      	mov	r0, r2
 8089462:	f000 f981 	bl	8089768 <SIM_GetHTTP_Info>

			memset((char*) paraString, 0, RX_LEN);
 8089466:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 808946a:	f44f 720c 	mov.w	r2, #560	; 0x230
 808946e:	2100      	movs	r1, #0
 8089470:	4618      	mov	r0, r3
 8089472:	f000 f9ef 	bl	8089854 <memset>
			sprintf(paraString, "AT+HTTPREAD=0,%u", RespInfo->ContentLen);			//AT+HTTPREAD=0,151
 8089476:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 808947a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 808947e:	681b      	ldr	r3, [r3, #0]
 8089480:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 8089484:	461a      	mov	r2, r3
 8089486:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 808948a:	4913      	ldr	r1, [pc, #76]	; (80894d8 <SIM_GetNewFWFileInfo+0x38c>)
 808948c:	4618      	mov	r0, r3
 808948e:	f000 fe6b 	bl	808a168 <siprintf>
			sendATcommand(paraString, "}", 9000);									//Send message, nhận về phản hồi là đường dẫn chứa firmware mới, có tên của firmware
 8089492:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8089496:	f242 3228 	movw	r2, #9000	; 0x2328
 808949a:	4910      	ldr	r1, [pc, #64]	; (80894dc <SIM_GetNewFWFileInfo+0x390>)
 808949c:	4618      	mov	r0, r3
 808949e:	f000 f88d 	bl	80895bc <sendATcommand>

			linkFirebaseStorage = NULL;
 80894a2:	2300      	movs	r3, #0
 80894a4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			linkFirebaseStorage = strtok(rxBuffer, "{");
 80894a8:	490d      	ldr	r1, [pc, #52]	; (80894e0 <SIM_GetNewFWFileInfo+0x394>)
 80894aa:	480e      	ldr	r0, [pc, #56]	; (80894e4 <SIM_GetNewFWFileInfo+0x398>)
 80894ac:	f000 fe9a 	bl	808a1e4 <strtok>
 80894b0:	f8c7 056c 	str.w	r0, [r7, #1388]	; 0x56c
			for(int i =0; i<3; i++)
 80894b4:	2300      	movs	r3, #0
 80894b6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 80894ba:	e042      	b.n	8089542 <SIM_GetNewFWFileInfo+0x3f6>
 80894bc:	0808ca90 	.word	0x0808ca90
 80894c0:	0808cd74 	.word	0x0808cd74
 80894c4:	0808cd80 	.word	0x0808cd80
 80894c8:	0808cd8c 	.word	0x0808cd8c
 80894cc:	0808ce28 	.word	0x0808ce28
 80894d0:	0808ce2c 	.word	0x0808ce2c
 80894d4:	0808ce3c 	.word	0x0808ce3c
 80894d8:	0808ce04 	.word	0x0808ce04
 80894dc:	0808ce4c 	.word	0x0808ce4c
 80894e0:	0808ce50 	.word	0x0808ce50
 80894e4:	20000960 	.word	0x20000960
 80894e8:	0808cc48 	.word	0x0808cc48
 80894ec:	0808ce54 	.word	0x0808ce54
 80894f0:	0808ce58 	.word	0x0808ce58
 80894f4:	0808ce5c 	.word	0x0808ce5c
 80894f8:	0808ce60 	.word	0x0808ce60
 80894fc:	20000e10 	.word	0x20000e10
 8089500:	08020010 	.word	0x08020010
 8089504:	20000df8 	.word	0x20000df8
 8089508:	08020014 	.word	0x08020014
 808950c:	08020018 	.word	0x08020018
 8089510:	08020000 	.word	0x08020000
 8089514:	20000de8 	.word	0x20000de8
 8089518:	08040008 	.word	0x08040008
 808951c:	08040078 	.word	0x08040078
 8089520:	08040074 	.word	0x08040074
 8089524:	0808ce64 	.word	0x0808ce64
 8089528:	0808ceb4 	.word	0x0808ceb4
			{
				linkFirebaseStorage = strtok(NULL, "\"");
 808952c:	491d      	ldr	r1, [pc, #116]	; (80895a4 <SIM_GetNewFWFileInfo+0x458>)
 808952e:	2000      	movs	r0, #0
 8089530:	f000 fe58 	bl	808a1e4 <strtok>
 8089534:	f8c7 056c 	str.w	r0, [r7, #1388]	; 0x56c
			for(int i =0; i<3; i++)
 8089538:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 808953c:	3301      	adds	r3, #1
 808953e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
 8089542:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8089546:	2b02      	cmp	r3, #2
 8089548:	ddf0      	ble.n	808952c <SIM_GetNewFWFileInfo+0x3e0>
			}
			flash_EraseSector(5);
 808954a:	2005      	movs	r0, #5
 808954c:	f7ff f86d 	bl	808862a <flash_EraseSector>
			flash_write_Int(FLAG_NEED_UPDATE_FW_ADDR, 1);
 8089550:	2101      	movs	r1, #1
 8089552:	4815      	ldr	r0, [pc, #84]	; (80895a8 <SIM_GetNewFWFileInfo+0x45c>)
 8089554:	f7ff f87b 	bl	808864e <flash_write_Int>
			flash_EraseSector(6);
 8089558:	2006      	movs	r0, #6
 808955a:	f7ff f866 	bl	808862a <flash_EraseSector>
			flash_write_Array(PHONE_NUMBER_REQUESTED_ADDR, number, 12);
 808955e:	220c      	movs	r2, #12
 8089560:	4912      	ldr	r1, [pc, #72]	; (80895ac <SIM_GetNewFWFileInfo+0x460>)
 8089562:	4813      	ldr	r0, [pc, #76]	; (80895b0 <SIM_GetNewFWFileInfo+0x464>)
 8089564:	f7ff f898 	bl	8088698 <flash_write_Array>
			flash_write_Array(LINK_FW_ON_SERVER, linkFirebaseStorage, strlen(linkFirebaseStorage));
 8089568:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 808956c:	f7f6 fe30 	bl	80801d0 <strlen>
 8089570:	4603      	mov	r3, r0
 8089572:	b29b      	uxth	r3, r3
 8089574:	461a      	mov	r2, r3
 8089576:	f8d7 156c 	ldr.w	r1, [r7, #1388]	; 0x56c
 808957a:	480e      	ldr	r0, [pc, #56]	; (80895b4 <SIM_GetNewFWFileInfo+0x468>)
 808957c:	f7ff f88c 	bl	8088698 <flash_write_Array>
			flash_write_Int(SIZE_LINK_FW_ON_SERVER, strlen(linkFirebaseStorage));
 8089580:	f8d7 056c 	ldr.w	r0, [r7, #1388]	; 0x56c
 8089584:	f7f6 fe24 	bl	80801d0 <strlen>
 8089588:	4603      	mov	r3, r0
 808958a:	4619      	mov	r1, r3
 808958c:	480a      	ldr	r0, [pc, #40]	; (80895b8 <SIM_GetNewFWFileInfo+0x46c>)
 808958e:	f7ff f85e 	bl	808864e <flash_write_Int>
		}
		HAL_NVIC_SystemReset();
 8089592:	f7f9 fa72 	bl	8082a7a <HAL_NVIC_SystemReset>
	}
}
 8089596:	bf00      	nop
 8089598:	f507 67ae 	add.w	r7, r7, #1392	; 0x570
 808959c:	46bd      	mov	sp, r7
 808959e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80895a2:	bf00      	nop
 80895a4:	0808cc48 	.word	0x0808cc48
 80895a8:	08020000 	.word	0x08020000
 80895ac:	20000de8 	.word	0x20000de8
 80895b0:	08040008 	.word	0x08040008
 80895b4:	08040078 	.word	0x08040078
 80895b8:	08040074 	.word	0x08040074

080895bc <sendATcommand>:

SIM_StatusTypeDef sendATcommand(const char *ATCommand, const char *Response, uint32_t Timeout)
{
 80895bc:	b580      	push	{r7, lr}
 80895be:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 80895c2:	af00      	add	r7, sp, #0
 80895c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80895c8:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80895cc:	6018      	str	r0, [r3, #0]
 80895ce:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80895d2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80895d6:	6019      	str	r1, [r3, #0]
 80895d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80895dc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80895e0:	601a      	str	r2, [r3, #0]
	SIM_StatusTypeDef status = SIM_BUSY;
 80895e2:	2302      	movs	r3, #2
 80895e4:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	memset((char*) rxBuffer, 0, RX_LEN);		// Xóa hết buffer
 80895e8:	f44f 720c 	mov.w	r2, #560	; 0x230
 80895ec:	2100      	movs	r1, #0
 80895ee:	4839      	ldr	r0, [pc, #228]	; (80896d4 <sendATcommand+0x118>)
 80895f0:	f000 f930 	bl	8089854 <memset>
	char txBuffer[RX_LEN] = { 0 };			// Khai báo txBuffer gửi đi
 80895f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80895f8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80895fc:	2200      	movs	r2, #0
 80895fe:	601a      	str	r2, [r3, #0]
 8089600:	3304      	adds	r3, #4
 8089602:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8089606:	2100      	movs	r1, #0
 8089608:	4618      	mov	r0, r3
 808960a:	f000 f923 	bl	8089854 <memset>

	sprintf((char*) txBuffer, "%s\r\n", ATCommand);		// Ép buffer thành lệnh nhập vào
 808960e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8089612:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8089616:	f107 0010 	add.w	r0, r7, #16
 808961a:	681a      	ldr	r2, [r3, #0]
 808961c:	492e      	ldr	r1, [pc, #184]	; (80896d8 <sendATcommand+0x11c>)
 808961e:	f000 fda3 	bl	808a168 <siprintf>

	HAL_UART_Transmit(&SIM_UART, (uint8_t*) txBuffer, (uint16_t)strlen(txBuffer), HAL_MAX_DELAY); // Truyền lệnh ATCommnd sang Sim
 8089622:	f107 0310 	add.w	r3, r7, #16
 8089626:	4618      	mov	r0, r3
 8089628:	f7f6 fdd2 	bl	80801d0 <strlen>
 808962c:	4603      	mov	r3, r0
 808962e:	b29a      	uxth	r2, r3
 8089630:	f107 0110 	add.w	r1, r7, #16
 8089634:	f04f 33ff 	mov.w	r3, #4294967295
 8089638:	4828      	ldr	r0, [pc, #160]	; (80896dc <sendATcommand+0x120>)
 808963a:	f7fc fdb8 	bl	80861ae <HAL_UART_Transmit>
	printf((char*) txBuffer);		// In Buffer này ra log
 808963e:	f107 0310 	add.w	r3, r7, #16
 8089642:	4618      	mov	r0, r3
 8089644:	f000 fd78 	bl	808a138 <iprintf>
	uint32_t tickStart = HAL_GetTick();
 8089648:	f7f9 f8cc 	bl	80827e4 <HAL_GetTick>
 808964c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
	while (status == SIM_BUSY) {
 8089650:	e02f      	b.n	80896b2 <sendATcommand+0xf6>
		if ((HAL_GetTick() - tickStart >= Timeout)) {
 8089652:	f7f9 f8c7 	bl	80827e4 <HAL_GetTick>
 8089656:	4602      	mov	r2, r0
 8089658:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 808965c:	1ad3      	subs	r3, r2, r3
 808965e:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8089662:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 8089666:	6812      	ldr	r2, [r2, #0]
 8089668:	429a      	cmp	r2, r3
 808966a:	d803      	bhi.n	8089674 <sendATcommand+0xb8>
			status = SIM_TIMEOUT;
 808966c:	2303      	movs	r3, #3
 808966e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
			break;
 8089672:	e022      	b.n	80896ba <sendATcommand+0xfe>
		}
		if (RxFlag == true) { // RxFlag = 1 nghĩa là có ngắt nhận về chuỗi DMA
 8089674:	4b1a      	ldr	r3, [pc, #104]	; (80896e0 <sendATcommand+0x124>)
 8089676:	781b      	ldrb	r3, [r3, #0]
 8089678:	b2db      	uxtb	r3, r3
 808967a:	2b00      	cmp	r3, #0
 808967c:	d019      	beq.n	80896b2 <sendATcommand+0xf6>
			if (strstr((char*) rxBuffer, Response) != NULL) { // tìm cái response trong rx buffer trả về, thường là OK
 808967e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8089682:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8089686:	6819      	ldr	r1, [r3, #0]
 8089688:	4812      	ldr	r0, [pc, #72]	; (80896d4 <sendATcommand+0x118>)
 808968a:	f000 fd95 	bl	808a1b8 <strstr>
 808968e:	4603      	mov	r3, r0
 8089690:	2b00      	cmp	r3, #0
 8089692:	d003      	beq.n	808969c <sendATcommand+0xe0>
				status = SIM_OK;
 8089694:	2300      	movs	r3, #0
 8089696:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
				break;
 808969a:	e00e      	b.n	80896ba <sendATcommand+0xfe>
			} else if (strstr((char*) rxBuffer, "ERROR") != NULL) { // vẫn là tìm response trả về, nhưng là lỗi ERROR
 808969c:	4911      	ldr	r1, [pc, #68]	; (80896e4 <sendATcommand+0x128>)
 808969e:	480d      	ldr	r0, [pc, #52]	; (80896d4 <sendATcommand+0x118>)
 80896a0:	f000 fd8a 	bl	808a1b8 <strstr>
 80896a4:	4603      	mov	r3, r0
 80896a6:	2b00      	cmp	r3, #0
 80896a8:	d003      	beq.n	80896b2 <sendATcommand+0xf6>
				status = SIM_ERROR;
 80896aa:	2301      	movs	r3, #1
 80896ac:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
				break;
 80896b0:	e003      	b.n	80896ba <sendATcommand+0xfe>
	while (status == SIM_BUSY) {
 80896b2:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80896b6:	2b02      	cmp	r3, #2
 80896b8:	d0cb      	beq.n	8089652 <sendATcommand+0x96>
			}
		}
	}
	printf((char*) rxBuffer); // in ra hàm trả về
 80896ba:	4806      	ldr	r0, [pc, #24]	; (80896d4 <sendATcommand+0x118>)
 80896bc:	f000 fd3c 	bl	808a138 <iprintf>
	RxFlag = false;
 80896c0:	4b07      	ldr	r3, [pc, #28]	; (80896e0 <sendATcommand+0x124>)
 80896c2:	2200      	movs	r2, #0
 80896c4:	701a      	strb	r2, [r3, #0]
	return status;
 80896c6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
}
 80896ca:	4618      	mov	r0, r3
 80896cc:	f507 7712 	add.w	r7, r7, #584	; 0x248
 80896d0:	46bd      	mov	sp, r7
 80896d2:	bd80      	pop	{r7, pc}
 80896d4:	20000960 	.word	0x20000960
 80896d8:	0808ced0 	.word	0x0808ced0
 80896dc:	20000364 	.word	0x20000364
 80896e0:	2000095d 	.word	0x2000095d
 80896e4:	0808ced8 	.word	0x0808ced8

080896e8 <SIM_waitRespond>:
SIM_StatusTypeDef SIM_waitRespond(const char *Response, uint32_t Timeout)
{
 80896e8:	b580      	push	{r7, lr}
 80896ea:	b084      	sub	sp, #16
 80896ec:	af00      	add	r7, sp, #0
 80896ee:	6078      	str	r0, [r7, #4]
 80896f0:	6039      	str	r1, [r7, #0]
	SIM_StatusTypeDef status = SIM_BUSY;
 80896f2:	2302      	movs	r3, #2
 80896f4:	73fb      	strb	r3, [r7, #15]
	uint32_t tickStart = HAL_GetTick();
 80896f6:	f7f9 f875 	bl	80827e4 <HAL_GetTick>
 80896fa:	60b8      	str	r0, [r7, #8]
	while (status == SIM_BUSY) {
 80896fc:	e023      	b.n	8089746 <SIM_waitRespond+0x5e>
		if ((HAL_GetTick() - tickStart >= Timeout)) {
 80896fe:	f7f9 f871 	bl	80827e4 <HAL_GetTick>
 8089702:	4602      	mov	r2, r0
 8089704:	68bb      	ldr	r3, [r7, #8]
 8089706:	1ad3      	subs	r3, r2, r3
 8089708:	683a      	ldr	r2, [r7, #0]
 808970a:	429a      	cmp	r2, r3
 808970c:	d802      	bhi.n	8089714 <SIM_waitRespond+0x2c>
			status = SIM_TIMEOUT;
 808970e:	2303      	movs	r3, #3
 8089710:	73fb      	strb	r3, [r7, #15]
			break;
 8089712:	e01b      	b.n	808974c <SIM_waitRespond+0x64>
		}
		if (RxFlag == true) { // RxFlag = 1 nghĩa là có ngắt nhận về chuỗi DMA
 8089714:	4b11      	ldr	r3, [pc, #68]	; (808975c <SIM_waitRespond+0x74>)
 8089716:	781b      	ldrb	r3, [r3, #0]
 8089718:	b2db      	uxtb	r3, r3
 808971a:	2b00      	cmp	r3, #0
 808971c:	d013      	beq.n	8089746 <SIM_waitRespond+0x5e>
			if (strstr((char*) rxBuffer, Response) != NULL) { // tìm cái response trong rx buffer trả về, thường là OK
 808971e:	6879      	ldr	r1, [r7, #4]
 8089720:	480f      	ldr	r0, [pc, #60]	; (8089760 <SIM_waitRespond+0x78>)
 8089722:	f000 fd49 	bl	808a1b8 <strstr>
 8089726:	4603      	mov	r3, r0
 8089728:	2b00      	cmp	r3, #0
 808972a:	d002      	beq.n	8089732 <SIM_waitRespond+0x4a>
				status = SIM_OK;
 808972c:	2300      	movs	r3, #0
 808972e:	73fb      	strb	r3, [r7, #15]
				break;
 8089730:	e00c      	b.n	808974c <SIM_waitRespond+0x64>
			} else if (strstr((char*) rxBuffer, "ERROR") != NULL) { // vẫn là tìm response trả về, nhưng là lỗi ERROR
 8089732:	490c      	ldr	r1, [pc, #48]	; (8089764 <SIM_waitRespond+0x7c>)
 8089734:	480a      	ldr	r0, [pc, #40]	; (8089760 <SIM_waitRespond+0x78>)
 8089736:	f000 fd3f 	bl	808a1b8 <strstr>
 808973a:	4603      	mov	r3, r0
 808973c:	2b00      	cmp	r3, #0
 808973e:	d002      	beq.n	8089746 <SIM_waitRespond+0x5e>
				status = SIM_ERROR;
 8089740:	2301      	movs	r3, #1
 8089742:	73fb      	strb	r3, [r7, #15]
				break;
 8089744:	e002      	b.n	808974c <SIM_waitRespond+0x64>
	while (status == SIM_BUSY) {
 8089746:	7bfb      	ldrb	r3, [r7, #15]
 8089748:	2b02      	cmp	r3, #2
 808974a:	d0d8      	beq.n	80896fe <SIM_waitRespond+0x16>
			}
		}
	}
	RxFlag = false;
 808974c:	4b03      	ldr	r3, [pc, #12]	; (808975c <SIM_waitRespond+0x74>)
 808974e:	2200      	movs	r2, #0
 8089750:	701a      	strb	r2, [r3, #0]
	return status;
 8089752:	7bfb      	ldrb	r3, [r7, #15]
}
 8089754:	4618      	mov	r0, r3
 8089756:	3710      	adds	r7, #16
 8089758:	46bd      	mov	sp, r7
 808975a:	bd80      	pop	{r7, pc}
 808975c:	2000095d 	.word	0x2000095d
 8089760:	20000960 	.word	0x20000960
 8089764:	0808ced8 	.word	0x0808ced8

08089768 <SIM_GetHTTP_Info>:

HTTP_InfoTypeDef SIM_GetHTTP_Info(HTTP_InfoTypeDef *RespInfo)
{
 8089768:	b580      	push	{r7, lr}
 808976a:	b084      	sub	sp, #16
 808976c:	af00      	add	r7, sp, #0
 808976e:	6078      	str	r0, [r7, #4]
 8089770:	6039      	str	r1, [r7, #0]
	char *errorstring = NULL;												//Phản hồi của http
 8089772:	2300      	movs	r3, #0
 8089774:	60fb      	str	r3, [r7, #12]
	char *ContentLenString = NULL;											//Độ dài của dữ liệu
 8089776:	2300      	movs	r3, #0
 8089778:	60bb      	str	r3, [r7, #8]
	ContentLenString = strtok(rxBuffer, ",");
 808977a:	4915      	ldr	r1, [pc, #84]	; (80897d0 <SIM_GetHTTP_Info+0x68>)
 808977c:	4815      	ldr	r0, [pc, #84]	; (80897d4 <SIM_GetHTTP_Info+0x6c>)
 808977e:	f000 fd31 	bl	808a1e4 <strtok>
 8089782:	60b8      	str	r0, [r7, #8]
	errorstring = strtok(NULL, ",");
 8089784:	4912      	ldr	r1, [pc, #72]	; (80897d0 <SIM_GetHTTP_Info+0x68>)
 8089786:	2000      	movs	r0, #0
 8089788:	f000 fd2c 	bl	808a1e4 <strtok>
 808978c:	60f8      	str	r0, [r7, #12]
	ContentLenString = strtok(NULL, " ");
 808978e:	4912      	ldr	r1, [pc, #72]	; (80897d8 <SIM_GetHTTP_Info+0x70>)
 8089790:	2000      	movs	r0, #0
 8089792:	f000 fd27 	bl	808a1e4 <strtok>
 8089796:	60b8      	str	r0, [r7, #8]
	RespInfo->ErrorCode = atoi(errorstring);
 8089798:	68f8      	ldr	r0, [r7, #12]
 808979a:	f000 f81f 	bl	80897dc <atoi>
 808979e:	4603      	mov	r3, r0
 80897a0:	b29a      	uxth	r2, r3
 80897a2:	683b      	ldr	r3, [r7, #0]
 80897a4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	RespInfo->ContentLen = atoi(ContentLenString);
 80897a8:	68b8      	ldr	r0, [r7, #8]
 80897aa:	f000 f817 	bl	80897dc <atoi>
 80897ae:	4603      	mov	r3, r0
 80897b0:	b29a      	uxth	r2, r3
 80897b2:	683b      	ldr	r3, [r7, #0]
 80897b4:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	return *RespInfo;
 80897b8:	687a      	ldr	r2, [r7, #4]
 80897ba:	683b      	ldr	r3, [r7, #0]
 80897bc:	4610      	mov	r0, r2
 80897be:	4619      	mov	r1, r3
 80897c0:	23cc      	movs	r3, #204	; 0xcc
 80897c2:	461a      	mov	r2, r3
 80897c4:	f000 f838 	bl	8089838 <memcpy>
}
 80897c8:	6878      	ldr	r0, [r7, #4]
 80897ca:	3710      	adds	r7, #16
 80897cc:	46bd      	mov	sp, r7
 80897ce:	bd80      	pop	{r7, pc}
 80897d0:	0808cee0 	.word	0x0808cee0
 80897d4:	20000960 	.word	0x20000960
 80897d8:	0808cc70 	.word	0x0808cc70

080897dc <atoi>:
 80897dc:	220a      	movs	r2, #10
 80897de:	2100      	movs	r1, #0
 80897e0:	f000 bdde 	b.w	808a3a0 <strtol>

080897e4 <__errno>:
 80897e4:	4b01      	ldr	r3, [pc, #4]	; (80897ec <__errno+0x8>)
 80897e6:	6818      	ldr	r0, [r3, #0]
 80897e8:	4770      	bx	lr
 80897ea:	bf00      	nop
 80897ec:	20000090 	.word	0x20000090

080897f0 <__libc_init_array>:
 80897f0:	b570      	push	{r4, r5, r6, lr}
 80897f2:	4d0d      	ldr	r5, [pc, #52]	; (8089828 <__libc_init_array+0x38>)
 80897f4:	4c0d      	ldr	r4, [pc, #52]	; (808982c <__libc_init_array+0x3c>)
 80897f6:	1b64      	subs	r4, r4, r5
 80897f8:	10a4      	asrs	r4, r4, #2
 80897fa:	2600      	movs	r6, #0
 80897fc:	42a6      	cmp	r6, r4
 80897fe:	d109      	bne.n	8089814 <__libc_init_array+0x24>
 8089800:	4d0b      	ldr	r5, [pc, #44]	; (8089830 <__libc_init_array+0x40>)
 8089802:	4c0c      	ldr	r4, [pc, #48]	; (8089834 <__libc_init_array+0x44>)
 8089804:	f003 f824 	bl	808c850 <_init>
 8089808:	1b64      	subs	r4, r4, r5
 808980a:	10a4      	asrs	r4, r4, #2
 808980c:	2600      	movs	r6, #0
 808980e:	42a6      	cmp	r6, r4
 8089810:	d105      	bne.n	808981e <__libc_init_array+0x2e>
 8089812:	bd70      	pop	{r4, r5, r6, pc}
 8089814:	f855 3b04 	ldr.w	r3, [r5], #4
 8089818:	4798      	blx	r3
 808981a:	3601      	adds	r6, #1
 808981c:	e7ee      	b.n	80897fc <__libc_init_array+0xc>
 808981e:	f855 3b04 	ldr.w	r3, [r5], #4
 8089822:	4798      	blx	r3
 8089824:	3601      	adds	r6, #1
 8089826:	e7f2      	b.n	808980e <__libc_init_array+0x1e>
 8089828:	0808d358 	.word	0x0808d358
 808982c:	0808d358 	.word	0x0808d358
 8089830:	0808d358 	.word	0x0808d358
 8089834:	0808d35c 	.word	0x0808d35c

08089838 <memcpy>:
 8089838:	440a      	add	r2, r1
 808983a:	4291      	cmp	r1, r2
 808983c:	f100 33ff 	add.w	r3, r0, #4294967295
 8089840:	d100      	bne.n	8089844 <memcpy+0xc>
 8089842:	4770      	bx	lr
 8089844:	b510      	push	{r4, lr}
 8089846:	f811 4b01 	ldrb.w	r4, [r1], #1
 808984a:	f803 4f01 	strb.w	r4, [r3, #1]!
 808984e:	4291      	cmp	r1, r2
 8089850:	d1f9      	bne.n	8089846 <memcpy+0xe>
 8089852:	bd10      	pop	{r4, pc}

08089854 <memset>:
 8089854:	4402      	add	r2, r0
 8089856:	4603      	mov	r3, r0
 8089858:	4293      	cmp	r3, r2
 808985a:	d100      	bne.n	808985e <memset+0xa>
 808985c:	4770      	bx	lr
 808985e:	f803 1b01 	strb.w	r1, [r3], #1
 8089862:	e7f9      	b.n	8089858 <memset+0x4>

08089864 <__cvt>:
 8089864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8089868:	ec55 4b10 	vmov	r4, r5, d0
 808986c:	2d00      	cmp	r5, #0
 808986e:	460e      	mov	r6, r1
 8089870:	4619      	mov	r1, r3
 8089872:	462b      	mov	r3, r5
 8089874:	bfbb      	ittet	lt
 8089876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 808987a:	461d      	movlt	r5, r3
 808987c:	2300      	movge	r3, #0
 808987e:	232d      	movlt	r3, #45	; 0x2d
 8089880:	700b      	strb	r3, [r1, #0]
 8089882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8089884:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8089888:	4691      	mov	r9, r2
 808988a:	f023 0820 	bic.w	r8, r3, #32
 808988e:	bfbc      	itt	lt
 8089890:	4622      	movlt	r2, r4
 8089892:	4614      	movlt	r4, r2
 8089894:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8089898:	d005      	beq.n	80898a6 <__cvt+0x42>
 808989a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 808989e:	d100      	bne.n	80898a2 <__cvt+0x3e>
 80898a0:	3601      	adds	r6, #1
 80898a2:	2102      	movs	r1, #2
 80898a4:	e000      	b.n	80898a8 <__cvt+0x44>
 80898a6:	2103      	movs	r1, #3
 80898a8:	ab03      	add	r3, sp, #12
 80898aa:	9301      	str	r3, [sp, #4]
 80898ac:	ab02      	add	r3, sp, #8
 80898ae:	9300      	str	r3, [sp, #0]
 80898b0:	ec45 4b10 	vmov	d0, r4, r5
 80898b4:	4653      	mov	r3, sl
 80898b6:	4632      	mov	r2, r6
 80898b8:	f000 fe26 	bl	808a508 <_dtoa_r>
 80898bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80898c0:	4607      	mov	r7, r0
 80898c2:	d102      	bne.n	80898ca <__cvt+0x66>
 80898c4:	f019 0f01 	tst.w	r9, #1
 80898c8:	d022      	beq.n	8089910 <__cvt+0xac>
 80898ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80898ce:	eb07 0906 	add.w	r9, r7, r6
 80898d2:	d110      	bne.n	80898f6 <__cvt+0x92>
 80898d4:	783b      	ldrb	r3, [r7, #0]
 80898d6:	2b30      	cmp	r3, #48	; 0x30
 80898d8:	d10a      	bne.n	80898f0 <__cvt+0x8c>
 80898da:	2200      	movs	r2, #0
 80898dc:	2300      	movs	r3, #0
 80898de:	4620      	mov	r0, r4
 80898e0:	4629      	mov	r1, r5
 80898e2:	f7f7 f8f1 	bl	8080ac8 <__aeabi_dcmpeq>
 80898e6:	b918      	cbnz	r0, 80898f0 <__cvt+0x8c>
 80898e8:	f1c6 0601 	rsb	r6, r6, #1
 80898ec:	f8ca 6000 	str.w	r6, [sl]
 80898f0:	f8da 3000 	ldr.w	r3, [sl]
 80898f4:	4499      	add	r9, r3
 80898f6:	2200      	movs	r2, #0
 80898f8:	2300      	movs	r3, #0
 80898fa:	4620      	mov	r0, r4
 80898fc:	4629      	mov	r1, r5
 80898fe:	f7f7 f8e3 	bl	8080ac8 <__aeabi_dcmpeq>
 8089902:	b108      	cbz	r0, 8089908 <__cvt+0xa4>
 8089904:	f8cd 900c 	str.w	r9, [sp, #12]
 8089908:	2230      	movs	r2, #48	; 0x30
 808990a:	9b03      	ldr	r3, [sp, #12]
 808990c:	454b      	cmp	r3, r9
 808990e:	d307      	bcc.n	8089920 <__cvt+0xbc>
 8089910:	9b03      	ldr	r3, [sp, #12]
 8089912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8089914:	1bdb      	subs	r3, r3, r7
 8089916:	4638      	mov	r0, r7
 8089918:	6013      	str	r3, [r2, #0]
 808991a:	b004      	add	sp, #16
 808991c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089920:	1c59      	adds	r1, r3, #1
 8089922:	9103      	str	r1, [sp, #12]
 8089924:	701a      	strb	r2, [r3, #0]
 8089926:	e7f0      	b.n	808990a <__cvt+0xa6>

08089928 <__exponent>:
 8089928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808992a:	4603      	mov	r3, r0
 808992c:	2900      	cmp	r1, #0
 808992e:	bfb8      	it	lt
 8089930:	4249      	neglt	r1, r1
 8089932:	f803 2b02 	strb.w	r2, [r3], #2
 8089936:	bfb4      	ite	lt
 8089938:	222d      	movlt	r2, #45	; 0x2d
 808993a:	222b      	movge	r2, #43	; 0x2b
 808993c:	2909      	cmp	r1, #9
 808993e:	7042      	strb	r2, [r0, #1]
 8089940:	dd2a      	ble.n	8089998 <__exponent+0x70>
 8089942:	f10d 0407 	add.w	r4, sp, #7
 8089946:	46a4      	mov	ip, r4
 8089948:	270a      	movs	r7, #10
 808994a:	46a6      	mov	lr, r4
 808994c:	460a      	mov	r2, r1
 808994e:	fb91 f6f7 	sdiv	r6, r1, r7
 8089952:	fb07 1516 	mls	r5, r7, r6, r1
 8089956:	3530      	adds	r5, #48	; 0x30
 8089958:	2a63      	cmp	r2, #99	; 0x63
 808995a:	f104 34ff 	add.w	r4, r4, #4294967295
 808995e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8089962:	4631      	mov	r1, r6
 8089964:	dcf1      	bgt.n	808994a <__exponent+0x22>
 8089966:	3130      	adds	r1, #48	; 0x30
 8089968:	f1ae 0502 	sub.w	r5, lr, #2
 808996c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8089970:	1c44      	adds	r4, r0, #1
 8089972:	4629      	mov	r1, r5
 8089974:	4561      	cmp	r1, ip
 8089976:	d30a      	bcc.n	808998e <__exponent+0x66>
 8089978:	f10d 0209 	add.w	r2, sp, #9
 808997c:	eba2 020e 	sub.w	r2, r2, lr
 8089980:	4565      	cmp	r5, ip
 8089982:	bf88      	it	hi
 8089984:	2200      	movhi	r2, #0
 8089986:	4413      	add	r3, r2
 8089988:	1a18      	subs	r0, r3, r0
 808998a:	b003      	add	sp, #12
 808998c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808998e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8089992:	f804 2f01 	strb.w	r2, [r4, #1]!
 8089996:	e7ed      	b.n	8089974 <__exponent+0x4c>
 8089998:	2330      	movs	r3, #48	; 0x30
 808999a:	3130      	adds	r1, #48	; 0x30
 808999c:	7083      	strb	r3, [r0, #2]
 808999e:	70c1      	strb	r1, [r0, #3]
 80899a0:	1d03      	adds	r3, r0, #4
 80899a2:	e7f1      	b.n	8089988 <__exponent+0x60>

080899a4 <_printf_float>:
 80899a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80899a8:	ed2d 8b02 	vpush	{d8}
 80899ac:	b08d      	sub	sp, #52	; 0x34
 80899ae:	460c      	mov	r4, r1
 80899b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80899b4:	4616      	mov	r6, r2
 80899b6:	461f      	mov	r7, r3
 80899b8:	4605      	mov	r5, r0
 80899ba:	f001 fc9b 	bl	808b2f4 <_localeconv_r>
 80899be:	f8d0 a000 	ldr.w	sl, [r0]
 80899c2:	4650      	mov	r0, sl
 80899c4:	f7f6 fc04 	bl	80801d0 <strlen>
 80899c8:	2300      	movs	r3, #0
 80899ca:	930a      	str	r3, [sp, #40]	; 0x28
 80899cc:	6823      	ldr	r3, [r4, #0]
 80899ce:	9305      	str	r3, [sp, #20]
 80899d0:	f8d8 3000 	ldr.w	r3, [r8]
 80899d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80899d8:	3307      	adds	r3, #7
 80899da:	f023 0307 	bic.w	r3, r3, #7
 80899de:	f103 0208 	add.w	r2, r3, #8
 80899e2:	f8c8 2000 	str.w	r2, [r8]
 80899e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80899ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80899ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80899f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80899f6:	9307      	str	r3, [sp, #28]
 80899f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80899fc:	ee08 0a10 	vmov	s16, r0
 8089a00:	4b9f      	ldr	r3, [pc, #636]	; (8089c80 <_printf_float+0x2dc>)
 8089a02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8089a06:	f04f 32ff 	mov.w	r2, #4294967295
 8089a0a:	f7f7 f88f 	bl	8080b2c <__aeabi_dcmpun>
 8089a0e:	bb88      	cbnz	r0, 8089a74 <_printf_float+0xd0>
 8089a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8089a14:	4b9a      	ldr	r3, [pc, #616]	; (8089c80 <_printf_float+0x2dc>)
 8089a16:	f04f 32ff 	mov.w	r2, #4294967295
 8089a1a:	f7f7 f869 	bl	8080af0 <__aeabi_dcmple>
 8089a1e:	bb48      	cbnz	r0, 8089a74 <_printf_float+0xd0>
 8089a20:	2200      	movs	r2, #0
 8089a22:	2300      	movs	r3, #0
 8089a24:	4640      	mov	r0, r8
 8089a26:	4649      	mov	r1, r9
 8089a28:	f7f7 f858 	bl	8080adc <__aeabi_dcmplt>
 8089a2c:	b110      	cbz	r0, 8089a34 <_printf_float+0x90>
 8089a2e:	232d      	movs	r3, #45	; 0x2d
 8089a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8089a34:	4b93      	ldr	r3, [pc, #588]	; (8089c84 <_printf_float+0x2e0>)
 8089a36:	4894      	ldr	r0, [pc, #592]	; (8089c88 <_printf_float+0x2e4>)
 8089a38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8089a3c:	bf94      	ite	ls
 8089a3e:	4698      	movls	r8, r3
 8089a40:	4680      	movhi	r8, r0
 8089a42:	2303      	movs	r3, #3
 8089a44:	6123      	str	r3, [r4, #16]
 8089a46:	9b05      	ldr	r3, [sp, #20]
 8089a48:	f023 0204 	bic.w	r2, r3, #4
 8089a4c:	6022      	str	r2, [r4, #0]
 8089a4e:	f04f 0900 	mov.w	r9, #0
 8089a52:	9700      	str	r7, [sp, #0]
 8089a54:	4633      	mov	r3, r6
 8089a56:	aa0b      	add	r2, sp, #44	; 0x2c
 8089a58:	4621      	mov	r1, r4
 8089a5a:	4628      	mov	r0, r5
 8089a5c:	f000 f9d8 	bl	8089e10 <_printf_common>
 8089a60:	3001      	adds	r0, #1
 8089a62:	f040 8090 	bne.w	8089b86 <_printf_float+0x1e2>
 8089a66:	f04f 30ff 	mov.w	r0, #4294967295
 8089a6a:	b00d      	add	sp, #52	; 0x34
 8089a6c:	ecbd 8b02 	vpop	{d8}
 8089a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089a74:	4642      	mov	r2, r8
 8089a76:	464b      	mov	r3, r9
 8089a78:	4640      	mov	r0, r8
 8089a7a:	4649      	mov	r1, r9
 8089a7c:	f7f7 f856 	bl	8080b2c <__aeabi_dcmpun>
 8089a80:	b140      	cbz	r0, 8089a94 <_printf_float+0xf0>
 8089a82:	464b      	mov	r3, r9
 8089a84:	2b00      	cmp	r3, #0
 8089a86:	bfbc      	itt	lt
 8089a88:	232d      	movlt	r3, #45	; 0x2d
 8089a8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8089a8e:	487f      	ldr	r0, [pc, #508]	; (8089c8c <_printf_float+0x2e8>)
 8089a90:	4b7f      	ldr	r3, [pc, #508]	; (8089c90 <_printf_float+0x2ec>)
 8089a92:	e7d1      	b.n	8089a38 <_printf_float+0x94>
 8089a94:	6863      	ldr	r3, [r4, #4]
 8089a96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8089a9a:	9206      	str	r2, [sp, #24]
 8089a9c:	1c5a      	adds	r2, r3, #1
 8089a9e:	d13f      	bne.n	8089b20 <_printf_float+0x17c>
 8089aa0:	2306      	movs	r3, #6
 8089aa2:	6063      	str	r3, [r4, #4]
 8089aa4:	9b05      	ldr	r3, [sp, #20]
 8089aa6:	6861      	ldr	r1, [r4, #4]
 8089aa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8089aac:	2300      	movs	r3, #0
 8089aae:	9303      	str	r3, [sp, #12]
 8089ab0:	ab0a      	add	r3, sp, #40	; 0x28
 8089ab2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8089ab6:	ab09      	add	r3, sp, #36	; 0x24
 8089ab8:	ec49 8b10 	vmov	d0, r8, r9
 8089abc:	9300      	str	r3, [sp, #0]
 8089abe:	6022      	str	r2, [r4, #0]
 8089ac0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8089ac4:	4628      	mov	r0, r5
 8089ac6:	f7ff fecd 	bl	8089864 <__cvt>
 8089aca:	9b06      	ldr	r3, [sp, #24]
 8089acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089ace:	2b47      	cmp	r3, #71	; 0x47
 8089ad0:	4680      	mov	r8, r0
 8089ad2:	d108      	bne.n	8089ae6 <_printf_float+0x142>
 8089ad4:	1cc8      	adds	r0, r1, #3
 8089ad6:	db02      	blt.n	8089ade <_printf_float+0x13a>
 8089ad8:	6863      	ldr	r3, [r4, #4]
 8089ada:	4299      	cmp	r1, r3
 8089adc:	dd41      	ble.n	8089b62 <_printf_float+0x1be>
 8089ade:	f1ab 0b02 	sub.w	fp, fp, #2
 8089ae2:	fa5f fb8b 	uxtb.w	fp, fp
 8089ae6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8089aea:	d820      	bhi.n	8089b2e <_printf_float+0x18a>
 8089aec:	3901      	subs	r1, #1
 8089aee:	465a      	mov	r2, fp
 8089af0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8089af4:	9109      	str	r1, [sp, #36]	; 0x24
 8089af6:	f7ff ff17 	bl	8089928 <__exponent>
 8089afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8089afc:	1813      	adds	r3, r2, r0
 8089afe:	2a01      	cmp	r2, #1
 8089b00:	4681      	mov	r9, r0
 8089b02:	6123      	str	r3, [r4, #16]
 8089b04:	dc02      	bgt.n	8089b0c <_printf_float+0x168>
 8089b06:	6822      	ldr	r2, [r4, #0]
 8089b08:	07d2      	lsls	r2, r2, #31
 8089b0a:	d501      	bpl.n	8089b10 <_printf_float+0x16c>
 8089b0c:	3301      	adds	r3, #1
 8089b0e:	6123      	str	r3, [r4, #16]
 8089b10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8089b14:	2b00      	cmp	r3, #0
 8089b16:	d09c      	beq.n	8089a52 <_printf_float+0xae>
 8089b18:	232d      	movs	r3, #45	; 0x2d
 8089b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8089b1e:	e798      	b.n	8089a52 <_printf_float+0xae>
 8089b20:	9a06      	ldr	r2, [sp, #24]
 8089b22:	2a47      	cmp	r2, #71	; 0x47
 8089b24:	d1be      	bne.n	8089aa4 <_printf_float+0x100>
 8089b26:	2b00      	cmp	r3, #0
 8089b28:	d1bc      	bne.n	8089aa4 <_printf_float+0x100>
 8089b2a:	2301      	movs	r3, #1
 8089b2c:	e7b9      	b.n	8089aa2 <_printf_float+0xfe>
 8089b2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8089b32:	d118      	bne.n	8089b66 <_printf_float+0x1c2>
 8089b34:	2900      	cmp	r1, #0
 8089b36:	6863      	ldr	r3, [r4, #4]
 8089b38:	dd0b      	ble.n	8089b52 <_printf_float+0x1ae>
 8089b3a:	6121      	str	r1, [r4, #16]
 8089b3c:	b913      	cbnz	r3, 8089b44 <_printf_float+0x1a0>
 8089b3e:	6822      	ldr	r2, [r4, #0]
 8089b40:	07d0      	lsls	r0, r2, #31
 8089b42:	d502      	bpl.n	8089b4a <_printf_float+0x1a6>
 8089b44:	3301      	adds	r3, #1
 8089b46:	440b      	add	r3, r1
 8089b48:	6123      	str	r3, [r4, #16]
 8089b4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8089b4c:	f04f 0900 	mov.w	r9, #0
 8089b50:	e7de      	b.n	8089b10 <_printf_float+0x16c>
 8089b52:	b913      	cbnz	r3, 8089b5a <_printf_float+0x1b6>
 8089b54:	6822      	ldr	r2, [r4, #0]
 8089b56:	07d2      	lsls	r2, r2, #31
 8089b58:	d501      	bpl.n	8089b5e <_printf_float+0x1ba>
 8089b5a:	3302      	adds	r3, #2
 8089b5c:	e7f4      	b.n	8089b48 <_printf_float+0x1a4>
 8089b5e:	2301      	movs	r3, #1
 8089b60:	e7f2      	b.n	8089b48 <_printf_float+0x1a4>
 8089b62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8089b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089b68:	4299      	cmp	r1, r3
 8089b6a:	db05      	blt.n	8089b78 <_printf_float+0x1d4>
 8089b6c:	6823      	ldr	r3, [r4, #0]
 8089b6e:	6121      	str	r1, [r4, #16]
 8089b70:	07d8      	lsls	r0, r3, #31
 8089b72:	d5ea      	bpl.n	8089b4a <_printf_float+0x1a6>
 8089b74:	1c4b      	adds	r3, r1, #1
 8089b76:	e7e7      	b.n	8089b48 <_printf_float+0x1a4>
 8089b78:	2900      	cmp	r1, #0
 8089b7a:	bfd4      	ite	le
 8089b7c:	f1c1 0202 	rsble	r2, r1, #2
 8089b80:	2201      	movgt	r2, #1
 8089b82:	4413      	add	r3, r2
 8089b84:	e7e0      	b.n	8089b48 <_printf_float+0x1a4>
 8089b86:	6823      	ldr	r3, [r4, #0]
 8089b88:	055a      	lsls	r2, r3, #21
 8089b8a:	d407      	bmi.n	8089b9c <_printf_float+0x1f8>
 8089b8c:	6923      	ldr	r3, [r4, #16]
 8089b8e:	4642      	mov	r2, r8
 8089b90:	4631      	mov	r1, r6
 8089b92:	4628      	mov	r0, r5
 8089b94:	47b8      	blx	r7
 8089b96:	3001      	adds	r0, #1
 8089b98:	d12c      	bne.n	8089bf4 <_printf_float+0x250>
 8089b9a:	e764      	b.n	8089a66 <_printf_float+0xc2>
 8089b9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8089ba0:	f240 80e0 	bls.w	8089d64 <_printf_float+0x3c0>
 8089ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8089ba8:	2200      	movs	r2, #0
 8089baa:	2300      	movs	r3, #0
 8089bac:	f7f6 ff8c 	bl	8080ac8 <__aeabi_dcmpeq>
 8089bb0:	2800      	cmp	r0, #0
 8089bb2:	d034      	beq.n	8089c1e <_printf_float+0x27a>
 8089bb4:	4a37      	ldr	r2, [pc, #220]	; (8089c94 <_printf_float+0x2f0>)
 8089bb6:	2301      	movs	r3, #1
 8089bb8:	4631      	mov	r1, r6
 8089bba:	4628      	mov	r0, r5
 8089bbc:	47b8      	blx	r7
 8089bbe:	3001      	adds	r0, #1
 8089bc0:	f43f af51 	beq.w	8089a66 <_printf_float+0xc2>
 8089bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8089bc8:	429a      	cmp	r2, r3
 8089bca:	db02      	blt.n	8089bd2 <_printf_float+0x22e>
 8089bcc:	6823      	ldr	r3, [r4, #0]
 8089bce:	07d8      	lsls	r0, r3, #31
 8089bd0:	d510      	bpl.n	8089bf4 <_printf_float+0x250>
 8089bd2:	ee18 3a10 	vmov	r3, s16
 8089bd6:	4652      	mov	r2, sl
 8089bd8:	4631      	mov	r1, r6
 8089bda:	4628      	mov	r0, r5
 8089bdc:	47b8      	blx	r7
 8089bde:	3001      	adds	r0, #1
 8089be0:	f43f af41 	beq.w	8089a66 <_printf_float+0xc2>
 8089be4:	f04f 0800 	mov.w	r8, #0
 8089be8:	f104 091a 	add.w	r9, r4, #26
 8089bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089bee:	3b01      	subs	r3, #1
 8089bf0:	4543      	cmp	r3, r8
 8089bf2:	dc09      	bgt.n	8089c08 <_printf_float+0x264>
 8089bf4:	6823      	ldr	r3, [r4, #0]
 8089bf6:	079b      	lsls	r3, r3, #30
 8089bf8:	f100 8105 	bmi.w	8089e06 <_printf_float+0x462>
 8089bfc:	68e0      	ldr	r0, [r4, #12]
 8089bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8089c00:	4298      	cmp	r0, r3
 8089c02:	bfb8      	it	lt
 8089c04:	4618      	movlt	r0, r3
 8089c06:	e730      	b.n	8089a6a <_printf_float+0xc6>
 8089c08:	2301      	movs	r3, #1
 8089c0a:	464a      	mov	r2, r9
 8089c0c:	4631      	mov	r1, r6
 8089c0e:	4628      	mov	r0, r5
 8089c10:	47b8      	blx	r7
 8089c12:	3001      	adds	r0, #1
 8089c14:	f43f af27 	beq.w	8089a66 <_printf_float+0xc2>
 8089c18:	f108 0801 	add.w	r8, r8, #1
 8089c1c:	e7e6      	b.n	8089bec <_printf_float+0x248>
 8089c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089c20:	2b00      	cmp	r3, #0
 8089c22:	dc39      	bgt.n	8089c98 <_printf_float+0x2f4>
 8089c24:	4a1b      	ldr	r2, [pc, #108]	; (8089c94 <_printf_float+0x2f0>)
 8089c26:	2301      	movs	r3, #1
 8089c28:	4631      	mov	r1, r6
 8089c2a:	4628      	mov	r0, r5
 8089c2c:	47b8      	blx	r7
 8089c2e:	3001      	adds	r0, #1
 8089c30:	f43f af19 	beq.w	8089a66 <_printf_float+0xc2>
 8089c34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8089c38:	4313      	orrs	r3, r2
 8089c3a:	d102      	bne.n	8089c42 <_printf_float+0x29e>
 8089c3c:	6823      	ldr	r3, [r4, #0]
 8089c3e:	07d9      	lsls	r1, r3, #31
 8089c40:	d5d8      	bpl.n	8089bf4 <_printf_float+0x250>
 8089c42:	ee18 3a10 	vmov	r3, s16
 8089c46:	4652      	mov	r2, sl
 8089c48:	4631      	mov	r1, r6
 8089c4a:	4628      	mov	r0, r5
 8089c4c:	47b8      	blx	r7
 8089c4e:	3001      	adds	r0, #1
 8089c50:	f43f af09 	beq.w	8089a66 <_printf_float+0xc2>
 8089c54:	f04f 0900 	mov.w	r9, #0
 8089c58:	f104 0a1a 	add.w	sl, r4, #26
 8089c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8089c5e:	425b      	negs	r3, r3
 8089c60:	454b      	cmp	r3, r9
 8089c62:	dc01      	bgt.n	8089c68 <_printf_float+0x2c4>
 8089c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089c66:	e792      	b.n	8089b8e <_printf_float+0x1ea>
 8089c68:	2301      	movs	r3, #1
 8089c6a:	4652      	mov	r2, sl
 8089c6c:	4631      	mov	r1, r6
 8089c6e:	4628      	mov	r0, r5
 8089c70:	47b8      	blx	r7
 8089c72:	3001      	adds	r0, #1
 8089c74:	f43f aef7 	beq.w	8089a66 <_printf_float+0xc2>
 8089c78:	f109 0901 	add.w	r9, r9, #1
 8089c7c:	e7ee      	b.n	8089c5c <_printf_float+0x2b8>
 8089c7e:	bf00      	nop
 8089c80:	7fefffff 	.word	0x7fefffff
 8089c84:	0808cf1c 	.word	0x0808cf1c
 8089c88:	0808cf20 	.word	0x0808cf20
 8089c8c:	0808cf28 	.word	0x0808cf28
 8089c90:	0808cf24 	.word	0x0808cf24
 8089c94:	0808cf2c 	.word	0x0808cf2c
 8089c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8089c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8089c9c:	429a      	cmp	r2, r3
 8089c9e:	bfa8      	it	ge
 8089ca0:	461a      	movge	r2, r3
 8089ca2:	2a00      	cmp	r2, #0
 8089ca4:	4691      	mov	r9, r2
 8089ca6:	dc37      	bgt.n	8089d18 <_printf_float+0x374>
 8089ca8:	f04f 0b00 	mov.w	fp, #0
 8089cac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8089cb0:	f104 021a 	add.w	r2, r4, #26
 8089cb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8089cb6:	9305      	str	r3, [sp, #20]
 8089cb8:	eba3 0309 	sub.w	r3, r3, r9
 8089cbc:	455b      	cmp	r3, fp
 8089cbe:	dc33      	bgt.n	8089d28 <_printf_float+0x384>
 8089cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8089cc4:	429a      	cmp	r2, r3
 8089cc6:	db3b      	blt.n	8089d40 <_printf_float+0x39c>
 8089cc8:	6823      	ldr	r3, [r4, #0]
 8089cca:	07da      	lsls	r2, r3, #31
 8089ccc:	d438      	bmi.n	8089d40 <_printf_float+0x39c>
 8089cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089cd0:	9a05      	ldr	r2, [sp, #20]
 8089cd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089cd4:	1a9a      	subs	r2, r3, r2
 8089cd6:	eba3 0901 	sub.w	r9, r3, r1
 8089cda:	4591      	cmp	r9, r2
 8089cdc:	bfa8      	it	ge
 8089cde:	4691      	movge	r9, r2
 8089ce0:	f1b9 0f00 	cmp.w	r9, #0
 8089ce4:	dc35      	bgt.n	8089d52 <_printf_float+0x3ae>
 8089ce6:	f04f 0800 	mov.w	r8, #0
 8089cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8089cee:	f104 0a1a 	add.w	sl, r4, #26
 8089cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8089cf6:	1a9b      	subs	r3, r3, r2
 8089cf8:	eba3 0309 	sub.w	r3, r3, r9
 8089cfc:	4543      	cmp	r3, r8
 8089cfe:	f77f af79 	ble.w	8089bf4 <_printf_float+0x250>
 8089d02:	2301      	movs	r3, #1
 8089d04:	4652      	mov	r2, sl
 8089d06:	4631      	mov	r1, r6
 8089d08:	4628      	mov	r0, r5
 8089d0a:	47b8      	blx	r7
 8089d0c:	3001      	adds	r0, #1
 8089d0e:	f43f aeaa 	beq.w	8089a66 <_printf_float+0xc2>
 8089d12:	f108 0801 	add.w	r8, r8, #1
 8089d16:	e7ec      	b.n	8089cf2 <_printf_float+0x34e>
 8089d18:	4613      	mov	r3, r2
 8089d1a:	4631      	mov	r1, r6
 8089d1c:	4642      	mov	r2, r8
 8089d1e:	4628      	mov	r0, r5
 8089d20:	47b8      	blx	r7
 8089d22:	3001      	adds	r0, #1
 8089d24:	d1c0      	bne.n	8089ca8 <_printf_float+0x304>
 8089d26:	e69e      	b.n	8089a66 <_printf_float+0xc2>
 8089d28:	2301      	movs	r3, #1
 8089d2a:	4631      	mov	r1, r6
 8089d2c:	4628      	mov	r0, r5
 8089d2e:	9205      	str	r2, [sp, #20]
 8089d30:	47b8      	blx	r7
 8089d32:	3001      	adds	r0, #1
 8089d34:	f43f ae97 	beq.w	8089a66 <_printf_float+0xc2>
 8089d38:	9a05      	ldr	r2, [sp, #20]
 8089d3a:	f10b 0b01 	add.w	fp, fp, #1
 8089d3e:	e7b9      	b.n	8089cb4 <_printf_float+0x310>
 8089d40:	ee18 3a10 	vmov	r3, s16
 8089d44:	4652      	mov	r2, sl
 8089d46:	4631      	mov	r1, r6
 8089d48:	4628      	mov	r0, r5
 8089d4a:	47b8      	blx	r7
 8089d4c:	3001      	adds	r0, #1
 8089d4e:	d1be      	bne.n	8089cce <_printf_float+0x32a>
 8089d50:	e689      	b.n	8089a66 <_printf_float+0xc2>
 8089d52:	9a05      	ldr	r2, [sp, #20]
 8089d54:	464b      	mov	r3, r9
 8089d56:	4442      	add	r2, r8
 8089d58:	4631      	mov	r1, r6
 8089d5a:	4628      	mov	r0, r5
 8089d5c:	47b8      	blx	r7
 8089d5e:	3001      	adds	r0, #1
 8089d60:	d1c1      	bne.n	8089ce6 <_printf_float+0x342>
 8089d62:	e680      	b.n	8089a66 <_printf_float+0xc2>
 8089d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8089d66:	2a01      	cmp	r2, #1
 8089d68:	dc01      	bgt.n	8089d6e <_printf_float+0x3ca>
 8089d6a:	07db      	lsls	r3, r3, #31
 8089d6c:	d538      	bpl.n	8089de0 <_printf_float+0x43c>
 8089d6e:	2301      	movs	r3, #1
 8089d70:	4642      	mov	r2, r8
 8089d72:	4631      	mov	r1, r6
 8089d74:	4628      	mov	r0, r5
 8089d76:	47b8      	blx	r7
 8089d78:	3001      	adds	r0, #1
 8089d7a:	f43f ae74 	beq.w	8089a66 <_printf_float+0xc2>
 8089d7e:	ee18 3a10 	vmov	r3, s16
 8089d82:	4652      	mov	r2, sl
 8089d84:	4631      	mov	r1, r6
 8089d86:	4628      	mov	r0, r5
 8089d88:	47b8      	blx	r7
 8089d8a:	3001      	adds	r0, #1
 8089d8c:	f43f ae6b 	beq.w	8089a66 <_printf_float+0xc2>
 8089d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8089d94:	2200      	movs	r2, #0
 8089d96:	2300      	movs	r3, #0
 8089d98:	f7f6 fe96 	bl	8080ac8 <__aeabi_dcmpeq>
 8089d9c:	b9d8      	cbnz	r0, 8089dd6 <_printf_float+0x432>
 8089d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089da0:	f108 0201 	add.w	r2, r8, #1
 8089da4:	3b01      	subs	r3, #1
 8089da6:	4631      	mov	r1, r6
 8089da8:	4628      	mov	r0, r5
 8089daa:	47b8      	blx	r7
 8089dac:	3001      	adds	r0, #1
 8089dae:	d10e      	bne.n	8089dce <_printf_float+0x42a>
 8089db0:	e659      	b.n	8089a66 <_printf_float+0xc2>
 8089db2:	2301      	movs	r3, #1
 8089db4:	4652      	mov	r2, sl
 8089db6:	4631      	mov	r1, r6
 8089db8:	4628      	mov	r0, r5
 8089dba:	47b8      	blx	r7
 8089dbc:	3001      	adds	r0, #1
 8089dbe:	f43f ae52 	beq.w	8089a66 <_printf_float+0xc2>
 8089dc2:	f108 0801 	add.w	r8, r8, #1
 8089dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089dc8:	3b01      	subs	r3, #1
 8089dca:	4543      	cmp	r3, r8
 8089dcc:	dcf1      	bgt.n	8089db2 <_printf_float+0x40e>
 8089dce:	464b      	mov	r3, r9
 8089dd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8089dd4:	e6dc      	b.n	8089b90 <_printf_float+0x1ec>
 8089dd6:	f04f 0800 	mov.w	r8, #0
 8089dda:	f104 0a1a 	add.w	sl, r4, #26
 8089dde:	e7f2      	b.n	8089dc6 <_printf_float+0x422>
 8089de0:	2301      	movs	r3, #1
 8089de2:	4642      	mov	r2, r8
 8089de4:	e7df      	b.n	8089da6 <_printf_float+0x402>
 8089de6:	2301      	movs	r3, #1
 8089de8:	464a      	mov	r2, r9
 8089dea:	4631      	mov	r1, r6
 8089dec:	4628      	mov	r0, r5
 8089dee:	47b8      	blx	r7
 8089df0:	3001      	adds	r0, #1
 8089df2:	f43f ae38 	beq.w	8089a66 <_printf_float+0xc2>
 8089df6:	f108 0801 	add.w	r8, r8, #1
 8089dfa:	68e3      	ldr	r3, [r4, #12]
 8089dfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8089dfe:	1a5b      	subs	r3, r3, r1
 8089e00:	4543      	cmp	r3, r8
 8089e02:	dcf0      	bgt.n	8089de6 <_printf_float+0x442>
 8089e04:	e6fa      	b.n	8089bfc <_printf_float+0x258>
 8089e06:	f04f 0800 	mov.w	r8, #0
 8089e0a:	f104 0919 	add.w	r9, r4, #25
 8089e0e:	e7f4      	b.n	8089dfa <_printf_float+0x456>

08089e10 <_printf_common>:
 8089e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8089e14:	4616      	mov	r6, r2
 8089e16:	4699      	mov	r9, r3
 8089e18:	688a      	ldr	r2, [r1, #8]
 8089e1a:	690b      	ldr	r3, [r1, #16]
 8089e1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8089e20:	4293      	cmp	r3, r2
 8089e22:	bfb8      	it	lt
 8089e24:	4613      	movlt	r3, r2
 8089e26:	6033      	str	r3, [r6, #0]
 8089e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8089e2c:	4607      	mov	r7, r0
 8089e2e:	460c      	mov	r4, r1
 8089e30:	b10a      	cbz	r2, 8089e36 <_printf_common+0x26>
 8089e32:	3301      	adds	r3, #1
 8089e34:	6033      	str	r3, [r6, #0]
 8089e36:	6823      	ldr	r3, [r4, #0]
 8089e38:	0699      	lsls	r1, r3, #26
 8089e3a:	bf42      	ittt	mi
 8089e3c:	6833      	ldrmi	r3, [r6, #0]
 8089e3e:	3302      	addmi	r3, #2
 8089e40:	6033      	strmi	r3, [r6, #0]
 8089e42:	6825      	ldr	r5, [r4, #0]
 8089e44:	f015 0506 	ands.w	r5, r5, #6
 8089e48:	d106      	bne.n	8089e58 <_printf_common+0x48>
 8089e4a:	f104 0a19 	add.w	sl, r4, #25
 8089e4e:	68e3      	ldr	r3, [r4, #12]
 8089e50:	6832      	ldr	r2, [r6, #0]
 8089e52:	1a9b      	subs	r3, r3, r2
 8089e54:	42ab      	cmp	r3, r5
 8089e56:	dc26      	bgt.n	8089ea6 <_printf_common+0x96>
 8089e58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8089e5c:	1e13      	subs	r3, r2, #0
 8089e5e:	6822      	ldr	r2, [r4, #0]
 8089e60:	bf18      	it	ne
 8089e62:	2301      	movne	r3, #1
 8089e64:	0692      	lsls	r2, r2, #26
 8089e66:	d42b      	bmi.n	8089ec0 <_printf_common+0xb0>
 8089e68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8089e6c:	4649      	mov	r1, r9
 8089e6e:	4638      	mov	r0, r7
 8089e70:	47c0      	blx	r8
 8089e72:	3001      	adds	r0, #1
 8089e74:	d01e      	beq.n	8089eb4 <_printf_common+0xa4>
 8089e76:	6823      	ldr	r3, [r4, #0]
 8089e78:	68e5      	ldr	r5, [r4, #12]
 8089e7a:	6832      	ldr	r2, [r6, #0]
 8089e7c:	f003 0306 	and.w	r3, r3, #6
 8089e80:	2b04      	cmp	r3, #4
 8089e82:	bf08      	it	eq
 8089e84:	1aad      	subeq	r5, r5, r2
 8089e86:	68a3      	ldr	r3, [r4, #8]
 8089e88:	6922      	ldr	r2, [r4, #16]
 8089e8a:	bf0c      	ite	eq
 8089e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8089e90:	2500      	movne	r5, #0
 8089e92:	4293      	cmp	r3, r2
 8089e94:	bfc4      	itt	gt
 8089e96:	1a9b      	subgt	r3, r3, r2
 8089e98:	18ed      	addgt	r5, r5, r3
 8089e9a:	2600      	movs	r6, #0
 8089e9c:	341a      	adds	r4, #26
 8089e9e:	42b5      	cmp	r5, r6
 8089ea0:	d11a      	bne.n	8089ed8 <_printf_common+0xc8>
 8089ea2:	2000      	movs	r0, #0
 8089ea4:	e008      	b.n	8089eb8 <_printf_common+0xa8>
 8089ea6:	2301      	movs	r3, #1
 8089ea8:	4652      	mov	r2, sl
 8089eaa:	4649      	mov	r1, r9
 8089eac:	4638      	mov	r0, r7
 8089eae:	47c0      	blx	r8
 8089eb0:	3001      	adds	r0, #1
 8089eb2:	d103      	bne.n	8089ebc <_printf_common+0xac>
 8089eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8089eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089ebc:	3501      	adds	r5, #1
 8089ebe:	e7c6      	b.n	8089e4e <_printf_common+0x3e>
 8089ec0:	18e1      	adds	r1, r4, r3
 8089ec2:	1c5a      	adds	r2, r3, #1
 8089ec4:	2030      	movs	r0, #48	; 0x30
 8089ec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8089eca:	4422      	add	r2, r4
 8089ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8089ed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8089ed4:	3302      	adds	r3, #2
 8089ed6:	e7c7      	b.n	8089e68 <_printf_common+0x58>
 8089ed8:	2301      	movs	r3, #1
 8089eda:	4622      	mov	r2, r4
 8089edc:	4649      	mov	r1, r9
 8089ede:	4638      	mov	r0, r7
 8089ee0:	47c0      	blx	r8
 8089ee2:	3001      	adds	r0, #1
 8089ee4:	d0e6      	beq.n	8089eb4 <_printf_common+0xa4>
 8089ee6:	3601      	adds	r6, #1
 8089ee8:	e7d9      	b.n	8089e9e <_printf_common+0x8e>
	...

08089eec <_printf_i>:
 8089eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8089ef0:	7e0f      	ldrb	r7, [r1, #24]
 8089ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8089ef4:	2f78      	cmp	r7, #120	; 0x78
 8089ef6:	4691      	mov	r9, r2
 8089ef8:	4680      	mov	r8, r0
 8089efa:	460c      	mov	r4, r1
 8089efc:	469a      	mov	sl, r3
 8089efe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8089f02:	d807      	bhi.n	8089f14 <_printf_i+0x28>
 8089f04:	2f62      	cmp	r7, #98	; 0x62
 8089f06:	d80a      	bhi.n	8089f1e <_printf_i+0x32>
 8089f08:	2f00      	cmp	r7, #0
 8089f0a:	f000 80d8 	beq.w	808a0be <_printf_i+0x1d2>
 8089f0e:	2f58      	cmp	r7, #88	; 0x58
 8089f10:	f000 80a3 	beq.w	808a05a <_printf_i+0x16e>
 8089f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8089f18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8089f1c:	e03a      	b.n	8089f94 <_printf_i+0xa8>
 8089f1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8089f22:	2b15      	cmp	r3, #21
 8089f24:	d8f6      	bhi.n	8089f14 <_printf_i+0x28>
 8089f26:	a101      	add	r1, pc, #4	; (adr r1, 8089f2c <_printf_i+0x40>)
 8089f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8089f2c:	08089f85 	.word	0x08089f85
 8089f30:	08089f99 	.word	0x08089f99
 8089f34:	08089f15 	.word	0x08089f15
 8089f38:	08089f15 	.word	0x08089f15
 8089f3c:	08089f15 	.word	0x08089f15
 8089f40:	08089f15 	.word	0x08089f15
 8089f44:	08089f99 	.word	0x08089f99
 8089f48:	08089f15 	.word	0x08089f15
 8089f4c:	08089f15 	.word	0x08089f15
 8089f50:	08089f15 	.word	0x08089f15
 8089f54:	08089f15 	.word	0x08089f15
 8089f58:	0808a0a5 	.word	0x0808a0a5
 8089f5c:	08089fc9 	.word	0x08089fc9
 8089f60:	0808a087 	.word	0x0808a087
 8089f64:	08089f15 	.word	0x08089f15
 8089f68:	08089f15 	.word	0x08089f15
 8089f6c:	0808a0c7 	.word	0x0808a0c7
 8089f70:	08089f15 	.word	0x08089f15
 8089f74:	08089fc9 	.word	0x08089fc9
 8089f78:	08089f15 	.word	0x08089f15
 8089f7c:	08089f15 	.word	0x08089f15
 8089f80:	0808a08f 	.word	0x0808a08f
 8089f84:	682b      	ldr	r3, [r5, #0]
 8089f86:	1d1a      	adds	r2, r3, #4
 8089f88:	681b      	ldr	r3, [r3, #0]
 8089f8a:	602a      	str	r2, [r5, #0]
 8089f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8089f90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8089f94:	2301      	movs	r3, #1
 8089f96:	e0a3      	b.n	808a0e0 <_printf_i+0x1f4>
 8089f98:	6820      	ldr	r0, [r4, #0]
 8089f9a:	6829      	ldr	r1, [r5, #0]
 8089f9c:	0606      	lsls	r6, r0, #24
 8089f9e:	f101 0304 	add.w	r3, r1, #4
 8089fa2:	d50a      	bpl.n	8089fba <_printf_i+0xce>
 8089fa4:	680e      	ldr	r6, [r1, #0]
 8089fa6:	602b      	str	r3, [r5, #0]
 8089fa8:	2e00      	cmp	r6, #0
 8089faa:	da03      	bge.n	8089fb4 <_printf_i+0xc8>
 8089fac:	232d      	movs	r3, #45	; 0x2d
 8089fae:	4276      	negs	r6, r6
 8089fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8089fb4:	485e      	ldr	r0, [pc, #376]	; (808a130 <_printf_i+0x244>)
 8089fb6:	230a      	movs	r3, #10
 8089fb8:	e019      	b.n	8089fee <_printf_i+0x102>
 8089fba:	680e      	ldr	r6, [r1, #0]
 8089fbc:	602b      	str	r3, [r5, #0]
 8089fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8089fc2:	bf18      	it	ne
 8089fc4:	b236      	sxthne	r6, r6
 8089fc6:	e7ef      	b.n	8089fa8 <_printf_i+0xbc>
 8089fc8:	682b      	ldr	r3, [r5, #0]
 8089fca:	6820      	ldr	r0, [r4, #0]
 8089fcc:	1d19      	adds	r1, r3, #4
 8089fce:	6029      	str	r1, [r5, #0]
 8089fd0:	0601      	lsls	r1, r0, #24
 8089fd2:	d501      	bpl.n	8089fd8 <_printf_i+0xec>
 8089fd4:	681e      	ldr	r6, [r3, #0]
 8089fd6:	e002      	b.n	8089fde <_printf_i+0xf2>
 8089fd8:	0646      	lsls	r6, r0, #25
 8089fda:	d5fb      	bpl.n	8089fd4 <_printf_i+0xe8>
 8089fdc:	881e      	ldrh	r6, [r3, #0]
 8089fde:	4854      	ldr	r0, [pc, #336]	; (808a130 <_printf_i+0x244>)
 8089fe0:	2f6f      	cmp	r7, #111	; 0x6f
 8089fe2:	bf0c      	ite	eq
 8089fe4:	2308      	moveq	r3, #8
 8089fe6:	230a      	movne	r3, #10
 8089fe8:	2100      	movs	r1, #0
 8089fea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8089fee:	6865      	ldr	r5, [r4, #4]
 8089ff0:	60a5      	str	r5, [r4, #8]
 8089ff2:	2d00      	cmp	r5, #0
 8089ff4:	bfa2      	ittt	ge
 8089ff6:	6821      	ldrge	r1, [r4, #0]
 8089ff8:	f021 0104 	bicge.w	r1, r1, #4
 8089ffc:	6021      	strge	r1, [r4, #0]
 8089ffe:	b90e      	cbnz	r6, 808a004 <_printf_i+0x118>
 808a000:	2d00      	cmp	r5, #0
 808a002:	d04d      	beq.n	808a0a0 <_printf_i+0x1b4>
 808a004:	4615      	mov	r5, r2
 808a006:	fbb6 f1f3 	udiv	r1, r6, r3
 808a00a:	fb03 6711 	mls	r7, r3, r1, r6
 808a00e:	5dc7      	ldrb	r7, [r0, r7]
 808a010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 808a014:	4637      	mov	r7, r6
 808a016:	42bb      	cmp	r3, r7
 808a018:	460e      	mov	r6, r1
 808a01a:	d9f4      	bls.n	808a006 <_printf_i+0x11a>
 808a01c:	2b08      	cmp	r3, #8
 808a01e:	d10b      	bne.n	808a038 <_printf_i+0x14c>
 808a020:	6823      	ldr	r3, [r4, #0]
 808a022:	07de      	lsls	r6, r3, #31
 808a024:	d508      	bpl.n	808a038 <_printf_i+0x14c>
 808a026:	6923      	ldr	r3, [r4, #16]
 808a028:	6861      	ldr	r1, [r4, #4]
 808a02a:	4299      	cmp	r1, r3
 808a02c:	bfde      	ittt	le
 808a02e:	2330      	movle	r3, #48	; 0x30
 808a030:	f805 3c01 	strble.w	r3, [r5, #-1]
 808a034:	f105 35ff 	addle.w	r5, r5, #4294967295
 808a038:	1b52      	subs	r2, r2, r5
 808a03a:	6122      	str	r2, [r4, #16]
 808a03c:	f8cd a000 	str.w	sl, [sp]
 808a040:	464b      	mov	r3, r9
 808a042:	aa03      	add	r2, sp, #12
 808a044:	4621      	mov	r1, r4
 808a046:	4640      	mov	r0, r8
 808a048:	f7ff fee2 	bl	8089e10 <_printf_common>
 808a04c:	3001      	adds	r0, #1
 808a04e:	d14c      	bne.n	808a0ea <_printf_i+0x1fe>
 808a050:	f04f 30ff 	mov.w	r0, #4294967295
 808a054:	b004      	add	sp, #16
 808a056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a05a:	4835      	ldr	r0, [pc, #212]	; (808a130 <_printf_i+0x244>)
 808a05c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 808a060:	6829      	ldr	r1, [r5, #0]
 808a062:	6823      	ldr	r3, [r4, #0]
 808a064:	f851 6b04 	ldr.w	r6, [r1], #4
 808a068:	6029      	str	r1, [r5, #0]
 808a06a:	061d      	lsls	r5, r3, #24
 808a06c:	d514      	bpl.n	808a098 <_printf_i+0x1ac>
 808a06e:	07df      	lsls	r7, r3, #31
 808a070:	bf44      	itt	mi
 808a072:	f043 0320 	orrmi.w	r3, r3, #32
 808a076:	6023      	strmi	r3, [r4, #0]
 808a078:	b91e      	cbnz	r6, 808a082 <_printf_i+0x196>
 808a07a:	6823      	ldr	r3, [r4, #0]
 808a07c:	f023 0320 	bic.w	r3, r3, #32
 808a080:	6023      	str	r3, [r4, #0]
 808a082:	2310      	movs	r3, #16
 808a084:	e7b0      	b.n	8089fe8 <_printf_i+0xfc>
 808a086:	6823      	ldr	r3, [r4, #0]
 808a088:	f043 0320 	orr.w	r3, r3, #32
 808a08c:	6023      	str	r3, [r4, #0]
 808a08e:	2378      	movs	r3, #120	; 0x78
 808a090:	4828      	ldr	r0, [pc, #160]	; (808a134 <_printf_i+0x248>)
 808a092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 808a096:	e7e3      	b.n	808a060 <_printf_i+0x174>
 808a098:	0659      	lsls	r1, r3, #25
 808a09a:	bf48      	it	mi
 808a09c:	b2b6      	uxthmi	r6, r6
 808a09e:	e7e6      	b.n	808a06e <_printf_i+0x182>
 808a0a0:	4615      	mov	r5, r2
 808a0a2:	e7bb      	b.n	808a01c <_printf_i+0x130>
 808a0a4:	682b      	ldr	r3, [r5, #0]
 808a0a6:	6826      	ldr	r6, [r4, #0]
 808a0a8:	6961      	ldr	r1, [r4, #20]
 808a0aa:	1d18      	adds	r0, r3, #4
 808a0ac:	6028      	str	r0, [r5, #0]
 808a0ae:	0635      	lsls	r5, r6, #24
 808a0b0:	681b      	ldr	r3, [r3, #0]
 808a0b2:	d501      	bpl.n	808a0b8 <_printf_i+0x1cc>
 808a0b4:	6019      	str	r1, [r3, #0]
 808a0b6:	e002      	b.n	808a0be <_printf_i+0x1d2>
 808a0b8:	0670      	lsls	r0, r6, #25
 808a0ba:	d5fb      	bpl.n	808a0b4 <_printf_i+0x1c8>
 808a0bc:	8019      	strh	r1, [r3, #0]
 808a0be:	2300      	movs	r3, #0
 808a0c0:	6123      	str	r3, [r4, #16]
 808a0c2:	4615      	mov	r5, r2
 808a0c4:	e7ba      	b.n	808a03c <_printf_i+0x150>
 808a0c6:	682b      	ldr	r3, [r5, #0]
 808a0c8:	1d1a      	adds	r2, r3, #4
 808a0ca:	602a      	str	r2, [r5, #0]
 808a0cc:	681d      	ldr	r5, [r3, #0]
 808a0ce:	6862      	ldr	r2, [r4, #4]
 808a0d0:	2100      	movs	r1, #0
 808a0d2:	4628      	mov	r0, r5
 808a0d4:	f7f6 f884 	bl	80801e0 <memchr>
 808a0d8:	b108      	cbz	r0, 808a0de <_printf_i+0x1f2>
 808a0da:	1b40      	subs	r0, r0, r5
 808a0dc:	6060      	str	r0, [r4, #4]
 808a0de:	6863      	ldr	r3, [r4, #4]
 808a0e0:	6123      	str	r3, [r4, #16]
 808a0e2:	2300      	movs	r3, #0
 808a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 808a0e8:	e7a8      	b.n	808a03c <_printf_i+0x150>
 808a0ea:	6923      	ldr	r3, [r4, #16]
 808a0ec:	462a      	mov	r2, r5
 808a0ee:	4649      	mov	r1, r9
 808a0f0:	4640      	mov	r0, r8
 808a0f2:	47d0      	blx	sl
 808a0f4:	3001      	adds	r0, #1
 808a0f6:	d0ab      	beq.n	808a050 <_printf_i+0x164>
 808a0f8:	6823      	ldr	r3, [r4, #0]
 808a0fa:	079b      	lsls	r3, r3, #30
 808a0fc:	d413      	bmi.n	808a126 <_printf_i+0x23a>
 808a0fe:	68e0      	ldr	r0, [r4, #12]
 808a100:	9b03      	ldr	r3, [sp, #12]
 808a102:	4298      	cmp	r0, r3
 808a104:	bfb8      	it	lt
 808a106:	4618      	movlt	r0, r3
 808a108:	e7a4      	b.n	808a054 <_printf_i+0x168>
 808a10a:	2301      	movs	r3, #1
 808a10c:	4632      	mov	r2, r6
 808a10e:	4649      	mov	r1, r9
 808a110:	4640      	mov	r0, r8
 808a112:	47d0      	blx	sl
 808a114:	3001      	adds	r0, #1
 808a116:	d09b      	beq.n	808a050 <_printf_i+0x164>
 808a118:	3501      	adds	r5, #1
 808a11a:	68e3      	ldr	r3, [r4, #12]
 808a11c:	9903      	ldr	r1, [sp, #12]
 808a11e:	1a5b      	subs	r3, r3, r1
 808a120:	42ab      	cmp	r3, r5
 808a122:	dcf2      	bgt.n	808a10a <_printf_i+0x21e>
 808a124:	e7eb      	b.n	808a0fe <_printf_i+0x212>
 808a126:	2500      	movs	r5, #0
 808a128:	f104 0619 	add.w	r6, r4, #25
 808a12c:	e7f5      	b.n	808a11a <_printf_i+0x22e>
 808a12e:	bf00      	nop
 808a130:	0808cf2e 	.word	0x0808cf2e
 808a134:	0808cf3f 	.word	0x0808cf3f

0808a138 <iprintf>:
 808a138:	b40f      	push	{r0, r1, r2, r3}
 808a13a:	4b0a      	ldr	r3, [pc, #40]	; (808a164 <iprintf+0x2c>)
 808a13c:	b513      	push	{r0, r1, r4, lr}
 808a13e:	681c      	ldr	r4, [r3, #0]
 808a140:	b124      	cbz	r4, 808a14c <iprintf+0x14>
 808a142:	69a3      	ldr	r3, [r4, #24]
 808a144:	b913      	cbnz	r3, 808a14c <iprintf+0x14>
 808a146:	4620      	mov	r0, r4
 808a148:	f001 f824 	bl	808b194 <__sinit>
 808a14c:	ab05      	add	r3, sp, #20
 808a14e:	9a04      	ldr	r2, [sp, #16]
 808a150:	68a1      	ldr	r1, [r4, #8]
 808a152:	9301      	str	r3, [sp, #4]
 808a154:	4620      	mov	r0, r4
 808a156:	f001 fedd 	bl	808bf14 <_vfiprintf_r>
 808a15a:	b002      	add	sp, #8
 808a15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808a160:	b004      	add	sp, #16
 808a162:	4770      	bx	lr
 808a164:	20000090 	.word	0x20000090

0808a168 <siprintf>:
 808a168:	b40e      	push	{r1, r2, r3}
 808a16a:	b500      	push	{lr}
 808a16c:	b09c      	sub	sp, #112	; 0x70
 808a16e:	ab1d      	add	r3, sp, #116	; 0x74
 808a170:	9002      	str	r0, [sp, #8]
 808a172:	9006      	str	r0, [sp, #24]
 808a174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 808a178:	4809      	ldr	r0, [pc, #36]	; (808a1a0 <siprintf+0x38>)
 808a17a:	9107      	str	r1, [sp, #28]
 808a17c:	9104      	str	r1, [sp, #16]
 808a17e:	4909      	ldr	r1, [pc, #36]	; (808a1a4 <siprintf+0x3c>)
 808a180:	f853 2b04 	ldr.w	r2, [r3], #4
 808a184:	9105      	str	r1, [sp, #20]
 808a186:	6800      	ldr	r0, [r0, #0]
 808a188:	9301      	str	r3, [sp, #4]
 808a18a:	a902      	add	r1, sp, #8
 808a18c:	f001 fd98 	bl	808bcc0 <_svfiprintf_r>
 808a190:	9b02      	ldr	r3, [sp, #8]
 808a192:	2200      	movs	r2, #0
 808a194:	701a      	strb	r2, [r3, #0]
 808a196:	b01c      	add	sp, #112	; 0x70
 808a198:	f85d eb04 	ldr.w	lr, [sp], #4
 808a19c:	b003      	add	sp, #12
 808a19e:	4770      	bx	lr
 808a1a0:	20000090 	.word	0x20000090
 808a1a4:	ffff0208 	.word	0xffff0208

0808a1a8 <strcpy>:
 808a1a8:	4603      	mov	r3, r0
 808a1aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 808a1ae:	f803 2b01 	strb.w	r2, [r3], #1
 808a1b2:	2a00      	cmp	r2, #0
 808a1b4:	d1f9      	bne.n	808a1aa <strcpy+0x2>
 808a1b6:	4770      	bx	lr

0808a1b8 <strstr>:
 808a1b8:	780a      	ldrb	r2, [r1, #0]
 808a1ba:	b570      	push	{r4, r5, r6, lr}
 808a1bc:	b96a      	cbnz	r2, 808a1da <strstr+0x22>
 808a1be:	bd70      	pop	{r4, r5, r6, pc}
 808a1c0:	429a      	cmp	r2, r3
 808a1c2:	d109      	bne.n	808a1d8 <strstr+0x20>
 808a1c4:	460c      	mov	r4, r1
 808a1c6:	4605      	mov	r5, r0
 808a1c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 808a1cc:	2b00      	cmp	r3, #0
 808a1ce:	d0f6      	beq.n	808a1be <strstr+0x6>
 808a1d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 808a1d4:	429e      	cmp	r6, r3
 808a1d6:	d0f7      	beq.n	808a1c8 <strstr+0x10>
 808a1d8:	3001      	adds	r0, #1
 808a1da:	7803      	ldrb	r3, [r0, #0]
 808a1dc:	2b00      	cmp	r3, #0
 808a1de:	d1ef      	bne.n	808a1c0 <strstr+0x8>
 808a1e0:	4618      	mov	r0, r3
 808a1e2:	e7ec      	b.n	808a1be <strstr+0x6>

0808a1e4 <strtok>:
 808a1e4:	4b16      	ldr	r3, [pc, #88]	; (808a240 <strtok+0x5c>)
 808a1e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808a1e8:	681e      	ldr	r6, [r3, #0]
 808a1ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 808a1ec:	4605      	mov	r5, r0
 808a1ee:	b9fc      	cbnz	r4, 808a230 <strtok+0x4c>
 808a1f0:	2050      	movs	r0, #80	; 0x50
 808a1f2:	9101      	str	r1, [sp, #4]
 808a1f4:	f001 f886 	bl	808b304 <malloc>
 808a1f8:	9901      	ldr	r1, [sp, #4]
 808a1fa:	65b0      	str	r0, [r6, #88]	; 0x58
 808a1fc:	4602      	mov	r2, r0
 808a1fe:	b920      	cbnz	r0, 808a20a <strtok+0x26>
 808a200:	4b10      	ldr	r3, [pc, #64]	; (808a244 <strtok+0x60>)
 808a202:	4811      	ldr	r0, [pc, #68]	; (808a248 <strtok+0x64>)
 808a204:	2157      	movs	r1, #87	; 0x57
 808a206:	f000 f8d5 	bl	808a3b4 <__assert_func>
 808a20a:	e9c0 4400 	strd	r4, r4, [r0]
 808a20e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 808a212:	e9c0 4404 	strd	r4, r4, [r0, #16]
 808a216:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 808a21a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 808a21e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 808a222:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 808a226:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 808a22a:	6184      	str	r4, [r0, #24]
 808a22c:	7704      	strb	r4, [r0, #28]
 808a22e:	6244      	str	r4, [r0, #36]	; 0x24
 808a230:	6db2      	ldr	r2, [r6, #88]	; 0x58
 808a232:	2301      	movs	r3, #1
 808a234:	4628      	mov	r0, r5
 808a236:	b002      	add	sp, #8
 808a238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808a23c:	f000 b806 	b.w	808a24c <__strtok_r>
 808a240:	20000090 	.word	0x20000090
 808a244:	0808cf50 	.word	0x0808cf50
 808a248:	0808cf67 	.word	0x0808cf67

0808a24c <__strtok_r>:
 808a24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a24e:	b908      	cbnz	r0, 808a254 <__strtok_r+0x8>
 808a250:	6810      	ldr	r0, [r2, #0]
 808a252:	b188      	cbz	r0, 808a278 <__strtok_r+0x2c>
 808a254:	4604      	mov	r4, r0
 808a256:	4620      	mov	r0, r4
 808a258:	f814 5b01 	ldrb.w	r5, [r4], #1
 808a25c:	460f      	mov	r7, r1
 808a25e:	f817 6b01 	ldrb.w	r6, [r7], #1
 808a262:	b91e      	cbnz	r6, 808a26c <__strtok_r+0x20>
 808a264:	b965      	cbnz	r5, 808a280 <__strtok_r+0x34>
 808a266:	6015      	str	r5, [r2, #0]
 808a268:	4628      	mov	r0, r5
 808a26a:	e005      	b.n	808a278 <__strtok_r+0x2c>
 808a26c:	42b5      	cmp	r5, r6
 808a26e:	d1f6      	bne.n	808a25e <__strtok_r+0x12>
 808a270:	2b00      	cmp	r3, #0
 808a272:	d1f0      	bne.n	808a256 <__strtok_r+0xa>
 808a274:	6014      	str	r4, [r2, #0]
 808a276:	7003      	strb	r3, [r0, #0]
 808a278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a27a:	461c      	mov	r4, r3
 808a27c:	e00c      	b.n	808a298 <__strtok_r+0x4c>
 808a27e:	b915      	cbnz	r5, 808a286 <__strtok_r+0x3a>
 808a280:	f814 3b01 	ldrb.w	r3, [r4], #1
 808a284:	460e      	mov	r6, r1
 808a286:	f816 5b01 	ldrb.w	r5, [r6], #1
 808a28a:	42ab      	cmp	r3, r5
 808a28c:	d1f7      	bne.n	808a27e <__strtok_r+0x32>
 808a28e:	2b00      	cmp	r3, #0
 808a290:	d0f3      	beq.n	808a27a <__strtok_r+0x2e>
 808a292:	2300      	movs	r3, #0
 808a294:	f804 3c01 	strb.w	r3, [r4, #-1]
 808a298:	6014      	str	r4, [r2, #0]
 808a29a:	e7ed      	b.n	808a278 <__strtok_r+0x2c>

0808a29c <_strtol_l.constprop.0>:
 808a29c:	2b01      	cmp	r3, #1
 808a29e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808a2a2:	d001      	beq.n	808a2a8 <_strtol_l.constprop.0+0xc>
 808a2a4:	2b24      	cmp	r3, #36	; 0x24
 808a2a6:	d906      	bls.n	808a2b6 <_strtol_l.constprop.0+0x1a>
 808a2a8:	f7ff fa9c 	bl	80897e4 <__errno>
 808a2ac:	2316      	movs	r3, #22
 808a2ae:	6003      	str	r3, [r0, #0]
 808a2b0:	2000      	movs	r0, #0
 808a2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808a2b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 808a39c <_strtol_l.constprop.0+0x100>
 808a2ba:	460d      	mov	r5, r1
 808a2bc:	462e      	mov	r6, r5
 808a2be:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a2c2:	f814 700c 	ldrb.w	r7, [r4, ip]
 808a2c6:	f017 0708 	ands.w	r7, r7, #8
 808a2ca:	d1f7      	bne.n	808a2bc <_strtol_l.constprop.0+0x20>
 808a2cc:	2c2d      	cmp	r4, #45	; 0x2d
 808a2ce:	d132      	bne.n	808a336 <_strtol_l.constprop.0+0x9a>
 808a2d0:	782c      	ldrb	r4, [r5, #0]
 808a2d2:	2701      	movs	r7, #1
 808a2d4:	1cb5      	adds	r5, r6, #2
 808a2d6:	2b00      	cmp	r3, #0
 808a2d8:	d05b      	beq.n	808a392 <_strtol_l.constprop.0+0xf6>
 808a2da:	2b10      	cmp	r3, #16
 808a2dc:	d109      	bne.n	808a2f2 <_strtol_l.constprop.0+0x56>
 808a2de:	2c30      	cmp	r4, #48	; 0x30
 808a2e0:	d107      	bne.n	808a2f2 <_strtol_l.constprop.0+0x56>
 808a2e2:	782c      	ldrb	r4, [r5, #0]
 808a2e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 808a2e8:	2c58      	cmp	r4, #88	; 0x58
 808a2ea:	d14d      	bne.n	808a388 <_strtol_l.constprop.0+0xec>
 808a2ec:	786c      	ldrb	r4, [r5, #1]
 808a2ee:	2310      	movs	r3, #16
 808a2f0:	3502      	adds	r5, #2
 808a2f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 808a2f6:	f108 38ff 	add.w	r8, r8, #4294967295
 808a2fa:	f04f 0c00 	mov.w	ip, #0
 808a2fe:	fbb8 f9f3 	udiv	r9, r8, r3
 808a302:	4666      	mov	r6, ip
 808a304:	fb03 8a19 	mls	sl, r3, r9, r8
 808a308:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 808a30c:	f1be 0f09 	cmp.w	lr, #9
 808a310:	d816      	bhi.n	808a340 <_strtol_l.constprop.0+0xa4>
 808a312:	4674      	mov	r4, lr
 808a314:	42a3      	cmp	r3, r4
 808a316:	dd24      	ble.n	808a362 <_strtol_l.constprop.0+0xc6>
 808a318:	f1bc 0f00 	cmp.w	ip, #0
 808a31c:	db1e      	blt.n	808a35c <_strtol_l.constprop.0+0xc0>
 808a31e:	45b1      	cmp	r9, r6
 808a320:	d31c      	bcc.n	808a35c <_strtol_l.constprop.0+0xc0>
 808a322:	d101      	bne.n	808a328 <_strtol_l.constprop.0+0x8c>
 808a324:	45a2      	cmp	sl, r4
 808a326:	db19      	blt.n	808a35c <_strtol_l.constprop.0+0xc0>
 808a328:	fb06 4603 	mla	r6, r6, r3, r4
 808a32c:	f04f 0c01 	mov.w	ip, #1
 808a330:	f815 4b01 	ldrb.w	r4, [r5], #1
 808a334:	e7e8      	b.n	808a308 <_strtol_l.constprop.0+0x6c>
 808a336:	2c2b      	cmp	r4, #43	; 0x2b
 808a338:	bf04      	itt	eq
 808a33a:	782c      	ldrbeq	r4, [r5, #0]
 808a33c:	1cb5      	addeq	r5, r6, #2
 808a33e:	e7ca      	b.n	808a2d6 <_strtol_l.constprop.0+0x3a>
 808a340:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 808a344:	f1be 0f19 	cmp.w	lr, #25
 808a348:	d801      	bhi.n	808a34e <_strtol_l.constprop.0+0xb2>
 808a34a:	3c37      	subs	r4, #55	; 0x37
 808a34c:	e7e2      	b.n	808a314 <_strtol_l.constprop.0+0x78>
 808a34e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 808a352:	f1be 0f19 	cmp.w	lr, #25
 808a356:	d804      	bhi.n	808a362 <_strtol_l.constprop.0+0xc6>
 808a358:	3c57      	subs	r4, #87	; 0x57
 808a35a:	e7db      	b.n	808a314 <_strtol_l.constprop.0+0x78>
 808a35c:	f04f 3cff 	mov.w	ip, #4294967295
 808a360:	e7e6      	b.n	808a330 <_strtol_l.constprop.0+0x94>
 808a362:	f1bc 0f00 	cmp.w	ip, #0
 808a366:	da05      	bge.n	808a374 <_strtol_l.constprop.0+0xd8>
 808a368:	2322      	movs	r3, #34	; 0x22
 808a36a:	6003      	str	r3, [r0, #0]
 808a36c:	4646      	mov	r6, r8
 808a36e:	b942      	cbnz	r2, 808a382 <_strtol_l.constprop.0+0xe6>
 808a370:	4630      	mov	r0, r6
 808a372:	e79e      	b.n	808a2b2 <_strtol_l.constprop.0+0x16>
 808a374:	b107      	cbz	r7, 808a378 <_strtol_l.constprop.0+0xdc>
 808a376:	4276      	negs	r6, r6
 808a378:	2a00      	cmp	r2, #0
 808a37a:	d0f9      	beq.n	808a370 <_strtol_l.constprop.0+0xd4>
 808a37c:	f1bc 0f00 	cmp.w	ip, #0
 808a380:	d000      	beq.n	808a384 <_strtol_l.constprop.0+0xe8>
 808a382:	1e69      	subs	r1, r5, #1
 808a384:	6011      	str	r1, [r2, #0]
 808a386:	e7f3      	b.n	808a370 <_strtol_l.constprop.0+0xd4>
 808a388:	2430      	movs	r4, #48	; 0x30
 808a38a:	2b00      	cmp	r3, #0
 808a38c:	d1b1      	bne.n	808a2f2 <_strtol_l.constprop.0+0x56>
 808a38e:	2308      	movs	r3, #8
 808a390:	e7af      	b.n	808a2f2 <_strtol_l.constprop.0+0x56>
 808a392:	2c30      	cmp	r4, #48	; 0x30
 808a394:	d0a5      	beq.n	808a2e2 <_strtol_l.constprop.0+0x46>
 808a396:	230a      	movs	r3, #10
 808a398:	e7ab      	b.n	808a2f2 <_strtol_l.constprop.0+0x56>
 808a39a:	bf00      	nop
 808a39c:	0808d001 	.word	0x0808d001

0808a3a0 <strtol>:
 808a3a0:	4613      	mov	r3, r2
 808a3a2:	460a      	mov	r2, r1
 808a3a4:	4601      	mov	r1, r0
 808a3a6:	4802      	ldr	r0, [pc, #8]	; (808a3b0 <strtol+0x10>)
 808a3a8:	6800      	ldr	r0, [r0, #0]
 808a3aa:	f7ff bf77 	b.w	808a29c <_strtol_l.constprop.0>
 808a3ae:	bf00      	nop
 808a3b0:	20000090 	.word	0x20000090

0808a3b4 <__assert_func>:
 808a3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 808a3b6:	4614      	mov	r4, r2
 808a3b8:	461a      	mov	r2, r3
 808a3ba:	4b09      	ldr	r3, [pc, #36]	; (808a3e0 <__assert_func+0x2c>)
 808a3bc:	681b      	ldr	r3, [r3, #0]
 808a3be:	4605      	mov	r5, r0
 808a3c0:	68d8      	ldr	r0, [r3, #12]
 808a3c2:	b14c      	cbz	r4, 808a3d8 <__assert_func+0x24>
 808a3c4:	4b07      	ldr	r3, [pc, #28]	; (808a3e4 <__assert_func+0x30>)
 808a3c6:	9100      	str	r1, [sp, #0]
 808a3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 808a3cc:	4906      	ldr	r1, [pc, #24]	; (808a3e8 <__assert_func+0x34>)
 808a3ce:	462b      	mov	r3, r5
 808a3d0:	f000 ff5e 	bl	808b290 <fiprintf>
 808a3d4:	f001 fff4 	bl	808c3c0 <abort>
 808a3d8:	4b04      	ldr	r3, [pc, #16]	; (808a3ec <__assert_func+0x38>)
 808a3da:	461c      	mov	r4, r3
 808a3dc:	e7f3      	b.n	808a3c6 <__assert_func+0x12>
 808a3de:	bf00      	nop
 808a3e0:	20000090 	.word	0x20000090
 808a3e4:	0808cfc4 	.word	0x0808cfc4
 808a3e8:	0808cfd1 	.word	0x0808cfd1
 808a3ec:	0808cfff 	.word	0x0808cfff

0808a3f0 <quorem>:
 808a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a3f4:	6903      	ldr	r3, [r0, #16]
 808a3f6:	690c      	ldr	r4, [r1, #16]
 808a3f8:	42a3      	cmp	r3, r4
 808a3fa:	4607      	mov	r7, r0
 808a3fc:	f2c0 8081 	blt.w	808a502 <quorem+0x112>
 808a400:	3c01      	subs	r4, #1
 808a402:	f101 0814 	add.w	r8, r1, #20
 808a406:	f100 0514 	add.w	r5, r0, #20
 808a40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 808a40e:	9301      	str	r3, [sp, #4]
 808a410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 808a414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 808a418:	3301      	adds	r3, #1
 808a41a:	429a      	cmp	r2, r3
 808a41c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 808a420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 808a424:	fbb2 f6f3 	udiv	r6, r2, r3
 808a428:	d331      	bcc.n	808a48e <quorem+0x9e>
 808a42a:	f04f 0e00 	mov.w	lr, #0
 808a42e:	4640      	mov	r0, r8
 808a430:	46ac      	mov	ip, r5
 808a432:	46f2      	mov	sl, lr
 808a434:	f850 2b04 	ldr.w	r2, [r0], #4
 808a438:	b293      	uxth	r3, r2
 808a43a:	fb06 e303 	mla	r3, r6, r3, lr
 808a43e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 808a442:	b29b      	uxth	r3, r3
 808a444:	ebaa 0303 	sub.w	r3, sl, r3
 808a448:	f8dc a000 	ldr.w	sl, [ip]
 808a44c:	0c12      	lsrs	r2, r2, #16
 808a44e:	fa13 f38a 	uxtah	r3, r3, sl
 808a452:	fb06 e202 	mla	r2, r6, r2, lr
 808a456:	9300      	str	r3, [sp, #0]
 808a458:	9b00      	ldr	r3, [sp, #0]
 808a45a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 808a45e:	b292      	uxth	r2, r2
 808a460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 808a464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808a468:	f8bd 3000 	ldrh.w	r3, [sp]
 808a46c:	4581      	cmp	r9, r0
 808a46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 808a472:	f84c 3b04 	str.w	r3, [ip], #4
 808a476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 808a47a:	d2db      	bcs.n	808a434 <quorem+0x44>
 808a47c:	f855 300b 	ldr.w	r3, [r5, fp]
 808a480:	b92b      	cbnz	r3, 808a48e <quorem+0x9e>
 808a482:	9b01      	ldr	r3, [sp, #4]
 808a484:	3b04      	subs	r3, #4
 808a486:	429d      	cmp	r5, r3
 808a488:	461a      	mov	r2, r3
 808a48a:	d32e      	bcc.n	808a4ea <quorem+0xfa>
 808a48c:	613c      	str	r4, [r7, #16]
 808a48e:	4638      	mov	r0, r7
 808a490:	f001 f9c2 	bl	808b818 <__mcmp>
 808a494:	2800      	cmp	r0, #0
 808a496:	db24      	blt.n	808a4e2 <quorem+0xf2>
 808a498:	3601      	adds	r6, #1
 808a49a:	4628      	mov	r0, r5
 808a49c:	f04f 0c00 	mov.w	ip, #0
 808a4a0:	f858 2b04 	ldr.w	r2, [r8], #4
 808a4a4:	f8d0 e000 	ldr.w	lr, [r0]
 808a4a8:	b293      	uxth	r3, r2
 808a4aa:	ebac 0303 	sub.w	r3, ip, r3
 808a4ae:	0c12      	lsrs	r2, r2, #16
 808a4b0:	fa13 f38e 	uxtah	r3, r3, lr
 808a4b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 808a4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808a4bc:	b29b      	uxth	r3, r3
 808a4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 808a4c2:	45c1      	cmp	r9, r8
 808a4c4:	f840 3b04 	str.w	r3, [r0], #4
 808a4c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808a4cc:	d2e8      	bcs.n	808a4a0 <quorem+0xb0>
 808a4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 808a4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 808a4d6:	b922      	cbnz	r2, 808a4e2 <quorem+0xf2>
 808a4d8:	3b04      	subs	r3, #4
 808a4da:	429d      	cmp	r5, r3
 808a4dc:	461a      	mov	r2, r3
 808a4de:	d30a      	bcc.n	808a4f6 <quorem+0x106>
 808a4e0:	613c      	str	r4, [r7, #16]
 808a4e2:	4630      	mov	r0, r6
 808a4e4:	b003      	add	sp, #12
 808a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a4ea:	6812      	ldr	r2, [r2, #0]
 808a4ec:	3b04      	subs	r3, #4
 808a4ee:	2a00      	cmp	r2, #0
 808a4f0:	d1cc      	bne.n	808a48c <quorem+0x9c>
 808a4f2:	3c01      	subs	r4, #1
 808a4f4:	e7c7      	b.n	808a486 <quorem+0x96>
 808a4f6:	6812      	ldr	r2, [r2, #0]
 808a4f8:	3b04      	subs	r3, #4
 808a4fa:	2a00      	cmp	r2, #0
 808a4fc:	d1f0      	bne.n	808a4e0 <quorem+0xf0>
 808a4fe:	3c01      	subs	r4, #1
 808a500:	e7eb      	b.n	808a4da <quorem+0xea>
 808a502:	2000      	movs	r0, #0
 808a504:	e7ee      	b.n	808a4e4 <quorem+0xf4>
	...

0808a508 <_dtoa_r>:
 808a508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808a50c:	ed2d 8b04 	vpush	{d8-d9}
 808a510:	ec57 6b10 	vmov	r6, r7, d0
 808a514:	b093      	sub	sp, #76	; 0x4c
 808a516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808a518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 808a51c:	9106      	str	r1, [sp, #24]
 808a51e:	ee10 aa10 	vmov	sl, s0
 808a522:	4604      	mov	r4, r0
 808a524:	9209      	str	r2, [sp, #36]	; 0x24
 808a526:	930c      	str	r3, [sp, #48]	; 0x30
 808a528:	46bb      	mov	fp, r7
 808a52a:	b975      	cbnz	r5, 808a54a <_dtoa_r+0x42>
 808a52c:	2010      	movs	r0, #16
 808a52e:	f000 fee9 	bl	808b304 <malloc>
 808a532:	4602      	mov	r2, r0
 808a534:	6260      	str	r0, [r4, #36]	; 0x24
 808a536:	b920      	cbnz	r0, 808a542 <_dtoa_r+0x3a>
 808a538:	4ba7      	ldr	r3, [pc, #668]	; (808a7d8 <_dtoa_r+0x2d0>)
 808a53a:	21ea      	movs	r1, #234	; 0xea
 808a53c:	48a7      	ldr	r0, [pc, #668]	; (808a7dc <_dtoa_r+0x2d4>)
 808a53e:	f7ff ff39 	bl	808a3b4 <__assert_func>
 808a542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 808a546:	6005      	str	r5, [r0, #0]
 808a548:	60c5      	str	r5, [r0, #12]
 808a54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808a54c:	6819      	ldr	r1, [r3, #0]
 808a54e:	b151      	cbz	r1, 808a566 <_dtoa_r+0x5e>
 808a550:	685a      	ldr	r2, [r3, #4]
 808a552:	604a      	str	r2, [r1, #4]
 808a554:	2301      	movs	r3, #1
 808a556:	4093      	lsls	r3, r2
 808a558:	608b      	str	r3, [r1, #8]
 808a55a:	4620      	mov	r0, r4
 808a55c:	f000 ff1a 	bl	808b394 <_Bfree>
 808a560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808a562:	2200      	movs	r2, #0
 808a564:	601a      	str	r2, [r3, #0]
 808a566:	1e3b      	subs	r3, r7, #0
 808a568:	bfaa      	itet	ge
 808a56a:	2300      	movge	r3, #0
 808a56c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 808a570:	f8c8 3000 	strge.w	r3, [r8]
 808a574:	4b9a      	ldr	r3, [pc, #616]	; (808a7e0 <_dtoa_r+0x2d8>)
 808a576:	bfbc      	itt	lt
 808a578:	2201      	movlt	r2, #1
 808a57a:	f8c8 2000 	strlt.w	r2, [r8]
 808a57e:	ea33 030b 	bics.w	r3, r3, fp
 808a582:	d11b      	bne.n	808a5bc <_dtoa_r+0xb4>
 808a584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808a586:	f242 730f 	movw	r3, #9999	; 0x270f
 808a58a:	6013      	str	r3, [r2, #0]
 808a58c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 808a590:	4333      	orrs	r3, r6
 808a592:	f000 8592 	beq.w	808b0ba <_dtoa_r+0xbb2>
 808a596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808a598:	b963      	cbnz	r3, 808a5b4 <_dtoa_r+0xac>
 808a59a:	4b92      	ldr	r3, [pc, #584]	; (808a7e4 <_dtoa_r+0x2dc>)
 808a59c:	e022      	b.n	808a5e4 <_dtoa_r+0xdc>
 808a59e:	4b92      	ldr	r3, [pc, #584]	; (808a7e8 <_dtoa_r+0x2e0>)
 808a5a0:	9301      	str	r3, [sp, #4]
 808a5a2:	3308      	adds	r3, #8
 808a5a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 808a5a6:	6013      	str	r3, [r2, #0]
 808a5a8:	9801      	ldr	r0, [sp, #4]
 808a5aa:	b013      	add	sp, #76	; 0x4c
 808a5ac:	ecbd 8b04 	vpop	{d8-d9}
 808a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808a5b4:	4b8b      	ldr	r3, [pc, #556]	; (808a7e4 <_dtoa_r+0x2dc>)
 808a5b6:	9301      	str	r3, [sp, #4]
 808a5b8:	3303      	adds	r3, #3
 808a5ba:	e7f3      	b.n	808a5a4 <_dtoa_r+0x9c>
 808a5bc:	2200      	movs	r2, #0
 808a5be:	2300      	movs	r3, #0
 808a5c0:	4650      	mov	r0, sl
 808a5c2:	4659      	mov	r1, fp
 808a5c4:	f7f6 fa80 	bl	8080ac8 <__aeabi_dcmpeq>
 808a5c8:	ec4b ab19 	vmov	d9, sl, fp
 808a5cc:	4680      	mov	r8, r0
 808a5ce:	b158      	cbz	r0, 808a5e8 <_dtoa_r+0xe0>
 808a5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 808a5d2:	2301      	movs	r3, #1
 808a5d4:	6013      	str	r3, [r2, #0]
 808a5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808a5d8:	2b00      	cmp	r3, #0
 808a5da:	f000 856b 	beq.w	808b0b4 <_dtoa_r+0xbac>
 808a5de:	4883      	ldr	r0, [pc, #524]	; (808a7ec <_dtoa_r+0x2e4>)
 808a5e0:	6018      	str	r0, [r3, #0]
 808a5e2:	1e43      	subs	r3, r0, #1
 808a5e4:	9301      	str	r3, [sp, #4]
 808a5e6:	e7df      	b.n	808a5a8 <_dtoa_r+0xa0>
 808a5e8:	ec4b ab10 	vmov	d0, sl, fp
 808a5ec:	aa10      	add	r2, sp, #64	; 0x40
 808a5ee:	a911      	add	r1, sp, #68	; 0x44
 808a5f0:	4620      	mov	r0, r4
 808a5f2:	f001 f9b7 	bl	808b964 <__d2b>
 808a5f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 808a5fa:	ee08 0a10 	vmov	s16, r0
 808a5fe:	2d00      	cmp	r5, #0
 808a600:	f000 8084 	beq.w	808a70c <_dtoa_r+0x204>
 808a604:	ee19 3a90 	vmov	r3, s19
 808a608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 808a60c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 808a610:	4656      	mov	r6, sl
 808a612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 808a616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 808a61a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 808a61e:	4b74      	ldr	r3, [pc, #464]	; (808a7f0 <_dtoa_r+0x2e8>)
 808a620:	2200      	movs	r2, #0
 808a622:	4630      	mov	r0, r6
 808a624:	4639      	mov	r1, r7
 808a626:	f7f5 fe2f 	bl	8080288 <__aeabi_dsub>
 808a62a:	a365      	add	r3, pc, #404	; (adr r3, 808a7c0 <_dtoa_r+0x2b8>)
 808a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 808a630:	f7f5 ffe2 	bl	80805f8 <__aeabi_dmul>
 808a634:	a364      	add	r3, pc, #400	; (adr r3, 808a7c8 <_dtoa_r+0x2c0>)
 808a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 808a63a:	f7f5 fe27 	bl	808028c <__adddf3>
 808a63e:	4606      	mov	r6, r0
 808a640:	4628      	mov	r0, r5
 808a642:	460f      	mov	r7, r1
 808a644:	f7f5 ff6e 	bl	8080524 <__aeabi_i2d>
 808a648:	a361      	add	r3, pc, #388	; (adr r3, 808a7d0 <_dtoa_r+0x2c8>)
 808a64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808a64e:	f7f5 ffd3 	bl	80805f8 <__aeabi_dmul>
 808a652:	4602      	mov	r2, r0
 808a654:	460b      	mov	r3, r1
 808a656:	4630      	mov	r0, r6
 808a658:	4639      	mov	r1, r7
 808a65a:	f7f5 fe17 	bl	808028c <__adddf3>
 808a65e:	4606      	mov	r6, r0
 808a660:	460f      	mov	r7, r1
 808a662:	f7f6 fa79 	bl	8080b58 <__aeabi_d2iz>
 808a666:	2200      	movs	r2, #0
 808a668:	9000      	str	r0, [sp, #0]
 808a66a:	2300      	movs	r3, #0
 808a66c:	4630      	mov	r0, r6
 808a66e:	4639      	mov	r1, r7
 808a670:	f7f6 fa34 	bl	8080adc <__aeabi_dcmplt>
 808a674:	b150      	cbz	r0, 808a68c <_dtoa_r+0x184>
 808a676:	9800      	ldr	r0, [sp, #0]
 808a678:	f7f5 ff54 	bl	8080524 <__aeabi_i2d>
 808a67c:	4632      	mov	r2, r6
 808a67e:	463b      	mov	r3, r7
 808a680:	f7f6 fa22 	bl	8080ac8 <__aeabi_dcmpeq>
 808a684:	b910      	cbnz	r0, 808a68c <_dtoa_r+0x184>
 808a686:	9b00      	ldr	r3, [sp, #0]
 808a688:	3b01      	subs	r3, #1
 808a68a:	9300      	str	r3, [sp, #0]
 808a68c:	9b00      	ldr	r3, [sp, #0]
 808a68e:	2b16      	cmp	r3, #22
 808a690:	d85a      	bhi.n	808a748 <_dtoa_r+0x240>
 808a692:	9a00      	ldr	r2, [sp, #0]
 808a694:	4b57      	ldr	r3, [pc, #348]	; (808a7f4 <_dtoa_r+0x2ec>)
 808a696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808a69e:	ec51 0b19 	vmov	r0, r1, d9
 808a6a2:	f7f6 fa1b 	bl	8080adc <__aeabi_dcmplt>
 808a6a6:	2800      	cmp	r0, #0
 808a6a8:	d050      	beq.n	808a74c <_dtoa_r+0x244>
 808a6aa:	9b00      	ldr	r3, [sp, #0]
 808a6ac:	3b01      	subs	r3, #1
 808a6ae:	9300      	str	r3, [sp, #0]
 808a6b0:	2300      	movs	r3, #0
 808a6b2:	930b      	str	r3, [sp, #44]	; 0x2c
 808a6b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808a6b6:	1b5d      	subs	r5, r3, r5
 808a6b8:	1e6b      	subs	r3, r5, #1
 808a6ba:	9305      	str	r3, [sp, #20]
 808a6bc:	bf45      	ittet	mi
 808a6be:	f1c5 0301 	rsbmi	r3, r5, #1
 808a6c2:	9304      	strmi	r3, [sp, #16]
 808a6c4:	2300      	movpl	r3, #0
 808a6c6:	2300      	movmi	r3, #0
 808a6c8:	bf4c      	ite	mi
 808a6ca:	9305      	strmi	r3, [sp, #20]
 808a6cc:	9304      	strpl	r3, [sp, #16]
 808a6ce:	9b00      	ldr	r3, [sp, #0]
 808a6d0:	2b00      	cmp	r3, #0
 808a6d2:	db3d      	blt.n	808a750 <_dtoa_r+0x248>
 808a6d4:	9b05      	ldr	r3, [sp, #20]
 808a6d6:	9a00      	ldr	r2, [sp, #0]
 808a6d8:	920a      	str	r2, [sp, #40]	; 0x28
 808a6da:	4413      	add	r3, r2
 808a6dc:	9305      	str	r3, [sp, #20]
 808a6de:	2300      	movs	r3, #0
 808a6e0:	9307      	str	r3, [sp, #28]
 808a6e2:	9b06      	ldr	r3, [sp, #24]
 808a6e4:	2b09      	cmp	r3, #9
 808a6e6:	f200 8089 	bhi.w	808a7fc <_dtoa_r+0x2f4>
 808a6ea:	2b05      	cmp	r3, #5
 808a6ec:	bfc4      	itt	gt
 808a6ee:	3b04      	subgt	r3, #4
 808a6f0:	9306      	strgt	r3, [sp, #24]
 808a6f2:	9b06      	ldr	r3, [sp, #24]
 808a6f4:	f1a3 0302 	sub.w	r3, r3, #2
 808a6f8:	bfcc      	ite	gt
 808a6fa:	2500      	movgt	r5, #0
 808a6fc:	2501      	movle	r5, #1
 808a6fe:	2b03      	cmp	r3, #3
 808a700:	f200 8087 	bhi.w	808a812 <_dtoa_r+0x30a>
 808a704:	e8df f003 	tbb	[pc, r3]
 808a708:	59383a2d 	.word	0x59383a2d
 808a70c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 808a710:	441d      	add	r5, r3
 808a712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 808a716:	2b20      	cmp	r3, #32
 808a718:	bfc1      	itttt	gt
 808a71a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 808a71e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 808a722:	fa0b f303 	lslgt.w	r3, fp, r3
 808a726:	fa26 f000 	lsrgt.w	r0, r6, r0
 808a72a:	bfda      	itte	le
 808a72c:	f1c3 0320 	rsble	r3, r3, #32
 808a730:	fa06 f003 	lslle.w	r0, r6, r3
 808a734:	4318      	orrgt	r0, r3
 808a736:	f7f5 fee5 	bl	8080504 <__aeabi_ui2d>
 808a73a:	2301      	movs	r3, #1
 808a73c:	4606      	mov	r6, r0
 808a73e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 808a742:	3d01      	subs	r5, #1
 808a744:	930e      	str	r3, [sp, #56]	; 0x38
 808a746:	e76a      	b.n	808a61e <_dtoa_r+0x116>
 808a748:	2301      	movs	r3, #1
 808a74a:	e7b2      	b.n	808a6b2 <_dtoa_r+0x1aa>
 808a74c:	900b      	str	r0, [sp, #44]	; 0x2c
 808a74e:	e7b1      	b.n	808a6b4 <_dtoa_r+0x1ac>
 808a750:	9b04      	ldr	r3, [sp, #16]
 808a752:	9a00      	ldr	r2, [sp, #0]
 808a754:	1a9b      	subs	r3, r3, r2
 808a756:	9304      	str	r3, [sp, #16]
 808a758:	4253      	negs	r3, r2
 808a75a:	9307      	str	r3, [sp, #28]
 808a75c:	2300      	movs	r3, #0
 808a75e:	930a      	str	r3, [sp, #40]	; 0x28
 808a760:	e7bf      	b.n	808a6e2 <_dtoa_r+0x1da>
 808a762:	2300      	movs	r3, #0
 808a764:	9308      	str	r3, [sp, #32]
 808a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a768:	2b00      	cmp	r3, #0
 808a76a:	dc55      	bgt.n	808a818 <_dtoa_r+0x310>
 808a76c:	2301      	movs	r3, #1
 808a76e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 808a772:	461a      	mov	r2, r3
 808a774:	9209      	str	r2, [sp, #36]	; 0x24
 808a776:	e00c      	b.n	808a792 <_dtoa_r+0x28a>
 808a778:	2301      	movs	r3, #1
 808a77a:	e7f3      	b.n	808a764 <_dtoa_r+0x25c>
 808a77c:	2300      	movs	r3, #0
 808a77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808a780:	9308      	str	r3, [sp, #32]
 808a782:	9b00      	ldr	r3, [sp, #0]
 808a784:	4413      	add	r3, r2
 808a786:	9302      	str	r3, [sp, #8]
 808a788:	3301      	adds	r3, #1
 808a78a:	2b01      	cmp	r3, #1
 808a78c:	9303      	str	r3, [sp, #12]
 808a78e:	bfb8      	it	lt
 808a790:	2301      	movlt	r3, #1
 808a792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 808a794:	2200      	movs	r2, #0
 808a796:	6042      	str	r2, [r0, #4]
 808a798:	2204      	movs	r2, #4
 808a79a:	f102 0614 	add.w	r6, r2, #20
 808a79e:	429e      	cmp	r6, r3
 808a7a0:	6841      	ldr	r1, [r0, #4]
 808a7a2:	d93d      	bls.n	808a820 <_dtoa_r+0x318>
 808a7a4:	4620      	mov	r0, r4
 808a7a6:	f000 fdb5 	bl	808b314 <_Balloc>
 808a7aa:	9001      	str	r0, [sp, #4]
 808a7ac:	2800      	cmp	r0, #0
 808a7ae:	d13b      	bne.n	808a828 <_dtoa_r+0x320>
 808a7b0:	4b11      	ldr	r3, [pc, #68]	; (808a7f8 <_dtoa_r+0x2f0>)
 808a7b2:	4602      	mov	r2, r0
 808a7b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 808a7b8:	e6c0      	b.n	808a53c <_dtoa_r+0x34>
 808a7ba:	2301      	movs	r3, #1
 808a7bc:	e7df      	b.n	808a77e <_dtoa_r+0x276>
 808a7be:	bf00      	nop
 808a7c0:	636f4361 	.word	0x636f4361
 808a7c4:	3fd287a7 	.word	0x3fd287a7
 808a7c8:	8b60c8b3 	.word	0x8b60c8b3
 808a7cc:	3fc68a28 	.word	0x3fc68a28
 808a7d0:	509f79fb 	.word	0x509f79fb
 808a7d4:	3fd34413 	.word	0x3fd34413
 808a7d8:	0808cf50 	.word	0x0808cf50
 808a7dc:	0808d10e 	.word	0x0808d10e
 808a7e0:	7ff00000 	.word	0x7ff00000
 808a7e4:	0808d10a 	.word	0x0808d10a
 808a7e8:	0808d101 	.word	0x0808d101
 808a7ec:	0808cf2d 	.word	0x0808cf2d
 808a7f0:	3ff80000 	.word	0x3ff80000
 808a7f4:	0808d260 	.word	0x0808d260
 808a7f8:	0808d169 	.word	0x0808d169
 808a7fc:	2501      	movs	r5, #1
 808a7fe:	2300      	movs	r3, #0
 808a800:	9306      	str	r3, [sp, #24]
 808a802:	9508      	str	r5, [sp, #32]
 808a804:	f04f 33ff 	mov.w	r3, #4294967295
 808a808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 808a80c:	2200      	movs	r2, #0
 808a80e:	2312      	movs	r3, #18
 808a810:	e7b0      	b.n	808a774 <_dtoa_r+0x26c>
 808a812:	2301      	movs	r3, #1
 808a814:	9308      	str	r3, [sp, #32]
 808a816:	e7f5      	b.n	808a804 <_dtoa_r+0x2fc>
 808a818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a81a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 808a81e:	e7b8      	b.n	808a792 <_dtoa_r+0x28a>
 808a820:	3101      	adds	r1, #1
 808a822:	6041      	str	r1, [r0, #4]
 808a824:	0052      	lsls	r2, r2, #1
 808a826:	e7b8      	b.n	808a79a <_dtoa_r+0x292>
 808a828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808a82a:	9a01      	ldr	r2, [sp, #4]
 808a82c:	601a      	str	r2, [r3, #0]
 808a82e:	9b03      	ldr	r3, [sp, #12]
 808a830:	2b0e      	cmp	r3, #14
 808a832:	f200 809d 	bhi.w	808a970 <_dtoa_r+0x468>
 808a836:	2d00      	cmp	r5, #0
 808a838:	f000 809a 	beq.w	808a970 <_dtoa_r+0x468>
 808a83c:	9b00      	ldr	r3, [sp, #0]
 808a83e:	2b00      	cmp	r3, #0
 808a840:	dd32      	ble.n	808a8a8 <_dtoa_r+0x3a0>
 808a842:	4ab7      	ldr	r2, [pc, #732]	; (808ab20 <_dtoa_r+0x618>)
 808a844:	f003 030f 	and.w	r3, r3, #15
 808a848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 808a84c:	e9d3 8900 	ldrd	r8, r9, [r3]
 808a850:	9b00      	ldr	r3, [sp, #0]
 808a852:	05d8      	lsls	r0, r3, #23
 808a854:	ea4f 1723 	mov.w	r7, r3, asr #4
 808a858:	d516      	bpl.n	808a888 <_dtoa_r+0x380>
 808a85a:	4bb2      	ldr	r3, [pc, #712]	; (808ab24 <_dtoa_r+0x61c>)
 808a85c:	ec51 0b19 	vmov	r0, r1, d9
 808a860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 808a864:	f7f5 fff2 	bl	808084c <__aeabi_ddiv>
 808a868:	f007 070f 	and.w	r7, r7, #15
 808a86c:	4682      	mov	sl, r0
 808a86e:	468b      	mov	fp, r1
 808a870:	2503      	movs	r5, #3
 808a872:	4eac      	ldr	r6, [pc, #688]	; (808ab24 <_dtoa_r+0x61c>)
 808a874:	b957      	cbnz	r7, 808a88c <_dtoa_r+0x384>
 808a876:	4642      	mov	r2, r8
 808a878:	464b      	mov	r3, r9
 808a87a:	4650      	mov	r0, sl
 808a87c:	4659      	mov	r1, fp
 808a87e:	f7f5 ffe5 	bl	808084c <__aeabi_ddiv>
 808a882:	4682      	mov	sl, r0
 808a884:	468b      	mov	fp, r1
 808a886:	e028      	b.n	808a8da <_dtoa_r+0x3d2>
 808a888:	2502      	movs	r5, #2
 808a88a:	e7f2      	b.n	808a872 <_dtoa_r+0x36a>
 808a88c:	07f9      	lsls	r1, r7, #31
 808a88e:	d508      	bpl.n	808a8a2 <_dtoa_r+0x39a>
 808a890:	4640      	mov	r0, r8
 808a892:	4649      	mov	r1, r9
 808a894:	e9d6 2300 	ldrd	r2, r3, [r6]
 808a898:	f7f5 feae 	bl	80805f8 <__aeabi_dmul>
 808a89c:	3501      	adds	r5, #1
 808a89e:	4680      	mov	r8, r0
 808a8a0:	4689      	mov	r9, r1
 808a8a2:	107f      	asrs	r7, r7, #1
 808a8a4:	3608      	adds	r6, #8
 808a8a6:	e7e5      	b.n	808a874 <_dtoa_r+0x36c>
 808a8a8:	f000 809b 	beq.w	808a9e2 <_dtoa_r+0x4da>
 808a8ac:	9b00      	ldr	r3, [sp, #0]
 808a8ae:	4f9d      	ldr	r7, [pc, #628]	; (808ab24 <_dtoa_r+0x61c>)
 808a8b0:	425e      	negs	r6, r3
 808a8b2:	4b9b      	ldr	r3, [pc, #620]	; (808ab20 <_dtoa_r+0x618>)
 808a8b4:	f006 020f 	and.w	r2, r6, #15
 808a8b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 808a8c0:	ec51 0b19 	vmov	r0, r1, d9
 808a8c4:	f7f5 fe98 	bl	80805f8 <__aeabi_dmul>
 808a8c8:	1136      	asrs	r6, r6, #4
 808a8ca:	4682      	mov	sl, r0
 808a8cc:	468b      	mov	fp, r1
 808a8ce:	2300      	movs	r3, #0
 808a8d0:	2502      	movs	r5, #2
 808a8d2:	2e00      	cmp	r6, #0
 808a8d4:	d17a      	bne.n	808a9cc <_dtoa_r+0x4c4>
 808a8d6:	2b00      	cmp	r3, #0
 808a8d8:	d1d3      	bne.n	808a882 <_dtoa_r+0x37a>
 808a8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808a8dc:	2b00      	cmp	r3, #0
 808a8de:	f000 8082 	beq.w	808a9e6 <_dtoa_r+0x4de>
 808a8e2:	4b91      	ldr	r3, [pc, #580]	; (808ab28 <_dtoa_r+0x620>)
 808a8e4:	2200      	movs	r2, #0
 808a8e6:	4650      	mov	r0, sl
 808a8e8:	4659      	mov	r1, fp
 808a8ea:	f7f6 f8f7 	bl	8080adc <__aeabi_dcmplt>
 808a8ee:	2800      	cmp	r0, #0
 808a8f0:	d079      	beq.n	808a9e6 <_dtoa_r+0x4de>
 808a8f2:	9b03      	ldr	r3, [sp, #12]
 808a8f4:	2b00      	cmp	r3, #0
 808a8f6:	d076      	beq.n	808a9e6 <_dtoa_r+0x4de>
 808a8f8:	9b02      	ldr	r3, [sp, #8]
 808a8fa:	2b00      	cmp	r3, #0
 808a8fc:	dd36      	ble.n	808a96c <_dtoa_r+0x464>
 808a8fe:	9b00      	ldr	r3, [sp, #0]
 808a900:	4650      	mov	r0, sl
 808a902:	4659      	mov	r1, fp
 808a904:	1e5f      	subs	r7, r3, #1
 808a906:	2200      	movs	r2, #0
 808a908:	4b88      	ldr	r3, [pc, #544]	; (808ab2c <_dtoa_r+0x624>)
 808a90a:	f7f5 fe75 	bl	80805f8 <__aeabi_dmul>
 808a90e:	9e02      	ldr	r6, [sp, #8]
 808a910:	4682      	mov	sl, r0
 808a912:	468b      	mov	fp, r1
 808a914:	3501      	adds	r5, #1
 808a916:	4628      	mov	r0, r5
 808a918:	f7f5 fe04 	bl	8080524 <__aeabi_i2d>
 808a91c:	4652      	mov	r2, sl
 808a91e:	465b      	mov	r3, fp
 808a920:	f7f5 fe6a 	bl	80805f8 <__aeabi_dmul>
 808a924:	4b82      	ldr	r3, [pc, #520]	; (808ab30 <_dtoa_r+0x628>)
 808a926:	2200      	movs	r2, #0
 808a928:	f7f5 fcb0 	bl	808028c <__adddf3>
 808a92c:	46d0      	mov	r8, sl
 808a92e:	46d9      	mov	r9, fp
 808a930:	4682      	mov	sl, r0
 808a932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 808a936:	2e00      	cmp	r6, #0
 808a938:	d158      	bne.n	808a9ec <_dtoa_r+0x4e4>
 808a93a:	4b7e      	ldr	r3, [pc, #504]	; (808ab34 <_dtoa_r+0x62c>)
 808a93c:	2200      	movs	r2, #0
 808a93e:	4640      	mov	r0, r8
 808a940:	4649      	mov	r1, r9
 808a942:	f7f5 fca1 	bl	8080288 <__aeabi_dsub>
 808a946:	4652      	mov	r2, sl
 808a948:	465b      	mov	r3, fp
 808a94a:	4680      	mov	r8, r0
 808a94c:	4689      	mov	r9, r1
 808a94e:	f7f6 f8e3 	bl	8080b18 <__aeabi_dcmpgt>
 808a952:	2800      	cmp	r0, #0
 808a954:	f040 8295 	bne.w	808ae82 <_dtoa_r+0x97a>
 808a958:	4652      	mov	r2, sl
 808a95a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 808a95e:	4640      	mov	r0, r8
 808a960:	4649      	mov	r1, r9
 808a962:	f7f6 f8bb 	bl	8080adc <__aeabi_dcmplt>
 808a966:	2800      	cmp	r0, #0
 808a968:	f040 8289 	bne.w	808ae7e <_dtoa_r+0x976>
 808a96c:	ec5b ab19 	vmov	sl, fp, d9
 808a970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 808a972:	2b00      	cmp	r3, #0
 808a974:	f2c0 8148 	blt.w	808ac08 <_dtoa_r+0x700>
 808a978:	9a00      	ldr	r2, [sp, #0]
 808a97a:	2a0e      	cmp	r2, #14
 808a97c:	f300 8144 	bgt.w	808ac08 <_dtoa_r+0x700>
 808a980:	4b67      	ldr	r3, [pc, #412]	; (808ab20 <_dtoa_r+0x618>)
 808a982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808a986:	e9d3 8900 	ldrd	r8, r9, [r3]
 808a98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808a98c:	2b00      	cmp	r3, #0
 808a98e:	f280 80d5 	bge.w	808ab3c <_dtoa_r+0x634>
 808a992:	9b03      	ldr	r3, [sp, #12]
 808a994:	2b00      	cmp	r3, #0
 808a996:	f300 80d1 	bgt.w	808ab3c <_dtoa_r+0x634>
 808a99a:	f040 826f 	bne.w	808ae7c <_dtoa_r+0x974>
 808a99e:	4b65      	ldr	r3, [pc, #404]	; (808ab34 <_dtoa_r+0x62c>)
 808a9a0:	2200      	movs	r2, #0
 808a9a2:	4640      	mov	r0, r8
 808a9a4:	4649      	mov	r1, r9
 808a9a6:	f7f5 fe27 	bl	80805f8 <__aeabi_dmul>
 808a9aa:	4652      	mov	r2, sl
 808a9ac:	465b      	mov	r3, fp
 808a9ae:	f7f6 f8a9 	bl	8080b04 <__aeabi_dcmpge>
 808a9b2:	9e03      	ldr	r6, [sp, #12]
 808a9b4:	4637      	mov	r7, r6
 808a9b6:	2800      	cmp	r0, #0
 808a9b8:	f040 8245 	bne.w	808ae46 <_dtoa_r+0x93e>
 808a9bc:	9d01      	ldr	r5, [sp, #4]
 808a9be:	2331      	movs	r3, #49	; 0x31
 808a9c0:	f805 3b01 	strb.w	r3, [r5], #1
 808a9c4:	9b00      	ldr	r3, [sp, #0]
 808a9c6:	3301      	adds	r3, #1
 808a9c8:	9300      	str	r3, [sp, #0]
 808a9ca:	e240      	b.n	808ae4e <_dtoa_r+0x946>
 808a9cc:	07f2      	lsls	r2, r6, #31
 808a9ce:	d505      	bpl.n	808a9dc <_dtoa_r+0x4d4>
 808a9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 808a9d4:	f7f5 fe10 	bl	80805f8 <__aeabi_dmul>
 808a9d8:	3501      	adds	r5, #1
 808a9da:	2301      	movs	r3, #1
 808a9dc:	1076      	asrs	r6, r6, #1
 808a9de:	3708      	adds	r7, #8
 808a9e0:	e777      	b.n	808a8d2 <_dtoa_r+0x3ca>
 808a9e2:	2502      	movs	r5, #2
 808a9e4:	e779      	b.n	808a8da <_dtoa_r+0x3d2>
 808a9e6:	9f00      	ldr	r7, [sp, #0]
 808a9e8:	9e03      	ldr	r6, [sp, #12]
 808a9ea:	e794      	b.n	808a916 <_dtoa_r+0x40e>
 808a9ec:	9901      	ldr	r1, [sp, #4]
 808a9ee:	4b4c      	ldr	r3, [pc, #304]	; (808ab20 <_dtoa_r+0x618>)
 808a9f0:	4431      	add	r1, r6
 808a9f2:	910d      	str	r1, [sp, #52]	; 0x34
 808a9f4:	9908      	ldr	r1, [sp, #32]
 808a9f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 808a9fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 808a9fe:	2900      	cmp	r1, #0
 808aa00:	d043      	beq.n	808aa8a <_dtoa_r+0x582>
 808aa02:	494d      	ldr	r1, [pc, #308]	; (808ab38 <_dtoa_r+0x630>)
 808aa04:	2000      	movs	r0, #0
 808aa06:	f7f5 ff21 	bl	808084c <__aeabi_ddiv>
 808aa0a:	4652      	mov	r2, sl
 808aa0c:	465b      	mov	r3, fp
 808aa0e:	f7f5 fc3b 	bl	8080288 <__aeabi_dsub>
 808aa12:	9d01      	ldr	r5, [sp, #4]
 808aa14:	4682      	mov	sl, r0
 808aa16:	468b      	mov	fp, r1
 808aa18:	4649      	mov	r1, r9
 808aa1a:	4640      	mov	r0, r8
 808aa1c:	f7f6 f89c 	bl	8080b58 <__aeabi_d2iz>
 808aa20:	4606      	mov	r6, r0
 808aa22:	f7f5 fd7f 	bl	8080524 <__aeabi_i2d>
 808aa26:	4602      	mov	r2, r0
 808aa28:	460b      	mov	r3, r1
 808aa2a:	4640      	mov	r0, r8
 808aa2c:	4649      	mov	r1, r9
 808aa2e:	f7f5 fc2b 	bl	8080288 <__aeabi_dsub>
 808aa32:	3630      	adds	r6, #48	; 0x30
 808aa34:	f805 6b01 	strb.w	r6, [r5], #1
 808aa38:	4652      	mov	r2, sl
 808aa3a:	465b      	mov	r3, fp
 808aa3c:	4680      	mov	r8, r0
 808aa3e:	4689      	mov	r9, r1
 808aa40:	f7f6 f84c 	bl	8080adc <__aeabi_dcmplt>
 808aa44:	2800      	cmp	r0, #0
 808aa46:	d163      	bne.n	808ab10 <_dtoa_r+0x608>
 808aa48:	4642      	mov	r2, r8
 808aa4a:	464b      	mov	r3, r9
 808aa4c:	4936      	ldr	r1, [pc, #216]	; (808ab28 <_dtoa_r+0x620>)
 808aa4e:	2000      	movs	r0, #0
 808aa50:	f7f5 fc1a 	bl	8080288 <__aeabi_dsub>
 808aa54:	4652      	mov	r2, sl
 808aa56:	465b      	mov	r3, fp
 808aa58:	f7f6 f840 	bl	8080adc <__aeabi_dcmplt>
 808aa5c:	2800      	cmp	r0, #0
 808aa5e:	f040 80b5 	bne.w	808abcc <_dtoa_r+0x6c4>
 808aa62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808aa64:	429d      	cmp	r5, r3
 808aa66:	d081      	beq.n	808a96c <_dtoa_r+0x464>
 808aa68:	4b30      	ldr	r3, [pc, #192]	; (808ab2c <_dtoa_r+0x624>)
 808aa6a:	2200      	movs	r2, #0
 808aa6c:	4650      	mov	r0, sl
 808aa6e:	4659      	mov	r1, fp
 808aa70:	f7f5 fdc2 	bl	80805f8 <__aeabi_dmul>
 808aa74:	4b2d      	ldr	r3, [pc, #180]	; (808ab2c <_dtoa_r+0x624>)
 808aa76:	4682      	mov	sl, r0
 808aa78:	468b      	mov	fp, r1
 808aa7a:	4640      	mov	r0, r8
 808aa7c:	4649      	mov	r1, r9
 808aa7e:	2200      	movs	r2, #0
 808aa80:	f7f5 fdba 	bl	80805f8 <__aeabi_dmul>
 808aa84:	4680      	mov	r8, r0
 808aa86:	4689      	mov	r9, r1
 808aa88:	e7c6      	b.n	808aa18 <_dtoa_r+0x510>
 808aa8a:	4650      	mov	r0, sl
 808aa8c:	4659      	mov	r1, fp
 808aa8e:	f7f5 fdb3 	bl	80805f8 <__aeabi_dmul>
 808aa92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808aa94:	9d01      	ldr	r5, [sp, #4]
 808aa96:	930f      	str	r3, [sp, #60]	; 0x3c
 808aa98:	4682      	mov	sl, r0
 808aa9a:	468b      	mov	fp, r1
 808aa9c:	4649      	mov	r1, r9
 808aa9e:	4640      	mov	r0, r8
 808aaa0:	f7f6 f85a 	bl	8080b58 <__aeabi_d2iz>
 808aaa4:	4606      	mov	r6, r0
 808aaa6:	f7f5 fd3d 	bl	8080524 <__aeabi_i2d>
 808aaaa:	3630      	adds	r6, #48	; 0x30
 808aaac:	4602      	mov	r2, r0
 808aaae:	460b      	mov	r3, r1
 808aab0:	4640      	mov	r0, r8
 808aab2:	4649      	mov	r1, r9
 808aab4:	f7f5 fbe8 	bl	8080288 <__aeabi_dsub>
 808aab8:	f805 6b01 	strb.w	r6, [r5], #1
 808aabc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808aabe:	429d      	cmp	r5, r3
 808aac0:	4680      	mov	r8, r0
 808aac2:	4689      	mov	r9, r1
 808aac4:	f04f 0200 	mov.w	r2, #0
 808aac8:	d124      	bne.n	808ab14 <_dtoa_r+0x60c>
 808aaca:	4b1b      	ldr	r3, [pc, #108]	; (808ab38 <_dtoa_r+0x630>)
 808aacc:	4650      	mov	r0, sl
 808aace:	4659      	mov	r1, fp
 808aad0:	f7f5 fbdc 	bl	808028c <__adddf3>
 808aad4:	4602      	mov	r2, r0
 808aad6:	460b      	mov	r3, r1
 808aad8:	4640      	mov	r0, r8
 808aada:	4649      	mov	r1, r9
 808aadc:	f7f6 f81c 	bl	8080b18 <__aeabi_dcmpgt>
 808aae0:	2800      	cmp	r0, #0
 808aae2:	d173      	bne.n	808abcc <_dtoa_r+0x6c4>
 808aae4:	4652      	mov	r2, sl
 808aae6:	465b      	mov	r3, fp
 808aae8:	4913      	ldr	r1, [pc, #76]	; (808ab38 <_dtoa_r+0x630>)
 808aaea:	2000      	movs	r0, #0
 808aaec:	f7f5 fbcc 	bl	8080288 <__aeabi_dsub>
 808aaf0:	4602      	mov	r2, r0
 808aaf2:	460b      	mov	r3, r1
 808aaf4:	4640      	mov	r0, r8
 808aaf6:	4649      	mov	r1, r9
 808aaf8:	f7f5 fff0 	bl	8080adc <__aeabi_dcmplt>
 808aafc:	2800      	cmp	r0, #0
 808aafe:	f43f af35 	beq.w	808a96c <_dtoa_r+0x464>
 808ab02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 808ab04:	1e6b      	subs	r3, r5, #1
 808ab06:	930f      	str	r3, [sp, #60]	; 0x3c
 808ab08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 808ab0c:	2b30      	cmp	r3, #48	; 0x30
 808ab0e:	d0f8      	beq.n	808ab02 <_dtoa_r+0x5fa>
 808ab10:	9700      	str	r7, [sp, #0]
 808ab12:	e049      	b.n	808aba8 <_dtoa_r+0x6a0>
 808ab14:	4b05      	ldr	r3, [pc, #20]	; (808ab2c <_dtoa_r+0x624>)
 808ab16:	f7f5 fd6f 	bl	80805f8 <__aeabi_dmul>
 808ab1a:	4680      	mov	r8, r0
 808ab1c:	4689      	mov	r9, r1
 808ab1e:	e7bd      	b.n	808aa9c <_dtoa_r+0x594>
 808ab20:	0808d260 	.word	0x0808d260
 808ab24:	0808d238 	.word	0x0808d238
 808ab28:	3ff00000 	.word	0x3ff00000
 808ab2c:	40240000 	.word	0x40240000
 808ab30:	401c0000 	.word	0x401c0000
 808ab34:	40140000 	.word	0x40140000
 808ab38:	3fe00000 	.word	0x3fe00000
 808ab3c:	9d01      	ldr	r5, [sp, #4]
 808ab3e:	4656      	mov	r6, sl
 808ab40:	465f      	mov	r7, fp
 808ab42:	4642      	mov	r2, r8
 808ab44:	464b      	mov	r3, r9
 808ab46:	4630      	mov	r0, r6
 808ab48:	4639      	mov	r1, r7
 808ab4a:	f7f5 fe7f 	bl	808084c <__aeabi_ddiv>
 808ab4e:	f7f6 f803 	bl	8080b58 <__aeabi_d2iz>
 808ab52:	4682      	mov	sl, r0
 808ab54:	f7f5 fce6 	bl	8080524 <__aeabi_i2d>
 808ab58:	4642      	mov	r2, r8
 808ab5a:	464b      	mov	r3, r9
 808ab5c:	f7f5 fd4c 	bl	80805f8 <__aeabi_dmul>
 808ab60:	4602      	mov	r2, r0
 808ab62:	460b      	mov	r3, r1
 808ab64:	4630      	mov	r0, r6
 808ab66:	4639      	mov	r1, r7
 808ab68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 808ab6c:	f7f5 fb8c 	bl	8080288 <__aeabi_dsub>
 808ab70:	f805 6b01 	strb.w	r6, [r5], #1
 808ab74:	9e01      	ldr	r6, [sp, #4]
 808ab76:	9f03      	ldr	r7, [sp, #12]
 808ab78:	1bae      	subs	r6, r5, r6
 808ab7a:	42b7      	cmp	r7, r6
 808ab7c:	4602      	mov	r2, r0
 808ab7e:	460b      	mov	r3, r1
 808ab80:	d135      	bne.n	808abee <_dtoa_r+0x6e6>
 808ab82:	f7f5 fb83 	bl	808028c <__adddf3>
 808ab86:	4642      	mov	r2, r8
 808ab88:	464b      	mov	r3, r9
 808ab8a:	4606      	mov	r6, r0
 808ab8c:	460f      	mov	r7, r1
 808ab8e:	f7f5 ffc3 	bl	8080b18 <__aeabi_dcmpgt>
 808ab92:	b9d0      	cbnz	r0, 808abca <_dtoa_r+0x6c2>
 808ab94:	4642      	mov	r2, r8
 808ab96:	464b      	mov	r3, r9
 808ab98:	4630      	mov	r0, r6
 808ab9a:	4639      	mov	r1, r7
 808ab9c:	f7f5 ff94 	bl	8080ac8 <__aeabi_dcmpeq>
 808aba0:	b110      	cbz	r0, 808aba8 <_dtoa_r+0x6a0>
 808aba2:	f01a 0f01 	tst.w	sl, #1
 808aba6:	d110      	bne.n	808abca <_dtoa_r+0x6c2>
 808aba8:	4620      	mov	r0, r4
 808abaa:	ee18 1a10 	vmov	r1, s16
 808abae:	f000 fbf1 	bl	808b394 <_Bfree>
 808abb2:	2300      	movs	r3, #0
 808abb4:	9800      	ldr	r0, [sp, #0]
 808abb6:	702b      	strb	r3, [r5, #0]
 808abb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808abba:	3001      	adds	r0, #1
 808abbc:	6018      	str	r0, [r3, #0]
 808abbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808abc0:	2b00      	cmp	r3, #0
 808abc2:	f43f acf1 	beq.w	808a5a8 <_dtoa_r+0xa0>
 808abc6:	601d      	str	r5, [r3, #0]
 808abc8:	e4ee      	b.n	808a5a8 <_dtoa_r+0xa0>
 808abca:	9f00      	ldr	r7, [sp, #0]
 808abcc:	462b      	mov	r3, r5
 808abce:	461d      	mov	r5, r3
 808abd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808abd4:	2a39      	cmp	r2, #57	; 0x39
 808abd6:	d106      	bne.n	808abe6 <_dtoa_r+0x6de>
 808abd8:	9a01      	ldr	r2, [sp, #4]
 808abda:	429a      	cmp	r2, r3
 808abdc:	d1f7      	bne.n	808abce <_dtoa_r+0x6c6>
 808abde:	9901      	ldr	r1, [sp, #4]
 808abe0:	2230      	movs	r2, #48	; 0x30
 808abe2:	3701      	adds	r7, #1
 808abe4:	700a      	strb	r2, [r1, #0]
 808abe6:	781a      	ldrb	r2, [r3, #0]
 808abe8:	3201      	adds	r2, #1
 808abea:	701a      	strb	r2, [r3, #0]
 808abec:	e790      	b.n	808ab10 <_dtoa_r+0x608>
 808abee:	4ba6      	ldr	r3, [pc, #664]	; (808ae88 <_dtoa_r+0x980>)
 808abf0:	2200      	movs	r2, #0
 808abf2:	f7f5 fd01 	bl	80805f8 <__aeabi_dmul>
 808abf6:	2200      	movs	r2, #0
 808abf8:	2300      	movs	r3, #0
 808abfa:	4606      	mov	r6, r0
 808abfc:	460f      	mov	r7, r1
 808abfe:	f7f5 ff63 	bl	8080ac8 <__aeabi_dcmpeq>
 808ac02:	2800      	cmp	r0, #0
 808ac04:	d09d      	beq.n	808ab42 <_dtoa_r+0x63a>
 808ac06:	e7cf      	b.n	808aba8 <_dtoa_r+0x6a0>
 808ac08:	9a08      	ldr	r2, [sp, #32]
 808ac0a:	2a00      	cmp	r2, #0
 808ac0c:	f000 80d7 	beq.w	808adbe <_dtoa_r+0x8b6>
 808ac10:	9a06      	ldr	r2, [sp, #24]
 808ac12:	2a01      	cmp	r2, #1
 808ac14:	f300 80ba 	bgt.w	808ad8c <_dtoa_r+0x884>
 808ac18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 808ac1a:	2a00      	cmp	r2, #0
 808ac1c:	f000 80b2 	beq.w	808ad84 <_dtoa_r+0x87c>
 808ac20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 808ac24:	9e07      	ldr	r6, [sp, #28]
 808ac26:	9d04      	ldr	r5, [sp, #16]
 808ac28:	9a04      	ldr	r2, [sp, #16]
 808ac2a:	441a      	add	r2, r3
 808ac2c:	9204      	str	r2, [sp, #16]
 808ac2e:	9a05      	ldr	r2, [sp, #20]
 808ac30:	2101      	movs	r1, #1
 808ac32:	441a      	add	r2, r3
 808ac34:	4620      	mov	r0, r4
 808ac36:	9205      	str	r2, [sp, #20]
 808ac38:	f000 fc64 	bl	808b504 <__i2b>
 808ac3c:	4607      	mov	r7, r0
 808ac3e:	2d00      	cmp	r5, #0
 808ac40:	dd0c      	ble.n	808ac5c <_dtoa_r+0x754>
 808ac42:	9b05      	ldr	r3, [sp, #20]
 808ac44:	2b00      	cmp	r3, #0
 808ac46:	dd09      	ble.n	808ac5c <_dtoa_r+0x754>
 808ac48:	42ab      	cmp	r3, r5
 808ac4a:	9a04      	ldr	r2, [sp, #16]
 808ac4c:	bfa8      	it	ge
 808ac4e:	462b      	movge	r3, r5
 808ac50:	1ad2      	subs	r2, r2, r3
 808ac52:	9204      	str	r2, [sp, #16]
 808ac54:	9a05      	ldr	r2, [sp, #20]
 808ac56:	1aed      	subs	r5, r5, r3
 808ac58:	1ad3      	subs	r3, r2, r3
 808ac5a:	9305      	str	r3, [sp, #20]
 808ac5c:	9b07      	ldr	r3, [sp, #28]
 808ac5e:	b31b      	cbz	r3, 808aca8 <_dtoa_r+0x7a0>
 808ac60:	9b08      	ldr	r3, [sp, #32]
 808ac62:	2b00      	cmp	r3, #0
 808ac64:	f000 80af 	beq.w	808adc6 <_dtoa_r+0x8be>
 808ac68:	2e00      	cmp	r6, #0
 808ac6a:	dd13      	ble.n	808ac94 <_dtoa_r+0x78c>
 808ac6c:	4639      	mov	r1, r7
 808ac6e:	4632      	mov	r2, r6
 808ac70:	4620      	mov	r0, r4
 808ac72:	f000 fd07 	bl	808b684 <__pow5mult>
 808ac76:	ee18 2a10 	vmov	r2, s16
 808ac7a:	4601      	mov	r1, r0
 808ac7c:	4607      	mov	r7, r0
 808ac7e:	4620      	mov	r0, r4
 808ac80:	f000 fc56 	bl	808b530 <__multiply>
 808ac84:	ee18 1a10 	vmov	r1, s16
 808ac88:	4680      	mov	r8, r0
 808ac8a:	4620      	mov	r0, r4
 808ac8c:	f000 fb82 	bl	808b394 <_Bfree>
 808ac90:	ee08 8a10 	vmov	s16, r8
 808ac94:	9b07      	ldr	r3, [sp, #28]
 808ac96:	1b9a      	subs	r2, r3, r6
 808ac98:	d006      	beq.n	808aca8 <_dtoa_r+0x7a0>
 808ac9a:	ee18 1a10 	vmov	r1, s16
 808ac9e:	4620      	mov	r0, r4
 808aca0:	f000 fcf0 	bl	808b684 <__pow5mult>
 808aca4:	ee08 0a10 	vmov	s16, r0
 808aca8:	2101      	movs	r1, #1
 808acaa:	4620      	mov	r0, r4
 808acac:	f000 fc2a 	bl	808b504 <__i2b>
 808acb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808acb2:	2b00      	cmp	r3, #0
 808acb4:	4606      	mov	r6, r0
 808acb6:	f340 8088 	ble.w	808adca <_dtoa_r+0x8c2>
 808acba:	461a      	mov	r2, r3
 808acbc:	4601      	mov	r1, r0
 808acbe:	4620      	mov	r0, r4
 808acc0:	f000 fce0 	bl	808b684 <__pow5mult>
 808acc4:	9b06      	ldr	r3, [sp, #24]
 808acc6:	2b01      	cmp	r3, #1
 808acc8:	4606      	mov	r6, r0
 808acca:	f340 8081 	ble.w	808add0 <_dtoa_r+0x8c8>
 808acce:	f04f 0800 	mov.w	r8, #0
 808acd2:	6933      	ldr	r3, [r6, #16]
 808acd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 808acd8:	6918      	ldr	r0, [r3, #16]
 808acda:	f000 fbc3 	bl	808b464 <__hi0bits>
 808acde:	f1c0 0020 	rsb	r0, r0, #32
 808ace2:	9b05      	ldr	r3, [sp, #20]
 808ace4:	4418      	add	r0, r3
 808ace6:	f010 001f 	ands.w	r0, r0, #31
 808acea:	f000 8092 	beq.w	808ae12 <_dtoa_r+0x90a>
 808acee:	f1c0 0320 	rsb	r3, r0, #32
 808acf2:	2b04      	cmp	r3, #4
 808acf4:	f340 808a 	ble.w	808ae0c <_dtoa_r+0x904>
 808acf8:	f1c0 001c 	rsb	r0, r0, #28
 808acfc:	9b04      	ldr	r3, [sp, #16]
 808acfe:	4403      	add	r3, r0
 808ad00:	9304      	str	r3, [sp, #16]
 808ad02:	9b05      	ldr	r3, [sp, #20]
 808ad04:	4403      	add	r3, r0
 808ad06:	4405      	add	r5, r0
 808ad08:	9305      	str	r3, [sp, #20]
 808ad0a:	9b04      	ldr	r3, [sp, #16]
 808ad0c:	2b00      	cmp	r3, #0
 808ad0e:	dd07      	ble.n	808ad20 <_dtoa_r+0x818>
 808ad10:	ee18 1a10 	vmov	r1, s16
 808ad14:	461a      	mov	r2, r3
 808ad16:	4620      	mov	r0, r4
 808ad18:	f000 fd0e 	bl	808b738 <__lshift>
 808ad1c:	ee08 0a10 	vmov	s16, r0
 808ad20:	9b05      	ldr	r3, [sp, #20]
 808ad22:	2b00      	cmp	r3, #0
 808ad24:	dd05      	ble.n	808ad32 <_dtoa_r+0x82a>
 808ad26:	4631      	mov	r1, r6
 808ad28:	461a      	mov	r2, r3
 808ad2a:	4620      	mov	r0, r4
 808ad2c:	f000 fd04 	bl	808b738 <__lshift>
 808ad30:	4606      	mov	r6, r0
 808ad32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 808ad34:	2b00      	cmp	r3, #0
 808ad36:	d06e      	beq.n	808ae16 <_dtoa_r+0x90e>
 808ad38:	ee18 0a10 	vmov	r0, s16
 808ad3c:	4631      	mov	r1, r6
 808ad3e:	f000 fd6b 	bl	808b818 <__mcmp>
 808ad42:	2800      	cmp	r0, #0
 808ad44:	da67      	bge.n	808ae16 <_dtoa_r+0x90e>
 808ad46:	9b00      	ldr	r3, [sp, #0]
 808ad48:	3b01      	subs	r3, #1
 808ad4a:	ee18 1a10 	vmov	r1, s16
 808ad4e:	9300      	str	r3, [sp, #0]
 808ad50:	220a      	movs	r2, #10
 808ad52:	2300      	movs	r3, #0
 808ad54:	4620      	mov	r0, r4
 808ad56:	f000 fb3f 	bl	808b3d8 <__multadd>
 808ad5a:	9b08      	ldr	r3, [sp, #32]
 808ad5c:	ee08 0a10 	vmov	s16, r0
 808ad60:	2b00      	cmp	r3, #0
 808ad62:	f000 81b1 	beq.w	808b0c8 <_dtoa_r+0xbc0>
 808ad66:	2300      	movs	r3, #0
 808ad68:	4639      	mov	r1, r7
 808ad6a:	220a      	movs	r2, #10
 808ad6c:	4620      	mov	r0, r4
 808ad6e:	f000 fb33 	bl	808b3d8 <__multadd>
 808ad72:	9b02      	ldr	r3, [sp, #8]
 808ad74:	2b00      	cmp	r3, #0
 808ad76:	4607      	mov	r7, r0
 808ad78:	f300 808e 	bgt.w	808ae98 <_dtoa_r+0x990>
 808ad7c:	9b06      	ldr	r3, [sp, #24]
 808ad7e:	2b02      	cmp	r3, #2
 808ad80:	dc51      	bgt.n	808ae26 <_dtoa_r+0x91e>
 808ad82:	e089      	b.n	808ae98 <_dtoa_r+0x990>
 808ad84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 808ad86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 808ad8a:	e74b      	b.n	808ac24 <_dtoa_r+0x71c>
 808ad8c:	9b03      	ldr	r3, [sp, #12]
 808ad8e:	1e5e      	subs	r6, r3, #1
 808ad90:	9b07      	ldr	r3, [sp, #28]
 808ad92:	42b3      	cmp	r3, r6
 808ad94:	bfbf      	itttt	lt
 808ad96:	9b07      	ldrlt	r3, [sp, #28]
 808ad98:	9607      	strlt	r6, [sp, #28]
 808ad9a:	1af2      	sublt	r2, r6, r3
 808ad9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 808ad9e:	bfb6      	itet	lt
 808ada0:	189b      	addlt	r3, r3, r2
 808ada2:	1b9e      	subge	r6, r3, r6
 808ada4:	930a      	strlt	r3, [sp, #40]	; 0x28
 808ada6:	9b03      	ldr	r3, [sp, #12]
 808ada8:	bfb8      	it	lt
 808adaa:	2600      	movlt	r6, #0
 808adac:	2b00      	cmp	r3, #0
 808adae:	bfb7      	itett	lt
 808adb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 808adb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 808adb8:	1a9d      	sublt	r5, r3, r2
 808adba:	2300      	movlt	r3, #0
 808adbc:	e734      	b.n	808ac28 <_dtoa_r+0x720>
 808adbe:	9e07      	ldr	r6, [sp, #28]
 808adc0:	9d04      	ldr	r5, [sp, #16]
 808adc2:	9f08      	ldr	r7, [sp, #32]
 808adc4:	e73b      	b.n	808ac3e <_dtoa_r+0x736>
 808adc6:	9a07      	ldr	r2, [sp, #28]
 808adc8:	e767      	b.n	808ac9a <_dtoa_r+0x792>
 808adca:	9b06      	ldr	r3, [sp, #24]
 808adcc:	2b01      	cmp	r3, #1
 808adce:	dc18      	bgt.n	808ae02 <_dtoa_r+0x8fa>
 808add0:	f1ba 0f00 	cmp.w	sl, #0
 808add4:	d115      	bne.n	808ae02 <_dtoa_r+0x8fa>
 808add6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 808adda:	b993      	cbnz	r3, 808ae02 <_dtoa_r+0x8fa>
 808addc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 808ade0:	0d1b      	lsrs	r3, r3, #20
 808ade2:	051b      	lsls	r3, r3, #20
 808ade4:	b183      	cbz	r3, 808ae08 <_dtoa_r+0x900>
 808ade6:	9b04      	ldr	r3, [sp, #16]
 808ade8:	3301      	adds	r3, #1
 808adea:	9304      	str	r3, [sp, #16]
 808adec:	9b05      	ldr	r3, [sp, #20]
 808adee:	3301      	adds	r3, #1
 808adf0:	9305      	str	r3, [sp, #20]
 808adf2:	f04f 0801 	mov.w	r8, #1
 808adf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808adf8:	2b00      	cmp	r3, #0
 808adfa:	f47f af6a 	bne.w	808acd2 <_dtoa_r+0x7ca>
 808adfe:	2001      	movs	r0, #1
 808ae00:	e76f      	b.n	808ace2 <_dtoa_r+0x7da>
 808ae02:	f04f 0800 	mov.w	r8, #0
 808ae06:	e7f6      	b.n	808adf6 <_dtoa_r+0x8ee>
 808ae08:	4698      	mov	r8, r3
 808ae0a:	e7f4      	b.n	808adf6 <_dtoa_r+0x8ee>
 808ae0c:	f43f af7d 	beq.w	808ad0a <_dtoa_r+0x802>
 808ae10:	4618      	mov	r0, r3
 808ae12:	301c      	adds	r0, #28
 808ae14:	e772      	b.n	808acfc <_dtoa_r+0x7f4>
 808ae16:	9b03      	ldr	r3, [sp, #12]
 808ae18:	2b00      	cmp	r3, #0
 808ae1a:	dc37      	bgt.n	808ae8c <_dtoa_r+0x984>
 808ae1c:	9b06      	ldr	r3, [sp, #24]
 808ae1e:	2b02      	cmp	r3, #2
 808ae20:	dd34      	ble.n	808ae8c <_dtoa_r+0x984>
 808ae22:	9b03      	ldr	r3, [sp, #12]
 808ae24:	9302      	str	r3, [sp, #8]
 808ae26:	9b02      	ldr	r3, [sp, #8]
 808ae28:	b96b      	cbnz	r3, 808ae46 <_dtoa_r+0x93e>
 808ae2a:	4631      	mov	r1, r6
 808ae2c:	2205      	movs	r2, #5
 808ae2e:	4620      	mov	r0, r4
 808ae30:	f000 fad2 	bl	808b3d8 <__multadd>
 808ae34:	4601      	mov	r1, r0
 808ae36:	4606      	mov	r6, r0
 808ae38:	ee18 0a10 	vmov	r0, s16
 808ae3c:	f000 fcec 	bl	808b818 <__mcmp>
 808ae40:	2800      	cmp	r0, #0
 808ae42:	f73f adbb 	bgt.w	808a9bc <_dtoa_r+0x4b4>
 808ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808ae48:	9d01      	ldr	r5, [sp, #4]
 808ae4a:	43db      	mvns	r3, r3
 808ae4c:	9300      	str	r3, [sp, #0]
 808ae4e:	f04f 0800 	mov.w	r8, #0
 808ae52:	4631      	mov	r1, r6
 808ae54:	4620      	mov	r0, r4
 808ae56:	f000 fa9d 	bl	808b394 <_Bfree>
 808ae5a:	2f00      	cmp	r7, #0
 808ae5c:	f43f aea4 	beq.w	808aba8 <_dtoa_r+0x6a0>
 808ae60:	f1b8 0f00 	cmp.w	r8, #0
 808ae64:	d005      	beq.n	808ae72 <_dtoa_r+0x96a>
 808ae66:	45b8      	cmp	r8, r7
 808ae68:	d003      	beq.n	808ae72 <_dtoa_r+0x96a>
 808ae6a:	4641      	mov	r1, r8
 808ae6c:	4620      	mov	r0, r4
 808ae6e:	f000 fa91 	bl	808b394 <_Bfree>
 808ae72:	4639      	mov	r1, r7
 808ae74:	4620      	mov	r0, r4
 808ae76:	f000 fa8d 	bl	808b394 <_Bfree>
 808ae7a:	e695      	b.n	808aba8 <_dtoa_r+0x6a0>
 808ae7c:	2600      	movs	r6, #0
 808ae7e:	4637      	mov	r7, r6
 808ae80:	e7e1      	b.n	808ae46 <_dtoa_r+0x93e>
 808ae82:	9700      	str	r7, [sp, #0]
 808ae84:	4637      	mov	r7, r6
 808ae86:	e599      	b.n	808a9bc <_dtoa_r+0x4b4>
 808ae88:	40240000 	.word	0x40240000
 808ae8c:	9b08      	ldr	r3, [sp, #32]
 808ae8e:	2b00      	cmp	r3, #0
 808ae90:	f000 80ca 	beq.w	808b028 <_dtoa_r+0xb20>
 808ae94:	9b03      	ldr	r3, [sp, #12]
 808ae96:	9302      	str	r3, [sp, #8]
 808ae98:	2d00      	cmp	r5, #0
 808ae9a:	dd05      	ble.n	808aea8 <_dtoa_r+0x9a0>
 808ae9c:	4639      	mov	r1, r7
 808ae9e:	462a      	mov	r2, r5
 808aea0:	4620      	mov	r0, r4
 808aea2:	f000 fc49 	bl	808b738 <__lshift>
 808aea6:	4607      	mov	r7, r0
 808aea8:	f1b8 0f00 	cmp.w	r8, #0
 808aeac:	d05b      	beq.n	808af66 <_dtoa_r+0xa5e>
 808aeae:	6879      	ldr	r1, [r7, #4]
 808aeb0:	4620      	mov	r0, r4
 808aeb2:	f000 fa2f 	bl	808b314 <_Balloc>
 808aeb6:	4605      	mov	r5, r0
 808aeb8:	b928      	cbnz	r0, 808aec6 <_dtoa_r+0x9be>
 808aeba:	4b87      	ldr	r3, [pc, #540]	; (808b0d8 <_dtoa_r+0xbd0>)
 808aebc:	4602      	mov	r2, r0
 808aebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 808aec2:	f7ff bb3b 	b.w	808a53c <_dtoa_r+0x34>
 808aec6:	693a      	ldr	r2, [r7, #16]
 808aec8:	3202      	adds	r2, #2
 808aeca:	0092      	lsls	r2, r2, #2
 808aecc:	f107 010c 	add.w	r1, r7, #12
 808aed0:	300c      	adds	r0, #12
 808aed2:	f7fe fcb1 	bl	8089838 <memcpy>
 808aed6:	2201      	movs	r2, #1
 808aed8:	4629      	mov	r1, r5
 808aeda:	4620      	mov	r0, r4
 808aedc:	f000 fc2c 	bl	808b738 <__lshift>
 808aee0:	9b01      	ldr	r3, [sp, #4]
 808aee2:	f103 0901 	add.w	r9, r3, #1
 808aee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 808aeea:	4413      	add	r3, r2
 808aeec:	9305      	str	r3, [sp, #20]
 808aeee:	f00a 0301 	and.w	r3, sl, #1
 808aef2:	46b8      	mov	r8, r7
 808aef4:	9304      	str	r3, [sp, #16]
 808aef6:	4607      	mov	r7, r0
 808aef8:	4631      	mov	r1, r6
 808aefa:	ee18 0a10 	vmov	r0, s16
 808aefe:	f7ff fa77 	bl	808a3f0 <quorem>
 808af02:	4641      	mov	r1, r8
 808af04:	9002      	str	r0, [sp, #8]
 808af06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 808af0a:	ee18 0a10 	vmov	r0, s16
 808af0e:	f000 fc83 	bl	808b818 <__mcmp>
 808af12:	463a      	mov	r2, r7
 808af14:	9003      	str	r0, [sp, #12]
 808af16:	4631      	mov	r1, r6
 808af18:	4620      	mov	r0, r4
 808af1a:	f000 fc99 	bl	808b850 <__mdiff>
 808af1e:	68c2      	ldr	r2, [r0, #12]
 808af20:	f109 3bff 	add.w	fp, r9, #4294967295
 808af24:	4605      	mov	r5, r0
 808af26:	bb02      	cbnz	r2, 808af6a <_dtoa_r+0xa62>
 808af28:	4601      	mov	r1, r0
 808af2a:	ee18 0a10 	vmov	r0, s16
 808af2e:	f000 fc73 	bl	808b818 <__mcmp>
 808af32:	4602      	mov	r2, r0
 808af34:	4629      	mov	r1, r5
 808af36:	4620      	mov	r0, r4
 808af38:	9207      	str	r2, [sp, #28]
 808af3a:	f000 fa2b 	bl	808b394 <_Bfree>
 808af3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 808af42:	ea43 0102 	orr.w	r1, r3, r2
 808af46:	9b04      	ldr	r3, [sp, #16]
 808af48:	430b      	orrs	r3, r1
 808af4a:	464d      	mov	r5, r9
 808af4c:	d10f      	bne.n	808af6e <_dtoa_r+0xa66>
 808af4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 808af52:	d02a      	beq.n	808afaa <_dtoa_r+0xaa2>
 808af54:	9b03      	ldr	r3, [sp, #12]
 808af56:	2b00      	cmp	r3, #0
 808af58:	dd02      	ble.n	808af60 <_dtoa_r+0xa58>
 808af5a:	9b02      	ldr	r3, [sp, #8]
 808af5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 808af60:	f88b a000 	strb.w	sl, [fp]
 808af64:	e775      	b.n	808ae52 <_dtoa_r+0x94a>
 808af66:	4638      	mov	r0, r7
 808af68:	e7ba      	b.n	808aee0 <_dtoa_r+0x9d8>
 808af6a:	2201      	movs	r2, #1
 808af6c:	e7e2      	b.n	808af34 <_dtoa_r+0xa2c>
 808af6e:	9b03      	ldr	r3, [sp, #12]
 808af70:	2b00      	cmp	r3, #0
 808af72:	db04      	blt.n	808af7e <_dtoa_r+0xa76>
 808af74:	9906      	ldr	r1, [sp, #24]
 808af76:	430b      	orrs	r3, r1
 808af78:	9904      	ldr	r1, [sp, #16]
 808af7a:	430b      	orrs	r3, r1
 808af7c:	d122      	bne.n	808afc4 <_dtoa_r+0xabc>
 808af7e:	2a00      	cmp	r2, #0
 808af80:	ddee      	ble.n	808af60 <_dtoa_r+0xa58>
 808af82:	ee18 1a10 	vmov	r1, s16
 808af86:	2201      	movs	r2, #1
 808af88:	4620      	mov	r0, r4
 808af8a:	f000 fbd5 	bl	808b738 <__lshift>
 808af8e:	4631      	mov	r1, r6
 808af90:	ee08 0a10 	vmov	s16, r0
 808af94:	f000 fc40 	bl	808b818 <__mcmp>
 808af98:	2800      	cmp	r0, #0
 808af9a:	dc03      	bgt.n	808afa4 <_dtoa_r+0xa9c>
 808af9c:	d1e0      	bne.n	808af60 <_dtoa_r+0xa58>
 808af9e:	f01a 0f01 	tst.w	sl, #1
 808afa2:	d0dd      	beq.n	808af60 <_dtoa_r+0xa58>
 808afa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 808afa8:	d1d7      	bne.n	808af5a <_dtoa_r+0xa52>
 808afaa:	2339      	movs	r3, #57	; 0x39
 808afac:	f88b 3000 	strb.w	r3, [fp]
 808afb0:	462b      	mov	r3, r5
 808afb2:	461d      	mov	r5, r3
 808afb4:	3b01      	subs	r3, #1
 808afb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 808afba:	2a39      	cmp	r2, #57	; 0x39
 808afbc:	d071      	beq.n	808b0a2 <_dtoa_r+0xb9a>
 808afbe:	3201      	adds	r2, #1
 808afc0:	701a      	strb	r2, [r3, #0]
 808afc2:	e746      	b.n	808ae52 <_dtoa_r+0x94a>
 808afc4:	2a00      	cmp	r2, #0
 808afc6:	dd07      	ble.n	808afd8 <_dtoa_r+0xad0>
 808afc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 808afcc:	d0ed      	beq.n	808afaa <_dtoa_r+0xaa2>
 808afce:	f10a 0301 	add.w	r3, sl, #1
 808afd2:	f88b 3000 	strb.w	r3, [fp]
 808afd6:	e73c      	b.n	808ae52 <_dtoa_r+0x94a>
 808afd8:	9b05      	ldr	r3, [sp, #20]
 808afda:	f809 ac01 	strb.w	sl, [r9, #-1]
 808afde:	4599      	cmp	r9, r3
 808afe0:	d047      	beq.n	808b072 <_dtoa_r+0xb6a>
 808afe2:	ee18 1a10 	vmov	r1, s16
 808afe6:	2300      	movs	r3, #0
 808afe8:	220a      	movs	r2, #10
 808afea:	4620      	mov	r0, r4
 808afec:	f000 f9f4 	bl	808b3d8 <__multadd>
 808aff0:	45b8      	cmp	r8, r7
 808aff2:	ee08 0a10 	vmov	s16, r0
 808aff6:	f04f 0300 	mov.w	r3, #0
 808affa:	f04f 020a 	mov.w	r2, #10
 808affe:	4641      	mov	r1, r8
 808b000:	4620      	mov	r0, r4
 808b002:	d106      	bne.n	808b012 <_dtoa_r+0xb0a>
 808b004:	f000 f9e8 	bl	808b3d8 <__multadd>
 808b008:	4680      	mov	r8, r0
 808b00a:	4607      	mov	r7, r0
 808b00c:	f109 0901 	add.w	r9, r9, #1
 808b010:	e772      	b.n	808aef8 <_dtoa_r+0x9f0>
 808b012:	f000 f9e1 	bl	808b3d8 <__multadd>
 808b016:	4639      	mov	r1, r7
 808b018:	4680      	mov	r8, r0
 808b01a:	2300      	movs	r3, #0
 808b01c:	220a      	movs	r2, #10
 808b01e:	4620      	mov	r0, r4
 808b020:	f000 f9da 	bl	808b3d8 <__multadd>
 808b024:	4607      	mov	r7, r0
 808b026:	e7f1      	b.n	808b00c <_dtoa_r+0xb04>
 808b028:	9b03      	ldr	r3, [sp, #12]
 808b02a:	9302      	str	r3, [sp, #8]
 808b02c:	9d01      	ldr	r5, [sp, #4]
 808b02e:	ee18 0a10 	vmov	r0, s16
 808b032:	4631      	mov	r1, r6
 808b034:	f7ff f9dc 	bl	808a3f0 <quorem>
 808b038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 808b03c:	9b01      	ldr	r3, [sp, #4]
 808b03e:	f805 ab01 	strb.w	sl, [r5], #1
 808b042:	1aea      	subs	r2, r5, r3
 808b044:	9b02      	ldr	r3, [sp, #8]
 808b046:	4293      	cmp	r3, r2
 808b048:	dd09      	ble.n	808b05e <_dtoa_r+0xb56>
 808b04a:	ee18 1a10 	vmov	r1, s16
 808b04e:	2300      	movs	r3, #0
 808b050:	220a      	movs	r2, #10
 808b052:	4620      	mov	r0, r4
 808b054:	f000 f9c0 	bl	808b3d8 <__multadd>
 808b058:	ee08 0a10 	vmov	s16, r0
 808b05c:	e7e7      	b.n	808b02e <_dtoa_r+0xb26>
 808b05e:	9b02      	ldr	r3, [sp, #8]
 808b060:	2b00      	cmp	r3, #0
 808b062:	bfc8      	it	gt
 808b064:	461d      	movgt	r5, r3
 808b066:	9b01      	ldr	r3, [sp, #4]
 808b068:	bfd8      	it	le
 808b06a:	2501      	movle	r5, #1
 808b06c:	441d      	add	r5, r3
 808b06e:	f04f 0800 	mov.w	r8, #0
 808b072:	ee18 1a10 	vmov	r1, s16
 808b076:	2201      	movs	r2, #1
 808b078:	4620      	mov	r0, r4
 808b07a:	f000 fb5d 	bl	808b738 <__lshift>
 808b07e:	4631      	mov	r1, r6
 808b080:	ee08 0a10 	vmov	s16, r0
 808b084:	f000 fbc8 	bl	808b818 <__mcmp>
 808b088:	2800      	cmp	r0, #0
 808b08a:	dc91      	bgt.n	808afb0 <_dtoa_r+0xaa8>
 808b08c:	d102      	bne.n	808b094 <_dtoa_r+0xb8c>
 808b08e:	f01a 0f01 	tst.w	sl, #1
 808b092:	d18d      	bne.n	808afb0 <_dtoa_r+0xaa8>
 808b094:	462b      	mov	r3, r5
 808b096:	461d      	mov	r5, r3
 808b098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 808b09c:	2a30      	cmp	r2, #48	; 0x30
 808b09e:	d0fa      	beq.n	808b096 <_dtoa_r+0xb8e>
 808b0a0:	e6d7      	b.n	808ae52 <_dtoa_r+0x94a>
 808b0a2:	9a01      	ldr	r2, [sp, #4]
 808b0a4:	429a      	cmp	r2, r3
 808b0a6:	d184      	bne.n	808afb2 <_dtoa_r+0xaaa>
 808b0a8:	9b00      	ldr	r3, [sp, #0]
 808b0aa:	3301      	adds	r3, #1
 808b0ac:	9300      	str	r3, [sp, #0]
 808b0ae:	2331      	movs	r3, #49	; 0x31
 808b0b0:	7013      	strb	r3, [r2, #0]
 808b0b2:	e6ce      	b.n	808ae52 <_dtoa_r+0x94a>
 808b0b4:	4b09      	ldr	r3, [pc, #36]	; (808b0dc <_dtoa_r+0xbd4>)
 808b0b6:	f7ff ba95 	b.w	808a5e4 <_dtoa_r+0xdc>
 808b0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 808b0bc:	2b00      	cmp	r3, #0
 808b0be:	f47f aa6e 	bne.w	808a59e <_dtoa_r+0x96>
 808b0c2:	4b07      	ldr	r3, [pc, #28]	; (808b0e0 <_dtoa_r+0xbd8>)
 808b0c4:	f7ff ba8e 	b.w	808a5e4 <_dtoa_r+0xdc>
 808b0c8:	9b02      	ldr	r3, [sp, #8]
 808b0ca:	2b00      	cmp	r3, #0
 808b0cc:	dcae      	bgt.n	808b02c <_dtoa_r+0xb24>
 808b0ce:	9b06      	ldr	r3, [sp, #24]
 808b0d0:	2b02      	cmp	r3, #2
 808b0d2:	f73f aea8 	bgt.w	808ae26 <_dtoa_r+0x91e>
 808b0d6:	e7a9      	b.n	808b02c <_dtoa_r+0xb24>
 808b0d8:	0808d169 	.word	0x0808d169
 808b0dc:	0808cf2c 	.word	0x0808cf2c
 808b0e0:	0808d101 	.word	0x0808d101

0808b0e4 <std>:
 808b0e4:	2300      	movs	r3, #0
 808b0e6:	b510      	push	{r4, lr}
 808b0e8:	4604      	mov	r4, r0
 808b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 808b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 808b0f2:	6083      	str	r3, [r0, #8]
 808b0f4:	8181      	strh	r1, [r0, #12]
 808b0f6:	6643      	str	r3, [r0, #100]	; 0x64
 808b0f8:	81c2      	strh	r2, [r0, #14]
 808b0fa:	6183      	str	r3, [r0, #24]
 808b0fc:	4619      	mov	r1, r3
 808b0fe:	2208      	movs	r2, #8
 808b100:	305c      	adds	r0, #92	; 0x5c
 808b102:	f7fe fba7 	bl	8089854 <memset>
 808b106:	4b05      	ldr	r3, [pc, #20]	; (808b11c <std+0x38>)
 808b108:	6263      	str	r3, [r4, #36]	; 0x24
 808b10a:	4b05      	ldr	r3, [pc, #20]	; (808b120 <std+0x3c>)
 808b10c:	62a3      	str	r3, [r4, #40]	; 0x28
 808b10e:	4b05      	ldr	r3, [pc, #20]	; (808b124 <std+0x40>)
 808b110:	62e3      	str	r3, [r4, #44]	; 0x2c
 808b112:	4b05      	ldr	r3, [pc, #20]	; (808b128 <std+0x44>)
 808b114:	6224      	str	r4, [r4, #32]
 808b116:	6323      	str	r3, [r4, #48]	; 0x30
 808b118:	bd10      	pop	{r4, pc}
 808b11a:	bf00      	nop
 808b11c:	0808c195 	.word	0x0808c195
 808b120:	0808c1b7 	.word	0x0808c1b7
 808b124:	0808c1ef 	.word	0x0808c1ef
 808b128:	0808c213 	.word	0x0808c213

0808b12c <_cleanup_r>:
 808b12c:	4901      	ldr	r1, [pc, #4]	; (808b134 <_cleanup_r+0x8>)
 808b12e:	f000 b8c1 	b.w	808b2b4 <_fwalk_reent>
 808b132:	bf00      	nop
 808b134:	0808c4fd 	.word	0x0808c4fd

0808b138 <__sfmoreglue>:
 808b138:	b570      	push	{r4, r5, r6, lr}
 808b13a:	2268      	movs	r2, #104	; 0x68
 808b13c:	1e4d      	subs	r5, r1, #1
 808b13e:	4355      	muls	r5, r2
 808b140:	460e      	mov	r6, r1
 808b142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 808b146:	f000 fceb 	bl	808bb20 <_malloc_r>
 808b14a:	4604      	mov	r4, r0
 808b14c:	b140      	cbz	r0, 808b160 <__sfmoreglue+0x28>
 808b14e:	2100      	movs	r1, #0
 808b150:	e9c0 1600 	strd	r1, r6, [r0]
 808b154:	300c      	adds	r0, #12
 808b156:	60a0      	str	r0, [r4, #8]
 808b158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 808b15c:	f7fe fb7a 	bl	8089854 <memset>
 808b160:	4620      	mov	r0, r4
 808b162:	bd70      	pop	{r4, r5, r6, pc}

0808b164 <__sfp_lock_acquire>:
 808b164:	4801      	ldr	r0, [pc, #4]	; (808b16c <__sfp_lock_acquire+0x8>)
 808b166:	f000 b8ca 	b.w	808b2fe <__retarget_lock_acquire_recursive>
 808b16a:	bf00      	nop
 808b16c:	20000e29 	.word	0x20000e29

0808b170 <__sfp_lock_release>:
 808b170:	4801      	ldr	r0, [pc, #4]	; (808b178 <__sfp_lock_release+0x8>)
 808b172:	f000 b8c5 	b.w	808b300 <__retarget_lock_release_recursive>
 808b176:	bf00      	nop
 808b178:	20000e29 	.word	0x20000e29

0808b17c <__sinit_lock_acquire>:
 808b17c:	4801      	ldr	r0, [pc, #4]	; (808b184 <__sinit_lock_acquire+0x8>)
 808b17e:	f000 b8be 	b.w	808b2fe <__retarget_lock_acquire_recursive>
 808b182:	bf00      	nop
 808b184:	20000e2a 	.word	0x20000e2a

0808b188 <__sinit_lock_release>:
 808b188:	4801      	ldr	r0, [pc, #4]	; (808b190 <__sinit_lock_release+0x8>)
 808b18a:	f000 b8b9 	b.w	808b300 <__retarget_lock_release_recursive>
 808b18e:	bf00      	nop
 808b190:	20000e2a 	.word	0x20000e2a

0808b194 <__sinit>:
 808b194:	b510      	push	{r4, lr}
 808b196:	4604      	mov	r4, r0
 808b198:	f7ff fff0 	bl	808b17c <__sinit_lock_acquire>
 808b19c:	69a3      	ldr	r3, [r4, #24]
 808b19e:	b11b      	cbz	r3, 808b1a8 <__sinit+0x14>
 808b1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808b1a4:	f7ff bff0 	b.w	808b188 <__sinit_lock_release>
 808b1a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 808b1ac:	6523      	str	r3, [r4, #80]	; 0x50
 808b1ae:	4b13      	ldr	r3, [pc, #76]	; (808b1fc <__sinit+0x68>)
 808b1b0:	4a13      	ldr	r2, [pc, #76]	; (808b200 <__sinit+0x6c>)
 808b1b2:	681b      	ldr	r3, [r3, #0]
 808b1b4:	62a2      	str	r2, [r4, #40]	; 0x28
 808b1b6:	42a3      	cmp	r3, r4
 808b1b8:	bf04      	itt	eq
 808b1ba:	2301      	moveq	r3, #1
 808b1bc:	61a3      	streq	r3, [r4, #24]
 808b1be:	4620      	mov	r0, r4
 808b1c0:	f000 f820 	bl	808b204 <__sfp>
 808b1c4:	6060      	str	r0, [r4, #4]
 808b1c6:	4620      	mov	r0, r4
 808b1c8:	f000 f81c 	bl	808b204 <__sfp>
 808b1cc:	60a0      	str	r0, [r4, #8]
 808b1ce:	4620      	mov	r0, r4
 808b1d0:	f000 f818 	bl	808b204 <__sfp>
 808b1d4:	2200      	movs	r2, #0
 808b1d6:	60e0      	str	r0, [r4, #12]
 808b1d8:	2104      	movs	r1, #4
 808b1da:	6860      	ldr	r0, [r4, #4]
 808b1dc:	f7ff ff82 	bl	808b0e4 <std>
 808b1e0:	68a0      	ldr	r0, [r4, #8]
 808b1e2:	2201      	movs	r2, #1
 808b1e4:	2109      	movs	r1, #9
 808b1e6:	f7ff ff7d 	bl	808b0e4 <std>
 808b1ea:	68e0      	ldr	r0, [r4, #12]
 808b1ec:	2202      	movs	r2, #2
 808b1ee:	2112      	movs	r1, #18
 808b1f0:	f7ff ff78 	bl	808b0e4 <std>
 808b1f4:	2301      	movs	r3, #1
 808b1f6:	61a3      	str	r3, [r4, #24]
 808b1f8:	e7d2      	b.n	808b1a0 <__sinit+0xc>
 808b1fa:	bf00      	nop
 808b1fc:	0808cf18 	.word	0x0808cf18
 808b200:	0808b12d 	.word	0x0808b12d

0808b204 <__sfp>:
 808b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808b206:	4607      	mov	r7, r0
 808b208:	f7ff ffac 	bl	808b164 <__sfp_lock_acquire>
 808b20c:	4b1e      	ldr	r3, [pc, #120]	; (808b288 <__sfp+0x84>)
 808b20e:	681e      	ldr	r6, [r3, #0]
 808b210:	69b3      	ldr	r3, [r6, #24]
 808b212:	b913      	cbnz	r3, 808b21a <__sfp+0x16>
 808b214:	4630      	mov	r0, r6
 808b216:	f7ff ffbd 	bl	808b194 <__sinit>
 808b21a:	3648      	adds	r6, #72	; 0x48
 808b21c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 808b220:	3b01      	subs	r3, #1
 808b222:	d503      	bpl.n	808b22c <__sfp+0x28>
 808b224:	6833      	ldr	r3, [r6, #0]
 808b226:	b30b      	cbz	r3, 808b26c <__sfp+0x68>
 808b228:	6836      	ldr	r6, [r6, #0]
 808b22a:	e7f7      	b.n	808b21c <__sfp+0x18>
 808b22c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 808b230:	b9d5      	cbnz	r5, 808b268 <__sfp+0x64>
 808b232:	4b16      	ldr	r3, [pc, #88]	; (808b28c <__sfp+0x88>)
 808b234:	60e3      	str	r3, [r4, #12]
 808b236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 808b23a:	6665      	str	r5, [r4, #100]	; 0x64
 808b23c:	f000 f85e 	bl	808b2fc <__retarget_lock_init_recursive>
 808b240:	f7ff ff96 	bl	808b170 <__sfp_lock_release>
 808b244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 808b248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 808b24c:	6025      	str	r5, [r4, #0]
 808b24e:	61a5      	str	r5, [r4, #24]
 808b250:	2208      	movs	r2, #8
 808b252:	4629      	mov	r1, r5
 808b254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 808b258:	f7fe fafc 	bl	8089854 <memset>
 808b25c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 808b260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 808b264:	4620      	mov	r0, r4
 808b266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808b268:	3468      	adds	r4, #104	; 0x68
 808b26a:	e7d9      	b.n	808b220 <__sfp+0x1c>
 808b26c:	2104      	movs	r1, #4
 808b26e:	4638      	mov	r0, r7
 808b270:	f7ff ff62 	bl	808b138 <__sfmoreglue>
 808b274:	4604      	mov	r4, r0
 808b276:	6030      	str	r0, [r6, #0]
 808b278:	2800      	cmp	r0, #0
 808b27a:	d1d5      	bne.n	808b228 <__sfp+0x24>
 808b27c:	f7ff ff78 	bl	808b170 <__sfp_lock_release>
 808b280:	230c      	movs	r3, #12
 808b282:	603b      	str	r3, [r7, #0]
 808b284:	e7ee      	b.n	808b264 <__sfp+0x60>
 808b286:	bf00      	nop
 808b288:	0808cf18 	.word	0x0808cf18
 808b28c:	ffff0001 	.word	0xffff0001

0808b290 <fiprintf>:
 808b290:	b40e      	push	{r1, r2, r3}
 808b292:	b503      	push	{r0, r1, lr}
 808b294:	4601      	mov	r1, r0
 808b296:	ab03      	add	r3, sp, #12
 808b298:	4805      	ldr	r0, [pc, #20]	; (808b2b0 <fiprintf+0x20>)
 808b29a:	f853 2b04 	ldr.w	r2, [r3], #4
 808b29e:	6800      	ldr	r0, [r0, #0]
 808b2a0:	9301      	str	r3, [sp, #4]
 808b2a2:	f000 fe37 	bl	808bf14 <_vfiprintf_r>
 808b2a6:	b002      	add	sp, #8
 808b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 808b2ac:	b003      	add	sp, #12
 808b2ae:	4770      	bx	lr
 808b2b0:	20000090 	.word	0x20000090

0808b2b4 <_fwalk_reent>:
 808b2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808b2b8:	4606      	mov	r6, r0
 808b2ba:	4688      	mov	r8, r1
 808b2bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 808b2c0:	2700      	movs	r7, #0
 808b2c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 808b2c6:	f1b9 0901 	subs.w	r9, r9, #1
 808b2ca:	d505      	bpl.n	808b2d8 <_fwalk_reent+0x24>
 808b2cc:	6824      	ldr	r4, [r4, #0]
 808b2ce:	2c00      	cmp	r4, #0
 808b2d0:	d1f7      	bne.n	808b2c2 <_fwalk_reent+0xe>
 808b2d2:	4638      	mov	r0, r7
 808b2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808b2d8:	89ab      	ldrh	r3, [r5, #12]
 808b2da:	2b01      	cmp	r3, #1
 808b2dc:	d907      	bls.n	808b2ee <_fwalk_reent+0x3a>
 808b2de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 808b2e2:	3301      	adds	r3, #1
 808b2e4:	d003      	beq.n	808b2ee <_fwalk_reent+0x3a>
 808b2e6:	4629      	mov	r1, r5
 808b2e8:	4630      	mov	r0, r6
 808b2ea:	47c0      	blx	r8
 808b2ec:	4307      	orrs	r7, r0
 808b2ee:	3568      	adds	r5, #104	; 0x68
 808b2f0:	e7e9      	b.n	808b2c6 <_fwalk_reent+0x12>
	...

0808b2f4 <_localeconv_r>:
 808b2f4:	4800      	ldr	r0, [pc, #0]	; (808b2f8 <_localeconv_r+0x4>)
 808b2f6:	4770      	bx	lr
 808b2f8:	200001e4 	.word	0x200001e4

0808b2fc <__retarget_lock_init_recursive>:
 808b2fc:	4770      	bx	lr

0808b2fe <__retarget_lock_acquire_recursive>:
 808b2fe:	4770      	bx	lr

0808b300 <__retarget_lock_release_recursive>:
 808b300:	4770      	bx	lr
	...

0808b304 <malloc>:
 808b304:	4b02      	ldr	r3, [pc, #8]	; (808b310 <malloc+0xc>)
 808b306:	4601      	mov	r1, r0
 808b308:	6818      	ldr	r0, [r3, #0]
 808b30a:	f000 bc09 	b.w	808bb20 <_malloc_r>
 808b30e:	bf00      	nop
 808b310:	20000090 	.word	0x20000090

0808b314 <_Balloc>:
 808b314:	b570      	push	{r4, r5, r6, lr}
 808b316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808b318:	4604      	mov	r4, r0
 808b31a:	460d      	mov	r5, r1
 808b31c:	b976      	cbnz	r6, 808b33c <_Balloc+0x28>
 808b31e:	2010      	movs	r0, #16
 808b320:	f7ff fff0 	bl	808b304 <malloc>
 808b324:	4602      	mov	r2, r0
 808b326:	6260      	str	r0, [r4, #36]	; 0x24
 808b328:	b920      	cbnz	r0, 808b334 <_Balloc+0x20>
 808b32a:	4b18      	ldr	r3, [pc, #96]	; (808b38c <_Balloc+0x78>)
 808b32c:	4818      	ldr	r0, [pc, #96]	; (808b390 <_Balloc+0x7c>)
 808b32e:	2166      	movs	r1, #102	; 0x66
 808b330:	f7ff f840 	bl	808a3b4 <__assert_func>
 808b334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808b338:	6006      	str	r6, [r0, #0]
 808b33a:	60c6      	str	r6, [r0, #12]
 808b33c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 808b33e:	68f3      	ldr	r3, [r6, #12]
 808b340:	b183      	cbz	r3, 808b364 <_Balloc+0x50>
 808b342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808b344:	68db      	ldr	r3, [r3, #12]
 808b346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 808b34a:	b9b8      	cbnz	r0, 808b37c <_Balloc+0x68>
 808b34c:	2101      	movs	r1, #1
 808b34e:	fa01 f605 	lsl.w	r6, r1, r5
 808b352:	1d72      	adds	r2, r6, #5
 808b354:	0092      	lsls	r2, r2, #2
 808b356:	4620      	mov	r0, r4
 808b358:	f000 fb60 	bl	808ba1c <_calloc_r>
 808b35c:	b160      	cbz	r0, 808b378 <_Balloc+0x64>
 808b35e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 808b362:	e00e      	b.n	808b382 <_Balloc+0x6e>
 808b364:	2221      	movs	r2, #33	; 0x21
 808b366:	2104      	movs	r1, #4
 808b368:	4620      	mov	r0, r4
 808b36a:	f000 fb57 	bl	808ba1c <_calloc_r>
 808b36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808b370:	60f0      	str	r0, [r6, #12]
 808b372:	68db      	ldr	r3, [r3, #12]
 808b374:	2b00      	cmp	r3, #0
 808b376:	d1e4      	bne.n	808b342 <_Balloc+0x2e>
 808b378:	2000      	movs	r0, #0
 808b37a:	bd70      	pop	{r4, r5, r6, pc}
 808b37c:	6802      	ldr	r2, [r0, #0]
 808b37e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 808b382:	2300      	movs	r3, #0
 808b384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 808b388:	e7f7      	b.n	808b37a <_Balloc+0x66>
 808b38a:	bf00      	nop
 808b38c:	0808cf50 	.word	0x0808cf50
 808b390:	0808d1dc 	.word	0x0808d1dc

0808b394 <_Bfree>:
 808b394:	b570      	push	{r4, r5, r6, lr}
 808b396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 808b398:	4605      	mov	r5, r0
 808b39a:	460c      	mov	r4, r1
 808b39c:	b976      	cbnz	r6, 808b3bc <_Bfree+0x28>
 808b39e:	2010      	movs	r0, #16
 808b3a0:	f7ff ffb0 	bl	808b304 <malloc>
 808b3a4:	4602      	mov	r2, r0
 808b3a6:	6268      	str	r0, [r5, #36]	; 0x24
 808b3a8:	b920      	cbnz	r0, 808b3b4 <_Bfree+0x20>
 808b3aa:	4b09      	ldr	r3, [pc, #36]	; (808b3d0 <_Bfree+0x3c>)
 808b3ac:	4809      	ldr	r0, [pc, #36]	; (808b3d4 <_Bfree+0x40>)
 808b3ae:	218a      	movs	r1, #138	; 0x8a
 808b3b0:	f7ff f800 	bl	808a3b4 <__assert_func>
 808b3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 808b3b8:	6006      	str	r6, [r0, #0]
 808b3ba:	60c6      	str	r6, [r0, #12]
 808b3bc:	b13c      	cbz	r4, 808b3ce <_Bfree+0x3a>
 808b3be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 808b3c0:	6862      	ldr	r2, [r4, #4]
 808b3c2:	68db      	ldr	r3, [r3, #12]
 808b3c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808b3c8:	6021      	str	r1, [r4, #0]
 808b3ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 808b3ce:	bd70      	pop	{r4, r5, r6, pc}
 808b3d0:	0808cf50 	.word	0x0808cf50
 808b3d4:	0808d1dc 	.word	0x0808d1dc

0808b3d8 <__multadd>:
 808b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b3dc:	690d      	ldr	r5, [r1, #16]
 808b3de:	4607      	mov	r7, r0
 808b3e0:	460c      	mov	r4, r1
 808b3e2:	461e      	mov	r6, r3
 808b3e4:	f101 0c14 	add.w	ip, r1, #20
 808b3e8:	2000      	movs	r0, #0
 808b3ea:	f8dc 3000 	ldr.w	r3, [ip]
 808b3ee:	b299      	uxth	r1, r3
 808b3f0:	fb02 6101 	mla	r1, r2, r1, r6
 808b3f4:	0c1e      	lsrs	r6, r3, #16
 808b3f6:	0c0b      	lsrs	r3, r1, #16
 808b3f8:	fb02 3306 	mla	r3, r2, r6, r3
 808b3fc:	b289      	uxth	r1, r1
 808b3fe:	3001      	adds	r0, #1
 808b400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 808b404:	4285      	cmp	r5, r0
 808b406:	f84c 1b04 	str.w	r1, [ip], #4
 808b40a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 808b40e:	dcec      	bgt.n	808b3ea <__multadd+0x12>
 808b410:	b30e      	cbz	r6, 808b456 <__multadd+0x7e>
 808b412:	68a3      	ldr	r3, [r4, #8]
 808b414:	42ab      	cmp	r3, r5
 808b416:	dc19      	bgt.n	808b44c <__multadd+0x74>
 808b418:	6861      	ldr	r1, [r4, #4]
 808b41a:	4638      	mov	r0, r7
 808b41c:	3101      	adds	r1, #1
 808b41e:	f7ff ff79 	bl	808b314 <_Balloc>
 808b422:	4680      	mov	r8, r0
 808b424:	b928      	cbnz	r0, 808b432 <__multadd+0x5a>
 808b426:	4602      	mov	r2, r0
 808b428:	4b0c      	ldr	r3, [pc, #48]	; (808b45c <__multadd+0x84>)
 808b42a:	480d      	ldr	r0, [pc, #52]	; (808b460 <__multadd+0x88>)
 808b42c:	21b5      	movs	r1, #181	; 0xb5
 808b42e:	f7fe ffc1 	bl	808a3b4 <__assert_func>
 808b432:	6922      	ldr	r2, [r4, #16]
 808b434:	3202      	adds	r2, #2
 808b436:	f104 010c 	add.w	r1, r4, #12
 808b43a:	0092      	lsls	r2, r2, #2
 808b43c:	300c      	adds	r0, #12
 808b43e:	f7fe f9fb 	bl	8089838 <memcpy>
 808b442:	4621      	mov	r1, r4
 808b444:	4638      	mov	r0, r7
 808b446:	f7ff ffa5 	bl	808b394 <_Bfree>
 808b44a:	4644      	mov	r4, r8
 808b44c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808b450:	3501      	adds	r5, #1
 808b452:	615e      	str	r6, [r3, #20]
 808b454:	6125      	str	r5, [r4, #16]
 808b456:	4620      	mov	r0, r4
 808b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b45c:	0808d169 	.word	0x0808d169
 808b460:	0808d1dc 	.word	0x0808d1dc

0808b464 <__hi0bits>:
 808b464:	0c03      	lsrs	r3, r0, #16
 808b466:	041b      	lsls	r3, r3, #16
 808b468:	b9d3      	cbnz	r3, 808b4a0 <__hi0bits+0x3c>
 808b46a:	0400      	lsls	r0, r0, #16
 808b46c:	2310      	movs	r3, #16
 808b46e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808b472:	bf04      	itt	eq
 808b474:	0200      	lsleq	r0, r0, #8
 808b476:	3308      	addeq	r3, #8
 808b478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808b47c:	bf04      	itt	eq
 808b47e:	0100      	lsleq	r0, r0, #4
 808b480:	3304      	addeq	r3, #4
 808b482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808b486:	bf04      	itt	eq
 808b488:	0080      	lsleq	r0, r0, #2
 808b48a:	3302      	addeq	r3, #2
 808b48c:	2800      	cmp	r0, #0
 808b48e:	db05      	blt.n	808b49c <__hi0bits+0x38>
 808b490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 808b494:	f103 0301 	add.w	r3, r3, #1
 808b498:	bf08      	it	eq
 808b49a:	2320      	moveq	r3, #32
 808b49c:	4618      	mov	r0, r3
 808b49e:	4770      	bx	lr
 808b4a0:	2300      	movs	r3, #0
 808b4a2:	e7e4      	b.n	808b46e <__hi0bits+0xa>

0808b4a4 <__lo0bits>:
 808b4a4:	6803      	ldr	r3, [r0, #0]
 808b4a6:	f013 0207 	ands.w	r2, r3, #7
 808b4aa:	4601      	mov	r1, r0
 808b4ac:	d00b      	beq.n	808b4c6 <__lo0bits+0x22>
 808b4ae:	07da      	lsls	r2, r3, #31
 808b4b0:	d423      	bmi.n	808b4fa <__lo0bits+0x56>
 808b4b2:	0798      	lsls	r0, r3, #30
 808b4b4:	bf49      	itett	mi
 808b4b6:	085b      	lsrmi	r3, r3, #1
 808b4b8:	089b      	lsrpl	r3, r3, #2
 808b4ba:	2001      	movmi	r0, #1
 808b4bc:	600b      	strmi	r3, [r1, #0]
 808b4be:	bf5c      	itt	pl
 808b4c0:	600b      	strpl	r3, [r1, #0]
 808b4c2:	2002      	movpl	r0, #2
 808b4c4:	4770      	bx	lr
 808b4c6:	b298      	uxth	r0, r3
 808b4c8:	b9a8      	cbnz	r0, 808b4f6 <__lo0bits+0x52>
 808b4ca:	0c1b      	lsrs	r3, r3, #16
 808b4cc:	2010      	movs	r0, #16
 808b4ce:	b2da      	uxtb	r2, r3
 808b4d0:	b90a      	cbnz	r2, 808b4d6 <__lo0bits+0x32>
 808b4d2:	3008      	adds	r0, #8
 808b4d4:	0a1b      	lsrs	r3, r3, #8
 808b4d6:	071a      	lsls	r2, r3, #28
 808b4d8:	bf04      	itt	eq
 808b4da:	091b      	lsreq	r3, r3, #4
 808b4dc:	3004      	addeq	r0, #4
 808b4de:	079a      	lsls	r2, r3, #30
 808b4e0:	bf04      	itt	eq
 808b4e2:	089b      	lsreq	r3, r3, #2
 808b4e4:	3002      	addeq	r0, #2
 808b4e6:	07da      	lsls	r2, r3, #31
 808b4e8:	d403      	bmi.n	808b4f2 <__lo0bits+0x4e>
 808b4ea:	085b      	lsrs	r3, r3, #1
 808b4ec:	f100 0001 	add.w	r0, r0, #1
 808b4f0:	d005      	beq.n	808b4fe <__lo0bits+0x5a>
 808b4f2:	600b      	str	r3, [r1, #0]
 808b4f4:	4770      	bx	lr
 808b4f6:	4610      	mov	r0, r2
 808b4f8:	e7e9      	b.n	808b4ce <__lo0bits+0x2a>
 808b4fa:	2000      	movs	r0, #0
 808b4fc:	4770      	bx	lr
 808b4fe:	2020      	movs	r0, #32
 808b500:	4770      	bx	lr
	...

0808b504 <__i2b>:
 808b504:	b510      	push	{r4, lr}
 808b506:	460c      	mov	r4, r1
 808b508:	2101      	movs	r1, #1
 808b50a:	f7ff ff03 	bl	808b314 <_Balloc>
 808b50e:	4602      	mov	r2, r0
 808b510:	b928      	cbnz	r0, 808b51e <__i2b+0x1a>
 808b512:	4b05      	ldr	r3, [pc, #20]	; (808b528 <__i2b+0x24>)
 808b514:	4805      	ldr	r0, [pc, #20]	; (808b52c <__i2b+0x28>)
 808b516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 808b51a:	f7fe ff4b 	bl	808a3b4 <__assert_func>
 808b51e:	2301      	movs	r3, #1
 808b520:	6144      	str	r4, [r0, #20]
 808b522:	6103      	str	r3, [r0, #16]
 808b524:	bd10      	pop	{r4, pc}
 808b526:	bf00      	nop
 808b528:	0808d169 	.word	0x0808d169
 808b52c:	0808d1dc 	.word	0x0808d1dc

0808b530 <__multiply>:
 808b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b534:	4691      	mov	r9, r2
 808b536:	690a      	ldr	r2, [r1, #16]
 808b538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808b53c:	429a      	cmp	r2, r3
 808b53e:	bfb8      	it	lt
 808b540:	460b      	movlt	r3, r1
 808b542:	460c      	mov	r4, r1
 808b544:	bfbc      	itt	lt
 808b546:	464c      	movlt	r4, r9
 808b548:	4699      	movlt	r9, r3
 808b54a:	6927      	ldr	r7, [r4, #16]
 808b54c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 808b550:	68a3      	ldr	r3, [r4, #8]
 808b552:	6861      	ldr	r1, [r4, #4]
 808b554:	eb07 060a 	add.w	r6, r7, sl
 808b558:	42b3      	cmp	r3, r6
 808b55a:	b085      	sub	sp, #20
 808b55c:	bfb8      	it	lt
 808b55e:	3101      	addlt	r1, #1
 808b560:	f7ff fed8 	bl	808b314 <_Balloc>
 808b564:	b930      	cbnz	r0, 808b574 <__multiply+0x44>
 808b566:	4602      	mov	r2, r0
 808b568:	4b44      	ldr	r3, [pc, #272]	; (808b67c <__multiply+0x14c>)
 808b56a:	4845      	ldr	r0, [pc, #276]	; (808b680 <__multiply+0x150>)
 808b56c:	f240 115d 	movw	r1, #349	; 0x15d
 808b570:	f7fe ff20 	bl	808a3b4 <__assert_func>
 808b574:	f100 0514 	add.w	r5, r0, #20
 808b578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 808b57c:	462b      	mov	r3, r5
 808b57e:	2200      	movs	r2, #0
 808b580:	4543      	cmp	r3, r8
 808b582:	d321      	bcc.n	808b5c8 <__multiply+0x98>
 808b584:	f104 0314 	add.w	r3, r4, #20
 808b588:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 808b58c:	f109 0314 	add.w	r3, r9, #20
 808b590:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 808b594:	9202      	str	r2, [sp, #8]
 808b596:	1b3a      	subs	r2, r7, r4
 808b598:	3a15      	subs	r2, #21
 808b59a:	f022 0203 	bic.w	r2, r2, #3
 808b59e:	3204      	adds	r2, #4
 808b5a0:	f104 0115 	add.w	r1, r4, #21
 808b5a4:	428f      	cmp	r7, r1
 808b5a6:	bf38      	it	cc
 808b5a8:	2204      	movcc	r2, #4
 808b5aa:	9201      	str	r2, [sp, #4]
 808b5ac:	9a02      	ldr	r2, [sp, #8]
 808b5ae:	9303      	str	r3, [sp, #12]
 808b5b0:	429a      	cmp	r2, r3
 808b5b2:	d80c      	bhi.n	808b5ce <__multiply+0x9e>
 808b5b4:	2e00      	cmp	r6, #0
 808b5b6:	dd03      	ble.n	808b5c0 <__multiply+0x90>
 808b5b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 808b5bc:	2b00      	cmp	r3, #0
 808b5be:	d05a      	beq.n	808b676 <__multiply+0x146>
 808b5c0:	6106      	str	r6, [r0, #16]
 808b5c2:	b005      	add	sp, #20
 808b5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b5c8:	f843 2b04 	str.w	r2, [r3], #4
 808b5cc:	e7d8      	b.n	808b580 <__multiply+0x50>
 808b5ce:	f8b3 a000 	ldrh.w	sl, [r3]
 808b5d2:	f1ba 0f00 	cmp.w	sl, #0
 808b5d6:	d024      	beq.n	808b622 <__multiply+0xf2>
 808b5d8:	f104 0e14 	add.w	lr, r4, #20
 808b5dc:	46a9      	mov	r9, r5
 808b5de:	f04f 0c00 	mov.w	ip, #0
 808b5e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 808b5e6:	f8d9 1000 	ldr.w	r1, [r9]
 808b5ea:	fa1f fb82 	uxth.w	fp, r2
 808b5ee:	b289      	uxth	r1, r1
 808b5f0:	fb0a 110b 	mla	r1, sl, fp, r1
 808b5f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 808b5f8:	f8d9 2000 	ldr.w	r2, [r9]
 808b5fc:	4461      	add	r1, ip
 808b5fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 808b602:	fb0a c20b 	mla	r2, sl, fp, ip
 808b606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 808b60a:	b289      	uxth	r1, r1
 808b60c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 808b610:	4577      	cmp	r7, lr
 808b612:	f849 1b04 	str.w	r1, [r9], #4
 808b616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 808b61a:	d8e2      	bhi.n	808b5e2 <__multiply+0xb2>
 808b61c:	9a01      	ldr	r2, [sp, #4]
 808b61e:	f845 c002 	str.w	ip, [r5, r2]
 808b622:	9a03      	ldr	r2, [sp, #12]
 808b624:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 808b628:	3304      	adds	r3, #4
 808b62a:	f1b9 0f00 	cmp.w	r9, #0
 808b62e:	d020      	beq.n	808b672 <__multiply+0x142>
 808b630:	6829      	ldr	r1, [r5, #0]
 808b632:	f104 0c14 	add.w	ip, r4, #20
 808b636:	46ae      	mov	lr, r5
 808b638:	f04f 0a00 	mov.w	sl, #0
 808b63c:	f8bc b000 	ldrh.w	fp, [ip]
 808b640:	f8be 2002 	ldrh.w	r2, [lr, #2]
 808b644:	fb09 220b 	mla	r2, r9, fp, r2
 808b648:	4492      	add	sl, r2
 808b64a:	b289      	uxth	r1, r1
 808b64c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 808b650:	f84e 1b04 	str.w	r1, [lr], #4
 808b654:	f85c 2b04 	ldr.w	r2, [ip], #4
 808b658:	f8be 1000 	ldrh.w	r1, [lr]
 808b65c:	0c12      	lsrs	r2, r2, #16
 808b65e:	fb09 1102 	mla	r1, r9, r2, r1
 808b662:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 808b666:	4567      	cmp	r7, ip
 808b668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 808b66c:	d8e6      	bhi.n	808b63c <__multiply+0x10c>
 808b66e:	9a01      	ldr	r2, [sp, #4]
 808b670:	50a9      	str	r1, [r5, r2]
 808b672:	3504      	adds	r5, #4
 808b674:	e79a      	b.n	808b5ac <__multiply+0x7c>
 808b676:	3e01      	subs	r6, #1
 808b678:	e79c      	b.n	808b5b4 <__multiply+0x84>
 808b67a:	bf00      	nop
 808b67c:	0808d169 	.word	0x0808d169
 808b680:	0808d1dc 	.word	0x0808d1dc

0808b684 <__pow5mult>:
 808b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808b688:	4615      	mov	r5, r2
 808b68a:	f012 0203 	ands.w	r2, r2, #3
 808b68e:	4606      	mov	r6, r0
 808b690:	460f      	mov	r7, r1
 808b692:	d007      	beq.n	808b6a4 <__pow5mult+0x20>
 808b694:	4c25      	ldr	r4, [pc, #148]	; (808b72c <__pow5mult+0xa8>)
 808b696:	3a01      	subs	r2, #1
 808b698:	2300      	movs	r3, #0
 808b69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808b69e:	f7ff fe9b 	bl	808b3d8 <__multadd>
 808b6a2:	4607      	mov	r7, r0
 808b6a4:	10ad      	asrs	r5, r5, #2
 808b6a6:	d03d      	beq.n	808b724 <__pow5mult+0xa0>
 808b6a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808b6aa:	b97c      	cbnz	r4, 808b6cc <__pow5mult+0x48>
 808b6ac:	2010      	movs	r0, #16
 808b6ae:	f7ff fe29 	bl	808b304 <malloc>
 808b6b2:	4602      	mov	r2, r0
 808b6b4:	6270      	str	r0, [r6, #36]	; 0x24
 808b6b6:	b928      	cbnz	r0, 808b6c4 <__pow5mult+0x40>
 808b6b8:	4b1d      	ldr	r3, [pc, #116]	; (808b730 <__pow5mult+0xac>)
 808b6ba:	481e      	ldr	r0, [pc, #120]	; (808b734 <__pow5mult+0xb0>)
 808b6bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 808b6c0:	f7fe fe78 	bl	808a3b4 <__assert_func>
 808b6c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 808b6c8:	6004      	str	r4, [r0, #0]
 808b6ca:	60c4      	str	r4, [r0, #12]
 808b6cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808b6d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808b6d4:	b94c      	cbnz	r4, 808b6ea <__pow5mult+0x66>
 808b6d6:	f240 2171 	movw	r1, #625	; 0x271
 808b6da:	4630      	mov	r0, r6
 808b6dc:	f7ff ff12 	bl	808b504 <__i2b>
 808b6e0:	2300      	movs	r3, #0
 808b6e2:	f8c8 0008 	str.w	r0, [r8, #8]
 808b6e6:	4604      	mov	r4, r0
 808b6e8:	6003      	str	r3, [r0, #0]
 808b6ea:	f04f 0900 	mov.w	r9, #0
 808b6ee:	07eb      	lsls	r3, r5, #31
 808b6f0:	d50a      	bpl.n	808b708 <__pow5mult+0x84>
 808b6f2:	4639      	mov	r1, r7
 808b6f4:	4622      	mov	r2, r4
 808b6f6:	4630      	mov	r0, r6
 808b6f8:	f7ff ff1a 	bl	808b530 <__multiply>
 808b6fc:	4639      	mov	r1, r7
 808b6fe:	4680      	mov	r8, r0
 808b700:	4630      	mov	r0, r6
 808b702:	f7ff fe47 	bl	808b394 <_Bfree>
 808b706:	4647      	mov	r7, r8
 808b708:	106d      	asrs	r5, r5, #1
 808b70a:	d00b      	beq.n	808b724 <__pow5mult+0xa0>
 808b70c:	6820      	ldr	r0, [r4, #0]
 808b70e:	b938      	cbnz	r0, 808b720 <__pow5mult+0x9c>
 808b710:	4622      	mov	r2, r4
 808b712:	4621      	mov	r1, r4
 808b714:	4630      	mov	r0, r6
 808b716:	f7ff ff0b 	bl	808b530 <__multiply>
 808b71a:	6020      	str	r0, [r4, #0]
 808b71c:	f8c0 9000 	str.w	r9, [r0]
 808b720:	4604      	mov	r4, r0
 808b722:	e7e4      	b.n	808b6ee <__pow5mult+0x6a>
 808b724:	4638      	mov	r0, r7
 808b726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808b72a:	bf00      	nop
 808b72c:	0808d328 	.word	0x0808d328
 808b730:	0808cf50 	.word	0x0808cf50
 808b734:	0808d1dc 	.word	0x0808d1dc

0808b738 <__lshift>:
 808b738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808b73c:	460c      	mov	r4, r1
 808b73e:	6849      	ldr	r1, [r1, #4]
 808b740:	6923      	ldr	r3, [r4, #16]
 808b742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 808b746:	68a3      	ldr	r3, [r4, #8]
 808b748:	4607      	mov	r7, r0
 808b74a:	4691      	mov	r9, r2
 808b74c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808b750:	f108 0601 	add.w	r6, r8, #1
 808b754:	42b3      	cmp	r3, r6
 808b756:	db0b      	blt.n	808b770 <__lshift+0x38>
 808b758:	4638      	mov	r0, r7
 808b75a:	f7ff fddb 	bl	808b314 <_Balloc>
 808b75e:	4605      	mov	r5, r0
 808b760:	b948      	cbnz	r0, 808b776 <__lshift+0x3e>
 808b762:	4602      	mov	r2, r0
 808b764:	4b2a      	ldr	r3, [pc, #168]	; (808b810 <__lshift+0xd8>)
 808b766:	482b      	ldr	r0, [pc, #172]	; (808b814 <__lshift+0xdc>)
 808b768:	f240 11d9 	movw	r1, #473	; 0x1d9
 808b76c:	f7fe fe22 	bl	808a3b4 <__assert_func>
 808b770:	3101      	adds	r1, #1
 808b772:	005b      	lsls	r3, r3, #1
 808b774:	e7ee      	b.n	808b754 <__lshift+0x1c>
 808b776:	2300      	movs	r3, #0
 808b778:	f100 0114 	add.w	r1, r0, #20
 808b77c:	f100 0210 	add.w	r2, r0, #16
 808b780:	4618      	mov	r0, r3
 808b782:	4553      	cmp	r3, sl
 808b784:	db37      	blt.n	808b7f6 <__lshift+0xbe>
 808b786:	6920      	ldr	r0, [r4, #16]
 808b788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 808b78c:	f104 0314 	add.w	r3, r4, #20
 808b790:	f019 091f 	ands.w	r9, r9, #31
 808b794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 808b798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 808b79c:	d02f      	beq.n	808b7fe <__lshift+0xc6>
 808b79e:	f1c9 0e20 	rsb	lr, r9, #32
 808b7a2:	468a      	mov	sl, r1
 808b7a4:	f04f 0c00 	mov.w	ip, #0
 808b7a8:	681a      	ldr	r2, [r3, #0]
 808b7aa:	fa02 f209 	lsl.w	r2, r2, r9
 808b7ae:	ea42 020c 	orr.w	r2, r2, ip
 808b7b2:	f84a 2b04 	str.w	r2, [sl], #4
 808b7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 808b7ba:	4298      	cmp	r0, r3
 808b7bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 808b7c0:	d8f2      	bhi.n	808b7a8 <__lshift+0x70>
 808b7c2:	1b03      	subs	r3, r0, r4
 808b7c4:	3b15      	subs	r3, #21
 808b7c6:	f023 0303 	bic.w	r3, r3, #3
 808b7ca:	3304      	adds	r3, #4
 808b7cc:	f104 0215 	add.w	r2, r4, #21
 808b7d0:	4290      	cmp	r0, r2
 808b7d2:	bf38      	it	cc
 808b7d4:	2304      	movcc	r3, #4
 808b7d6:	f841 c003 	str.w	ip, [r1, r3]
 808b7da:	f1bc 0f00 	cmp.w	ip, #0
 808b7de:	d001      	beq.n	808b7e4 <__lshift+0xac>
 808b7e0:	f108 0602 	add.w	r6, r8, #2
 808b7e4:	3e01      	subs	r6, #1
 808b7e6:	4638      	mov	r0, r7
 808b7e8:	612e      	str	r6, [r5, #16]
 808b7ea:	4621      	mov	r1, r4
 808b7ec:	f7ff fdd2 	bl	808b394 <_Bfree>
 808b7f0:	4628      	mov	r0, r5
 808b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808b7f6:	f842 0f04 	str.w	r0, [r2, #4]!
 808b7fa:	3301      	adds	r3, #1
 808b7fc:	e7c1      	b.n	808b782 <__lshift+0x4a>
 808b7fe:	3904      	subs	r1, #4
 808b800:	f853 2b04 	ldr.w	r2, [r3], #4
 808b804:	f841 2f04 	str.w	r2, [r1, #4]!
 808b808:	4298      	cmp	r0, r3
 808b80a:	d8f9      	bhi.n	808b800 <__lshift+0xc8>
 808b80c:	e7ea      	b.n	808b7e4 <__lshift+0xac>
 808b80e:	bf00      	nop
 808b810:	0808d169 	.word	0x0808d169
 808b814:	0808d1dc 	.word	0x0808d1dc

0808b818 <__mcmp>:
 808b818:	b530      	push	{r4, r5, lr}
 808b81a:	6902      	ldr	r2, [r0, #16]
 808b81c:	690c      	ldr	r4, [r1, #16]
 808b81e:	1b12      	subs	r2, r2, r4
 808b820:	d10e      	bne.n	808b840 <__mcmp+0x28>
 808b822:	f100 0314 	add.w	r3, r0, #20
 808b826:	3114      	adds	r1, #20
 808b828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 808b82c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 808b830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 808b834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 808b838:	42a5      	cmp	r5, r4
 808b83a:	d003      	beq.n	808b844 <__mcmp+0x2c>
 808b83c:	d305      	bcc.n	808b84a <__mcmp+0x32>
 808b83e:	2201      	movs	r2, #1
 808b840:	4610      	mov	r0, r2
 808b842:	bd30      	pop	{r4, r5, pc}
 808b844:	4283      	cmp	r3, r0
 808b846:	d3f3      	bcc.n	808b830 <__mcmp+0x18>
 808b848:	e7fa      	b.n	808b840 <__mcmp+0x28>
 808b84a:	f04f 32ff 	mov.w	r2, #4294967295
 808b84e:	e7f7      	b.n	808b840 <__mcmp+0x28>

0808b850 <__mdiff>:
 808b850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b854:	460c      	mov	r4, r1
 808b856:	4606      	mov	r6, r0
 808b858:	4611      	mov	r1, r2
 808b85a:	4620      	mov	r0, r4
 808b85c:	4690      	mov	r8, r2
 808b85e:	f7ff ffdb 	bl	808b818 <__mcmp>
 808b862:	1e05      	subs	r5, r0, #0
 808b864:	d110      	bne.n	808b888 <__mdiff+0x38>
 808b866:	4629      	mov	r1, r5
 808b868:	4630      	mov	r0, r6
 808b86a:	f7ff fd53 	bl	808b314 <_Balloc>
 808b86e:	b930      	cbnz	r0, 808b87e <__mdiff+0x2e>
 808b870:	4b3a      	ldr	r3, [pc, #232]	; (808b95c <__mdiff+0x10c>)
 808b872:	4602      	mov	r2, r0
 808b874:	f240 2132 	movw	r1, #562	; 0x232
 808b878:	4839      	ldr	r0, [pc, #228]	; (808b960 <__mdiff+0x110>)
 808b87a:	f7fe fd9b 	bl	808a3b4 <__assert_func>
 808b87e:	2301      	movs	r3, #1
 808b880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 808b884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b888:	bfa4      	itt	ge
 808b88a:	4643      	movge	r3, r8
 808b88c:	46a0      	movge	r8, r4
 808b88e:	4630      	mov	r0, r6
 808b890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808b894:	bfa6      	itte	ge
 808b896:	461c      	movge	r4, r3
 808b898:	2500      	movge	r5, #0
 808b89a:	2501      	movlt	r5, #1
 808b89c:	f7ff fd3a 	bl	808b314 <_Balloc>
 808b8a0:	b920      	cbnz	r0, 808b8ac <__mdiff+0x5c>
 808b8a2:	4b2e      	ldr	r3, [pc, #184]	; (808b95c <__mdiff+0x10c>)
 808b8a4:	4602      	mov	r2, r0
 808b8a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 808b8aa:	e7e5      	b.n	808b878 <__mdiff+0x28>
 808b8ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808b8b0:	6926      	ldr	r6, [r4, #16]
 808b8b2:	60c5      	str	r5, [r0, #12]
 808b8b4:	f104 0914 	add.w	r9, r4, #20
 808b8b8:	f108 0514 	add.w	r5, r8, #20
 808b8bc:	f100 0e14 	add.w	lr, r0, #20
 808b8c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 808b8c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 808b8c8:	f108 0210 	add.w	r2, r8, #16
 808b8cc:	46f2      	mov	sl, lr
 808b8ce:	2100      	movs	r1, #0
 808b8d0:	f859 3b04 	ldr.w	r3, [r9], #4
 808b8d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 808b8d8:	fa1f f883 	uxth.w	r8, r3
 808b8dc:	fa11 f18b 	uxtah	r1, r1, fp
 808b8e0:	0c1b      	lsrs	r3, r3, #16
 808b8e2:	eba1 0808 	sub.w	r8, r1, r8
 808b8e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 808b8ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 808b8ee:	fa1f f888 	uxth.w	r8, r8
 808b8f2:	1419      	asrs	r1, r3, #16
 808b8f4:	454e      	cmp	r6, r9
 808b8f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 808b8fa:	f84a 3b04 	str.w	r3, [sl], #4
 808b8fe:	d8e7      	bhi.n	808b8d0 <__mdiff+0x80>
 808b900:	1b33      	subs	r3, r6, r4
 808b902:	3b15      	subs	r3, #21
 808b904:	f023 0303 	bic.w	r3, r3, #3
 808b908:	3304      	adds	r3, #4
 808b90a:	3415      	adds	r4, #21
 808b90c:	42a6      	cmp	r6, r4
 808b90e:	bf38      	it	cc
 808b910:	2304      	movcc	r3, #4
 808b912:	441d      	add	r5, r3
 808b914:	4473      	add	r3, lr
 808b916:	469e      	mov	lr, r3
 808b918:	462e      	mov	r6, r5
 808b91a:	4566      	cmp	r6, ip
 808b91c:	d30e      	bcc.n	808b93c <__mdiff+0xec>
 808b91e:	f10c 0203 	add.w	r2, ip, #3
 808b922:	1b52      	subs	r2, r2, r5
 808b924:	f022 0203 	bic.w	r2, r2, #3
 808b928:	3d03      	subs	r5, #3
 808b92a:	45ac      	cmp	ip, r5
 808b92c:	bf38      	it	cc
 808b92e:	2200      	movcc	r2, #0
 808b930:	441a      	add	r2, r3
 808b932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 808b936:	b17b      	cbz	r3, 808b958 <__mdiff+0x108>
 808b938:	6107      	str	r7, [r0, #16]
 808b93a:	e7a3      	b.n	808b884 <__mdiff+0x34>
 808b93c:	f856 8b04 	ldr.w	r8, [r6], #4
 808b940:	fa11 f288 	uxtah	r2, r1, r8
 808b944:	1414      	asrs	r4, r2, #16
 808b946:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 808b94a:	b292      	uxth	r2, r2
 808b94c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 808b950:	f84e 2b04 	str.w	r2, [lr], #4
 808b954:	1421      	asrs	r1, r4, #16
 808b956:	e7e0      	b.n	808b91a <__mdiff+0xca>
 808b958:	3f01      	subs	r7, #1
 808b95a:	e7ea      	b.n	808b932 <__mdiff+0xe2>
 808b95c:	0808d169 	.word	0x0808d169
 808b960:	0808d1dc 	.word	0x0808d1dc

0808b964 <__d2b>:
 808b964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808b968:	4689      	mov	r9, r1
 808b96a:	2101      	movs	r1, #1
 808b96c:	ec57 6b10 	vmov	r6, r7, d0
 808b970:	4690      	mov	r8, r2
 808b972:	f7ff fccf 	bl	808b314 <_Balloc>
 808b976:	4604      	mov	r4, r0
 808b978:	b930      	cbnz	r0, 808b988 <__d2b+0x24>
 808b97a:	4602      	mov	r2, r0
 808b97c:	4b25      	ldr	r3, [pc, #148]	; (808ba14 <__d2b+0xb0>)
 808b97e:	4826      	ldr	r0, [pc, #152]	; (808ba18 <__d2b+0xb4>)
 808b980:	f240 310a 	movw	r1, #778	; 0x30a
 808b984:	f7fe fd16 	bl	808a3b4 <__assert_func>
 808b988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 808b98c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 808b990:	bb35      	cbnz	r5, 808b9e0 <__d2b+0x7c>
 808b992:	2e00      	cmp	r6, #0
 808b994:	9301      	str	r3, [sp, #4]
 808b996:	d028      	beq.n	808b9ea <__d2b+0x86>
 808b998:	4668      	mov	r0, sp
 808b99a:	9600      	str	r6, [sp, #0]
 808b99c:	f7ff fd82 	bl	808b4a4 <__lo0bits>
 808b9a0:	9900      	ldr	r1, [sp, #0]
 808b9a2:	b300      	cbz	r0, 808b9e6 <__d2b+0x82>
 808b9a4:	9a01      	ldr	r2, [sp, #4]
 808b9a6:	f1c0 0320 	rsb	r3, r0, #32
 808b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 808b9ae:	430b      	orrs	r3, r1
 808b9b0:	40c2      	lsrs	r2, r0
 808b9b2:	6163      	str	r3, [r4, #20]
 808b9b4:	9201      	str	r2, [sp, #4]
 808b9b6:	9b01      	ldr	r3, [sp, #4]
 808b9b8:	61a3      	str	r3, [r4, #24]
 808b9ba:	2b00      	cmp	r3, #0
 808b9bc:	bf14      	ite	ne
 808b9be:	2202      	movne	r2, #2
 808b9c0:	2201      	moveq	r2, #1
 808b9c2:	6122      	str	r2, [r4, #16]
 808b9c4:	b1d5      	cbz	r5, 808b9fc <__d2b+0x98>
 808b9c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 808b9ca:	4405      	add	r5, r0
 808b9cc:	f8c9 5000 	str.w	r5, [r9]
 808b9d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808b9d4:	f8c8 0000 	str.w	r0, [r8]
 808b9d8:	4620      	mov	r0, r4
 808b9da:	b003      	add	sp, #12
 808b9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808b9e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808b9e4:	e7d5      	b.n	808b992 <__d2b+0x2e>
 808b9e6:	6161      	str	r1, [r4, #20]
 808b9e8:	e7e5      	b.n	808b9b6 <__d2b+0x52>
 808b9ea:	a801      	add	r0, sp, #4
 808b9ec:	f7ff fd5a 	bl	808b4a4 <__lo0bits>
 808b9f0:	9b01      	ldr	r3, [sp, #4]
 808b9f2:	6163      	str	r3, [r4, #20]
 808b9f4:	2201      	movs	r2, #1
 808b9f6:	6122      	str	r2, [r4, #16]
 808b9f8:	3020      	adds	r0, #32
 808b9fa:	e7e3      	b.n	808b9c4 <__d2b+0x60>
 808b9fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 808ba00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808ba04:	f8c9 0000 	str.w	r0, [r9]
 808ba08:	6918      	ldr	r0, [r3, #16]
 808ba0a:	f7ff fd2b 	bl	808b464 <__hi0bits>
 808ba0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 808ba12:	e7df      	b.n	808b9d4 <__d2b+0x70>
 808ba14:	0808d169 	.word	0x0808d169
 808ba18:	0808d1dc 	.word	0x0808d1dc

0808ba1c <_calloc_r>:
 808ba1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ba1e:	fba1 2402 	umull	r2, r4, r1, r2
 808ba22:	b94c      	cbnz	r4, 808ba38 <_calloc_r+0x1c>
 808ba24:	4611      	mov	r1, r2
 808ba26:	9201      	str	r2, [sp, #4]
 808ba28:	f000 f87a 	bl	808bb20 <_malloc_r>
 808ba2c:	9a01      	ldr	r2, [sp, #4]
 808ba2e:	4605      	mov	r5, r0
 808ba30:	b930      	cbnz	r0, 808ba40 <_calloc_r+0x24>
 808ba32:	4628      	mov	r0, r5
 808ba34:	b003      	add	sp, #12
 808ba36:	bd30      	pop	{r4, r5, pc}
 808ba38:	220c      	movs	r2, #12
 808ba3a:	6002      	str	r2, [r0, #0]
 808ba3c:	2500      	movs	r5, #0
 808ba3e:	e7f8      	b.n	808ba32 <_calloc_r+0x16>
 808ba40:	4621      	mov	r1, r4
 808ba42:	f7fd ff07 	bl	8089854 <memset>
 808ba46:	e7f4      	b.n	808ba32 <_calloc_r+0x16>

0808ba48 <_free_r>:
 808ba48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808ba4a:	2900      	cmp	r1, #0
 808ba4c:	d044      	beq.n	808bad8 <_free_r+0x90>
 808ba4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808ba52:	9001      	str	r0, [sp, #4]
 808ba54:	2b00      	cmp	r3, #0
 808ba56:	f1a1 0404 	sub.w	r4, r1, #4
 808ba5a:	bfb8      	it	lt
 808ba5c:	18e4      	addlt	r4, r4, r3
 808ba5e:	f000 fe2d 	bl	808c6bc <__malloc_lock>
 808ba62:	4a1e      	ldr	r2, [pc, #120]	; (808badc <_free_r+0x94>)
 808ba64:	9801      	ldr	r0, [sp, #4]
 808ba66:	6813      	ldr	r3, [r2, #0]
 808ba68:	b933      	cbnz	r3, 808ba78 <_free_r+0x30>
 808ba6a:	6063      	str	r3, [r4, #4]
 808ba6c:	6014      	str	r4, [r2, #0]
 808ba6e:	b003      	add	sp, #12
 808ba70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 808ba74:	f000 be28 	b.w	808c6c8 <__malloc_unlock>
 808ba78:	42a3      	cmp	r3, r4
 808ba7a:	d908      	bls.n	808ba8e <_free_r+0x46>
 808ba7c:	6825      	ldr	r5, [r4, #0]
 808ba7e:	1961      	adds	r1, r4, r5
 808ba80:	428b      	cmp	r3, r1
 808ba82:	bf01      	itttt	eq
 808ba84:	6819      	ldreq	r1, [r3, #0]
 808ba86:	685b      	ldreq	r3, [r3, #4]
 808ba88:	1949      	addeq	r1, r1, r5
 808ba8a:	6021      	streq	r1, [r4, #0]
 808ba8c:	e7ed      	b.n	808ba6a <_free_r+0x22>
 808ba8e:	461a      	mov	r2, r3
 808ba90:	685b      	ldr	r3, [r3, #4]
 808ba92:	b10b      	cbz	r3, 808ba98 <_free_r+0x50>
 808ba94:	42a3      	cmp	r3, r4
 808ba96:	d9fa      	bls.n	808ba8e <_free_r+0x46>
 808ba98:	6811      	ldr	r1, [r2, #0]
 808ba9a:	1855      	adds	r5, r2, r1
 808ba9c:	42a5      	cmp	r5, r4
 808ba9e:	d10b      	bne.n	808bab8 <_free_r+0x70>
 808baa0:	6824      	ldr	r4, [r4, #0]
 808baa2:	4421      	add	r1, r4
 808baa4:	1854      	adds	r4, r2, r1
 808baa6:	42a3      	cmp	r3, r4
 808baa8:	6011      	str	r1, [r2, #0]
 808baaa:	d1e0      	bne.n	808ba6e <_free_r+0x26>
 808baac:	681c      	ldr	r4, [r3, #0]
 808baae:	685b      	ldr	r3, [r3, #4]
 808bab0:	6053      	str	r3, [r2, #4]
 808bab2:	4421      	add	r1, r4
 808bab4:	6011      	str	r1, [r2, #0]
 808bab6:	e7da      	b.n	808ba6e <_free_r+0x26>
 808bab8:	d902      	bls.n	808bac0 <_free_r+0x78>
 808baba:	230c      	movs	r3, #12
 808babc:	6003      	str	r3, [r0, #0]
 808babe:	e7d6      	b.n	808ba6e <_free_r+0x26>
 808bac0:	6825      	ldr	r5, [r4, #0]
 808bac2:	1961      	adds	r1, r4, r5
 808bac4:	428b      	cmp	r3, r1
 808bac6:	bf04      	itt	eq
 808bac8:	6819      	ldreq	r1, [r3, #0]
 808baca:	685b      	ldreq	r3, [r3, #4]
 808bacc:	6063      	str	r3, [r4, #4]
 808bace:	bf04      	itt	eq
 808bad0:	1949      	addeq	r1, r1, r5
 808bad2:	6021      	streq	r1, [r4, #0]
 808bad4:	6054      	str	r4, [r2, #4]
 808bad6:	e7ca      	b.n	808ba6e <_free_r+0x26>
 808bad8:	b003      	add	sp, #12
 808bada:	bd30      	pop	{r4, r5, pc}
 808badc:	20000e2c 	.word	0x20000e2c

0808bae0 <sbrk_aligned>:
 808bae0:	b570      	push	{r4, r5, r6, lr}
 808bae2:	4e0e      	ldr	r6, [pc, #56]	; (808bb1c <sbrk_aligned+0x3c>)
 808bae4:	460c      	mov	r4, r1
 808bae6:	6831      	ldr	r1, [r6, #0]
 808bae8:	4605      	mov	r5, r0
 808baea:	b911      	cbnz	r1, 808baf2 <sbrk_aligned+0x12>
 808baec:	f000 fb42 	bl	808c174 <_sbrk_r>
 808baf0:	6030      	str	r0, [r6, #0]
 808baf2:	4621      	mov	r1, r4
 808baf4:	4628      	mov	r0, r5
 808baf6:	f000 fb3d 	bl	808c174 <_sbrk_r>
 808bafa:	1c43      	adds	r3, r0, #1
 808bafc:	d00a      	beq.n	808bb14 <sbrk_aligned+0x34>
 808bafe:	1cc4      	adds	r4, r0, #3
 808bb00:	f024 0403 	bic.w	r4, r4, #3
 808bb04:	42a0      	cmp	r0, r4
 808bb06:	d007      	beq.n	808bb18 <sbrk_aligned+0x38>
 808bb08:	1a21      	subs	r1, r4, r0
 808bb0a:	4628      	mov	r0, r5
 808bb0c:	f000 fb32 	bl	808c174 <_sbrk_r>
 808bb10:	3001      	adds	r0, #1
 808bb12:	d101      	bne.n	808bb18 <sbrk_aligned+0x38>
 808bb14:	f04f 34ff 	mov.w	r4, #4294967295
 808bb18:	4620      	mov	r0, r4
 808bb1a:	bd70      	pop	{r4, r5, r6, pc}
 808bb1c:	20000e30 	.word	0x20000e30

0808bb20 <_malloc_r>:
 808bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bb24:	1ccd      	adds	r5, r1, #3
 808bb26:	f025 0503 	bic.w	r5, r5, #3
 808bb2a:	3508      	adds	r5, #8
 808bb2c:	2d0c      	cmp	r5, #12
 808bb2e:	bf38      	it	cc
 808bb30:	250c      	movcc	r5, #12
 808bb32:	2d00      	cmp	r5, #0
 808bb34:	4607      	mov	r7, r0
 808bb36:	db01      	blt.n	808bb3c <_malloc_r+0x1c>
 808bb38:	42a9      	cmp	r1, r5
 808bb3a:	d905      	bls.n	808bb48 <_malloc_r+0x28>
 808bb3c:	230c      	movs	r3, #12
 808bb3e:	603b      	str	r3, [r7, #0]
 808bb40:	2600      	movs	r6, #0
 808bb42:	4630      	mov	r0, r6
 808bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bb48:	4e2e      	ldr	r6, [pc, #184]	; (808bc04 <_malloc_r+0xe4>)
 808bb4a:	f000 fdb7 	bl	808c6bc <__malloc_lock>
 808bb4e:	6833      	ldr	r3, [r6, #0]
 808bb50:	461c      	mov	r4, r3
 808bb52:	bb34      	cbnz	r4, 808bba2 <_malloc_r+0x82>
 808bb54:	4629      	mov	r1, r5
 808bb56:	4638      	mov	r0, r7
 808bb58:	f7ff ffc2 	bl	808bae0 <sbrk_aligned>
 808bb5c:	1c43      	adds	r3, r0, #1
 808bb5e:	4604      	mov	r4, r0
 808bb60:	d14d      	bne.n	808bbfe <_malloc_r+0xde>
 808bb62:	6834      	ldr	r4, [r6, #0]
 808bb64:	4626      	mov	r6, r4
 808bb66:	2e00      	cmp	r6, #0
 808bb68:	d140      	bne.n	808bbec <_malloc_r+0xcc>
 808bb6a:	6823      	ldr	r3, [r4, #0]
 808bb6c:	4631      	mov	r1, r6
 808bb6e:	4638      	mov	r0, r7
 808bb70:	eb04 0803 	add.w	r8, r4, r3
 808bb74:	f000 fafe 	bl	808c174 <_sbrk_r>
 808bb78:	4580      	cmp	r8, r0
 808bb7a:	d13a      	bne.n	808bbf2 <_malloc_r+0xd2>
 808bb7c:	6821      	ldr	r1, [r4, #0]
 808bb7e:	3503      	adds	r5, #3
 808bb80:	1a6d      	subs	r5, r5, r1
 808bb82:	f025 0503 	bic.w	r5, r5, #3
 808bb86:	3508      	adds	r5, #8
 808bb88:	2d0c      	cmp	r5, #12
 808bb8a:	bf38      	it	cc
 808bb8c:	250c      	movcc	r5, #12
 808bb8e:	4629      	mov	r1, r5
 808bb90:	4638      	mov	r0, r7
 808bb92:	f7ff ffa5 	bl	808bae0 <sbrk_aligned>
 808bb96:	3001      	adds	r0, #1
 808bb98:	d02b      	beq.n	808bbf2 <_malloc_r+0xd2>
 808bb9a:	6823      	ldr	r3, [r4, #0]
 808bb9c:	442b      	add	r3, r5
 808bb9e:	6023      	str	r3, [r4, #0]
 808bba0:	e00e      	b.n	808bbc0 <_malloc_r+0xa0>
 808bba2:	6822      	ldr	r2, [r4, #0]
 808bba4:	1b52      	subs	r2, r2, r5
 808bba6:	d41e      	bmi.n	808bbe6 <_malloc_r+0xc6>
 808bba8:	2a0b      	cmp	r2, #11
 808bbaa:	d916      	bls.n	808bbda <_malloc_r+0xba>
 808bbac:	1961      	adds	r1, r4, r5
 808bbae:	42a3      	cmp	r3, r4
 808bbb0:	6025      	str	r5, [r4, #0]
 808bbb2:	bf18      	it	ne
 808bbb4:	6059      	strne	r1, [r3, #4]
 808bbb6:	6863      	ldr	r3, [r4, #4]
 808bbb8:	bf08      	it	eq
 808bbba:	6031      	streq	r1, [r6, #0]
 808bbbc:	5162      	str	r2, [r4, r5]
 808bbbe:	604b      	str	r3, [r1, #4]
 808bbc0:	4638      	mov	r0, r7
 808bbc2:	f104 060b 	add.w	r6, r4, #11
 808bbc6:	f000 fd7f 	bl	808c6c8 <__malloc_unlock>
 808bbca:	f026 0607 	bic.w	r6, r6, #7
 808bbce:	1d23      	adds	r3, r4, #4
 808bbd0:	1af2      	subs	r2, r6, r3
 808bbd2:	d0b6      	beq.n	808bb42 <_malloc_r+0x22>
 808bbd4:	1b9b      	subs	r3, r3, r6
 808bbd6:	50a3      	str	r3, [r4, r2]
 808bbd8:	e7b3      	b.n	808bb42 <_malloc_r+0x22>
 808bbda:	6862      	ldr	r2, [r4, #4]
 808bbdc:	42a3      	cmp	r3, r4
 808bbde:	bf0c      	ite	eq
 808bbe0:	6032      	streq	r2, [r6, #0]
 808bbe2:	605a      	strne	r2, [r3, #4]
 808bbe4:	e7ec      	b.n	808bbc0 <_malloc_r+0xa0>
 808bbe6:	4623      	mov	r3, r4
 808bbe8:	6864      	ldr	r4, [r4, #4]
 808bbea:	e7b2      	b.n	808bb52 <_malloc_r+0x32>
 808bbec:	4634      	mov	r4, r6
 808bbee:	6876      	ldr	r6, [r6, #4]
 808bbf0:	e7b9      	b.n	808bb66 <_malloc_r+0x46>
 808bbf2:	230c      	movs	r3, #12
 808bbf4:	603b      	str	r3, [r7, #0]
 808bbf6:	4638      	mov	r0, r7
 808bbf8:	f000 fd66 	bl	808c6c8 <__malloc_unlock>
 808bbfc:	e7a1      	b.n	808bb42 <_malloc_r+0x22>
 808bbfe:	6025      	str	r5, [r4, #0]
 808bc00:	e7de      	b.n	808bbc0 <_malloc_r+0xa0>
 808bc02:	bf00      	nop
 808bc04:	20000e2c 	.word	0x20000e2c

0808bc08 <__ssputs_r>:
 808bc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bc0c:	688e      	ldr	r6, [r1, #8]
 808bc0e:	429e      	cmp	r6, r3
 808bc10:	4682      	mov	sl, r0
 808bc12:	460c      	mov	r4, r1
 808bc14:	4690      	mov	r8, r2
 808bc16:	461f      	mov	r7, r3
 808bc18:	d838      	bhi.n	808bc8c <__ssputs_r+0x84>
 808bc1a:	898a      	ldrh	r2, [r1, #12]
 808bc1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 808bc20:	d032      	beq.n	808bc88 <__ssputs_r+0x80>
 808bc22:	6825      	ldr	r5, [r4, #0]
 808bc24:	6909      	ldr	r1, [r1, #16]
 808bc26:	eba5 0901 	sub.w	r9, r5, r1
 808bc2a:	6965      	ldr	r5, [r4, #20]
 808bc2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 808bc30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 808bc34:	3301      	adds	r3, #1
 808bc36:	444b      	add	r3, r9
 808bc38:	106d      	asrs	r5, r5, #1
 808bc3a:	429d      	cmp	r5, r3
 808bc3c:	bf38      	it	cc
 808bc3e:	461d      	movcc	r5, r3
 808bc40:	0553      	lsls	r3, r2, #21
 808bc42:	d531      	bpl.n	808bca8 <__ssputs_r+0xa0>
 808bc44:	4629      	mov	r1, r5
 808bc46:	f7ff ff6b 	bl	808bb20 <_malloc_r>
 808bc4a:	4606      	mov	r6, r0
 808bc4c:	b950      	cbnz	r0, 808bc64 <__ssputs_r+0x5c>
 808bc4e:	230c      	movs	r3, #12
 808bc50:	f8ca 3000 	str.w	r3, [sl]
 808bc54:	89a3      	ldrh	r3, [r4, #12]
 808bc56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808bc5a:	81a3      	strh	r3, [r4, #12]
 808bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 808bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808bc64:	6921      	ldr	r1, [r4, #16]
 808bc66:	464a      	mov	r2, r9
 808bc68:	f7fd fde6 	bl	8089838 <memcpy>
 808bc6c:	89a3      	ldrh	r3, [r4, #12]
 808bc6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 808bc72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808bc76:	81a3      	strh	r3, [r4, #12]
 808bc78:	6126      	str	r6, [r4, #16]
 808bc7a:	6165      	str	r5, [r4, #20]
 808bc7c:	444e      	add	r6, r9
 808bc7e:	eba5 0509 	sub.w	r5, r5, r9
 808bc82:	6026      	str	r6, [r4, #0]
 808bc84:	60a5      	str	r5, [r4, #8]
 808bc86:	463e      	mov	r6, r7
 808bc88:	42be      	cmp	r6, r7
 808bc8a:	d900      	bls.n	808bc8e <__ssputs_r+0x86>
 808bc8c:	463e      	mov	r6, r7
 808bc8e:	6820      	ldr	r0, [r4, #0]
 808bc90:	4632      	mov	r2, r6
 808bc92:	4641      	mov	r1, r8
 808bc94:	f000 fcf8 	bl	808c688 <memmove>
 808bc98:	68a3      	ldr	r3, [r4, #8]
 808bc9a:	1b9b      	subs	r3, r3, r6
 808bc9c:	60a3      	str	r3, [r4, #8]
 808bc9e:	6823      	ldr	r3, [r4, #0]
 808bca0:	4433      	add	r3, r6
 808bca2:	6023      	str	r3, [r4, #0]
 808bca4:	2000      	movs	r0, #0
 808bca6:	e7db      	b.n	808bc60 <__ssputs_r+0x58>
 808bca8:	462a      	mov	r2, r5
 808bcaa:	f000 fd13 	bl	808c6d4 <_realloc_r>
 808bcae:	4606      	mov	r6, r0
 808bcb0:	2800      	cmp	r0, #0
 808bcb2:	d1e1      	bne.n	808bc78 <__ssputs_r+0x70>
 808bcb4:	6921      	ldr	r1, [r4, #16]
 808bcb6:	4650      	mov	r0, sl
 808bcb8:	f7ff fec6 	bl	808ba48 <_free_r>
 808bcbc:	e7c7      	b.n	808bc4e <__ssputs_r+0x46>
	...

0808bcc0 <_svfiprintf_r>:
 808bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bcc4:	4698      	mov	r8, r3
 808bcc6:	898b      	ldrh	r3, [r1, #12]
 808bcc8:	061b      	lsls	r3, r3, #24
 808bcca:	b09d      	sub	sp, #116	; 0x74
 808bccc:	4607      	mov	r7, r0
 808bcce:	460d      	mov	r5, r1
 808bcd0:	4614      	mov	r4, r2
 808bcd2:	d50e      	bpl.n	808bcf2 <_svfiprintf_r+0x32>
 808bcd4:	690b      	ldr	r3, [r1, #16]
 808bcd6:	b963      	cbnz	r3, 808bcf2 <_svfiprintf_r+0x32>
 808bcd8:	2140      	movs	r1, #64	; 0x40
 808bcda:	f7ff ff21 	bl	808bb20 <_malloc_r>
 808bcde:	6028      	str	r0, [r5, #0]
 808bce0:	6128      	str	r0, [r5, #16]
 808bce2:	b920      	cbnz	r0, 808bcee <_svfiprintf_r+0x2e>
 808bce4:	230c      	movs	r3, #12
 808bce6:	603b      	str	r3, [r7, #0]
 808bce8:	f04f 30ff 	mov.w	r0, #4294967295
 808bcec:	e0d1      	b.n	808be92 <_svfiprintf_r+0x1d2>
 808bcee:	2340      	movs	r3, #64	; 0x40
 808bcf0:	616b      	str	r3, [r5, #20]
 808bcf2:	2300      	movs	r3, #0
 808bcf4:	9309      	str	r3, [sp, #36]	; 0x24
 808bcf6:	2320      	movs	r3, #32
 808bcf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808bcfc:	f8cd 800c 	str.w	r8, [sp, #12]
 808bd00:	2330      	movs	r3, #48	; 0x30
 808bd02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 808beac <_svfiprintf_r+0x1ec>
 808bd06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808bd0a:	f04f 0901 	mov.w	r9, #1
 808bd0e:	4623      	mov	r3, r4
 808bd10:	469a      	mov	sl, r3
 808bd12:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bd16:	b10a      	cbz	r2, 808bd1c <_svfiprintf_r+0x5c>
 808bd18:	2a25      	cmp	r2, #37	; 0x25
 808bd1a:	d1f9      	bne.n	808bd10 <_svfiprintf_r+0x50>
 808bd1c:	ebba 0b04 	subs.w	fp, sl, r4
 808bd20:	d00b      	beq.n	808bd3a <_svfiprintf_r+0x7a>
 808bd22:	465b      	mov	r3, fp
 808bd24:	4622      	mov	r2, r4
 808bd26:	4629      	mov	r1, r5
 808bd28:	4638      	mov	r0, r7
 808bd2a:	f7ff ff6d 	bl	808bc08 <__ssputs_r>
 808bd2e:	3001      	adds	r0, #1
 808bd30:	f000 80aa 	beq.w	808be88 <_svfiprintf_r+0x1c8>
 808bd34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bd36:	445a      	add	r2, fp
 808bd38:	9209      	str	r2, [sp, #36]	; 0x24
 808bd3a:	f89a 3000 	ldrb.w	r3, [sl]
 808bd3e:	2b00      	cmp	r3, #0
 808bd40:	f000 80a2 	beq.w	808be88 <_svfiprintf_r+0x1c8>
 808bd44:	2300      	movs	r3, #0
 808bd46:	f04f 32ff 	mov.w	r2, #4294967295
 808bd4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808bd4e:	f10a 0a01 	add.w	sl, sl, #1
 808bd52:	9304      	str	r3, [sp, #16]
 808bd54:	9307      	str	r3, [sp, #28]
 808bd56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808bd5a:	931a      	str	r3, [sp, #104]	; 0x68
 808bd5c:	4654      	mov	r4, sl
 808bd5e:	2205      	movs	r2, #5
 808bd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 808bd64:	4851      	ldr	r0, [pc, #324]	; (808beac <_svfiprintf_r+0x1ec>)
 808bd66:	f7f4 fa3b 	bl	80801e0 <memchr>
 808bd6a:	9a04      	ldr	r2, [sp, #16]
 808bd6c:	b9d8      	cbnz	r0, 808bda6 <_svfiprintf_r+0xe6>
 808bd6e:	06d0      	lsls	r0, r2, #27
 808bd70:	bf44      	itt	mi
 808bd72:	2320      	movmi	r3, #32
 808bd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808bd78:	0711      	lsls	r1, r2, #28
 808bd7a:	bf44      	itt	mi
 808bd7c:	232b      	movmi	r3, #43	; 0x2b
 808bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808bd82:	f89a 3000 	ldrb.w	r3, [sl]
 808bd86:	2b2a      	cmp	r3, #42	; 0x2a
 808bd88:	d015      	beq.n	808bdb6 <_svfiprintf_r+0xf6>
 808bd8a:	9a07      	ldr	r2, [sp, #28]
 808bd8c:	4654      	mov	r4, sl
 808bd8e:	2000      	movs	r0, #0
 808bd90:	f04f 0c0a 	mov.w	ip, #10
 808bd94:	4621      	mov	r1, r4
 808bd96:	f811 3b01 	ldrb.w	r3, [r1], #1
 808bd9a:	3b30      	subs	r3, #48	; 0x30
 808bd9c:	2b09      	cmp	r3, #9
 808bd9e:	d94e      	bls.n	808be3e <_svfiprintf_r+0x17e>
 808bda0:	b1b0      	cbz	r0, 808bdd0 <_svfiprintf_r+0x110>
 808bda2:	9207      	str	r2, [sp, #28]
 808bda4:	e014      	b.n	808bdd0 <_svfiprintf_r+0x110>
 808bda6:	eba0 0308 	sub.w	r3, r0, r8
 808bdaa:	fa09 f303 	lsl.w	r3, r9, r3
 808bdae:	4313      	orrs	r3, r2
 808bdb0:	9304      	str	r3, [sp, #16]
 808bdb2:	46a2      	mov	sl, r4
 808bdb4:	e7d2      	b.n	808bd5c <_svfiprintf_r+0x9c>
 808bdb6:	9b03      	ldr	r3, [sp, #12]
 808bdb8:	1d19      	adds	r1, r3, #4
 808bdba:	681b      	ldr	r3, [r3, #0]
 808bdbc:	9103      	str	r1, [sp, #12]
 808bdbe:	2b00      	cmp	r3, #0
 808bdc0:	bfbb      	ittet	lt
 808bdc2:	425b      	neglt	r3, r3
 808bdc4:	f042 0202 	orrlt.w	r2, r2, #2
 808bdc8:	9307      	strge	r3, [sp, #28]
 808bdca:	9307      	strlt	r3, [sp, #28]
 808bdcc:	bfb8      	it	lt
 808bdce:	9204      	strlt	r2, [sp, #16]
 808bdd0:	7823      	ldrb	r3, [r4, #0]
 808bdd2:	2b2e      	cmp	r3, #46	; 0x2e
 808bdd4:	d10c      	bne.n	808bdf0 <_svfiprintf_r+0x130>
 808bdd6:	7863      	ldrb	r3, [r4, #1]
 808bdd8:	2b2a      	cmp	r3, #42	; 0x2a
 808bdda:	d135      	bne.n	808be48 <_svfiprintf_r+0x188>
 808bddc:	9b03      	ldr	r3, [sp, #12]
 808bdde:	1d1a      	adds	r2, r3, #4
 808bde0:	681b      	ldr	r3, [r3, #0]
 808bde2:	9203      	str	r2, [sp, #12]
 808bde4:	2b00      	cmp	r3, #0
 808bde6:	bfb8      	it	lt
 808bde8:	f04f 33ff 	movlt.w	r3, #4294967295
 808bdec:	3402      	adds	r4, #2
 808bdee:	9305      	str	r3, [sp, #20]
 808bdf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 808bebc <_svfiprintf_r+0x1fc>
 808bdf4:	7821      	ldrb	r1, [r4, #0]
 808bdf6:	2203      	movs	r2, #3
 808bdf8:	4650      	mov	r0, sl
 808bdfa:	f7f4 f9f1 	bl	80801e0 <memchr>
 808bdfe:	b140      	cbz	r0, 808be12 <_svfiprintf_r+0x152>
 808be00:	2340      	movs	r3, #64	; 0x40
 808be02:	eba0 000a 	sub.w	r0, r0, sl
 808be06:	fa03 f000 	lsl.w	r0, r3, r0
 808be0a:	9b04      	ldr	r3, [sp, #16]
 808be0c:	4303      	orrs	r3, r0
 808be0e:	3401      	adds	r4, #1
 808be10:	9304      	str	r3, [sp, #16]
 808be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 808be16:	4826      	ldr	r0, [pc, #152]	; (808beb0 <_svfiprintf_r+0x1f0>)
 808be18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808be1c:	2206      	movs	r2, #6
 808be1e:	f7f4 f9df 	bl	80801e0 <memchr>
 808be22:	2800      	cmp	r0, #0
 808be24:	d038      	beq.n	808be98 <_svfiprintf_r+0x1d8>
 808be26:	4b23      	ldr	r3, [pc, #140]	; (808beb4 <_svfiprintf_r+0x1f4>)
 808be28:	bb1b      	cbnz	r3, 808be72 <_svfiprintf_r+0x1b2>
 808be2a:	9b03      	ldr	r3, [sp, #12]
 808be2c:	3307      	adds	r3, #7
 808be2e:	f023 0307 	bic.w	r3, r3, #7
 808be32:	3308      	adds	r3, #8
 808be34:	9303      	str	r3, [sp, #12]
 808be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808be38:	4433      	add	r3, r6
 808be3a:	9309      	str	r3, [sp, #36]	; 0x24
 808be3c:	e767      	b.n	808bd0e <_svfiprintf_r+0x4e>
 808be3e:	fb0c 3202 	mla	r2, ip, r2, r3
 808be42:	460c      	mov	r4, r1
 808be44:	2001      	movs	r0, #1
 808be46:	e7a5      	b.n	808bd94 <_svfiprintf_r+0xd4>
 808be48:	2300      	movs	r3, #0
 808be4a:	3401      	adds	r4, #1
 808be4c:	9305      	str	r3, [sp, #20]
 808be4e:	4619      	mov	r1, r3
 808be50:	f04f 0c0a 	mov.w	ip, #10
 808be54:	4620      	mov	r0, r4
 808be56:	f810 2b01 	ldrb.w	r2, [r0], #1
 808be5a:	3a30      	subs	r2, #48	; 0x30
 808be5c:	2a09      	cmp	r2, #9
 808be5e:	d903      	bls.n	808be68 <_svfiprintf_r+0x1a8>
 808be60:	2b00      	cmp	r3, #0
 808be62:	d0c5      	beq.n	808bdf0 <_svfiprintf_r+0x130>
 808be64:	9105      	str	r1, [sp, #20]
 808be66:	e7c3      	b.n	808bdf0 <_svfiprintf_r+0x130>
 808be68:	fb0c 2101 	mla	r1, ip, r1, r2
 808be6c:	4604      	mov	r4, r0
 808be6e:	2301      	movs	r3, #1
 808be70:	e7f0      	b.n	808be54 <_svfiprintf_r+0x194>
 808be72:	ab03      	add	r3, sp, #12
 808be74:	9300      	str	r3, [sp, #0]
 808be76:	462a      	mov	r2, r5
 808be78:	4b0f      	ldr	r3, [pc, #60]	; (808beb8 <_svfiprintf_r+0x1f8>)
 808be7a:	a904      	add	r1, sp, #16
 808be7c:	4638      	mov	r0, r7
 808be7e:	f7fd fd91 	bl	80899a4 <_printf_float>
 808be82:	1c42      	adds	r2, r0, #1
 808be84:	4606      	mov	r6, r0
 808be86:	d1d6      	bne.n	808be36 <_svfiprintf_r+0x176>
 808be88:	89ab      	ldrh	r3, [r5, #12]
 808be8a:	065b      	lsls	r3, r3, #25
 808be8c:	f53f af2c 	bmi.w	808bce8 <_svfiprintf_r+0x28>
 808be90:	9809      	ldr	r0, [sp, #36]	; 0x24
 808be92:	b01d      	add	sp, #116	; 0x74
 808be94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808be98:	ab03      	add	r3, sp, #12
 808be9a:	9300      	str	r3, [sp, #0]
 808be9c:	462a      	mov	r2, r5
 808be9e:	4b06      	ldr	r3, [pc, #24]	; (808beb8 <_svfiprintf_r+0x1f8>)
 808bea0:	a904      	add	r1, sp, #16
 808bea2:	4638      	mov	r0, r7
 808bea4:	f7fe f822 	bl	8089eec <_printf_i>
 808bea8:	e7eb      	b.n	808be82 <_svfiprintf_r+0x1c2>
 808beaa:	bf00      	nop
 808beac:	0808d334 	.word	0x0808d334
 808beb0:	0808d33e 	.word	0x0808d33e
 808beb4:	080899a5 	.word	0x080899a5
 808beb8:	0808bc09 	.word	0x0808bc09
 808bebc:	0808d33a 	.word	0x0808d33a

0808bec0 <__sfputc_r>:
 808bec0:	6893      	ldr	r3, [r2, #8]
 808bec2:	3b01      	subs	r3, #1
 808bec4:	2b00      	cmp	r3, #0
 808bec6:	b410      	push	{r4}
 808bec8:	6093      	str	r3, [r2, #8]
 808beca:	da08      	bge.n	808bede <__sfputc_r+0x1e>
 808becc:	6994      	ldr	r4, [r2, #24]
 808bece:	42a3      	cmp	r3, r4
 808bed0:	db01      	blt.n	808bed6 <__sfputc_r+0x16>
 808bed2:	290a      	cmp	r1, #10
 808bed4:	d103      	bne.n	808bede <__sfputc_r+0x1e>
 808bed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 808beda:	f000 b99f 	b.w	808c21c <__swbuf_r>
 808bede:	6813      	ldr	r3, [r2, #0]
 808bee0:	1c58      	adds	r0, r3, #1
 808bee2:	6010      	str	r0, [r2, #0]
 808bee4:	7019      	strb	r1, [r3, #0]
 808bee6:	4608      	mov	r0, r1
 808bee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 808beec:	4770      	bx	lr

0808beee <__sfputs_r>:
 808beee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808bef0:	4606      	mov	r6, r0
 808bef2:	460f      	mov	r7, r1
 808bef4:	4614      	mov	r4, r2
 808bef6:	18d5      	adds	r5, r2, r3
 808bef8:	42ac      	cmp	r4, r5
 808befa:	d101      	bne.n	808bf00 <__sfputs_r+0x12>
 808befc:	2000      	movs	r0, #0
 808befe:	e007      	b.n	808bf10 <__sfputs_r+0x22>
 808bf00:	f814 1b01 	ldrb.w	r1, [r4], #1
 808bf04:	463a      	mov	r2, r7
 808bf06:	4630      	mov	r0, r6
 808bf08:	f7ff ffda 	bl	808bec0 <__sfputc_r>
 808bf0c:	1c43      	adds	r3, r0, #1
 808bf0e:	d1f3      	bne.n	808bef8 <__sfputs_r+0xa>
 808bf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808bf14 <_vfiprintf_r>:
 808bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bf18:	460d      	mov	r5, r1
 808bf1a:	b09d      	sub	sp, #116	; 0x74
 808bf1c:	4614      	mov	r4, r2
 808bf1e:	4698      	mov	r8, r3
 808bf20:	4606      	mov	r6, r0
 808bf22:	b118      	cbz	r0, 808bf2c <_vfiprintf_r+0x18>
 808bf24:	6983      	ldr	r3, [r0, #24]
 808bf26:	b90b      	cbnz	r3, 808bf2c <_vfiprintf_r+0x18>
 808bf28:	f7ff f934 	bl	808b194 <__sinit>
 808bf2c:	4b89      	ldr	r3, [pc, #548]	; (808c154 <_vfiprintf_r+0x240>)
 808bf2e:	429d      	cmp	r5, r3
 808bf30:	d11b      	bne.n	808bf6a <_vfiprintf_r+0x56>
 808bf32:	6875      	ldr	r5, [r6, #4]
 808bf34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808bf36:	07d9      	lsls	r1, r3, #31
 808bf38:	d405      	bmi.n	808bf46 <_vfiprintf_r+0x32>
 808bf3a:	89ab      	ldrh	r3, [r5, #12]
 808bf3c:	059a      	lsls	r2, r3, #22
 808bf3e:	d402      	bmi.n	808bf46 <_vfiprintf_r+0x32>
 808bf40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808bf42:	f7ff f9dc 	bl	808b2fe <__retarget_lock_acquire_recursive>
 808bf46:	89ab      	ldrh	r3, [r5, #12]
 808bf48:	071b      	lsls	r3, r3, #28
 808bf4a:	d501      	bpl.n	808bf50 <_vfiprintf_r+0x3c>
 808bf4c:	692b      	ldr	r3, [r5, #16]
 808bf4e:	b9eb      	cbnz	r3, 808bf8c <_vfiprintf_r+0x78>
 808bf50:	4629      	mov	r1, r5
 808bf52:	4630      	mov	r0, r6
 808bf54:	f000 f9c6 	bl	808c2e4 <__swsetup_r>
 808bf58:	b1c0      	cbz	r0, 808bf8c <_vfiprintf_r+0x78>
 808bf5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808bf5c:	07dc      	lsls	r4, r3, #31
 808bf5e:	d50e      	bpl.n	808bf7e <_vfiprintf_r+0x6a>
 808bf60:	f04f 30ff 	mov.w	r0, #4294967295
 808bf64:	b01d      	add	sp, #116	; 0x74
 808bf66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bf6a:	4b7b      	ldr	r3, [pc, #492]	; (808c158 <_vfiprintf_r+0x244>)
 808bf6c:	429d      	cmp	r5, r3
 808bf6e:	d101      	bne.n	808bf74 <_vfiprintf_r+0x60>
 808bf70:	68b5      	ldr	r5, [r6, #8]
 808bf72:	e7df      	b.n	808bf34 <_vfiprintf_r+0x20>
 808bf74:	4b79      	ldr	r3, [pc, #484]	; (808c15c <_vfiprintf_r+0x248>)
 808bf76:	429d      	cmp	r5, r3
 808bf78:	bf08      	it	eq
 808bf7a:	68f5      	ldreq	r5, [r6, #12]
 808bf7c:	e7da      	b.n	808bf34 <_vfiprintf_r+0x20>
 808bf7e:	89ab      	ldrh	r3, [r5, #12]
 808bf80:	0598      	lsls	r0, r3, #22
 808bf82:	d4ed      	bmi.n	808bf60 <_vfiprintf_r+0x4c>
 808bf84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808bf86:	f7ff f9bb 	bl	808b300 <__retarget_lock_release_recursive>
 808bf8a:	e7e9      	b.n	808bf60 <_vfiprintf_r+0x4c>
 808bf8c:	2300      	movs	r3, #0
 808bf8e:	9309      	str	r3, [sp, #36]	; 0x24
 808bf90:	2320      	movs	r3, #32
 808bf92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808bf96:	f8cd 800c 	str.w	r8, [sp, #12]
 808bf9a:	2330      	movs	r3, #48	; 0x30
 808bf9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 808c160 <_vfiprintf_r+0x24c>
 808bfa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 808bfa4:	f04f 0901 	mov.w	r9, #1
 808bfa8:	4623      	mov	r3, r4
 808bfaa:	469a      	mov	sl, r3
 808bfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bfb0:	b10a      	cbz	r2, 808bfb6 <_vfiprintf_r+0xa2>
 808bfb2:	2a25      	cmp	r2, #37	; 0x25
 808bfb4:	d1f9      	bne.n	808bfaa <_vfiprintf_r+0x96>
 808bfb6:	ebba 0b04 	subs.w	fp, sl, r4
 808bfba:	d00b      	beq.n	808bfd4 <_vfiprintf_r+0xc0>
 808bfbc:	465b      	mov	r3, fp
 808bfbe:	4622      	mov	r2, r4
 808bfc0:	4629      	mov	r1, r5
 808bfc2:	4630      	mov	r0, r6
 808bfc4:	f7ff ff93 	bl	808beee <__sfputs_r>
 808bfc8:	3001      	adds	r0, #1
 808bfca:	f000 80aa 	beq.w	808c122 <_vfiprintf_r+0x20e>
 808bfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 808bfd0:	445a      	add	r2, fp
 808bfd2:	9209      	str	r2, [sp, #36]	; 0x24
 808bfd4:	f89a 3000 	ldrb.w	r3, [sl]
 808bfd8:	2b00      	cmp	r3, #0
 808bfda:	f000 80a2 	beq.w	808c122 <_vfiprintf_r+0x20e>
 808bfde:	2300      	movs	r3, #0
 808bfe0:	f04f 32ff 	mov.w	r2, #4294967295
 808bfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 808bfe8:	f10a 0a01 	add.w	sl, sl, #1
 808bfec:	9304      	str	r3, [sp, #16]
 808bfee:	9307      	str	r3, [sp, #28]
 808bff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 808bff4:	931a      	str	r3, [sp, #104]	; 0x68
 808bff6:	4654      	mov	r4, sl
 808bff8:	2205      	movs	r2, #5
 808bffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 808bffe:	4858      	ldr	r0, [pc, #352]	; (808c160 <_vfiprintf_r+0x24c>)
 808c000:	f7f4 f8ee 	bl	80801e0 <memchr>
 808c004:	9a04      	ldr	r2, [sp, #16]
 808c006:	b9d8      	cbnz	r0, 808c040 <_vfiprintf_r+0x12c>
 808c008:	06d1      	lsls	r1, r2, #27
 808c00a:	bf44      	itt	mi
 808c00c:	2320      	movmi	r3, #32
 808c00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808c012:	0713      	lsls	r3, r2, #28
 808c014:	bf44      	itt	mi
 808c016:	232b      	movmi	r3, #43	; 0x2b
 808c018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 808c01c:	f89a 3000 	ldrb.w	r3, [sl]
 808c020:	2b2a      	cmp	r3, #42	; 0x2a
 808c022:	d015      	beq.n	808c050 <_vfiprintf_r+0x13c>
 808c024:	9a07      	ldr	r2, [sp, #28]
 808c026:	4654      	mov	r4, sl
 808c028:	2000      	movs	r0, #0
 808c02a:	f04f 0c0a 	mov.w	ip, #10
 808c02e:	4621      	mov	r1, r4
 808c030:	f811 3b01 	ldrb.w	r3, [r1], #1
 808c034:	3b30      	subs	r3, #48	; 0x30
 808c036:	2b09      	cmp	r3, #9
 808c038:	d94e      	bls.n	808c0d8 <_vfiprintf_r+0x1c4>
 808c03a:	b1b0      	cbz	r0, 808c06a <_vfiprintf_r+0x156>
 808c03c:	9207      	str	r2, [sp, #28]
 808c03e:	e014      	b.n	808c06a <_vfiprintf_r+0x156>
 808c040:	eba0 0308 	sub.w	r3, r0, r8
 808c044:	fa09 f303 	lsl.w	r3, r9, r3
 808c048:	4313      	orrs	r3, r2
 808c04a:	9304      	str	r3, [sp, #16]
 808c04c:	46a2      	mov	sl, r4
 808c04e:	e7d2      	b.n	808bff6 <_vfiprintf_r+0xe2>
 808c050:	9b03      	ldr	r3, [sp, #12]
 808c052:	1d19      	adds	r1, r3, #4
 808c054:	681b      	ldr	r3, [r3, #0]
 808c056:	9103      	str	r1, [sp, #12]
 808c058:	2b00      	cmp	r3, #0
 808c05a:	bfbb      	ittet	lt
 808c05c:	425b      	neglt	r3, r3
 808c05e:	f042 0202 	orrlt.w	r2, r2, #2
 808c062:	9307      	strge	r3, [sp, #28]
 808c064:	9307      	strlt	r3, [sp, #28]
 808c066:	bfb8      	it	lt
 808c068:	9204      	strlt	r2, [sp, #16]
 808c06a:	7823      	ldrb	r3, [r4, #0]
 808c06c:	2b2e      	cmp	r3, #46	; 0x2e
 808c06e:	d10c      	bne.n	808c08a <_vfiprintf_r+0x176>
 808c070:	7863      	ldrb	r3, [r4, #1]
 808c072:	2b2a      	cmp	r3, #42	; 0x2a
 808c074:	d135      	bne.n	808c0e2 <_vfiprintf_r+0x1ce>
 808c076:	9b03      	ldr	r3, [sp, #12]
 808c078:	1d1a      	adds	r2, r3, #4
 808c07a:	681b      	ldr	r3, [r3, #0]
 808c07c:	9203      	str	r2, [sp, #12]
 808c07e:	2b00      	cmp	r3, #0
 808c080:	bfb8      	it	lt
 808c082:	f04f 33ff 	movlt.w	r3, #4294967295
 808c086:	3402      	adds	r4, #2
 808c088:	9305      	str	r3, [sp, #20]
 808c08a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 808c170 <_vfiprintf_r+0x25c>
 808c08e:	7821      	ldrb	r1, [r4, #0]
 808c090:	2203      	movs	r2, #3
 808c092:	4650      	mov	r0, sl
 808c094:	f7f4 f8a4 	bl	80801e0 <memchr>
 808c098:	b140      	cbz	r0, 808c0ac <_vfiprintf_r+0x198>
 808c09a:	2340      	movs	r3, #64	; 0x40
 808c09c:	eba0 000a 	sub.w	r0, r0, sl
 808c0a0:	fa03 f000 	lsl.w	r0, r3, r0
 808c0a4:	9b04      	ldr	r3, [sp, #16]
 808c0a6:	4303      	orrs	r3, r0
 808c0a8:	3401      	adds	r4, #1
 808c0aa:	9304      	str	r3, [sp, #16]
 808c0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 808c0b0:	482c      	ldr	r0, [pc, #176]	; (808c164 <_vfiprintf_r+0x250>)
 808c0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 808c0b6:	2206      	movs	r2, #6
 808c0b8:	f7f4 f892 	bl	80801e0 <memchr>
 808c0bc:	2800      	cmp	r0, #0
 808c0be:	d03f      	beq.n	808c140 <_vfiprintf_r+0x22c>
 808c0c0:	4b29      	ldr	r3, [pc, #164]	; (808c168 <_vfiprintf_r+0x254>)
 808c0c2:	bb1b      	cbnz	r3, 808c10c <_vfiprintf_r+0x1f8>
 808c0c4:	9b03      	ldr	r3, [sp, #12]
 808c0c6:	3307      	adds	r3, #7
 808c0c8:	f023 0307 	bic.w	r3, r3, #7
 808c0cc:	3308      	adds	r3, #8
 808c0ce:	9303      	str	r3, [sp, #12]
 808c0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808c0d2:	443b      	add	r3, r7
 808c0d4:	9309      	str	r3, [sp, #36]	; 0x24
 808c0d6:	e767      	b.n	808bfa8 <_vfiprintf_r+0x94>
 808c0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 808c0dc:	460c      	mov	r4, r1
 808c0de:	2001      	movs	r0, #1
 808c0e0:	e7a5      	b.n	808c02e <_vfiprintf_r+0x11a>
 808c0e2:	2300      	movs	r3, #0
 808c0e4:	3401      	adds	r4, #1
 808c0e6:	9305      	str	r3, [sp, #20]
 808c0e8:	4619      	mov	r1, r3
 808c0ea:	f04f 0c0a 	mov.w	ip, #10
 808c0ee:	4620      	mov	r0, r4
 808c0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 808c0f4:	3a30      	subs	r2, #48	; 0x30
 808c0f6:	2a09      	cmp	r2, #9
 808c0f8:	d903      	bls.n	808c102 <_vfiprintf_r+0x1ee>
 808c0fa:	2b00      	cmp	r3, #0
 808c0fc:	d0c5      	beq.n	808c08a <_vfiprintf_r+0x176>
 808c0fe:	9105      	str	r1, [sp, #20]
 808c100:	e7c3      	b.n	808c08a <_vfiprintf_r+0x176>
 808c102:	fb0c 2101 	mla	r1, ip, r1, r2
 808c106:	4604      	mov	r4, r0
 808c108:	2301      	movs	r3, #1
 808c10a:	e7f0      	b.n	808c0ee <_vfiprintf_r+0x1da>
 808c10c:	ab03      	add	r3, sp, #12
 808c10e:	9300      	str	r3, [sp, #0]
 808c110:	462a      	mov	r2, r5
 808c112:	4b16      	ldr	r3, [pc, #88]	; (808c16c <_vfiprintf_r+0x258>)
 808c114:	a904      	add	r1, sp, #16
 808c116:	4630      	mov	r0, r6
 808c118:	f7fd fc44 	bl	80899a4 <_printf_float>
 808c11c:	4607      	mov	r7, r0
 808c11e:	1c78      	adds	r0, r7, #1
 808c120:	d1d6      	bne.n	808c0d0 <_vfiprintf_r+0x1bc>
 808c122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 808c124:	07d9      	lsls	r1, r3, #31
 808c126:	d405      	bmi.n	808c134 <_vfiprintf_r+0x220>
 808c128:	89ab      	ldrh	r3, [r5, #12]
 808c12a:	059a      	lsls	r2, r3, #22
 808c12c:	d402      	bmi.n	808c134 <_vfiprintf_r+0x220>
 808c12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 808c130:	f7ff f8e6 	bl	808b300 <__retarget_lock_release_recursive>
 808c134:	89ab      	ldrh	r3, [r5, #12]
 808c136:	065b      	lsls	r3, r3, #25
 808c138:	f53f af12 	bmi.w	808bf60 <_vfiprintf_r+0x4c>
 808c13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 808c13e:	e711      	b.n	808bf64 <_vfiprintf_r+0x50>
 808c140:	ab03      	add	r3, sp, #12
 808c142:	9300      	str	r3, [sp, #0]
 808c144:	462a      	mov	r2, r5
 808c146:	4b09      	ldr	r3, [pc, #36]	; (808c16c <_vfiprintf_r+0x258>)
 808c148:	a904      	add	r1, sp, #16
 808c14a:	4630      	mov	r0, r6
 808c14c:	f7fd fece 	bl	8089eec <_printf_i>
 808c150:	e7e4      	b.n	808c11c <_vfiprintf_r+0x208>
 808c152:	bf00      	nop
 808c154:	0808d19c 	.word	0x0808d19c
 808c158:	0808d1bc 	.word	0x0808d1bc
 808c15c:	0808d17c 	.word	0x0808d17c
 808c160:	0808d334 	.word	0x0808d334
 808c164:	0808d33e 	.word	0x0808d33e
 808c168:	080899a5 	.word	0x080899a5
 808c16c:	0808beef 	.word	0x0808beef
 808c170:	0808d33a 	.word	0x0808d33a

0808c174 <_sbrk_r>:
 808c174:	b538      	push	{r3, r4, r5, lr}
 808c176:	4d06      	ldr	r5, [pc, #24]	; (808c190 <_sbrk_r+0x1c>)
 808c178:	2300      	movs	r3, #0
 808c17a:	4604      	mov	r4, r0
 808c17c:	4608      	mov	r0, r1
 808c17e:	602b      	str	r3, [r5, #0]
 808c180:	f7f6 fa58 	bl	8082634 <_sbrk>
 808c184:	1c43      	adds	r3, r0, #1
 808c186:	d102      	bne.n	808c18e <_sbrk_r+0x1a>
 808c188:	682b      	ldr	r3, [r5, #0]
 808c18a:	b103      	cbz	r3, 808c18e <_sbrk_r+0x1a>
 808c18c:	6023      	str	r3, [r4, #0]
 808c18e:	bd38      	pop	{r3, r4, r5, pc}
 808c190:	20000e34 	.word	0x20000e34

0808c194 <__sread>:
 808c194:	b510      	push	{r4, lr}
 808c196:	460c      	mov	r4, r1
 808c198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808c19c:	f000 faca 	bl	808c734 <_read_r>
 808c1a0:	2800      	cmp	r0, #0
 808c1a2:	bfab      	itete	ge
 808c1a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 808c1a6:	89a3      	ldrhlt	r3, [r4, #12]
 808c1a8:	181b      	addge	r3, r3, r0
 808c1aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 808c1ae:	bfac      	ite	ge
 808c1b0:	6563      	strge	r3, [r4, #84]	; 0x54
 808c1b2:	81a3      	strhlt	r3, [r4, #12]
 808c1b4:	bd10      	pop	{r4, pc}

0808c1b6 <__swrite>:
 808c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c1ba:	461f      	mov	r7, r3
 808c1bc:	898b      	ldrh	r3, [r1, #12]
 808c1be:	05db      	lsls	r3, r3, #23
 808c1c0:	4605      	mov	r5, r0
 808c1c2:	460c      	mov	r4, r1
 808c1c4:	4616      	mov	r6, r2
 808c1c6:	d505      	bpl.n	808c1d4 <__swrite+0x1e>
 808c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808c1cc:	2302      	movs	r3, #2
 808c1ce:	2200      	movs	r2, #0
 808c1d0:	f000 f9d0 	bl	808c574 <_lseek_r>
 808c1d4:	89a3      	ldrh	r3, [r4, #12]
 808c1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 808c1da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 808c1de:	81a3      	strh	r3, [r4, #12]
 808c1e0:	4632      	mov	r2, r6
 808c1e2:	463b      	mov	r3, r7
 808c1e4:	4628      	mov	r0, r5
 808c1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808c1ea:	f000 b869 	b.w	808c2c0 <_write_r>

0808c1ee <__sseek>:
 808c1ee:	b510      	push	{r4, lr}
 808c1f0:	460c      	mov	r4, r1
 808c1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808c1f6:	f000 f9bd 	bl	808c574 <_lseek_r>
 808c1fa:	1c43      	adds	r3, r0, #1
 808c1fc:	89a3      	ldrh	r3, [r4, #12]
 808c1fe:	bf15      	itete	ne
 808c200:	6560      	strne	r0, [r4, #84]	; 0x54
 808c202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 808c206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 808c20a:	81a3      	strheq	r3, [r4, #12]
 808c20c:	bf18      	it	ne
 808c20e:	81a3      	strhne	r3, [r4, #12]
 808c210:	bd10      	pop	{r4, pc}

0808c212 <__sclose>:
 808c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808c216:	f000 b8db 	b.w	808c3d0 <_close_r>
	...

0808c21c <__swbuf_r>:
 808c21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c21e:	460e      	mov	r6, r1
 808c220:	4614      	mov	r4, r2
 808c222:	4605      	mov	r5, r0
 808c224:	b118      	cbz	r0, 808c22e <__swbuf_r+0x12>
 808c226:	6983      	ldr	r3, [r0, #24]
 808c228:	b90b      	cbnz	r3, 808c22e <__swbuf_r+0x12>
 808c22a:	f7fe ffb3 	bl	808b194 <__sinit>
 808c22e:	4b21      	ldr	r3, [pc, #132]	; (808c2b4 <__swbuf_r+0x98>)
 808c230:	429c      	cmp	r4, r3
 808c232:	d12b      	bne.n	808c28c <__swbuf_r+0x70>
 808c234:	686c      	ldr	r4, [r5, #4]
 808c236:	69a3      	ldr	r3, [r4, #24]
 808c238:	60a3      	str	r3, [r4, #8]
 808c23a:	89a3      	ldrh	r3, [r4, #12]
 808c23c:	071a      	lsls	r2, r3, #28
 808c23e:	d52f      	bpl.n	808c2a0 <__swbuf_r+0x84>
 808c240:	6923      	ldr	r3, [r4, #16]
 808c242:	b36b      	cbz	r3, 808c2a0 <__swbuf_r+0x84>
 808c244:	6923      	ldr	r3, [r4, #16]
 808c246:	6820      	ldr	r0, [r4, #0]
 808c248:	1ac0      	subs	r0, r0, r3
 808c24a:	6963      	ldr	r3, [r4, #20]
 808c24c:	b2f6      	uxtb	r6, r6
 808c24e:	4283      	cmp	r3, r0
 808c250:	4637      	mov	r7, r6
 808c252:	dc04      	bgt.n	808c25e <__swbuf_r+0x42>
 808c254:	4621      	mov	r1, r4
 808c256:	4628      	mov	r0, r5
 808c258:	f000 f950 	bl	808c4fc <_fflush_r>
 808c25c:	bb30      	cbnz	r0, 808c2ac <__swbuf_r+0x90>
 808c25e:	68a3      	ldr	r3, [r4, #8]
 808c260:	3b01      	subs	r3, #1
 808c262:	60a3      	str	r3, [r4, #8]
 808c264:	6823      	ldr	r3, [r4, #0]
 808c266:	1c5a      	adds	r2, r3, #1
 808c268:	6022      	str	r2, [r4, #0]
 808c26a:	701e      	strb	r6, [r3, #0]
 808c26c:	6963      	ldr	r3, [r4, #20]
 808c26e:	3001      	adds	r0, #1
 808c270:	4283      	cmp	r3, r0
 808c272:	d004      	beq.n	808c27e <__swbuf_r+0x62>
 808c274:	89a3      	ldrh	r3, [r4, #12]
 808c276:	07db      	lsls	r3, r3, #31
 808c278:	d506      	bpl.n	808c288 <__swbuf_r+0x6c>
 808c27a:	2e0a      	cmp	r6, #10
 808c27c:	d104      	bne.n	808c288 <__swbuf_r+0x6c>
 808c27e:	4621      	mov	r1, r4
 808c280:	4628      	mov	r0, r5
 808c282:	f000 f93b 	bl	808c4fc <_fflush_r>
 808c286:	b988      	cbnz	r0, 808c2ac <__swbuf_r+0x90>
 808c288:	4638      	mov	r0, r7
 808c28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808c28c:	4b0a      	ldr	r3, [pc, #40]	; (808c2b8 <__swbuf_r+0x9c>)
 808c28e:	429c      	cmp	r4, r3
 808c290:	d101      	bne.n	808c296 <__swbuf_r+0x7a>
 808c292:	68ac      	ldr	r4, [r5, #8]
 808c294:	e7cf      	b.n	808c236 <__swbuf_r+0x1a>
 808c296:	4b09      	ldr	r3, [pc, #36]	; (808c2bc <__swbuf_r+0xa0>)
 808c298:	429c      	cmp	r4, r3
 808c29a:	bf08      	it	eq
 808c29c:	68ec      	ldreq	r4, [r5, #12]
 808c29e:	e7ca      	b.n	808c236 <__swbuf_r+0x1a>
 808c2a0:	4621      	mov	r1, r4
 808c2a2:	4628      	mov	r0, r5
 808c2a4:	f000 f81e 	bl	808c2e4 <__swsetup_r>
 808c2a8:	2800      	cmp	r0, #0
 808c2aa:	d0cb      	beq.n	808c244 <__swbuf_r+0x28>
 808c2ac:	f04f 37ff 	mov.w	r7, #4294967295
 808c2b0:	e7ea      	b.n	808c288 <__swbuf_r+0x6c>
 808c2b2:	bf00      	nop
 808c2b4:	0808d19c 	.word	0x0808d19c
 808c2b8:	0808d1bc 	.word	0x0808d1bc
 808c2bc:	0808d17c 	.word	0x0808d17c

0808c2c0 <_write_r>:
 808c2c0:	b538      	push	{r3, r4, r5, lr}
 808c2c2:	4d07      	ldr	r5, [pc, #28]	; (808c2e0 <_write_r+0x20>)
 808c2c4:	4604      	mov	r4, r0
 808c2c6:	4608      	mov	r0, r1
 808c2c8:	4611      	mov	r1, r2
 808c2ca:	2200      	movs	r2, #0
 808c2cc:	602a      	str	r2, [r5, #0]
 808c2ce:	461a      	mov	r2, r3
 808c2d0:	f7f6 f95f 	bl	8082592 <_write>
 808c2d4:	1c43      	adds	r3, r0, #1
 808c2d6:	d102      	bne.n	808c2de <_write_r+0x1e>
 808c2d8:	682b      	ldr	r3, [r5, #0]
 808c2da:	b103      	cbz	r3, 808c2de <_write_r+0x1e>
 808c2dc:	6023      	str	r3, [r4, #0]
 808c2de:	bd38      	pop	{r3, r4, r5, pc}
 808c2e0:	20000e34 	.word	0x20000e34

0808c2e4 <__swsetup_r>:
 808c2e4:	4b32      	ldr	r3, [pc, #200]	; (808c3b0 <__swsetup_r+0xcc>)
 808c2e6:	b570      	push	{r4, r5, r6, lr}
 808c2e8:	681d      	ldr	r5, [r3, #0]
 808c2ea:	4606      	mov	r6, r0
 808c2ec:	460c      	mov	r4, r1
 808c2ee:	b125      	cbz	r5, 808c2fa <__swsetup_r+0x16>
 808c2f0:	69ab      	ldr	r3, [r5, #24]
 808c2f2:	b913      	cbnz	r3, 808c2fa <__swsetup_r+0x16>
 808c2f4:	4628      	mov	r0, r5
 808c2f6:	f7fe ff4d 	bl	808b194 <__sinit>
 808c2fa:	4b2e      	ldr	r3, [pc, #184]	; (808c3b4 <__swsetup_r+0xd0>)
 808c2fc:	429c      	cmp	r4, r3
 808c2fe:	d10f      	bne.n	808c320 <__swsetup_r+0x3c>
 808c300:	686c      	ldr	r4, [r5, #4]
 808c302:	89a3      	ldrh	r3, [r4, #12]
 808c304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808c308:	0719      	lsls	r1, r3, #28
 808c30a:	d42c      	bmi.n	808c366 <__swsetup_r+0x82>
 808c30c:	06dd      	lsls	r5, r3, #27
 808c30e:	d411      	bmi.n	808c334 <__swsetup_r+0x50>
 808c310:	2309      	movs	r3, #9
 808c312:	6033      	str	r3, [r6, #0]
 808c314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 808c318:	81a3      	strh	r3, [r4, #12]
 808c31a:	f04f 30ff 	mov.w	r0, #4294967295
 808c31e:	e03e      	b.n	808c39e <__swsetup_r+0xba>
 808c320:	4b25      	ldr	r3, [pc, #148]	; (808c3b8 <__swsetup_r+0xd4>)
 808c322:	429c      	cmp	r4, r3
 808c324:	d101      	bne.n	808c32a <__swsetup_r+0x46>
 808c326:	68ac      	ldr	r4, [r5, #8]
 808c328:	e7eb      	b.n	808c302 <__swsetup_r+0x1e>
 808c32a:	4b24      	ldr	r3, [pc, #144]	; (808c3bc <__swsetup_r+0xd8>)
 808c32c:	429c      	cmp	r4, r3
 808c32e:	bf08      	it	eq
 808c330:	68ec      	ldreq	r4, [r5, #12]
 808c332:	e7e6      	b.n	808c302 <__swsetup_r+0x1e>
 808c334:	0758      	lsls	r0, r3, #29
 808c336:	d512      	bpl.n	808c35e <__swsetup_r+0x7a>
 808c338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808c33a:	b141      	cbz	r1, 808c34e <__swsetup_r+0x6a>
 808c33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808c340:	4299      	cmp	r1, r3
 808c342:	d002      	beq.n	808c34a <__swsetup_r+0x66>
 808c344:	4630      	mov	r0, r6
 808c346:	f7ff fb7f 	bl	808ba48 <_free_r>
 808c34a:	2300      	movs	r3, #0
 808c34c:	6363      	str	r3, [r4, #52]	; 0x34
 808c34e:	89a3      	ldrh	r3, [r4, #12]
 808c350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 808c354:	81a3      	strh	r3, [r4, #12]
 808c356:	2300      	movs	r3, #0
 808c358:	6063      	str	r3, [r4, #4]
 808c35a:	6923      	ldr	r3, [r4, #16]
 808c35c:	6023      	str	r3, [r4, #0]
 808c35e:	89a3      	ldrh	r3, [r4, #12]
 808c360:	f043 0308 	orr.w	r3, r3, #8
 808c364:	81a3      	strh	r3, [r4, #12]
 808c366:	6923      	ldr	r3, [r4, #16]
 808c368:	b94b      	cbnz	r3, 808c37e <__swsetup_r+0x9a>
 808c36a:	89a3      	ldrh	r3, [r4, #12]
 808c36c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 808c370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808c374:	d003      	beq.n	808c37e <__swsetup_r+0x9a>
 808c376:	4621      	mov	r1, r4
 808c378:	4630      	mov	r0, r6
 808c37a:	f000 f933 	bl	808c5e4 <__smakebuf_r>
 808c37e:	89a0      	ldrh	r0, [r4, #12]
 808c380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 808c384:	f010 0301 	ands.w	r3, r0, #1
 808c388:	d00a      	beq.n	808c3a0 <__swsetup_r+0xbc>
 808c38a:	2300      	movs	r3, #0
 808c38c:	60a3      	str	r3, [r4, #8]
 808c38e:	6963      	ldr	r3, [r4, #20]
 808c390:	425b      	negs	r3, r3
 808c392:	61a3      	str	r3, [r4, #24]
 808c394:	6923      	ldr	r3, [r4, #16]
 808c396:	b943      	cbnz	r3, 808c3aa <__swsetup_r+0xc6>
 808c398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 808c39c:	d1ba      	bne.n	808c314 <__swsetup_r+0x30>
 808c39e:	bd70      	pop	{r4, r5, r6, pc}
 808c3a0:	0781      	lsls	r1, r0, #30
 808c3a2:	bf58      	it	pl
 808c3a4:	6963      	ldrpl	r3, [r4, #20]
 808c3a6:	60a3      	str	r3, [r4, #8]
 808c3a8:	e7f4      	b.n	808c394 <__swsetup_r+0xb0>
 808c3aa:	2000      	movs	r0, #0
 808c3ac:	e7f7      	b.n	808c39e <__swsetup_r+0xba>
 808c3ae:	bf00      	nop
 808c3b0:	20000090 	.word	0x20000090
 808c3b4:	0808d19c 	.word	0x0808d19c
 808c3b8:	0808d1bc 	.word	0x0808d1bc
 808c3bc:	0808d17c 	.word	0x0808d17c

0808c3c0 <abort>:
 808c3c0:	b508      	push	{r3, lr}
 808c3c2:	2006      	movs	r0, #6
 808c3c4:	f000 f9f0 	bl	808c7a8 <raise>
 808c3c8:	2001      	movs	r0, #1
 808c3ca:	f7f6 f8bb 	bl	8082544 <_exit>
	...

0808c3d0 <_close_r>:
 808c3d0:	b538      	push	{r3, r4, r5, lr}
 808c3d2:	4d06      	ldr	r5, [pc, #24]	; (808c3ec <_close_r+0x1c>)
 808c3d4:	2300      	movs	r3, #0
 808c3d6:	4604      	mov	r4, r0
 808c3d8:	4608      	mov	r0, r1
 808c3da:	602b      	str	r3, [r5, #0]
 808c3dc:	f7f6 f8f5 	bl	80825ca <_close>
 808c3e0:	1c43      	adds	r3, r0, #1
 808c3e2:	d102      	bne.n	808c3ea <_close_r+0x1a>
 808c3e4:	682b      	ldr	r3, [r5, #0]
 808c3e6:	b103      	cbz	r3, 808c3ea <_close_r+0x1a>
 808c3e8:	6023      	str	r3, [r4, #0]
 808c3ea:	bd38      	pop	{r3, r4, r5, pc}
 808c3ec:	20000e34 	.word	0x20000e34

0808c3f0 <__sflush_r>:
 808c3f0:	898a      	ldrh	r2, [r1, #12]
 808c3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c3f6:	4605      	mov	r5, r0
 808c3f8:	0710      	lsls	r0, r2, #28
 808c3fa:	460c      	mov	r4, r1
 808c3fc:	d458      	bmi.n	808c4b0 <__sflush_r+0xc0>
 808c3fe:	684b      	ldr	r3, [r1, #4]
 808c400:	2b00      	cmp	r3, #0
 808c402:	dc05      	bgt.n	808c410 <__sflush_r+0x20>
 808c404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 808c406:	2b00      	cmp	r3, #0
 808c408:	dc02      	bgt.n	808c410 <__sflush_r+0x20>
 808c40a:	2000      	movs	r0, #0
 808c40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808c412:	2e00      	cmp	r6, #0
 808c414:	d0f9      	beq.n	808c40a <__sflush_r+0x1a>
 808c416:	2300      	movs	r3, #0
 808c418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 808c41c:	682f      	ldr	r7, [r5, #0]
 808c41e:	602b      	str	r3, [r5, #0]
 808c420:	d032      	beq.n	808c488 <__sflush_r+0x98>
 808c422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 808c424:	89a3      	ldrh	r3, [r4, #12]
 808c426:	075a      	lsls	r2, r3, #29
 808c428:	d505      	bpl.n	808c436 <__sflush_r+0x46>
 808c42a:	6863      	ldr	r3, [r4, #4]
 808c42c:	1ac0      	subs	r0, r0, r3
 808c42e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 808c430:	b10b      	cbz	r3, 808c436 <__sflush_r+0x46>
 808c432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 808c434:	1ac0      	subs	r0, r0, r3
 808c436:	2300      	movs	r3, #0
 808c438:	4602      	mov	r2, r0
 808c43a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 808c43c:	6a21      	ldr	r1, [r4, #32]
 808c43e:	4628      	mov	r0, r5
 808c440:	47b0      	blx	r6
 808c442:	1c43      	adds	r3, r0, #1
 808c444:	89a3      	ldrh	r3, [r4, #12]
 808c446:	d106      	bne.n	808c456 <__sflush_r+0x66>
 808c448:	6829      	ldr	r1, [r5, #0]
 808c44a:	291d      	cmp	r1, #29
 808c44c:	d82c      	bhi.n	808c4a8 <__sflush_r+0xb8>
 808c44e:	4a2a      	ldr	r2, [pc, #168]	; (808c4f8 <__sflush_r+0x108>)
 808c450:	40ca      	lsrs	r2, r1
 808c452:	07d6      	lsls	r6, r2, #31
 808c454:	d528      	bpl.n	808c4a8 <__sflush_r+0xb8>
 808c456:	2200      	movs	r2, #0
 808c458:	6062      	str	r2, [r4, #4]
 808c45a:	04d9      	lsls	r1, r3, #19
 808c45c:	6922      	ldr	r2, [r4, #16]
 808c45e:	6022      	str	r2, [r4, #0]
 808c460:	d504      	bpl.n	808c46c <__sflush_r+0x7c>
 808c462:	1c42      	adds	r2, r0, #1
 808c464:	d101      	bne.n	808c46a <__sflush_r+0x7a>
 808c466:	682b      	ldr	r3, [r5, #0]
 808c468:	b903      	cbnz	r3, 808c46c <__sflush_r+0x7c>
 808c46a:	6560      	str	r0, [r4, #84]	; 0x54
 808c46c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 808c46e:	602f      	str	r7, [r5, #0]
 808c470:	2900      	cmp	r1, #0
 808c472:	d0ca      	beq.n	808c40a <__sflush_r+0x1a>
 808c474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 808c478:	4299      	cmp	r1, r3
 808c47a:	d002      	beq.n	808c482 <__sflush_r+0x92>
 808c47c:	4628      	mov	r0, r5
 808c47e:	f7ff fae3 	bl	808ba48 <_free_r>
 808c482:	2000      	movs	r0, #0
 808c484:	6360      	str	r0, [r4, #52]	; 0x34
 808c486:	e7c1      	b.n	808c40c <__sflush_r+0x1c>
 808c488:	6a21      	ldr	r1, [r4, #32]
 808c48a:	2301      	movs	r3, #1
 808c48c:	4628      	mov	r0, r5
 808c48e:	47b0      	blx	r6
 808c490:	1c41      	adds	r1, r0, #1
 808c492:	d1c7      	bne.n	808c424 <__sflush_r+0x34>
 808c494:	682b      	ldr	r3, [r5, #0]
 808c496:	2b00      	cmp	r3, #0
 808c498:	d0c4      	beq.n	808c424 <__sflush_r+0x34>
 808c49a:	2b1d      	cmp	r3, #29
 808c49c:	d001      	beq.n	808c4a2 <__sflush_r+0xb2>
 808c49e:	2b16      	cmp	r3, #22
 808c4a0:	d101      	bne.n	808c4a6 <__sflush_r+0xb6>
 808c4a2:	602f      	str	r7, [r5, #0]
 808c4a4:	e7b1      	b.n	808c40a <__sflush_r+0x1a>
 808c4a6:	89a3      	ldrh	r3, [r4, #12]
 808c4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808c4ac:	81a3      	strh	r3, [r4, #12]
 808c4ae:	e7ad      	b.n	808c40c <__sflush_r+0x1c>
 808c4b0:	690f      	ldr	r7, [r1, #16]
 808c4b2:	2f00      	cmp	r7, #0
 808c4b4:	d0a9      	beq.n	808c40a <__sflush_r+0x1a>
 808c4b6:	0793      	lsls	r3, r2, #30
 808c4b8:	680e      	ldr	r6, [r1, #0]
 808c4ba:	bf08      	it	eq
 808c4bc:	694b      	ldreq	r3, [r1, #20]
 808c4be:	600f      	str	r7, [r1, #0]
 808c4c0:	bf18      	it	ne
 808c4c2:	2300      	movne	r3, #0
 808c4c4:	eba6 0807 	sub.w	r8, r6, r7
 808c4c8:	608b      	str	r3, [r1, #8]
 808c4ca:	f1b8 0f00 	cmp.w	r8, #0
 808c4ce:	dd9c      	ble.n	808c40a <__sflush_r+0x1a>
 808c4d0:	6a21      	ldr	r1, [r4, #32]
 808c4d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 808c4d4:	4643      	mov	r3, r8
 808c4d6:	463a      	mov	r2, r7
 808c4d8:	4628      	mov	r0, r5
 808c4da:	47b0      	blx	r6
 808c4dc:	2800      	cmp	r0, #0
 808c4de:	dc06      	bgt.n	808c4ee <__sflush_r+0xfe>
 808c4e0:	89a3      	ldrh	r3, [r4, #12]
 808c4e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 808c4e6:	81a3      	strh	r3, [r4, #12]
 808c4e8:	f04f 30ff 	mov.w	r0, #4294967295
 808c4ec:	e78e      	b.n	808c40c <__sflush_r+0x1c>
 808c4ee:	4407      	add	r7, r0
 808c4f0:	eba8 0800 	sub.w	r8, r8, r0
 808c4f4:	e7e9      	b.n	808c4ca <__sflush_r+0xda>
 808c4f6:	bf00      	nop
 808c4f8:	20400001 	.word	0x20400001

0808c4fc <_fflush_r>:
 808c4fc:	b538      	push	{r3, r4, r5, lr}
 808c4fe:	690b      	ldr	r3, [r1, #16]
 808c500:	4605      	mov	r5, r0
 808c502:	460c      	mov	r4, r1
 808c504:	b913      	cbnz	r3, 808c50c <_fflush_r+0x10>
 808c506:	2500      	movs	r5, #0
 808c508:	4628      	mov	r0, r5
 808c50a:	bd38      	pop	{r3, r4, r5, pc}
 808c50c:	b118      	cbz	r0, 808c516 <_fflush_r+0x1a>
 808c50e:	6983      	ldr	r3, [r0, #24]
 808c510:	b90b      	cbnz	r3, 808c516 <_fflush_r+0x1a>
 808c512:	f7fe fe3f 	bl	808b194 <__sinit>
 808c516:	4b14      	ldr	r3, [pc, #80]	; (808c568 <_fflush_r+0x6c>)
 808c518:	429c      	cmp	r4, r3
 808c51a:	d11b      	bne.n	808c554 <_fflush_r+0x58>
 808c51c:	686c      	ldr	r4, [r5, #4]
 808c51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808c522:	2b00      	cmp	r3, #0
 808c524:	d0ef      	beq.n	808c506 <_fflush_r+0xa>
 808c526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 808c528:	07d0      	lsls	r0, r2, #31
 808c52a:	d404      	bmi.n	808c536 <_fflush_r+0x3a>
 808c52c:	0599      	lsls	r1, r3, #22
 808c52e:	d402      	bmi.n	808c536 <_fflush_r+0x3a>
 808c530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808c532:	f7fe fee4 	bl	808b2fe <__retarget_lock_acquire_recursive>
 808c536:	4628      	mov	r0, r5
 808c538:	4621      	mov	r1, r4
 808c53a:	f7ff ff59 	bl	808c3f0 <__sflush_r>
 808c53e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 808c540:	07da      	lsls	r2, r3, #31
 808c542:	4605      	mov	r5, r0
 808c544:	d4e0      	bmi.n	808c508 <_fflush_r+0xc>
 808c546:	89a3      	ldrh	r3, [r4, #12]
 808c548:	059b      	lsls	r3, r3, #22
 808c54a:	d4dd      	bmi.n	808c508 <_fflush_r+0xc>
 808c54c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 808c54e:	f7fe fed7 	bl	808b300 <__retarget_lock_release_recursive>
 808c552:	e7d9      	b.n	808c508 <_fflush_r+0xc>
 808c554:	4b05      	ldr	r3, [pc, #20]	; (808c56c <_fflush_r+0x70>)
 808c556:	429c      	cmp	r4, r3
 808c558:	d101      	bne.n	808c55e <_fflush_r+0x62>
 808c55a:	68ac      	ldr	r4, [r5, #8]
 808c55c:	e7df      	b.n	808c51e <_fflush_r+0x22>
 808c55e:	4b04      	ldr	r3, [pc, #16]	; (808c570 <_fflush_r+0x74>)
 808c560:	429c      	cmp	r4, r3
 808c562:	bf08      	it	eq
 808c564:	68ec      	ldreq	r4, [r5, #12]
 808c566:	e7da      	b.n	808c51e <_fflush_r+0x22>
 808c568:	0808d19c 	.word	0x0808d19c
 808c56c:	0808d1bc 	.word	0x0808d1bc
 808c570:	0808d17c 	.word	0x0808d17c

0808c574 <_lseek_r>:
 808c574:	b538      	push	{r3, r4, r5, lr}
 808c576:	4d07      	ldr	r5, [pc, #28]	; (808c594 <_lseek_r+0x20>)
 808c578:	4604      	mov	r4, r0
 808c57a:	4608      	mov	r0, r1
 808c57c:	4611      	mov	r1, r2
 808c57e:	2200      	movs	r2, #0
 808c580:	602a      	str	r2, [r5, #0]
 808c582:	461a      	mov	r2, r3
 808c584:	f7f6 f848 	bl	8082618 <_lseek>
 808c588:	1c43      	adds	r3, r0, #1
 808c58a:	d102      	bne.n	808c592 <_lseek_r+0x1e>
 808c58c:	682b      	ldr	r3, [r5, #0]
 808c58e:	b103      	cbz	r3, 808c592 <_lseek_r+0x1e>
 808c590:	6023      	str	r3, [r4, #0]
 808c592:	bd38      	pop	{r3, r4, r5, pc}
 808c594:	20000e34 	.word	0x20000e34

0808c598 <__swhatbuf_r>:
 808c598:	b570      	push	{r4, r5, r6, lr}
 808c59a:	460e      	mov	r6, r1
 808c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 808c5a0:	2900      	cmp	r1, #0
 808c5a2:	b096      	sub	sp, #88	; 0x58
 808c5a4:	4614      	mov	r4, r2
 808c5a6:	461d      	mov	r5, r3
 808c5a8:	da08      	bge.n	808c5bc <__swhatbuf_r+0x24>
 808c5aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 808c5ae:	2200      	movs	r2, #0
 808c5b0:	602a      	str	r2, [r5, #0]
 808c5b2:	061a      	lsls	r2, r3, #24
 808c5b4:	d410      	bmi.n	808c5d8 <__swhatbuf_r+0x40>
 808c5b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 808c5ba:	e00e      	b.n	808c5da <__swhatbuf_r+0x42>
 808c5bc:	466a      	mov	r2, sp
 808c5be:	f000 f91d 	bl	808c7fc <_fstat_r>
 808c5c2:	2800      	cmp	r0, #0
 808c5c4:	dbf1      	blt.n	808c5aa <__swhatbuf_r+0x12>
 808c5c6:	9a01      	ldr	r2, [sp, #4]
 808c5c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 808c5cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 808c5d0:	425a      	negs	r2, r3
 808c5d2:	415a      	adcs	r2, r3
 808c5d4:	602a      	str	r2, [r5, #0]
 808c5d6:	e7ee      	b.n	808c5b6 <__swhatbuf_r+0x1e>
 808c5d8:	2340      	movs	r3, #64	; 0x40
 808c5da:	2000      	movs	r0, #0
 808c5dc:	6023      	str	r3, [r4, #0]
 808c5de:	b016      	add	sp, #88	; 0x58
 808c5e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0808c5e4 <__smakebuf_r>:
 808c5e4:	898b      	ldrh	r3, [r1, #12]
 808c5e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 808c5e8:	079d      	lsls	r5, r3, #30
 808c5ea:	4606      	mov	r6, r0
 808c5ec:	460c      	mov	r4, r1
 808c5ee:	d507      	bpl.n	808c600 <__smakebuf_r+0x1c>
 808c5f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 808c5f4:	6023      	str	r3, [r4, #0]
 808c5f6:	6123      	str	r3, [r4, #16]
 808c5f8:	2301      	movs	r3, #1
 808c5fa:	6163      	str	r3, [r4, #20]
 808c5fc:	b002      	add	sp, #8
 808c5fe:	bd70      	pop	{r4, r5, r6, pc}
 808c600:	ab01      	add	r3, sp, #4
 808c602:	466a      	mov	r2, sp
 808c604:	f7ff ffc8 	bl	808c598 <__swhatbuf_r>
 808c608:	9900      	ldr	r1, [sp, #0]
 808c60a:	4605      	mov	r5, r0
 808c60c:	4630      	mov	r0, r6
 808c60e:	f7ff fa87 	bl	808bb20 <_malloc_r>
 808c612:	b948      	cbnz	r0, 808c628 <__smakebuf_r+0x44>
 808c614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 808c618:	059a      	lsls	r2, r3, #22
 808c61a:	d4ef      	bmi.n	808c5fc <__smakebuf_r+0x18>
 808c61c:	f023 0303 	bic.w	r3, r3, #3
 808c620:	f043 0302 	orr.w	r3, r3, #2
 808c624:	81a3      	strh	r3, [r4, #12]
 808c626:	e7e3      	b.n	808c5f0 <__smakebuf_r+0xc>
 808c628:	4b0d      	ldr	r3, [pc, #52]	; (808c660 <__smakebuf_r+0x7c>)
 808c62a:	62b3      	str	r3, [r6, #40]	; 0x28
 808c62c:	89a3      	ldrh	r3, [r4, #12]
 808c62e:	6020      	str	r0, [r4, #0]
 808c630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 808c634:	81a3      	strh	r3, [r4, #12]
 808c636:	9b00      	ldr	r3, [sp, #0]
 808c638:	6163      	str	r3, [r4, #20]
 808c63a:	9b01      	ldr	r3, [sp, #4]
 808c63c:	6120      	str	r0, [r4, #16]
 808c63e:	b15b      	cbz	r3, 808c658 <__smakebuf_r+0x74>
 808c640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 808c644:	4630      	mov	r0, r6
 808c646:	f000 f8eb 	bl	808c820 <_isatty_r>
 808c64a:	b128      	cbz	r0, 808c658 <__smakebuf_r+0x74>
 808c64c:	89a3      	ldrh	r3, [r4, #12]
 808c64e:	f023 0303 	bic.w	r3, r3, #3
 808c652:	f043 0301 	orr.w	r3, r3, #1
 808c656:	81a3      	strh	r3, [r4, #12]
 808c658:	89a0      	ldrh	r0, [r4, #12]
 808c65a:	4305      	orrs	r5, r0
 808c65c:	81a5      	strh	r5, [r4, #12]
 808c65e:	e7cd      	b.n	808c5fc <__smakebuf_r+0x18>
 808c660:	0808b12d 	.word	0x0808b12d

0808c664 <__ascii_mbtowc>:
 808c664:	b082      	sub	sp, #8
 808c666:	b901      	cbnz	r1, 808c66a <__ascii_mbtowc+0x6>
 808c668:	a901      	add	r1, sp, #4
 808c66a:	b142      	cbz	r2, 808c67e <__ascii_mbtowc+0x1a>
 808c66c:	b14b      	cbz	r3, 808c682 <__ascii_mbtowc+0x1e>
 808c66e:	7813      	ldrb	r3, [r2, #0]
 808c670:	600b      	str	r3, [r1, #0]
 808c672:	7812      	ldrb	r2, [r2, #0]
 808c674:	1e10      	subs	r0, r2, #0
 808c676:	bf18      	it	ne
 808c678:	2001      	movne	r0, #1
 808c67a:	b002      	add	sp, #8
 808c67c:	4770      	bx	lr
 808c67e:	4610      	mov	r0, r2
 808c680:	e7fb      	b.n	808c67a <__ascii_mbtowc+0x16>
 808c682:	f06f 0001 	mvn.w	r0, #1
 808c686:	e7f8      	b.n	808c67a <__ascii_mbtowc+0x16>

0808c688 <memmove>:
 808c688:	4288      	cmp	r0, r1
 808c68a:	b510      	push	{r4, lr}
 808c68c:	eb01 0402 	add.w	r4, r1, r2
 808c690:	d902      	bls.n	808c698 <memmove+0x10>
 808c692:	4284      	cmp	r4, r0
 808c694:	4623      	mov	r3, r4
 808c696:	d807      	bhi.n	808c6a8 <memmove+0x20>
 808c698:	1e43      	subs	r3, r0, #1
 808c69a:	42a1      	cmp	r1, r4
 808c69c:	d008      	beq.n	808c6b0 <memmove+0x28>
 808c69e:	f811 2b01 	ldrb.w	r2, [r1], #1
 808c6a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 808c6a6:	e7f8      	b.n	808c69a <memmove+0x12>
 808c6a8:	4402      	add	r2, r0
 808c6aa:	4601      	mov	r1, r0
 808c6ac:	428a      	cmp	r2, r1
 808c6ae:	d100      	bne.n	808c6b2 <memmove+0x2a>
 808c6b0:	bd10      	pop	{r4, pc}
 808c6b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808c6b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 808c6ba:	e7f7      	b.n	808c6ac <memmove+0x24>

0808c6bc <__malloc_lock>:
 808c6bc:	4801      	ldr	r0, [pc, #4]	; (808c6c4 <__malloc_lock+0x8>)
 808c6be:	f7fe be1e 	b.w	808b2fe <__retarget_lock_acquire_recursive>
 808c6c2:	bf00      	nop
 808c6c4:	20000e28 	.word	0x20000e28

0808c6c8 <__malloc_unlock>:
 808c6c8:	4801      	ldr	r0, [pc, #4]	; (808c6d0 <__malloc_unlock+0x8>)
 808c6ca:	f7fe be19 	b.w	808b300 <__retarget_lock_release_recursive>
 808c6ce:	bf00      	nop
 808c6d0:	20000e28 	.word	0x20000e28

0808c6d4 <_realloc_r>:
 808c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c6d8:	4680      	mov	r8, r0
 808c6da:	4614      	mov	r4, r2
 808c6dc:	460e      	mov	r6, r1
 808c6de:	b921      	cbnz	r1, 808c6ea <_realloc_r+0x16>
 808c6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 808c6e4:	4611      	mov	r1, r2
 808c6e6:	f7ff ba1b 	b.w	808bb20 <_malloc_r>
 808c6ea:	b92a      	cbnz	r2, 808c6f8 <_realloc_r+0x24>
 808c6ec:	f7ff f9ac 	bl	808ba48 <_free_r>
 808c6f0:	4625      	mov	r5, r4
 808c6f2:	4628      	mov	r0, r5
 808c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c6f8:	f000 f8a2 	bl	808c840 <_malloc_usable_size_r>
 808c6fc:	4284      	cmp	r4, r0
 808c6fe:	4607      	mov	r7, r0
 808c700:	d802      	bhi.n	808c708 <_realloc_r+0x34>
 808c702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 808c706:	d812      	bhi.n	808c72e <_realloc_r+0x5a>
 808c708:	4621      	mov	r1, r4
 808c70a:	4640      	mov	r0, r8
 808c70c:	f7ff fa08 	bl	808bb20 <_malloc_r>
 808c710:	4605      	mov	r5, r0
 808c712:	2800      	cmp	r0, #0
 808c714:	d0ed      	beq.n	808c6f2 <_realloc_r+0x1e>
 808c716:	42bc      	cmp	r4, r7
 808c718:	4622      	mov	r2, r4
 808c71a:	4631      	mov	r1, r6
 808c71c:	bf28      	it	cs
 808c71e:	463a      	movcs	r2, r7
 808c720:	f7fd f88a 	bl	8089838 <memcpy>
 808c724:	4631      	mov	r1, r6
 808c726:	4640      	mov	r0, r8
 808c728:	f7ff f98e 	bl	808ba48 <_free_r>
 808c72c:	e7e1      	b.n	808c6f2 <_realloc_r+0x1e>
 808c72e:	4635      	mov	r5, r6
 808c730:	e7df      	b.n	808c6f2 <_realloc_r+0x1e>
	...

0808c734 <_read_r>:
 808c734:	b538      	push	{r3, r4, r5, lr}
 808c736:	4d07      	ldr	r5, [pc, #28]	; (808c754 <_read_r+0x20>)
 808c738:	4604      	mov	r4, r0
 808c73a:	4608      	mov	r0, r1
 808c73c:	4611      	mov	r1, r2
 808c73e:	2200      	movs	r2, #0
 808c740:	602a      	str	r2, [r5, #0]
 808c742:	461a      	mov	r2, r3
 808c744:	f7f5 ff08 	bl	8082558 <_read>
 808c748:	1c43      	adds	r3, r0, #1
 808c74a:	d102      	bne.n	808c752 <_read_r+0x1e>
 808c74c:	682b      	ldr	r3, [r5, #0]
 808c74e:	b103      	cbz	r3, 808c752 <_read_r+0x1e>
 808c750:	6023      	str	r3, [r4, #0]
 808c752:	bd38      	pop	{r3, r4, r5, pc}
 808c754:	20000e34 	.word	0x20000e34

0808c758 <_raise_r>:
 808c758:	291f      	cmp	r1, #31
 808c75a:	b538      	push	{r3, r4, r5, lr}
 808c75c:	4604      	mov	r4, r0
 808c75e:	460d      	mov	r5, r1
 808c760:	d904      	bls.n	808c76c <_raise_r+0x14>
 808c762:	2316      	movs	r3, #22
 808c764:	6003      	str	r3, [r0, #0]
 808c766:	f04f 30ff 	mov.w	r0, #4294967295
 808c76a:	bd38      	pop	{r3, r4, r5, pc}
 808c76c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 808c76e:	b112      	cbz	r2, 808c776 <_raise_r+0x1e>
 808c770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808c774:	b94b      	cbnz	r3, 808c78a <_raise_r+0x32>
 808c776:	4620      	mov	r0, r4
 808c778:	f000 f830 	bl	808c7dc <_getpid_r>
 808c77c:	462a      	mov	r2, r5
 808c77e:	4601      	mov	r1, r0
 808c780:	4620      	mov	r0, r4
 808c782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c786:	f000 b817 	b.w	808c7b8 <_kill_r>
 808c78a:	2b01      	cmp	r3, #1
 808c78c:	d00a      	beq.n	808c7a4 <_raise_r+0x4c>
 808c78e:	1c59      	adds	r1, r3, #1
 808c790:	d103      	bne.n	808c79a <_raise_r+0x42>
 808c792:	2316      	movs	r3, #22
 808c794:	6003      	str	r3, [r0, #0]
 808c796:	2001      	movs	r0, #1
 808c798:	e7e7      	b.n	808c76a <_raise_r+0x12>
 808c79a:	2400      	movs	r4, #0
 808c79c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 808c7a0:	4628      	mov	r0, r5
 808c7a2:	4798      	blx	r3
 808c7a4:	2000      	movs	r0, #0
 808c7a6:	e7e0      	b.n	808c76a <_raise_r+0x12>

0808c7a8 <raise>:
 808c7a8:	4b02      	ldr	r3, [pc, #8]	; (808c7b4 <raise+0xc>)
 808c7aa:	4601      	mov	r1, r0
 808c7ac:	6818      	ldr	r0, [r3, #0]
 808c7ae:	f7ff bfd3 	b.w	808c758 <_raise_r>
 808c7b2:	bf00      	nop
 808c7b4:	20000090 	.word	0x20000090

0808c7b8 <_kill_r>:
 808c7b8:	b538      	push	{r3, r4, r5, lr}
 808c7ba:	4d07      	ldr	r5, [pc, #28]	; (808c7d8 <_kill_r+0x20>)
 808c7bc:	2300      	movs	r3, #0
 808c7be:	4604      	mov	r4, r0
 808c7c0:	4608      	mov	r0, r1
 808c7c2:	4611      	mov	r1, r2
 808c7c4:	602b      	str	r3, [r5, #0]
 808c7c6:	f7f5 fead 	bl	8082524 <_kill>
 808c7ca:	1c43      	adds	r3, r0, #1
 808c7cc:	d102      	bne.n	808c7d4 <_kill_r+0x1c>
 808c7ce:	682b      	ldr	r3, [r5, #0]
 808c7d0:	b103      	cbz	r3, 808c7d4 <_kill_r+0x1c>
 808c7d2:	6023      	str	r3, [r4, #0]
 808c7d4:	bd38      	pop	{r3, r4, r5, pc}
 808c7d6:	bf00      	nop
 808c7d8:	20000e34 	.word	0x20000e34

0808c7dc <_getpid_r>:
 808c7dc:	f7f5 be9a 	b.w	8082514 <_getpid>

0808c7e0 <__ascii_wctomb>:
 808c7e0:	b149      	cbz	r1, 808c7f6 <__ascii_wctomb+0x16>
 808c7e2:	2aff      	cmp	r2, #255	; 0xff
 808c7e4:	bf85      	ittet	hi
 808c7e6:	238a      	movhi	r3, #138	; 0x8a
 808c7e8:	6003      	strhi	r3, [r0, #0]
 808c7ea:	700a      	strbls	r2, [r1, #0]
 808c7ec:	f04f 30ff 	movhi.w	r0, #4294967295
 808c7f0:	bf98      	it	ls
 808c7f2:	2001      	movls	r0, #1
 808c7f4:	4770      	bx	lr
 808c7f6:	4608      	mov	r0, r1
 808c7f8:	4770      	bx	lr
	...

0808c7fc <_fstat_r>:
 808c7fc:	b538      	push	{r3, r4, r5, lr}
 808c7fe:	4d07      	ldr	r5, [pc, #28]	; (808c81c <_fstat_r+0x20>)
 808c800:	2300      	movs	r3, #0
 808c802:	4604      	mov	r4, r0
 808c804:	4608      	mov	r0, r1
 808c806:	4611      	mov	r1, r2
 808c808:	602b      	str	r3, [r5, #0]
 808c80a:	f7f5 feea 	bl	80825e2 <_fstat>
 808c80e:	1c43      	adds	r3, r0, #1
 808c810:	d102      	bne.n	808c818 <_fstat_r+0x1c>
 808c812:	682b      	ldr	r3, [r5, #0]
 808c814:	b103      	cbz	r3, 808c818 <_fstat_r+0x1c>
 808c816:	6023      	str	r3, [r4, #0]
 808c818:	bd38      	pop	{r3, r4, r5, pc}
 808c81a:	bf00      	nop
 808c81c:	20000e34 	.word	0x20000e34

0808c820 <_isatty_r>:
 808c820:	b538      	push	{r3, r4, r5, lr}
 808c822:	4d06      	ldr	r5, [pc, #24]	; (808c83c <_isatty_r+0x1c>)
 808c824:	2300      	movs	r3, #0
 808c826:	4604      	mov	r4, r0
 808c828:	4608      	mov	r0, r1
 808c82a:	602b      	str	r3, [r5, #0]
 808c82c:	f7f5 fee9 	bl	8082602 <_isatty>
 808c830:	1c43      	adds	r3, r0, #1
 808c832:	d102      	bne.n	808c83a <_isatty_r+0x1a>
 808c834:	682b      	ldr	r3, [r5, #0]
 808c836:	b103      	cbz	r3, 808c83a <_isatty_r+0x1a>
 808c838:	6023      	str	r3, [r4, #0]
 808c83a:	bd38      	pop	{r3, r4, r5, pc}
 808c83c:	20000e34 	.word	0x20000e34

0808c840 <_malloc_usable_size_r>:
 808c840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 808c844:	1f18      	subs	r0, r3, #4
 808c846:	2b00      	cmp	r3, #0
 808c848:	bfbc      	itt	lt
 808c84a:	580b      	ldrlt	r3, [r1, r0]
 808c84c:	18c0      	addlt	r0, r0, r3
 808c84e:	4770      	bx	lr

0808c850 <_init>:
 808c850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c852:	bf00      	nop
 808c854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808c856:	bc08      	pop	{r3}
 808c858:	469e      	mov	lr, r3
 808c85a:	4770      	bx	lr

0808c85c <_fini>:
 808c85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c85e:	bf00      	nop
 808c860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 808c862:	bc08      	pop	{r3}
 808c864:	469e      	mov	lr, r3
 808c866:	4770      	bx	lr
