
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004918  08004918  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004920  08004920  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004924  08004924  00014924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001f4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008c42  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001953  00000000  00000000  00028d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007b0  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005e9  00000000  00000000  0002ae20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e91  00000000  00000000  0002b409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009abe  00000000  00000000  0004c29a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4395  00000000  00000000  00055d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a24  00000000  00000000  0011a0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0011cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004600 	.word	0x08004600

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004600 	.word	0x08004600

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000580:	f000 fcaa 	bl	8000ed8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000584:	f000 f81e 	bl	80005c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000588:	f000 f8a4 	bl	80006d4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800058c:	f000 f878 	bl	8000680 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(2000);
 8000590:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000594:	f000 fd12 	bl	8000fbc <HAL_Delay>
	HAL_UARTEx_ReceiveToIdle_IT(&huart3, (uint8_t*) rxBuffer, 50);
 8000598:	2232      	movs	r2, #50	; 0x32
 800059a:	4907      	ldr	r1, [pc, #28]	; (80005b8 <main+0x3c>)
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <main+0x40>)
 800059e:	f001 fdda 	bl	8002156 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rxFlag == 1) {
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <main+0x44>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d1fb      	bne.n	80005a2 <main+0x26>
			commandHandler();
 80005aa:	f000 fa97 	bl	8000adc <commandHandler>
			rxFlag = 0;
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <main+0x44>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
		if (rxFlag == 1) {
 80005b4:	e7f5      	b.n	80005a2 <main+0x26>
 80005b6:	bf00      	nop
 80005b8:	200000c8 	.word	0x200000c8
 80005bc:	20000084 	.word	0x20000084
 80005c0:	20000105 	.word	0x20000105

080005c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fffb 	bl	80035ce <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xb4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xb4>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xb4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <SystemClock_Config+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <SystemClock_Config+0xb8>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b19      	ldr	r3, [pc, #100]	; (800067c <SystemClock_Config+0xb8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062c:	2300      	movs	r3, #0
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f857 	bl	80016e8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x80>
		Error_Handler();
 8000640:	f000 fa96 	bl	8000b70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 faba 	bl	8001bd8 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xaa>
		Error_Handler();
 800066a:	f000 fa81 	bl	8000b70 <Error_Handler>
	}
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART3_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART3_UART_Init+0x4c>)
 80006b8:	f001 fc6e 	bl	8001f98 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80006c2:	f000 fa55 	bl	8000b70 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	40004800 	.word	0x40004800

080006d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_GPIO_Init+0x98>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_GPIO_Init+0x98>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0x98>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_GPIO_Init+0x98>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <MX_GPIO_Init+0x98>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_GPIO_Init+0x98>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_GPIO_Init+0x98>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <MX_GPIO_Init+0x98>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_GPIO_Init+0x98>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED2_Pin | LED1_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2150      	movs	r1, #80	; 0x50
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000744:	f000 ffb6 	bl	80016b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED1_Pin;
 8000748:	2350      	movs	r3, #80	; 0x50
 800074a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_GPIO_Init+0x9c>)
 8000760:	f000 fdf4 	bl	800134c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020c00 	.word	0x40020c00

08000774 <response>:

/* USER CODE BEGIN 4 */
/* In phản hồi ra màn hình terminal */
void response(char *string) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) string, strlen(string), 1000);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd27 	bl	80001d0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <response+0x28>)
 800078e:	f001 fc50 	bl	8002032 <HAL_UART_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000084 	.word	0x20000084

080007a0 <deleteRxData>:

/* Xoá bộ đệm nhận dữ liệu */
void deleteRxData() {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	memset(rxBuffer, '\0', 50);
 80007a4:	2232      	movs	r2, #50	; 0x32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <deleteRxData+0x14>)
 80007aa:	f002 ff10 	bl	80035ce <memset>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000c8 	.word	0x200000c8

080007b8 <checkCommand>:

/* Kiểm tra dữ liệu nhận được là command nào */
void checkCommand() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if (strstr(rxBuffer, "*SET_DEV_ID:") != NULL)
 80007bc:	4918      	ldr	r1, [pc, #96]	; (8000820 <checkCommand+0x68>)
 80007be:	4819      	ldr	r0, [pc, #100]	; (8000824 <checkCommand+0x6c>)
 80007c0:	f002 ff6a 	bl	8003698 <strstr>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <checkCommand+0x1a>
		eCmd = SET_DEV_ID;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <checkCommand+0x70>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
		eCmd = SET_LED_STATE;
	else if (strstr(rxBuffer, "*GET_LED_STATE:") != NULL)
		eCmd = GET_LED_STATE;
	else
		eCmd = 0;
}
 80007d0:	e023      	b.n	800081a <checkCommand+0x62>
	else if (strstr(rxBuffer, "*GET_DEV_ID") != NULL)
 80007d2:	4916      	ldr	r1, [pc, #88]	; (800082c <checkCommand+0x74>)
 80007d4:	4813      	ldr	r0, [pc, #76]	; (8000824 <checkCommand+0x6c>)
 80007d6:	f002 ff5f 	bl	8003698 <strstr>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <checkCommand+0x30>
		eCmd = GET_DEV_ID;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <checkCommand+0x70>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	701a      	strb	r2, [r3, #0]
}
 80007e6:	e018      	b.n	800081a <checkCommand+0x62>
	else if (strstr(rxBuffer, "*SET_LED_STATE:") != NULL)
 80007e8:	4911      	ldr	r1, [pc, #68]	; (8000830 <checkCommand+0x78>)
 80007ea:	480e      	ldr	r0, [pc, #56]	; (8000824 <checkCommand+0x6c>)
 80007ec:	f002 ff54 	bl	8003698 <strstr>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <checkCommand+0x46>
		eCmd = SET_LED_STATE;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <checkCommand+0x70>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	701a      	strb	r2, [r3, #0]
}
 80007fc:	e00d      	b.n	800081a <checkCommand+0x62>
	else if (strstr(rxBuffer, "*GET_LED_STATE:") != NULL)
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <checkCommand+0x7c>)
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <checkCommand+0x6c>)
 8000802:	f002 ff49 	bl	8003698 <strstr>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <checkCommand+0x5c>
		eCmd = GET_LED_STATE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <checkCommand+0x70>)
 800080e:	2204      	movs	r2, #4
 8000810:	701a      	strb	r2, [r3, #0]
}
 8000812:	e002      	b.n	800081a <checkCommand+0x62>
		eCmd = 0;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <checkCommand+0x70>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	08004618 	.word	0x08004618
 8000824:	200000c8 	.word	0x200000c8
 8000828:	200000fa 	.word	0x200000fa
 800082c:	08004628 	.word	0x08004628
 8000830:	08004634 	.word	0x08004634
 8000834:	08004644 	.word	0x08004644

08000838 <setDeviceID>:

/* Hàm cấu hình ID cho thiết bị */
void setDeviceID() {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	/* Kiểm tra độ dài của command +SET_DEV_ID:123456\r\n */
	if (strlen(rxBuffer) == 20) {
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <setDeviceID+0x50>)
 8000840:	f7ff fcc6 	bl	80001d0 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	2b14      	cmp	r3, #20
 8000848:	d116      	bne.n	8000878 <setDeviceID+0x40>
		/*Tách ID thiết bị */
		//Cách 1: sử dụng strtok
		char *token = NULL;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
		token = strtok(rxBuffer, ":"); //+SET_DEV_ID
 800084e:	490f      	ldr	r1, [pc, #60]	; (800088c <setDeviceID+0x54>)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <setDeviceID+0x50>)
 8000852:	f002 fec5 	bl	80035e0 <strtok>
 8000856:	6078      	str	r0, [r7, #4]
		token = strtok(NULL, "\r"); //123456
 8000858:	490d      	ldr	r1, [pc, #52]	; (8000890 <setDeviceID+0x58>)
 800085a:	2000      	movs	r0, #0
 800085c:	f002 fec0 	bl	80035e0 <strtok>
 8000860:	6078      	str	r0, [r7, #4]
		memcpy(deviceID, token, 6); //deviceID = 123456;
 8000862:	2206      	movs	r2, #6
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <setDeviceID+0x5c>)
 8000868:	f002 ffaf 	bl	80037ca <memcpy>
		token = NULL;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
		//Cách 2: sử dụng memcpy
		//memcpy(deviceID, rxBuffer + 12, 6);
		response("\r\n+OK\r\n ");
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <setDeviceID+0x60>)
 8000872:	f7ff ff7f 	bl	8000774 <response>
	} else {
		response("\r\n+ERROR:error command\r\n");
	}
}
 8000876:	e002      	b.n	800087e <setDeviceID+0x46>
		response("\r\n+ERROR:error command\r\n");
 8000878:	4808      	ldr	r0, [pc, #32]	; (800089c <setDeviceID+0x64>)
 800087a:	f7ff ff7b 	bl	8000774 <response>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000c8 	.word	0x200000c8
 800088c:	08004654 	.word	0x08004654
 8000890:	08004658 	.word	0x08004658
 8000894:	200000fc 	.word	0x200000fc
 8000898:	0800465c 	.word	0x0800465c
 800089c:	08004668 	.word	0x08004668

080008a0 <getDeviceID>:

/* Hàm lấy ID của thiết bị */
void getDeviceID() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	/* Kiểm tra độ dài command +GET_DEV_ID\r\n */
	if (strlen(rxBuffer) == 13) {
 80008a6:	4816      	ldr	r0, [pc, #88]	; (8000900 <getDeviceID+0x60>)
 80008a8:	f7ff fc92 	bl	80001d0 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b0d      	cmp	r3, #13
 80008b0:	d11f      	bne.n	80008f2 <getDeviceID+0x52>
		/* Kiểm tra độ dài của deviceID */
		if (strlen(deviceID) == 0) {
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <getDeviceID+0x64>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d103      	bne.n	80008c2 <getDeviceID+0x22>
			response("\r\n+ERROR:undefined\r\n");
 80008ba:	4813      	ldr	r0, [pc, #76]	; (8000908 <getDeviceID+0x68>)
 80008bc:	f7ff ff5a 	bl	8000774 <response>
			buffer = NULL;
		}
	} else {
		response("+ERROR:error command\r\n");
	}
}
 80008c0:	e01a      	b.n	80008f8 <getDeviceID+0x58>
			char *buffer = malloc(20 * sizeof(char));      //cấp phát động
 80008c2:	2014      	movs	r0, #20
 80008c4:	f002 fc16 	bl	80030f4 <malloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	607b      	str	r3, [r7, #4]
			memset(buffer, '\0', 20); //xoá bộ đệm buffer
 80008cc:	2214      	movs	r2, #20
 80008ce:	2100      	movs	r1, #0
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f002 fe7c 	bl	80035ce <memset>
			sprintf(buffer, "\r\n+ID:%s\r\nOK\r\n", deviceID);
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <getDeviceID+0x64>)
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <getDeviceID+0x6c>)
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f002 fe14 	bl	8003508 <siprintf>
			response(buffer);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff47 	bl	8000774 <response>
			free(buffer);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f002 fc0c 	bl	8003104 <free>
			buffer = NULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
}
 80008f0:	e002      	b.n	80008f8 <getDeviceID+0x58>
		response("+ERROR:error command\r\n");
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <getDeviceID+0x70>)
 80008f4:	f7ff ff3e 	bl	8000774 <response>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200000c8 	.word	0x200000c8
 8000904:	200000fc 	.word	0x200000fc
 8000908:	08004684 	.word	0x08004684
 800090c:	0800469c 	.word	0x0800469c
 8000910:	080046ac 	.word	0x080046ac

08000914 <setLedState>:

/* Hàm cấu hình trạng thái cho đèn led */
void setLedState() {
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	/* Kiểm tra độ dài của command +SET_LED_STATE:n,s\r\n (n = 1, 2), (s = 0, 1)*/
	if (strlen(rxBuffer) == 20) {
 800091a:	482e      	ldr	r0, [pc, #184]	; (80009d4 <setLedState+0xc0>)
 800091c:	f7ff fc58 	bl	80001d0 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	2b14      	cmp	r3, #20
 8000924:	d14e      	bne.n	80009c4 <setLedState+0xb0>
		/* Tách số thứ tự của led */
		char *token = NULL;
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
		token = strtok(rxBuffer, ":"); //+SET_LED_STATE
 800092a:	492b      	ldr	r1, [pc, #172]	; (80009d8 <setLedState+0xc4>)
 800092c:	4829      	ldr	r0, [pc, #164]	; (80009d4 <setLedState+0xc0>)
 800092e:	f002 fe57 	bl	80035e0 <strtok>
 8000932:	6078      	str	r0, [r7, #4]
		token = strtok(NULL, ","); //n
 8000934:	4929      	ldr	r1, [pc, #164]	; (80009dc <setLedState+0xc8>)
 8000936:	2000      	movs	r0, #0
 8000938:	f002 fe52 	bl	80035e0 <strtok>
 800093c:	6078      	str	r0, [r7, #4]
		ledOrder = atoi(token);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f002 fbd4 	bl	80030ec <atoi>
 8000944:	4603      	mov	r3, r0
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <setLedState+0xcc>)
 800094a:	701a      	strb	r2, [r3, #0]
		/* Tách trạng thái của led */
		token = strtok(NULL, "\r"); //s
 800094c:	4925      	ldr	r1, [pc, #148]	; (80009e4 <setLedState+0xd0>)
 800094e:	2000      	movs	r0, #0
 8000950:	f002 fe46 	bl	80035e0 <strtok>
 8000954:	6078      	str	r0, [r7, #4]
		ledState = atoi(token);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f002 fbc8 	bl	80030ec <atoi>
 800095c:	4603      	mov	r3, r0
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <setLedState+0xd4>)
 8000962:	701a      	strb	r2, [r3, #0]
		token = NULL;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]

		if ((ledState == 0) || (ledState) == 1) {
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <setLedState+0xd4>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <setLedState+0x64>
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <setLedState+0xd4>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d121      	bne.n	80009bc <setLedState+0xa8>
			if (ledOrder == 1) {
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <setLedState+0xcc>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10a      	bne.n	8000996 <setLedState+0x82>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, ledState);
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <setLedState+0xd4>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4818      	ldr	r0, [pc, #96]	; (80009ec <setLedState+0xd8>)
 800098a:	f000 fe93 	bl	80016b4 <HAL_GPIO_WritePin>
				response("\r\nOK\r\n");
 800098e:	4818      	ldr	r0, [pc, #96]	; (80009f0 <setLedState+0xdc>)
 8000990:	f7ff fef0 	bl	8000774 <response>
			if (ledOrder == 1) {
 8000994:	e01a      	b.n	80009cc <setLedState+0xb8>
			} else if (ledOrder == 2) {
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <setLedState+0xcc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d10a      	bne.n	80009b4 <setLedState+0xa0>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, ledState);
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <setLedState+0xd4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	2110      	movs	r1, #16
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <setLedState+0xd8>)
 80009a8:	f000 fe84 	bl	80016b4 <HAL_GPIO_WritePin>
				response("\r\nOK\r\n");
 80009ac:	4810      	ldr	r0, [pc, #64]	; (80009f0 <setLedState+0xdc>)
 80009ae:	f7ff fee1 	bl	8000774 <response>
			if (ledOrder == 1) {
 80009b2:	e00b      	b.n	80009cc <setLedState+0xb8>
			} else
				response("\r\n+ERROR:undefined led\r\n");
 80009b4:	480f      	ldr	r0, [pc, #60]	; (80009f4 <setLedState+0xe0>)
 80009b6:	f7ff fedd 	bl	8000774 <response>
			if (ledOrder == 1) {
 80009ba:	e007      	b.n	80009cc <setLedState+0xb8>
		} else {
			response("\r\n+ERROR:undefined state\r\n");
 80009bc:	480e      	ldr	r0, [pc, #56]	; (80009f8 <setLedState+0xe4>)
 80009be:	f7ff fed9 	bl	8000774 <response>
		}

	} else {
		response("\r\n+ERROR:error command\r\n");
	}
}
 80009c2:	e003      	b.n	80009cc <setLedState+0xb8>
		response("\r\n+ERROR:error command\r\n");
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <setLedState+0xe8>)
 80009c6:	f7ff fed5 	bl	8000774 <response>
}
 80009ca:	e7ff      	b.n	80009cc <setLedState+0xb8>
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000c8 	.word	0x200000c8
 80009d8:	08004654 	.word	0x08004654
 80009dc:	080046c4 	.word	0x080046c4
 80009e0:	20000103 	.word	0x20000103
 80009e4:	08004658 	.word	0x08004658
 80009e8:	20000104 	.word	0x20000104
 80009ec:	40020c00 	.word	0x40020c00
 80009f0:	080046c8 	.word	0x080046c8
 80009f4:	080046d0 	.word	0x080046d0
 80009f8:	080046ec 	.word	0x080046ec
 80009fc:	08004668 	.word	0x08004668

08000a00 <getLedState>:

/* Hàm lấy trạng thái của đèn led */
void getLedState() {
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
	/* Kiểm tra độ dài command +GET_LED_STATE:n\r\n */
	if (strlen(rxBuffer) == 18) {
 8000a06:	482d      	ldr	r0, [pc, #180]	; (8000abc <getLedState+0xbc>)
 8000a08:	f7ff fbe2 	bl	80001d0 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d14c      	bne.n	8000aac <getLedState+0xac>
		char *token = NULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
		token = strtok(rxBuffer, ":"); //+SET_LED_STATE
 8000a16:	492a      	ldr	r1, [pc, #168]	; (8000ac0 <getLedState+0xc0>)
 8000a18:	4828      	ldr	r0, [pc, #160]	; (8000abc <getLedState+0xbc>)
 8000a1a:	f002 fde1 	bl	80035e0 <strtok>
 8000a1e:	6178      	str	r0, [r7, #20]
		/* Tách thứ tự của led */
		token = strtok(NULL, "\r"); //s
 8000a20:	4928      	ldr	r1, [pc, #160]	; (8000ac4 <getLedState+0xc4>)
 8000a22:	2000      	movs	r0, #0
 8000a24:	f002 fddc 	bl	80035e0 <strtok>
 8000a28:	6178      	str	r0, [r7, #20]
		ledOrder = atoi(token);
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f002 fb5e 	bl	80030ec <atoi>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <getLedState+0xc8>)
 8000a36:	701a      	strb	r2, [r3, #0]
		token = NULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

		char buffer[20] = { 0 };
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
		if (ledOrder == 1) {
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <getLedState+0xc8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d111      	bne.n	8000a78 <getLedState+0x78>
			sprintf(buffer, "\r\n+LED:%d,%d\r\nOK\r\n", ledOrder,
 8000a54:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <getLedState+0xc8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461c      	mov	r4, r3
					HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin));
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	481b      	ldr	r0, [pc, #108]	; (8000acc <getLedState+0xcc>)
 8000a5e:	f000 fe11 	bl	8001684 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
			sprintf(buffer, "\r\n+LED:%d,%d\r\nOK\r\n", ledOrder,
 8000a64:	4638      	mov	r0, r7
 8000a66:	4622      	mov	r2, r4
 8000a68:	4919      	ldr	r1, [pc, #100]	; (8000ad0 <getLedState+0xd0>)
 8000a6a:	f002 fd4d 	bl	8003508 <siprintf>
			response(buffer);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe7f 	bl	8000774 <response>
		} else
			response("\r\n+ERROR:undefined led\r\n");
	} else {
		response("\r\n+ERROR:error command\r\n");
	}
}
 8000a76:	e01c      	b.n	8000ab2 <getLedState+0xb2>
		} else if (ledOrder == 2) {
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <getLedState+0xc8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d111      	bne.n	8000aa4 <getLedState+0xa4>
			sprintf(buffer, "\r\n+LED:%d,%d\r\nOK\r\n", ledOrder,
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <getLedState+0xc8>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461c      	mov	r4, r3
					HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin));
 8000a86:	2110      	movs	r1, #16
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <getLedState+0xcc>)
 8000a8a:	f000 fdfb 	bl	8001684 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
			sprintf(buffer, "\r\n+LED:%d,%d\r\nOK\r\n", ledOrder,
 8000a90:	4638      	mov	r0, r7
 8000a92:	4622      	mov	r2, r4
 8000a94:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <getLedState+0xd0>)
 8000a96:	f002 fd37 	bl	8003508 <siprintf>
			response(buffer);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe69 	bl	8000774 <response>
}
 8000aa2:	e006      	b.n	8000ab2 <getLedState+0xb2>
			response("\r\n+ERROR:undefined led\r\n");
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <getLedState+0xd4>)
 8000aa6:	f7ff fe65 	bl	8000774 <response>
}
 8000aaa:	e002      	b.n	8000ab2 <getLedState+0xb2>
		response("\r\n+ERROR:error command\r\n");
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <getLedState+0xd8>)
 8000aae:	f7ff fe61 	bl	8000774 <response>
}
 8000ab2:	bf00      	nop
 8000ab4:	371c      	adds	r7, #28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000c8 	.word	0x200000c8
 8000ac0:	08004654 	.word	0x08004654
 8000ac4:	08004658 	.word	0x08004658
 8000ac8:	20000103 	.word	0x20000103
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	08004708 	.word	0x08004708
 8000ad4:	080046d0 	.word	0x080046d0
 8000ad8:	08004668 	.word	0x08004668

08000adc <commandHandler>:

/* Hàm xử lý chính */
void commandHandler() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	switch (eCmd) {
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <commandHandler+0x4c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d816      	bhi.n	8000b18 <commandHandler+0x3c>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <commandHandler+0x14>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b01 	.word	0x08000b01
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	08000b07 	.word	0x08000b07
 8000afc:	08000b13 	.word	0x08000b13
	case SET_DEV_ID:
		setDeviceID();
 8000b00:	f7ff fe9a 	bl	8000838 <setDeviceID>
		break;
 8000b04:	e009      	b.n	8000b1a <commandHandler+0x3e>
	case GET_DEV_ID:
		getDeviceID();
 8000b06:	f7ff fecb 	bl	80008a0 <getDeviceID>
		break;
 8000b0a:	e006      	b.n	8000b1a <commandHandler+0x3e>
	case SET_LED_STATE:
		setLedState();
 8000b0c:	f7ff ff02 	bl	8000914 <setLedState>
		break;
 8000b10:	e003      	b.n	8000b1a <commandHandler+0x3e>
	case GET_LED_STATE:
		getLedState();
 8000b12:	f7ff ff75 	bl	8000a00 <getLedState>
		break;
 8000b16:	e000      	b.n	8000b1a <commandHandler+0x3e>
	default:
		break;
 8000b18:	bf00      	nop
	}
	eCmd = 0;
 8000b1a:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <commandHandler+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
	deleteRxData();
 8000b20:	f7ff fe3e 	bl	80007a0 <deleteRxData>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000fa 	.word	0x200000fa

08000b2c <HAL_UARTEx_RxEventCallback>:

/* Hàm gọi lại xử lý phục vụ ngắt UART */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <HAL_UARTEx_RxEventCallback+0x34>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d109      	bne.n	8000b56 <HAL_UARTEx_RxEventCallback+0x2a>
		checkCommand();
 8000b42:	f7ff fe39 	bl	80007b8 <checkCommand>
		rxFlag = 1;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_UARTEx_RxEventCallback+0x38>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit(huart, (uint8_t *) "\n", 1, 100);
		//HAL_UART_Transmit(huart, (uint8_t *) rxBuffer, strlen(rxBuffer), 100);
		HAL_UARTEx_ReceiveToIdle_IT(&huart3, (uint8_t*) rxBuffer, 50);
 8000b4c:	2232      	movs	r2, #50	; 0x32
 8000b4e:	4906      	ldr	r1, [pc, #24]	; (8000b68 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_UARTEx_RxEventCallback+0x40>)
 8000b52:	f001 fb00 	bl	8002156 <HAL_UARTEx_ReceiveToIdle_IT>
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004800 	.word	0x40004800
 8000b64:	20000105 	.word	0x20000105
 8000b68:	200000c8 	.word	0x200000c8
 8000b6c:	20000084 	.word	0x20000084

08000b70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	; 0x44
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_UART_MspInit+0x94>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d134      	bne.n	8000c58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_UART_MspInit+0x98>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <HAL_UART_MspInit+0x9c>)
 8000c44:	f000 fb82 	bl	800134c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2027      	movs	r0, #39	; 0x27
 8000c4e:	f000 fab4 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c52:	2027      	movs	r0, #39	; 0x27
 8000c54:	f000 facd 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004800 	.word	0x40004800
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f960 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <USART3_IRQHandler+0x10>)
 8000cc6:	f001 faab 	bl	8002220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000084 	.word	0x20000084

08000cd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return 1;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <_kill>:

int _kill(int pid, int sig)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cee:	f002 fd3f 	bl	8003770 <__errno>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2216      	movs	r2, #22
 8000cf6:	601a      	str	r2, [r3, #0]
  return -1;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <_exit>:

void _exit (int status)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ffe7 	bl	8000ce4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d16:	e7fe      	b.n	8000d16 <_exit+0x12>

08000d18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	e00a      	b.n	8000d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2a:	f3af 8000 	nop.w
 8000d2e:	4601      	mov	r1, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	dbf0      	blt.n	8000d2a <_read+0x12>
  }

  return len;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e009      	b.n	8000d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1c5a      	adds	r2, r3, #1
 8000d68:	60ba      	str	r2, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3301      	adds	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	dbf1      	blt.n	8000d64 <_write+0x12>
  }
  return len;
 8000d80:	687b      	ldr	r3, [r7, #4]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <_close>:

int _close(int file)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_isatty>:

int _isatty(int file)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f002 fca4 	bl	8003770 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000108 	.word	0x20000108
 8000e5c:	20000260 	.word	0x20000260

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f002 fc63 	bl	800377c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fb61 	bl	800057c <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ec8:	08004928 	.word	0x08004928
  ldr r2, =_sbss
 8000ecc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed0:	2000025c 	.word	0x2000025c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f94f 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	200f      	movs	r0, #15
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fe36 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f967 	bl	800120e <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f92f 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000008 	.word	0x20000008
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	2000010c 	.word	0x2000010c

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000010c 	.word	0x2000010c

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff29 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff3e 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff8e 	bl	80010f8 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5d 	bl	80010a4 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff31 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa2 	bl	8001160 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001232:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff feb6 	bl	8000fa4 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d008      	beq.n	8001258 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e052      	b.n	80012fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0216 	bic.w	r2, r2, #22
 8001266:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001276:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	d103      	bne.n	8001288 <HAL_DMA_Abort+0x62>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001284:	2b00      	cmp	r3, #0
 8001286:	d007      	beq.n	8001298 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0208 	bic.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a8:	e013      	b.n	80012d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012aa:	f7ff fe7b 	bl	8000fa4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d90c      	bls.n	80012d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2220      	movs	r2, #32
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2203      	movs	r2, #3
 80012c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e015      	b.n	80012fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e4      	bne.n	80012aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	223f      	movs	r2, #63	; 0x3f
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d004      	beq.n	8001324 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e00c      	b.n	800133e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2205      	movs	r2, #5
 8001328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	; 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	e16b      	b.n	8001640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	f040 815a 	bne.w	800163a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d005      	beq.n	800139e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139a:	2b02      	cmp	r3, #2
 800139c:	d130      	bne.n	8001400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f003 0201 	and.w	r2, r3, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d017      	beq.n	800143c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d123      	bne.n	8001490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	220f      	movs	r2, #15
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	69b9      	ldr	r1, [r7, #24]
 800148c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0203 	and.w	r2, r3, #3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80b4 	beq.w	800163a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a5f      	ldr	r2, [pc, #380]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <HAL_GPIO_Init+0x30c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ee:	4a5b      	ldr	r2, [pc, #364]	; (800165c <HAL_GPIO_Init+0x310>)
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	220f      	movs	r2, #15
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_GPIO_Init+0x314>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d02b      	beq.n	8001572 <HAL_GPIO_Init+0x226>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a51      	ldr	r2, [pc, #324]	; (8001664 <HAL_GPIO_Init+0x318>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d025      	beq.n	800156e <HAL_GPIO_Init+0x222>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a50      	ldr	r2, [pc, #320]	; (8001668 <HAL_GPIO_Init+0x31c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d01f      	beq.n	800156a <HAL_GPIO_Init+0x21e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4f      	ldr	r2, [pc, #316]	; (800166c <HAL_GPIO_Init+0x320>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d019      	beq.n	8001566 <HAL_GPIO_Init+0x21a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4e      	ldr	r2, [pc, #312]	; (8001670 <HAL_GPIO_Init+0x324>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0x216>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a4d      	ldr	r2, [pc, #308]	; (8001674 <HAL_GPIO_Init+0x328>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00d      	beq.n	800155e <HAL_GPIO_Init+0x212>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_GPIO_Init+0x32c>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d007      	beq.n	800155a <HAL_GPIO_Init+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4b      	ldr	r2, [pc, #300]	; (800167c <HAL_GPIO_Init+0x330>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d101      	bne.n	8001556 <HAL_GPIO_Init+0x20a>
 8001552:	2307      	movs	r3, #7
 8001554:	e00e      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001556:	2308      	movs	r3, #8
 8001558:	e00c      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800155a:	2306      	movs	r3, #6
 800155c:	e00a      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800155e:	2305      	movs	r3, #5
 8001560:	e008      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001562:	2304      	movs	r3, #4
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001566:	2303      	movs	r3, #3
 8001568:	e004      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800156a:	2302      	movs	r3, #2
 800156c:	e002      	b.n	8001574 <HAL_GPIO_Init+0x228>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_GPIO_Init+0x228>
 8001572:	2300      	movs	r3, #0
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	f002 0203 	and.w	r2, r2, #3
 800157a:	0092      	lsls	r2, r2, #2
 800157c:	4093      	lsls	r3, r2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001584:	4935      	ldr	r1, [pc, #212]	; (800165c <HAL_GPIO_Init+0x310>)
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	3302      	adds	r3, #2
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x334>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800160a:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_GPIO_Init+0x334>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_GPIO_Init+0x334>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3301      	adds	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	f67f ae90 	bls.w	8001368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40013800 	.word	0x40013800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	40020800 	.word	0x40020800
 800166c:	40020c00 	.word	0x40020c00
 8001670:	40021000 	.word	0x40021000
 8001674:	40021400 	.word	0x40021400
 8001678:	40021800 	.word	0x40021800
 800167c:	40021c00 	.word	0x40021c00
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e267      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d075      	beq.n	80017f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d00c      	beq.n	800172c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800171a:	2b08      	cmp	r3, #8
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b82      	ldr	r3, [pc, #520]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800172a:	d10b      	bne.n	8001744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d05b      	beq.n	80017f0 <HAL_RCC_OscConfig+0x108>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d157      	bne.n	80017f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e242      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x74>
 800174e:	4b76      	ldr	r3, [pc, #472]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a75      	ldr	r2, [pc, #468]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0xb0>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x98>
 8001766:	4b70      	ldr	r3, [pc, #448]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6f      	ldr	r2, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a6c      	ldr	r2, [pc, #432]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0xb0>
 8001780:	4b69      	ldr	r3, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a68      	ldr	r2, [pc, #416]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc00 	bl	8000fa4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff fbfc 	bl	8000fa4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e207      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0xc0>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fbec 	bl	8000fa4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fbe8 	bl	8000fa4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1f3      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0xe8>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fe:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b47      	ldr	r3, [pc, #284]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d11c      	bne.n	8001850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001816:	4b44      	ldr	r3, [pc, #272]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d116      	bne.n	8001850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	4b41      	ldr	r3, [pc, #260]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x152>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e1c7      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	e03a      	b.n	80018c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001858:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x244>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fba1 	bl	8000fa4 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001866:	f7ff fb9d 	bl	8000fa4 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e1a8      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4925      	ldr	r1, [pc, #148]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e015      	b.n	80018c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x244>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb80 	bl	8000fa4 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb7c 	bl	8000fa4 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e187      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d036      	beq.n	8001940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d016      	beq.n	8001908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_RCC_OscConfig+0x248>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e0:	f7ff fb60 	bl	8000fa4 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fb5c 	bl	8000fa4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e167      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x240>)
 80018fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x200>
 8001906:	e01b      	b.n	8001940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_RCC_OscConfig+0x248>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190e:	f7ff fb49 	bl	8000fa4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	e00e      	b.n	8001934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fb45 	bl	8000fa4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d907      	bls.n	8001934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e150      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
 8001928:	40023800 	.word	0x40023800
 800192c:	42470000 	.word	0x42470000
 8001930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001934:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1ea      	bne.n	8001916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8097 	beq.w	8001a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	4b7d      	ldr	r3, [pc, #500]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a7c      	ldr	r2, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198a:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb05 	bl	8000fa4 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff fb01 	bl	8000fa4 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e10c      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_OscConfig+0x474>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x2ea>
 80019c4:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c8:	4a63      	ldr	r2, [pc, #396]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6713      	str	r3, [r2, #112]	; 0x70
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x324>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x30c>
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019de:	4a5e      	ldr	r2, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6713      	str	r3, [r2, #112]	; 0x70
 80019e6:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	e00b      	b.n	8001a0c <HAL_RCC_OscConfig+0x324>
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a54      	ldr	r2, [pc, #336]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d015      	beq.n	8001a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7ff fac6 	bl	8000fa4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fac2 	bl	8000fa4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e0cb      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0ee      	beq.n	8001a1c <HAL_RCC_OscConfig+0x334>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fab0 	bl	8000fa4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff faac 	bl	8000fa4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0b5      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ee      	bne.n	8001a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d105      	bne.n	8001a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	4b39      	ldr	r3, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a38      	ldr	r2, [pc, #224]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a1 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d05c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d141      	bne.n	8001b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa80 	bl	8000fa4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa7c 	bl	8000fa4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e087      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69da      	ldr	r2, [r3, #28]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	491b      	ldr	r1, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa55 	bl	8000fa4 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fa51 	bl	8000fa4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e05c      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x416>
 8001b1c:	e054      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x478>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa3e 	bl	8000fa4 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fa3a 	bl	8000fa4 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e045      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x470>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x444>
 8001b4a:	e03d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e038      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x4ec>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d028      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d121      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d11a      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d111      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0cc      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d90c      	bls.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0b8      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	494d      	ldr	r1, [pc, #308]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d044      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d119      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e07f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e067      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4934      	ldr	r1, [pc, #208]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff f96c 	bl	8000fa4 <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff f968 	bl	8000fa4 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e04f      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d20c      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e032      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4916      	ldr	r1, [pc, #88]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	490e      	ldr	r1, [pc, #56]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d5e:	f000 f821 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	490a      	ldr	r1, [pc, #40]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d70:	5ccb      	ldrb	r3, [r1, r3]
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f8cc 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	40023800 	.word	0x40023800
 8001d98:	0800471c 	.word	0x0800471c
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001da8:	b090      	sub	sp, #64	; 0x40
 8001daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
 8001db0:	2300      	movs	r3, #0
 8001db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dbc:	4b59      	ldr	r3, [pc, #356]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d00d      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x40>
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	f200 80a1 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x16c>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d003      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x3a>
 8001dd6:	e09b      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ddc:	e09b      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001de0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001de2:	e098      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dee:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d028      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	099b      	lsrs	r3, r3, #6
 8001e00:	2200      	movs	r2, #0
 8001e02:	623b      	str	r3, [r7, #32]
 8001e04:	627a      	str	r2, [r7, #36]	; 0x24
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e10:	fb03 f201 	mul.w	r2, r3, r1
 8001e14:	2300      	movs	r3, #0
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a43      	ldr	r2, [pc, #268]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001e1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e24:	460a      	mov	r2, r1
 8001e26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2a:	4413      	add	r3, r2
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e30:	2200      	movs	r2, #0
 8001e32:	61bb      	str	r3, [r7, #24]
 8001e34:	61fa      	str	r2, [r7, #28]
 8001e36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e3e:	f7fe fa1f 	bl	8000280 <__aeabi_uldivmod>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4613      	mov	r3, r2
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4a:	e053      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	2200      	movs	r2, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	617a      	str	r2, [r7, #20]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e5e:	f04f 0b00 	mov.w	fp, #0
 8001e62:	4652      	mov	r2, sl
 8001e64:	465b      	mov	r3, fp
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0159      	lsls	r1, r3, #5
 8001e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e74:	0150      	lsls	r0, r2, #5
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001e7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e96:	ebb2 0408 	subs.w	r4, r2, r8
 8001e9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	00eb      	lsls	r3, r5, #3
 8001ea8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eac:	00e2      	lsls	r2, r4, #3
 8001eae:	4614      	mov	r4, r2
 8001eb0:	461d      	mov	r5, r3
 8001eb2:	eb14 030a 	adds.w	r3, r4, sl
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	eb45 030b 	adc.w	r3, r5, fp
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	028b      	lsls	r3, r1, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	028a      	lsls	r2, r1, #10
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	60fa      	str	r2, [r7, #12]
 8001ee4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee8:	f7fe f9ca 	bl	8000280 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3740      	adds	r7, #64	; 0x40
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	017d7840 	.word	0x017d7840

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	0800472c 	.word	0x0800472c

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	0800472c 	.word	0x0800472c

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e03f      	b.n	800202a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fe04 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fe11 	bl	8002c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08a      	sub	sp, #40	; 0x28
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	d17c      	bne.n	800214c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_UART_Transmit+0x2c>
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e075      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_UART_Transmit+0x3e>
 800206c:	2302      	movs	r3, #2
 800206e:	e06e      	b.n	800214e <HAL_UART_Transmit+0x11c>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2221      	movs	r2, #33	; 0x21
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002086:	f7fe ff8d 	bl	8000fa4 <HAL_GetTick>
 800208a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	88fa      	ldrh	r2, [r7, #6]
 8002096:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a0:	d108      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e003      	b.n	80020bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020c4:	e02a      	b.n	800211c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fb51 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e036      	b.n	800214e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10b      	bne.n	80020fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	3302      	adds	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e007      	b.n	800210e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1cf      	bne.n	80020c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fb21 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e006      	b.n	800214e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	e000      	b.n	800214e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800214c:	2302      	movs	r3, #2
  }
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08c      	sub	sp, #48	; 0x30
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	d152      	bne.n	8002216 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04b      	b.n	8002218 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800218a:	2302      	movs	r3, #2
 800218c:	e044      	b.n	8002218 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	461a      	mov	r2, r3
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 fb56 	bl	8002854 <UART_Start_Receive_IT>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80021ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12c      	bne.n	8002210 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d125      	bne.n	800220a <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	617b      	str	r3, [r7, #20]
   return(result);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f4:	627a      	str	r2, [r7, #36]	; 0x24
 80021f6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	e841 2300 	strex	r3, r2, [r1]
 8002200:	61fb      	str	r3, [r7, #28]
   return(result);
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8002208:	e002      	b.n	8002210 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002214:	e000      	b.n	8002218 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3730      	adds	r7, #48	; 0x30
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0ba      	sub	sp, #232	; 0xe8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800225e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10f      	bne.n	8002286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_UART_IRQHandler+0x66>
 8002272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 fc05 	bl	8002a8e <UART_Receive_IT>
      return;
 8002284:	e256      	b.n	8002734 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80de 	beq.w	800244c <HAL_UART_IRQHandler+0x22c>
 8002290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800229c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80d1 	beq.w	800244c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_UART_IRQHandler+0xae>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d005      	beq.n	80022ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_UART_IRQHandler+0xd2>
 80022da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f043 0202 	orr.w	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_UART_IRQHandler+0xf6>
 80022fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0204 	orr.w	r2, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d011      	beq.n	8002346 <HAL_UART_IRQHandler+0x126>
 8002322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800232e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f043 0208 	orr.w	r2, r3, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 81ed 	beq.w	800272a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_UART_IRQHandler+0x14e>
 800235c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb90 	bl	8002a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_UART_IRQHandler+0x17a>
 8002392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d04f      	beq.n	800243a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa98 	bl	80028d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b40      	cmp	r3, #64	; 0x40
 80023ac:	d141      	bne.n	8002432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3314      	adds	r3, #20
 80023b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023bc:	e853 3f00 	ldrex	r3, [r3]
 80023c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3314      	adds	r3, #20
 80023d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023ea:	e841 2300 	strex	r3, r2, [r1]
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1d9      	bne.n	80023ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d013      	beq.n	800242a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	4a7d      	ldr	r2, [pc, #500]	; (80025fc <HAL_UART_IRQHandler+0x3dc>)
 8002408:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe ff79 	bl	8001306 <HAL_DMA_Abort_IT>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002424:	4610      	mov	r0, r2
 8002426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002428:	e00e      	b.n	8002448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f99a 	bl	8002764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e00a      	b.n	8002448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f996 	bl	8002764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	e006      	b.n	8002448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f992 	bl	8002764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002446:	e170      	b.n	800272a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	bf00      	nop
    return;
 800244a:	e16e      	b.n	800272a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 814a 	bne.w	80026ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8143 	beq.w	80026ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 813c 	beq.w	80026ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	f040 80b4 	bne.w	8002600 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8140 	beq.w	800272e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024b6:	429a      	cmp	r2, r3
 80024b8:	f080 8139 	bcs.w	800272e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ce:	f000 8088 	beq.w	80025e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800250a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800250e:	e841 2300 	strex	r3, r2, [r1]
 8002512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1d9      	bne.n	80024d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800252e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002542:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002546:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002548:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800254a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e1      	bne.n	800251e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002564:	e853 3f00 	ldrex	r3, [r3]
 8002568:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800256a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002570:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3314      	adds	r3, #20
 800257a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800257e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002580:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002582:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002586:	e841 2300 	strex	r3, r2, [r1]
 800258a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800258c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1e3      	bne.n	800255a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b2:	f023 0310 	bic.w	r3, r3, #16
 80025b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e3      	bne.n	80025a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fe22 	bl	8001226 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fa9a 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025f8:	e099      	b.n	800272e <HAL_UART_IRQHandler+0x50e>
 80025fa:	bf00      	nop
 80025fc:	08002997 	.word	0x08002997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002608:	b29b      	uxth	r3, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002614:	b29b      	uxth	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808b 	beq.w	8002732 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800261c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8086 	beq.w	8002732 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	330c      	adds	r3, #12
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	e853 3f00 	ldrex	r3, [r3]
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800263c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800264a:	647a      	str	r2, [r7, #68]	; 0x44
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e3      	bne.n	8002626 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	623b      	str	r3, [r7, #32]
   return(result);
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3314      	adds	r3, #20
 800267e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002682:	633a      	str	r2, [r7, #48]	; 0x30
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e3      	bne.n	800265e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0310 	bic.w	r3, r3, #16
 80026ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026c8:	61fa      	str	r2, [r7, #28]
 80026ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	e841 2300 	strex	r3, r2, [r1]
 80026d4:	617b      	str	r3, [r7, #20]
   return(result);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e3      	bne.n	80026a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fa22 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e8:	e023      	b.n	8002732 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_UART_IRQHandler+0x4ea>
 80026f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f95b 	bl	80029be <UART_Transmit_IT>
    return;
 8002708:	e014      	b.n	8002734 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800270a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00e      	beq.n	8002734 <HAL_UART_IRQHandler+0x514>
 8002716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f99b 	bl	8002a5e <UART_EndTransmit_IT>
    return;
 8002728:	e004      	b.n	8002734 <HAL_UART_IRQHandler+0x514>
    return;
 800272a:	bf00      	nop
 800272c:	e002      	b.n	8002734 <HAL_UART_IRQHandler+0x514>
      return;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <HAL_UART_IRQHandler+0x514>
      return;
 8002732:	bf00      	nop
  }
}
 8002734:	37e8      	adds	r7, #232	; 0xe8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop

0800273c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b090      	sub	sp, #64	; 0x40
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002788:	e050      	b.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d04c      	beq.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002798:	f7fe fc04 	bl	8000fa4 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d241      	bcs.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c8:	637a      	str	r2, [r7, #52]	; 0x34
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	e853 3f00 	ldrex	r3, [r3]
 80027ea:	613b      	str	r3, [r7, #16]
   return(result);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3314      	adds	r3, #20
 80027fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fc:	623a      	str	r2, [r7, #32]
 80027fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	69f9      	ldr	r1, [r7, #28]
 8002802:	6a3a      	ldr	r2, [r7, #32]
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	61bb      	str	r3, [r7, #24]
   return(result);
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e5      	bne.n	80027dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e00f      	b.n	800284c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	429a      	cmp	r2, r3
 8002848:	d09f      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3740      	adds	r7, #64	; 0x40
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2222      	movs	r2, #34	; 0x22
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b095      	sub	sp, #84	; 0x54
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028f8:	643a      	str	r2, [r7, #64]	; 0x40
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	61fb      	str	r3, [r7, #28]
   return(result);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	d119      	bne.n	800297c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60bb      	str	r3, [r7, #8]
   return(result);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	61ba      	str	r2, [r7, #24]
 800296a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	613b      	str	r3, [r7, #16]
   return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800298a:	bf00      	nop
 800298c:	3754      	adds	r7, #84	; 0x54
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fed7 	bl	8002764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d13e      	bne.n	8002a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d114      	bne.n	8002a06 <UART_Transmit_IT+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]
 8002a04:	e008      	b.n	8002a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6211      	str	r1, [r2, #32]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fe5c 	bl	800273c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08c      	sub	sp, #48	; 0x30
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	f040 80ab 	bne.w	8002bfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d117      	bne.n	8002ade <UART_Receive_IT+0x50>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	1c9a      	adds	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e026      	b.n	8002b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d007      	beq.n	8002b02 <UART_Receive_IT+0x74>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <UART_Receive_IT+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e008      	b.n	8002b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15a      	bne.n	8002bf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0220 	bic.w	r2, r2, #32
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d135      	bne.n	8002bec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	613b      	str	r3, [r7, #16]
   return(result);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f023 0310 	bic.w	r3, r3, #16
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	623a      	str	r2, [r7, #32]
 8002ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	69f9      	ldr	r1, [r7, #28]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d10a      	bne.n	8002bde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fd ffa1 	bl	8000b2c <HAL_UARTEx_RxEventCallback>
 8002bea:	e002      	b.n	8002bf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff fdaf 	bl	8002750 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e002      	b.n	8002bfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0c0      	sub	sp, #256	; 0x100
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c5c:	f021 010c 	bic.w	r1, r1, #12
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	ea40 0301 	orr.w	r3, r0, r1
 8002c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <UART_SetConfig+0x2cc>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0xa0>
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	; (8002ed4 <UART_SetConfig+0x2d0>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7ff f964 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cac:	e003      	b.n	8002cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff f94b 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	f040 810c 	bne.w	8002edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	1891      	adds	r1, r2, r2
 8002cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cde:	415b      	adcs	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	eb12 0801 	adds.w	r8, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0901 	adc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d14:	462b      	mov	r3, r5
 8002d16:	eb49 0303 	adc.w	r3, r9, r3
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d32:	460b      	mov	r3, r1
 8002d34:	18db      	adds	r3, r3, r3
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d48:	f7fd fa9a 	bl	8000280 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011c      	lsls	r4, r3, #4
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d74:	415b      	adcs	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb43 0b01 	adc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	eb1a 0303 	adds.w	r3, sl, r3
 8002da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb4b 0303 	adc.w	r3, fp, r3
 8002db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dde:	f7fd fa4f 	bl	8000280 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2301 	umull	r2, r3, r3, r1
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2264      	movs	r2, #100	; 0x64
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 2302 	umull	r2, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	6339      	str	r1, [r7, #48]	; 0x30
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e9a:	f7fd f9f1 	bl	8000280 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	; 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	; 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ecc:	e106      	b.n	80030dc <UART_SetConfig+0x4d8>
 8002ece:	bf00      	nop
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	6239      	str	r1, [r7, #32]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0501 	adc.w	r5, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f24:	464b      	mov	r3, r9
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4621      	mov	r1, r4
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f5c:	f7fd f990 	bl	8000280 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <UART_SetConfig+0x4e4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	61b9      	str	r1, [r7, #24]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6139      	str	r1, [r7, #16]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ffa:	f7fd f941 	bl	8000280 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4611      	mov	r1, r2
 8003004:	4b38      	ldr	r3, [pc, #224]	; (80030e8 <UART_SetConfig+0x4e4>)
 8003006:	fba3 2301 	umull	r2, r3, r3, r1
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2264      	movs	r2, #100	; 0x64
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	1acb      	subs	r3, r1, r3
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	3332      	adds	r3, #50	; 0x32
 8003018:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <UART_SetConfig+0x4e4>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003024:	441c      	add	r4, r3
 8003026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302a:	2200      	movs	r2, #0
 800302c:	673b      	str	r3, [r7, #112]	; 0x70
 800302e:	677a      	str	r2, [r7, #116]	; 0x74
 8003030:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	415b      	adcs	r3, r3
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003044:	4641      	mov	r1, r8
 8003046:	1851      	adds	r1, r2, r1
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	4649      	mov	r1, r9
 800304c:	414b      	adcs	r3, r1
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800305c:	4659      	mov	r1, fp
 800305e:	00cb      	lsls	r3, r1, #3
 8003060:	4651      	mov	r1, sl
 8003062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003066:	4651      	mov	r1, sl
 8003068:	00ca      	lsls	r2, r1, #3
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	4603      	mov	r3, r0
 8003070:	4642      	mov	r2, r8
 8003072:	189b      	adds	r3, r3, r2
 8003074:	66bb      	str	r3, [r7, #104]	; 0x68
 8003076:	464b      	mov	r3, r9
 8003078:	460a      	mov	r2, r1
 800307a:	eb42 0303 	adc.w	r3, r2, r3
 800307e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	663b      	str	r3, [r7, #96]	; 0x60
 800308a:	667a      	str	r2, [r7, #100]	; 0x64
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003098:	4649      	mov	r1, r9
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	4641      	mov	r1, r8
 800309e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a2:	4641      	mov	r1, r8
 80030a4:	008a      	lsls	r2, r1, #2
 80030a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030aa:	f7fd f8e9 	bl	8000280 <__aeabi_uldivmod>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030b4:	fba3 1302 	umull	r1, r3, r3, r2
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	2164      	movs	r1, #100	; 0x64
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	3332      	adds	r3, #50	; 0x32
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
}
 80030dc:	bf00      	nop
 80030de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030e2:	46bd      	mov	sp, r7
 80030e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <atoi>:
 80030ec:	220a      	movs	r2, #10
 80030ee:	2100      	movs	r1, #0
 80030f0:	f000 b93e 	b.w	8003370 <strtol>

080030f4 <malloc>:
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <malloc+0xc>)
 80030f6:	4601      	mov	r1, r0
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	f000 b82b 	b.w	8003154 <_malloc_r>
 80030fe:	bf00      	nop
 8003100:	20000064 	.word	0x20000064

08003104 <free>:
 8003104:	4b02      	ldr	r3, [pc, #8]	; (8003110 <free+0xc>)
 8003106:	4601      	mov	r1, r0
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f000 bb8b 	b.w	8003824 <_free_r>
 800310e:	bf00      	nop
 8003110:	20000064 	.word	0x20000064

08003114 <sbrk_aligned>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4e0e      	ldr	r6, [pc, #56]	; (8003150 <sbrk_aligned+0x3c>)
 8003118:	460c      	mov	r4, r1
 800311a:	6831      	ldr	r1, [r6, #0]
 800311c:	4605      	mov	r5, r0
 800311e:	b911      	cbnz	r1, 8003126 <sbrk_aligned+0x12>
 8003120:	f000 fb04 	bl	800372c <_sbrk_r>
 8003124:	6030      	str	r0, [r6, #0]
 8003126:	4621      	mov	r1, r4
 8003128:	4628      	mov	r0, r5
 800312a:	f000 faff 	bl	800372c <_sbrk_r>
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	d00a      	beq.n	8003148 <sbrk_aligned+0x34>
 8003132:	1cc4      	adds	r4, r0, #3
 8003134:	f024 0403 	bic.w	r4, r4, #3
 8003138:	42a0      	cmp	r0, r4
 800313a:	d007      	beq.n	800314c <sbrk_aligned+0x38>
 800313c:	1a21      	subs	r1, r4, r0
 800313e:	4628      	mov	r0, r5
 8003140:	f000 faf4 	bl	800372c <_sbrk_r>
 8003144:	3001      	adds	r0, #1
 8003146:	d101      	bne.n	800314c <sbrk_aligned+0x38>
 8003148:	f04f 34ff 	mov.w	r4, #4294967295
 800314c:	4620      	mov	r0, r4
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	20000114 	.word	0x20000114

08003154 <_malloc_r>:
 8003154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003158:	1ccd      	adds	r5, r1, #3
 800315a:	f025 0503 	bic.w	r5, r5, #3
 800315e:	3508      	adds	r5, #8
 8003160:	2d0c      	cmp	r5, #12
 8003162:	bf38      	it	cc
 8003164:	250c      	movcc	r5, #12
 8003166:	2d00      	cmp	r5, #0
 8003168:	4607      	mov	r7, r0
 800316a:	db01      	blt.n	8003170 <_malloc_r+0x1c>
 800316c:	42a9      	cmp	r1, r5
 800316e:	d905      	bls.n	800317c <_malloc_r+0x28>
 8003170:	230c      	movs	r3, #12
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	2600      	movs	r6, #0
 8003176:	4630      	mov	r0, r6
 8003178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800317c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003250 <_malloc_r+0xfc>
 8003180:	f000 f868 	bl	8003254 <__malloc_lock>
 8003184:	f8d8 3000 	ldr.w	r3, [r8]
 8003188:	461c      	mov	r4, r3
 800318a:	bb5c      	cbnz	r4, 80031e4 <_malloc_r+0x90>
 800318c:	4629      	mov	r1, r5
 800318e:	4638      	mov	r0, r7
 8003190:	f7ff ffc0 	bl	8003114 <sbrk_aligned>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	4604      	mov	r4, r0
 8003198:	d155      	bne.n	8003246 <_malloc_r+0xf2>
 800319a:	f8d8 4000 	ldr.w	r4, [r8]
 800319e:	4626      	mov	r6, r4
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	d145      	bne.n	8003230 <_malloc_r+0xdc>
 80031a4:	2c00      	cmp	r4, #0
 80031a6:	d048      	beq.n	800323a <_malloc_r+0xe6>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	4631      	mov	r1, r6
 80031ac:	4638      	mov	r0, r7
 80031ae:	eb04 0903 	add.w	r9, r4, r3
 80031b2:	f000 fabb 	bl	800372c <_sbrk_r>
 80031b6:	4581      	cmp	r9, r0
 80031b8:	d13f      	bne.n	800323a <_malloc_r+0xe6>
 80031ba:	6821      	ldr	r1, [r4, #0]
 80031bc:	1a6d      	subs	r5, r5, r1
 80031be:	4629      	mov	r1, r5
 80031c0:	4638      	mov	r0, r7
 80031c2:	f7ff ffa7 	bl	8003114 <sbrk_aligned>
 80031c6:	3001      	adds	r0, #1
 80031c8:	d037      	beq.n	800323a <_malloc_r+0xe6>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	442b      	add	r3, r5
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	f8d8 3000 	ldr.w	r3, [r8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d038      	beq.n	800324a <_malloc_r+0xf6>
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	42a2      	cmp	r2, r4
 80031dc:	d12b      	bne.n	8003236 <_malloc_r+0xe2>
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	e00f      	b.n	8003204 <_malloc_r+0xb0>
 80031e4:	6822      	ldr	r2, [r4, #0]
 80031e6:	1b52      	subs	r2, r2, r5
 80031e8:	d41f      	bmi.n	800322a <_malloc_r+0xd6>
 80031ea:	2a0b      	cmp	r2, #11
 80031ec:	d917      	bls.n	800321e <_malloc_r+0xca>
 80031ee:	1961      	adds	r1, r4, r5
 80031f0:	42a3      	cmp	r3, r4
 80031f2:	6025      	str	r5, [r4, #0]
 80031f4:	bf18      	it	ne
 80031f6:	6059      	strne	r1, [r3, #4]
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	bf08      	it	eq
 80031fc:	f8c8 1000 	streq.w	r1, [r8]
 8003200:	5162      	str	r2, [r4, r5]
 8003202:	604b      	str	r3, [r1, #4]
 8003204:	4638      	mov	r0, r7
 8003206:	f104 060b 	add.w	r6, r4, #11
 800320a:	f000 f829 	bl	8003260 <__malloc_unlock>
 800320e:	f026 0607 	bic.w	r6, r6, #7
 8003212:	1d23      	adds	r3, r4, #4
 8003214:	1af2      	subs	r2, r6, r3
 8003216:	d0ae      	beq.n	8003176 <_malloc_r+0x22>
 8003218:	1b9b      	subs	r3, r3, r6
 800321a:	50a3      	str	r3, [r4, r2]
 800321c:	e7ab      	b.n	8003176 <_malloc_r+0x22>
 800321e:	42a3      	cmp	r3, r4
 8003220:	6862      	ldr	r2, [r4, #4]
 8003222:	d1dd      	bne.n	80031e0 <_malloc_r+0x8c>
 8003224:	f8c8 2000 	str.w	r2, [r8]
 8003228:	e7ec      	b.n	8003204 <_malloc_r+0xb0>
 800322a:	4623      	mov	r3, r4
 800322c:	6864      	ldr	r4, [r4, #4]
 800322e:	e7ac      	b.n	800318a <_malloc_r+0x36>
 8003230:	4634      	mov	r4, r6
 8003232:	6876      	ldr	r6, [r6, #4]
 8003234:	e7b4      	b.n	80031a0 <_malloc_r+0x4c>
 8003236:	4613      	mov	r3, r2
 8003238:	e7cc      	b.n	80031d4 <_malloc_r+0x80>
 800323a:	230c      	movs	r3, #12
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4638      	mov	r0, r7
 8003240:	f000 f80e 	bl	8003260 <__malloc_unlock>
 8003244:	e797      	b.n	8003176 <_malloc_r+0x22>
 8003246:	6025      	str	r5, [r4, #0]
 8003248:	e7dc      	b.n	8003204 <_malloc_r+0xb0>
 800324a:	605b      	str	r3, [r3, #4]
 800324c:	deff      	udf	#255	; 0xff
 800324e:	bf00      	nop
 8003250:	20000110 	.word	0x20000110

08003254 <__malloc_lock>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__malloc_lock+0x8>)
 8003256:	f000 bab6 	b.w	80037c6 <__retarget_lock_acquire_recursive>
 800325a:	bf00      	nop
 800325c:	20000258 	.word	0x20000258

08003260 <__malloc_unlock>:
 8003260:	4801      	ldr	r0, [pc, #4]	; (8003268 <__malloc_unlock+0x8>)
 8003262:	f000 bab1 	b.w	80037c8 <__retarget_lock_release_recursive>
 8003266:	bf00      	nop
 8003268:	20000258 	.word	0x20000258

0800326c <_strtol_l.constprop.0>:
 800326c:	2b01      	cmp	r3, #1
 800326e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003272:	d001      	beq.n	8003278 <_strtol_l.constprop.0+0xc>
 8003274:	2b24      	cmp	r3, #36	; 0x24
 8003276:	d906      	bls.n	8003286 <_strtol_l.constprop.0+0x1a>
 8003278:	f000 fa7a 	bl	8003770 <__errno>
 800327c:	2316      	movs	r3, #22
 800327e:	6003      	str	r3, [r0, #0]
 8003280:	2000      	movs	r0, #0
 8003282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003286:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800336c <_strtol_l.constprop.0+0x100>
 800328a:	460d      	mov	r5, r1
 800328c:	462e      	mov	r6, r5
 800328e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003292:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003296:	f017 0708 	ands.w	r7, r7, #8
 800329a:	d1f7      	bne.n	800328c <_strtol_l.constprop.0+0x20>
 800329c:	2c2d      	cmp	r4, #45	; 0x2d
 800329e:	d132      	bne.n	8003306 <_strtol_l.constprop.0+0x9a>
 80032a0:	782c      	ldrb	r4, [r5, #0]
 80032a2:	2701      	movs	r7, #1
 80032a4:	1cb5      	adds	r5, r6, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d05b      	beq.n	8003362 <_strtol_l.constprop.0+0xf6>
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d109      	bne.n	80032c2 <_strtol_l.constprop.0+0x56>
 80032ae:	2c30      	cmp	r4, #48	; 0x30
 80032b0:	d107      	bne.n	80032c2 <_strtol_l.constprop.0+0x56>
 80032b2:	782c      	ldrb	r4, [r5, #0]
 80032b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80032b8:	2c58      	cmp	r4, #88	; 0x58
 80032ba:	d14d      	bne.n	8003358 <_strtol_l.constprop.0+0xec>
 80032bc:	786c      	ldrb	r4, [r5, #1]
 80032be:	2310      	movs	r3, #16
 80032c0:	3502      	adds	r5, #2
 80032c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80032c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80032ca:	f04f 0e00 	mov.w	lr, #0
 80032ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80032d2:	4676      	mov	r6, lr
 80032d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80032d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80032dc:	f1bc 0f09 	cmp.w	ip, #9
 80032e0:	d816      	bhi.n	8003310 <_strtol_l.constprop.0+0xa4>
 80032e2:	4664      	mov	r4, ip
 80032e4:	42a3      	cmp	r3, r4
 80032e6:	dd24      	ble.n	8003332 <_strtol_l.constprop.0+0xc6>
 80032e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80032ec:	d008      	beq.n	8003300 <_strtol_l.constprop.0+0x94>
 80032ee:	45b1      	cmp	r9, r6
 80032f0:	d31c      	bcc.n	800332c <_strtol_l.constprop.0+0xc0>
 80032f2:	d101      	bne.n	80032f8 <_strtol_l.constprop.0+0x8c>
 80032f4:	45a2      	cmp	sl, r4
 80032f6:	db19      	blt.n	800332c <_strtol_l.constprop.0+0xc0>
 80032f8:	fb06 4603 	mla	r6, r6, r3, r4
 80032fc:	f04f 0e01 	mov.w	lr, #1
 8003300:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003304:	e7e8      	b.n	80032d8 <_strtol_l.constprop.0+0x6c>
 8003306:	2c2b      	cmp	r4, #43	; 0x2b
 8003308:	bf04      	itt	eq
 800330a:	782c      	ldrbeq	r4, [r5, #0]
 800330c:	1cb5      	addeq	r5, r6, #2
 800330e:	e7ca      	b.n	80032a6 <_strtol_l.constprop.0+0x3a>
 8003310:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003314:	f1bc 0f19 	cmp.w	ip, #25
 8003318:	d801      	bhi.n	800331e <_strtol_l.constprop.0+0xb2>
 800331a:	3c37      	subs	r4, #55	; 0x37
 800331c:	e7e2      	b.n	80032e4 <_strtol_l.constprop.0+0x78>
 800331e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003322:	f1bc 0f19 	cmp.w	ip, #25
 8003326:	d804      	bhi.n	8003332 <_strtol_l.constprop.0+0xc6>
 8003328:	3c57      	subs	r4, #87	; 0x57
 800332a:	e7db      	b.n	80032e4 <_strtol_l.constprop.0+0x78>
 800332c:	f04f 3eff 	mov.w	lr, #4294967295
 8003330:	e7e6      	b.n	8003300 <_strtol_l.constprop.0+0x94>
 8003332:	f1be 3fff 	cmp.w	lr, #4294967295
 8003336:	d105      	bne.n	8003344 <_strtol_l.constprop.0+0xd8>
 8003338:	2322      	movs	r3, #34	; 0x22
 800333a:	6003      	str	r3, [r0, #0]
 800333c:	4646      	mov	r6, r8
 800333e:	b942      	cbnz	r2, 8003352 <_strtol_l.constprop.0+0xe6>
 8003340:	4630      	mov	r0, r6
 8003342:	e79e      	b.n	8003282 <_strtol_l.constprop.0+0x16>
 8003344:	b107      	cbz	r7, 8003348 <_strtol_l.constprop.0+0xdc>
 8003346:	4276      	negs	r6, r6
 8003348:	2a00      	cmp	r2, #0
 800334a:	d0f9      	beq.n	8003340 <_strtol_l.constprop.0+0xd4>
 800334c:	f1be 0f00 	cmp.w	lr, #0
 8003350:	d000      	beq.n	8003354 <_strtol_l.constprop.0+0xe8>
 8003352:	1e69      	subs	r1, r5, #1
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	e7f3      	b.n	8003340 <_strtol_l.constprop.0+0xd4>
 8003358:	2430      	movs	r4, #48	; 0x30
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1b1      	bne.n	80032c2 <_strtol_l.constprop.0+0x56>
 800335e:	2308      	movs	r3, #8
 8003360:	e7af      	b.n	80032c2 <_strtol_l.constprop.0+0x56>
 8003362:	2c30      	cmp	r4, #48	; 0x30
 8003364:	d0a5      	beq.n	80032b2 <_strtol_l.constprop.0+0x46>
 8003366:	230a      	movs	r3, #10
 8003368:	e7ab      	b.n	80032c2 <_strtol_l.constprop.0+0x56>
 800336a:	bf00      	nop
 800336c:	08004735 	.word	0x08004735

08003370 <strtol>:
 8003370:	4613      	mov	r3, r2
 8003372:	460a      	mov	r2, r1
 8003374:	4601      	mov	r1, r0
 8003376:	4802      	ldr	r0, [pc, #8]	; (8003380 <strtol+0x10>)
 8003378:	6800      	ldr	r0, [r0, #0]
 800337a:	f7ff bf77 	b.w	800326c <_strtol_l.constprop.0>
 800337e:	bf00      	nop
 8003380:	20000064 	.word	0x20000064

08003384 <std>:
 8003384:	2300      	movs	r3, #0
 8003386:	b510      	push	{r4, lr}
 8003388:	4604      	mov	r4, r0
 800338a:	e9c0 3300 	strd	r3, r3, [r0]
 800338e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003392:	6083      	str	r3, [r0, #8]
 8003394:	8181      	strh	r1, [r0, #12]
 8003396:	6643      	str	r3, [r0, #100]	; 0x64
 8003398:	81c2      	strh	r2, [r0, #14]
 800339a:	6183      	str	r3, [r0, #24]
 800339c:	4619      	mov	r1, r3
 800339e:	2208      	movs	r2, #8
 80033a0:	305c      	adds	r0, #92	; 0x5c
 80033a2:	f000 f914 	bl	80035ce <memset>
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <std+0x58>)
 80033a8:	6263      	str	r3, [r4, #36]	; 0x24
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <std+0x5c>)
 80033ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <std+0x60>)
 80033b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <std+0x64>)
 80033b4:	6323      	str	r3, [r4, #48]	; 0x30
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <std+0x68>)
 80033b8:	6224      	str	r4, [r4, #32]
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d006      	beq.n	80033cc <std+0x48>
 80033be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033c2:	4294      	cmp	r4, r2
 80033c4:	d002      	beq.n	80033cc <std+0x48>
 80033c6:	33d0      	adds	r3, #208	; 0xd0
 80033c8:	429c      	cmp	r4, r3
 80033ca:	d105      	bne.n	80033d8 <std+0x54>
 80033cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033d4:	f000 b9f6 	b.w	80037c4 <__retarget_lock_init_recursive>
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	bf00      	nop
 80033dc:	08003549 	.word	0x08003549
 80033e0:	0800356b 	.word	0x0800356b
 80033e4:	080035a3 	.word	0x080035a3
 80033e8:	080035c7 	.word	0x080035c7
 80033ec:	20000118 	.word	0x20000118

080033f0 <stdio_exit_handler>:
 80033f0:	4a02      	ldr	r2, [pc, #8]	; (80033fc <stdio_exit_handler+0xc>)
 80033f2:	4903      	ldr	r1, [pc, #12]	; (8003400 <stdio_exit_handler+0x10>)
 80033f4:	4803      	ldr	r0, [pc, #12]	; (8003404 <stdio_exit_handler+0x14>)
 80033f6:	f000 b869 	b.w	80034cc <_fwalk_sglue>
 80033fa:	bf00      	nop
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	08003f99 	.word	0x08003f99
 8003404:	20000018 	.word	0x20000018

08003408 <cleanup_stdio>:
 8003408:	6841      	ldr	r1, [r0, #4]
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <cleanup_stdio+0x34>)
 800340c:	4299      	cmp	r1, r3
 800340e:	b510      	push	{r4, lr}
 8003410:	4604      	mov	r4, r0
 8003412:	d001      	beq.n	8003418 <cleanup_stdio+0x10>
 8003414:	f000 fdc0 	bl	8003f98 <_fflush_r>
 8003418:	68a1      	ldr	r1, [r4, #8]
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <cleanup_stdio+0x38>)
 800341c:	4299      	cmp	r1, r3
 800341e:	d002      	beq.n	8003426 <cleanup_stdio+0x1e>
 8003420:	4620      	mov	r0, r4
 8003422:	f000 fdb9 	bl	8003f98 <_fflush_r>
 8003426:	68e1      	ldr	r1, [r4, #12]
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <cleanup_stdio+0x3c>)
 800342a:	4299      	cmp	r1, r3
 800342c:	d004      	beq.n	8003438 <cleanup_stdio+0x30>
 800342e:	4620      	mov	r0, r4
 8003430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003434:	f000 bdb0 	b.w	8003f98 <_fflush_r>
 8003438:	bd10      	pop	{r4, pc}
 800343a:	bf00      	nop
 800343c:	20000118 	.word	0x20000118
 8003440:	20000180 	.word	0x20000180
 8003444:	200001e8 	.word	0x200001e8

08003448 <global_stdio_init.part.0>:
 8003448:	b510      	push	{r4, lr}
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <global_stdio_init.part.0+0x30>)
 800344c:	4c0b      	ldr	r4, [pc, #44]	; (800347c <global_stdio_init.part.0+0x34>)
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <global_stdio_init.part.0+0x38>)
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	4620      	mov	r0, r4
 8003454:	2200      	movs	r2, #0
 8003456:	2104      	movs	r1, #4
 8003458:	f7ff ff94 	bl	8003384 <std>
 800345c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003460:	2201      	movs	r2, #1
 8003462:	2109      	movs	r1, #9
 8003464:	f7ff ff8e 	bl	8003384 <std>
 8003468:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800346c:	2202      	movs	r2, #2
 800346e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003472:	2112      	movs	r1, #18
 8003474:	f7ff bf86 	b.w	8003384 <std>
 8003478:	20000250 	.word	0x20000250
 800347c:	20000118 	.word	0x20000118
 8003480:	080033f1 	.word	0x080033f1

08003484 <__sfp_lock_acquire>:
 8003484:	4801      	ldr	r0, [pc, #4]	; (800348c <__sfp_lock_acquire+0x8>)
 8003486:	f000 b99e 	b.w	80037c6 <__retarget_lock_acquire_recursive>
 800348a:	bf00      	nop
 800348c:	20000259 	.word	0x20000259

08003490 <__sfp_lock_release>:
 8003490:	4801      	ldr	r0, [pc, #4]	; (8003498 <__sfp_lock_release+0x8>)
 8003492:	f000 b999 	b.w	80037c8 <__retarget_lock_release_recursive>
 8003496:	bf00      	nop
 8003498:	20000259 	.word	0x20000259

0800349c <__sinit>:
 800349c:	b510      	push	{r4, lr}
 800349e:	4604      	mov	r4, r0
 80034a0:	f7ff fff0 	bl	8003484 <__sfp_lock_acquire>
 80034a4:	6a23      	ldr	r3, [r4, #32]
 80034a6:	b11b      	cbz	r3, 80034b0 <__sinit+0x14>
 80034a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ac:	f7ff bff0 	b.w	8003490 <__sfp_lock_release>
 80034b0:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <__sinit+0x28>)
 80034b2:	6223      	str	r3, [r4, #32]
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <__sinit+0x2c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f5      	bne.n	80034a8 <__sinit+0xc>
 80034bc:	f7ff ffc4 	bl	8003448 <global_stdio_init.part.0>
 80034c0:	e7f2      	b.n	80034a8 <__sinit+0xc>
 80034c2:	bf00      	nop
 80034c4:	08003409 	.word	0x08003409
 80034c8:	20000250 	.word	0x20000250

080034cc <_fwalk_sglue>:
 80034cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d0:	4607      	mov	r7, r0
 80034d2:	4688      	mov	r8, r1
 80034d4:	4614      	mov	r4, r2
 80034d6:	2600      	movs	r6, #0
 80034d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034dc:	f1b9 0901 	subs.w	r9, r9, #1
 80034e0:	d505      	bpl.n	80034ee <_fwalk_sglue+0x22>
 80034e2:	6824      	ldr	r4, [r4, #0]
 80034e4:	2c00      	cmp	r4, #0
 80034e6:	d1f7      	bne.n	80034d8 <_fwalk_sglue+0xc>
 80034e8:	4630      	mov	r0, r6
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034ee:	89ab      	ldrh	r3, [r5, #12]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d907      	bls.n	8003504 <_fwalk_sglue+0x38>
 80034f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034f8:	3301      	adds	r3, #1
 80034fa:	d003      	beq.n	8003504 <_fwalk_sglue+0x38>
 80034fc:	4629      	mov	r1, r5
 80034fe:	4638      	mov	r0, r7
 8003500:	47c0      	blx	r8
 8003502:	4306      	orrs	r6, r0
 8003504:	3568      	adds	r5, #104	; 0x68
 8003506:	e7e9      	b.n	80034dc <_fwalk_sglue+0x10>

08003508 <siprintf>:
 8003508:	b40e      	push	{r1, r2, r3}
 800350a:	b500      	push	{lr}
 800350c:	b09c      	sub	sp, #112	; 0x70
 800350e:	ab1d      	add	r3, sp, #116	; 0x74
 8003510:	9002      	str	r0, [sp, #8]
 8003512:	9006      	str	r0, [sp, #24]
 8003514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <siprintf+0x38>)
 800351a:	9107      	str	r1, [sp, #28]
 800351c:	9104      	str	r1, [sp, #16]
 800351e:	4909      	ldr	r1, [pc, #36]	; (8003544 <siprintf+0x3c>)
 8003520:	f853 2b04 	ldr.w	r2, [r3], #4
 8003524:	9105      	str	r1, [sp, #20]
 8003526:	6800      	ldr	r0, [r0, #0]
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	a902      	add	r1, sp, #8
 800352c:	f000 fa20 	bl	8003970 <_svfiprintf_r>
 8003530:	9b02      	ldr	r3, [sp, #8]
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	b01c      	add	sp, #112	; 0x70
 8003538:	f85d eb04 	ldr.w	lr, [sp], #4
 800353c:	b003      	add	sp, #12
 800353e:	4770      	bx	lr
 8003540:	20000064 	.word	0x20000064
 8003544:	ffff0208 	.word	0xffff0208

08003548 <__sread>:
 8003548:	b510      	push	{r4, lr}
 800354a:	460c      	mov	r4, r1
 800354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003550:	f000 f8da 	bl	8003708 <_read_r>
 8003554:	2800      	cmp	r0, #0
 8003556:	bfab      	itete	ge
 8003558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800355a:	89a3      	ldrhlt	r3, [r4, #12]
 800355c:	181b      	addge	r3, r3, r0
 800355e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003562:	bfac      	ite	ge
 8003564:	6563      	strge	r3, [r4, #84]	; 0x54
 8003566:	81a3      	strhlt	r3, [r4, #12]
 8003568:	bd10      	pop	{r4, pc}

0800356a <__swrite>:
 800356a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800356e:	461f      	mov	r7, r3
 8003570:	898b      	ldrh	r3, [r1, #12]
 8003572:	05db      	lsls	r3, r3, #23
 8003574:	4605      	mov	r5, r0
 8003576:	460c      	mov	r4, r1
 8003578:	4616      	mov	r6, r2
 800357a:	d505      	bpl.n	8003588 <__swrite+0x1e>
 800357c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003580:	2302      	movs	r3, #2
 8003582:	2200      	movs	r2, #0
 8003584:	f000 f8ae 	bl	80036e4 <_lseek_r>
 8003588:	89a3      	ldrh	r3, [r4, #12]
 800358a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800358e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	4632      	mov	r2, r6
 8003596:	463b      	mov	r3, r7
 8003598:	4628      	mov	r0, r5
 800359a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800359e:	f000 b8d5 	b.w	800374c <_write_r>

080035a2 <__sseek>:
 80035a2:	b510      	push	{r4, lr}
 80035a4:	460c      	mov	r4, r1
 80035a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035aa:	f000 f89b 	bl	80036e4 <_lseek_r>
 80035ae:	1c43      	adds	r3, r0, #1
 80035b0:	89a3      	ldrh	r3, [r4, #12]
 80035b2:	bf15      	itete	ne
 80035b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80035b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80035ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035be:	81a3      	strheq	r3, [r4, #12]
 80035c0:	bf18      	it	ne
 80035c2:	81a3      	strhne	r3, [r4, #12]
 80035c4:	bd10      	pop	{r4, pc}

080035c6 <__sclose>:
 80035c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ca:	f000 b87b 	b.w	80036c4 <_close_r>

080035ce <memset>:
 80035ce:	4402      	add	r2, r0
 80035d0:	4603      	mov	r3, r0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d100      	bne.n	80035d8 <memset+0xa>
 80035d6:	4770      	bx	lr
 80035d8:	f803 1b01 	strb.w	r1, [r3], #1
 80035dc:	e7f9      	b.n	80035d2 <memset+0x4>
	...

080035e0 <strtok>:
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <strtok+0x5c>)
 80035e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80035e4:	681e      	ldr	r6, [r3, #0]
 80035e6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80035e8:	4605      	mov	r5, r0
 80035ea:	b9fc      	cbnz	r4, 800362c <strtok+0x4c>
 80035ec:	2050      	movs	r0, #80	; 0x50
 80035ee:	9101      	str	r1, [sp, #4]
 80035f0:	f7ff fd80 	bl	80030f4 <malloc>
 80035f4:	9901      	ldr	r1, [sp, #4]
 80035f6:	6470      	str	r0, [r6, #68]	; 0x44
 80035f8:	4602      	mov	r2, r0
 80035fa:	b920      	cbnz	r0, 8003606 <strtok+0x26>
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <strtok+0x60>)
 80035fe:	4811      	ldr	r0, [pc, #68]	; (8003644 <strtok+0x64>)
 8003600:	215b      	movs	r1, #91	; 0x5b
 8003602:	f000 f8f1 	bl	80037e8 <__assert_func>
 8003606:	e9c0 4400 	strd	r4, r4, [r0]
 800360a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800360e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003612:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003616:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800361a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800361e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003622:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003626:	6184      	str	r4, [r0, #24]
 8003628:	7704      	strb	r4, [r0, #28]
 800362a:	6244      	str	r4, [r0, #36]	; 0x24
 800362c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800362e:	2301      	movs	r3, #1
 8003630:	4628      	mov	r0, r5
 8003632:	b002      	add	sp, #8
 8003634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003638:	f000 b806 	b.w	8003648 <__strtok_r>
 800363c:	20000064 	.word	0x20000064
 8003640:	08004835 	.word	0x08004835
 8003644:	0800484c 	.word	0x0800484c

08003648 <__strtok_r>:
 8003648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364a:	b908      	cbnz	r0, 8003650 <__strtok_r+0x8>
 800364c:	6810      	ldr	r0, [r2, #0]
 800364e:	b188      	cbz	r0, 8003674 <__strtok_r+0x2c>
 8003650:	4604      	mov	r4, r0
 8003652:	4620      	mov	r0, r4
 8003654:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003658:	460f      	mov	r7, r1
 800365a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800365e:	b91e      	cbnz	r6, 8003668 <__strtok_r+0x20>
 8003660:	b965      	cbnz	r5, 800367c <__strtok_r+0x34>
 8003662:	6015      	str	r5, [r2, #0]
 8003664:	4628      	mov	r0, r5
 8003666:	e005      	b.n	8003674 <__strtok_r+0x2c>
 8003668:	42b5      	cmp	r5, r6
 800366a:	d1f6      	bne.n	800365a <__strtok_r+0x12>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <__strtok_r+0xa>
 8003670:	6014      	str	r4, [r2, #0]
 8003672:	7003      	strb	r3, [r0, #0]
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003676:	461c      	mov	r4, r3
 8003678:	e00c      	b.n	8003694 <__strtok_r+0x4c>
 800367a:	b915      	cbnz	r5, 8003682 <__strtok_r+0x3a>
 800367c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003680:	460e      	mov	r6, r1
 8003682:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003686:	42ab      	cmp	r3, r5
 8003688:	d1f7      	bne.n	800367a <__strtok_r+0x32>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f3      	beq.n	8003676 <__strtok_r+0x2e>
 800368e:	2300      	movs	r3, #0
 8003690:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003694:	6014      	str	r4, [r2, #0]
 8003696:	e7ed      	b.n	8003674 <__strtok_r+0x2c>

08003698 <strstr>:
 8003698:	780a      	ldrb	r2, [r1, #0]
 800369a:	b570      	push	{r4, r5, r6, lr}
 800369c:	b96a      	cbnz	r2, 80036ba <strstr+0x22>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d109      	bne.n	80036b8 <strstr+0x20>
 80036a4:	460c      	mov	r4, r1
 80036a6:	4605      	mov	r5, r0
 80036a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f6      	beq.n	800369e <strstr+0x6>
 80036b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80036b4:	429e      	cmp	r6, r3
 80036b6:	d0f7      	beq.n	80036a8 <strstr+0x10>
 80036b8:	3001      	adds	r0, #1
 80036ba:	7803      	ldrb	r3, [r0, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ef      	bne.n	80036a0 <strstr+0x8>
 80036c0:	4618      	mov	r0, r3
 80036c2:	e7ec      	b.n	800369e <strstr+0x6>

080036c4 <_close_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	4d06      	ldr	r5, [pc, #24]	; (80036e0 <_close_r+0x1c>)
 80036c8:	2300      	movs	r3, #0
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	f7fd fb5b 	bl	8000d8a <_close>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_close_r+0x1a>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_close_r+0x1a>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	20000254 	.word	0x20000254

080036e4 <_lseek_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4d07      	ldr	r5, [pc, #28]	; (8003704 <_lseek_r+0x20>)
 80036e8:	4604      	mov	r4, r0
 80036ea:	4608      	mov	r0, r1
 80036ec:	4611      	mov	r1, r2
 80036ee:	2200      	movs	r2, #0
 80036f0:	602a      	str	r2, [r5, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7fd fb70 	bl	8000dd8 <_lseek>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_lseek_r+0x1e>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_lseek_r+0x1e>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	20000254 	.word	0x20000254

08003708 <_read_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4d07      	ldr	r5, [pc, #28]	; (8003728 <_read_r+0x20>)
 800370c:	4604      	mov	r4, r0
 800370e:	4608      	mov	r0, r1
 8003710:	4611      	mov	r1, r2
 8003712:	2200      	movs	r2, #0
 8003714:	602a      	str	r2, [r5, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f7fd fafe 	bl	8000d18 <_read>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_read_r+0x1e>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_read_r+0x1e>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000254 	.word	0x20000254

0800372c <_sbrk_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4d06      	ldr	r5, [pc, #24]	; (8003748 <_sbrk_r+0x1c>)
 8003730:	2300      	movs	r3, #0
 8003732:	4604      	mov	r4, r0
 8003734:	4608      	mov	r0, r1
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	f7fd fb5c 	bl	8000df4 <_sbrk>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d102      	bne.n	8003746 <_sbrk_r+0x1a>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	b103      	cbz	r3, 8003746 <_sbrk_r+0x1a>
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	20000254 	.word	0x20000254

0800374c <_write_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	4d07      	ldr	r5, [pc, #28]	; (800376c <_write_r+0x20>)
 8003750:	4604      	mov	r4, r0
 8003752:	4608      	mov	r0, r1
 8003754:	4611      	mov	r1, r2
 8003756:	2200      	movs	r2, #0
 8003758:	602a      	str	r2, [r5, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	f7fd faf9 	bl	8000d52 <_write>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_write_r+0x1e>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_write_r+0x1e>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000254 	.word	0x20000254

08003770 <__errno>:
 8003770:	4b01      	ldr	r3, [pc, #4]	; (8003778 <__errno+0x8>)
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000064 	.word	0x20000064

0800377c <__libc_init_array>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d0d      	ldr	r5, [pc, #52]	; (80037b4 <__libc_init_array+0x38>)
 8003780:	4c0d      	ldr	r4, [pc, #52]	; (80037b8 <__libc_init_array+0x3c>)
 8003782:	1b64      	subs	r4, r4, r5
 8003784:	10a4      	asrs	r4, r4, #2
 8003786:	2600      	movs	r6, #0
 8003788:	42a6      	cmp	r6, r4
 800378a:	d109      	bne.n	80037a0 <__libc_init_array+0x24>
 800378c:	4d0b      	ldr	r5, [pc, #44]	; (80037bc <__libc_init_array+0x40>)
 800378e:	4c0c      	ldr	r4, [pc, #48]	; (80037c0 <__libc_init_array+0x44>)
 8003790:	f000 ff36 	bl	8004600 <_init>
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	2600      	movs	r6, #0
 800379a:	42a6      	cmp	r6, r4
 800379c:	d105      	bne.n	80037aa <__libc_init_array+0x2e>
 800379e:	bd70      	pop	{r4, r5, r6, pc}
 80037a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a4:	4798      	blx	r3
 80037a6:	3601      	adds	r6, #1
 80037a8:	e7ee      	b.n	8003788 <__libc_init_array+0xc>
 80037aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ae:	4798      	blx	r3
 80037b0:	3601      	adds	r6, #1
 80037b2:	e7f2      	b.n	800379a <__libc_init_array+0x1e>
 80037b4:	08004920 	.word	0x08004920
 80037b8:	08004920 	.word	0x08004920
 80037bc:	08004920 	.word	0x08004920
 80037c0:	08004924 	.word	0x08004924

080037c4 <__retarget_lock_init_recursive>:
 80037c4:	4770      	bx	lr

080037c6 <__retarget_lock_acquire_recursive>:
 80037c6:	4770      	bx	lr

080037c8 <__retarget_lock_release_recursive>:
 80037c8:	4770      	bx	lr

080037ca <memcpy>:
 80037ca:	440a      	add	r2, r1
 80037cc:	4291      	cmp	r1, r2
 80037ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80037d2:	d100      	bne.n	80037d6 <memcpy+0xc>
 80037d4:	4770      	bx	lr
 80037d6:	b510      	push	{r4, lr}
 80037d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037e0:	4291      	cmp	r1, r2
 80037e2:	d1f9      	bne.n	80037d8 <memcpy+0xe>
 80037e4:	bd10      	pop	{r4, pc}
	...

080037e8 <__assert_func>:
 80037e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037ea:	4614      	mov	r4, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <__assert_func+0x2c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4605      	mov	r5, r0
 80037f4:	68d8      	ldr	r0, [r3, #12]
 80037f6:	b14c      	cbz	r4, 800380c <__assert_func+0x24>
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <__assert_func+0x30>)
 80037fa:	9100      	str	r1, [sp, #0]
 80037fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <__assert_func+0x34>)
 8003802:	462b      	mov	r3, r5
 8003804:	f000 fbf0 	bl	8003fe8 <fiprintf>
 8003808:	f000 fc1a 	bl	8004040 <abort>
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <__assert_func+0x38>)
 800380e:	461c      	mov	r4, r3
 8003810:	e7f3      	b.n	80037fa <__assert_func+0x12>
 8003812:	bf00      	nop
 8003814:	20000064 	.word	0x20000064
 8003818:	080048a6 	.word	0x080048a6
 800381c:	080048b3 	.word	0x080048b3
 8003820:	080048e1 	.word	0x080048e1

08003824 <_free_r>:
 8003824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003826:	2900      	cmp	r1, #0
 8003828:	d044      	beq.n	80038b4 <_free_r+0x90>
 800382a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800382e:	9001      	str	r0, [sp, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	f1a1 0404 	sub.w	r4, r1, #4
 8003836:	bfb8      	it	lt
 8003838:	18e4      	addlt	r4, r4, r3
 800383a:	f7ff fd0b 	bl	8003254 <__malloc_lock>
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <_free_r+0x94>)
 8003840:	9801      	ldr	r0, [sp, #4]
 8003842:	6813      	ldr	r3, [r2, #0]
 8003844:	b933      	cbnz	r3, 8003854 <_free_r+0x30>
 8003846:	6063      	str	r3, [r4, #4]
 8003848:	6014      	str	r4, [r2, #0]
 800384a:	b003      	add	sp, #12
 800384c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003850:	f7ff bd06 	b.w	8003260 <__malloc_unlock>
 8003854:	42a3      	cmp	r3, r4
 8003856:	d908      	bls.n	800386a <_free_r+0x46>
 8003858:	6825      	ldr	r5, [r4, #0]
 800385a:	1961      	adds	r1, r4, r5
 800385c:	428b      	cmp	r3, r1
 800385e:	bf01      	itttt	eq
 8003860:	6819      	ldreq	r1, [r3, #0]
 8003862:	685b      	ldreq	r3, [r3, #4]
 8003864:	1949      	addeq	r1, r1, r5
 8003866:	6021      	streq	r1, [r4, #0]
 8003868:	e7ed      	b.n	8003846 <_free_r+0x22>
 800386a:	461a      	mov	r2, r3
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	b10b      	cbz	r3, 8003874 <_free_r+0x50>
 8003870:	42a3      	cmp	r3, r4
 8003872:	d9fa      	bls.n	800386a <_free_r+0x46>
 8003874:	6811      	ldr	r1, [r2, #0]
 8003876:	1855      	adds	r5, r2, r1
 8003878:	42a5      	cmp	r5, r4
 800387a:	d10b      	bne.n	8003894 <_free_r+0x70>
 800387c:	6824      	ldr	r4, [r4, #0]
 800387e:	4421      	add	r1, r4
 8003880:	1854      	adds	r4, r2, r1
 8003882:	42a3      	cmp	r3, r4
 8003884:	6011      	str	r1, [r2, #0]
 8003886:	d1e0      	bne.n	800384a <_free_r+0x26>
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6053      	str	r3, [r2, #4]
 800388e:	440c      	add	r4, r1
 8003890:	6014      	str	r4, [r2, #0]
 8003892:	e7da      	b.n	800384a <_free_r+0x26>
 8003894:	d902      	bls.n	800389c <_free_r+0x78>
 8003896:	230c      	movs	r3, #12
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	e7d6      	b.n	800384a <_free_r+0x26>
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1961      	adds	r1, r4, r5
 80038a0:	428b      	cmp	r3, r1
 80038a2:	bf04      	itt	eq
 80038a4:	6819      	ldreq	r1, [r3, #0]
 80038a6:	685b      	ldreq	r3, [r3, #4]
 80038a8:	6063      	str	r3, [r4, #4]
 80038aa:	bf04      	itt	eq
 80038ac:	1949      	addeq	r1, r1, r5
 80038ae:	6021      	streq	r1, [r4, #0]
 80038b0:	6054      	str	r4, [r2, #4]
 80038b2:	e7ca      	b.n	800384a <_free_r+0x26>
 80038b4:	b003      	add	sp, #12
 80038b6:	bd30      	pop	{r4, r5, pc}
 80038b8:	20000110 	.word	0x20000110

080038bc <__ssputs_r>:
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	688e      	ldr	r6, [r1, #8]
 80038c2:	461f      	mov	r7, r3
 80038c4:	42be      	cmp	r6, r7
 80038c6:	680b      	ldr	r3, [r1, #0]
 80038c8:	4682      	mov	sl, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4690      	mov	r8, r2
 80038ce:	d82c      	bhi.n	800392a <__ssputs_r+0x6e>
 80038d0:	898a      	ldrh	r2, [r1, #12]
 80038d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038d6:	d026      	beq.n	8003926 <__ssputs_r+0x6a>
 80038d8:	6965      	ldr	r5, [r4, #20]
 80038da:	6909      	ldr	r1, [r1, #16]
 80038dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038e0:	eba3 0901 	sub.w	r9, r3, r1
 80038e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038e8:	1c7b      	adds	r3, r7, #1
 80038ea:	444b      	add	r3, r9
 80038ec:	106d      	asrs	r5, r5, #1
 80038ee:	429d      	cmp	r5, r3
 80038f0:	bf38      	it	cc
 80038f2:	461d      	movcc	r5, r3
 80038f4:	0553      	lsls	r3, r2, #21
 80038f6:	d527      	bpl.n	8003948 <__ssputs_r+0x8c>
 80038f8:	4629      	mov	r1, r5
 80038fa:	f7ff fc2b 	bl	8003154 <_malloc_r>
 80038fe:	4606      	mov	r6, r0
 8003900:	b360      	cbz	r0, 800395c <__ssputs_r+0xa0>
 8003902:	6921      	ldr	r1, [r4, #16]
 8003904:	464a      	mov	r2, r9
 8003906:	f7ff ff60 	bl	80037ca <memcpy>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	6126      	str	r6, [r4, #16]
 8003918:	6165      	str	r5, [r4, #20]
 800391a:	444e      	add	r6, r9
 800391c:	eba5 0509 	sub.w	r5, r5, r9
 8003920:	6026      	str	r6, [r4, #0]
 8003922:	60a5      	str	r5, [r4, #8]
 8003924:	463e      	mov	r6, r7
 8003926:	42be      	cmp	r6, r7
 8003928:	d900      	bls.n	800392c <__ssputs_r+0x70>
 800392a:	463e      	mov	r6, r7
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	4632      	mov	r2, r6
 8003930:	4641      	mov	r1, r8
 8003932:	f000 fb6b 	bl	800400c <memmove>
 8003936:	68a3      	ldr	r3, [r4, #8]
 8003938:	1b9b      	subs	r3, r3, r6
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	4433      	add	r3, r6
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	2000      	movs	r0, #0
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	462a      	mov	r2, r5
 800394a:	f000 fb80 	bl	800404e <_realloc_r>
 800394e:	4606      	mov	r6, r0
 8003950:	2800      	cmp	r0, #0
 8003952:	d1e0      	bne.n	8003916 <__ssputs_r+0x5a>
 8003954:	6921      	ldr	r1, [r4, #16]
 8003956:	4650      	mov	r0, sl
 8003958:	f7ff ff64 	bl	8003824 <_free_r>
 800395c:	230c      	movs	r3, #12
 800395e:	f8ca 3000 	str.w	r3, [sl]
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	f04f 30ff 	mov.w	r0, #4294967295
 800396e:	e7e9      	b.n	8003944 <__ssputs_r+0x88>

08003970 <_svfiprintf_r>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4698      	mov	r8, r3
 8003976:	898b      	ldrh	r3, [r1, #12]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	b09d      	sub	sp, #116	; 0x74
 800397c:	4607      	mov	r7, r0
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
 8003982:	d50e      	bpl.n	80039a2 <_svfiprintf_r+0x32>
 8003984:	690b      	ldr	r3, [r1, #16]
 8003986:	b963      	cbnz	r3, 80039a2 <_svfiprintf_r+0x32>
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	f7ff fbe3 	bl	8003154 <_malloc_r>
 800398e:	6028      	str	r0, [r5, #0]
 8003990:	6128      	str	r0, [r5, #16]
 8003992:	b920      	cbnz	r0, 800399e <_svfiprintf_r+0x2e>
 8003994:	230c      	movs	r3, #12
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	e0d0      	b.n	8003b40 <_svfiprintf_r+0x1d0>
 800399e:	2340      	movs	r3, #64	; 0x40
 80039a0:	616b      	str	r3, [r5, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	9309      	str	r3, [sp, #36]	; 0x24
 80039a6:	2320      	movs	r3, #32
 80039a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80039b0:	2330      	movs	r3, #48	; 0x30
 80039b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b58 <_svfiprintf_r+0x1e8>
 80039b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ba:	f04f 0901 	mov.w	r9, #1
 80039be:	4623      	mov	r3, r4
 80039c0:	469a      	mov	sl, r3
 80039c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c6:	b10a      	cbz	r2, 80039cc <_svfiprintf_r+0x5c>
 80039c8:	2a25      	cmp	r2, #37	; 0x25
 80039ca:	d1f9      	bne.n	80039c0 <_svfiprintf_r+0x50>
 80039cc:	ebba 0b04 	subs.w	fp, sl, r4
 80039d0:	d00b      	beq.n	80039ea <_svfiprintf_r+0x7a>
 80039d2:	465b      	mov	r3, fp
 80039d4:	4622      	mov	r2, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	4638      	mov	r0, r7
 80039da:	f7ff ff6f 	bl	80038bc <__ssputs_r>
 80039de:	3001      	adds	r0, #1
 80039e0:	f000 80a9 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039e6:	445a      	add	r2, fp
 80039e8:	9209      	str	r2, [sp, #36]	; 0x24
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a1 	beq.w	8003b36 <_svfiprintf_r+0x1c6>
 80039f4:	2300      	movs	r3, #0
 80039f6:	f04f 32ff 	mov.w	r2, #4294967295
 80039fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039fe:	f10a 0a01 	add.w	sl, sl, #1
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	9307      	str	r3, [sp, #28]
 8003a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a0c:	4654      	mov	r4, sl
 8003a0e:	2205      	movs	r2, #5
 8003a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a14:	4850      	ldr	r0, [pc, #320]	; (8003b58 <_svfiprintf_r+0x1e8>)
 8003a16:	f7fc fbe3 	bl	80001e0 <memchr>
 8003a1a:	9a04      	ldr	r2, [sp, #16]
 8003a1c:	b9d8      	cbnz	r0, 8003a56 <_svfiprintf_r+0xe6>
 8003a1e:	06d0      	lsls	r0, r2, #27
 8003a20:	bf44      	itt	mi
 8003a22:	2320      	movmi	r3, #32
 8003a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a28:	0711      	lsls	r1, r2, #28
 8003a2a:	bf44      	itt	mi
 8003a2c:	232b      	movmi	r3, #43	; 0x2b
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	f89a 3000 	ldrb.w	r3, [sl]
 8003a36:	2b2a      	cmp	r3, #42	; 0x2a
 8003a38:	d015      	beq.n	8003a66 <_svfiprintf_r+0xf6>
 8003a3a:	9a07      	ldr	r2, [sp, #28]
 8003a3c:	4654      	mov	r4, sl
 8003a3e:	2000      	movs	r0, #0
 8003a40:	f04f 0c0a 	mov.w	ip, #10
 8003a44:	4621      	mov	r1, r4
 8003a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a4a:	3b30      	subs	r3, #48	; 0x30
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d94d      	bls.n	8003aec <_svfiprintf_r+0x17c>
 8003a50:	b1b0      	cbz	r0, 8003a80 <_svfiprintf_r+0x110>
 8003a52:	9207      	str	r2, [sp, #28]
 8003a54:	e014      	b.n	8003a80 <_svfiprintf_r+0x110>
 8003a56:	eba0 0308 	sub.w	r3, r0, r8
 8003a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	9304      	str	r3, [sp, #16]
 8003a62:	46a2      	mov	sl, r4
 8003a64:	e7d2      	b.n	8003a0c <_svfiprintf_r+0x9c>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	1d19      	adds	r1, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9103      	str	r1, [sp, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfbb      	ittet	lt
 8003a72:	425b      	neglt	r3, r3
 8003a74:	f042 0202 	orrlt.w	r2, r2, #2
 8003a78:	9307      	strge	r3, [sp, #28]
 8003a7a:	9307      	strlt	r3, [sp, #28]
 8003a7c:	bfb8      	it	lt
 8003a7e:	9204      	strlt	r2, [sp, #16]
 8003a80:	7823      	ldrb	r3, [r4, #0]
 8003a82:	2b2e      	cmp	r3, #46	; 0x2e
 8003a84:	d10c      	bne.n	8003aa0 <_svfiprintf_r+0x130>
 8003a86:	7863      	ldrb	r3, [r4, #1]
 8003a88:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8a:	d134      	bne.n	8003af6 <_svfiprintf_r+0x186>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	9203      	str	r2, [sp, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bfb8      	it	lt
 8003a98:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a9c:	3402      	adds	r4, #2
 8003a9e:	9305      	str	r3, [sp, #20]
 8003aa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003b68 <_svfiprintf_r+0x1f8>
 8003aa4:	7821      	ldrb	r1, [r4, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	4650      	mov	r0, sl
 8003aaa:	f7fc fb99 	bl	80001e0 <memchr>
 8003aae:	b138      	cbz	r0, 8003ac0 <_svfiprintf_r+0x150>
 8003ab0:	9b04      	ldr	r3, [sp, #16]
 8003ab2:	eba0 000a 	sub.w	r0, r0, sl
 8003ab6:	2240      	movs	r2, #64	; 0x40
 8003ab8:	4082      	lsls	r2, r0
 8003aba:	4313      	orrs	r3, r2
 8003abc:	3401      	adds	r4, #1
 8003abe:	9304      	str	r3, [sp, #16]
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4825      	ldr	r0, [pc, #148]	; (8003b5c <_svfiprintf_r+0x1ec>)
 8003ac6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aca:	2206      	movs	r2, #6
 8003acc:	f7fc fb88 	bl	80001e0 <memchr>
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d038      	beq.n	8003b46 <_svfiprintf_r+0x1d6>
 8003ad4:	4b22      	ldr	r3, [pc, #136]	; (8003b60 <_svfiprintf_r+0x1f0>)
 8003ad6:	bb1b      	cbnz	r3, 8003b20 <_svfiprintf_r+0x1b0>
 8003ad8:	9b03      	ldr	r3, [sp, #12]
 8003ada:	3307      	adds	r3, #7
 8003adc:	f023 0307 	bic.w	r3, r3, #7
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae6:	4433      	add	r3, r6
 8003ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aea:	e768      	b.n	80039be <_svfiprintf_r+0x4e>
 8003aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8003af0:	460c      	mov	r4, r1
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7a6      	b.n	8003a44 <_svfiprintf_r+0xd4>
 8003af6:	2300      	movs	r3, #0
 8003af8:	3401      	adds	r4, #1
 8003afa:	9305      	str	r3, [sp, #20]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0c0a 	mov.w	ip, #10
 8003b02:	4620      	mov	r0, r4
 8003b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b08:	3a30      	subs	r2, #48	; 0x30
 8003b0a:	2a09      	cmp	r2, #9
 8003b0c:	d903      	bls.n	8003b16 <_svfiprintf_r+0x1a6>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0c6      	beq.n	8003aa0 <_svfiprintf_r+0x130>
 8003b12:	9105      	str	r1, [sp, #20]
 8003b14:	e7c4      	b.n	8003aa0 <_svfiprintf_r+0x130>
 8003b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7f0      	b.n	8003b02 <_svfiprintf_r+0x192>
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <_svfiprintf_r+0x1f4>)
 8003b28:	a904      	add	r1, sp, #16
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f3af 8000 	nop.w
 8003b30:	1c42      	adds	r2, r0, #1
 8003b32:	4606      	mov	r6, r0
 8003b34:	d1d6      	bne.n	8003ae4 <_svfiprintf_r+0x174>
 8003b36:	89ab      	ldrh	r3, [r5, #12]
 8003b38:	065b      	lsls	r3, r3, #25
 8003b3a:	f53f af2d 	bmi.w	8003998 <_svfiprintf_r+0x28>
 8003b3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b40:	b01d      	add	sp, #116	; 0x74
 8003b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b46:	ab03      	add	r3, sp, #12
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	462a      	mov	r2, r5
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <_svfiprintf_r+0x1f4>)
 8003b4e:	a904      	add	r1, sp, #16
 8003b50:	4638      	mov	r0, r7
 8003b52:	f000 f879 	bl	8003c48 <_printf_i>
 8003b56:	e7eb      	b.n	8003b30 <_svfiprintf_r+0x1c0>
 8003b58:	080048e2 	.word	0x080048e2
 8003b5c:	080048ec 	.word	0x080048ec
 8003b60:	00000000 	.word	0x00000000
 8003b64:	080038bd 	.word	0x080038bd
 8003b68:	080048e8 	.word	0x080048e8

08003b6c <_printf_common>:
 8003b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b70:	4616      	mov	r6, r2
 8003b72:	4699      	mov	r9, r3
 8003b74:	688a      	ldr	r2, [r1, #8]
 8003b76:	690b      	ldr	r3, [r1, #16]
 8003b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bfb8      	it	lt
 8003b80:	4613      	movlt	r3, r2
 8003b82:	6033      	str	r3, [r6, #0]
 8003b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b88:	4607      	mov	r7, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	b10a      	cbz	r2, 8003b92 <_printf_common+0x26>
 8003b8e:	3301      	adds	r3, #1
 8003b90:	6033      	str	r3, [r6, #0]
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	0699      	lsls	r1, r3, #26
 8003b96:	bf42      	ittt	mi
 8003b98:	6833      	ldrmi	r3, [r6, #0]
 8003b9a:	3302      	addmi	r3, #2
 8003b9c:	6033      	strmi	r3, [r6, #0]
 8003b9e:	6825      	ldr	r5, [r4, #0]
 8003ba0:	f015 0506 	ands.w	r5, r5, #6
 8003ba4:	d106      	bne.n	8003bb4 <_printf_common+0x48>
 8003ba6:	f104 0a19 	add.w	sl, r4, #25
 8003baa:	68e3      	ldr	r3, [r4, #12]
 8003bac:	6832      	ldr	r2, [r6, #0]
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	42ab      	cmp	r3, r5
 8003bb2:	dc26      	bgt.n	8003c02 <_printf_common+0x96>
 8003bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bb8:	1e13      	subs	r3, r2, #0
 8003bba:	6822      	ldr	r2, [r4, #0]
 8003bbc:	bf18      	it	ne
 8003bbe:	2301      	movne	r3, #1
 8003bc0:	0692      	lsls	r2, r2, #26
 8003bc2:	d42b      	bmi.n	8003c1c <_printf_common+0xb0>
 8003bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bc8:	4649      	mov	r1, r9
 8003bca:	4638      	mov	r0, r7
 8003bcc:	47c0      	blx	r8
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d01e      	beq.n	8003c10 <_printf_common+0xa4>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	6922      	ldr	r2, [r4, #16]
 8003bd6:	f003 0306 	and.w	r3, r3, #6
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	bf02      	ittt	eq
 8003bde:	68e5      	ldreq	r5, [r4, #12]
 8003be0:	6833      	ldreq	r3, [r6, #0]
 8003be2:	1aed      	subeq	r5, r5, r3
 8003be4:	68a3      	ldr	r3, [r4, #8]
 8003be6:	bf0c      	ite	eq
 8003be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bec:	2500      	movne	r5, #0
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	bfc4      	itt	gt
 8003bf2:	1a9b      	subgt	r3, r3, r2
 8003bf4:	18ed      	addgt	r5, r5, r3
 8003bf6:	2600      	movs	r6, #0
 8003bf8:	341a      	adds	r4, #26
 8003bfa:	42b5      	cmp	r5, r6
 8003bfc:	d11a      	bne.n	8003c34 <_printf_common+0xc8>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e008      	b.n	8003c14 <_printf_common+0xa8>
 8003c02:	2301      	movs	r3, #1
 8003c04:	4652      	mov	r2, sl
 8003c06:	4649      	mov	r1, r9
 8003c08:	4638      	mov	r0, r7
 8003c0a:	47c0      	blx	r8
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d103      	bne.n	8003c18 <_printf_common+0xac>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7c6      	b.n	8003baa <_printf_common+0x3e>
 8003c1c:	18e1      	adds	r1, r4, r3
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	2030      	movs	r0, #48	; 0x30
 8003c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c26:	4422      	add	r2, r4
 8003c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c30:	3302      	adds	r3, #2
 8003c32:	e7c7      	b.n	8003bc4 <_printf_common+0x58>
 8003c34:	2301      	movs	r3, #1
 8003c36:	4622      	mov	r2, r4
 8003c38:	4649      	mov	r1, r9
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	47c0      	blx	r8
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d0e6      	beq.n	8003c10 <_printf_common+0xa4>
 8003c42:	3601      	adds	r6, #1
 8003c44:	e7d9      	b.n	8003bfa <_printf_common+0x8e>
	...

08003c48 <_printf_i>:
 8003c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	7e0f      	ldrb	r7, [r1, #24]
 8003c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c50:	2f78      	cmp	r7, #120	; 0x78
 8003c52:	4691      	mov	r9, r2
 8003c54:	4680      	mov	r8, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	469a      	mov	sl, r3
 8003c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c5e:	d807      	bhi.n	8003c70 <_printf_i+0x28>
 8003c60:	2f62      	cmp	r7, #98	; 0x62
 8003c62:	d80a      	bhi.n	8003c7a <_printf_i+0x32>
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	f000 80d4 	beq.w	8003e12 <_printf_i+0x1ca>
 8003c6a:	2f58      	cmp	r7, #88	; 0x58
 8003c6c:	f000 80c0 	beq.w	8003df0 <_printf_i+0x1a8>
 8003c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c78:	e03a      	b.n	8003cf0 <_printf_i+0xa8>
 8003c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c7e:	2b15      	cmp	r3, #21
 8003c80:	d8f6      	bhi.n	8003c70 <_printf_i+0x28>
 8003c82:	a101      	add	r1, pc, #4	; (adr r1, 8003c88 <_printf_i+0x40>)
 8003c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003cf5 	.word	0x08003cf5
 8003c90:	08003c71 	.word	0x08003c71
 8003c94:	08003c71 	.word	0x08003c71
 8003c98:	08003c71 	.word	0x08003c71
 8003c9c:	08003c71 	.word	0x08003c71
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003c71 	.word	0x08003c71
 8003ca8:	08003c71 	.word	0x08003c71
 8003cac:	08003c71 	.word	0x08003c71
 8003cb0:	08003c71 	.word	0x08003c71
 8003cb4:	08003df9 	.word	0x08003df9
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003db3 	.word	0x08003db3
 8003cc0:	08003c71 	.word	0x08003c71
 8003cc4:	08003c71 	.word	0x08003c71
 8003cc8:	08003e1b 	.word	0x08003e1b
 8003ccc:	08003c71 	.word	0x08003c71
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003c71 	.word	0x08003c71
 8003cd8:	08003c71 	.word	0x08003c71
 8003cdc:	08003dbb 	.word	0x08003dbb
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	602a      	str	r2, [r5, #0]
 8003ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e09f      	b.n	8003e34 <_printf_i+0x1ec>
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	682b      	ldr	r3, [r5, #0]
 8003cf8:	0607      	lsls	r7, r0, #24
 8003cfa:	f103 0104 	add.w	r1, r3, #4
 8003cfe:	6029      	str	r1, [r5, #0]
 8003d00:	d501      	bpl.n	8003d06 <_printf_i+0xbe>
 8003d02:	681e      	ldr	r6, [r3, #0]
 8003d04:	e003      	b.n	8003d0e <_printf_i+0xc6>
 8003d06:	0646      	lsls	r6, r0, #25
 8003d08:	d5fb      	bpl.n	8003d02 <_printf_i+0xba>
 8003d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	da03      	bge.n	8003d1a <_printf_i+0xd2>
 8003d12:	232d      	movs	r3, #45	; 0x2d
 8003d14:	4276      	negs	r6, r6
 8003d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d1a:	485a      	ldr	r0, [pc, #360]	; (8003e84 <_printf_i+0x23c>)
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	e012      	b.n	8003d46 <_printf_i+0xfe>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	1d19      	adds	r1, r3, #4
 8003d26:	6029      	str	r1, [r5, #0]
 8003d28:	0605      	lsls	r5, r0, #24
 8003d2a:	d501      	bpl.n	8003d30 <_printf_i+0xe8>
 8003d2c:	681e      	ldr	r6, [r3, #0]
 8003d2e:	e002      	b.n	8003d36 <_printf_i+0xee>
 8003d30:	0641      	lsls	r1, r0, #25
 8003d32:	d5fb      	bpl.n	8003d2c <_printf_i+0xe4>
 8003d34:	881e      	ldrh	r6, [r3, #0]
 8003d36:	4853      	ldr	r0, [pc, #332]	; (8003e84 <_printf_i+0x23c>)
 8003d38:	2f6f      	cmp	r7, #111	; 0x6f
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2308      	moveq	r3, #8
 8003d3e:	230a      	movne	r3, #10
 8003d40:	2100      	movs	r1, #0
 8003d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d46:	6865      	ldr	r5, [r4, #4]
 8003d48:	60a5      	str	r5, [r4, #8]
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	bfa2      	ittt	ge
 8003d4e:	6821      	ldrge	r1, [r4, #0]
 8003d50:	f021 0104 	bicge.w	r1, r1, #4
 8003d54:	6021      	strge	r1, [r4, #0]
 8003d56:	b90e      	cbnz	r6, 8003d5c <_printf_i+0x114>
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	d04b      	beq.n	8003df4 <_printf_i+0x1ac>
 8003d5c:	4615      	mov	r5, r2
 8003d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d62:	fb03 6711 	mls	r7, r3, r1, r6
 8003d66:	5dc7      	ldrb	r7, [r0, r7]
 8003d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d6c:	4637      	mov	r7, r6
 8003d6e:	42bb      	cmp	r3, r7
 8003d70:	460e      	mov	r6, r1
 8003d72:	d9f4      	bls.n	8003d5e <_printf_i+0x116>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <_printf_i+0x148>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	07de      	lsls	r6, r3, #31
 8003d7c:	d508      	bpl.n	8003d90 <_printf_i+0x148>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6861      	ldr	r1, [r4, #4]
 8003d82:	4299      	cmp	r1, r3
 8003d84:	bfde      	ittt	le
 8003d86:	2330      	movle	r3, #48	; 0x30
 8003d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d90:	1b52      	subs	r2, r2, r5
 8003d92:	6122      	str	r2, [r4, #16]
 8003d94:	f8cd a000 	str.w	sl, [sp]
 8003d98:	464b      	mov	r3, r9
 8003d9a:	aa03      	add	r2, sp, #12
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4640      	mov	r0, r8
 8003da0:	f7ff fee4 	bl	8003b6c <_printf_common>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d14a      	bne.n	8003e3e <_printf_i+0x1f6>
 8003da8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dac:	b004      	add	sp, #16
 8003dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	4833      	ldr	r0, [pc, #204]	; (8003e88 <_printf_i+0x240>)
 8003dbc:	2778      	movs	r7, #120	; 0x78
 8003dbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	6829      	ldr	r1, [r5, #0]
 8003dc6:	061f      	lsls	r7, r3, #24
 8003dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003dcc:	d402      	bmi.n	8003dd4 <_printf_i+0x18c>
 8003dce:	065f      	lsls	r7, r3, #25
 8003dd0:	bf48      	it	mi
 8003dd2:	b2b6      	uxthmi	r6, r6
 8003dd4:	07df      	lsls	r7, r3, #31
 8003dd6:	bf48      	it	mi
 8003dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ddc:	6029      	str	r1, [r5, #0]
 8003dde:	bf48      	it	mi
 8003de0:	6023      	strmi	r3, [r4, #0]
 8003de2:	b91e      	cbnz	r6, 8003dec <_printf_i+0x1a4>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f023 0320 	bic.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	2310      	movs	r3, #16
 8003dee:	e7a7      	b.n	8003d40 <_printf_i+0xf8>
 8003df0:	4824      	ldr	r0, [pc, #144]	; (8003e84 <_printf_i+0x23c>)
 8003df2:	e7e4      	b.n	8003dbe <_printf_i+0x176>
 8003df4:	4615      	mov	r5, r2
 8003df6:	e7bd      	b.n	8003d74 <_printf_i+0x12c>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	6826      	ldr	r6, [r4, #0]
 8003dfc:	6961      	ldr	r1, [r4, #20]
 8003dfe:	1d18      	adds	r0, r3, #4
 8003e00:	6028      	str	r0, [r5, #0]
 8003e02:	0635      	lsls	r5, r6, #24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	d501      	bpl.n	8003e0c <_printf_i+0x1c4>
 8003e08:	6019      	str	r1, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <_printf_i+0x1ca>
 8003e0c:	0670      	lsls	r0, r6, #25
 8003e0e:	d5fb      	bpl.n	8003e08 <_printf_i+0x1c0>
 8003e10:	8019      	strh	r1, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	4615      	mov	r5, r2
 8003e18:	e7bc      	b.n	8003d94 <_printf_i+0x14c>
 8003e1a:	682b      	ldr	r3, [r5, #0]
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	602a      	str	r2, [r5, #0]
 8003e20:	681d      	ldr	r5, [r3, #0]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	2100      	movs	r1, #0
 8003e26:	4628      	mov	r0, r5
 8003e28:	f7fc f9da 	bl	80001e0 <memchr>
 8003e2c:	b108      	cbz	r0, 8003e32 <_printf_i+0x1ea>
 8003e2e:	1b40      	subs	r0, r0, r5
 8003e30:	6060      	str	r0, [r4, #4]
 8003e32:	6863      	ldr	r3, [r4, #4]
 8003e34:	6123      	str	r3, [r4, #16]
 8003e36:	2300      	movs	r3, #0
 8003e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e3c:	e7aa      	b.n	8003d94 <_printf_i+0x14c>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4649      	mov	r1, r9
 8003e44:	4640      	mov	r0, r8
 8003e46:	47d0      	blx	sl
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d0ad      	beq.n	8003da8 <_printf_i+0x160>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	079b      	lsls	r3, r3, #30
 8003e50:	d413      	bmi.n	8003e7a <_printf_i+0x232>
 8003e52:	68e0      	ldr	r0, [r4, #12]
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	4298      	cmp	r0, r3
 8003e58:	bfb8      	it	lt
 8003e5a:	4618      	movlt	r0, r3
 8003e5c:	e7a6      	b.n	8003dac <_printf_i+0x164>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4632      	mov	r2, r6
 8003e62:	4649      	mov	r1, r9
 8003e64:	4640      	mov	r0, r8
 8003e66:	47d0      	blx	sl
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d09d      	beq.n	8003da8 <_printf_i+0x160>
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	9903      	ldr	r1, [sp, #12]
 8003e72:	1a5b      	subs	r3, r3, r1
 8003e74:	42ab      	cmp	r3, r5
 8003e76:	dcf2      	bgt.n	8003e5e <_printf_i+0x216>
 8003e78:	e7eb      	b.n	8003e52 <_printf_i+0x20a>
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	f104 0619 	add.w	r6, r4, #25
 8003e80:	e7f5      	b.n	8003e6e <_printf_i+0x226>
 8003e82:	bf00      	nop
 8003e84:	080048f3 	.word	0x080048f3
 8003e88:	08004904 	.word	0x08004904

08003e8c <__sflush_r>:
 8003e8c:	898a      	ldrh	r2, [r1, #12]
 8003e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	4605      	mov	r5, r0
 8003e94:	0710      	lsls	r0, r2, #28
 8003e96:	460c      	mov	r4, r1
 8003e98:	d458      	bmi.n	8003f4c <__sflush_r+0xc0>
 8003e9a:	684b      	ldr	r3, [r1, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	dc05      	bgt.n	8003eac <__sflush_r+0x20>
 8003ea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	dc02      	bgt.n	8003eac <__sflush_r+0x20>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eae:	2e00      	cmp	r6, #0
 8003eb0:	d0f9      	beq.n	8003ea6 <__sflush_r+0x1a>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003eb8:	682f      	ldr	r7, [r5, #0]
 8003eba:	6a21      	ldr	r1, [r4, #32]
 8003ebc:	602b      	str	r3, [r5, #0]
 8003ebe:	d032      	beq.n	8003f26 <__sflush_r+0x9a>
 8003ec0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	075a      	lsls	r2, r3, #29
 8003ec6:	d505      	bpl.n	8003ed4 <__sflush_r+0x48>
 8003ec8:	6863      	ldr	r3, [r4, #4]
 8003eca:	1ac0      	subs	r0, r0, r3
 8003ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ece:	b10b      	cbz	r3, 8003ed4 <__sflush_r+0x48>
 8003ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ed2:	1ac0      	subs	r0, r0, r3
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eda:	6a21      	ldr	r1, [r4, #32]
 8003edc:	4628      	mov	r0, r5
 8003ede:	47b0      	blx	r6
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	d106      	bne.n	8003ef4 <__sflush_r+0x68>
 8003ee6:	6829      	ldr	r1, [r5, #0]
 8003ee8:	291d      	cmp	r1, #29
 8003eea:	d82b      	bhi.n	8003f44 <__sflush_r+0xb8>
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <__sflush_r+0x108>)
 8003eee:	410a      	asrs	r2, r1
 8003ef0:	07d6      	lsls	r6, r2, #31
 8003ef2:	d427      	bmi.n	8003f44 <__sflush_r+0xb8>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	6062      	str	r2, [r4, #4]
 8003ef8:	04d9      	lsls	r1, r3, #19
 8003efa:	6922      	ldr	r2, [r4, #16]
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	d504      	bpl.n	8003f0a <__sflush_r+0x7e>
 8003f00:	1c42      	adds	r2, r0, #1
 8003f02:	d101      	bne.n	8003f08 <__sflush_r+0x7c>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b903      	cbnz	r3, 8003f0a <__sflush_r+0x7e>
 8003f08:	6560      	str	r0, [r4, #84]	; 0x54
 8003f0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f0c:	602f      	str	r7, [r5, #0]
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	d0c9      	beq.n	8003ea6 <__sflush_r+0x1a>
 8003f12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f16:	4299      	cmp	r1, r3
 8003f18:	d002      	beq.n	8003f20 <__sflush_r+0x94>
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f7ff fc82 	bl	8003824 <_free_r>
 8003f20:	2000      	movs	r0, #0
 8003f22:	6360      	str	r0, [r4, #52]	; 0x34
 8003f24:	e7c0      	b.n	8003ea8 <__sflush_r+0x1c>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4628      	mov	r0, r5
 8003f2a:	47b0      	blx	r6
 8003f2c:	1c41      	adds	r1, r0, #1
 8003f2e:	d1c8      	bne.n	8003ec2 <__sflush_r+0x36>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0c5      	beq.n	8003ec2 <__sflush_r+0x36>
 8003f36:	2b1d      	cmp	r3, #29
 8003f38:	d001      	beq.n	8003f3e <__sflush_r+0xb2>
 8003f3a:	2b16      	cmp	r3, #22
 8003f3c:	d101      	bne.n	8003f42 <__sflush_r+0xb6>
 8003f3e:	602f      	str	r7, [r5, #0]
 8003f40:	e7b1      	b.n	8003ea6 <__sflush_r+0x1a>
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	e7ad      	b.n	8003ea8 <__sflush_r+0x1c>
 8003f4c:	690f      	ldr	r7, [r1, #16]
 8003f4e:	2f00      	cmp	r7, #0
 8003f50:	d0a9      	beq.n	8003ea6 <__sflush_r+0x1a>
 8003f52:	0793      	lsls	r3, r2, #30
 8003f54:	680e      	ldr	r6, [r1, #0]
 8003f56:	bf08      	it	eq
 8003f58:	694b      	ldreq	r3, [r1, #20]
 8003f5a:	600f      	str	r7, [r1, #0]
 8003f5c:	bf18      	it	ne
 8003f5e:	2300      	movne	r3, #0
 8003f60:	eba6 0807 	sub.w	r8, r6, r7
 8003f64:	608b      	str	r3, [r1, #8]
 8003f66:	f1b8 0f00 	cmp.w	r8, #0
 8003f6a:	dd9c      	ble.n	8003ea6 <__sflush_r+0x1a>
 8003f6c:	6a21      	ldr	r1, [r4, #32]
 8003f6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f70:	4643      	mov	r3, r8
 8003f72:	463a      	mov	r2, r7
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b0      	blx	r6
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	dc06      	bgt.n	8003f8a <__sflush_r+0xfe>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f82:	81a3      	strh	r3, [r4, #12]
 8003f84:	f04f 30ff 	mov.w	r0, #4294967295
 8003f88:	e78e      	b.n	8003ea8 <__sflush_r+0x1c>
 8003f8a:	4407      	add	r7, r0
 8003f8c:	eba8 0800 	sub.w	r8, r8, r0
 8003f90:	e7e9      	b.n	8003f66 <__sflush_r+0xda>
 8003f92:	bf00      	nop
 8003f94:	dfbffffe 	.word	0xdfbffffe

08003f98 <_fflush_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	690b      	ldr	r3, [r1, #16]
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b913      	cbnz	r3, 8003fa8 <_fflush_r+0x10>
 8003fa2:	2500      	movs	r5, #0
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	b118      	cbz	r0, 8003fb2 <_fflush_r+0x1a>
 8003faa:	6a03      	ldr	r3, [r0, #32]
 8003fac:	b90b      	cbnz	r3, 8003fb2 <_fflush_r+0x1a>
 8003fae:	f7ff fa75 	bl	800349c <__sinit>
 8003fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f3      	beq.n	8003fa2 <_fflush_r+0xa>
 8003fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fbc:	07d0      	lsls	r0, r2, #31
 8003fbe:	d404      	bmi.n	8003fca <_fflush_r+0x32>
 8003fc0:	0599      	lsls	r1, r3, #22
 8003fc2:	d402      	bmi.n	8003fca <_fflush_r+0x32>
 8003fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc6:	f7ff fbfe 	bl	80037c6 <__retarget_lock_acquire_recursive>
 8003fca:	4628      	mov	r0, r5
 8003fcc:	4621      	mov	r1, r4
 8003fce:	f7ff ff5d 	bl	8003e8c <__sflush_r>
 8003fd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd4:	07da      	lsls	r2, r3, #31
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	d4e4      	bmi.n	8003fa4 <_fflush_r+0xc>
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	059b      	lsls	r3, r3, #22
 8003fde:	d4e1      	bmi.n	8003fa4 <_fflush_r+0xc>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe2:	f7ff fbf1 	bl	80037c8 <__retarget_lock_release_recursive>
 8003fe6:	e7dd      	b.n	8003fa4 <_fflush_r+0xc>

08003fe8 <fiprintf>:
 8003fe8:	b40e      	push	{r1, r2, r3}
 8003fea:	b503      	push	{r0, r1, lr}
 8003fec:	4601      	mov	r1, r0
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	4805      	ldr	r0, [pc, #20]	; (8004008 <fiprintf+0x20>)
 8003ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	f000 f881 	bl	8004100 <_vfiprintf_r>
 8003ffe:	b002      	add	sp, #8
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	b003      	add	sp, #12
 8004006:	4770      	bx	lr
 8004008:	20000064 	.word	0x20000064

0800400c <memmove>:
 800400c:	4288      	cmp	r0, r1
 800400e:	b510      	push	{r4, lr}
 8004010:	eb01 0402 	add.w	r4, r1, r2
 8004014:	d902      	bls.n	800401c <memmove+0x10>
 8004016:	4284      	cmp	r4, r0
 8004018:	4623      	mov	r3, r4
 800401a:	d807      	bhi.n	800402c <memmove+0x20>
 800401c:	1e43      	subs	r3, r0, #1
 800401e:	42a1      	cmp	r1, r4
 8004020:	d008      	beq.n	8004034 <memmove+0x28>
 8004022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800402a:	e7f8      	b.n	800401e <memmove+0x12>
 800402c:	4402      	add	r2, r0
 800402e:	4601      	mov	r1, r0
 8004030:	428a      	cmp	r2, r1
 8004032:	d100      	bne.n	8004036 <memmove+0x2a>
 8004034:	bd10      	pop	{r4, pc}
 8004036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800403a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800403e:	e7f7      	b.n	8004030 <memmove+0x24>

08004040 <abort>:
 8004040:	b508      	push	{r3, lr}
 8004042:	2006      	movs	r0, #6
 8004044:	f000 fa34 	bl	80044b0 <raise>
 8004048:	2001      	movs	r0, #1
 800404a:	f7fc fe5b 	bl	8000d04 <_exit>

0800404e <_realloc_r>:
 800404e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004052:	4680      	mov	r8, r0
 8004054:	4614      	mov	r4, r2
 8004056:	460e      	mov	r6, r1
 8004058:	b921      	cbnz	r1, 8004064 <_realloc_r+0x16>
 800405a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800405e:	4611      	mov	r1, r2
 8004060:	f7ff b878 	b.w	8003154 <_malloc_r>
 8004064:	b92a      	cbnz	r2, 8004072 <_realloc_r+0x24>
 8004066:	f7ff fbdd 	bl	8003824 <_free_r>
 800406a:	4625      	mov	r5, r4
 800406c:	4628      	mov	r0, r5
 800406e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004072:	f000 fa39 	bl	80044e8 <_malloc_usable_size_r>
 8004076:	4284      	cmp	r4, r0
 8004078:	4607      	mov	r7, r0
 800407a:	d802      	bhi.n	8004082 <_realloc_r+0x34>
 800407c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004080:	d812      	bhi.n	80040a8 <_realloc_r+0x5a>
 8004082:	4621      	mov	r1, r4
 8004084:	4640      	mov	r0, r8
 8004086:	f7ff f865 	bl	8003154 <_malloc_r>
 800408a:	4605      	mov	r5, r0
 800408c:	2800      	cmp	r0, #0
 800408e:	d0ed      	beq.n	800406c <_realloc_r+0x1e>
 8004090:	42bc      	cmp	r4, r7
 8004092:	4622      	mov	r2, r4
 8004094:	4631      	mov	r1, r6
 8004096:	bf28      	it	cs
 8004098:	463a      	movcs	r2, r7
 800409a:	f7ff fb96 	bl	80037ca <memcpy>
 800409e:	4631      	mov	r1, r6
 80040a0:	4640      	mov	r0, r8
 80040a2:	f7ff fbbf 	bl	8003824 <_free_r>
 80040a6:	e7e1      	b.n	800406c <_realloc_r+0x1e>
 80040a8:	4635      	mov	r5, r6
 80040aa:	e7df      	b.n	800406c <_realloc_r+0x1e>

080040ac <__sfputc_r>:
 80040ac:	6893      	ldr	r3, [r2, #8]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	b410      	push	{r4}
 80040b4:	6093      	str	r3, [r2, #8]
 80040b6:	da08      	bge.n	80040ca <__sfputc_r+0x1e>
 80040b8:	6994      	ldr	r4, [r2, #24]
 80040ba:	42a3      	cmp	r3, r4
 80040bc:	db01      	blt.n	80040c2 <__sfputc_r+0x16>
 80040be:	290a      	cmp	r1, #10
 80040c0:	d103      	bne.n	80040ca <__sfputc_r+0x1e>
 80040c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040c6:	f000 b935 	b.w	8004334 <__swbuf_r>
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	1c58      	adds	r0, r3, #1
 80040ce:	6010      	str	r0, [r2, #0]
 80040d0:	7019      	strb	r1, [r3, #0]
 80040d2:	4608      	mov	r0, r1
 80040d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040d8:	4770      	bx	lr

080040da <__sfputs_r>:
 80040da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040dc:	4606      	mov	r6, r0
 80040de:	460f      	mov	r7, r1
 80040e0:	4614      	mov	r4, r2
 80040e2:	18d5      	adds	r5, r2, r3
 80040e4:	42ac      	cmp	r4, r5
 80040e6:	d101      	bne.n	80040ec <__sfputs_r+0x12>
 80040e8:	2000      	movs	r0, #0
 80040ea:	e007      	b.n	80040fc <__sfputs_r+0x22>
 80040ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040f0:	463a      	mov	r2, r7
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff ffda 	bl	80040ac <__sfputc_r>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d1f3      	bne.n	80040e4 <__sfputs_r+0xa>
 80040fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004100 <_vfiprintf_r>:
 8004100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004104:	460d      	mov	r5, r1
 8004106:	b09d      	sub	sp, #116	; 0x74
 8004108:	4614      	mov	r4, r2
 800410a:	4698      	mov	r8, r3
 800410c:	4606      	mov	r6, r0
 800410e:	b118      	cbz	r0, 8004118 <_vfiprintf_r+0x18>
 8004110:	6a03      	ldr	r3, [r0, #32]
 8004112:	b90b      	cbnz	r3, 8004118 <_vfiprintf_r+0x18>
 8004114:	f7ff f9c2 	bl	800349c <__sinit>
 8004118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800411a:	07d9      	lsls	r1, r3, #31
 800411c:	d405      	bmi.n	800412a <_vfiprintf_r+0x2a>
 800411e:	89ab      	ldrh	r3, [r5, #12]
 8004120:	059a      	lsls	r2, r3, #22
 8004122:	d402      	bmi.n	800412a <_vfiprintf_r+0x2a>
 8004124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004126:	f7ff fb4e 	bl	80037c6 <__retarget_lock_acquire_recursive>
 800412a:	89ab      	ldrh	r3, [r5, #12]
 800412c:	071b      	lsls	r3, r3, #28
 800412e:	d501      	bpl.n	8004134 <_vfiprintf_r+0x34>
 8004130:	692b      	ldr	r3, [r5, #16]
 8004132:	b99b      	cbnz	r3, 800415c <_vfiprintf_r+0x5c>
 8004134:	4629      	mov	r1, r5
 8004136:	4630      	mov	r0, r6
 8004138:	f000 f93a 	bl	80043b0 <__swsetup_r>
 800413c:	b170      	cbz	r0, 800415c <_vfiprintf_r+0x5c>
 800413e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004140:	07dc      	lsls	r4, r3, #31
 8004142:	d504      	bpl.n	800414e <_vfiprintf_r+0x4e>
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	b01d      	add	sp, #116	; 0x74
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	89ab      	ldrh	r3, [r5, #12]
 8004150:	0598      	lsls	r0, r3, #22
 8004152:	d4f7      	bmi.n	8004144 <_vfiprintf_r+0x44>
 8004154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004156:	f7ff fb37 	bl	80037c8 <__retarget_lock_release_recursive>
 800415a:	e7f3      	b.n	8004144 <_vfiprintf_r+0x44>
 800415c:	2300      	movs	r3, #0
 800415e:	9309      	str	r3, [sp, #36]	; 0x24
 8004160:	2320      	movs	r3, #32
 8004162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004166:	f8cd 800c 	str.w	r8, [sp, #12]
 800416a:	2330      	movs	r3, #48	; 0x30
 800416c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004320 <_vfiprintf_r+0x220>
 8004170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004174:	f04f 0901 	mov.w	r9, #1
 8004178:	4623      	mov	r3, r4
 800417a:	469a      	mov	sl, r3
 800417c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004180:	b10a      	cbz	r2, 8004186 <_vfiprintf_r+0x86>
 8004182:	2a25      	cmp	r2, #37	; 0x25
 8004184:	d1f9      	bne.n	800417a <_vfiprintf_r+0x7a>
 8004186:	ebba 0b04 	subs.w	fp, sl, r4
 800418a:	d00b      	beq.n	80041a4 <_vfiprintf_r+0xa4>
 800418c:	465b      	mov	r3, fp
 800418e:	4622      	mov	r2, r4
 8004190:	4629      	mov	r1, r5
 8004192:	4630      	mov	r0, r6
 8004194:	f7ff ffa1 	bl	80040da <__sfputs_r>
 8004198:	3001      	adds	r0, #1
 800419a:	f000 80a9 	beq.w	80042f0 <_vfiprintf_r+0x1f0>
 800419e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041a0:	445a      	add	r2, fp
 80041a2:	9209      	str	r2, [sp, #36]	; 0x24
 80041a4:	f89a 3000 	ldrb.w	r3, [sl]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80a1 	beq.w	80042f0 <_vfiprintf_r+0x1f0>
 80041ae:	2300      	movs	r3, #0
 80041b0:	f04f 32ff 	mov.w	r2, #4294967295
 80041b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041b8:	f10a 0a01 	add.w	sl, sl, #1
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	9307      	str	r3, [sp, #28]
 80041c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041c4:	931a      	str	r3, [sp, #104]	; 0x68
 80041c6:	4654      	mov	r4, sl
 80041c8:	2205      	movs	r2, #5
 80041ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041ce:	4854      	ldr	r0, [pc, #336]	; (8004320 <_vfiprintf_r+0x220>)
 80041d0:	f7fc f806 	bl	80001e0 <memchr>
 80041d4:	9a04      	ldr	r2, [sp, #16]
 80041d6:	b9d8      	cbnz	r0, 8004210 <_vfiprintf_r+0x110>
 80041d8:	06d1      	lsls	r1, r2, #27
 80041da:	bf44      	itt	mi
 80041dc:	2320      	movmi	r3, #32
 80041de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041e2:	0713      	lsls	r3, r2, #28
 80041e4:	bf44      	itt	mi
 80041e6:	232b      	movmi	r3, #43	; 0x2b
 80041e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ec:	f89a 3000 	ldrb.w	r3, [sl]
 80041f0:	2b2a      	cmp	r3, #42	; 0x2a
 80041f2:	d015      	beq.n	8004220 <_vfiprintf_r+0x120>
 80041f4:	9a07      	ldr	r2, [sp, #28]
 80041f6:	4654      	mov	r4, sl
 80041f8:	2000      	movs	r0, #0
 80041fa:	f04f 0c0a 	mov.w	ip, #10
 80041fe:	4621      	mov	r1, r4
 8004200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004204:	3b30      	subs	r3, #48	; 0x30
 8004206:	2b09      	cmp	r3, #9
 8004208:	d94d      	bls.n	80042a6 <_vfiprintf_r+0x1a6>
 800420a:	b1b0      	cbz	r0, 800423a <_vfiprintf_r+0x13a>
 800420c:	9207      	str	r2, [sp, #28]
 800420e:	e014      	b.n	800423a <_vfiprintf_r+0x13a>
 8004210:	eba0 0308 	sub.w	r3, r0, r8
 8004214:	fa09 f303 	lsl.w	r3, r9, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	46a2      	mov	sl, r4
 800421e:	e7d2      	b.n	80041c6 <_vfiprintf_r+0xc6>
 8004220:	9b03      	ldr	r3, [sp, #12]
 8004222:	1d19      	adds	r1, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	9103      	str	r1, [sp, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	bfbb      	ittet	lt
 800422c:	425b      	neglt	r3, r3
 800422e:	f042 0202 	orrlt.w	r2, r2, #2
 8004232:	9307      	strge	r3, [sp, #28]
 8004234:	9307      	strlt	r3, [sp, #28]
 8004236:	bfb8      	it	lt
 8004238:	9204      	strlt	r2, [sp, #16]
 800423a:	7823      	ldrb	r3, [r4, #0]
 800423c:	2b2e      	cmp	r3, #46	; 0x2e
 800423e:	d10c      	bne.n	800425a <_vfiprintf_r+0x15a>
 8004240:	7863      	ldrb	r3, [r4, #1]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d134      	bne.n	80042b0 <_vfiprintf_r+0x1b0>
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	1d1a      	adds	r2, r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	9203      	str	r2, [sp, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfb8      	it	lt
 8004252:	f04f 33ff 	movlt.w	r3, #4294967295
 8004256:	3402      	adds	r4, #2
 8004258:	9305      	str	r3, [sp, #20]
 800425a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004330 <_vfiprintf_r+0x230>
 800425e:	7821      	ldrb	r1, [r4, #0]
 8004260:	2203      	movs	r2, #3
 8004262:	4650      	mov	r0, sl
 8004264:	f7fb ffbc 	bl	80001e0 <memchr>
 8004268:	b138      	cbz	r0, 800427a <_vfiprintf_r+0x17a>
 800426a:	9b04      	ldr	r3, [sp, #16]
 800426c:	eba0 000a 	sub.w	r0, r0, sl
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	4082      	lsls	r2, r0
 8004274:	4313      	orrs	r3, r2
 8004276:	3401      	adds	r4, #1
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800427e:	4829      	ldr	r0, [pc, #164]	; (8004324 <_vfiprintf_r+0x224>)
 8004280:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004284:	2206      	movs	r2, #6
 8004286:	f7fb ffab 	bl	80001e0 <memchr>
 800428a:	2800      	cmp	r0, #0
 800428c:	d03f      	beq.n	800430e <_vfiprintf_r+0x20e>
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <_vfiprintf_r+0x228>)
 8004290:	bb1b      	cbnz	r3, 80042da <_vfiprintf_r+0x1da>
 8004292:	9b03      	ldr	r3, [sp, #12]
 8004294:	3307      	adds	r3, #7
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	3308      	adds	r3, #8
 800429c:	9303      	str	r3, [sp, #12]
 800429e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a0:	443b      	add	r3, r7
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	e768      	b.n	8004178 <_vfiprintf_r+0x78>
 80042a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042aa:	460c      	mov	r4, r1
 80042ac:	2001      	movs	r0, #1
 80042ae:	e7a6      	b.n	80041fe <_vfiprintf_r+0xfe>
 80042b0:	2300      	movs	r3, #0
 80042b2:	3401      	adds	r4, #1
 80042b4:	9305      	str	r3, [sp, #20]
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 0c0a 	mov.w	ip, #10
 80042bc:	4620      	mov	r0, r4
 80042be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c2:	3a30      	subs	r2, #48	; 0x30
 80042c4:	2a09      	cmp	r2, #9
 80042c6:	d903      	bls.n	80042d0 <_vfiprintf_r+0x1d0>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0c6      	beq.n	800425a <_vfiprintf_r+0x15a>
 80042cc:	9105      	str	r1, [sp, #20]
 80042ce:	e7c4      	b.n	800425a <_vfiprintf_r+0x15a>
 80042d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d4:	4604      	mov	r4, r0
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f0      	b.n	80042bc <_vfiprintf_r+0x1bc>
 80042da:	ab03      	add	r3, sp, #12
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	462a      	mov	r2, r5
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <_vfiprintf_r+0x22c>)
 80042e2:	a904      	add	r1, sp, #16
 80042e4:	4630      	mov	r0, r6
 80042e6:	f3af 8000 	nop.w
 80042ea:	4607      	mov	r7, r0
 80042ec:	1c78      	adds	r0, r7, #1
 80042ee:	d1d6      	bne.n	800429e <_vfiprintf_r+0x19e>
 80042f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042f2:	07d9      	lsls	r1, r3, #31
 80042f4:	d405      	bmi.n	8004302 <_vfiprintf_r+0x202>
 80042f6:	89ab      	ldrh	r3, [r5, #12]
 80042f8:	059a      	lsls	r2, r3, #22
 80042fa:	d402      	bmi.n	8004302 <_vfiprintf_r+0x202>
 80042fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042fe:	f7ff fa63 	bl	80037c8 <__retarget_lock_release_recursive>
 8004302:	89ab      	ldrh	r3, [r5, #12]
 8004304:	065b      	lsls	r3, r3, #25
 8004306:	f53f af1d 	bmi.w	8004144 <_vfiprintf_r+0x44>
 800430a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800430c:	e71c      	b.n	8004148 <_vfiprintf_r+0x48>
 800430e:	ab03      	add	r3, sp, #12
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462a      	mov	r2, r5
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <_vfiprintf_r+0x22c>)
 8004316:	a904      	add	r1, sp, #16
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff fc95 	bl	8003c48 <_printf_i>
 800431e:	e7e4      	b.n	80042ea <_vfiprintf_r+0x1ea>
 8004320:	080048e2 	.word	0x080048e2
 8004324:	080048ec 	.word	0x080048ec
 8004328:	00000000 	.word	0x00000000
 800432c:	080040db 	.word	0x080040db
 8004330:	080048e8 	.word	0x080048e8

08004334 <__swbuf_r>:
 8004334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004336:	460e      	mov	r6, r1
 8004338:	4614      	mov	r4, r2
 800433a:	4605      	mov	r5, r0
 800433c:	b118      	cbz	r0, 8004346 <__swbuf_r+0x12>
 800433e:	6a03      	ldr	r3, [r0, #32]
 8004340:	b90b      	cbnz	r3, 8004346 <__swbuf_r+0x12>
 8004342:	f7ff f8ab 	bl	800349c <__sinit>
 8004346:	69a3      	ldr	r3, [r4, #24]
 8004348:	60a3      	str	r3, [r4, #8]
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	071a      	lsls	r2, r3, #28
 800434e:	d525      	bpl.n	800439c <__swbuf_r+0x68>
 8004350:	6923      	ldr	r3, [r4, #16]
 8004352:	b31b      	cbz	r3, 800439c <__swbuf_r+0x68>
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	6922      	ldr	r2, [r4, #16]
 8004358:	1a98      	subs	r0, r3, r2
 800435a:	6963      	ldr	r3, [r4, #20]
 800435c:	b2f6      	uxtb	r6, r6
 800435e:	4283      	cmp	r3, r0
 8004360:	4637      	mov	r7, r6
 8004362:	dc04      	bgt.n	800436e <__swbuf_r+0x3a>
 8004364:	4621      	mov	r1, r4
 8004366:	4628      	mov	r0, r5
 8004368:	f7ff fe16 	bl	8003f98 <_fflush_r>
 800436c:	b9e0      	cbnz	r0, 80043a8 <__swbuf_r+0x74>
 800436e:	68a3      	ldr	r3, [r4, #8]
 8004370:	3b01      	subs	r3, #1
 8004372:	60a3      	str	r3, [r4, #8]
 8004374:	6823      	ldr	r3, [r4, #0]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	6022      	str	r2, [r4, #0]
 800437a:	701e      	strb	r6, [r3, #0]
 800437c:	6962      	ldr	r2, [r4, #20]
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	429a      	cmp	r2, r3
 8004382:	d004      	beq.n	800438e <__swbuf_r+0x5a>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	07db      	lsls	r3, r3, #31
 8004388:	d506      	bpl.n	8004398 <__swbuf_r+0x64>
 800438a:	2e0a      	cmp	r6, #10
 800438c:	d104      	bne.n	8004398 <__swbuf_r+0x64>
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f7ff fe01 	bl	8003f98 <_fflush_r>
 8004396:	b938      	cbnz	r0, 80043a8 <__swbuf_r+0x74>
 8004398:	4638      	mov	r0, r7
 800439a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800439c:	4621      	mov	r1, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f806 	bl	80043b0 <__swsetup_r>
 80043a4:	2800      	cmp	r0, #0
 80043a6:	d0d5      	beq.n	8004354 <__swbuf_r+0x20>
 80043a8:	f04f 37ff 	mov.w	r7, #4294967295
 80043ac:	e7f4      	b.n	8004398 <__swbuf_r+0x64>
	...

080043b0 <__swsetup_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <__swsetup_r+0xac>)
 80043b4:	4605      	mov	r5, r0
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	460c      	mov	r4, r1
 80043ba:	b118      	cbz	r0, 80043c4 <__swsetup_r+0x14>
 80043bc:	6a03      	ldr	r3, [r0, #32]
 80043be:	b90b      	cbnz	r3, 80043c4 <__swsetup_r+0x14>
 80043c0:	f7ff f86c 	bl	800349c <__sinit>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043ca:	0718      	lsls	r0, r3, #28
 80043cc:	d422      	bmi.n	8004414 <__swsetup_r+0x64>
 80043ce:	06d9      	lsls	r1, r3, #27
 80043d0:	d407      	bmi.n	80043e2 <__swsetup_r+0x32>
 80043d2:	2309      	movs	r3, #9
 80043d4:	602b      	str	r3, [r5, #0]
 80043d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043da:	81a3      	strh	r3, [r4, #12]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	e034      	b.n	800444c <__swsetup_r+0x9c>
 80043e2:	0758      	lsls	r0, r3, #29
 80043e4:	d512      	bpl.n	800440c <__swsetup_r+0x5c>
 80043e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e8:	b141      	cbz	r1, 80043fc <__swsetup_r+0x4c>
 80043ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043ee:	4299      	cmp	r1, r3
 80043f0:	d002      	beq.n	80043f8 <__swsetup_r+0x48>
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7ff fa16 	bl	8003824 <_free_r>
 80043f8:	2300      	movs	r3, #0
 80043fa:	6363      	str	r3, [r4, #52]	; 0x34
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	2300      	movs	r3, #0
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	f043 0308 	orr.w	r3, r3, #8
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	6923      	ldr	r3, [r4, #16]
 8004416:	b94b      	cbnz	r3, 800442c <__swsetup_r+0x7c>
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800441e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004422:	d003      	beq.n	800442c <__swsetup_r+0x7c>
 8004424:	4621      	mov	r1, r4
 8004426:	4628      	mov	r0, r5
 8004428:	f000 f88c 	bl	8004544 <__smakebuf_r>
 800442c:	89a0      	ldrh	r0, [r4, #12]
 800442e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004432:	f010 0301 	ands.w	r3, r0, #1
 8004436:	d00a      	beq.n	800444e <__swsetup_r+0x9e>
 8004438:	2300      	movs	r3, #0
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	6963      	ldr	r3, [r4, #20]
 800443e:	425b      	negs	r3, r3
 8004440:	61a3      	str	r3, [r4, #24]
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	b943      	cbnz	r3, 8004458 <__swsetup_r+0xa8>
 8004446:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800444a:	d1c4      	bne.n	80043d6 <__swsetup_r+0x26>
 800444c:	bd38      	pop	{r3, r4, r5, pc}
 800444e:	0781      	lsls	r1, r0, #30
 8004450:	bf58      	it	pl
 8004452:	6963      	ldrpl	r3, [r4, #20]
 8004454:	60a3      	str	r3, [r4, #8]
 8004456:	e7f4      	b.n	8004442 <__swsetup_r+0x92>
 8004458:	2000      	movs	r0, #0
 800445a:	e7f7      	b.n	800444c <__swsetup_r+0x9c>
 800445c:	20000064 	.word	0x20000064

08004460 <_raise_r>:
 8004460:	291f      	cmp	r1, #31
 8004462:	b538      	push	{r3, r4, r5, lr}
 8004464:	4604      	mov	r4, r0
 8004466:	460d      	mov	r5, r1
 8004468:	d904      	bls.n	8004474 <_raise_r+0x14>
 800446a:	2316      	movs	r3, #22
 800446c:	6003      	str	r3, [r0, #0]
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004476:	b112      	cbz	r2, 800447e <_raise_r+0x1e>
 8004478:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800447c:	b94b      	cbnz	r3, 8004492 <_raise_r+0x32>
 800447e:	4620      	mov	r0, r4
 8004480:	f000 f830 	bl	80044e4 <_getpid_r>
 8004484:	462a      	mov	r2, r5
 8004486:	4601      	mov	r1, r0
 8004488:	4620      	mov	r0, r4
 800448a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800448e:	f000 b817 	b.w	80044c0 <_kill_r>
 8004492:	2b01      	cmp	r3, #1
 8004494:	d00a      	beq.n	80044ac <_raise_r+0x4c>
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	d103      	bne.n	80044a2 <_raise_r+0x42>
 800449a:	2316      	movs	r3, #22
 800449c:	6003      	str	r3, [r0, #0]
 800449e:	2001      	movs	r0, #1
 80044a0:	e7e7      	b.n	8004472 <_raise_r+0x12>
 80044a2:	2400      	movs	r4, #0
 80044a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80044a8:	4628      	mov	r0, r5
 80044aa:	4798      	blx	r3
 80044ac:	2000      	movs	r0, #0
 80044ae:	e7e0      	b.n	8004472 <_raise_r+0x12>

080044b0 <raise>:
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <raise+0xc>)
 80044b2:	4601      	mov	r1, r0
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	f7ff bfd3 	b.w	8004460 <_raise_r>
 80044ba:	bf00      	nop
 80044bc:	20000064 	.word	0x20000064

080044c0 <_kill_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4d07      	ldr	r5, [pc, #28]	; (80044e0 <_kill_r+0x20>)
 80044c4:	2300      	movs	r3, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	f7fc fc09 	bl	8000ce4 <_kill>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	d102      	bne.n	80044dc <_kill_r+0x1c>
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	b103      	cbz	r3, 80044dc <_kill_r+0x1c>
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	bd38      	pop	{r3, r4, r5, pc}
 80044de:	bf00      	nop
 80044e0:	20000254 	.word	0x20000254

080044e4 <_getpid_r>:
 80044e4:	f7fc bbf6 	b.w	8000cd4 <_getpid>

080044e8 <_malloc_usable_size_r>:
 80044e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ec:	1f18      	subs	r0, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfbc      	itt	lt
 80044f2:	580b      	ldrlt	r3, [r1, r0]
 80044f4:	18c0      	addlt	r0, r0, r3
 80044f6:	4770      	bx	lr

080044f8 <__swhatbuf_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	2900      	cmp	r1, #0
 8004502:	b096      	sub	sp, #88	; 0x58
 8004504:	4615      	mov	r5, r2
 8004506:	461e      	mov	r6, r3
 8004508:	da0d      	bge.n	8004526 <__swhatbuf_r+0x2e>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004510:	f04f 0100 	mov.w	r1, #0
 8004514:	bf0c      	ite	eq
 8004516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800451a:	2340      	movne	r3, #64	; 0x40
 800451c:	2000      	movs	r0, #0
 800451e:	6031      	str	r1, [r6, #0]
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	b016      	add	sp, #88	; 0x58
 8004524:	bd70      	pop	{r4, r5, r6, pc}
 8004526:	466a      	mov	r2, sp
 8004528:	f000 f848 	bl	80045bc <_fstat_r>
 800452c:	2800      	cmp	r0, #0
 800452e:	dbec      	blt.n	800450a <__swhatbuf_r+0x12>
 8004530:	9901      	ldr	r1, [sp, #4]
 8004532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800453a:	4259      	negs	r1, r3
 800453c:	4159      	adcs	r1, r3
 800453e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004542:	e7eb      	b.n	800451c <__swhatbuf_r+0x24>

08004544 <__smakebuf_r>:
 8004544:	898b      	ldrh	r3, [r1, #12]
 8004546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004548:	079d      	lsls	r5, r3, #30
 800454a:	4606      	mov	r6, r0
 800454c:	460c      	mov	r4, r1
 800454e:	d507      	bpl.n	8004560 <__smakebuf_r+0x1c>
 8004550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	6123      	str	r3, [r4, #16]
 8004558:	2301      	movs	r3, #1
 800455a:	6163      	str	r3, [r4, #20]
 800455c:	b002      	add	sp, #8
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	ab01      	add	r3, sp, #4
 8004562:	466a      	mov	r2, sp
 8004564:	f7ff ffc8 	bl	80044f8 <__swhatbuf_r>
 8004568:	9900      	ldr	r1, [sp, #0]
 800456a:	4605      	mov	r5, r0
 800456c:	4630      	mov	r0, r6
 800456e:	f7fe fdf1 	bl	8003154 <_malloc_r>
 8004572:	b948      	cbnz	r0, 8004588 <__smakebuf_r+0x44>
 8004574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004578:	059a      	lsls	r2, r3, #22
 800457a:	d4ef      	bmi.n	800455c <__smakebuf_r+0x18>
 800457c:	f023 0303 	bic.w	r3, r3, #3
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	e7e3      	b.n	8004550 <__smakebuf_r+0xc>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	6020      	str	r0, [r4, #0]
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	9b00      	ldr	r3, [sp, #0]
 8004594:	6163      	str	r3, [r4, #20]
 8004596:	9b01      	ldr	r3, [sp, #4]
 8004598:	6120      	str	r0, [r4, #16]
 800459a:	b15b      	cbz	r3, 80045b4 <__smakebuf_r+0x70>
 800459c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a0:	4630      	mov	r0, r6
 80045a2:	f000 f81d 	bl	80045e0 <_isatty_r>
 80045a6:	b128      	cbz	r0, 80045b4 <__smakebuf_r+0x70>
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	81a3      	strh	r3, [r4, #12]
 80045b4:	89a3      	ldrh	r3, [r4, #12]
 80045b6:	431d      	orrs	r5, r3
 80045b8:	81a5      	strh	r5, [r4, #12]
 80045ba:	e7cf      	b.n	800455c <__smakebuf_r+0x18>

080045bc <_fstat_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4d07      	ldr	r5, [pc, #28]	; (80045dc <_fstat_r+0x20>)
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f7fc fbea 	bl	8000da2 <_fstat>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d102      	bne.n	80045d8 <_fstat_r+0x1c>
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	b103      	cbz	r3, 80045d8 <_fstat_r+0x1c>
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	20000254 	.word	0x20000254

080045e0 <_isatty_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4d06      	ldr	r5, [pc, #24]	; (80045fc <_isatty_r+0x1c>)
 80045e4:	2300      	movs	r3, #0
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fbe9 	bl	8000dc2 <_isatty>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_isatty_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_isatty_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000254 	.word	0x20000254

08004600 <_init>:
 8004600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004602:	bf00      	nop
 8004604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004606:	bc08      	pop	{r3}
 8004608:	469e      	mov	lr, r3
 800460a:	4770      	bx	lr

0800460c <_fini>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr
