
GATEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d50  0800dc50  0800dc50  0001dc50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9a0  0800e9a0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9a0  0800e9a0  0001e9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9a8  0800e9a8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9a8  0800e9a8  0001e9a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9ac  0800e9ac  0001e9ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e9b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200001e8  0800eb98  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e3c  0800eb98  00020e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c20  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028b2  00000000  00000000  00030e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a43  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001905c  00000000  00000000  00034eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010834  00000000  00000000  0004df47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d858  00000000  00000000  0005e77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005140  00000000  00000000  000ebfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f1114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc38 	.word	0x0800dc38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800dc38 	.word	0x0800dc38

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_UARTEx_RxEventCallback>:
static void MX_SPI2_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <HAL_UARTEx_RxEventCallback+0x24>
		SIM_checkEvent(simPtr, Size);
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_UARTEx_RxEventCallback+0x30>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	887a      	ldrh	r2, [r7, #2]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f005 faa8 	bl	8006574 <SIM_checkEvent>
	}
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004400 	.word	0x40004400
 8001030:	2000049c 	.word	0x2000049c

08001034 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	/* Wake up MCU from stop mode by any EXTI line */
	if (GPIO_Pin == rfm95w.dio0) {
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_GPIO_EXTI_Callback+0x28>)
 8001040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	429a      	cmp	r2, r3
 8001046:	d102      	bne.n	800104e <HAL_GPIO_EXTI_Callback+0x1a>
		/* Set flag to read LoRa message */
		irqLoRaFlag = 1;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_GPIO_EXTI_Callback+0x2c>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
	}
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000384 	.word	0x20000384
 8001060:	20000a18 	.word	0x20000a18

08001064 <SIM_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SIM_Init(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

	printf("%s\n", __FUNCTION__);
 8001068:	485f      	ldr	r0, [pc, #380]	; (80011e8 <SIM_Init+0x184>)
 800106a:	f008 f9a3 	bl	80093b4 <puts>
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static SIM7600_HandleTypeDef sim7600 = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	simPtr = (SIM_HandleTypeDef*) &sim7600;
 800106e:	4b5f      	ldr	r3, [pc, #380]	; (80011ec <SIM_Init+0x188>)
 8001070:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <SIM_Init+0x18c>)
 8001072:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	sim7600.hdma = &hdma_usart2_rx;
 8001074:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <SIM_Init+0x18c>)
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <SIM_Init+0x190>)
 8001078:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	sim7600.huart = &huart2;
 800107c:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <SIM_Init+0x18c>)
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <SIM_Init+0x194>)
 8001080:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	sim7600.smsCnt = 0;
 8001084:	4b5a      	ldr	r3, [pc, #360]	; (80011f0 <SIM_Init+0x18c>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
	sim7600.smsPos = 0;
 800108c:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <SIM_Init+0x18c>)
 800108e:	2200      	movs	r2, #0
 8001090:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
	sim7600.pwrkeyPin = SIM7600_PWR_Pin;
 8001094:	4b56      	ldr	r3, [pc, #344]	; (80011f0 <SIM_Init+0x18c>)
 8001096:	2204      	movs	r2, #4
 8001098:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
	sim7600.pwrkeyPort = SIM7600_PWR_GPIO_Port;
 800109c:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <SIM_Init+0x18c>)
 800109e:	4a57      	ldr	r2, [pc, #348]	; (80011fc <SIM_Init+0x198>)
 80010a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
	sim7600.resetPort = SIM7600_RESET_GPIO_Port;
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <SIM_Init+0x18c>)
 80010a6:	4a55      	ldr	r2, [pc, #340]	; (80011fc <SIM_Init+0x198>)
 80010a8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	sim7600.resetPin = SIM7600_RESET_Pin;
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <SIM_Init+0x18c>)
 80010ae:	2210      	movs	r2, #16
 80010b0:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
//    sim7600.sleepPort = SIM7600_DTR_GPIO_Port;
//    sim7600.sleepPin = SIM7600_DTR_Pin;
//    sim7600.powerEnPort = SIM7600_PWREN_GPIO_Port;
//    sim7600.powerEnPin = SIM7600_PWREN_Pin;
	sim7600.parent.CSR = 0;
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <SIM_Init+0x18c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]

	sim7600.parent.simSendATCommand = (simSendATCommand) &SIM7600_sendATCommand;
 80010ba:	4b4d      	ldr	r3, [pc, #308]	; (80011f0 <SIM_Init+0x18c>)
 80010bc:	4a50      	ldr	r2, [pc, #320]	; (8001200 <SIM_Init+0x19c>)
 80010be:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	sim7600.parent.simWakeup = (simWakeup) &SIM7600_wakeup;
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <SIM_Init+0x18c>)
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <SIM_Init+0x1a0>)
 80010c6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	sim7600.parent.simSleep = (simSleep) &SIM7600_sleep;
 80010ca:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <SIM_Init+0x18c>)
 80010cc:	4a4e      	ldr	r2, [pc, #312]	; (8001208 <SIM_Init+0x1a4>)
 80010ce:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	sim7600.parent.simInit = (simInit) &SIM7600_init;
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <SIM_Init+0x18c>)
 80010d4:	4a4d      	ldr	r2, [pc, #308]	; (800120c <SIM_Init+0x1a8>)
 80010d6:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	sim7600.parent.simSetFunction = (simSetFunction) &SIM7600_setFunction;
 80010da:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <SIM_Init+0x18c>)
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <SIM_Init+0x1ac>)
 80010de:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	sim7600.parent.simProcess = (simProcess) &SIM7600_process;
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <SIM_Init+0x18c>)
 80010e4:	4a4b      	ldr	r2, [pc, #300]	; (8001214 <SIM_Init+0x1b0>)
 80010e6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	sim7600.parent.simCheckEvent = (simCheckEvent) &SIM7600_checkEvent;
 80010ea:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <SIM_Init+0x18c>)
 80010ec:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <SIM_Init+0x1b4>)
 80010ee:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	sim7600.parent.simReadSMS = (simReadSMS) &SIM7600_readSMS;
 80010f2:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <SIM_Init+0x18c>)
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <SIM_Init+0x1b8>)
 80010f6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	sim7600.parent.simSendSMS = (simSendSMS) &SIM7600_sendSMS;
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <SIM_Init+0x18c>)
 80010fc:	4a48      	ldr	r2, [pc, #288]	; (8001220 <SIM_Init+0x1bc>)
 80010fe:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	sim7600.parent.simGetSMSCounter = (simGetSMSCounter) &SIM7600_getSMSCounter;
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <SIM_Init+0x18c>)
 8001104:	4a47      	ldr	r2, [pc, #284]	; (8001224 <SIM_Init+0x1c0>)
 8001106:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	sim7600.parent.simCallUSSD = (simCallUSSD) &SIM7600_callUSSD;
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <SIM_Init+0x18c>)
 800110c:	4a46      	ldr	r2, [pc, #280]	; (8001228 <SIM_Init+0x1c4>)
 800110e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	sim7600.parent.simGetRSSI = (simGetRSSI) &SIM7600_getRSSI;
 8001112:	4b37      	ldr	r3, [pc, #220]	; (80011f0 <SIM_Init+0x18c>)
 8001114:	4a45      	ldr	r2, [pc, #276]	; (800122c <SIM_Init+0x1c8>)
 8001116:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	sim7600.parent.simGetTemperature =
 800111a:	4b35      	ldr	r3, [pc, #212]	; (80011f0 <SIM_Init+0x18c>)
 800111c:	4a44      	ldr	r2, [pc, #272]	; (8001230 <SIM_Init+0x1cc>)
 800111e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
			(simGetTemperature) &SIM7600_getTemperature;
	sim7600.parent.simGetNwtype = (simGetNwtype) &SIM7600_getNetworkType;
 8001122:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <SIM_Init+0x18c>)
 8001124:	4a43      	ldr	r2, [pc, #268]	; (8001234 <SIM_Init+0x1d0>)
 8001126:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	sim7600.parent.simGetSimPhone = (simGetSimPhone) &SIM7600_getSimPhone;
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <SIM_Init+0x18c>)
 800112c:	4a42      	ldr	r2, [pc, #264]	; (8001238 <SIM_Init+0x1d4>)
 800112e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	sim7600.parent.simGetIMEI = (simGetIMEI) &SIM7600_getIMEI;
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <SIM_Init+0x18c>)
 8001134:	4a41      	ldr	r2, [pc, #260]	; (800123c <SIM_Init+0x1d8>)
 8001136:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	sim7600.parent.simGetLocalTime = (simGetLocalTime) &SIM7600_getLocalTime;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <SIM_Init+0x18c>)
 800113c:	4a40      	ldr	r2, [pc, #256]	; (8001240 <SIM_Init+0x1dc>)
 800113e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	sim7600.parent.simGetFileSize = (simGetFileSize) &SIM7600_getFileSize;
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <SIM_Init+0x18c>)
 8001144:	4a3f      	ldr	r2, [pc, #252]	; (8001244 <SIM_Init+0x1e0>)
 8001146:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	sim7600.parent.simDeleteFile = (simDeleteFile) &SIM7600_deleteFile;
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <SIM_Init+0x18c>)
 800114c:	4a3e      	ldr	r2, [pc, #248]	; (8001248 <SIM_Init+0x1e4>)
 800114e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	sim7600.parent.simSetLocalTimeAuto =
 8001152:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <SIM_Init+0x18c>)
 8001154:	4a3d      	ldr	r2, [pc, #244]	; (800124c <SIM_Init+0x1e8>)
 8001156:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			(simSetLocalTimeAuto) &SIM7600_setLocalTimeAuto;
	sim7600.parent.simSetLocalTimeManual =
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SIM_Init+0x18c>)
 800115c:	4a3c      	ldr	r2, [pc, #240]	; (8001250 <SIM_Init+0x1ec>)
 800115e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			(simSetLocalTimeManual) &SIM7600_setLocalTimeManual;
	sim7600.parent.simSelectPhonebookMem =
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <SIM_Init+0x18c>)
 8001164:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <SIM_Init+0x1f0>)
 8001166:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
			(simSelectPhonebookMem) &SIM7600_selectPhonebookMem;
	sim7600.parent.simSavePhonebook = (simSavePhonebook) &SIM7600_savePhonebook;
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <SIM_Init+0x18c>)
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <SIM_Init+0x1f4>)
 800116e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	sim7600.parent.simReadPhonebook = (simReadPhonebook) &SIM7600_readPhonebook;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <SIM_Init+0x18c>)
 8001174:	4a39      	ldr	r2, [pc, #228]	; (800125c <SIM_Init+0x1f8>)
 8001176:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	sim7600.parent.simFindPhonebook = (simFindPhonebook) &SIM7600_findPhonebook;
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <SIM_Init+0x18c>)
 800117c:	4a38      	ldr	r2, [pc, #224]	; (8001260 <SIM_Init+0x1fc>)
 800117e:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	sim7600.parent.simSendHTTP = (simSendHTTP) &SIM7600_sendHTTP;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <SIM_Init+0x18c>)
 8001184:	4a37      	ldr	r2, [pc, #220]	; (8001264 <SIM_Init+0x200>)
 8001186:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	sim7600.parent.simGetFileHTTP = (simGetFileHTTP) &SIM7600_getFileHTTP;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <SIM_Init+0x18c>)
 800118c:	4a36      	ldr	r2, [pc, #216]	; (8001268 <SIM_Init+0x204>)
 800118e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	/* Khởi tạo module SIM */
	if (THT_OK != SIM_init(simPtr)) {
 8001192:	4b16      	ldr	r3, [pc, #88]	; (80011ec <SIM_Init+0x188>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f005 f9c2 	bl	8006520 <SIM_init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <SIM_Init+0x146>
		printf("Sim init fail\n");
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <SIM_Init+0x208>)
 80011a4:	f008 f906 	bl	80093b4 <puts>
		SIM_getLocalTime(simPtr, pTime, 22);
		SIM_getData(simPtr,
				SIM_DR_IMEI | SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_SIMPHONE
						| SIM_DR_TEMP, &simData);
	}
}
 80011a8:	e01b      	b.n	80011e2 <SIM_Init+0x17e>
		printf("Sim init OK");
 80011aa:	4831      	ldr	r0, [pc, #196]	; (8001270 <SIM_Init+0x20c>)
 80011ac:	f008 f894 	bl	80092d8 <iprintf>
		SIM_setFunction(simPtr, SIM_MODE_FULL);
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <SIM_Init+0x188>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2101      	movs	r1, #1
 80011b6:	4618      	mov	r0, r3
 80011b8:	f005 f9c5 	bl	8006546 <SIM_setFunction>
		SIM_setLocalTimeAuto(simPtr);
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <SIM_Init+0x188>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fa07 	bl	80065d4 <SIM_setLocalTimeAuto>
		SIM_getLocalTime(simPtr, pTime, 22);
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <SIM_Init+0x188>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2216      	movs	r2, #22
 80011cc:	4929      	ldr	r1, [pc, #164]	; (8001274 <SIM_Init+0x210>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f005 f9e5 	bl	800659e <SIM_getLocalTime>
		SIM_getData(simPtr,
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SIM_Init+0x188>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <SIM_Init+0x214>)
 80011da:	212f      	movs	r1, #47	; 0x2f
 80011dc:	4618      	mov	r0, r3
 80011de:	f005 f93b 	bl	8006458 <SIM_getData>
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	0800e4b8 	.word	0x0800e4b8
 80011ec:	2000049c 	.word	0x2000049c
 80011f0:	20000a1c 	.word	0x20000a1c
 80011f4:	200002e4 	.word	0x200002e4
 80011f8:	2000025c 	.word	0x2000025c
 80011fc:	40020800 	.word	0x40020800
 8001200:	08006791 	.word	0x08006791
 8001204:	080068d5 	.word	0x080068d5
 8001208:	080069a9 	.word	0x080069a9
 800120c:	080069f9 	.word	0x080069f9
 8001210:	08006c29 	.word	0x08006c29
 8001214:	08006c85 	.word	0x08006c85
 8001218:	08006db1 	.word	0x08006db1
 800121c:	08006e99 	.word	0x08006e99
 8001220:	08006fa9 	.word	0x08006fa9
 8001224:	08007221 	.word	0x08007221
 8001228:	080072b1 	.word	0x080072b1
 800122c:	08007365 	.word	0x08007365
 8001230:	080074e5 	.word	0x080074e5
 8001234:	080073d9 	.word	0x080073d9
 8001238:	08007551 	.word	0x08007551
 800123c:	0800775d 	.word	0x0800775d
 8001240:	080077f9 	.word	0x080077f9
 8001244:	080078b9 	.word	0x080078b9
 8001248:	08007979 	.word	0x08007979
 800124c:	080079dd 	.word	0x080079dd
 8001250:	08007ad9 	.word	0x08007ad9
 8001254:	08007b49 	.word	0x08007b49
 8001258:	08007b85 	.word	0x08007b85
 800125c:	08007c05 	.word	0x08007c05
 8001260:	08007ca5 	.word	0x08007ca5
 8001264:	08007d09 	.word	0x08007d09
 8001268:	0800817d 	.word	0x0800817d
 800126c:	0800dc50 	.word	0x0800dc50
 8001270:	0800dc60 	.word	0x0800dc60
 8001274:	200009b4 	.word	0x200009b4
 8001278:	2000096c 	.word	0x2000096c

0800127c <LORA_begin>:

void LORA_begin() {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	lora = (LORA_HandleTypeDef*) &rfm95w;
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <LORA_begin+0x80>)
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <LORA_begin+0x84>)
 8001284:	601a      	str	r2, [r3, #0]

	rfm95w.resetPort = RFM95_RS_GPIO_Port;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <LORA_begin+0x84>)
 8001288:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <LORA_begin+0x88>)
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
	rfm95w.resetPin = RFM95_RS_Pin;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <LORA_begin+0x84>)
 800128e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001292:	851a      	strh	r2, [r3, #40]	; 0x28
	rfm95w.nssPort = RFM95_NSS_GPIO_Port;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <LORA_begin+0x84>)
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <LORA_begin+0x88>)
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
	rfm95w.nssPin = RFM95_NSS_Pin;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <LORA_begin+0x84>)
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	855a      	strh	r2, [r3, #42]	; 0x2a
	rfm95w.dio0Port = RFM95_DIO0_GPIO_Port;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <LORA_begin+0x84>)
 80012a4:	4a18      	ldr	r2, [pc, #96]	; (8001308 <LORA_begin+0x8c>)
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c
	rfm95w.dio0 = RFM95_DIO0_Pin;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <LORA_begin+0x84>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	859a      	strh	r2, [r3, #44]	; 0x2c
	rfm95w.hspi = &hspi2;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <LORA_begin+0x84>)
 80012b0:	4a16      	ldr	r2, [pc, #88]	; (800130c <LORA_begin+0x90>)
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24

	rfm95w.parent.init = (loraInit) &RFM95_init;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <LORA_begin+0x84>)
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <LORA_begin+0x94>)
 80012b8:	60da      	str	r2, [r3, #12]
	rfm95w.parent.transmit = (loraTransmit) &RFM95_transmit;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <LORA_begin+0x84>)
 80012bc:	4a15      	ldr	r2, [pc, #84]	; (8001314 <LORA_begin+0x98>)
 80012be:	611a      	str	r2, [r3, #16]
	rfm95w.parent.receive = (loraReceive) &RFM95_receiveContinuous;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <LORA_begin+0x84>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <LORA_begin+0x9c>)
 80012c4:	615a      	str	r2, [r3, #20]
	rfm95w.parent.startReceiveIT =
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <LORA_begin+0x84>)
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <LORA_begin+0xa0>)
 80012ca:	619a      	str	r2, [r3, #24]
			(loraStartReceiveOnIRQ) &RFM95_startReceiveIT;
	rfm95w.parent.receiveIT = (loraReceiveOnIRQ) &RFM95_receiveIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <LORA_begin+0x84>)
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <LORA_begin+0xa4>)
 80012d0:	61da      	str	r2, [r3, #28]

	rfm95w.parent.getRSSI = (loraGetRSSI) &RFM95_getRSSI;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LORA_begin+0x84>)
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <LORA_begin+0xa8>)
 80012d6:	621a      	str	r2, [r3, #32]

	if (LORA_init(lora) == THT_OK) {
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LORA_begin+0x80>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 f947 	bl	8005570 <LORA_init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <LORA_begin+0x74>
		printf("LORA OK");
 80012e8:	480f      	ldr	r0, [pc, #60]	; (8001328 <LORA_begin+0xac>)
 80012ea:	f007 fff5 	bl	80092d8 <iprintf>
	} else {
		printf("LORA ERROR");
	}
}
 80012ee:	e002      	b.n	80012f6 <LORA_begin+0x7a>
		printf("LORA ERROR");
 80012f0:	480e      	ldr	r0, [pc, #56]	; (800132c <LORA_begin+0xb0>)
 80012f2:	f007 fff1 	bl	80092d8 <iprintf>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200003d0 	.word	0x200003d0
 8001300:	20000384 	.word	0x20000384
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40020400 	.word	0x40020400
 800130c:	20000204 	.word	0x20000204
 8001310:	08006377 	.word	0x08006377
 8001314:	08005cb9 	.word	0x08005cb9
 8001318:	08005fdf 	.word	0x08005fdf
 800131c:	08005e11 	.word	0x08005e11
 8001320:	08005ee1 	.word	0x08005ee1
 8001324:	080062d9 	.word	0x080062d9
 8001328:	0800dc6c 	.word	0x0800dc6c
 800132c:	0800dc74 	.word	0x0800dc74

08001330 <processingValue>:
void processingValue() {
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b0b5      	sub	sp, #212	; 0xd4
 8001334:	af10      	add	r7, sp, #64	; 0x40
	char value[98] = { 0 };
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133e:	225e      	movs	r2, #94	; 0x5e
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f008 f96a 	bl	800961c <memset>
	memset(value, '\0', 98);
 8001348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800134c:	2262      	movs	r2, #98	; 0x62
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f008 f963 	bl	800961c <memset>
	memcpy(&value, &msgResLoRa[2], 98);
 8001356:	4a65      	ldr	r2, [pc, #404]	; (80014ec <processingValue+0x1bc>)
 8001358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135c:	1c91      	adds	r1, r2, #2
 800135e:	2262      	movs	r2, #98	; 0x62
 8001360:	4618      	mov	r0, r3
 8001362:	f008 fa5a 	bl	800981a <memcpy>

	CosF = strtok(value, ",");
 8001366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136a:	4961      	ldr	r1, [pc, #388]	; (80014f0 <processingValue+0x1c0>)
 800136c:	4618      	mov	r0, r3
 800136e:	f008 f96b 	bl	8009648 <strtok>
 8001372:	4603      	mov	r3, r0
 8001374:	4a5f      	ldr	r2, [pc, #380]	; (80014f4 <processingValue+0x1c4>)
 8001376:	6013      	str	r3, [r2, #0]
	Voltage = strtok(NULL, ",");
 8001378:	495d      	ldr	r1, [pc, #372]	; (80014f0 <processingValue+0x1c0>)
 800137a:	2000      	movs	r0, #0
 800137c:	f008 f964 	bl	8009648 <strtok>
 8001380:	4603      	mov	r3, r0
 8001382:	4a5d      	ldr	r2, [pc, #372]	; (80014f8 <processingValue+0x1c8>)
 8001384:	6013      	str	r3, [r2, #0]
	Current = strtok(NULL, ",");
 8001386:	495a      	ldr	r1, [pc, #360]	; (80014f0 <processingValue+0x1c0>)
 8001388:	2000      	movs	r0, #0
 800138a:	f008 f95d 	bl	8009648 <strtok>
 800138e:	4603      	mov	r3, r0
 8001390:	4a5a      	ldr	r2, [pc, #360]	; (80014fc <processingValue+0x1cc>)
 8001392:	6013      	str	r3, [r2, #0]
	Frequency = strtok(NULL, ",");
 8001394:	4956      	ldr	r1, [pc, #344]	; (80014f0 <processingValue+0x1c0>)
 8001396:	2000      	movs	r0, #0
 8001398:	f008 f956 	bl	8009648 <strtok>
 800139c:	4603      	mov	r3, r0
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <processingValue+0x1d0>)
 80013a0:	6013      	str	r3, [r2, #0]
	ActivePower = strtok(NULL, ",");
 80013a2:	4953      	ldr	r1, [pc, #332]	; (80014f0 <processingValue+0x1c0>)
 80013a4:	2000      	movs	r0, #0
 80013a6:	f008 f94f 	bl	8009648 <strtok>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a55      	ldr	r2, [pc, #340]	; (8001504 <processingValue+0x1d4>)
 80013ae:	6013      	str	r3, [r2, #0]
	ReactivePower = strtok(NULL, ",");
 80013b0:	494f      	ldr	r1, [pc, #316]	; (80014f0 <processingValue+0x1c0>)
 80013b2:	2000      	movs	r0, #0
 80013b4:	f008 f948 	bl	8009648 <strtok>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a53      	ldr	r2, [pc, #332]	; (8001508 <processingValue+0x1d8>)
 80013bc:	6013      	str	r3, [r2, #0]
	AvP = strtok(NULL, ",");
 80013be:	494c      	ldr	r1, [pc, #304]	; (80014f0 <processingValue+0x1c0>)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f008 f941 	bl	8009648 <strtok>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <processingValue+0x1dc>)
 80013ca:	6013      	str	r3, [r2, #0]
	AvQ = strtok(NULL, ",");
 80013cc:	4948      	ldr	r1, [pc, #288]	; (80014f0 <processingValue+0x1c0>)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f008 f93a 	bl	8009648 <strtok>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <processingValue+0x1e0>)
 80013d8:	6013      	str	r3, [r2, #0]
	CTT1 = strtok(NULL, ",");
 80013da:	4945      	ldr	r1, [pc, #276]	; (80014f0 <processingValue+0x1c0>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f008 f933 	bl	8009648 <strtok>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a4b      	ldr	r2, [pc, #300]	; (8001514 <processingValue+0x1e4>)
 80013e6:	6013      	str	r3, [r2, #0]
	CTT2 = strtok(NULL, ",");
 80013e8:	4941      	ldr	r1, [pc, #260]	; (80014f0 <processingValue+0x1c0>)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f008 f92c 	bl	8009648 <strtok>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a49      	ldr	r2, [pc, #292]	; (8001518 <processingValue+0x1e8>)
 80013f4:	6013      	str	r3, [r2, #0]
	CTT3 = strtok(NULL, ",");
 80013f6:	493e      	ldr	r1, [pc, #248]	; (80014f0 <processingValue+0x1c0>)
 80013f8:	2000      	movs	r0, #0
 80013fa:	f008 f925 	bl	8009648 <strtok>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a46      	ldr	r2, [pc, #280]	; (800151c <processingValue+0x1ec>)
 8001402:	6013      	str	r3, [r2, #0]
	CTT4 = strtok(NULL, ",");
 8001404:	493a      	ldr	r1, [pc, #232]	; (80014f0 <processingValue+0x1c0>)
 8001406:	2000      	movs	r0, #0
 8001408:	f008 f91e 	bl	8009648 <strtok>
 800140c:	4603      	mov	r3, r0
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <processingValue+0x1f0>)
 8001410:	6013      	str	r3, [r2, #0]
	coil1 = strtok(NULL, ",");
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <processingValue+0x1c0>)
 8001414:	2000      	movs	r0, #0
 8001416:	f008 f917 	bl	8009648 <strtok>
 800141a:	4603      	mov	r3, r0
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <processingValue+0x1f4>)
 800141e:	6013      	str	r3, [r2, #0]
	coil2 = strtok(NULL, ",");
 8001420:	4933      	ldr	r1, [pc, #204]	; (80014f0 <processingValue+0x1c0>)
 8001422:	2000      	movs	r0, #0
 8001424:	f008 f910 	bl	8009648 <strtok>
 8001428:	4603      	mov	r3, r0
 800142a:	4a3f      	ldr	r2, [pc, #252]	; (8001528 <processingValue+0x1f8>)
 800142c:	6013      	str	r3, [r2, #0]
	coil3 = strtok(NULL, ",");
 800142e:	4930      	ldr	r1, [pc, #192]	; (80014f0 <processingValue+0x1c0>)
 8001430:	2000      	movs	r0, #0
 8001432:	f008 f909 	bl	8009648 <strtok>
 8001436:	4603      	mov	r3, r0
 8001438:	4a3c      	ldr	r2, [pc, #240]	; (800152c <processingValue+0x1fc>)
 800143a:	6013      	str	r3, [r2, #0]
	coil4 = strtok(NULL, ",");
 800143c:	492c      	ldr	r1, [pc, #176]	; (80014f0 <processingValue+0x1c0>)
 800143e:	2000      	movs	r0, #0
 8001440:	f008 f902 	bl	8009648 <strtok>
 8001444:	4603      	mov	r3, r0
 8001446:	4a3a      	ldr	r2, [pc, #232]	; (8001530 <processingValue+0x200>)
 8001448:	6013      	str	r3, [r2, #0]
	sprintf(http.data, "{\"TIME\":\"%s\""
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <processingValue+0x1c4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <processingValue+0x1c8>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	4b29      	ldr	r3, [pc, #164]	; (80014fc <processingValue+0x1cc>)
 8001456:	681c      	ldr	r4, [r3, #0]
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <processingValue+0x1d0>)
 800145a:	681d      	ldr	r5, [r3, #0]
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <processingValue+0x1d4>)
 800145e:	681e      	ldr	r6, [r3, #0]
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <processingValue+0x1d8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	623a      	str	r2, [r7, #32]
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <processingValue+0x1dc>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	61f9      	str	r1, [r7, #28]
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <processingValue+0x1e0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	4b28      	ldr	r3, [pc, #160]	; (8001514 <processingValue+0x1e4>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	617a      	str	r2, [r7, #20]
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <processingValue+0x1e8>)
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	6139      	str	r1, [r7, #16]
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <processingValue+0x1ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <processingValue+0x1f0>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <processingValue+0x1f4>)
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	6079      	str	r1, [r7, #4]
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <processingValue+0x1f8>)
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <processingValue+0x1fc>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <processingValue+0x200>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	930e      	str	r3, [sp, #56]	; 0x38
 800149e:	920d      	str	r2, [sp, #52]	; 0x34
 80014a0:	910c      	str	r1, [sp, #48]	; 0x30
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	910b      	str	r1, [sp, #44]	; 0x2c
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	920a      	str	r2, [sp, #40]	; 0x28
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	9309      	str	r3, [sp, #36]	; 0x24
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	9108      	str	r1, [sp, #32]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	9207      	str	r2, [sp, #28]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	9306      	str	r3, [sp, #24]
 80014ba:	69f9      	ldr	r1, [r7, #28]
 80014bc:	9105      	str	r1, [sp, #20]
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	9204      	str	r2, [sp, #16]
 80014c2:	9603      	str	r6, [sp, #12]
 80014c4:	9502      	str	r5, [sp, #8]
 80014c6:	9401      	str	r4, [sp, #4]
 80014c8:	9000      	str	r0, [sp, #0]
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <processingValue+0x204>)
 80014ce:	491a      	ldr	r1, [pc, #104]	; (8001538 <processingValue+0x208>)
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <processingValue+0x20c>)
 80014d2:	f007 ffab 	bl	800942c <siprintf>
			",\"Coil 2\":\"%s\""
			",\"Coil 3\":\"%s\""
			",\"Coil 4\":\"%s\"}", pTime, CosF, Voltage, Current, Frequency,
			ActivePower, ReactivePower, AvP, AvQ, CTT1, CTT2, CTT3, CTT4, coil1,
			coil2, coil3, coil4);
	SIM_sendHTTP(simPtr, &http);
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <processingValue+0x210>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	491a      	ldr	r1, [pc, #104]	; (8001544 <processingValue+0x214>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f005 f88d 	bl	80065fc <SIM_sendHTTP>
}
 80014e2:	bf00      	nop
 80014e4:	3794      	adds	r7, #148	; 0x94
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003d4 	.word	0x200003d4
 80014f0:	0800dc80 	.word	0x0800dc80
 80014f4:	20000344 	.word	0x20000344
 80014f8:	20000348 	.word	0x20000348
 80014fc:	2000034c 	.word	0x2000034c
 8001500:	20000350 	.word	0x20000350
 8001504:	20000354 	.word	0x20000354
 8001508:	20000358 	.word	0x20000358
 800150c:	2000035c 	.word	0x2000035c
 8001510:	20000360 	.word	0x20000360
 8001514:	20000364 	.word	0x20000364
 8001518:	20000368 	.word	0x20000368
 800151c:	2000036c 	.word	0x2000036c
 8001520:	20000370 	.word	0x20000370
 8001524:	20000374 	.word	0x20000374
 8001528:	20000378 	.word	0x20000378
 800152c:	2000037c 	.word	0x2000037c
 8001530:	20000380 	.word	0x20000380
 8001534:	200009b4 	.word	0x200009b4
 8001538:	0800dc84 	.word	0x0800dc84
 800153c:	2000057d 	.word	0x2000057d
 8001540:	2000049c 	.word	0x2000049c
 8001544:	200004a0 	.word	0x200004a0

08001548 <loraHandle>:

void loraHandle() {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0

	messLora[0] = 0x01;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <loraHandle+0x90>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
	messLora[1] = 0x02;
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <loraHandle+0x90>)
 8001556:	2202      	movs	r2, #2
 8001558:	705a      	strb	r2, [r3, #1]

	messLora[LORA_REQUEST_SIZE - 1] = THT_CRC8XOR((uint8_t*) messLora,
 800155a:	2163      	movs	r1, #99	; 0x63
 800155c:	481e      	ldr	r0, [pc, #120]	; (80015d8 <loraHandle+0x90>)
 800155e:	f005 f8f7 	bl	8006750 <THT_CRC8XOR>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <loraHandle+0x90>)
 8001568:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	LORA_REQUEST_SIZE - 1);

	LORA_startReceiveIT(lora);
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <loraHandle+0x94>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f004 f80f 	bl	8005594 <LORA_startReceiveIT>
	uint32_t timeStap = HAL_GetTick();
 8001576:	f000 fccd 	bl	8001f14 <HAL_GetTick>
 800157a:	6078      	str	r0, [r7, #4]
	while (HAL_GetTick() - timeStap < 60000) {
 800157c:	e01c      	b.n	80015b8 <loraHandle+0x70>
		if (irqLoRaFlag) {
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <loraHandle+0x98>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d018      	beq.n	80015b8 <loraHandle+0x70>
			irqLoRaFlag = 0;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <loraHandle+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
			LORA_receiveIT(lora, msgResLoRa, LORA_RESPONSE_SIZE);
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <loraHandle+0x94>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2264      	movs	r2, #100	; 0x64
 8001592:	4914      	ldr	r1, [pc, #80]	; (80015e4 <loraHandle+0x9c>)
 8001594:	4618      	mov	r0, r3
 8001596:	f004 f80f 	bl	80055b8 <LORA_receiveIT>
			if (msgResLoRa[0] == messLora[0] && msgResLoRa[1] == messLora[1]) {
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <loraHandle+0x9c>)
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <loraHandle+0x90>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d112      	bne.n	80015cc <loraHandle+0x84>
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <loraHandle+0x9c>)
 80015a8:	785a      	ldrb	r2, [r3, #1]
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <loraHandle+0x90>)
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d10c      	bne.n	80015cc <loraHandle+0x84>
				processingValue();
 80015b2:	f7ff febd 	bl	8001330 <processingValue>
			}
			break;
 80015b6:	e009      	b.n	80015cc <loraHandle+0x84>
	while (HAL_GetTick() - timeStap < 60000) {
 80015b8:	f000 fcac 	bl	8001f14 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d9d9      	bls.n	800157e <loraHandle+0x36>
		}
	}
}
 80015ca:	e000      	b.n	80015ce <loraHandle+0x86>
			break;
 80015cc:	bf00      	nop
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000438 	.word	0x20000438
 80015dc:	200003d0 	.word	0x200003d0
 80015e0:	20000a18 	.word	0x20000a18
 80015e4:	200003d4 	.word	0x200003d4

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ec:	f000 fc2c 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f0:	f000 f820 	bl	8001634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f4:	f000 f926 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f8:	f000 f904 	bl	8001804 <MX_DMA_Init>
  MX_SPI2_Init();
 80015fc:	f000 f878 	bl	80016f0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001600:	f000 f8ac 	bl	800175c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001604:	f000 f8d4 	bl	80017b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	SIM_Init();
 8001608:	f7ff fd2c 	bl	8001064 <SIM_Init>
	HTTP_init(&http,
 800160c:	2301      	movs	r3, #1
 800160e:	223d      	movs	r2, #61	; 0x3d
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <main+0x44>)
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <main+0x48>)
 8001614:	f004 fee4 	bl	80063e0 <HTTP_init>
			"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json",
			strlen(
					"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json"),
			HTTP_URL_URI_RESULT);
	LORA_begin();
 8001618:	f7ff fe30 	bl	800127c <LORA_begin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		loraHandle();
 800161c:	f7ff ff94 	bl	8001548 <loraHandle>
		HAL_Delay(2000);
 8001620:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001624:	f000 fc82 	bl	8001f2c <HAL_Delay>
		loraHandle();
 8001628:	e7f8      	b.n	800161c <main+0x34>
 800162a:	bf00      	nop
 800162c:	0800dd74 	.word	0x0800dd74
 8001630:	200004a0 	.word	0x200004a0

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f007 ffea 	bl	800961c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <SystemClock_Config+0xb4>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a21      	ldr	r2, [pc, #132]	; (80016e8 <SystemClock_Config+0xb4>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <SystemClock_Config+0xb4>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	2300      	movs	r3, #0
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <SystemClock_Config+0xb8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <SystemClock_Config+0xb8>)
 800167e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <SystemClock_Config+0xb8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001690:	2302      	movs	r3, #2
 8001692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001694:	2301      	movs	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2310      	movs	r3, #16
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fb2f 	bl	8002d08 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80016b0:	f000 f954 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fd92 	bl	80031f8 <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80016da:	f000 f93f 	bl	800195c <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	; 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40007000 	.word	0x40007000

080016f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_SPI2_Init+0x64>)
 80016f6:	4a18      	ldr	r2, [pc, #96]	; (8001758 <MX_SPI2_Init+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_SPI2_Init+0x64>)
 80016fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001700:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_SPI2_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_SPI2_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_SPI2_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_SPI2_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_SPI2_Init+0x64>)
 800171c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001720:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_SPI2_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_SPI2_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_SPI2_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_SPI2_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_SPI2_Init+0x64>)
 800173c:	220a      	movs	r2, #10
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_SPI2_Init+0x64>)
 8001742:	f001 ff39 	bl	80035b8 <HAL_SPI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800174c:	f000 f906 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000204 	.word	0x20000204
 8001758:	40003800 	.word	0x40003800

0800175c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_USART2_UART_Init+0x50>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_USART2_UART_Init+0x4c>)
 8001794:	f002 fcb8 	bl	8004108 <HAL_UART_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179e:	f000 f8dd 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000025c 	.word	0x2000025c
 80017ac:	40004400 	.word	0x40004400

080017b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_USART6_UART_Init+0x50>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_USART6_UART_Init+0x4c>)
 80017e8:	f002 fc8e 	bl	8004108 <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017f2:	f000 f8b3 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002a0 	.word	0x200002a0
 8001800:	40011400 	.word	0x40011400

08001804 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_DMA_Init+0x3c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <MX_DMA_Init+0x3c>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_DMA_Init+0x3c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2010      	movs	r0, #16
 800182c:	f000 fc7d 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001830:	2010      	movs	r0, #16
 8001832:	f000 fc96 	bl	8002162 <HAL_NVIC_EnableIRQ>

}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <MX_GPIO_Init+0x108>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a3a      	ldr	r2, [pc, #232]	; (800194c <MX_GPIO_Init+0x108>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <MX_GPIO_Init+0x108>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <MX_GPIO_Init+0x108>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a33      	ldr	r2, [pc, #204]	; (800194c <MX_GPIO_Init+0x108>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <MX_GPIO_Init+0x108>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <MX_GPIO_Init+0x108>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a2c      	ldr	r2, [pc, #176]	; (800194c <MX_GPIO_Init+0x108>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <MX_GPIO_Init+0x108>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <MX_GPIO_Init+0x108>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a25      	ldr	r2, [pc, #148]	; (800194c <MX_GPIO_Init+0x108>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_GPIO_Init+0x108>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SIM7600_PWR_Pin|SIM7600_RESET_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2114      	movs	r1, #20
 80018ce:	4820      	ldr	r0, [pc, #128]	; (8001950 <MX_GPIO_Init+0x10c>)
 80018d0:	f001 f9e8 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RFM95_RS_Pin|RFM95_NSS_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80018da:	481e      	ldr	r0, [pc, #120]	; (8001954 <MX_GPIO_Init+0x110>)
 80018dc:	f001 f9e2 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SIM7600_PWR_Pin SIM7600_RESET_Pin */
  GPIO_InitStruct.Pin = SIM7600_PWR_Pin|SIM7600_RESET_Pin;
 80018e0:	2314      	movs	r3, #20
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4816      	ldr	r0, [pc, #88]	; (8001950 <MX_GPIO_Init+0x10c>)
 80018f8:	f001 f850 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM95_DIO0_Pin */
  GPIO_InitStruct.Pin = RFM95_DIO0_Pin;
 80018fc:	2302      	movs	r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001900:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RFM95_DIO0_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4811      	ldr	r0, [pc, #68]	; (8001958 <MX_GPIO_Init+0x114>)
 8001912:	f001 f843 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_RS_Pin RFM95_NSS_Pin */
  GPIO_InitStruct.Pin = RFM95_RS_Pin|RFM95_NSS_Pin;
 8001916:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800191a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_GPIO_Init+0x110>)
 8001930:	f001 f834 	bl	800299c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2007      	movs	r0, #7
 800193a:	f000 fbf6 	bl	800212a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800193e:	2007      	movs	r0, #7
 8001940:	f000 fc0f 	bl	8002162 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40020400 	.word	0x40020400

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001964:	e7fe      	b.n	8001964 <Error_Handler+0x8>
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a19      	ldr	r2, [pc, #100]	; (8001a3c <HAL_SPI_MspInit+0x84>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12c      	bne.n	8001a34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_SPI_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a24:	2305      	movs	r3, #5
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4805      	ldr	r0, [pc, #20]	; (8001a44 <HAL_SPI_MspInit+0x8c>)
 8001a30:	f000 ffb4 	bl	800299c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40003800 	.word	0x40003800
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_UART_MspInit+0x154>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d162      	bne.n	8001b30 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	4839      	ldr	r0, [pc, #228]	; (8001ba4 <HAL_UART_MspInit+0x15c>)
 8001abe:	f000 ff6d 	bl	800299c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001ac4:	4a39      	ldr	r2, [pc, #228]	; (8001bac <HAL_UART_MspInit+0x164>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001aca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ace:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad0:	4b35      	ldr	r3, [pc, #212]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad6:	4b34      	ldr	r3, [pc, #208]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001adc:	4b32      	ldr	r3, [pc, #200]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aea:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001af0:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b02:	4829      	ldr	r0, [pc, #164]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b04:	f000 fb48 	bl	8002198 <HAL_DMA_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001b0e:	f7ff ff25 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b16:	639a      	str	r2, [r3, #56]	; 0x38
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_UART_MspInit+0x160>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2100      	movs	r1, #0
 8001b22:	2026      	movs	r0, #38	; 0x26
 8001b24:	f000 fb01 	bl	800212a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b28:	2026      	movs	r0, #38	; 0x26
 8001b2a:	f000 fb1a 	bl	8002162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b2e:	e030      	b.n	8001b92 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART6)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_UART_MspInit+0x168>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_UART_MspInit+0x158>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b72:	23c0      	movs	r3, #192	; 0xc0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b82:	2308      	movs	r3, #8
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4809      	ldr	r0, [pc, #36]	; (8001bb4 <HAL_UART_MspInit+0x16c>)
 8001b8e:	f000 ff05 	bl	800299c <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	3730      	adds	r7, #48	; 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40004400 	.word	0x40004400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	200002e4 	.word	0x200002e4
 8001bac:	40026088 	.word	0x40026088
 8001bb0:	40011400 	.word	0x40011400
 8001bb4:	40020800 	.word	0x40020800

08001bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <NMI_Handler+0x4>

08001bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c04:	f000 f972 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM95_DIO0_Pin);
 8001c10:	2002      	movs	r0, #2
 8001c12:	f001 f861 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA1_Stream5_IRQHandler+0x10>)
 8001c22:	f000 fc51 	bl	80024c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200002e4 	.word	0x200002e4

08001c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <USART2_IRQHandler+0x10>)
 8001c36:	f002 fbab 	bl	8004390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000025c 	.word	0x2000025c

08001c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_kill>:

int _kill(int pid, int sig)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c5e:	f007 fdaf 	bl	80097c0 <__errno>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2216      	movs	r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
  return -1;
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <_exit>:

void _exit (int status)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffe7 	bl	8001c54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c86:	e7fe      	b.n	8001c86 <_exit+0x12>

08001c88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
  }

  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf1      	blt.n	8001cd4 <_write+0x12>
  }
  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f007 fd14 	bl	80097c0 <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20020000 	.word	0x20020000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	20000ce8 	.word	0x20000ce8
 8001dcc:	20000e40 	.word	0x20000e40

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dfa:	490e      	ldr	r1, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e00:	e002      	b.n	8001e08 <LoopCopyDataInit>

08001e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e06:	3304      	adds	r3, #4

08001e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e0c:	d3f9      	bcc.n	8001e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e10:	4c0b      	ldr	r4, [pc, #44]	; (8001e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e14:	e001      	b.n	8001e1a <LoopFillZerobss>

08001e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e18:	3204      	adds	r2, #4

08001e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e1c:	d3fb      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e1e:	f7ff ffd7 	bl	8001dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f007 fcd3 	bl	80097cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff fbdf 	bl	80015e8 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001e38:	0800e9b0 	.word	0x0800e9b0
  ldr r2, =_sbss
 8001e3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001e40:	20000e3c 	.word	0x20000e3c

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_Init+0x40>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <HAL_Init+0x40>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_Init+0x40>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f94f 	bl	8002114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 f808 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff fd74 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f967 	bl	800217e <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f92f 	bl	800212a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	; (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000cec 	.word	0x20000cec

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000cec 	.word	0x20000cec

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_Delay+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <__NVIC_EnableIRQ+0x38>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	; (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	; (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e0:	d301      	bcc.n	80020e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00f      	b.n	8002106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <SysTick_Config+0x40>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ee:	210f      	movs	r1, #15
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f7ff ff8e 	bl	8002014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <SysTick_Config+0x40>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <SysTick_Config+0x40>)
 8002100:	2207      	movs	r2, #7
 8002102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	e000e010 	.word	0xe000e010

08002114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff29 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800213c:	f7ff ff3e 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 8002140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	6978      	ldr	r0, [r7, #20]
 8002148:	f7ff ff8e 	bl	8002068 <NVIC_EncodePriority>
 800214c:	4602      	mov	r2, r0
 800214e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff5d 	bl	8002014 <__NVIC_SetPriority>
}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff31 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ffa2 	bl	80020d0 <SysTick_Config>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff feb6 	bl	8001f14 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e099      	b.n	80022e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	e00f      	b.n	80021f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d6:	f7ff fe9d 	bl	8001f14 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d908      	bls.n	80021f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e078      	b.n	80022e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e8      	bne.n	80021d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_DMA_Init+0x158>)
 8002210:	4013      	ands	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b04      	cmp	r3, #4
 800224e:	d107      	bne.n	8002260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	4313      	orrs	r3, r2
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f023 0307 	bic.w	r3, r3, #7
 8002276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4313      	orrs	r3, r2
 8002280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2b04      	cmp	r3, #4
 8002288:	d117      	bne.n	80022ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00e      	beq.n	80022ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb01 	bl	80028a4 <DMA_CheckFifoParam>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022b6:	2301      	movs	r3, #1
 80022b8:	e016      	b.n	80022e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fab8 	bl	8002838 <DMA_CalcBaseAndBitshift>
 80022c8:	4603      	mov	r3, r0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	f010803f 	.word	0xf010803f

080022f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_DMA_Start_IT+0x26>
 8002316:	2302      	movs	r3, #2
 8002318:	e040      	b.n	800239c <HAL_DMA_Start_IT+0xa8>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d12f      	bne.n	800238e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fa4a 	bl	80027dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234c:	223f      	movs	r2, #63	; 0x3f
 800234e:	409a      	lsls	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0216 	orr.w	r2, r2, #22
 8002362:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0208 	orr.w	r2, r2, #8
 800237a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e005      	b.n	800239a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002396:	2302      	movs	r3, #2
 8002398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800239a:	7dfb      	ldrb	r3, [r7, #23]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023b2:	f7ff fdaf 	bl	8001f14 <HAL_GetTick>
 80023b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d008      	beq.n	80023d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2280      	movs	r2, #128	; 0x80
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e052      	b.n	800247c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0216 	bic.w	r2, r2, #22
 80023e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d103      	bne.n	8002406 <HAL_DMA_Abort+0x62>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002426:	e013      	b.n	8002450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002428:	f7ff fd74 	bl	8001f14 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b05      	cmp	r3, #5
 8002434:	d90c      	bls.n	8002450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2203      	movs	r2, #3
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e015      	b.n	800247c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1e4      	bne.n	8002428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	223f      	movs	r2, #63	; 0x3f
 8002464:	409a      	lsls	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2280      	movs	r2, #128	; 0x80
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00c      	b.n	80024bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2205      	movs	r2, #5
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d4:	4b8e      	ldr	r3, [pc, #568]	; (8002710 <HAL_DMA_IRQHandler+0x248>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a8e      	ldr	r2, [pc, #568]	; (8002714 <HAL_DMA_IRQHandler+0x24c>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2208      	movs	r2, #8
 80024f4:	409a      	lsls	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d01a      	beq.n	8002534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0204 	bic.w	r2, r2, #4
 800251a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	2208      	movs	r2, #8
 8002522:	409a      	lsls	r2, r3
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	2201      	movs	r2, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4013      	ands	r3, r2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d012      	beq.n	800256a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2201      	movs	r2, #1
 8002558:	409a      	lsls	r2, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2204      	movs	r2, #4
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00b      	beq.n	80025a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2204      	movs	r2, #4
 800258e:	409a      	lsls	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	2210      	movs	r2, #16
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d043      	beq.n	8002638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03c      	beq.n	8002638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	2210      	movs	r2, #16
 80025c4:	409a      	lsls	r2, r3
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d018      	beq.n	800260a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
 80025f6:	e01f      	b.n	8002638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
 8002608:	e016      	b.n	8002638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0208 	bic.w	r2, r2, #8
 8002626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2220      	movs	r2, #32
 800263e:	409a      	lsls	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 808f 	beq.w	8002768 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8087 	beq.w	8002768 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	2220      	movs	r2, #32
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b05      	cmp	r3, #5
 8002670:	d136      	bne.n	80026e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0216 	bic.w	r2, r2, #22
 8002680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x1da>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0208 	bic.w	r2, r2, #8
 80026b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	223f      	movs	r2, #63	; 0x3f
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d07e      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
        }
        return;
 80026de:	e079      	b.n	80027d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10d      	bne.n	8002718 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002700:	2b00      	cmp	r3, #0
 8002702:	d031      	beq.n	8002768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
 800270c:	e02c      	b.n	8002768 <HAL_DMA_IRQHandler+0x2a0>
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000
 8002714:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	2b00      	cmp	r3, #0
 800271e:	d023      	beq.n	8002768 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
 8002728:	e01e      	b.n	8002768 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10f      	bne.n	8002758 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0210 	bic.w	r2, r2, #16
 8002746:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	2b00      	cmp	r3, #0
 800276e:	d032      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d022      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2205      	movs	r2, #5
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3301      	adds	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d307      	bcc.n	80027b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f2      	bne.n	8002794 <HAL_DMA_IRQHandler+0x2cc>
 80027ae:	e000      	b.n	80027b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
 80027d2:	e000      	b.n	80027d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027d4:	bf00      	nop
    }
  }
}
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d108      	bne.n	800281c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800281a:	e007      	b.n	800282c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	3b10      	subs	r3, #16
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <DMA_CalcBaseAndBitshift+0x64>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d909      	bls.n	800287a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800286e:	f023 0303 	bic.w	r3, r3, #3
 8002872:	1d1a      	adds	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	659a      	str	r2, [r3, #88]	; 0x58
 8002878:	e007      	b.n	800288a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	aaaaaaab 	.word	0xaaaaaaab
 80028a0:	0800e4dc 	.word	0x0800e4dc

080028a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d11f      	bne.n	80028fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d856      	bhi.n	8002972 <DMA_CheckFifoParam+0xce>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <DMA_CheckFifoParam+0x28>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028dd 	.word	0x080028dd
 80028d0:	080028ef 	.word	0x080028ef
 80028d4:	080028dd 	.word	0x080028dd
 80028d8:	08002973 	.word	0x08002973
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d046      	beq.n	8002976 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ec:	e043      	b.n	8002976 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f6:	d140      	bne.n	800297a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fc:	e03d      	b.n	800297a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d121      	bne.n	800294c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d837      	bhi.n	800297e <DMA_CheckFifoParam+0xda>
 800290e:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <DMA_CheckFifoParam+0x70>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	08002925 	.word	0x08002925
 8002918:	0800292b 	.word	0x0800292b
 800291c:	08002925 	.word	0x08002925
 8002920:	0800293d 	.word	0x0800293d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
      break;
 8002928:	e030      	b.n	800298c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d025      	beq.n	8002982 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293a:	e022      	b.n	8002982 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002944:	d11f      	bne.n	8002986 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800294a:	e01c      	b.n	8002986 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d903      	bls.n	800295a <DMA_CheckFifoParam+0xb6>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d003      	beq.n	8002960 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002958:	e018      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
      break;
 800295e:	e015      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	73fb      	strb	r3, [r7, #15]
      break;
 8002970:	e00b      	b.n	800298a <DMA_CheckFifoParam+0xe6>
      break;
 8002972:	bf00      	nop
 8002974:	e00a      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e008      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e006      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e004      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e002      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;   
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <DMA_CheckFifoParam+0xe8>
      break;
 800298a:	bf00      	nop
    }
  } 
  
  return status; 
 800298c:	7bfb      	ldrb	r3, [r7, #15]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e159      	b.n	8002c6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 8148 	bne.w	8002c66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d005      	beq.n	80029ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d130      	bne.n	8002a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 0201 	and.w	r2, r3, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d017      	beq.n	8002a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d123      	bne.n	8002ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	220f      	movs	r2, #15
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a2 	beq.w	8002c66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a56      	ldr	r2, [pc, #344]	; (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b54      	ldr	r3, [pc, #336]	; (8002c84 <HAL_GPIO_Init+0x2e8>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3e:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x2ec>)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a49      	ldr	r2, [pc, #292]	; (8002c8c <HAL_GPIO_Init+0x2f0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x202>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a48      	ldr	r2, [pc, #288]	; (8002c90 <HAL_GPIO_Init+0x2f4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x1fe>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a47      	ldr	r2, [pc, #284]	; (8002c94 <HAL_GPIO_Init+0x2f8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x1fa>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <HAL_GPIO_Init+0x2fc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x1f6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a45      	ldr	r2, [pc, #276]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x1f2>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	e008      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b92:	2303      	movs	r3, #3
 8002b94:	e004      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e002      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_GPIO_Init+0x204>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	f002 0203 	and.w	r2, r2, #3
 8002ba6:	0092      	lsls	r2, r2, #2
 8002ba8:	4093      	lsls	r3, r2
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb0:	4935      	ldr	r1, [pc, #212]	; (8002c88 <HAL_GPIO_Init+0x2ec>)
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	089b      	lsrs	r3, r3, #2
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be2:	4a2f      	ldr	r2, [pc, #188]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c60:	4a0f      	ldr	r2, [pc, #60]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b0f      	cmp	r3, #15
 8002c70:	f67f aea2 	bls.w	80029b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3724      	adds	r7, #36	; 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40013c00 	.word	0x40013c00

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc0:	e003      	b.n	8002cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe f99c 	bl	8001034 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f8a8 	bl	8001f14 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f8a4 	bl	8001f14 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7ff f894 	bl	8001f14 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7ff f890 	bl	8001f14 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f849 	bl	8001f14 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7ff f845 	bl	8001f14 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7ff f828 	bl	8001f14 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7ff f824 	bl	8001f14 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7ff f808 	bl	8001f14 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7ff f804 	bl	8001f14 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fff1 	bl	8001f14 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe ffed 	bl	8001f14 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe ffad 	bl	8001f14 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe ffa9 	bl	8001f14 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe ff6e 	bl	8001f14 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe ff6a 	bl	8001f14 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe ff58 	bl	8001f14 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe ff54 	bl	8001f14 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe ff28 	bl	8001f14 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe ff24 	bl	8001f14 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fefd 	bl	8001f14 <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fef9 	bl	8001f14 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fee6 	bl	8001f14 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fee2 	bl	8001f14 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fe14 	bl	8001f14 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fe10 	bl	8001f14 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fd74 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800e4c4 	.word	0x0800e4c4
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b090      	sub	sp, #64	; 0x40
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	2300      	movs	r3, #0
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d4:	2300      	movs	r3, #0
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80a1 	bhi.w	8003530 <HAL_RCC_GetSysClockFreq+0x16c>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e09b      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_GetSysClockFreq+0x184>)
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033fc:	e09b      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 8003400:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003402:	e098      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b4f      	ldr	r3, [pc, #316]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b4d      	ldr	r3, [pc, #308]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d028      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	627a      	str	r2, [r7, #36]	; 0x24
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800342c:	2100      	movs	r1, #0
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 8003430:	fb03 f201 	mul.w	r2, r3, r1
 8003434:	2300      	movs	r3, #0
 8003436:	fb00 f303 	mul.w	r3, r0, r3
 800343a:	4413      	add	r3, r2
 800343c:	4a43      	ldr	r2, [pc, #268]	; (800354c <HAL_RCC_GetSysClockFreq+0x188>)
 800343e:	fba0 1202 	umull	r1, r2, r0, r2
 8003442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003444:	460a      	mov	r2, r1
 8003446:	62ba      	str	r2, [r7, #40]	; 0x28
 8003448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344a:	4413      	add	r3, r2
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	2200      	movs	r2, #0
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	61fa      	str	r2, [r7, #28]
 8003456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800345a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800345e:	f7fd fc1b 	bl	8000c98 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4613      	mov	r3, r2
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800346a:	e053      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	099b      	lsrs	r3, r3, #6
 8003472:	2200      	movs	r2, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	617a      	str	r2, [r7, #20]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800347e:	f04f 0b00 	mov.w	fp, #0
 8003482:	4652      	mov	r2, sl
 8003484:	465b      	mov	r3, fp
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	ebb2 080a 	subs.w	r8, r2, sl
 800349e:	eb63 090b 	sbc.w	r9, r3, fp
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034b6:	ebb2 0408 	subs.w	r4, r2, r8
 80034ba:	eb63 0509 	sbc.w	r5, r3, r9
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	00eb      	lsls	r3, r5, #3
 80034c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034cc:	00e2      	lsls	r2, r4, #3
 80034ce:	4614      	mov	r4, r2
 80034d0:	461d      	mov	r5, r3
 80034d2:	eb14 030a 	adds.w	r3, r4, sl
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	eb45 030b 	adc.w	r3, r5, fp
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ea:	4629      	mov	r1, r5
 80034ec:	028b      	lsls	r3, r1, #10
 80034ee:	4621      	mov	r1, r4
 80034f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f4:	4621      	mov	r1, r4
 80034f6:	028a      	lsls	r2, r1, #10
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	2200      	movs	r2, #0
 8003500:	60bb      	str	r3, [r7, #8]
 8003502:	60fa      	str	r2, [r7, #12]
 8003504:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003508:	f7fd fbc6 	bl	8000c98 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4613      	mov	r3, r2
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_GetSysClockFreq+0x180>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	0c1b      	lsrs	r3, r3, #16
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	3301      	adds	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetSysClockFreq+0x184>)
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003538:	4618      	mov	r0, r3
 800353a:	3740      	adds	r7, #64	; 0x40
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400
 800354c:	017d7840 	.word	0x017d7840

08003550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000000 	.word	0x20000000

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800356c:	f7ff fff0 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40023800 	.word	0x40023800
 800358c:	0800e4d4 	.word	0x0800e4d4

08003590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003594:	f7ff ffdc 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003598:	4602      	mov	r2, r0
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	4903      	ldr	r1, [pc, #12]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a6:	5ccb      	ldrb	r3, [r1, r3]
 80035a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40023800 	.word	0x40023800
 80035b4:	0800e4d4 	.word	0x0800e4d4

080035b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07b      	b.n	80036c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d108      	bne.n	80035e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035da:	d009      	beq.n	80035f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
 80035e2:	e005      	b.n	80035f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f9d4 	bl	80019b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	ea42 0103 	orr.w	r1, r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0104 	and.w	r1, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	f003 0210 	and.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_SPI_Transmit+0x22>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e126      	b.n	800393a <HAL_SPI_Transmit+0x270>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f4:	f7fe fc0e 	bl	8001f14 <HAL_GetTick>
 80036f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d002      	beq.n	8003710 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800370a:	2302      	movs	r3, #2
 800370c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800370e:	e10b      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_SPI_Transmit+0x52>
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d102      	bne.n	8003722 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003720:	e102      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	88fa      	ldrh	r2, [r7, #6]
 8003740:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003768:	d10f      	bne.n	800378a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b0:	d14b      	bne.n	800384a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0xf6>
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d13e      	bne.n	800383e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80037e4:	e02b      	b.n	800383e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d112      	bne.n	800381a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	86da      	strh	r2, [r3, #54]	; 0x36
 8003818:	e011      	b.n	800383e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fe fb7b 	bl	8001f14 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Transmit+0x168>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Transmit+0x16e>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800383c:	e074      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ce      	bne.n	80037e6 <HAL_SPI_Transmit+0x11c>
 8003848:	e04c      	b.n	80038e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x18e>
 8003852:	8afb      	ldrh	r3, [r7, #22]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d140      	bne.n	80038da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	7812      	ldrb	r2, [r2, #0]
 8003864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	1c5a      	adds	r2, r3, #1
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800387e:	e02c      	b.n	80038da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b02      	cmp	r3, #2
 800388c:	d113      	bne.n	80038b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80038b4:	e011      	b.n	80038da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038b6:	f7fe fb2d 	bl	8001f14 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d803      	bhi.n	80038ce <HAL_SPI_Transmit+0x204>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d102      	bne.n	80038d4 <HAL_SPI_Transmit+0x20a>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038d8:	e026      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1cd      	bne.n	8003880 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fbcb 	bl	8004084 <SPI_EndRxTxTransaction>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e000      	b.n	8003928 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003926:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003938:	7ffb      	ldrb	r3, [r7, #31]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b088      	sub	sp, #32
 8003946:	af02      	add	r7, sp, #8
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	603b      	str	r3, [r7, #0]
 800394e:	4613      	mov	r3, r2
 8003950:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d112      	bne.n	8003986 <HAL_SPI_Receive+0x44>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10e      	bne.n	8003986 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2204      	movs	r2, #4
 800396c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f8f1 	bl	8003b64 <HAL_SPI_TransmitReceive>
 8003982:	4603      	mov	r3, r0
 8003984:	e0ea      	b.n	8003b5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_SPI_Receive+0x52>
 8003990:	2302      	movs	r3, #2
 8003992:	e0e3      	b.n	8003b5c <HAL_SPI_Receive+0x21a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399c:	f7fe faba 	bl	8001f14 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039b2:	e0ca      	b.n	8003b4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_SPI_Receive+0x7e>
 80039ba:	88fb      	ldrh	r3, [r7, #6]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d102      	bne.n	80039c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80039c4:	e0c1      	b.n	8003b4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2204      	movs	r2, #4
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	88fa      	ldrh	r2, [r7, #6]
 80039de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	88fa      	ldrh	r2, [r7, #6]
 80039e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0c:	d10f      	bne.n	8003a2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d007      	beq.n	8003a4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d162      	bne.n	8003b1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a54:	e02e      	b.n	8003ab4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d115      	bne.n	8003a90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f103 020c 	add.w	r2, r3, #12
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a8e:	e011      	b.n	8003ab4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a90:	f7fe fa40 	bl	8001f14 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d803      	bhi.n	8003aa8 <HAL_SPI_Receive+0x166>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d102      	bne.n	8003aae <HAL_SPI_Receive+0x16c>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ab2:	e04a      	b.n	8003b4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1cb      	bne.n	8003a56 <HAL_SPI_Receive+0x114>
 8003abe:	e031      	b.n	8003b24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d113      	bne.n	8003af6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	b292      	uxth	r2, r2
 8003ada:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	1c9a      	adds	r2, r3, #2
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af4:	e011      	b.n	8003b1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003af6:	f7fe fa0d 	bl	8001f14 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d803      	bhi.n	8003b0e <HAL_SPI_Receive+0x1cc>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0c:	d102      	bne.n	8003b14 <HAL_SPI_Receive+0x1d2>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b18:	e017      	b.n	8003b4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1cd      	bne.n	8003ac0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	6839      	ldr	r1, [r7, #0]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fa45 	bl	8003fb8 <SPI_EndRxTransaction>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
 8003b46:	e000      	b.n	8003b4a <HAL_SPI_Receive+0x208>
  }

error :
 8003b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b72:	2301      	movs	r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x26>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e18a      	b.n	8003ea0 <HAL_SPI_TransmitReceive+0x33c>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b92:	f7fe f9bf 	bl	8001f14 <HAL_GetTick>
 8003b96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d00f      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x70>
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d107      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x68>
 8003bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d003      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bd2:	e15b      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x82>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_SPI_TransmitReceive+0x82>
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d103      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bec:	e14e      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	887a      	ldrh	r2, [r7, #2]
 8003c12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	887a      	ldrh	r2, [r7, #2]
 8003c2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d007      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5e:	d178      	bne.n	8003d52 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x10a>
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d166      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	1c9a      	adds	r2, r3, #2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c92:	e053      	b.n	8003d3c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d11b      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x176>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d016      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x176>
 8003cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d113      	bne.n	8003cda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d119      	bne.n	8003d1c <HAL_SPI_TransmitReceive+0x1b8>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	1c9a      	adds	r2, r3, #2
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d1c:	f7fe f8fa 	bl	8001f14 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d807      	bhi.n	8003d3c <HAL_SPI_TransmitReceive+0x1d8>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d003      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d3a:	e0a7      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1a6      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x130>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1a1      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x130>
 8003d50:	e07c      	b.n	8003e4c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_SPI_TransmitReceive+0x1fc>
 8003d5a:	8b7b      	ldrh	r3, [r7, #26]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d16b      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d86:	e057      	b.n	8003e38 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d11c      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x26c>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d017      	beq.n	8003dd0 <HAL_SPI_TransmitReceive+0x26c>
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d114      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d119      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x2ae>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d014      	beq.n	8003e12 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e12:	f7fe f87f 	bl	8001f14 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d803      	bhi.n	8003e2a <HAL_SPI_TransmitReceive+0x2c6>
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x2cc>
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d103      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e36:	e029      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1a2      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x224>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d19d      	bne.n	8003d88 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f917 	bl	8004084 <SPI_EndRxTxTransaction>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d006      	beq.n	8003e6a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e68:	e010      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	e000      	b.n	8003e8c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3730      	adds	r7, #48	; 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eb8:	f7fe f82c 	bl	8001f14 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ec8:	f7fe f824 	bl	8001f14 <HAL_GetTick>
 8003ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	015b      	lsls	r3, r3, #5
 8003ed4:	0d1b      	lsrs	r3, r3, #20
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	e054      	b.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d050      	beq.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee8:	f7fe f814 	bl	8001f14 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d13d      	bne.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f16:	d111      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	d004      	beq.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d107      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f44:	d10f      	bne.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e017      	b.n	8003faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d19b      	bne.n	8003ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000000 	.word	0x20000000

08003fb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fcc:	d111      	bne.n	8003ff2 <SPI_EndRxTransaction+0x3a>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d004      	beq.n	8003fe2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe0:	d107      	bne.n	8003ff2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffa:	d12a      	bne.n	8004052 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d012      	beq.n	800402c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	; 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff49 	bl	8003ea8 <SPI_WaitFlagStateUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02d      	beq.n	8004078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e026      	b.n	800407a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	2101      	movs	r1, #1
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ff36 	bl	8003ea8 <SPI_WaitFlagStateUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e013      	b.n	800407a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	2101      	movs	r1, #1
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff ff23 	bl	8003ea8 <SPI_WaitFlagStateUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e000      	b.n	800407a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <SPI_EndRxTxTransaction+0x7c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <SPI_EndRxTxTransaction+0x80>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0d5b      	lsrs	r3, r3, #21
 800409c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ae:	d112      	bne.n	80040d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2200      	movs	r2, #0
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fef4 	bl	8003ea8 <SPI_WaitFlagStateUntilTimeout>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f043 0220 	orr.w	r2, r3, #32
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e00f      	b.n	80040f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3b01      	subs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b80      	cmp	r3, #128	; 0x80
 80040ee:	d0f2      	beq.n	80040d6 <SPI_EndRxTxTransaction+0x52>
 80040f0:	e000      	b.n	80040f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80040f2:	bf00      	nop
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000000 	.word	0x20000000
 8004104:	165e9f81 	.word	0x165e9f81

08004108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e03f      	b.n	800419a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fc8a 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800414a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 ff9b 	bl	8005088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08a      	sub	sp, #40	; 0x28
 80041a6:	af02      	add	r7, sp, #8
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d17c      	bne.n	80042bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_Transmit+0x2c>
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e075      	b.n	80042be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Transmit+0x3e>
 80041dc:	2302      	movs	r3, #2
 80041de:	e06e      	b.n	80042be <HAL_UART_Transmit+0x11c>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2221      	movs	r2, #33	; 0x21
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041f6:	f7fd fe8d 	bl	8001f14 <HAL_GetTick>
 80041fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	88fa      	ldrh	r2, [r7, #6]
 8004200:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004210:	d108      	bne.n	8004224 <HAL_UART_Transmit+0x82>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	e003      	b.n	800422c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004228:	2300      	movs	r3, #0
 800422a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004234:	e02a      	b.n	800428c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fc53 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e036      	b.n	80042be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004264:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3302      	adds	r3, #2
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	e007      	b.n	800427e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	3301      	adds	r3, #1
 800427c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1cf      	bne.n	8004236 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2140      	movs	r1, #64	; 0x40
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fc23 	bl	8004aec <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e006      	b.n	80042be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b08c      	sub	sp, #48	; 0x30
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	4613      	mov	r3, r2
 80042d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d152      	bne.n	8004386 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e04b      	b.n	8004388 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e044      	b.n	8004388 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	461a      	mov	r2, r3
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fc58 	bl	8004bc8 <UART_Start_Receive_DMA>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800431e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004322:	2b00      	cmp	r3, #0
 8004324:	d12c      	bne.n	8004380 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	2b01      	cmp	r3, #1
 800432c:	d125      	bne.n	800437a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	617b      	str	r3, [r7, #20]
   return(result);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f043 0310 	orr.w	r3, r3, #16
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	627a      	str	r2, [r7, #36]	; 0x24
 8004366:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	61fb      	str	r3, [r7, #28]
   return(result);
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004378:	e002      	b.n	8004380 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004384:	e000      	b.n	8004388 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004386:	2302      	movs	r3, #2
  }
}
 8004388:	4618      	mov	r0, r3
 800438a:	3730      	adds	r7, #48	; 0x30
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0ba      	sub	sp, #232	; 0xe8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_UART_IRQHandler+0x66>
 80043e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fd8f 	bl	8004f12 <UART_Receive_IT>
      return;
 80043f4:	e256      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80de 	beq.w	80045bc <HAL_UART_IRQHandler+0x22c>
 8004400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004410:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80d1 	beq.w	80045bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_UART_IRQHandler+0xae>
 8004426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d005      	beq.n	800443e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f043 0201 	orr.w	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800443e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_UART_IRQHandler+0xd2>
 800444a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f043 0202 	orr.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_UART_IRQHandler+0xf6>
 800446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <HAL_UART_IRQHandler+0x126>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d105      	bne.n	80044aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800449e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0208 	orr.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 81ed 	beq.w	800489a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_UART_IRQHandler+0x14e>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fd1a 	bl	8004f12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <HAL_UART_IRQHandler+0x17a>
 8004502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04f      	beq.n	80045aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 fc22 	bl	8004d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b40      	cmp	r3, #64	; 0x40
 800451c:	d141      	bne.n	80045a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800453c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800454a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800454e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1d9      	bne.n	800451e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	2b00      	cmp	r3, #0
 8004570:	d013      	beq.n	800459a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	4a7d      	ldr	r2, [pc, #500]	; (800476c <HAL_UART_IRQHandler+0x3dc>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd ff80 	bl	8002484 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e00e      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f9a4 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	e00a      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9a0 	bl	80048e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e006      	b.n	80045b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f99c 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045b6:	e170      	b.n	800489a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	bf00      	nop
    return;
 80045ba:	e16e      	b.n	800489a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	f040 814a 	bne.w	800485a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8143 	beq.w	800485a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 813c 	beq.w	800485a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60bb      	str	r3, [r7, #8]
 80045f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	f040 80b4 	bne.w	8004770 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004614:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8140 	beq.w	800489e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004626:	429a      	cmp	r2, r3
 8004628:	f080 8139 	bcs.w	800489e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004632:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	f000 8088 	beq.w	8004752 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800465c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800466e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004676:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800467a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1d9      	bne.n	8004642 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800469e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e1      	bne.n	800468e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004734:	65ba      	str	r2, [r7, #88]	; 0x58
 8004736:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800473a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e3      	bne.n	8004710 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fe29 	bl	80023a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800475a:	b29b      	uxth	r3, r3
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b29b      	uxth	r3, r3
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fc4c 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004768:	e099      	b.n	800489e <HAL_UART_IRQHandler+0x50e>
 800476a:	bf00      	nop
 800476c:	08004e1b 	.word	0x08004e1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004778:	b29b      	uxth	r3, r3
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 808b 	beq.w	80048a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800478c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8086 	beq.w	80048a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	330c      	adds	r3, #12
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047ba:	647a      	str	r2, [r7, #68]	; 0x44
 80047bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e3      	bne.n	8004796 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3314      	adds	r3, #20
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	623b      	str	r3, [r7, #32]
   return(result);
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047f2:	633a      	str	r2, [r7, #48]	; 0x30
 80047f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e3      	bne.n	80047ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60fb      	str	r3, [r7, #12]
   return(result);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004838:	61fa      	str	r2, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	69b9      	ldr	r1, [r7, #24]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	617b      	str	r3, [r7, #20]
   return(result);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e3      	bne.n	8004814 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800484c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fbd4 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004858:	e023      	b.n	80048a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_UART_IRQHandler+0x4ea>
 8004866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fae5 	bl	8004e42 <UART_Transmit_IT>
    return;
 8004878:	e014      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00e      	beq.n	80048a4 <HAL_UART_IRQHandler+0x514>
 8004886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800488a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fb25 	bl	8004ee2 <UART_EndTransmit_IT>
    return;
 8004898:	e004      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
    return;
 800489a:	bf00      	nop
 800489c:	e002      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
      return;
 800489e:	bf00      	nop
 80048a0:	e000      	b.n	80048a4 <HAL_UART_IRQHandler+0x514>
      return;
 80048a2:	bf00      	nop
  }
}
 80048a4:	37e8      	adds	r7, #232	; 0xe8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop

080048ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b09c      	sub	sp, #112	; 0x70
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d172      	bne.n	80049fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	2200      	movs	r2, #0
 800491c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800491e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004934:	66bb      	str	r3, [r7, #104]	; 0x68
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800493e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004940:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800494c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e5      	bne.n	800491e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004972:	647a      	str	r2, [r7, #68]	; 0x44
 8004974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e5      	bne.n	8004952 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3314      	adds	r3, #20
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	623b      	str	r3, [r7, #32]
   return(result);
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499c:	663b      	str	r3, [r7, #96]	; 0x60
 800499e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3314      	adds	r3, #20
 80049a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049a6:	633a      	str	r2, [r7, #48]	; 0x30
 80049a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d119      	bne.n	80049fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	e853 3f00 	ldrex	r3, [r3]
 80049d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0310 	bic.w	r3, r3, #16
 80049e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	330c      	adds	r3, #12
 80049e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ea:	61fa      	str	r2, [r7, #28]
 80049ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	617b      	str	r3, [r7, #20]
   return(result);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e5      	bne.n	80049ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a0e:	f7fc faf7 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a12:	e002      	b.n	8004a1a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004a14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a16:	f7ff ff53 	bl	80048c0 <HAL_UART_RxCpltCallback>
}
 8004a1a:	bf00      	nop
 8004a1c:	3770      	adds	r7, #112	; 0x70
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d108      	bne.n	8004a4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	4619      	mov	r1, r3
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7fc fadc 	bl	8001000 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004a48:	e002      	b.n	8004a50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7ff ff42 	bl	80048d4 <HAL_UART_RxHalfCpltCallback>
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b21      	cmp	r3, #33	; 0x21
 8004a8a:	d108      	bne.n	8004a9e <UART_DMAError+0x46>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f000 f933 	bl	8004d04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b22      	cmp	r3, #34	; 0x22
 8004abe:	d108      	bne.n	8004ad2 <UART_DMAError+0x7a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f000 f941 	bl	8004d54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	f043 0210 	orr.w	r2, r3, #16
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ade:	68b8      	ldr	r0, [r7, #8]
 8004ae0:	f7ff ff02 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b090      	sub	sp, #64	; 0x40
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afc:	e050      	b.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d04c      	beq.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b0c:	f7fd fa02 	bl	8001f14 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d241      	bcs.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b3c:	637a      	str	r2, [r7, #52]	; 0x34
 8004b3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b70:	623a      	str	r2, [r7, #32]
 8004b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	69f9      	ldr	r1, [r7, #28]
 8004b76:	6a3a      	ldr	r2, [r7, #32]
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e00f      	b.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d09f      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3740      	adds	r7, #64	; 0x40
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b098      	sub	sp, #96	; 0x60
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2222      	movs	r2, #34	; 0x22
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	4a40      	ldr	r2, [pc, #256]	; (8004cf8 <UART_Start_Receive_DMA+0x130>)
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	; (8004cfc <UART_Start_Receive_DMA+0x134>)
 8004bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	4a3e      	ldr	r2, [pc, #248]	; (8004d00 <UART_Start_Receive_DMA+0x138>)
 8004c06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004c10:	f107 0308 	add.w	r3, r7, #8
 8004c14:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4619      	mov	r1, r3
 8004c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	f7fd fb64 	bl	80022f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c72:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	f043 0301 	orr.w	r3, r3, #1
 8004c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ca6:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004cac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3314      	adds	r3, #20
 8004cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3314      	adds	r3, #20
 8004cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cda:	627a      	str	r2, [r7, #36]	; 0x24
 8004cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6a39      	ldr	r1, [r7, #32]
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e5      	bne.n	8004cba <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3760      	adds	r7, #96	; 0x60
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	080048fd 	.word	0x080048fd
 8004cfc:	08004a23 	.word	0x08004a23
 8004d00:	08004a59 	.word	0x08004a59

08004d04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	; 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	61ba      	str	r2, [r7, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004d48:	bf00      	nop
 8004d4a:	3724      	adds	r7, #36	; 0x24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b095      	sub	sp, #84	; 0x54
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e5      	bne.n	8004d5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3314      	adds	r3, #20
 8004d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e5      	bne.n	8004d90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d119      	bne.n	8004e00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dec:	61ba      	str	r2, [r7, #24]
 8004dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6979      	ldr	r1, [r7, #20]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	; 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fd57 	bl	80048e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b21      	cmp	r3, #33	; 0x21
 8004e54:	d13e      	bne.n	8004ed4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d114      	bne.n	8004e8a <UART_Transmit_IT+0x48>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d110      	bne.n	8004e8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]
 8004e88:	e008      	b.n	8004e9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6211      	str	r1, [r2, #32]
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ebe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ece:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fcd2 	bl	80048ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b08c      	sub	sp, #48	; 0x30
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b22      	cmp	r3, #34	; 0x22
 8004f24:	f040 80ab 	bne.w	800507e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f30:	d117      	bne.n	8004f62 <UART_Receive_IT+0x50>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d113      	bne.n	8004f62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f60:	e026      	b.n	8004fb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d007      	beq.n	8004f86 <UART_Receive_IT+0x74>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <UART_Receive_IT+0x82>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	e008      	b.n	8004fa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d15a      	bne.n	800507a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0220 	bic.w	r2, r2, #32
 8004fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	2b01      	cmp	r3, #1
 8005002:	d135      	bne.n	8005070 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502a:	623a      	str	r2, [r7, #32]
 800502c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	69f9      	ldr	r1, [r7, #28]
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	61bb      	str	r3, [r7, #24]
   return(result);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e5      	bne.n	800500a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d10a      	bne.n	8005062 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800504c:	2300      	movs	r3, #0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fb ffc9 	bl	8001000 <HAL_UARTEx_RxEventCallback>
 800506e:	e002      	b.n	8005076 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fc25 	bl	80048c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e002      	b.n	8005080 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	; 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800508c:	b0c0      	sub	sp, #256	; 0x100
 800508e:	af00      	add	r7, sp, #0
 8005090:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	ea40 0301 	orr.w	r3, r0, r1
 80050b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e0:	f021 010c 	bic.w	r1, r1, #12
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ee:	430b      	orrs	r3, r1
 80050f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	6999      	ldr	r1, [r3, #24]
 8005104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	ea40 0301 	orr.w	r3, r0, r1
 800510e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b8f      	ldr	r3, [pc, #572]	; (8005354 <UART_SetConfig+0x2cc>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d005      	beq.n	8005128 <UART_SetConfig+0xa0>
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b8d      	ldr	r3, [pc, #564]	; (8005358 <UART_SetConfig+0x2d0>)
 8005124:	429a      	cmp	r2, r3
 8005126:	d104      	bne.n	8005132 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005128:	f7fe fa32 	bl	8003590 <HAL_RCC_GetPCLK2Freq>
 800512c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005130:	e003      	b.n	800513a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7fe fa19 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 8005136:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005144:	f040 810c 	bne.w	8005360 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800514c:	2200      	movs	r2, #0
 800514e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005152:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005156:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800515a:	4622      	mov	r2, r4
 800515c:	462b      	mov	r3, r5
 800515e:	1891      	adds	r1, r2, r2
 8005160:	65b9      	str	r1, [r7, #88]	; 0x58
 8005162:	415b      	adcs	r3, r3
 8005164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005166:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800516a:	4621      	mov	r1, r4
 800516c:	eb12 0801 	adds.w	r8, r2, r1
 8005170:	4629      	mov	r1, r5
 8005172:	eb43 0901 	adc.w	r9, r3, r1
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f04f 0300 	mov.w	r3, #0
 800517e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800518a:	4690      	mov	r8, r2
 800518c:	4699      	mov	r9, r3
 800518e:	4623      	mov	r3, r4
 8005190:	eb18 0303 	adds.w	r3, r8, r3
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005198:	462b      	mov	r3, r5
 800519a:	eb49 0303 	adc.w	r3, r9, r3
 800519e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051b6:	460b      	mov	r3, r1
 80051b8:	18db      	adds	r3, r3, r3
 80051ba:	653b      	str	r3, [r7, #80]	; 0x50
 80051bc:	4613      	mov	r3, r2
 80051be:	eb42 0303 	adc.w	r3, r2, r3
 80051c2:	657b      	str	r3, [r7, #84]	; 0x54
 80051c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051cc:	f7fb fd64 	bl	8000c98 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4b61      	ldr	r3, [pc, #388]	; (800535c <UART_SetConfig+0x2d4>)
 80051d6:	fba3 2302 	umull	r2, r3, r3, r2
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	011c      	lsls	r4, r3, #4
 80051de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	1891      	adds	r1, r2, r2
 80051f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051f8:	415b      	adcs	r3, r3
 80051fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005200:	4641      	mov	r1, r8
 8005202:	eb12 0a01 	adds.w	sl, r2, r1
 8005206:	4649      	mov	r1, r9
 8005208:	eb43 0b01 	adc.w	fp, r3, r1
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005218:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800521c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005220:	4692      	mov	sl, r2
 8005222:	469b      	mov	fp, r3
 8005224:	4643      	mov	r3, r8
 8005226:	eb1a 0303 	adds.w	r3, sl, r3
 800522a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522e:	464b      	mov	r3, r9
 8005230:	eb4b 0303 	adc.w	r3, fp, r3
 8005234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005244:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005248:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800524c:	460b      	mov	r3, r1
 800524e:	18db      	adds	r3, r3, r3
 8005250:	643b      	str	r3, [r7, #64]	; 0x40
 8005252:	4613      	mov	r3, r2
 8005254:	eb42 0303 	adc.w	r3, r2, r3
 8005258:	647b      	str	r3, [r7, #68]	; 0x44
 800525a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800525e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005262:	f7fb fd19 	bl	8000c98 <__aeabi_uldivmod>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4611      	mov	r1, r2
 800526c:	4b3b      	ldr	r3, [pc, #236]	; (800535c <UART_SetConfig+0x2d4>)
 800526e:	fba3 2301 	umull	r2, r3, r3, r1
 8005272:	095b      	lsrs	r3, r3, #5
 8005274:	2264      	movs	r2, #100	; 0x64
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	1acb      	subs	r3, r1, r3
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005282:	4b36      	ldr	r3, [pc, #216]	; (800535c <UART_SetConfig+0x2d4>)
 8005284:	fba3 2302 	umull	r2, r3, r3, r2
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005290:	441c      	add	r4, r3
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800529c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80052ac:	415b      	adcs	r3, r3
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6339      	str	r1, [r7, #48]	; 0x30
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005300:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005304:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005308:	460b      	mov	r3, r1
 800530a:	18db      	adds	r3, r3, r3
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
 800530e:	4613      	mov	r3, r2
 8005310:	eb42 0303 	adc.w	r3, r2, r3
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005316:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800531a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800531e:	f7fb fcbb 	bl	8000c98 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b0d      	ldr	r3, [pc, #52]	; (800535c <UART_SetConfig+0x2d4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	; 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	3332      	adds	r3, #50	; 0x32
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <UART_SetConfig+0x2d4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 0207 	and.w	r2, r3, #7
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4422      	add	r2, r4
 800534e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005350:	e106      	b.n	8005560 <UART_SetConfig+0x4d8>
 8005352:	bf00      	nop
 8005354:	40011000 	.word	0x40011000
 8005358:	40011400 	.word	0x40011400
 800535c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005364:	2200      	movs	r2, #0
 8005366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800536a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800536e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005372:	4642      	mov	r2, r8
 8005374:	464b      	mov	r3, r9
 8005376:	1891      	adds	r1, r2, r2
 8005378:	6239      	str	r1, [r7, #32]
 800537a:	415b      	adcs	r3, r3
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005382:	4641      	mov	r1, r8
 8005384:	1854      	adds	r4, r2, r1
 8005386:	4649      	mov	r1, r9
 8005388:	eb43 0501 	adc.w	r5, r3, r1
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	00eb      	lsls	r3, r5, #3
 8005396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800539a:	00e2      	lsls	r2, r4, #3
 800539c:	4614      	mov	r4, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	4643      	mov	r3, r8
 80053a2:	18e3      	adds	r3, r4, r3
 80053a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053a8:	464b      	mov	r3, r9
 80053aa:	eb45 0303 	adc.w	r3, r5, r3
 80053ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053ce:	4629      	mov	r1, r5
 80053d0:	008b      	lsls	r3, r1, #2
 80053d2:	4621      	mov	r1, r4
 80053d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d8:	4621      	mov	r1, r4
 80053da:	008a      	lsls	r2, r1, #2
 80053dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053e0:	f7fb fc5a 	bl	8000c98 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4b60      	ldr	r3, [pc, #384]	; (800556c <UART_SetConfig+0x4e4>)
 80053ea:	fba3 2302 	umull	r2, r3, r3, r2
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	011c      	lsls	r4, r3, #4
 80053f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005400:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	1891      	adds	r1, r2, r2
 800540a:	61b9      	str	r1, [r7, #24]
 800540c:	415b      	adcs	r3, r3
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005414:	4641      	mov	r1, r8
 8005416:	1851      	adds	r1, r2, r1
 8005418:	6139      	str	r1, [r7, #16]
 800541a:	4649      	mov	r1, r9
 800541c:	414b      	adcs	r3, r1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800542c:	4659      	mov	r1, fp
 800542e:	00cb      	lsls	r3, r1, #3
 8005430:	4651      	mov	r1, sl
 8005432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005436:	4651      	mov	r1, sl
 8005438:	00ca      	lsls	r2, r1, #3
 800543a:	4610      	mov	r0, r2
 800543c:	4619      	mov	r1, r3
 800543e:	4603      	mov	r3, r0
 8005440:	4642      	mov	r2, r8
 8005442:	189b      	adds	r3, r3, r2
 8005444:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005448:	464b      	mov	r3, r9
 800544a:	460a      	mov	r2, r1
 800544c:	eb42 0303 	adc.w	r3, r2, r3
 8005450:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	67bb      	str	r3, [r7, #120]	; 0x78
 800545e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800546c:	4649      	mov	r1, r9
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	4641      	mov	r1, r8
 8005472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005476:	4641      	mov	r1, r8
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800547e:	f7fb fc0b 	bl	8000c98 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4611      	mov	r1, r2
 8005488:	4b38      	ldr	r3, [pc, #224]	; (800556c <UART_SetConfig+0x4e4>)
 800548a:	fba3 2301 	umull	r2, r3, r3, r1
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2264      	movs	r2, #100	; 0x64
 8005492:	fb02 f303 	mul.w	r3, r2, r3
 8005496:	1acb      	subs	r3, r1, r3
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a33      	ldr	r2, [pc, #204]	; (800556c <UART_SetConfig+0x4e4>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054a8:	441c      	add	r4, r3
 80054aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ae:	2200      	movs	r2, #0
 80054b0:	673b      	str	r3, [r7, #112]	; 0x70
 80054b2:	677a      	str	r2, [r7, #116]	; 0x74
 80054b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	415b      	adcs	r3, r3
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054c8:	4641      	mov	r1, r8
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	4649      	mov	r1, r9
 80054d0:	414b      	adcs	r3, r1
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054e0:	4659      	mov	r1, fp
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4651      	mov	r1, sl
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4642      	mov	r2, r8
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054fa:	464b      	mov	r3, r9
 80054fc:	460a      	mov	r2, r1
 80054fe:	eb42 0303 	adc.w	r3, r2, r3
 8005502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	663b      	str	r3, [r7, #96]	; 0x60
 800550e:	667a      	str	r2, [r7, #100]	; 0x64
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800551c:	4649      	mov	r1, r9
 800551e:	008b      	lsls	r3, r1, #2
 8005520:	4641      	mov	r1, r8
 8005522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005526:	4641      	mov	r1, r8
 8005528:	008a      	lsls	r2, r1, #2
 800552a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800552e:	f7fb fbb3 	bl	8000c98 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <UART_SetConfig+0x4e4>)
 8005538:	fba3 1302 	umull	r1, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2164      	movs	r1, #100	; 0x64
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a08      	ldr	r2, [pc, #32]	; (800556c <UART_SetConfig+0x4e4>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	f003 020f 	and.w	r2, r3, #15
 8005556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4422      	add	r2, r4
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005566:	46bd      	mov	sp, r7
 8005568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800556c:	51eb851f 	.word	0x51eb851f

08005570 <LORA_init>:

#include "lora.h"
#include "rfm95.h"

THT_StatusTypeDef LORA_init(LORA_HandleTypeDef *const me)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <LORA_init+0x12>
	{
		return THT_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e004      	b.n	800558c <LORA_init+0x1c>
	}
	return (*me->init)(me);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	4798      	blx	r3
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <LORA_startReceiveIT>:

	return (*me->receive)(me, pBuffer, size, timeout);
}

THT_StatusTypeDef LORA_startReceiveIT(LORA_HandleTypeDef *const me)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <LORA_startReceiveIT+0x12>
	{
		return THT_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e004      	b.n	80055b0 <LORA_startReceiveIT+0x1c>
	}

	return (*me->startReceiveIT)(me);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	4603      	mov	r3, r0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <LORA_receiveIT>:

THT_StatusTypeDef LORA_receiveIT(LORA_HandleTypeDef *const me, uint8_t *pBuffer, uint16_t size)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <LORA_receiveIT+0x1a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <LORA_receiveIT+0x1e>
	{
		return THT_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e006      	b.n	80055e4 <LORA_receiveIT+0x2c>
	}

	return (*me->receiveIT)(me, pBuffer, size);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <RFM95_setNSSPin>:
 * @brief Set NSS pin - this enable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	2201      	movs	r2, #1
 8005604:	4619      	mov	r1, r3
 8005606:	f7fd fb4d 	bl	8002ca4 <HAL_GPIO_WritePin>
 800560a:	e000      	b.n	800560e <RFM95_setNSSPin+0x22>
		return;
 800560c:	bf00      	nop
}
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <RFM95_clearNSSPin>:
 * @brief Reset NSS pin - this disable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562a:	2200      	movs	r2, #0
 800562c:	4619      	mov	r1, r3
 800562e:	f7fd fb39 	bl	8002ca4 <HAL_GPIO_WritePin>
 8005632:	e000      	b.n	8005636 <RFM95_clearNSSPin+0x22>
		return;
 8005634:	bf00      	nop
}
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <RFM95_writeRegister>:
 * @param data [in] The data of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
											 uint8_t address, const uint8_t data)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
 8005648:	4613      	mov	r3, r2
 800564a:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <RFM95_writeRegister+0x1a>
	{
		return THT_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e021      	b.n	800569a <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ffdc 	bl	8005614 <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = {address | 0x80, data};
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005662:	b2db      	uxtb	r3, r3
 8005664:	733b      	strb	r3, [r7, #12]
 8005666:	78bb      	ldrb	r3, [r7, #2]
 8005668:	737b      	strb	r3, [r7, #13]
	//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800566e:	f107 010c 	add.w	r1, r7, #12
 8005672:	2364      	movs	r3, #100	; 0x64
 8005674:	2202      	movs	r2, #2
 8005676:	f7fe f828 	bl	80036ca <HAL_SPI_Transmit>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte.*/
	RFM95_setNSSPin(me);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff ffb4 	bl	80055ec <RFM95_setNSSPin>

	if (res == HAL_OK)
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <RFM95_writeRegister+0x52>
	{
		return THT_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e005      	b.n	800569a <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <RFM95_writeRegister+0x5c>
	{
		return THT_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e000      	b.n	800569a <RFM95_writeRegister+0x5e>
	}
	else
	{
		return THT_TIMEOUT;
 8005698:	2303      	movs	r3, #3
	}
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <RFM95_writeBurstRegister>:
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeBurstRegister(
	RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *pData,
	uint8_t size)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	461a      	mov	r2, r3
 80056ae:	460b      	mov	r3, r1
 80056b0:	72fb      	strb	r3, [r7, #11]
 80056b2:	4613      	mov	r3, r2
 80056b4:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <RFM95_writeBurstRegister+0x1e>
	{
		return THT_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e041      	b.n	8005744 <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 80056c0:	2300      	movs	r3, #0
 80056c2:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 80056c4:	7abb      	ldrb	r3, [r7, #10]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d109      	bne.n	80056de <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 80056ca:	7af9      	ldrb	r1, [r7, #11]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ffb2 	bl	800563c <RFM95_writeRegister>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]
 80056dc:	e031      	b.n	8005742 <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff98 	bl	8005614 <RFM95_clearNSSPin>

		address |= 0x80;
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056f2:	f107 010b 	add.w	r1, r7, #11
 80056f6:	2364      	movs	r3, #100	; 0x64
 80056f8:	2201      	movs	r2, #1
 80056fa:	f7fd ffe6 	bl	80036ca <HAL_SPI_Transmit>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d119      	bne.n	800573c <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	e010      	b.n	8005730 <RFM95_writeBurstRegister+0x8e>
			{
				//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100); // pdata++
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	1c4b      	adds	r3, r1, #1
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	2364      	movs	r3, #100	; 0x64
 800571a:	2201      	movs	r2, #1
 800571c:	f7fd ffd5 	bl	80036ca <HAL_SPI_Transmit>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 8005724:	7dfb      	ldrb	r3, [r7, #23]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	3301      	adds	r3, #1
 800572e:	613b      	str	r3, [r7, #16]
 8005730:	7abb      	ldrb	r3, [r7, #10]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	429a      	cmp	r2, r3
 8005736:	d3ea      	bcc.n	800570e <RFM95_writeBurstRegister+0x6c>
 8005738:	e000      	b.n	800573c <RFM95_writeBurstRegister+0x9a>
				{
					break;
 800573a:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f7ff ff55 	bl	80055ec <RFM95_setNSSPin>
	}

	return res;
 8005742:	7dfb      	ldrb	r3, [r7, #23]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <RFM95_readRegister>:
 * @param address [in] Register address
 * @param value [out] A pointer to a variable store the value of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *value)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	460b      	mov	r3, r1
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <RFM95_readRegister+0x18>
	{
		return THT_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e025      	b.n	80057b0 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f7ff ff55 	bl	8005614 <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005772:	f107 010b 	add.w	r1, r7, #11
 8005776:	2364      	movs	r3, #100	; 0x64
 8005778:	2201      	movs	r2, #1
 800577a:	f7fd ffa6 	bl	80036ca <HAL_SPI_Transmit>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005786:	2364      	movs	r3, #100	; 0x64
 8005788:	2201      	movs	r2, #1
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	f7fe f8d9 	bl	8003942 <HAL_SPI_Receive>
 8005790:	4603      	mov	r3, r0
 8005792:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff29 	bl	80055ec <RFM95_setNSSPin>
	//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 800579a:	7dfb      	ldrb	r3, [r7, #23]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <RFM95_readRegister+0x58>
	{
		return THT_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	e005      	b.n	80057b0 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d101      	bne.n	80057ae <RFM95_readRegister+0x62>
	{
		return THT_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <RFM95_readRegister+0x64>
	}
	else
	{
		return THT_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
	}
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <RFM95_setHeaderMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param headerMode [in] Header mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me, const uint8_t headerMode)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <RFM95_setHeaderMode+0x16>
	{
		return THT_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e024      	b.n	8005818 <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 80057d6:	f107 030d 	add.w	r3, r7, #13
 80057da:	461a      	mov	r2, r3
 80057dc:	211d      	movs	r1, #29
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff ffb4 	bl	800574c <RFM95_readRegister>
 80057e4:	4603      	mov	r3, r0
 80057e6:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <RFM95_setHeaderMode+0x3a>
	{
		return res;
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	e012      	b.n	8005818 <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t)(headerMode | (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	b25b      	sxtb	r3, r3
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	b25a      	sxtb	r2, r3
 80057fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005800:	4313      	orrs	r3, r2
 8005802:	b25b      	sxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	461a      	mov	r2, r3
 800580a:	211d      	movs	r1, #29
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff15 	bl	800563c <RFM95_writeRegister>
 8005812:	4603      	mov	r3, r0
 8005814:	73bb      	strb	r3, [r7, #14]

	return res;
 8005816:	7bbb      	ldrb	r3, [r7, #14]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <RFM95_setSpreadingFactor>:
	@arg RFLR_MODEMCONFIG2_SF_11
	@arg RFLR_MODEMCONFIG2_SF_12                      // Phải cấu hình thêm LowDataRate
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me, const uint8_t SF)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <RFM95_setSpreadingFactor+0x16>
	{
		return THT_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0ac      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	me->parent.SF = SF >> 4u;
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	091b      	lsrs	r3, r3, #4
 800583a:	b2da      	uxtb	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8005844:	2300      	movs	r3, #0
 8005846:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 8005848:	f107 030d 	add.w	r3, r7, #13
 800584c:	461a      	mov	r2, r3
 800584e:	211e      	movs	r1, #30
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff7b 	bl	800574c <RFM95_readRegister>
 8005856:	4603      	mov	r3, r0
 8005858:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 800585a:	7bbb      	ldrb	r3, [r7, #14]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <RFM95_setSpreadingFactor+0x44>
	{
		return THT_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e095      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	2b60      	cmp	r3, #96	; 0x60
 8005868:	d144      	bne.n	80058f4 <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t)(RFLR_MODEMCONFIG2_SF_6 | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 800586a:	7b7b      	ldrb	r3, [r7, #13]
 800586c:	b25b      	sxtb	r3, r3
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	b25b      	sxtb	r3, r3
 8005874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005878:	b25b      	sxtb	r3, r3
 800587a:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	461a      	mov	r2, r3
 8005880:	211e      	movs	r1, #30
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff feda 	bl	800563c <RFM95_writeRegister>
 8005888:	4603      	mov	r3, r0
 800588a:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	e07c      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8005896:	2101      	movs	r1, #1
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff ff8d 	bl	80057b8 <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 800589e:	f107 030d 	add.w	r3, r7, #13
 80058a2:	461a      	mov	r2, r3
 80058a4:	2131      	movs	r1, #49	; 0x31
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ff50 	bl	800574c <RFM95_readRegister>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73bb      	strb	r3, [r7, #14]
		if (res != THT_OK)
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <RFM95_setSpreadingFactor+0x9a>
		{
			return THT_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e06a      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
		}

		wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF6 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 80058ba:	7b7b      	ldrb	r3, [r7, #13]
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	f023 0307 	bic.w	r3, r3, #7
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	f043 0305 	orr.w	r3, r3, #5
 80058c8:	b25b      	sxtb	r3, r3
 80058ca:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	461a      	mov	r2, r3
 80058d0:	2131      	movs	r1, #49	; 0x31
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff feb2 	bl	800563c <RFM95_writeRegister>
 80058d8:	4603      	mov	r3, r0
 80058da:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	e054      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF6);
 80058e6:	220c      	movs	r2, #12
 80058e8:	2137      	movs	r1, #55	; 0x37
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fea6 	bl	800563c <RFM95_writeRegister>
 80058f0:	4603      	mov	r3, r0
 80058f2:	e04d      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 80058f4:	f107 030d 	add.w	r3, r7, #13
 80058f8:	461a      	mov	r2, r3
 80058fa:	2131      	movs	r1, #49	; 0x31
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff25 	bl	800574c <RFM95_readRegister>
 8005902:	4603      	mov	r3, r0
 8005904:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <RFM95_setSpreadingFactor+0xf0>
	{
		return THT_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e03f      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8005910:	7b7b      	ldrb	r3, [r7, #13]
 8005912:	b25b      	sxtb	r3, r3
 8005914:	f023 0307 	bic.w	r3, r3, #7
 8005918:	b25b      	sxtb	r3, r3
 800591a:	f043 0303 	orr.w	r3, r3, #3
 800591e:	b25b      	sxtb	r3, r3
 8005920:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	461a      	mov	r2, r3
 8005926:	2131      	movs	r1, #49	; 0x31
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fe87 	bl	800563c <RFM95_writeRegister>
 800592e:	4603      	mov	r3, r0
 8005930:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	e029      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	/* 2. Write register address 0x37 to value 0x0A */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF7_TO_SF12);
 800593c:	220a      	movs	r2, #10
 800593e:	2137      	movs	r1, #55	; 0x37
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fe7b 	bl	800563c <RFM95_writeRegister>
 8005946:	4603      	mov	r3, r0
 8005948:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	e01d      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */

	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t)(SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 8005954:	7b7b      	ldrb	r3, [r7, #13]
 8005956:	b25b      	sxtb	r3, r3
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	b25a      	sxtb	r2, r3
 800595e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005962:	4313      	orrs	r3, r2
 8005964:	b25b      	sxtb	r3, r3
 8005966:	73fb      	strb	r3, [r7, #15]
	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	//	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	461a      	mov	r2, r3
 800596c:	211e      	movs	r1, #30
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7ff fe64 	bl	800563c <RFM95_writeRegister>
 8005974:	4603      	mov	r3, r0
 8005976:	73bb      	strb	r3, [r7, #14]

	if (SF == RFLR_MODEMCONFIG2_SF_12 || SF == RFLR_MODEMCONFIG2_SF_11)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2bc0      	cmp	r3, #192	; 0xc0
 800597c:	d002      	beq.n	8005984 <RFM95_setSpreadingFactor+0x164>
 800597e:	78fb      	ldrb	r3, [r7, #3]
 8005980:	2bb0      	cmp	r3, #176	; 0xb0
 8005982:	d104      	bne.n	800598e <RFM95_setSpreadingFactor+0x16e>
	{
		return RFM95_lowDataRateOptimize(me);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f873 	bl	8005a70 <RFM95_lowDataRateOptimize>
 800598a:	4603      	mov	r3, r0
 800598c:	e000      	b.n	8005990 <RFM95_setSpreadingFactor+0x170>
	}

	return res;
 800598e:	7bbb      	ldrb	r3, [r7, #14]
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <RFM95_setBandwidth>:
	@arg RFLR_MODEMCONFIG1_BW_250_KHZ 0x80
	@arg RFLR_MODEMCONFIG1_BW_500_KHZ 0x90
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <RFM95_setBandwidth+0x16>
	{
		return THT_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e027      	b.n	80059fe <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	091b      	lsrs	r3, r3, #4
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 80059c0:	f107 030d 	add.w	r3, r7, #13
 80059c4:	461a      	mov	r2, r3
 80059c6:	211d      	movs	r1, #29
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff febf 	bl	800574c <RFM95_readRegister>
 80059ce:	4603      	mov	r3, r0
 80059d0:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <RFM95_setBandwidth+0x44>
	{
		return THT_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e010      	b.n	80059fe <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t)(BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	b25a      	sxtb	r2, r3
 80059e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	461a      	mov	r2, r3
 80059f4:	211d      	movs	r1, #29
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fe20 	bl	800563c <RFM95_writeRegister>
 80059fc:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <RFM95_setCRCMode>:
 *  @arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 * 	@arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setCRCMode(RFM95_HandleTypeDef *const me, uint8_t CRCMode)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	460b      	mov	r3, r1
 8005a10:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <RFM95_setCRCMode+0x16>
	{
		return THT_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e022      	b.n	8005a62 <RFM95_setCRCMode+0x5c>
	}

	uint8_t rByte = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 8005a24:	f107 030d 	add.w	r3, r7, #13
 8005a28:	461a      	mov	r2, r3
 8005a2a:	211e      	movs	r1, #30
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fe8d 	bl	800574c <RFM95_readRegister>
 8005a32:	4603      	mov	r3, r0
 8005a34:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <RFM95_setCRCMode+0x3a>
	{
		return THT_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e010      	b.n	8005a62 <RFM95_setCRCMode+0x5c>
	}

	wByte = (uint8_t)(CRCMode | (rByte & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK));
 8005a40:	7b7b      	ldrb	r3, [r7, #13]
 8005a42:	b25b      	sxtb	r3, r3
 8005a44:	f023 0304 	bic.w	r3, r3, #4
 8005a48:	b25a      	sxtb	r2, r3
 8005a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
 8005a56:	461a      	mov	r2, r3
 8005a58:	211e      	movs	r1, #30
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff fdee 	bl	800563c <RFM95_writeRegister>
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	0000      	movs	r0, r0
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <RFM95_lowDataRateOptimize>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_lowDataRateOptimize(RFM95_HandleTypeDef *const me)
{
 8005a70:	b5b0      	push	{r4, r5, r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <RFM95_lowDataRateOptimize+0x12>
	{
		return THT_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e076      	b.n	8005b70 <RFM95_lowDataRateOptimize+0x100>
	}
	uint32_t bandwidth = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
	switch (me->parent.BW)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	795b      	ldrb	r3, [r3, #5]
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d00c      	beq.n	8005aa8 <RFM95_lowDataRateOptimize+0x38>
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	dc0d      	bgt.n	8005aae <RFM95_lowDataRateOptimize+0x3e>
 8005a92:	2b07      	cmp	r3, #7
 8005a94:	d002      	beq.n	8005a9c <RFM95_lowDataRateOptimize+0x2c>
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d003      	beq.n	8005aa2 <RFM95_lowDataRateOptimize+0x32>
		break;
	case 9:
		bandwidth = 500000;
		break;
	default:
		break;
 8005a9a:	e008      	b.n	8005aae <RFM95_lowDataRateOptimize+0x3e>
		bandwidth = 125000;
 8005a9c:	4b38      	ldr	r3, [pc, #224]	; (8005b80 <RFM95_lowDataRateOptimize+0x110>)
 8005a9e:	617b      	str	r3, [r7, #20]
		break;
 8005aa0:	e006      	b.n	8005ab0 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 250000;
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <RFM95_lowDataRateOptimize+0x114>)
 8005aa4:	617b      	str	r3, [r7, #20]
		break;
 8005aa6:	e003      	b.n	8005ab0 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 500000;
 8005aa8:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <RFM95_lowDataRateOptimize+0x118>)
 8005aaa:	617b      	str	r3, [r7, #20]
		break;
 8005aac:	e000      	b.n	8005ab0 <RFM95_lowDataRateOptimize+0x40>
		break;
 8005aae:	bf00      	nop
	}

	float Tsymbol = 1000.0 * pow(2, me->parent.SF) / bandwidth;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	791b      	ldrb	r3, [r3, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fd2d 	bl	8000514 <__aeabi_ui2d>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	ec43 2b11 	vmov	d1, r2, r3
 8005ac2:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8005b78 <RFM95_lowDataRateOptimize+0x108>
 8005ac6:	f007 f97d 	bl	800cdc4 <pow>
 8005aca:	ec51 0b10 	vmov	r0, r1, d0
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <RFM95_lowDataRateOptimize+0x11c>)
 8005ad4:	f7fa fd98 	bl	8000608 <__aeabi_dmul>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	6978      	ldr	r0, [r7, #20]
 8005ae2:	f7fa fd17 	bl	8000514 <__aeabi_ui2d>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa feb5 	bl	800085c <__aeabi_ddiv>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fb f87d 	bl	8000bf8 <__aeabi_d2f>
 8005afe:	4603      	mov	r3, r0
 8005b00:	60fb      	str	r3, [r7, #12]
	uint8_t isEnableLDO = 0;
 8005b02:	2300      	movs	r3, #0
 8005b04:	74fb      	strb	r3, [r7, #19]

	if (Tsymbol > 16.0)
 8005b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b0a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8005b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b16:	dd02      	ble.n	8005b1e <RFM95_lowDataRateOptimize+0xae>
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON;
 8005b18:	2308      	movs	r3, #8
 8005b1a:	74fb      	strb	r3, [r7, #19]
 8005b1c:	e001      	b.n	8005b22 <RFM95_lowDataRateOptimize+0xb2>
	}
	else
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_OFF;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	74fb      	strb	r3, [r7, #19]
	}

	uint8_t rByte = 0;
 8005b22:	2300      	movs	r3, #0
 8005b24:	727b      	strb	r3, [r7, #9]
	uint8_t wByte = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	72fb      	strb	r3, [r7, #11]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
 8005b2a:	f107 0309 	add.w	r3, r7, #9
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2126      	movs	r1, #38	; 0x26
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fe0a 	bl	800574c <RFM95_readRegister>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	72bb      	strb	r3, [r7, #10]

	if (res != THT_OK)
 8005b3c:	7abb      	ldrb	r3, [r7, #10]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <RFM95_lowDataRateOptimize+0xd6>
	{
		return THT_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e014      	b.n	8005b70 <RFM95_lowDataRateOptimize+0x100>
	}

	wByte = (uint8_t)(isEnableLDO | (rByte & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK));
 8005b46:	7a7b      	ldrb	r3, [r7, #9]
 8005b48:	b25b      	sxtb	r3, r3
 8005b4a:	f023 0308 	bic.w	r3, r3, #8
 8005b4e:	b25a      	sxtb	r2, r3
 8005b50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	b25b      	sxtb	r3, r3
 8005b58:	72fb      	strb	r3, [r7, #11]
	wByte = (uint8_t)(RFLR_MODEMCONFIG3_AGCAUTO_ON | wByte); // turn on AGC
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	f043 0304 	orr.w	r3, r3, #4
 8005b60:	72fb      	strb	r3, [r7, #11]
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
 8005b62:	7afb      	ldrb	r3, [r7, #11]
 8005b64:	461a      	mov	r2, r3
 8005b66:	2126      	movs	r1, #38	; 0x26
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fd67 	bl	800563c <RFM95_writeRegister>
 8005b6e:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bdb0      	pop	{r4, r5, r7, pc}
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	40000000 	.word	0x40000000
 8005b80:	0001e848 	.word	0x0001e848
 8005b84:	0003d090 	.word	0x0003d090
 8005b88:	0007a120 	.word	0x0007a120
 8005b8c:	408f4000 	.word	0x408f4000

08005b90 <RFM95_setLNA>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8005ba0:	f107 030d 	add.w	r3, r7, #13
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	210c      	movs	r1, #12
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fdcf 	bl	800574c <RFM95_readRegister>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8005bb2:	7bbb      	ldrb	r3, [r7, #14]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <RFM95_setLNA+0x2c>
	{
		return THT_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e00c      	b.n	8005bd6 <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t)(RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 8005bbc:	7b7b      	ldrb	r3, [r7, #13]
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f043 0303 	orr.w	r3, r3, #3
 8005bc4:	b25b      	sxtb	r3, r3
 8005bc6:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	210c      	movs	r1, #12
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff fd34 	bl	800563c <RFM95_writeRegister>
 8005bd4:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_LNA, wByte);
	//	return RFM95_readRegister(me, REG_LR_LNA, &rByte);
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <RFM95_setMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mode [in] Mode is combine of LORA, SLEEP, STANDBY, SYNTHESIZERTX, TRANSMITTER, RECEIVER, SYNTHESIZERRX
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, const uint8_t mode)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <RFM95_setMode+0x16>
	{
		return THT_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e022      	b.n	8005c3a <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 8005bfc:	f107 030d 	add.w	r3, r7, #13
 8005c00:	461a      	mov	r2, r3
 8005c02:	2101      	movs	r1, #1
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff fda1 	bl	800574c <RFM95_readRegister>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <RFM95_setMode+0x3a>
	{
		return THT_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e010      	b.n	8005c3a <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t)(mode | (rByte & 0x70));
 8005c18:	7b7b      	ldrb	r3, [r7, #13]
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c20:	b25a      	sxtb	r2, r3
 8005c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b25b      	sxtb	r3, r3
 8005c2a:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2101      	movs	r1, #1
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fd02 	bl	800563c <RFM95_writeRegister>
 8005c38:	4603      	mov	r3, r0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <RFM95_setFrequency>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param frequency frequency value, ex: 923
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me, uint32_t frequency)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b086      	sub	sp, #24
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	d101      	bne.n	8005c56 <RFM95_setFrequency+0x14>
	{
		return THT_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e02c      	b.n	8005cb0 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	6838      	ldr	r0, [r7, #0]
 8005c5a:	6008      	str	r0, [r1, #0]
	uint64_t frf = (uint64_t)(frequency << 19u) / 32;
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	04c9      	lsls	r1, r1, #19
 8005c60:	0949      	lsrs	r1, r1, #5
 8005c62:	2000      	movs	r0, #0
 8005c64:	460a      	mov	r2, r1
 8005c66:	4603      	mov	r3, r0
 8005c68:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 8005c6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	0c02      	lsrs	r2, r0, #16
 8005c7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005c7e:	0c0b      	lsrs	r3, r1, #16
 8005c80:	b2d3      	uxtb	r3, r2
 8005c82:	733b      	strb	r3, [r7, #12]
 8005c84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	0a02      	lsrs	r2, r0, #8
 8005c92:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005c96:	0a0b      	lsrs	r3, r1, #8
 8005c98:	b2d3      	uxtb	r3, r2
 8005c9a:	737b      	strb	r3, [r7, #13]
					   (uint8_t)(frf >> 0)};
 8005c9c:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 8005c9e:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8005ca0:	f107 020c 	add.w	r2, r7, #12
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	2106      	movs	r1, #6
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff fcfa 	bl	80056a2 <RFM95_writeBurstRegister>
 8005cae:	4603      	mov	r3, r0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <RFM95_transmit>:
 * @param size [in] The size of buffer
 * @param timeout [in] The timeout to terminate transmit
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData, uint8_t size, uint32_t timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <RFM95_transmit+0x1c>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <RFM95_transmit+0x20>
	{
		return THT_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e097      	b.n	8005e08 <RFM95_transmit+0x150>
	}

	uint8_t rByte = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	74bb      	strb	r3, [r7, #18]

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8005ce4:	f107 0312 	add.w	r3, r7, #18
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2101      	movs	r1, #1
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff fd2d 	bl	800574c <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8005cf2:	7cbb      	ldrb	r3, [r7, #18]
 8005cf4:	b25b      	sxtb	r3, r3
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	b25b      	sxtb	r3, r3
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8005d04:	7efb      	ldrb	r3, [r7, #27]
 8005d06:	461a      	mov	r2, r3
 8005d08:	2101      	movs	r1, #1
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff fc96 	bl	800563c <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d103      	bne.n	8005d20 <RFM95_transmit+0x68>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8005d18:	2101      	movs	r1, #1
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fd4c 	bl	80057b8 <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 8005d20:	f107 0313 	add.w	r3, r7, #19
 8005d24:	461a      	mov	r2, r3
 8005d26:	210e      	movs	r1, #14
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f7ff fd0f 	bl	800574c <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8005d2e:	7cfb      	ldrb	r3, [r7, #19]
 8005d30:	461a      	mov	r2, r3
 8005d32:	210d      	movs	r1, #13
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff fc81 	bl	800563c <RFM95_writeRegister>

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2122      	movs	r1, #34	; 0x22
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff fc7b 	bl	800563c <RFM95_writeRegister>
	uint8_t temp = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 8005d4a:	f107 0311 	add.w	r3, r7, #17
 8005d4e:	461a      	mov	r2, r3
 8005d50:	2122      	movs	r1, #34	; 0x22
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7ff fcfa 	bl	800574c <RFM95_readRegister>

	(void)temp;

	for (size_t i = 0; i < size; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e00b      	b.n	8005d76 <RFM95_transmit+0xbe>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	60ba      	str	r2, [r7, #8]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	461a      	mov	r2, r3
 8005d68:	2100      	movs	r1, #0
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff fc66 	bl	800563c <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	3301      	adds	r3, #1
 8005d74:	61fb      	str	r3, [r7, #28]
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3ef      	bcc.n	8005d5e <RFM95_transmit+0xa6>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 8005d7e:	2383      	movs	r3, #131	; 0x83
 8005d80:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8005d82:	7efb      	ldrb	r3, [r7, #27]
 8005d84:	461a      	mov	r2, r3
 8005d86:	2101      	movs	r1, #1
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff fc57 	bl	800563c <RFM95_writeRegister>

	HAL_Delay(1000);
 8005d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d92:	f7fc f8cb 	bl	8001f2c <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8005d96:	f7fc f8bd 	bl	8001f14 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8005d9c:	e02b      	b.n	8005df6 <RFM95_transmit+0x13e>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8005d9e:	f107 0313 	add.w	r3, r7, #19
 8005da2:	461a      	mov	r2, r3
 8005da4:	2112      	movs	r1, #18
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fcd0 	bl	800574c <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8005dac:	7cfb      	ldrb	r3, [r7, #19]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01f      	beq.n	8005df6 <RFM95_transmit+0x13e>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_TXDONE | (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
 8005db6:	2308      	movs	r3, #8
 8005db8:	76fb      	strb	r3, [r7, #27]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8005dba:	7efb      	ldrb	r3, [r7, #27]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2112      	movs	r1, #18
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff fc3b 	bl	800563c <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8005dc6:	f107 0313 	add.w	r3, r7, #19
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2112      	movs	r1, #18
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fcbc 	bl	800574c <RFM95_readRegister>

			wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8005dd4:	7cbb      	ldrb	r3, [r7, #18]
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	f023 0307 	bic.w	r3, r3, #7
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	f043 0301 	orr.w	r3, r3, #1
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	76fb      	strb	r3, [r7, #27]
			return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8005de6:	7efb      	ldrb	r3, [r7, #27]
 8005de8:	461a      	mov	r2, r3
 8005dea:	2101      	movs	r1, #1
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fc25 	bl	800563c <RFM95_writeRegister>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e008      	b.n	8005e08 <RFM95_transmit+0x150>
	while (HAL_GetTick() - tickStart <= timeout)
 8005df6:	f7fc f88d 	bl	8001f14 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d2cb      	bcs.n	8005d9e <RFM95_transmit+0xe6>
		}
	}

	return THT_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3720      	adds	r7, #32
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <RFM95_startReceiveIT>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_startReceiveIT(RFM95_HandleTypeDef *const me)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <RFM95_startReceiveIT+0x12>
	{
		return THT_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e05a      	b.n	8005ed8 <RFM95_startReceiveIT+0xc8>
	}
	/* Mapping DIO0 to rxDone */
	RFM95_mappingDIO0(me, RFLR_DIOMAPPING1_DIO0_00);
 8005e22:	2100      	movs	r1, #0
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa8a 	bl	800633e <RFM95_mappingDIO0>

	uint8_t rByte = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73bb      	strb	r3, [r7, #14]
	uint8_t wByte = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8005e32:	f107 030e 	add.w	r3, r7, #14
 8005e36:	461a      	mov	r2, r3
 8005e38:	2131      	movs	r1, #49	; 0x31
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fc86 	bl	800574c <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	795b      	ldrb	r3, [r3, #5]
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d104      	bne.n	8005e52 <RFM95_startReceiveIT+0x42>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e4e:	73fb      	strb	r3, [r7, #15]
 8005e50:	e003      	b.n	8005e5a <RFM95_startReceiveIT+0x4a>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8005e52:	7bbb      	ldrb	r3, [r7, #14]
 8005e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e58:	73fb      	strb	r3, [r7, #15]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2131      	movs	r1, #49	; 0x31
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fbeb 	bl	800563c <RFM95_writeRegister>

	switch (me->parent.BW)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	795b      	ldrb	r3, [r3, #5]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	dc2a      	bgt.n	8005ec4 <RFM95_startReceiveIT+0xb4>
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	da1d      	bge.n	8005eae <RFM95_startReceiveIT+0x9e>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <RFM95_startReceiveIT+0x72>
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	db24      	blt.n	8005ec4 <RFM95_startReceiveIT+0xb4>
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d821      	bhi.n	8005ec4 <RFM95_startReceiveIT+0xb4>
 8005e80:	e00a      	b.n	8005e98 <RFM95_startReceiveIT+0x88>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8005e82:	2248      	movs	r2, #72	; 0x48
 8005e84:	2127      	movs	r1, #39	; 0x27
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fbd8 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	213f      	movs	r1, #63	; 0x3f
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fbd3 	bl	800563c <RFM95_writeRegister>
		break;
 8005e96:	e016      	b.n	8005ec6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8005e98:	2244      	movs	r2, #68	; 0x44
 8005e9a:	2127      	movs	r1, #39	; 0x27
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fbcd 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	213f      	movs	r1, #63	; 0x3f
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff fbc8 	bl	800563c <RFM95_writeRegister>
		break;
 8005eac:	e00b      	b.n	8005ec6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	2127      	movs	r1, #39	; 0x27
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fbc2 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	213f      	movs	r1, #63	; 0x3f
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fbbd 	bl	800563c <RFM95_writeRegister>
		break;
 8005ec2:	e000      	b.n	8005ec6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_500:
	default:
		break;
 8005ec4:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8005ec6:	2385      	movs	r3, #133	; 0x85
 8005ec8:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2101      	movs	r1, #1
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fbb3 	bl	800563c <RFM95_writeRegister>
 8005ed6:	4603      	mov	r3, r0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <RFM95_receiveIT>:
 * @param pBuffer [out] A pointer to buffer used to store data
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveIT(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <RFM95_receiveIT+0x1a>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <RFM95_receiveIT+0x1e>
	{
		return THT_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e06b      	b.n	8005fd6 <RFM95_receiveIT+0xf6>
	}
	uint8_t rByte = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	74bb      	strb	r3, [r7, #18]
	uint8_t wByte = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	74fb      	strb	r3, [r7, #19]

	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8005f06:	2181      	movs	r1, #129	; 0x81
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff fe68 	bl	8005bde <RFM95_setMode>

	RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8005f0e:	f107 0312 	add.w	r3, r7, #18
 8005f12:	461a      	mov	r2, r3
 8005f14:	2112      	movs	r1, #18
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fc18 	bl	800574c <RFM95_readRegister>

	if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8005f1c:	7cbb      	ldrb	r3, [r7, #18]
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	da08      	bge.n	8005f36 <RFM95_receiveIT+0x56>
	{
		/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8005f28:	7cfb      	ldrb	r3, [r7, #19]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2112      	movs	r1, #18
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff fb84 	bl	800563c <RFM95_writeRegister>
 8005f34:	e04e      	b.n	8005fd4 <RFM95_receiveIT+0xf4>
	}
	else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8005f36:	7cbb      	ldrb	r3, [r7, #18]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d049      	beq.n	8005fd4 <RFM95_receiveIT+0xf4>
	{
		/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8005f44:	7cfb      	ldrb	r3, [r7, #19]
 8005f46:	461a      	mov	r2, r3
 8005f48:	2112      	movs	r1, #18
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fb76 	bl	800563c <RFM95_writeRegister>

		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8005f50:	f107 0312 	add.w	r3, r7, #18
 8005f54:	461a      	mov	r2, r3
 8005f56:	2112      	movs	r1, #18
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f7ff fbf7 	bl	800574c <RFM95_readRegister>

		/* Payload CRC not error - read data */
		if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8005f5e:	7cbb      	ldrb	r3, [r7, #18]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d12d      	bne.n	8005fc4 <RFM95_receiveIT+0xe4>
		{
			/* Read first byte position of last packet */
			RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8005f68:	f107 0312 	add.w	r3, r7, #18
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2110      	movs	r1, #16
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fbeb 	bl	800574c <RFM95_readRegister>

			/* */
			RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8005f76:	7cbb      	ldrb	r3, [r7, #18]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	210d      	movs	r1, #13
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7ff fb5d 	bl	800563c <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8005f82:	f107 0312 	add.w	r3, r7, #18
 8005f86:	461a      	mov	r2, r3
 8005f88:	2113      	movs	r1, #19
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff fbde 	bl	800574c <RFM95_readRegister>
			/* May be use read burst or fifo read */

			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e00a      	b.n	8005fac <RFM95_receiveIT+0xcc>
			{
				RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	60ba      	str	r2, [r7, #8]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fbd3 	bl	800574c <RFM95_readRegister>
			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	7cbb      	ldrb	r3, [r7, #18]
 8005fae:	79fa      	ldrb	r2, [r7, #7]
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	bf28      	it	cs
 8005fb4:	4613      	movcs	r3, r2
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d3ea      	bcc.n	8005f96 <RFM95_receiveIT+0xb6>
			}

			return THT_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e008      	b.n	8005fd6 <RFM95_receiveIT+0xf6>
		}
		else
		{
			/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8005fc4:	2320      	movs	r3, #32
 8005fc6:	74fb      	strb	r3, [r7, #19]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8005fc8:	7cfb      	ldrb	r3, [r7, #19]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2112      	movs	r1, #18
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff fb34 	bl	800563c <RFM95_writeRegister>
		}
	}

	return THT_ERROR;
 8005fd4:	2301      	movs	r3, #1
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <RFM95_receiveContinuous>:
 * @param size [in] The size of the bufffer
 * @param timeout [in] Timeout
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveContinuous(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size, uint32_t timeout)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b088      	sub	sp, #32
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <RFM95_receiveContinuous+0x1c>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <RFM95_receiveContinuous+0x20>
	{
		return THT_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0e7      	b.n	80061ce <RFM95_receiveContinuous+0x1f0>
	}

	uint8_t rByte = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	77fb      	strb	r3, [r7, #31]
	uint8_t currentMode = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	74bb      	strb	r3, [r7, #18]

	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 800600a:	f107 0312 	add.w	r3, r7, #18
 800600e:	461a      	mov	r2, r3
 8006010:	2101      	movs	r1, #1
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f7ff fb9a 	bl	800574c <RFM95_readRegister>

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8006018:	f107 0313 	add.w	r3, r7, #19
 800601c:	461a      	mov	r2, r3
 800601e:	2131      	movs	r1, #49	; 0x31
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fb93 	bl	800574c <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	795b      	ldrb	r3, [r3, #5]
 800602a:	2b09      	cmp	r3, #9
 800602c:	d104      	bne.n	8006038 <RFM95_receiveContinuous+0x5a>
	{
		wByte = (0x80 | (rByte & 0x7F));
 800602e:	7cfb      	ldrb	r3, [r7, #19]
 8006030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006034:	77fb      	strb	r3, [r7, #31]
 8006036:	e003      	b.n	8006040 <RFM95_receiveContinuous+0x62>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800603e:	77fb      	strb	r3, [r7, #31]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8006040:	7ffb      	ldrb	r3, [r7, #31]
 8006042:	461a      	mov	r2, r3
 8006044:	2131      	movs	r1, #49	; 0x31
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff faf8 	bl	800563c <RFM95_writeRegister>

	switch (me->parent.BW)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	795b      	ldrb	r3, [r3, #5]
 8006050:	2b08      	cmp	r3, #8
 8006052:	dc2a      	bgt.n	80060aa <RFM95_receiveContinuous+0xcc>
 8006054:	2b06      	cmp	r3, #6
 8006056:	da1d      	bge.n	8006094 <RFM95_receiveContinuous+0xb6>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <RFM95_receiveContinuous+0x8a>
 800605c:	2b00      	cmp	r3, #0
 800605e:	db24      	blt.n	80060aa <RFM95_receiveContinuous+0xcc>
 8006060:	3b01      	subs	r3, #1
 8006062:	2b04      	cmp	r3, #4
 8006064:	d821      	bhi.n	80060aa <RFM95_receiveContinuous+0xcc>
 8006066:	e00a      	b.n	800607e <RFM95_receiveContinuous+0xa0>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8006068:	2248      	movs	r2, #72	; 0x48
 800606a:	2127      	movs	r1, #39	; 0x27
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fae5 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8006072:	2200      	movs	r2, #0
 8006074:	213f      	movs	r1, #63	; 0x3f
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff fae0 	bl	800563c <RFM95_writeRegister>
		break;
 800607c:	e016      	b.n	80060ac <RFM95_receiveContinuous+0xce>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 800607e:	2244      	movs	r2, #68	; 0x44
 8006080:	2127      	movs	r1, #39	; 0x27
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fada 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8006088:	2200      	movs	r2, #0
 800608a:	213f      	movs	r1, #63	; 0x3f
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fad5 	bl	800563c <RFM95_writeRegister>
		break;
 8006092:	e00b      	b.n	80060ac <RFM95_receiveContinuous+0xce>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	2127      	movs	r1, #39	; 0x27
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff facf 	bl	800563c <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 800609e:	2200      	movs	r2, #0
 80060a0:	213f      	movs	r1, #63	; 0x3f
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff faca 	bl	800563c <RFM95_writeRegister>
		break;
 80060a8:	e000      	b.n	80060ac <RFM95_receiveContinuous+0xce>
	case LORA_BW_500:
	default:
		break;
 80060aa:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 80060ac:	2385      	movs	r3, #133	; 0x85
 80060ae:	77fb      	strb	r3, [r7, #31]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 80060b0:	7ffb      	ldrb	r3, [r7, #31]
 80060b2:	461a      	mov	r2, r3
 80060b4:	2101      	movs	r1, #1
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fac0 	bl	800563c <RFM95_writeRegister>

	uint32_t tickStart = HAL_GetTick();
 80060bc:	f7fb ff2a 	bl	8001f14 <HAL_GetTick>
 80060c0:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 80060c2:	e07a      	b.n	80061ba <RFM95_receiveContinuous+0x1dc>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 80060c4:	f107 0313 	add.w	r3, r7, #19
 80060c8:	461a      	mov	r2, r3
 80060ca:	2112      	movs	r1, #18
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff fb3d 	bl	800574c <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 80060d2:	7cfb      	ldrb	r3, [r7, #19]
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da0e      	bge.n	80060f8 <RFM95_receiveContinuous+0x11a>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 80060da:	7cbb      	ldrb	r3, [r7, #18]
 80060dc:	461a      	mov	r2, r3
 80060de:	2101      	movs	r1, #1
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff faab 	bl	800563c <RFM95_writeRegister>
			/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 80060ea:	7ffb      	ldrb	r3, [r7, #31]
 80060ec:	461a      	mov	r2, r3
 80060ee:	2112      	movs	r1, #18
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff faa3 	bl	800563c <RFM95_writeRegister>
 80060f6:	e060      	b.n	80061ba <RFM95_receiveContinuous+0x1dc>
		}
		else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 80060f8:	7cfb      	ldrb	r3, [r7, #19]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d05b      	beq.n	80061ba <RFM95_receiveContinuous+0x1dc>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8006102:	7cbb      	ldrb	r3, [r7, #18]
 8006104:	461a      	mov	r2, r3
 8006106:	2101      	movs	r1, #1
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff fa97 	bl	800563c <RFM95_writeRegister>

			/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 800610e:	2340      	movs	r3, #64	; 0x40
 8006110:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8006112:	7ffb      	ldrb	r3, [r7, #31]
 8006114:	461a      	mov	r2, r3
 8006116:	2112      	movs	r1, #18
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff fa8f 	bl	800563c <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 800611e:	f107 0313 	add.w	r3, r7, #19
 8006122:	461a      	mov	r2, r3
 8006124:	2112      	movs	r1, #18
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fb10 	bl	800574c <RFM95_readRegister>

			/* Payload CRC not error - read data */
			if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d133      	bne.n	800619e <RFM95_receiveContinuous+0x1c0>
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8006136:	7cbb      	ldrb	r3, [r7, #18]
 8006138:	461a      	mov	r2, r3
 800613a:	2101      	movs	r1, #1
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fa7d 	bl	800563c <RFM95_writeRegister>

				/* Read first byte position of last packet */
				RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8006142:	f107 0313 	add.w	r3, r7, #19
 8006146:	461a      	mov	r2, r3
 8006148:	2110      	movs	r1, #16
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f7ff fafe 	bl	800574c <RFM95_readRegister>

				/* */
				RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	461a      	mov	r2, r3
 8006154:	210d      	movs	r1, #13
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff fa70 	bl	800563c <RFM95_writeRegister>

				RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 800615c:	f107 0313 	add.w	r3, r7, #19
 8006160:	461a      	mov	r2, r3
 8006162:	2113      	movs	r1, #19
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f7ff faf1 	bl	800574c <RFM95_readRegister>
				/* May be use read burst or fifo read */

				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 800616a:	2300      	movs	r3, #0
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e00a      	b.n	8006186 <RFM95_receiveContinuous+0x1a8>
				{
					RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	60ba      	str	r2, [r7, #8]
 8006176:	461a      	mov	r2, r3
 8006178:	2100      	movs	r1, #0
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fae6 	bl	800574c <RFM95_readRegister>
				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	3301      	adds	r3, #1
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	7cfb      	ldrb	r3, [r7, #19]
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	4293      	cmp	r3, r2
 800618c:	bf28      	it	cs
 800618e:	4613      	movcs	r3, r2
 8006190:	b2db      	uxtb	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	4293      	cmp	r3, r2
 8006198:	d3ea      	bcc.n	8006170 <RFM95_receiveContinuous+0x192>
				}

				return THT_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e017      	b.n	80061ce <RFM95_receiveContinuous+0x1f0>
			}
			else
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 800619e:	7cbb      	ldrb	r3, [r7, #18]
 80061a0:	461a      	mov	r2, r3
 80061a2:	2101      	movs	r1, #1
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f7ff fa49 	bl	800563c <RFM95_writeRegister>
				/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
				wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 80061aa:	2320      	movs	r3, #32
 80061ac:	77fb      	strb	r3, [r7, #31]
				RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	461a      	mov	r2, r3
 80061b2:	2112      	movs	r1, #18
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fa41 	bl	800563c <RFM95_writeRegister>
	while (HAL_GetTick() - tickStart <= timeout)
 80061ba:	f7fb feab 	bl	8001f14 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	f4bf af7c 	bcs.w	80060c4 <RFM95_receiveContinuous+0xe6>
			}
		}
	}

	return THT_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <RFM95_reset>:
 * @note When module is power on, call this function to reset the module
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d01f      	beq.n	8006224 <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ec:	2200      	movs	r2, #0
 80061ee:	4619      	mov	r1, r3
 80061f0:	f7fc fd58 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fb fe99 	bl	8001f2c <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	2201      	movs	r2, #1
 8006204:	4619      	mov	r1, r3
 8006206:	f7fc fd4d 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800620a:	200a      	movs	r0, #10
 800620c:	f7fb fe8e 	bl	8001f2c <HAL_Delay>

	uint8_t rByte = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8006214:	f107 030f 	add.w	r3, r7, #15
 8006218:	461a      	mov	r2, r3
 800621a:	2142      	movs	r1, #66	; 0x42
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fa95 	bl	800574c <RFM95_readRegister>
 8006222:	e000      	b.n	8006226 <RFM95_reset+0x50>
		return;
 8006224:	bf00      	nop

	if (rByte != 0x12)
	{
		//		while(1);
	}
}
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <RFM95_setRFPowerAmplifier>:
 *  @arg RFLR_PACONFIG_PASELECT_RFO
 * @param Pout Power value
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me, uint8_t paSelect, uint8_t Pout)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	70fb      	strb	r3, [r7, #3]
 8006238:	4613      	mov	r3, r2
 800623a:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <RFM95_setRFPowerAmplifier+0x1a>
	{
		return THT_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e044      	b.n	80062d0 <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST &&
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	2b80      	cmp	r3, #128	; 0x80
 8006252:	d11e      	bne.n	8006292 <RFM95_setRFPowerAmplifier+0x66>
 8006254:	78bb      	ldrb	r3, [r7, #2]
 8006256:	2b0e      	cmp	r3, #14
 8006258:	d91b      	bls.n	8006292 <RFM95_setRFPowerAmplifier+0x66>
		((Pout >= 15) && (Pout <= 20)))
 800625a:	78bb      	ldrb	r3, [r7, #2]
 800625c:	2b14      	cmp	r3, #20
 800625e:	d818      	bhi.n	8006292 <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8006260:	78bb      	ldrb	r3, [r7, #2]
 8006262:	2b11      	cmp	r3, #17
 8006264:	d906      	bls.n	8006274 <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8006266:	2207      	movs	r2, #7
 8006268:	214d      	movs	r1, #77	; 0x4d
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff f9e6 	bl	800563c <RFM95_writeRegister>
			Pout = 17;
 8006270:	2311      	movs	r3, #17
 8006272:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8006274:	78bb      	ldrb	r3, [r7, #2]
 8006276:	3b02      	subs	r3, #2
 8006278:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | outputPower);
 800627a:	78fa      	ldrb	r2, [r7, #3]
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	4313      	orrs	r3, r2
 8006280:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	461a      	mov	r2, r3
 8006286:	2109      	movs	r1, #9
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff f9d7 	bl	800563c <RFM95_writeRegister>
 800628e:	4603      	mov	r3, r0
 8006290:	e01e      	b.n	80062d0 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO &&
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d11a      	bne.n	80062ce <RFM95_setRFPowerAmplifier+0xa2>
 8006298:	78bb      	ldrb	r3, [r7, #2]
 800629a:	2b0e      	cmp	r3, #14
 800629c:	d817      	bhi.n	80062ce <RFM95_setRFPowerAmplifier+0xa2>
			 ((Pout >= 0) && (Pout <= 14)))
	{
		uint8_t maxPower = 7; // chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 800629e:	2307      	movs	r3, #7
 80062a0:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 80062a2:	78bb      	ldrb	r3, [r7, #2]
 80062a4:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | (maxPower << 4) | outputPower);
 80062a6:	7b7b      	ldrb	r3, [r7, #13]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	b25a      	sxtb	r2, r3
 80062ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b25a      	sxtb	r2, r3
 80062b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	b25b      	sxtb	r3, r3
 80062bc:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	461a      	mov	r2, r3
 80062c2:	2109      	movs	r1, #9
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff f9b9 	bl	800563c <RFM95_writeRegister>
 80062ca:	4603      	mov	r3, r0
 80062cc:	e000      	b.n	80062d0 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return THT_OK;
 80062ce:	2300      	movs	r3, #0
	}
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <RFM95_getRSSI>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return int16_t
 */
int16_t RFM95_getRSSI(RFM95_HandleTypeDef *const me)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <RFM95_getRSSI+0x12>
	{
		return 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e025      	b.n	8006336 <RFM95_getRSSI+0x5e>
	}

	uint8_t rByte = 0;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73bb      	strb	r3, [r7, #14]
	THT_StatusTypeDef res;
	res = RFM95_readRegister(me, REG_LR_PKTRSSIVALUE, &rByte);
 80062ee:	f107 030e 	add.w	r3, r7, #14
 80062f2:	461a      	mov	r2, r3
 80062f4:	211a      	movs	r1, #26
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fa28 	bl	800574c <RFM95_readRegister>
 80062fc:	4603      	mov	r3, r0
 80062fe:	73fb      	strb	r3, [r7, #15]
		RF_UHF_BAND = 860,
		RF_RSSI_UHL_OFFSET = 157,
		RF_RSSI_UFL_OFFSET = 164,
	};

	if (THT_OK == res)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <RFM95_getRSSI+0x5c>
	{
		if (me->parent.freq >= RF_UHF_BAND)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800630e:	d305      	bcc.n	800631c <RFM95_getRSSI+0x44>
		{
			return rByte - RF_RSSI_UHL_OFFSET;
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b9d      	subs	r3, #157	; 0x9d
 8006316:	b29b      	uxth	r3, r3
 8006318:	b21b      	sxth	r3, r3
 800631a:	e00c      	b.n	8006336 <RFM95_getRSSI+0x5e>
		}
		else if (me->parent.freq <= RF_ULF_BAND)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f240 220d 	movw	r2, #525	; 0x20d
 8006324:	4293      	cmp	r3, r2
 8006326:	d805      	bhi.n	8006334 <RFM95_getRSSI+0x5c>
		{
			return rByte - RF_RSSI_UFL_OFFSET;
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	b29b      	uxth	r3, r3
 800632c:	3ba4      	subs	r3, #164	; 0xa4
 800632e:	b29b      	uxth	r3, r3
 8006330:	b21b      	sxth	r3, r3
 8006332:	e000      	b.n	8006336 <RFM95_getRSSI+0x5e>
		}
	}

	return 0;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <RFM95_mappingDIO0>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mappingMode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_mappingDIO0(RFM95_HandleTypeDef *const me, uint8_t mappingMode)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <RFM95_mappingDIO0+0x16>
	{
		return THT_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e00c      	b.n	800636e <RFM95_mappingDIO0+0x30>
	}
	uint8_t wByte = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]

	wByte = (uint8_t)(mappingMode | RFLR_DIOMAPPING1_DIO0_MASK);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800635e:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_DIOMAPPING1, wByte);
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	461a      	mov	r2, r3
 8006364:	2140      	movs	r1, #64	; 0x40
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff f968 	bl	800563c <RFM95_writeRegister>
 800636c:	4603      	mov	r3, r0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <RFM95_init>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_init(RFM95_HandleTypeDef *const me)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <RFM95_init+0x12>
	{
		return THT_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e027      	b.n	80063d8 <RFM95_init+0x62>
	}

//	RFM95_powerOn(me);
	HAL_Delay(100);
 8006388:	2064      	movs	r0, #100	; 0x64
 800638a:	f7fb fdcf 	bl	8001f2c <HAL_Delay>
	RFM95_reset(me);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff ff21 	bl	80061d6 <RFM95_reset>
	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP | RFLR_OPMODE_FREQMODE_ACCESS_HF);
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff fc21 	bl	8005bde <RFM95_setMode>
	RFM95_setFrequency(me, 915);
 800639c:	f240 3193 	movw	r1, #915	; 0x393
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fc4e 	bl	8005c42 <RFM95_setFrequency>
	RFM95_setBandwidth(me, RFLR_MODEMCONFIG1_BW_125_KHZ);
 80063a6:	2170      	movs	r1, #112	; 0x70
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff faf5 	bl	8005998 <RFM95_setBandwidth>
	RFM95_setCRCMode(me, RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON);
 80063ae:	2104      	movs	r1, #4
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fb28 	bl	8005a06 <RFM95_setCRCMode>
	RFM95_setLNA(me);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fbea 	bl	8005b90 <RFM95_setLNA>
	RFM95_setSpreadingFactor(me, RFLR_MODEMCONFIG2_SF_10);
 80063bc:	21a0      	movs	r1, #160	; 0xa0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fa2e 	bl	8005820 <RFM95_setSpreadingFactor>
	RFM95_setRFPowerAmplifier(me, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 80063c4:	2214      	movs	r2, #20
 80063c6:	2180      	movs	r1, #128	; 0x80
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff ff2f 	bl	800622c <RFM95_setRFPowerAmplifier>

	return RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 80063ce:	2181      	movs	r1, #129	; 0x81
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff fc04 	bl	8005bde <RFM95_setMode>
 80063d6:	4603      	mov	r3, r0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HTTP_init>:
 * @param URIType [out] URI
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef HTTP_init(SIM_HTTPTypeDef *const me, const char *pURL,
		uint8_t URLSize, uint8_t URIType)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	4611      	mov	r1, r2
 80063ec:	461a      	mov	r2, r3
 80063ee:	460b      	mov	r3, r1
 80063f0:	71fb      	strb	r3, [r7, #7]
 80063f2:	4613      	mov	r3, r2
 80063f4:	71bb      	strb	r3, [r7, #6]
	if (me == NULL || pURL == NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HTTP_init+0x22>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HTTP_init+0x26>
	{
		return THT_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e01f      	b.n	8006446 <HTTP_init+0x66>
	}
	(void) URIType;

	memset(me->url, '\0', sizeof(me->url));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	22c8      	movs	r2, #200	; 0xc8
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f003 f904 	bl	800961c <memset>
	memset(me->type, '\0', sizeof(me->type));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	33c9      	adds	r3, #201	; 0xc9
 8006418:	2214      	movs	r2, #20
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f003 f8fd 	bl	800961c <memset>
	snprintf(me->url, sizeof(me->url), "%s", pURL);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1c58      	adds	r0, r3, #1
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a09      	ldr	r2, [pc, #36]	; (8006450 <HTTP_init+0x70>)
 800642a:	21c8      	movs	r1, #200	; 0xc8
 800642c:	f002 ffca 	bl	80093c4 <sniprintf>
	memcpy(me->type, HTTP_CONTENT_TYPE, strlen(HTTP_CONTENT_TYPE));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	33c9      	adds	r3, #201	; 0xc9
 8006434:	2210      	movs	r2, #16
 8006436:	4907      	ldr	r1, [pc, #28]	; (8006454 <HTTP_init+0x74>)
 8006438:	4618      	mov	r0, r3
 800643a:	f003 f9ee 	bl	800981a <memcpy>
	me->method = SIM_HTTP_POST;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	0800ddb4 	.word	0x0800ddb4
 8006454:	0800ddb8 	.word	0x0800ddb8

08006458 <SIM_getData>:
 * 				@arg SIM_DR_IMEI
 * 				@arg SIM_DR_TIME
 * @param [out] pData a pointer to SIM data structure
 */
THT_StatusTypeDef SIM_getData(SIM_HandleTypeDef *const me, uint32_t data, SIM_DataTypeDef *pData)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <SIM_getData+0x16>
	{
		return THT_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e054      	b.n	8006518 <SIM_getData+0xc0>
	}

	if ((data & SIM_DR_RSSI) == SIM_DR_RSSI)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d009      	beq.n	800648c <SIM_getData+0x34>
	{
		pData->rssi = (*me->simGetRSSI)(me);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	4798      	blx	r3
 8006482:	4603      	mov	r3, r0
 8006484:	b21a      	sxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if ((data & SIM_DR_NWTYPE) == SIM_DR_NWTYPE)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d008      	beq.n	80064a8 <SIM_getData+0x50>
	{
		(*me->simGetNwtype)(me, pData->network, sizeof(pData->network));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	f102 0133 	add.w	r1, r2, #51	; 0x33
 80064a2:	2210      	movs	r2, #16
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	4798      	blx	r3
	}
	if ((data & SIM_DR_SIMPHONE) == SIM_DR_SIMPHONE)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d006      	beq.n	80064c0 <SIM_getData+0x68>
	{
		(*me->simGetSimPhone)(me, pData->simPhone, sizeof(pData->simPhone));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80064b8:	6879      	ldr	r1, [r7, #4]
 80064ba:	220d      	movs	r2, #13
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	4798      	blx	r3
	}
	if ((data & SIM_DR_IMEI) == SIM_DR_IMEI)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <SIM_getData+0x84>
	{
		(*me->simGetIMEI)(me, pData->imei, sizeof(pData->imei));
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80064d6:	2210      	movs	r2, #16
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	4798      	blx	r3
	}
	if ((data & SIM_DR_TIME) == SIM_DR_TIME)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <SIM_getData+0xa0>
	{
		(*me->simGetLocalTime)(me, pData->timezone, sizeof(pData->timezone));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f102 010d 	add.w	r1, r2, #13
 80064f2:	2216      	movs	r2, #22
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	4798      	blx	r3
	}
	if ((data & SIM_DR_TEMP) == SIM_DR_TEMP)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <SIM_getData+0xbe>
	{
		pData->temp = (*me->simGetTemperature)(me);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	4798      	blx	r3
 800650c:	4603      	mov	r3, r0
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	return THT_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SIM_init>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_init(SIM_HandleTypeDef *const me)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <SIM_init+0x12>
	{
		return THT_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e005      	b.n	800653e <SIM_init+0x1e>
	}

	return (*me->simInit)(me);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <SIM_setFunction>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setFunction(SIM_HandleTypeDef *const me, uint8_t mode)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <SIM_setFunction+0x16>
	{
		return THT_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e007      	b.n	800656c <SIM_setFunction+0x26>
	}

	return (*me->simSetFunction)(me, mode);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	4611      	mov	r1, r2
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
 800656a:	4603      	mov	r3, r0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <SIM_checkEvent>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param size
 */
void SIM_checkEvent(SIM_HandleTypeDef *const me, uint16_t size)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <SIM_checkEvent+0x22>
	{
		return;
	}

	(*me->simCheckEvent)(me, size);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 800658c:	887a      	ldrh	r2, [r7, #2]
 800658e:	4611      	mov	r1, r2
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
 8006594:	e000      	b.n	8006598 <SIM_checkEvent+0x24>
		return;
 8006596:	bf00      	nop
}
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <SIM_getLocalTime>:
 * @param pTime
 * @param size
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_getLocalTime(SIM_HandleTypeDef *const me, char pTime[], uint8_t size)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	4613      	mov	r3, r2
 80065aa:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <SIM_getLocalTime+0x1a>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <SIM_getLocalTime+0x1e>
	{
		return THT_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e007      	b.n	80065cc <SIM_getLocalTime+0x2e>
	}

	return (*me->simGetLocalTime)(me, pTime, size);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80065c2:	79fa      	ldrb	r2, [r7, #7]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3
 80065ca:	4603      	mov	r3, r0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SIM_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setLocalTimeAuto(SIM_HandleTypeDef *const me)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <SIM_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e005      	b.n	80065f2 <SIM_setLocalTimeAuto+0x1e>
	}

	return (*me->simSetLocalTimeAuto)(me);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	4798      	blx	r3
 80065f0:	4603      	mov	r3, r0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <SIM_sendHTTP>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param pHTTP
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_sendHTTP(SIM_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	if (me == NULL || pHTTP == NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <SIM_sendHTTP+0x16>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <SIM_sendHTTP+0x1a>
	{
		return THT_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e029      	b.n	800666a <SIM_sendHTTP+0x6e>

	printf("HTTP request information:\n"
			"URL: %s\n"
			"Content Type: %s\n"
			"Method: %u\n"
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
	printf("HTTP request information:\n"
 8006624:	4618      	mov	r0, r3
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	33dd      	adds	r3, #221	; 0xdd
	printf("HTTP request information:\n"
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4603      	mov	r3, r0
 800662e:	4811      	ldr	r0, [pc, #68]	; (8006674 <SIM_sendHTTP+0x78>)
 8006630:	f002 fe52 	bl	80092d8 <iprintf>

	THT_StatusTypeDef res = (*me->simSendHTTP)(me, pHTTP);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]

	printf("HTTP response information \n"
			"ErrorCode: %d\n"
			"Length: %lu\n"
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
	printf("HTTP response information \n"
 800664a:	4619      	mov	r1, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
	printf("HTTP response information \n"
 8006658:	4807      	ldr	r0, [pc, #28]	; (8006678 <SIM_sendHTTP+0x7c>)
 800665a:	f002 fe3d 	bl	80092d8 <iprintf>

	if (THT_OK != res)
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <SIM_sendHTTP+0x6c>
	{
		return THT_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <SIM_sendHTTP+0x6e>
	}
	else
	{
		return THT_OK;
 8006668:	2300      	movs	r3, #0
	}
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	0800df10 	.word	0x0800df10
 8006678:	0800df5c 	.word	0x0800df5c

0800667c <THT_copyStringUntilToken>:
 * 			@Note: if substring length is less than size, it's copy
 * 			substring length bytes, else it's copy size bytes.
 * @retval None
 */
void THT_copyStringUntilToken(const char *src, char des[], uint16_t size, const char *token)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
	if (src == NULL || des == NULL || size == 0)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <THT_copyStringUntilToken+0x22>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <THT_copyStringUntilToken+0x22>
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d102      	bne.n	80066a4 <THT_copyStringUntilToken+0x28>
	{
		des = NULL;
 800669e:	2300      	movs	r3, #0
 80066a0:	60bb      	str	r3, [r7, #8]
		return;
 80066a2:	e052      	b.n	800674a <THT_copyStringUntilToken+0xce>
	}

	if (token == NULL)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d121      	bne.n	80066ee <THT_copyStringUntilToken+0x72>
	{
		uint16_t srcSize = strlen(src);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7f9 fde8 	bl	8000280 <strlen>
 80066b0:	4603      	mov	r3, r0
 80066b2:	827b      	strh	r3, [r7, #18]
		if (srcSize < size)
 80066b4:	8a7a      	ldrh	r2, [r7, #18]
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d20b      	bcs.n	80066d4 <THT_copyStringUntilToken+0x58>
		{
			memcpy(des, src, srcSize);
 80066bc:	8a7b      	ldrh	r3, [r7, #18]
 80066be:	461a      	mov	r2, r3
 80066c0:	68f9      	ldr	r1, [r7, #12]
 80066c2:	68b8      	ldr	r0, [r7, #8]
 80066c4:	f003 f8a9 	bl	800981a <memcpy>
			des[srcSize] = '\0';
 80066c8:	8a7b      	ldrh	r3, [r7, #18]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	e03a      	b.n	800674a <THT_copyStringUntilToken+0xce>
		}
		else
		{
			memcpy(des, src, size);
 80066d4:	88fb      	ldrh	r3, [r7, #6]
 80066d6:	461a      	mov	r2, r3
 80066d8:	68f9      	ldr	r1, [r7, #12]
 80066da:	68b8      	ldr	r0, [r7, #8]
 80066dc:	f003 f89d 	bl	800981a <memcpy>
			des[size - 1] = '\0';
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4413      	add	r3, r2
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e02d      	b.n	800674a <THT_copyStringUntilToken+0xce>
		}
	}
	else
	{
		char *sPtr = strstr(src, token);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f003 f805 	bl	8009700 <strstr>
 80066f6:	6178      	str	r0, [r7, #20]

		if (sPtr != NULL)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d023      	beq.n	8006746 <THT_copyStringUntilToken+0xca>
		{
			if (sPtr - src < size)
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	429a      	cmp	r2, r3
 8006708:	da10      	bge.n	800672c <THT_copyStringUntilToken+0xb0>
			{
				memcpy(des, src, sPtr - src);
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	461a      	mov	r2, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	68b8      	ldr	r0, [r7, #8]
 8006716:	f003 f880 	bl	800981a <memcpy>
				des[sPtr - src] = '\0';
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	461a      	mov	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4413      	add	r3, r2
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	e00e      	b.n	800674a <THT_copyStringUntilToken+0xce>
			}
			else
			{
				memcpy(des, src, size);
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	461a      	mov	r2, r3
 8006730:	68f9      	ldr	r1, [r7, #12]
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f003 f871 	bl	800981a <memcpy>
				des[size - 1] = '\0';
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	3b01      	subs	r3, #1
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	4413      	add	r3, r2
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e001      	b.n	800674a <THT_copyStringUntilToken+0xce>
			}
		}
		else
		{
			des = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
		}
	}
}
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <THT_CRC8XOR>:
 * @param array
 * @param size
 * @return uint8_t
 */
uint8_t THT_CRC8XOR(const uint8_t *array, size_t size)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	uint8_t value = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	73fb      	strb	r3, [r7, #15]

	for (size_t i = 0; i < size; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
 8006762:	e009      	b.n	8006778 <THT_CRC8XOR+0x28>
	{
		value ^= array[i];
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4413      	add	r3, r2
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	4053      	eors	r3, r2
 8006770:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < size; i++)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d3f1      	bcc.n	8006764 <THT_CRC8XOR+0x14>
	}
	return value;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <SIM7600_sendATCommand>:
 * @param unexpect [in] The unexpected information string in response buffer.
 * @param timeout [in] The timeout to cancel function if no response or no information is matched.
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_sendATCommand(SIM7600_HandleTypeDef *const me, const char *command, const char *expect, const char *unexpect, uint32_t timeout)
{
 8006790:	b590      	push	{r4, r7, lr}
 8006792:	b089      	sub	sp, #36	; 0x24
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
 800679c:	603b      	str	r3, [r7, #0]
	if (me == NULL || command == NULL || expect == NULL || unexpect == NULL)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <SIM7600_sendATCommand+0x26>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <SIM7600_sendATCommand+0x26>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d002      	beq.n	80067b6 <SIM7600_sendATCommand+0x26>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <SIM7600_sendATCommand+0x2a>
	{
		return THT_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e084      	b.n	80068c4 <SIM7600_sendATCommand+0x134>
	}

	THT_StatusTypeDef answer = THT_BUSY;
 80067ba:	2302      	movs	r3, #2
 80067bc:	77fb      	strb	r3, [r7, #31]

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer,
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3308      	adds	r3, #8
 80067c8:	f44f 720c 	mov.w	r2, #560	; 0x230
 80067cc:	4619      	mov	r1, r3
 80067ce:	f7fd fd7a 	bl	80042c6 <HAL_UARTEx_ReceiveToIdle_DMA>
								 SIM_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0208 	bic.w	r2, r2, #8
 80067e8:	601a      	str	r2, [r3, #0]

	/* Clear buffer before receive new data */
	memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3308      	adds	r3, #8
 80067ee:	f44f 720c 	mov.w	r2, #560	; 0x230
 80067f2:	2100      	movs	r1, #0
 80067f4:	4618      	mov	r0, r3
 80067f6:	f002 ff11 	bl	800961c <memset>

	/* Sends command to SIM module: command + "\r\n" */
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)command, strlen(command),
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 42c0 	ldr.w	r4, [r3, #704]	; 0x2c0
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f7f9 fd3d 	bl	8000280 <strlen>
 8006806:	4603      	mov	r3, r0
 8006808:	b29a      	uxth	r2, r3
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4620      	mov	r0, r4
 8006812:	f7fd fcc6 	bl	80041a2 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)"\r\n", 2, 1000);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800681c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006820:	2202      	movs	r2, #2
 8006822:	492a      	ldr	r1, [pc, #168]	; (80068cc <SIM7600_sendATCommand+0x13c>)
 8006824:	f7fd fcbd 	bl	80041a2 <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 8006828:	f7fb fb74 	bl	8001f14 <HAL_GetTick>
 800682c:	61b8      	str	r0, [r7, #24]

	/* Wait to receive the response - if the response is empty, the timeout is occured */
	while (answer == THT_BUSY)
 800682e:	e03f      	b.n	80068b0 <SIM7600_sendATCommand+0x120>
	{	
		const uint32_t timeElapsed = HAL_GetTick() - tickStart;
 8006830:	f7fb fb70 	bl	8001f14 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	617b      	str	r3, [r7, #20]

		if (timeElapsed >= timeout)
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	429a      	cmp	r2, r3
 8006842:	d317      	bcc.n	8006874 <SIM7600_sendATCommand+0xe4>
		{
			answer = THT_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	77fb      	strb	r3, [r7, #31]
			me->parent.timeoutCnt++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800684e:	3301      	adds	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238

			/* Print the command and timeout counter */
			printf(command);
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f002 fd3d 	bl	80092d8 <iprintf>
			printf("\n");
 800685e:	200a      	movs	r0, #10
 8006860:	f002 fd4c 	bl	80092fc <putchar>
			printf("Timeout: %u\n", me->parent.timeoutCnt);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800686a:	4619      	mov	r1, r3
 800686c:	4818      	ldr	r0, [pc, #96]	; (80068d0 <SIM7600_sendATCommand+0x140>)
 800686e:	f002 fd33 	bl	80092d8 <iprintf>
			break;
 8006872:	e020      	b.n	80068b6 <SIM7600_sendATCommand+0x126>
		}
		else
		{
			if (SIM_GET_FLAG(&me->parent, SIM_FLAG_RX))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d117      	bne.n	80068b0 <SIM7600_sendATCommand+0x120>
			{
				if (strstr(me->parent.buffer, expect) != NULL)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3308      	adds	r3, #8
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4618      	mov	r0, r3
 8006888:	f002 ff3a 	bl	8009700 <strstr>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <SIM7600_sendATCommand+0x108>
				{
					answer = THT_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	77fb      	strb	r3, [r7, #31]
					break;
 8006896:	e00e      	b.n	80068b6 <SIM7600_sendATCommand+0x126>
				}
				else if (strstr(me->parent.buffer, unexpect) != NULL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3308      	adds	r3, #8
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 ff2e 	bl	8009700 <strstr>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <SIM7600_sendATCommand+0x120>
				{
					answer = THT_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	77fb      	strb	r3, [r7, #31]
					break;
 80068ae:	e002      	b.n	80068b6 <SIM7600_sendATCommand+0x126>
	while (answer == THT_BUSY)
 80068b0:	7ffb      	ldrb	r3, [r7, #31]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d0bc      	beq.n	8006830 <SIM7600_sendATCommand+0xa0>
				}
			}
		}
	}

	SIM_CLR_FLAG(&me->parent, SIM_FLAG_RX);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f023 0201 	bic.w	r2, r3, #1
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	601a      	str	r2, [r3, #0]
	/*	printf(me->parent.buffer); // Fatal Error: Không uncommment dòng này!
		 Khi thực hiện tính năng FOTA, dòng này nhận được dữ liệu từ module và in ra,
		 khi in ra thì nó k dừng lại mà sẽ in toàn bộ dữ liệu trong bộ nhớ của vi điều
		 khiển và treo
	*/
	return answer;
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3724      	adds	r7, #36	; 0x24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd90      	pop	{r4, r7, pc}
 80068cc:	0800dfd4 	.word	0x0800dfd4
 80068d0:	0800dfd8 	.word	0x0800dfd8

080068d4 <SIM7600_wakeup>:
 * @brief  Wake up module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_wakeup(SIM7600_HandleTypeDef *const me)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <SIM7600_wakeup+0x2a>
	{
		return;
	}
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_RESET); // DTR Low: Wakeup, DTR high: Sleep
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 80068ee:	2200      	movs	r2, #0
 80068f0:	4619      	mov	r1, r3
 80068f2:	f7fc f9d7 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 80068f6:	2064      	movs	r0, #100	; 0x64
 80068f8:	f7fb fb18 	bl	8001f2c <HAL_Delay>
 80068fc:	e000      	b.n	8006900 <SIM7600_wakeup+0x2c>
		return;
 80068fe:	bf00      	nop
}	
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <SIM7600_PWRKEY_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function `SIM7600_PWRKEY_ON` will return without
 * performing any actions.
 */
void SIM7600_PWRKEY_ON(SIM7600_HandleTypeDef *const me)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01c      	beq.n	800694e <SIM7600_PWRKEY_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_SET);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006920:	2201      	movs	r2, #1
 8006922:	4619      	mov	r1, r3
 8006924:	f7fc f9be 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(2000UL);
 8006928:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800692c:	f7fb fafe 	bl	8001f2c <HAL_Delay>
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_RESET);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800693c:	2200      	movs	r2, #0
 800693e:	4619      	mov	r1, r3
 8006940:	f7fc f9b0 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(2000UL);
 8006944:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006948:	f7fb faf0 	bl	8001f2c <HAL_Delay>
 800694c:	e000      	b.n	8006950 <SIM7600_PWRKEY_ON+0x4a>
		return;
 800694e:	bf00      	nop
}
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <SIM7600_RESET_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function will return without performing any
 * actions.
 */
void SIM7600_RESET_ON(SIM7600_HandleTypeDef *const me)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b082      	sub	sp, #8
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01c      	beq.n	800699e <SIM7600_RESET_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8006970:	2201      	movs	r2, #1
 8006972:	4619      	mov	r1, r3
 8006974:	f7fc f996 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(500UL);
 8006978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800697c:	f7fb fad6 	bl	8001f2c <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 800698c:	2200      	movs	r2, #0
 800698e:	4619      	mov	r1, r3
 8006990:	f7fc f988 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 8006994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006998:	f7fb fac8 	bl	8001f2c <HAL_Delay>
 800699c:	e000      	b.n	80069a0 <SIM7600_RESET_ON+0x4a>
		return;
 800699e:	bf00      	nop
}
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <SIM7600_sleep>:
 * @brief  Put the module to sleep
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_sleep(SIM7600_HandleTypeDef *const me)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d016      	beq.n	80069e4 <SIM7600_sleep+0x3c>
	{
		return;
	}
	SIM7600_sendATCommand(me, "AT+CSCLK=1", SIM_URC_OK, SIM_URC_ERROR, 3000);
 80069b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4b0b      	ldr	r3, [pc, #44]	; (80069ec <SIM7600_sleep+0x44>)
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <SIM7600_sleep+0x48>)
 80069c0:	490c      	ldr	r1, [pc, #48]	; (80069f4 <SIM7600_sleep+0x4c>)
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fee4 	bl	8006790 <SIM7600_sendATCommand>
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_SET);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 80069d4:	2201      	movs	r2, #1
 80069d6:	4619      	mov	r1, r3
 80069d8:	f7fc f964 	bl	8002ca4 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 80069dc:	2064      	movs	r0, #100	; 0x64
 80069de:	f7fb faa5 	bl	8001f2c <HAL_Delay>
 80069e2:	e000      	b.n	80069e6 <SIM7600_sleep+0x3e>
		return;
 80069e4:	bf00      	nop
}
 80069e6:	3708      	adds	r7, #8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	0800dfe8 	.word	0x0800dfe8
 80069f0:	0800dff0 	.word	0x0800dff0
 80069f4:	0800dff4 	.word	0x0800dff4

080069f8 <SIM7600_init>:
 * @brief  Initializes module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_init(SIM7600_HandleTypeDef *const me)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af02      	add	r7, sp, #8
 80069fe:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <SIM7600_init+0x12>
	{
		return THT_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e0e3      	b.n	8006bd2 <SIM7600_init+0x1da>
	}

	me->huart->Instance = USART2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a10:	4a72      	ldr	r2, [pc, #456]	; (8006bdc <SIM7600_init+0x1e4>)
 8006a12:	601a      	str	r2, [r3, #0]
	me->huart->Init.BaudRate = 115200;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a1a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a1e:	605a      	str	r2, [r3, #4]
	me->huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a26:	2200      	movs	r2, #0
 8006a28:	609a      	str	r2, [r3, #8]
	me->huart->Init.StopBits = UART_STOPBITS_1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a30:	2200      	movs	r2, #0
 8006a32:	60da      	str	r2, [r3, #12]
	me->huart->Init.Parity = UART_PARITY_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	611a      	str	r2, [r3, #16]
	me->huart->Init.Mode = UART_MODE_TX_RX;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a44:	220c      	movs	r2, #12
 8006a46:	615a      	str	r2, [r3, #20]
	me->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a4e:	2200      	movs	r2, #0
 8006a50:	619a      	str	r2, [r3, #24]
	me->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a58:	2200      	movs	r2, #0
 8006a5a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(me->huart) != HAL_OK)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd fb50 	bl	8004108 <HAL_UART_Init>
	}

	/* Power on and reset module */
//	SIM7600_wakeup(me);
//	SIM7600_POWER_ON(me);
	SIM7600_RESET_ON(me);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff74 	bl	8006956 <SIM7600_RESET_ON>

	/* Enable receive data through UART port */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3308      	adds	r3, #8
 8006a78:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	f7fd fc22 	bl	80042c6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0208 	bic.w	r2, r2, #8
 8006a98:	601a      	str	r2, [r3, #0]

	/* Powerkey on */
	SIM7600_PWRKEY_ON(me);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ff33 	bl	8006906 <SIM7600_PWRKEY_ON>

	for (size_t i = 0u; i < 60u; i++)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e090      	b.n	8006bc8 <SIM7600_init+0x1d0>
	{
		SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
 8006aa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4b4c      	ldr	r3, [pc, #304]	; (8006be0 <SIM7600_init+0x1e8>)
 8006aae:	4a4d      	ldr	r2, [pc, #308]	; (8006be4 <SIM7600_init+0x1ec>)
 8006ab0:	494d      	ldr	r1, [pc, #308]	; (8006be8 <SIM7600_init+0x1f0>)
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff fe6c 	bl	8006790 <SIM7600_sendATCommand>
		if (THT_OK == SIM7600_sendATCommand(me, "AT", SIM_URC_OK, SIM_URC_ERROR, 250))
 8006ab8:	23fa      	movs	r3, #250	; 0xfa
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	4b48      	ldr	r3, [pc, #288]	; (8006be0 <SIM7600_init+0x1e8>)
 8006abe:	4a49      	ldr	r2, [pc, #292]	; (8006be4 <SIM7600_init+0x1ec>)
 8006ac0:	494a      	ldr	r1, [pc, #296]	; (8006bec <SIM7600_init+0x1f4>)
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fe64 	bl	8006790 <SIM7600_sendATCommand>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d179      	bne.n	8006bc2 <SIM7600_init+0x1ca>
		{
			SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
 8006ace:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4b42      	ldr	r3, [pc, #264]	; (8006be0 <SIM7600_init+0x1e8>)
 8006ad6:	4a43      	ldr	r2, [pc, #268]	; (8006be4 <SIM7600_init+0x1ec>)
 8006ad8:	4943      	ldr	r1, [pc, #268]	; (8006be8 <SIM7600_init+0x1f0>)
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fe58 	bl	8006790 <SIM7600_sendATCommand>

			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 4000))
 8006ae0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4b3e      	ldr	r3, [pc, #248]	; (8006be0 <SIM7600_init+0x1e8>)
 8006ae8:	4a3e      	ldr	r2, [pc, #248]	; (8006be4 <SIM7600_init+0x1ec>)
 8006aea:	4941      	ldr	r1, [pc, #260]	; (8006bf0 <SIM7600_init+0x1f8>)
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fe4f 	bl	8006790 <SIM7600_sendATCommand>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d164      	bne.n	8006bc2 <SIM7600_init+0x1ca>
			{
				SIM7600_sendATCommand(me, "ATI", SIM_URC_OK, SIM_URC_ERROR, 500);
 8006af8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4b38      	ldr	r3, [pc, #224]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b00:	4a38      	ldr	r2, [pc, #224]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b02:	493c      	ldr	r1, [pc, #240]	; (8006bf4 <SIM7600_init+0x1fc>)
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff fe43 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 4000);	//"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 8006b0a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4b33      	ldr	r3, [pc, #204]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b12:	4a39      	ldr	r2, [pc, #228]	; (8006bf8 <SIM7600_init+0x200>)
 8006b14:	4939      	ldr	r1, [pc, #228]	; (8006bfc <SIM7600_init+0x204>)
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff fe3a 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CGREG?", "+CGREG: 0,1", SIM_URC_ERROR, 4000); // "\r\n+CGREG: 0,1\r\n\r\nOK\r\n"
 8006b1c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4b2f      	ldr	r3, [pc, #188]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b24:	4a36      	ldr	r2, [pc, #216]	; (8006c00 <SIM7600_init+0x208>)
 8006b26:	4937      	ldr	r1, [pc, #220]	; (8006c04 <SIM7600_init+0x20c>)
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff fe31 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMP=39", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8006b2e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b36:	4a2b      	ldr	r2, [pc, #172]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b38:	4933      	ldr	r1, [pc, #204]	; (8006c08 <SIM7600_init+0x210>)
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fe28 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CTZU=0", SIM_URC_OK, SIM_URC_ERROR, 4000);					//"\r\nOK\r\n"
 8006b40:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b48:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b4a:	4930      	ldr	r1, [pc, #192]	; (8006c0c <SIM7600_init+0x214>)
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fe1f 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);				//"\r\nOK\r\n"
 8006b52:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b5a:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b5c:	492c      	ldr	r1, [pc, #176]	; (8006c10 <SIM7600_init+0x218>)
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fe16 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 4000); //"\r\n+CPMS: 0,40,0,40,0,40\r\n\r\nOK\r\n"
 8006b64:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b6e:	4929      	ldr	r1, [pc, #164]	; (8006c14 <SIM7600_init+0x21c>)
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7ff fe0d 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGD=,4", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8006b76:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b80:	4925      	ldr	r1, [pc, #148]	; (8006c18 <SIM7600_init+0x220>)
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fe04 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8006b88:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <SIM7600_init+0x1e8>)
 8006b90:	4a14      	ldr	r2, [pc, #80]	; (8006be4 <SIM7600_init+0x1ec>)
 8006b92:	4922      	ldr	r1, [pc, #136]	; (8006c1c <SIM7600_init+0x224>)
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff fdfb 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMI=2,1,0,0,0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8006b9a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <SIM7600_init+0x1e8>)
 8006ba2:	4a10      	ldr	r2, [pc, #64]	; (8006be4 <SIM7600_init+0x1ec>)
 8006ba4:	491e      	ldr	r1, [pc, #120]	; (8006c20 <SIM7600_init+0x228>)
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fdf2 	bl	8006790 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CFGRI=0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8006bac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <SIM7600_init+0x1e8>)
 8006bb4:	4a0b      	ldr	r2, [pc, #44]	; (8006be4 <SIM7600_init+0x1ec>)
 8006bb6:	491b      	ldr	r1, [pc, #108]	; (8006c24 <SIM7600_init+0x22c>)
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fde9 	bl	8006790 <SIM7600_sendATCommand>

//				HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);

				return THT_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e007      	b.n	8006bd2 <SIM7600_init+0x1da>
	for (size_t i = 0u; i < 60u; i++)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b3b      	cmp	r3, #59	; 0x3b
 8006bcc:	f67f af6b 	bls.w	8006aa6 <SIM7600_init+0xae>
			}
		}
	}

	return THT_ERROR;
 8006bd0:	2301      	movs	r3, #1
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40004400 	.word	0x40004400
 8006be0:	0800dfe8 	.word	0x0800dfe8
 8006be4:	0800dff0 	.word	0x0800dff0
 8006be8:	0800e000 	.word	0x0800e000
 8006bec:	0800e008 	.word	0x0800e008
 8006bf0:	0800e00c 	.word	0x0800e00c
 8006bf4:	0800e018 	.word	0x0800e018
 8006bf8:	0800e01c 	.word	0x0800e01c
 8006bfc:	0800e028 	.word	0x0800e028
 8006c00:	0800e034 	.word	0x0800e034
 8006c04:	0800e040 	.word	0x0800e040
 8006c08:	0800e04c 	.word	0x0800e04c
 8006c0c:	0800e058 	.word	0x0800e058
 8006c10:	0800e064 	.word	0x0800e064
 8006c14:	0800e074 	.word	0x0800e074
 8006c18:	0800e08c 	.word	0x0800e08c
 8006c1c:	0800e098 	.word	0x0800e098
 8006c20:	0800e0a4 	.word	0x0800e0a4
 8006c24:	0800e0b8 	.word	0x0800e0b8

08006c28 <SIM7600_setFunction>:
 * 				@arg: SIM_MODE_RESET
 * 				@arg: SIM_MODE_OFFLINE
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_setFunction(SIM7600_HandleTypeDef *const me, uint8_t mode)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <SIM7600_setFunction+0x16>
	{
		return THT_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e018      	b.n	8006c70 <SIM7600_setFunction+0x48>
	}

	char command[10] = {0};
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	f107 0310 	add.w	r3, r7, #16
 8006c46:	2200      	movs	r2, #0
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	809a      	strh	r2, [r3, #4]
	snprintf(command, sizeof(command), "AT+CFUN=%d", mode);
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	f107 000c 	add.w	r0, r7, #12
 8006c52:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <SIM7600_setFunction+0x50>)
 8006c54:	210a      	movs	r1, #10
 8006c56:	f002 fbb5 	bl	80093c4 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 9000);
 8006c5a:	f107 010c 	add.w	r1, r7, #12
 8006c5e:	f242 3328 	movw	r3, #9000	; 0x2328
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <SIM7600_setFunction+0x54>)
 8006c66:	4a06      	ldr	r2, [pc, #24]	; (8006c80 <SIM7600_setFunction+0x58>)
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff fd91 	bl	8006790 <SIM7600_sendATCommand>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	0800e0c4 	.word	0x0800e0c4
 8006c7c:	0800dfe8 	.word	0x0800dfe8
 8006c80:	0800dff0 	.word	0x0800dff0

08006c84 <SIM7600_process>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_process(SIM7600_HandleTypeDef *const me)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08c      	sub	sp, #48	; 0x30
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d079      	beq.n	8006d86 <SIM7600_process+0x102>
	{
		return;
	}

	/* If sim card is removed or not fit */
	if (SIM_GET_FLAG(&me->parent, SIM_FLAG_SRMV))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0310 	and.w	r3, r3, #16
 8006c9a:	2b10      	cmp	r3, #16
 8006c9c:	d160      	bne.n	8006d60 <SIM7600_process+0xdc>
	{
		printf("Simcard removed. Reconnect Simcard\n");
 8006c9e:	483c      	ldr	r0, [pc, #240]	; (8006d90 <SIM7600_process+0x10c>)
 8006ca0:	f002 fb88 	bl	80093b4 <puts>
		SIM7600_wakeup(me);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fe15 	bl	80068d4 <SIM7600_wakeup>

		/* Minimize function of SIM */
		SIM7600_setFunction(me, SIM_MODE_MINIMUM);
 8006caa:	2100      	movs	r1, #0
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff ffbb 	bl	8006c28 <SIM7600_setFunction>
		HAL_Delay(1000UL);
 8006cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006cb6:	f7fb f939 	bl	8001f2c <HAL_Delay>

		/* Enable all functions of module to reconnect sim card if the sim card is plugged */
		if (THT_OK == SIM7600_setFunction(me, SIM_MODE_FULL))
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff ffb3 	bl	8006c28 <SIM7600_setFunction>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <SIM7600_process+0x50>
		{
			SIM_CLR_FLAG(&me->parent, SIM_FLAG_SRMV);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f023 0210 	bic.w	r2, r3, #16
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
		}

		uint32_t tickStart = HAL_GetTick();
 8006cd4:	f7fb f91e 	bl	8001f14 <HAL_GetTick>
 8006cd8:	6278      	str	r0, [r7, #36]	; 0x24

		char nwType[SIM_NWTYPE_SIZE] = {0};
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	f107 0310 	add.w	r3, r7, #16
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
 8006ce8:	609a      	str	r2, [r3, #8]

		while (HAL_GetTick() - tickStart < 15000u)
 8006cea:	e02d      	b.n	8006d48 <SIM7600_process+0xc4>
		{
			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 1000) || THT_OK == SIM7600_getNetworkType(me, nwType, SIM_NWTYPE_SIZE))
 8006cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <SIM7600_process+0x110>)
 8006cf4:	4a28      	ldr	r2, [pc, #160]	; (8006d98 <SIM7600_process+0x114>)
 8006cf6:	4929      	ldr	r1, [pc, #164]	; (8006d9c <SIM7600_process+0x118>)
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fd49 	bl	8006790 <SIM7600_sendATCommand>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d009      	beq.n	8006d18 <SIM7600_process+0x94>
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	2210      	movs	r2, #16
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fb63 	bl	80073d8 <SIM7600_getNetworkType>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d117      	bne.n	8006d48 <SIM7600_process+0xc4>
			{
				char *sPtr1 = strstr(nwType, "NO SERVICE");
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4920      	ldr	r1, [pc, #128]	; (8006da0 <SIM7600_process+0x11c>)
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f002 fcee 	bl	8009700 <strstr>
 8006d24:	6238      	str	r0, [r7, #32]
				char *sPtr2 = strstr(nwType, "Unknown");
 8006d26:	f107 030c 	add.w	r3, r7, #12
 8006d2a:	491e      	ldr	r1, [pc, #120]	; (8006da4 <SIM7600_process+0x120>)
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 fce7 	bl	8009700 <strstr>
 8006d32:	61f8      	str	r0, [r7, #28]

				if (sPtr1 == NULL && sPtr2 == NULL)
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <SIM7600_process+0xc4>
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d103      	bne.n	8006d48 <SIM7600_process+0xc4>
				{
					printf("Sim is connected\n\n");
 8006d40:	4819      	ldr	r0, [pc, #100]	; (8006da8 <SIM7600_process+0x124>)
 8006d42:	f002 fb37 	bl	80093b4 <puts>
					break; /* Break out of while loop */
 8006d46:	e008      	b.n	8006d5a <SIM7600_process+0xd6>
		while (HAL_GetTick() - tickStart < 15000u)
 8006d48:	f7fb f8e4 	bl	8001f14 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	f643 2297 	movw	r2, #14999	; 0x3a97
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d9c8      	bls.n	8006cec <SIM7600_process+0x68>
				}
			}
		}

		SIM7600_sleep(me);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fe24 	bl	80069a8 <SIM7600_sleep>
	}

	/* If error in communition */
	if (me->parent.timeoutCnt >= 10u)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8006d66:	2b09      	cmp	r3, #9
 8006d68:	d90e      	bls.n	8006d88 <SIM7600_process+0x104>
	{
		printf("Timeout over 10 times. Reset module SIM\n\n");
 8006d6a:	4810      	ldr	r0, [pc, #64]	; (8006dac <SIM7600_process+0x128>)
 8006d6c:	f002 fb22 	bl	80093b4 <puts>
		//		SIM7600_wakeup(me);
		//		SIM7600_RESET_ON(me);
		SIM7600_init(me);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fe41 	bl	80069f8 <SIM7600_init>
		SIM7600_sleep(me);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fe16 	bl	80069a8 <SIM7600_sleep>
		me->parent.timeoutCnt = 0u;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 8006d84:	e000      	b.n	8006d88 <SIM7600_process+0x104>
		return;
 8006d86:	bf00      	nop
	}
}
 8006d88:	3728      	adds	r7, #40	; 0x28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	0800e0d0 	.word	0x0800e0d0
 8006d94:	0800dfe8 	.word	0x0800dfe8
 8006d98:	0800dff0 	.word	0x0800dff0
 8006d9c:	0800e00c 	.word	0x0800e00c
 8006da0:	0800e0f4 	.word	0x0800e0f4
 8006da4:	0800e100 	.word	0x0800e100
 8006da8:	0800e108 	.word	0x0800e108
 8006dac:	0800e11c 	.word	0x0800e11c

08006db0 <SIM7600_checkEvent>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_checkEvent(SIM7600_HandleTypeDef *const me, uint16_t size)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d05d      	beq.n	8006e7e <SIM7600_checkEvent+0xce>
	{
		return;
	}

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f7fd fa78 	bl	80042c6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]

	SIM_SET_FLAG(&me->parent, SIM_FLAG_RX);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f043 0201 	orr.w	r2, r3, #1
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	601a      	str	r2, [r3, #0]

	if (strstr(me->parent.buffer, SIM_URC_SMS) != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	4922      	ldr	r1, [pc, #136]	; (8006e88 <SIM7600_checkEvent+0xd8>)
 8006e00:	4618      	mov	r0, r3
 8006e02:	f002 fc7d 	bl	8009700 <strstr>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01d      	beq.n	8006e48 <SIM7600_checkEvent+0x98>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SMS);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f043 0202 	orr.w	r2, r3, #2
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	601a      	str	r2, [r3, #0]

		char *sPtr = strstr(me->parent.buffer, "\"SM\",");
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	491b      	ldr	r1, [pc, #108]	; (8006e8c <SIM7600_checkEvent+0xdc>)
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f002 fc6e 	bl	8009700 <strstr>
 8006e24:	60f8      	str	r0, [r7, #12]

		if (sPtr != NULL && size >= 5u) // xxx: size?
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d029      	beq.n	8006e80 <SIM7600_checkEvent+0xd0>
 8006e2c:	887b      	ldrh	r3, [r7, #2]
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d926      	bls.n	8006e80 <SIM7600_checkEvent+0xd0>
		{
			me->smsPos = atoi(sPtr + 5u);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3305      	adds	r3, #5
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 fa80 	bl	800833c <atoi>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	b25a      	sxtb	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8006e46:	e01b      	b.n	8006e80 <SIM7600_checkEvent+0xd0>
	}
	// else if (strstr(me->parent.buffer, SIM_URC_AUDIO_STOP) != NULL)
	// {
	// 	SIM_SET_FLAG(&me->parent, SIM_FLAG_AUDIO_STOP);
	// }
	else if (strstr(me->parent.buffer, SIM_URC_SIMCARD_UNPLUGIN) != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	4910      	ldr	r1, [pc, #64]	; (8006e90 <SIM7600_checkEvent+0xe0>)
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f002 fc56 	bl	8009700 <strstr>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d012      	beq.n	8006e80 <SIM7600_checkEvent+0xd0>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SRMV);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f043 0210 	orr.w	r2, r3, #16
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	601a      	str	r2, [r3, #0]
		memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f002 fbd3 	bl	800961c <memset>
		printf("Sim removed!\n\n");
 8006e76:	4807      	ldr	r0, [pc, #28]	; (8006e94 <SIM7600_checkEvent+0xe4>)
 8006e78:	f002 fa9c 	bl	80093b4 <puts>
 8006e7c:	e000      	b.n	8006e80 <SIM7600_checkEvent+0xd0>
		return;
 8006e7e:	bf00      	nop
	}
}
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	0800e148 	.word	0x0800e148
 8006e8c:	0800e158 	.word	0x0800e158
 8006e90:	0800e160 	.word	0x0800e160
 8006e94:	0800e178 	.word	0x0800e178

08006e98 <SIM7600_readSMS>:
 * @param pSMS [out] Pointer to SMS data structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readSMS(SIM7600_HandleTypeDef *const me, const uint8_t order,
								  SIM_SMSTypeDef *pSMS)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	72fb      	strb	r3, [r7, #11]
	if (me == NULL || pSMS == NULL)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SIM7600_readSMS+0x1a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <SIM7600_readSMS+0x1e>
	{
		return THT_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e064      	b.n	8006f80 <SIM7600_readSMS+0xe8>
	enum Enum
	{
		COMMAND_SIZE = 15
	};

	char command[COMMAND_SIZE] = {0};
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	f107 0314 	add.w	r3, r7, #20
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
 8006ec4:	f8c3 2007 	str.w	r2, [r3, #7]

	/* Clear the buffer */
	memset(pSMS->phone, '\0', SIM_PHONE_SIZE);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220d      	movs	r2, #13
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f002 fba4 	bl	800961c <memset>
	memset(pSMS->time, '\0', SIM_TIME_SIZE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	330d      	adds	r3, #13
 8006ed8:	2216      	movs	r2, #22
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f002 fb9d 	bl	800961c <memset>
	memset(pSMS->content, '\0', SIM_SMS_SIZE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3323      	adds	r3, #35	; 0x23
 8006ee6:	22a0      	movs	r2, #160	; 0xa0
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f002 fb96 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+CMGRD=%u", order);
 8006ef0:	7afb      	ldrb	r3, [r7, #11]
 8006ef2:	f107 0010 	add.w	r0, r7, #16
 8006ef6:	4a24      	ldr	r2, [pc, #144]	; (8006f88 <SIM7600_readSMS+0xf0>)
 8006ef8:	210f      	movs	r1, #15
 8006efa:	f002 fa63 	bl	80093c4 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8006efe:	f107 0110 	add.w	r1, r7, #16
 8006f02:	f242 7310 	movw	r3, #10000	; 0x2710
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <SIM7600_readSMS+0xf4>)
 8006f0a:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <SIM7600_readSMS+0xf8>)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f7ff fc3f 	bl	8006790 <SIM7600_sendATCommand>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (THT_OK == status)
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d12d      	bne.n	8006f7c <SIM7600_readSMS+0xe4>
	{
		/* Copy the phonenumber, time and and content of SMS */
		char *sPtr = strstr(me->parent.buffer, "\",\"");
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3308      	adds	r3, #8
 8006f24:	491b      	ldr	r1, [pc, #108]	; (8006f94 <SIM7600_readSMS+0xfc>)
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 fbea 	bl	8009700 <strstr>
 8006f2c:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 4, pSMS->phone, SIM_PHONE_SIZE, "\"");
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	1d18      	adds	r0, r3, #4
 8006f32:	6879      	ldr	r1, [r7, #4]
 8006f34:	4b18      	ldr	r3, [pc, #96]	; (8006f98 <SIM7600_readSMS+0x100>)
 8006f36:	220d      	movs	r2, #13
 8006f38:	f7ff fba0 	bl	800667c <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, ",\"2");
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3308      	adds	r3, #8
 8006f40:	4916      	ldr	r1, [pc, #88]	; (8006f9c <SIM7600_readSMS+0x104>)
 8006f42:	4618      	mov	r0, r3
 8006f44:	f002 fbdc 	bl	8009700 <strstr>
 8006f48:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 2, pSMS->time, SIM_TIME_SIZE, "\"");
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	1c98      	adds	r0, r3, #2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 010d 	add.w	r1, r3, #13
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <SIM7600_readSMS+0x100>)
 8006f56:	2216      	movs	r2, #22
 8006f58:	f7ff fb90 	bl	800667c <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, "\"\r\n");
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	490f      	ldr	r1, [pc, #60]	; (8006fa0 <SIM7600_readSMS+0x108>)
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 fbcc 	bl	8009700 <strstr>
 8006f68:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 3, pSMS->content, SIM_SMS_SIZE, "\r");
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	1cd8      	adds	r0, r3, #3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <SIM7600_readSMS+0x10c>)
 8006f76:	22a0      	movs	r2, #160	; 0xa0
 8006f78:	f7ff fb80 	bl	800667c <THT_copyStringUntilToken>
	}

	return status;
 8006f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	0800e188 	.word	0x0800e188
 8006f8c:	0800dfe8 	.word	0x0800dfe8
 8006f90:	0800dff0 	.word	0x0800dff0
 8006f94:	0800e194 	.word	0x0800e194
 8006f98:	0800e198 	.word	0x0800e198
 8006f9c:	0800e19c 	.word	0x0800e19c
 8006fa0:	0800e1a0 	.word	0x0800e1a0
 8006fa4:	0800e1a4 	.word	0x0800e1a4

08006fa8 <SIM7600_sendSMS>:
 * @param msgSize [in] the length of the SMS content
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendSMS(SIM7600_HandleTypeDef *const me, const char *pPhone, const char *pMsg,
								  uint8_t phoneSize, uint16_t msgSize)
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b0c9      	sub	sp, #292	; 0x124
 8006fac:	af02      	add	r7, sp, #8
 8006fae:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8006fb2:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8006fbc:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8006fc0:	6001      	str	r1, [r0, #0]
 8006fc2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8006fc6:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8006fca:	600a      	str	r2, [r1, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fd2:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8006fd6:	701a      	strb	r2, [r3, #0]
	if (me == NULL || pPhone == NULL || pMsg == NULL ||
 8006fd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d018      	beq.n	8007018 <SIM7600_sendSMS+0x70>
 8006fe6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d011      	beq.n	8007018 <SIM7600_sendSMS+0x70>
 8006ff4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ff8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <SIM7600_sendSMS+0x70>
 8007002:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007006:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b0d      	cmp	r3, #13
 800700e:	d803      	bhi.n	8007018 <SIM7600_sendSMS+0x70>
		phoneSize > SIM_PHONE_SIZE || msgSize == 0)
 8007010:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <SIM7600_sendSMS+0x74>
	{
		return THT_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0ec      	b.n	80071f6 <SIM7600_sendSMS+0x24e>
		MAX_SMS_LENGTH = 160u,
		MAX_SMS_SEGMENT_LENGTH = 146u,
		CTRL_Z_CHARACTER = 0x1A
	};

	char command[COMMAND_SIZE] = {0};
 800701c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007024:	2200      	movs	r2, #0
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	3304      	adds	r3, #4
 800702a:	22f6      	movs	r2, #246	; 0xf6
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f002 faf4 	bl	800961c <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007034:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007038:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 800703c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	4b6f      	ldr	r3, [pc, #444]	; (8007200 <SIM7600_sendSMS+0x258>)
 8007044:	4a6f      	ldr	r2, [pc, #444]	; (8007204 <SIM7600_sendSMS+0x25c>)
 8007046:	4970      	ldr	r1, [pc, #448]	; (8007208 <SIM7600_sendSMS+0x260>)
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	f7ff fba1 	bl	8006790 <SIM7600_sendATCommand>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Send SMS */
	if (msgSize < MAX_SMS_LENGTH)
 8007054:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8007058:	2b9f      	cmp	r3, #159	; 0x9f
 800705a:	d83f      	bhi.n	80070dc <SIM7600_sendSMS+0x134>
	{
		snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", pPhone);
 800705c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007060:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007064:	f107 0014 	add.w	r0, r7, #20
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a68      	ldr	r2, [pc, #416]	; (800720c <SIM7600_sendSMS+0x264>)
 800706c:	21fa      	movs	r1, #250	; 0xfa
 800706e:	f002 f9a9 	bl	80093c4 <sniprintf>

		status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 8007072:	f107 0114 	add.w	r1, r7, #20
 8007076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800707a:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 800707e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4b5e      	ldr	r3, [pc, #376]	; (8007200 <SIM7600_sendSMS+0x258>)
 8007086:	4a62      	ldr	r2, [pc, #392]	; (8007210 <SIM7600_sendSMS+0x268>)
 8007088:	6800      	ldr	r0, [r0, #0]
 800708a:	f7ff fb81 	bl	8006790 <SIM7600_sendATCommand>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (THT_OK == status)
 8007094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007098:	2b00      	cmp	r3, #0
 800709a:	f040 80aa 	bne.w	80071f2 <SIM7600_sendSMS+0x24a>
		{
			snprintf(command, sizeof(command), "%s%c", pMsg, CTRL_Z_CHARACTER);
 800709e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80070a6:	f107 0014 	add.w	r0, r7, #20
 80070aa:	221a      	movs	r2, #26
 80070ac:	9200      	str	r2, [sp, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a58      	ldr	r2, [pc, #352]	; (8007214 <SIM7600_sendSMS+0x26c>)
 80070b2:	21fa      	movs	r1, #250	; 0xfa
 80070b4:	f002 f986 	bl	80093c4 <sniprintf>
			status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 80070b8:	f107 0114 	add.w	r1, r7, #20
 80070bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070c0:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80070c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4b4d      	ldr	r3, [pc, #308]	; (8007200 <SIM7600_sendSMS+0x258>)
 80070cc:	4a4d      	ldr	r2, [pc, #308]	; (8007204 <SIM7600_sendSMS+0x25c>)
 80070ce:	6800      	ldr	r0, [r0, #0]
 80070d0:	f7ff fb5e 	bl	8006790 <SIM7600_sendATCommand>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80070da:	e08a      	b.n	80071f2 <SIM7600_sendSMS+0x24a>
		}
	}
	/* Send long SMS */
	else
	{
		uint8_t smsSegmentSize = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		uint8_t totalSms = (msgSize / MAX_SMS_SEGMENT_LENGTH) + 1;
 80070e2:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <SIM7600_sendSMS+0x270>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	099b      	lsrs	r3, r3, #6
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	3301      	adds	r3, #1
 80070f6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		/* Split and send SMS messages one by one */
		for (size_t seg = 1; seg <= totalSms; seg++)
 80070fa:	2301      	movs	r3, #1
 80070fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007100:	e071      	b.n	80071e6 <SIM7600_sendSMS+0x23e>
		{
			if (msgSize < MAX_SMS_SEGMENT_LENGTH)
 8007102:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8007106:	2b91      	cmp	r3, #145	; 0x91
 8007108:	d804      	bhi.n	8007114 <SIM7600_sendSMS+0x16c>
			{
				smsSegmentSize = msgSize;
 800710a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 800710e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007112:	e002      	b.n	800711a <SIM7600_sendSMS+0x172>
			}
			else
			{
				smsSegmentSize = MAX_SMS_SEGMENT_LENGTH;
 8007114:	2392      	movs	r3, #146	; 0x92
 8007116:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			}

			snprintf(command, sizeof(command), "AT+CMGSEX=\"%s\",190,%u,%u",
 800711a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800711e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007122:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007126:	f107 0014 	add.w	r0, r7, #20
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007130:	9200      	str	r2, [sp, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a39      	ldr	r2, [pc, #228]	; (800721c <SIM7600_sendSMS+0x274>)
 8007136:	21fa      	movs	r1, #250	; 0xfa
 8007138:	f002 f944 	bl	80093c4 <sniprintf>
					 pPhone, seg, totalSms);

			status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 800713c:	f107 0114 	add.w	r1, r7, #20
 8007140:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007144:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8007148:	f643 2398 	movw	r3, #15000	; 0x3a98
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <SIM7600_sendSMS+0x258>)
 8007150:	4a2f      	ldr	r2, [pc, #188]	; (8007210 <SIM7600_sendSMS+0x268>)
 8007152:	6800      	ldr	r0, [r0, #0]
 8007154:	f7ff fb1c 	bl	8006790 <SIM7600_sendATCommand>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

			if (THT_OK == status)
 800715e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007162:	2b00      	cmp	r3, #0
 8007164:	d13a      	bne.n	80071dc <SIM7600_sendSMS+0x234>
			{
				memset(command, '\0', sizeof(command));
 8007166:	f107 0314 	add.w	r3, r7, #20
 800716a:	22fa      	movs	r2, #250	; 0xfa
 800716c:	2100      	movs	r1, #0
 800716e:	4618      	mov	r0, r3
 8007170:	f002 fa54 	bl	800961c <memset>
				memcpy(command, pMsg + (seg - 1) * MAX_SMS_SEGMENT_LENGTH,
 8007174:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007178:	2292      	movs	r2, #146	; 0x92
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	3b92      	subs	r3, #146	; 0x92
 8007180:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8007184:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8007188:	6812      	ldr	r2, [r2, #0]
 800718a:	18d1      	adds	r1, r2, r3
 800718c:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4618      	mov	r0, r3
 8007196:	f002 fb40 	bl	800981a <memcpy>
					   smsSegmentSize);
				command[smsSegmentSize] = CTRL_Z_CHARACTER;
 800719a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800719e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80071a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80071a6:	211a      	movs	r1, #26
 80071a8:	54d1      	strb	r1, [r2, r3]
				status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 80071aa:	f107 0114 	add.w	r1, r7, #20
 80071ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071b2:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80071b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <SIM7600_sendSMS+0x258>)
 80071be:	4a11      	ldr	r2, [pc, #68]	; (8007204 <SIM7600_sendSMS+0x25c>)
 80071c0:	6800      	ldr	r0, [r0, #0]
 80071c2:	f7ff fae5 	bl	8006790 <SIM7600_sendATCommand>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				msgSize -= smsSegmentSize;
 80071cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
		for (size_t seg = 1; seg <= totalSms; seg++)
 80071dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80071e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80071ea:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d987      	bls.n	8007102 <SIM7600_sendSMS+0x15a>
			}
		}
	}

	return status;
 80071f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd90      	pop	{r4, r7, pc}
 8007200:	0800dfe8 	.word	0x0800dfe8
 8007204:	0800dff0 	.word	0x0800dff0
 8007208:	0800e098 	.word	0x0800e098
 800720c:	0800e1a8 	.word	0x0800e1a8
 8007210:	0800e1b8 	.word	0x0800e1b8
 8007214:	0800e1bc 	.word	0x0800e1bc
 8007218:	e070381d 	.word	0xe070381d
 800721c:	0800e1c4 	.word	0x0800e1c4

08007220 <SIM7600_getSMSCounter>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getSMSCounter(SIM7600_HandleTypeDef *const me)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af02      	add	r7, sp, #8
 8007226:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <SIM7600_getSMSCounter+0x12>
	{
		return THT_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e032      	b.n	8007298 <SIM7600_getSMSCounter+0x78>
	}

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8007232:	f242 7310 	movw	r3, #10000	; 0x2710
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4b19      	ldr	r3, [pc, #100]	; (80072a0 <SIM7600_getSMSCounter+0x80>)
 800723a:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <SIM7600_getSMSCounter+0x84>)
 800723c:	491a      	ldr	r1, [pc, #104]	; (80072a8 <SIM7600_getSMSCounter+0x88>)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff faa6 	bl	8006790 <SIM7600_sendATCommand>
 8007244:	4603      	mov	r3, r0
 8007246:	73fb      	strb	r3, [r7, #15]

	if (THT_OK == status)
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d123      	bne.n	8007296 <SIM7600_getSMSCounter+0x76>
	{
		char *sPtr = strstr(me->parent.buffer, ": ");
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3308      	adds	r3, #8
 8007252:	4916      	ldr	r1, [pc, #88]	; (80072ac <SIM7600_getSMSCounter+0x8c>)
 8007254:	4618      	mov	r0, r3
 8007256:	f002 fa53 	bl	8009700 <strstr>
 800725a:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d009      	beq.n	8007276 <SIM7600_getSMSCounter+0x56>
		{
			me->smsCnt = atoi(sPtr + 2);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	3302      	adds	r3, #2
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f868 	bl	800833c <atoi>
 800726c:	4603      	mov	r3, r0
 800726e:	b25a      	sxtb	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
		}

		if (me->smsCnt > me->smsPos)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f993 22c9 	ldrsb.w	r2, [r3, #713]	; 0x2c9
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8007282:	429a      	cmp	r2, r3
 8007284:	dd03      	ble.n	800728e <SIM7600_getSMSCounter+0x6e>
		{
			return me->smsCnt;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f993 32c9 	ldrsb.w	r3, [r3, #713]	; 0x2c9
 800728c:	e004      	b.n	8007298 <SIM7600_getSMSCounter+0x78>
		}
		else
		{
			return me->smsPos;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8007294:	e000      	b.n	8007298 <SIM7600_getSMSCounter+0x78>
		}
	}

	return 0u;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	0800dfe8 	.word	0x0800dfe8
 80072a4:	0800dff0 	.word	0x0800dff0
 80072a8:	0800e074 	.word	0x0800e074
 80072ac:	0800e1e0 	.word	0x0800e1e0

080072b0 <SIM7600_callUSSD>:
 * @param response [out] a buffer to store the response of the USSD request
 * @param size [in]
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_callUSSD(SIM7600_HandleTypeDef *const me, const char *ussd, char response[], const uint16_t size)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b092      	sub	sp, #72	; 0x48
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	807b      	strh	r3, [r7, #2]
	if (me == NULL || ussd == NULL)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d002      	beq.n	80072ca <SIM7600_callUSSD+0x1a>
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <SIM7600_callUSSD+0x1e>
	{
		return THT_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e039      	b.n	8007342 <SIM7600_callUSSD+0x92>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 80072ce:	2300      	movs	r3, #0
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	f107 0314 	add.w	r3, r7, #20
 80072d6:	2224      	movs	r2, #36	; 0x24
 80072d8:	2100      	movs	r1, #0
 80072da:	4618      	mov	r0, r3
 80072dc:	f002 f99e 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+CUSD=1,\"%s\",15", ussd);
 80072e0:	f107 0010 	add.w	r0, r7, #16
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4a19      	ldr	r2, [pc, #100]	; (800734c <SIM7600_callUSSD+0x9c>)
 80072e8:	2128      	movs	r1, #40	; 0x28
 80072ea:	f002 f86b 	bl	80093c4 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, ",15", SIM_URC_ERROR, 15000);
 80072ee:	f107 0110 	add.w	r1, r7, #16
 80072f2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <SIM7600_callUSSD+0xa0>)
 80072fa:	4a16      	ldr	r2, [pc, #88]	; (8007354 <SIM7600_callUSSD+0xa4>)
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fa47 	bl	8006790 <SIM7600_sendATCommand>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (THT_OK == status)
 8007308:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800730c:	2b00      	cmp	r3, #0
 800730e:	d116      	bne.n	800733e <SIM7600_callUSSD+0x8e>
	{
		char *sPtr = strstr(me->parent.buffer, ",\"");
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3308      	adds	r3, #8
 8007314:	4910      	ldr	r1, [pc, #64]	; (8007358 <SIM7600_callUSSD+0xa8>)
 8007316:	4618      	mov	r0, r3
 8007318:	f002 f9f2 	bl	8009700 <strstr>
 800731c:	63b8      	str	r0, [r7, #56]	; 0x38

		THT_copyStringUntilToken(sPtr + 1, response, size, NULL);
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	1c58      	adds	r0, r3, #1
 8007322:	887a      	ldrh	r2, [r7, #2]
 8007324:	2300      	movs	r3, #0
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	f7ff f9a8 	bl	800667c <THT_copyStringUntilToken>
		SIM7600_sendATCommand(me, "AT+CUSD=2,\"\",15", SIM_URC_OK, SIM_URC_ERROR, 15000);
 800732c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <SIM7600_callUSSD+0xa0>)
 8007334:	4a09      	ldr	r2, [pc, #36]	; (800735c <SIM7600_callUSSD+0xac>)
 8007336:	490a      	ldr	r1, [pc, #40]	; (8007360 <SIM7600_callUSSD+0xb0>)
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff fa29 	bl	8006790 <SIM7600_sendATCommand>
	}
	return status;
 800733e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007342:	4618      	mov	r0, r3
 8007344:	3740      	adds	r7, #64	; 0x40
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	0800e1e4 	.word	0x0800e1e4
 8007350:	0800dfe8 	.word	0x0800dfe8
 8007354:	0800e1f8 	.word	0x0800e1f8
 8007358:	0800e1fc 	.word	0x0800e1fc
 800735c:	0800dff0 	.word	0x0800dff0
 8007360:	0800e200 	.word	0x0800e200

08007364 <SIM7600_getRSSI>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getRSSI(SIM7600_HandleTypeDef *const me)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af02      	add	r7, sp, #8
 800736a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <SIM7600_getRSSI+0x12>
	{
		return 0;
 8007372:	2300      	movs	r3, #0
 8007374:	e025      	b.n	80073c2 <SIM7600_getRSSI+0x5e>
	}

	int8_t rssi = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CSQ", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800737a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	4b12      	ldr	r3, [pc, #72]	; (80073cc <SIM7600_getRSSI+0x68>)
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <SIM7600_getRSSI+0x6c>)
 8007384:	4913      	ldr	r1, [pc, #76]	; (80073d4 <SIM7600_getRSSI+0x70>)
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fa02 	bl	8006790 <SIM7600_sendATCommand>
 800738c:	4603      	mov	r3, r0
 800738e:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 8007390:	7bbb      	ldrb	r3, [r7, #14]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d113      	bne.n	80073be <SIM7600_getRSSI+0x5a>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3308      	adds	r3, #8
 800739a:	2120      	movs	r1, #32
 800739c:	4618      	mov	r0, r3
 800739e:	f002 f945 	bl	800962c <strchr>
 80073a2:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d009      	beq.n	80073be <SIM7600_getRSSI+0x5a>
		{
			rssi = (2u * atoi(sPtr)) - 113u;
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f000 ffc6 	bl	800833c <atoi>
 80073b0:	4603      	mov	r3, r0
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	3b71      	subs	r3, #113	; 0x71
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rssi;
 80073be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	0800dfe8 	.word	0x0800dfe8
 80073d0:	0800dff0 	.word	0x0800dff0
 80073d4:	0800e210 	.word	0x0800e210

080073d8 <SIM7600_getNetworkType>:
 * @param pNwtype [out] A buffer to store the string network type
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getNetworkType(SIM7600_HandleTypeDef *const me, char pNwtype[], const uint8_t size)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af02      	add	r7, sp, #8
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pNwtype == NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <SIM7600_getNetworkType+0x1a>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <SIM7600_getNetworkType+0x1e>
	{
		return THT_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e061      	b.n	80074ba <SIM7600_getNetworkType+0xe2>
	}

	memset(pNwtype, '\0', size);
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	461a      	mov	r2, r3
 80073fa:	2100      	movs	r1, #0
 80073fc:	68b8      	ldr	r0, [r7, #8]
 80073fe:	f002 f90d 	bl	800961c <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007402:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	4b2e      	ldr	r3, [pc, #184]	; (80074c4 <SIM7600_getNetworkType+0xec>)
 800740a:	4a2f      	ldr	r2, [pc, #188]	; (80074c8 <SIM7600_getNetworkType+0xf0>)
 800740c:	492f      	ldr	r1, [pc, #188]	; (80074cc <SIM7600_getNetworkType+0xf4>)
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff f9be 	bl	8006790 <SIM7600_sendATCommand>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

	if (THT_OK == status)
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d146      	bne.n	80074ac <SIM7600_getNetworkType+0xd4>
	{
		if (strstr(me->parent.buffer, "LTE") != NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3308      	adds	r3, #8
 8007422:	492b      	ldr	r1, [pc, #172]	; (80074d0 <SIM7600_getNetworkType+0xf8>)
 8007424:	4618      	mov	r0, r3
 8007426:	f002 f96b 	bl	8009700 <strstr>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <SIM7600_getNetworkType+0x66>
		{
			snprintf(pNwtype, size, "LTE");
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <SIM7600_getNetworkType+0xf8>)
 8007434:	4619      	mov	r1, r3
 8007436:	68b8      	ldr	r0, [r7, #8]
 8007438:	f001 ffc4 	bl	80093c4 <sniprintf>
 800743c:	e03c      	b.n	80074b8 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "WCDMA") != NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3308      	adds	r3, #8
 8007442:	4924      	ldr	r1, [pc, #144]	; (80074d4 <SIM7600_getNetworkType+0xfc>)
 8007444:	4618      	mov	r0, r3
 8007446:	f002 f95b 	bl	8009700 <strstr>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <SIM7600_getNetworkType+0x86>
		{
			snprintf(pNwtype, size, "WCDMA");
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <SIM7600_getNetworkType+0xfc>)
 8007454:	4619      	mov	r1, r3
 8007456:	68b8      	ldr	r0, [r7, #8]
 8007458:	f001 ffb4 	bl	80093c4 <sniprintf>
 800745c:	e02c      	b.n	80074b8 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "GSM") != NULL)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3308      	adds	r3, #8
 8007462:	491d      	ldr	r1, [pc, #116]	; (80074d8 <SIM7600_getNetworkType+0x100>)
 8007464:	4618      	mov	r0, r3
 8007466:	f002 f94b 	bl	8009700 <strstr>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d006      	beq.n	800747e <SIM7600_getNetworkType+0xa6>
		{
			snprintf(pNwtype, size, "GSM");
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	4a19      	ldr	r2, [pc, #100]	; (80074d8 <SIM7600_getNetworkType+0x100>)
 8007474:	4619      	mov	r1, r3
 8007476:	68b8      	ldr	r0, [r7, #8]
 8007478:	f001 ffa4 	bl	80093c4 <sniprintf>
 800747c:	e01c      	b.n	80074b8 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "NO SERVICE") != NULL)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3308      	adds	r3, #8
 8007482:	4916      	ldr	r1, [pc, #88]	; (80074dc <SIM7600_getNetworkType+0x104>)
 8007484:	4618      	mov	r0, r3
 8007486:	f002 f93b 	bl	8009700 <strstr>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d006      	beq.n	800749e <SIM7600_getNetworkType+0xc6>
		{
			snprintf(pNwtype, size, "NO SERVICE");
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	4a12      	ldr	r2, [pc, #72]	; (80074dc <SIM7600_getNetworkType+0x104>)
 8007494:	4619      	mov	r1, r3
 8007496:	68b8      	ldr	r0, [r7, #8]
 8007498:	f001 ff94 	bl	80093c4 <sniprintf>
 800749c:	e00c      	b.n	80074b8 <SIM7600_getNetworkType+0xe0>
		}
		else
		{
			snprintf(pNwtype, size, "Unknown");
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <SIM7600_getNetworkType+0x108>)
 80074a2:	4619      	mov	r1, r3
 80074a4:	68b8      	ldr	r0, [r7, #8]
 80074a6:	f001 ff8d 	bl	80093c4 <sniprintf>
 80074aa:	e005      	b.n	80074b8 <SIM7600_getNetworkType+0xe0>
		}
	}
	else
	{
		snprintf(pNwtype, size, "Unknown");
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <SIM7600_getNetworkType+0x108>)
 80074b0:	4619      	mov	r1, r3
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f001 ff86 	bl	80093c4 <sniprintf>
	}

	return status;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	0800dfe8 	.word	0x0800dfe8
 80074c8:	0800dff0 	.word	0x0800dff0
 80074cc:	0800e218 	.word	0x0800e218
 80074d0:	0800e224 	.word	0x0800e224
 80074d4:	0800e228 	.word	0x0800e228
 80074d8:	0800e230 	.word	0x0800e230
 80074dc:	0800e0f4 	.word	0x0800e0f4
 80074e0:	0800e100 	.word	0x0800e100

080074e4 <SIM7600_getTemperature>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getTemperature(SIM7600_HandleTypeDef *const me)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <SIM7600_getTemperature+0x12>
	{
		return THT_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e022      	b.n	800753c <SIM7600_getTemperature+0x58>
	}

	int8_t temperature = 0.0f;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMUTEMP", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80074fa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4b10      	ldr	r3, [pc, #64]	; (8007544 <SIM7600_getTemperature+0x60>)
 8007502:	4a11      	ldr	r2, [pc, #68]	; (8007548 <SIM7600_getTemperature+0x64>)
 8007504:	4911      	ldr	r1, [pc, #68]	; (800754c <SIM7600_getTemperature+0x68>)
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff f942 	bl	8006790 <SIM7600_sendATCommand>
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d110      	bne.n	8007538 <SIM7600_getTemperature+0x54>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3308      	adds	r3, #8
 800751a:	2120      	movs	r1, #32
 800751c:	4618      	mov	r0, r3
 800751e:	f002 f885 	bl	800962c <strchr>
 8007522:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <SIM7600_getTemperature+0x54>
		{
			temperature = atoi(sPtr + 1);
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	3301      	adds	r3, #1
 800752e:	4618      	mov	r0, r3
 8007530:	f000 ff04 	bl	800833c <atoi>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
		}
	}

	return temperature;
 8007538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	0800dfe8 	.word	0x0800dfe8
 8007548:	0800dff0 	.word	0x0800dff0
 800754c:	0800e234 	.word	0x0800e234

08007550 <SIM7600_getSimPhone>:
 * @param pPhone [out] A buffer to store the phone number
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getSimPhone(SIM7600_HandleTypeDef *const me, char pPhone[], const uint8_t size)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b0b0      	sub	sp, #192	; 0xc0
 8007554:	af02      	add	r7, sp, #8
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pPhone == NULL || size < SIM_PHONE_SIZE)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <SIM7600_getSimPhone+0x20>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <SIM7600_getSimPhone+0x20>
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	2b0c      	cmp	r3, #12
 800756e:	d801      	bhi.n	8007574 <SIM7600_getSimPhone+0x24>
	{
		return THT_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e0d1      	b.n	8007718 <SIM7600_getSimPhone+0x1c8>
	enum Enum
	{
		USSD_BUFFER_SIZE = 150
	};

	memset(pPhone, '\0', size);
 8007574:	79fb      	ldrb	r3, [r7, #7]
 8007576:	461a      	mov	r2, r3
 8007578:	2100      	movs	r1, #0
 800757a:	68b8      	ldr	r0, [r7, #8]
 800757c:	f002 f84e 	bl	800961c <memset>

	uint8_t counter = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	char ussdResponse[USSD_BUFFER_SIZE] = {0};
 8007586:	2300      	movs	r3, #0
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	2292      	movs	r2, #146	; 0x92
 8007590:	2100      	movs	r1, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f002 f842 	bl	800961c <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+COPS?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007598:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	4b60      	ldr	r3, [pc, #384]	; (8007720 <SIM7600_getSimPhone+0x1d0>)
 80075a0:	4a60      	ldr	r2, [pc, #384]	; (8007724 <SIM7600_getSimPhone+0x1d4>)
 80075a2:	4961      	ldr	r1, [pc, #388]	; (8007728 <SIM7600_getSimPhone+0x1d8>)
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f7ff f8f3 	bl	8006790 <SIM7600_sendATCommand>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

	if (THT_OK == status)
 80075b0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 80ad 	bne.w	8007714 <SIM7600_getSimPhone+0x1c4>
	{
		/* "\r\n+COPS: 0,0,\"Viettel Viettel\",7\r\n\r\nOK\r\n" */
		do
		{
			/* Check if sim is Viettel Operator */
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3308      	adds	r3, #8
 80075be:	495b      	ldr	r1, [pc, #364]	; (800772c <SIM7600_getSimPhone+0x1dc>)
 80075c0:	4618      	mov	r0, r3
 80075c2:	f002 f89d 	bl	8009700 <strstr>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d108      	bne.n	80075de <SIM7600_getSimPhone+0x8e>
				strstr(me->parent.buffer, "VIETTEL") != NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3308      	adds	r3, #8
 80075d0:	4957      	ldr	r1, [pc, #348]	; (8007730 <SIM7600_getSimPhone+0x1e0>)
 80075d2:	4618      	mov	r0, r3
 80075d4:	f002 f894 	bl	8009700 <strstr>
 80075d8:	4603      	mov	r3, r0
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d025      	beq.n	800762a <SIM7600_getSimPhone+0xda>
			{
				status = SIM7600_callUSSD(me, "*098#", ussdResponse, sizeof(ussdResponse));
 80075de:	f107 0210 	add.w	r2, r7, #16
 80075e2:	2396      	movs	r3, #150	; 0x96
 80075e4:	4953      	ldr	r1, [pc, #332]	; (8007734 <SIM7600_getSimPhone+0x1e4>)
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fe62 	bl	80072b0 <SIM7600_callUSSD>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 80075f2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d17e      	bne.n	80076f8 <SIM7600_getSimPhone+0x1a8>
				{
					/* "Moi 01699741245 chon: */
					memcpy(pPhone, "84", 2);
 80075fa:	2202      	movs	r2, #2
 80075fc:	494e      	ldr	r1, [pc, #312]	; (8007738 <SIM7600_getSimPhone+0x1e8>)
 80075fe:	68b8      	ldr	r0, [r7, #8]
 8007600:	f002 f90b 	bl	800981a <memcpy>

					char *sPtr = strstr(ussdResponse, " ");
 8007604:	f107 0310 	add.w	r3, r7, #16
 8007608:	2120      	movs	r1, #32
 800760a:	4618      	mov	r0, r3
 800760c:	f002 f80e 	bl	800962c <strchr>
 8007610:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
					THT_copyStringUntilToken(sPtr + 2, pPhone + 2, size, " ");
 8007614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007618:	1c98      	adds	r0, r3, #2
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	1c99      	adds	r1, r3, #2
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	b29a      	uxth	r2, r3
 8007622:	4b46      	ldr	r3, [pc, #280]	; (800773c <SIM7600_getSimPhone+0x1ec>)
 8007624:	f7ff f82a 	bl	800667c <THT_copyStringUntilToken>
				if (THT_OK == status)
 8007628:	e066      	b.n	80076f8 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Vina Operator */
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3308      	adds	r3, #8
 800762e:	4944      	ldr	r1, [pc, #272]	; (8007740 <SIM7600_getSimPhone+0x1f0>)
 8007630:	4618      	mov	r0, r3
 8007632:	f002 f865 	bl	8009700 <strstr>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d108      	bne.n	800764e <SIM7600_getSimPhone+0xfe>
					 strstr(me->parent.buffer, "VINA") != NULL)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3308      	adds	r3, #8
 8007640:	4940      	ldr	r1, [pc, #256]	; (8007744 <SIM7600_getSimPhone+0x1f4>)
 8007642:	4618      	mov	r0, r3
 8007644:	f002 f85c 	bl	8009700 <strstr>
 8007648:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 800764a:	2b00      	cmp	r3, #0
 800764c:	d024      	beq.n	8007698 <SIM7600_getSimPhone+0x148>
			{
				status = SIM7600_callUSSD(me, "*110#", ussdResponse, sizeof(ussdResponse));
 800764e:	f107 0210 	add.w	r2, r7, #16
 8007652:	2396      	movs	r3, #150	; 0x96
 8007654:	493c      	ldr	r1, [pc, #240]	; (8007748 <SIM7600_getSimPhone+0x1f8>)
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe2a 	bl	80072b0 <SIM7600_callUSSD>
 800765c:	4603      	mov	r3, r0
 800765e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 8007662:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8007666:	2b00      	cmp	r3, #0
 8007668:	d146      	bne.n	80076f8 <SIM7600_getSimPhone+0x1a8>
				{
					/* "TB (VINACARD):914486786 */
					memcpy(pPhone, "84", 2);
 800766a:	2202      	movs	r2, #2
 800766c:	4932      	ldr	r1, [pc, #200]	; (8007738 <SIM7600_getSimPhone+0x1e8>)
 800766e:	68b8      	ldr	r0, [r7, #8]
 8007670:	f002 f8d3 	bl	800981a <memcpy>
					char *sPtr = strstr(ussdResponse, ":");
 8007674:	f107 0310 	add.w	r3, r7, #16
 8007678:	213a      	movs	r1, #58	; 0x3a
 800767a:	4618      	mov	r0, r3
 800767c:	f001 ffd6 	bl	800962c <strchr>
 8007680:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
					THT_copyStringUntilToken(sPtr, pPhone + 2, size, "\r");
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	1c99      	adds	r1, r3, #2
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	b29a      	uxth	r2, r3
 800768c:	4b2f      	ldr	r3, [pc, #188]	; (800774c <SIM7600_getSimPhone+0x1fc>)
 800768e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8007692:	f7fe fff3 	bl	800667c <THT_copyStringUntilToken>
				if (THT_OK == status)
 8007696:	e02f      	b.n	80076f8 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Mobifone Operator */
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3308      	adds	r3, #8
 800769c:	492c      	ldr	r1, [pc, #176]	; (8007750 <SIM7600_getSimPhone+0x200>)
 800769e:	4618      	mov	r0, r3
 80076a0:	f002 f82e 	bl	8009700 <strstr>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d108      	bne.n	80076bc <SIM7600_getSimPhone+0x16c>
					 strstr(me->parent.buffer, "Mobiphone") != NULL)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3308      	adds	r3, #8
 80076ae:	4929      	ldr	r1, [pc, #164]	; (8007754 <SIM7600_getSimPhone+0x204>)
 80076b0:	4618      	mov	r0, r3
 80076b2:	f002 f825 	bl	8009700 <strstr>
 80076b6:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01d      	beq.n	80076f8 <SIM7600_getSimPhone+0x1a8>
			{
				status = SIM7600_callUSSD(me, "*0#", ussdResponse, sizeof(ussdResponse));
 80076bc:	f107 0210 	add.w	r2, r7, #16
 80076c0:	2396      	movs	r3, #150	; 0x96
 80076c2:	4925      	ldr	r1, [pc, #148]	; (8007758 <SIM7600_getSimPhone+0x208>)
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff fdf3 	bl	80072b0 <SIM7600_callUSSD>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 80076d0:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10f      	bne.n	80076f8 <SIM7600_getSimPhone+0x1a8>
				{
					/* "84914486786" */
					char *sPtr = strstr(ussdResponse, "84");
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	4916      	ldr	r1, [pc, #88]	; (8007738 <SIM7600_getSimPhone+0x1e8>)
 80076de:	4618      	mov	r0, r3
 80076e0:	f002 f80e 	bl	8009700 <strstr>
 80076e4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					THT_copyStringUntilToken(sPtr, pPhone, size, "\r");
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	4b17      	ldr	r3, [pc, #92]	; (800774c <SIM7600_getSimPhone+0x1fc>)
 80076ee:	68b9      	ldr	r1, [r7, #8]
 80076f0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80076f4:	f7fe ffc2 	bl	800667c <THT_copyStringUntilToken>
				}
			}
			counter++;
 80076f8:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80076fc:	3301      	adds	r3, #1
 80076fe:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		} while (counter < 3 && pPhone[0] == 0);
 8007702:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8007706:	2b02      	cmp	r3, #2
 8007708:	d804      	bhi.n	8007714 <SIM7600_getSimPhone+0x1c4>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f43f af53 	beq.w	80075ba <SIM7600_getSimPhone+0x6a>
	}

	return status;
 8007714:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
}
 8007718:	4618      	mov	r0, r3
 800771a:	37b8      	adds	r7, #184	; 0xb8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	0800dfe8 	.word	0x0800dfe8
 8007724:	0800dff0 	.word	0x0800dff0
 8007728:	0800e240 	.word	0x0800e240
 800772c:	0800e24c 	.word	0x0800e24c
 8007730:	0800e254 	.word	0x0800e254
 8007734:	0800e25c 	.word	0x0800e25c
 8007738:	0800e264 	.word	0x0800e264
 800773c:	0800e268 	.word	0x0800e268
 8007740:	0800e26c 	.word	0x0800e26c
 8007744:	0800e274 	.word	0x0800e274
 8007748:	0800e27c 	.word	0x0800e27c
 800774c:	0800e1a4 	.word	0x0800e1a4
 8007750:	0800e284 	.word	0x0800e284
 8007754:	0800e28c 	.word	0x0800e28c
 8007758:	0800e298 	.word	0x0800e298

0800775c <SIM7600_getIMEI>:
 * @param pIMEI [out] A buffer store the SIM IMEI string
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getIMEI(SIM7600_HandleTypeDef *const me, char pIMEI[], const uint8_t size)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	4613      	mov	r3, r2
 8007768:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pIMEI == NULL || size < SIM_IMEI_SIZE)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <SIM7600_getIMEI+0x20>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <SIM7600_getIMEI+0x20>
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d801      	bhi.n	8007780 <SIM7600_getIMEI+0x24>
	{
		return THT_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e02f      	b.n	80077e0 <SIM7600_getIMEI+0x84>
	}

	memset(pIMEI, '\0', size);
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	461a      	mov	r2, r3
 8007784:	2100      	movs	r1, #0
 8007786:	68b8      	ldr	r0, [r7, #8]
 8007788:	f001 ff48 	bl	800961c <memset>

	uint8_t counter = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	75fb      	strb	r3, [r7, #23]
	THT_StatusTypeDef status;

	do
	{
		status = SIM7600_sendATCommand(me, "AT+SIMEI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007790:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <SIM7600_getIMEI+0x8c>)
 8007798:	4a14      	ldr	r2, [pc, #80]	; (80077ec <SIM7600_getIMEI+0x90>)
 800779a:	4915      	ldr	r1, [pc, #84]	; (80077f0 <SIM7600_getIMEI+0x94>)
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7fe fff7 	bl	8006790 <SIM7600_sendATCommand>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75bb      	strb	r3, [r7, #22]

		if (THT_OK == status)
 80077a6:	7dbb      	ldrb	r3, [r7, #22]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10e      	bne.n	80077ca <SIM7600_getIMEI+0x6e>
		{
			char *sPtr = strstr(me->parent.buffer, " ");
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3308      	adds	r3, #8
 80077b0:	2120      	movs	r1, #32
 80077b2:	4618      	mov	r0, r3
 80077b4:	f001 ff3a 	bl	800962c <strchr>
 80077b8:	6138      	str	r0, [r7, #16]
			THT_copyStringUntilToken(sPtr + 1, pIMEI, size, "\r");
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	1c58      	adds	r0, r3, #1
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <SIM7600_getIMEI+0x98>)
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	f7fe ff59 	bl	800667c <THT_copyStringUntilToken>
		}
		counter++;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	3301      	adds	r3, #1
 80077ce:	75fb      	strb	r3, [r7, #23]
	} while (pIMEI[0] == 0 && counter < 3);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <SIM7600_getIMEI+0x82>
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d9d8      	bls.n	8007790 <SIM7600_getIMEI+0x34>

	return status;
 80077de:	7dbb      	ldrb	r3, [r7, #22]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	0800dfe8 	.word	0x0800dfe8
 80077ec:	0800dff0 	.word	0x0800dff0
 80077f0:	0800e29c 	.word	0x0800e29c
 80077f4:	0800e1a4 	.word	0x0800e1a4

080077f8 <SIM7600_getLocalTime>:
 * @param pTime [out] A buffer store the time string
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getLocalTime(SIM7600_HandleTypeDef *const me, char pTime[], const uint8_t size)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size < SIM_TIME_SIZE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d005      	beq.n	8007818 <SIM7600_getLocalTime+0x20>
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <SIM7600_getLocalTime+0x20>
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b15      	cmp	r3, #21
 8007816:	d801      	bhi.n	800781c <SIM7600_getLocalTime+0x24>
	{
		return THT_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e03e      	b.n	800789a <SIM7600_getLocalTime+0xa2>
	}

	uint8_t counter = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	75fb      	strb	r3, [r7, #23]

	memset(pTime, '\0', size);
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	461a      	mov	r2, r3
 8007824:	2100      	movs	r1, #0
 8007826:	68b8      	ldr	r0, [r7, #8]
 8007828:	f001 fef8 	bl	800961c <memset>

	THT_StatusTypeDef status;
	do
	{
		status = SIM7600_sendATCommand(me, "AT+CCLK?", "+28", SIM_URC_ERROR, 3000);
 800782c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <SIM7600_getLocalTime+0xac>)
 8007834:	4a1c      	ldr	r2, [pc, #112]	; (80078a8 <SIM7600_getLocalTime+0xb0>)
 8007836:	491d      	ldr	r1, [pc, #116]	; (80078ac <SIM7600_getLocalTime+0xb4>)
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f7fe ffa9 	bl	8006790 <SIM7600_sendATCommand>
 800783e:	4603      	mov	r3, r0
 8007840:	75bb      	strb	r3, [r7, #22]

		if (status == THT_OK)
 8007842:	7dbb      	ldrb	r3, [r7, #22]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d117      	bne.n	8007878 <SIM7600_getLocalTime+0x80>
		{
			if (strstr(me->parent.buffer, "80/0") == NULL)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3308      	adds	r3, #8
 800784c:	4918      	ldr	r1, [pc, #96]	; (80078b0 <SIM7600_getLocalTime+0xb8>)
 800784e:	4618      	mov	r0, r3
 8007850:	f001 ff56 	bl	8009700 <strstr>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10e      	bne.n	8007878 <SIM7600_getLocalTime+0x80>
			{
				char *sPtr = strstr(me->parent.buffer, "\"");
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3308      	adds	r3, #8
 800785e:	2122      	movs	r1, #34	; 0x22
 8007860:	4618      	mov	r0, r3
 8007862:	f001 fee3 	bl	800962c <strchr>
 8007866:	6138      	str	r0, [r7, #16]
				THT_copyStringUntilToken(sPtr + 1, pTime, size, "\"");
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1c58      	adds	r0, r3, #1
 800786c:	79fb      	ldrb	r3, [r7, #7]
 800786e:	b29a      	uxth	r2, r3
 8007870:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <SIM7600_getLocalTime+0xbc>)
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	f7fe ff02 	bl	800667c <THT_copyStringUntilToken>
			}
		}
		counter++;
 8007878:	7dfb      	ldrb	r3, [r7, #23]
 800787a:	3301      	adds	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
	} while (counter < 3 && pTime[0] == 0);
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d803      	bhi.n	800788c <SIM7600_getLocalTime+0x94>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0cf      	beq.n	800782c <SIM7600_getLocalTime+0x34>

	if (pTime[0] == 0)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <SIM7600_getLocalTime+0xa0>
		status = THT_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	75bb      	strb	r3, [r7, #22]

	return status;
 8007898:	7dbb      	ldrb	r3, [r7, #22]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3718      	adds	r7, #24
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	0800dfe8 	.word	0x0800dfe8
 80078a8:	0800e2a8 	.word	0x0800e2a8
 80078ac:	0800e2ac 	.word	0x0800e2ac
 80078b0:	0800e2b8 	.word	0x0800e2b8
 80078b4:	0800e198 	.word	0x0800e198

080078b8 <SIM7600_getFileSize>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return uint32_t
 */
uint32_t SIM7600_getFileSize(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b0a0      	sub	sp, #128	; 0x80
 80078bc:	af02      	add	r7, sp, #8
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SIM7600_getFileSize+0x16>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <SIM7600_getFileSize+0x1a>
	{
		return 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	e042      	b.n	8007958 <SIM7600_getFileSize+0xa0>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	f107 0310 	add.w	r3, r7, #16
 80078da:	2260      	movs	r2, #96	; 0x60
 80078dc:	2100      	movs	r1, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	f001 fe9c 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+FSATTRI=%s", pFilename);
 80078e4:	f107 000c 	add.w	r0, r7, #12
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <SIM7600_getFileSize+0xa8>)
 80078ec:	2164      	movs	r1, #100	; 0x64
 80078ee:	f001 fd69 	bl	80093c4 <sniprintf>

	SIM7600_sendATCommand(me, "AT+FSCD=F:", SIM_URC_OK, SIM_URC_ERROR, 3000);
 80078f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <SIM7600_getFileSize+0xac>)
 80078fa:	4a1b      	ldr	r2, [pc, #108]	; (8007968 <SIM7600_getFileSize+0xb0>)
 80078fc:	491b      	ldr	r1, [pc, #108]	; (800796c <SIM7600_getFileSize+0xb4>)
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fe ff46 	bl	8006790 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+FSLS=2", SIM_URC_OK, SIM_URC_ERROR, 3000);
 8007904:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4b16      	ldr	r3, [pc, #88]	; (8007964 <SIM7600_getFileSize+0xac>)
 800790c:	4a16      	ldr	r2, [pc, #88]	; (8007968 <SIM7600_getFileSize+0xb0>)
 800790e:	4918      	ldr	r1, [pc, #96]	; (8007970 <SIM7600_getFileSize+0xb8>)
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fe ff3d 	bl	8006790 <SIM7600_sendATCommand>

	if (SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000) == THT_OK)
 8007916:	f107 010c 	add.w	r1, r7, #12
 800791a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <SIM7600_getFileSize+0xac>)
 8007922:	4a11      	ldr	r2, [pc, #68]	; (8007968 <SIM7600_getFileSize+0xb0>)
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe ff33 	bl	8006790 <SIM7600_sendATCommand>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d112      	bne.n	8007956 <SIM7600_getFileSize+0x9e>
	{
		char *sPtr = strstr(me->parent.buffer, "+FSATTRI: ");
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	3308      	adds	r3, #8
 8007934:	490f      	ldr	r1, [pc, #60]	; (8007974 <SIM7600_getFileSize+0xbc>)
 8007936:	4618      	mov	r0, r3
 8007938:	f001 fee2 	bl	8009700 <strstr>
 800793c:	6778      	str	r0, [r7, #116]	; 0x74

		if (sPtr != NULL)
 800793e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <SIM7600_getFileSize+0x9e>
		{
			uint32_t filesize = atol(sPtr + 10);
 8007944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007946:	330a      	adds	r3, #10
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fcfb 	bl	8008344 <atol>
 800794e:	4603      	mov	r3, r0
 8007950:	673b      	str	r3, [r7, #112]	; 0x70
			return filesize;
 8007952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007954:	e000      	b.n	8007958 <SIM7600_getFileSize+0xa0>
		}
	}

	return 0u;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3778      	adds	r7, #120	; 0x78
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	0800e2c0 	.word	0x0800e2c0
 8007964:	0800dfe8 	.word	0x0800dfe8
 8007968:	0800dff0 	.word	0x0800dff0
 800796c:	0800e2d0 	.word	0x0800e2d0
 8007970:	0800e2dc 	.word	0x0800e2dc
 8007974:	0800e2e8 	.word	0x0800e2e8

08007978 <SIM7600_deleteFile>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_deleteFile(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b09e      	sub	sp, #120	; 0x78
 800797c:	af02      	add	r7, sp, #8
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d002      	beq.n	800798e <SIM7600_deleteFile+0x16>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <SIM7600_deleteFile+0x1a>
	{
		return 0u;
 800798e:	2300      	movs	r3, #0
 8007990:	e01a      	b.n	80079c8 <SIM7600_deleteFile+0x50>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	f107 0310 	add.w	r3, r7, #16
 800799a:	2260      	movs	r2, #96	; 0x60
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 fe3c 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+FSDEL=\"/%s\"", pFilename);
 80079a4:	f107 000c 	add.w	r0, r7, #12
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	4a09      	ldr	r2, [pc, #36]	; (80079d0 <SIM7600_deleteFile+0x58>)
 80079ac:	2164      	movs	r1, #100	; 0x64
 80079ae:	f001 fd09 	bl	80093c4 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000);
 80079b2:	f107 010c 	add.w	r1, r7, #12
 80079b6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <SIM7600_deleteFile+0x5c>)
 80079be:	4a06      	ldr	r2, [pc, #24]	; (80079d8 <SIM7600_deleteFile+0x60>)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7fe fee5 	bl	8006790 <SIM7600_sendATCommand>
 80079c6:	4603      	mov	r3, r0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3770      	adds	r7, #112	; 0x70
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	0800e2f4 	.word	0x0800e2f4
 80079d4:	0800dfe8 	.word	0x0800dfe8
 80079d8:	0800dff0 	.word	0x0800dff0

080079dc <SIM7600_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeAuto(SIM7600_HandleTypeDef *const me)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <SIM7600_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e05c      	b.n	8007aa8 <SIM7600_setLocalTimeAuto+0xcc>
	}

	uint8_t counter = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status;

	SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 5000); //"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 80079f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	4b2d      	ldr	r3, [pc, #180]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 80079fa:	4a2e      	ldr	r2, [pc, #184]	; (8007ab4 <SIM7600_setLocalTimeAuto+0xd8>)
 80079fc:	492e      	ldr	r1, [pc, #184]	; (8007ab8 <SIM7600_setLocalTimeAuto+0xdc>)
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fe fec6 	bl	8006790 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007a04:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4b29      	ldr	r3, [pc, #164]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 8007a0c:	4a2b      	ldr	r2, [pc, #172]	; (8007abc <SIM7600_setLocalTimeAuto+0xe0>)
 8007a0e:	492c      	ldr	r1, [pc, #176]	; (8007ac0 <SIM7600_setLocalTimeAuto+0xe4>)
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe febd 	bl	8006790 <SIM7600_sendATCommand>

	do
	{
		switch (counter)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d01e      	beq.n	8007a5a <SIM7600_setLocalTimeAuto+0x7e>
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	dc28      	bgt.n	8007a72 <SIM7600_setLocalTimeAuto+0x96>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <SIM7600_setLocalTimeAuto+0x4e>
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d00c      	beq.n	8007a42 <SIM7600_setLocalTimeAuto+0x66>
 8007a28:	e023      	b.n	8007a72 <SIM7600_setLocalTimeAuto+0x96>
		{
		case 0:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"time1.google.com\",28", SIM_URC_OK, SIM_URC_ERROR, 5000); //"\r\nOK\r\n"
 8007a2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	4b1f      	ldr	r3, [pc, #124]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 8007a32:	4a22      	ldr	r2, [pc, #136]	; (8007abc <SIM7600_setLocalTimeAuto+0xe0>)
 8007a34:	4923      	ldr	r1, [pc, #140]	; (8007ac4 <SIM7600_setLocalTimeAuto+0xe8>)
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fe feaa 	bl	8006790 <SIM7600_sendATCommand>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73bb      	strb	r3, [r7, #14]
			break;
 8007a40:	e01a      	b.n	8007a78 <SIM7600_setLocalTimeAuto+0x9c>
		case 1:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.vn.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007a42:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	4b19      	ldr	r3, [pc, #100]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <SIM7600_setLocalTimeAuto+0xe0>)
 8007a4c:	491e      	ldr	r1, [pc, #120]	; (8007ac8 <SIM7600_setLocalTimeAuto+0xec>)
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fe fe9e 	bl	8006790 <SIM7600_sendATCommand>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73bb      	strb	r3, [r7, #14]
			break;
 8007a58:	e00e      	b.n	8007a78 <SIM7600_setLocalTimeAuto+0x9c>
		case 2:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.asia.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007a5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4b13      	ldr	r3, [pc, #76]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 8007a62:	4a16      	ldr	r2, [pc, #88]	; (8007abc <SIM7600_setLocalTimeAuto+0xe0>)
 8007a64:	4919      	ldr	r1, [pc, #100]	; (8007acc <SIM7600_setLocalTimeAuto+0xf0>)
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fe fe92 	bl	8006790 <SIM7600_sendATCommand>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73bb      	strb	r3, [r7, #14]
			break;
 8007a70:	e002      	b.n	8007a78 <SIM7600_setLocalTimeAuto+0x9c>
		default:
			status = THT_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	73bb      	strb	r3, [r7, #14]
			break;
 8007a76:	bf00      	nop
		}
		counter++;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
	} while (THT_OK != status && counter < 3U);
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <SIM7600_setLocalTimeAuto+0xae>
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d9c5      	bls.n	8007a16 <SIM7600_setLocalTimeAuto+0x3a>

	if (THT_OK == status)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <SIM7600_setLocalTimeAuto+0xca>
	{
		status = SIM7600_sendATCommand(me, "AT+CNTP", "+CNTP: 0", SIM_URC_ERROR, 4000); //"\r\n+CNTP: 0\r\n"
 8007a90:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <SIM7600_setLocalTimeAuto+0xd4>)
 8007a98:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <SIM7600_setLocalTimeAuto+0xf4>)
 8007a9a:	490e      	ldr	r1, [pc, #56]	; (8007ad4 <SIM7600_setLocalTimeAuto+0xf8>)
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe fe77 	bl	8006790 <SIM7600_sendATCommand>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73bb      	strb	r3, [r7, #14]
	}

	return status;
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	0800dfe8 	.word	0x0800dfe8
 8007ab4:	0800e01c 	.word	0x0800e01c
 8007ab8:	0800e028 	.word	0x0800e028
 8007abc:	0800dff0 	.word	0x0800dff0
 8007ac0:	0800e218 	.word	0x0800e218
 8007ac4:	0800e304 	.word	0x0800e304
 8007ac8:	0800e324 	.word	0x0800e324
 8007acc:	0800e344 	.word	0x0800e344
 8007ad0:	0800e368 	.word	0x0800e368
 8007ad4:	0800e374 	.word	0x0800e374

08007ad8 <SIM7600_setLocalTimeManual>:
 * @param pTime [in] A pointer to the timestring
 * @param size [in] The length of the string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeManual(SIM7600_HandleTypeDef *const me, const char *pTime, const uint8_t size)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b090      	sub	sp, #64	; 0x40
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size > SIM_TIME_SIZE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <SIM7600_setLocalTimeManual+0x20>
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <SIM7600_setLocalTimeManual+0x20>
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b16      	cmp	r3, #22
 8007af6:	d901      	bls.n	8007afc <SIM7600_setLocalTimeManual+0x24>
	{
		return THT_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e01a      	b.n	8007b32 <SIM7600_setLocalTimeManual+0x5a>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 8007afc:	2300      	movs	r3, #0
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	f107 0314 	add.w	r3, r7, #20
 8007b04:	2224      	movs	r2, #36	; 0x24
 8007b06:	2100      	movs	r1, #0
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fd87 	bl	800961c <memset>
	snprintf(command, sizeof(command), "AT+CCLK=\"%s\"", pTime);
 8007b0e:	f107 0010 	add.w	r0, r7, #16
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <SIM7600_setLocalTimeManual+0x64>)
 8007b16:	2128      	movs	r1, #40	; 0x28
 8007b18:	f001 fc54 	bl	80093c4 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007b1c:	f107 0110 	add.w	r1, r7, #16
 8007b20:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <SIM7600_setLocalTimeManual+0x68>)
 8007b28:	4a06      	ldr	r2, [pc, #24]	; (8007b44 <SIM7600_setLocalTimeManual+0x6c>)
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7fe fe30 	bl	8006790 <SIM7600_sendATCommand>
 8007b30:	4603      	mov	r3, r0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3738      	adds	r7, #56	; 0x38
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	0800e37c 	.word	0x0800e37c
 8007b40:	0800dfe8 	.word	0x0800dfe8
 8007b44:	0800dff0 	.word	0x0800dff0

08007b48 <SIM7600_selectPhonebookMem>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_selectPhonebookMem(SIM7600_HandleTypeDef *const me)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <SIM7600_selectPhonebookMem+0x12>
	{
		return THT_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e009      	b.n	8007b6e <SIM7600_selectPhonebookMem+0x26>
	}

	return SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007b5a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <SIM7600_selectPhonebookMem+0x30>)
 8007b62:	4a06      	ldr	r2, [pc, #24]	; (8007b7c <SIM7600_selectPhonebookMem+0x34>)
 8007b64:	4906      	ldr	r1, [pc, #24]	; (8007b80 <SIM7600_selectPhonebookMem+0x38>)
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe fe12 	bl	8006790 <SIM7600_sendATCommand>
 8007b6c:	4603      	mov	r3, r0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	0800dfe8 	.word	0x0800dfe8
 8007b7c:	0800dff0 	.word	0x0800dff0
 8007b80:	0800e064 	.word	0x0800e064

08007b84 <SIM7600_savePhonebook>:
 * @param pPhone [in] A pointer to the phonenumber string
 * @param phoneSize [in] The length of the phonenumber
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_savePhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, const char *pPhone, const uint8_t phoneSize)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b0a0      	sub	sp, #128	; 0x80
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	460b      	mov	r3, r1
 8007b92:	72fb      	strb	r3, [r7, #11]
 8007b94:	4613      	mov	r3, r2
 8007b96:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL || phoneSize > SIM_PHONE_SIZE)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <SIM7600_savePhonebook+0x26>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <SIM7600_savePhonebook+0x26>
 8007ba4:	7abb      	ldrb	r3, [r7, #10]
 8007ba6:	2b0d      	cmp	r3, #13
 8007ba8:	d901      	bls.n	8007bae <SIM7600_savePhonebook+0x2a>
	{
		return THT_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e01f      	b.n	8007bee <SIM7600_savePhonebook+0x6a>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	f107 0318 	add.w	r3, r7, #24
 8007bb6:	2260      	movs	r2, #96	; 0x60
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 fd2e 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+CPBW=%d,\"%s\",129,\"%s\"", order,
 8007bc0:	7afa      	ldrb	r2, [r7, #11]
 8007bc2:	f107 0014 	add.w	r0, r7, #20
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <SIM7600_savePhonebook+0x74>)
 8007bd2:	2164      	movs	r1, #100	; 0x64
 8007bd4:	f001 fbf6 	bl	80093c4 <sniprintf>
			 pPhone, pPhone);
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007bd8:	f107 0114 	add.w	r1, r7, #20
 8007bdc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007be0:	9300      	str	r3, [sp, #0]
 8007be2:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <SIM7600_savePhonebook+0x78>)
 8007be4:	4a06      	ldr	r2, [pc, #24]	; (8007c00 <SIM7600_savePhonebook+0x7c>)
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7fe fdd2 	bl	8006790 <SIM7600_sendATCommand>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3778      	adds	r7, #120	; 0x78
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	0800e38c 	.word	0x0800e38c
 8007bfc:	0800dfe8 	.word	0x0800dfe8
 8007c00:	0800dff0 	.word	0x0800dff0

08007c04 <SIM7600_readPhonebook>:
 * @param pPhone [out] A buffer to store the phonenumber store at order
 * @param phoneSize [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readPhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, char pPhone[], const uint8_t phoneSize)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b0a2      	sub	sp, #136	; 0x88
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	460b      	mov	r3, r1
 8007c12:	72fb      	strb	r3, [r7, #11]
 8007c14:	4613      	mov	r3, r2
 8007c16:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <SIM7600_readPhonebook+0x20>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <SIM7600_readPhonebook+0x24>
	{
		return THT_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e031      	b.n	8007c8c <SIM7600_readPhonebook+0x88>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	f107 0318 	add.w	r3, r7, #24
 8007c30:	2260      	movs	r2, #96	; 0x60
 8007c32:	2100      	movs	r1, #0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 fcf1 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+CPBR=%d", order);
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	f107 0014 	add.w	r0, r7, #20
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <SIM7600_readPhonebook+0x90>)
 8007c42:	2164      	movs	r1, #100	; 0x64
 8007c44:	f001 fbbe 	bl	80093c4 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007c48:	f107 0114 	add.w	r1, r7, #20
 8007c4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <SIM7600_readPhonebook+0x94>)
 8007c54:	4a11      	ldr	r2, [pc, #68]	; (8007c9c <SIM7600_readPhonebook+0x98>)
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7fe fd9a 	bl	8006790 <SIM7600_sendATCommand>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (THT_OK == status)
 8007c62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10e      	bne.n	8007c88 <SIM7600_readPhonebook+0x84>
	{
		char *sPtr = strstr(me->parent.buffer, "\"");
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	2122      	movs	r1, #34	; 0x22
 8007c70:	4618      	mov	r0, r3
 8007c72:	f001 fcdb 	bl	800962c <strchr>
 8007c76:	67b8      	str	r0, [r7, #120]	; 0x78

		THT_copyStringUntilToken(sPtr + 1, pPhone, phoneSize, "\"");
 8007c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c7a:	1c58      	adds	r0, r3, #1
 8007c7c:	7abb      	ldrb	r3, [r7, #10]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <SIM7600_readPhonebook+0x9c>)
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	f7fe fcfa 	bl	800667c <THT_copyStringUntilToken>
	}

	return status;
 8007c88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3780      	adds	r7, #128	; 0x80
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	0800e3a8 	.word	0x0800e3a8
 8007c98:	0800dfe8 	.word	0x0800dfe8
 8007c9c:	0800dff0 	.word	0x0800dff0
 8007ca0:	0800e198 	.word	0x0800e198

08007ca4 <SIM7600_findPhonebook>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pPhone [in] Hint, it is the phonenumber want to find
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_findPhonebook(SIM7600_HandleTypeDef *const me, const char *pPhone)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	; 0x38
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPhone == NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <SIM7600_findPhonebook+0x16>
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <SIM7600_findPhonebook+0x1a>
	{
		return THT_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e01a      	b.n	8007cf4 <SIM7600_findPhonebook+0x50>

	enum Enum
	{
		COMMAND_SIZE = 35
	};
	char command[COMMAND_SIZE] = {0};
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	f107 0310 	add.w	r3, r7, #16
 8007cc6:	221f      	movs	r2, #31
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f001 fca6 	bl	800961c <memset>

	snprintf(command, sizeof(command), "AT+CPBF=\"%s\"", pPhone);
 8007cd0:	f107 000c 	add.w	r0, r7, #12
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	4a09      	ldr	r2, [pc, #36]	; (8007cfc <SIM7600_findPhonebook+0x58>)
 8007cd8:	2123      	movs	r1, #35	; 0x23
 8007cda:	f001 fb73 	bl	80093c4 <sniprintf>

	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8007cde:	f107 010c 	add.w	r1, r7, #12
 8007ce2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <SIM7600_findPhonebook+0x5c>)
 8007cea:	4a06      	ldr	r2, [pc, #24]	; (8007d04 <SIM7600_findPhonebook+0x60>)
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7fe fd4f 	bl	8006790 <SIM7600_sendATCommand>
 8007cf2:	4603      	mov	r3, r0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3730      	adds	r7, #48	; 0x30
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	0800e3b4 	.word	0x0800e3b4
 8007d00:	0800dfe8 	.word	0x0800dfe8
 8007d04:	0800dff0 	.word	0x0800dff0

08007d08 <SIM7600_sendHTTP>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pHTTP [in] A pointer to SIM_HTTPTypeDef
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendHTTP(SIM7600_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8007d0e:	af02      	add	r7, sp, #8
 8007d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d18:	6018      	str	r0, [r3, #0]
 8007d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d1e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007d22:	6019      	str	r1, [r3, #0]
	if (me == NULL || pHTTP == NULL)
 8007d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d006      	beq.n	8007d40 <SIM7600_sendHTTP+0x38>
 8007d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d36:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <SIM7600_sendHTTP+0x3c>
	{
		return THT_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e210      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
	}

	memset(pHTTP->response, '\0', SIM_HTTP_RESPONSE_SIZE);
 8007d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d48:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 8007d52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f001 fc5f 	bl	800961c <memset>
	pHTTP->errorcode = 0;
 8007d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d62:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 8007d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d76:	2200      	movs	r2, #0
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 fc4a 	bl	800961c <memset>

	THT_StatusTypeDef status;

	/* Disconnect the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007d8c:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007d90:	f241 3388 	movw	r3, #5000	; 0x1388
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	4bce      	ldr	r3, [pc, #824]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007d98:	4ace      	ldr	r2, [pc, #824]	; (80080d4 <SIM7600_sendHTTP+0x3cc>)
 8007d9a:	49cf      	ldr	r1, [pc, #828]	; (80080d8 <SIM7600_sendHTTP+0x3d0>)
 8007d9c:	6800      	ldr	r0, [r0, #0]
 8007d9e:	f7fe fcf7 	bl	8006790 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007da6:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007daa:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4bc7      	ldr	r3, [pc, #796]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007db2:	4ac8      	ldr	r2, [pc, #800]	; (80080d4 <SIM7600_sendHTTP+0x3cc>)
 8007db4:	49c9      	ldr	r1, [pc, #804]	; (80080dc <SIM7600_sendHTTP+0x3d4>)
 8007db6:	6800      	ldr	r0, [r0, #0]
 8007db8:	f7fe fcea 	bl	8006790 <SIM7600_sendATCommand>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	if (THT_OK != status)
 8007dc2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <SIM7600_sendHTTP+0xc8>
	{
		return status;
 8007dca:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007dce:	e1ca      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
	}

	/* Insert URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pHTTP->url);
 8007dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007dd4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	f107 000c 	add.w	r0, r7, #12
 8007de0:	4abf      	ldr	r2, [pc, #764]	; (80080e0 <SIM7600_sendHTTP+0x3d8>)
 8007de2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007de6:	f001 faed 	bl	80093c4 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007dea:	f107 010c 	add.w	r1, r7, #12
 8007dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007df2:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007df6:	f241 3388 	movw	r3, #5000	; 0x1388
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4bb4      	ldr	r3, [pc, #720]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007dfe:	4ab5      	ldr	r2, [pc, #724]	; (80080d4 <SIM7600_sendHTTP+0x3cc>)
 8007e00:	6800      	ldr	r0, [r0, #0]
 8007e02:	f7fe fcc5 	bl	8006790 <SIM7600_sendATCommand>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8007e0c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <SIM7600_sendHTTP+0x112>
	{
		return status;
 8007e14:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007e18:	e1a5      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
	}

	/* Check the method is POST ? */
	if (pHTTP->method == SIM_HTTP_POST)
 8007e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e1e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d17d      	bne.n	8007f26 <SIM7600_sendHTTP+0x21e>
	{
		/* Insert the content type */
		memset(command, '\0', sizeof(command));
 8007e2a:	f107 030c 	add.w	r3, r7, #12
 8007e2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 fbf1 	bl	800961c <memset>
		snprintf(command, sizeof(command), "AT+HTTPPARA=\"CONTENT\",\"%s\"", pHTTP->type);
 8007e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e3e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	33c9      	adds	r3, #201	; 0xc9
 8007e46:	f107 000c 	add.w	r0, r7, #12
 8007e4a:	4aa6      	ldr	r2, [pc, #664]	; (80080e4 <SIM7600_sendHTTP+0x3dc>)
 8007e4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007e50:	f001 fab8 	bl	80093c4 <sniprintf>
		status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007e54:	f107 010c 	add.w	r1, r7, #12
 8007e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e5c:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007e60:	f241 3388 	movw	r3, #5000	; 0x1388
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4b9a      	ldr	r3, [pc, #616]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007e68:	4a9a      	ldr	r2, [pc, #616]	; (80080d4 <SIM7600_sendHTTP+0x3cc>)
 8007e6a:	6800      	ldr	r0, [r0, #0]
 8007e6c:	f7fe fc90 	bl	8006790 <SIM7600_sendATCommand>
 8007e70:	4603      	mov	r3, r0
 8007e72:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8007e76:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <SIM7600_sendHTTP+0x17c>
		{
			return status;
 8007e7e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007e82:	e170      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
		}

		/* Insert the data */
		memset(command, '\0', sizeof(command));
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f001 fbc4 	bl	800961c <memset>
		snprintf(command, sizeof(command), "AT+HTTPDATA=%d,%d", strlen(pHTTP->data), 5000);
 8007e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007e98:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	33dd      	adds	r3, #221	; 0xdd
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7f8 f9ed 	bl	8000280 <strlen>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	f107 000c 	add.w	r0, r7, #12
 8007eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb0:	9200      	str	r2, [sp, #0]
 8007eb2:	4a8d      	ldr	r2, [pc, #564]	; (80080e8 <SIM7600_sendHTTP+0x3e0>)
 8007eb4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007eb8:	f001 fa84 	bl	80093c4 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "DOWNLOAD", SIM_URC_ERROR, 5000);
 8007ebc:	f107 010c 	add.w	r1, r7, #12
 8007ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ec4:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4b80      	ldr	r3, [pc, #512]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007ed0:	4a86      	ldr	r2, [pc, #536]	; (80080ec <SIM7600_sendHTTP+0x3e4>)
 8007ed2:	6800      	ldr	r0, [r0, #0]
 8007ed4:	f7fe fc5c 	bl	8006790 <SIM7600_sendATCommand>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8007ede:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <SIM7600_sendHTTP+0x1e4>
		{
			return status;
 8007ee6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007eea:	e13c      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
		}

		status = SIM7600_sendATCommand(me, pHTTP->data, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8007eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ef0:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 8007efa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007efe:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007f02:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	4b71      	ldr	r3, [pc, #452]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007f0a:	4a72      	ldr	r2, [pc, #456]	; (80080d4 <SIM7600_sendHTTP+0x3cc>)
 8007f0c:	6800      	ldr	r0, [r0, #0]
 8007f0e:	f7fe fc3f 	bl	8006790 <SIM7600_sendATCommand>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8007f18:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <SIM7600_sendHTTP+0x21e>
		{
			return status;
 8007f20:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007f24:	e11f      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
		}
	}

	/* Send the request */
	memset(command, '\0', sizeof(command));
 8007f26:	f107 030c 	add.w	r3, r7, #12
 8007f2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f001 fb73 	bl	800961c <memset>
	snprintf(command, sizeof(command), "AT+HTTPACTION=%d", pHTTP->method);
 8007f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f3a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	f107 000c 	add.w	r0, r7, #12
 8007f46:	4a6a      	ldr	r2, [pc, #424]	; (80080f0 <SIM7600_sendHTTP+0x3e8>)
 8007f48:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007f4c:	f001 fa3a 	bl	80093c4 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTPACTION:", SIM_URC_ERROR, 5000);
 8007f50:	f107 010c 	add.w	r1, r7, #12
 8007f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f58:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8007f5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4b5b      	ldr	r3, [pc, #364]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8007f64:	4a63      	ldr	r2, [pc, #396]	; (80080f4 <SIM7600_sendHTTP+0x3ec>)
 8007f66:	6800      	ldr	r0, [r0, #0]
 8007f68:	f7fe fc12 	bl	8006790 <SIM7600_sendATCommand>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8007f72:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d002      	beq.n	8007f80 <SIM7600_sendHTTP+0x278>
	{
		return status;
 8007f7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8007f7e:	e0f2      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
	}
	HAL_Delay(100);
 8007f80:	2064      	movs	r0, #100	; 0x64
 8007f82:	f7f9 ffd3 	bl	8001f2c <HAL_Delay>

	/* Get the status of request */
	char *sPtr = strstr(me->parent.buffer, ",");
 8007f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007f8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	212c      	movs	r1, #44	; 0x2c
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fb49 	bl	800962c <strchr>
 8007f9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

	if (sPtr != NULL)
 8007f9e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00e      	beq.n	8007fc4 <SIM7600_sendHTTP+0x2bc>
	{
		pHTTP->errorcode = atoi(sPtr + 1);
 8007fa6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007faa:	3301      	adds	r3, #1
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 f9c5 	bl	800833c <atoi>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007fba:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
	}

	sPtr = strstr(sPtr + 1, ",");
 8007fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fc8:	3301      	adds	r3, #1
 8007fca:	212c      	movs	r1, #44	; 0x2c
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fb2d 	bl	800962c <strchr>
 8007fd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
	if (sPtr != NULL)
 8007fd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <SIM7600_sendHTTP+0x2f4>
	{
		pHTTP->datalen = atol(sPtr + 1);
 8007fde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 f9ad 	bl	8008344 <atol>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007ff2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	}

	if (pHTTP->datalen != 0)
 8007ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008000:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 808e 	beq.w	800812c <SIM7600_sendHTTP+0x424>
	{
		memset(command, '\0', sizeof(command));
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008018:	2100      	movs	r1, #0
 800801a:	4618      	mov	r0, r3
 800801c:	f001 fafe 	bl	800961c <memset>

		/* Read the response */
		snprintf(command, sizeof(command), "AT+HTTPREAD=0,%ld", pHTTP->datalen);
 8008020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008024:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800802e:	f107 000c 	add.w	r0, r7, #12
 8008032:	4a31      	ldr	r2, [pc, #196]	; (80080f8 <SIM7600_sendHTTP+0x3f0>)
 8008034:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008038:	f001 f9c4 	bl	80093c4 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "\r\n+HTTPREAD:", SIM_URC_ERROR, 5000);
 800803c:	f107 010c 	add.w	r1, r7, #12
 8008040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008044:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8008048:	f241 3388 	movw	r3, #5000	; 0x1388
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4b20      	ldr	r3, [pc, #128]	; (80080d0 <SIM7600_sendHTTP+0x3c8>)
 8008050:	4a2a      	ldr	r2, [pc, #168]	; (80080fc <SIM7600_sendHTTP+0x3f4>)
 8008052:	6800      	ldr	r0, [r0, #0]
 8008054:	f7fe fb9c 	bl	8006790 <SIM7600_sendATCommand>
 8008058:	4603      	mov	r3, r0
 800805a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK == status)
 800805e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008062:	2b00      	cmp	r3, #0
 8008064:	d162      	bne.n	800812c <SIM7600_sendHTTP+0x424>
		{
			HAL_Delay(100);
 8008066:	2064      	movs	r0, #100	; 0x64
 8008068:	f7f9 ff60 	bl	8001f2c <HAL_Delay>
			sPtr = strstr(me->parent.buffer, "\r\n{");
 800806c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008070:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	4921      	ldr	r1, [pc, #132]	; (8008100 <SIM7600_sendHTTP+0x3f8>)
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fb40 	bl	8009700 <strstr>
 8008080:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			if (sPtr != NULL)
 8008084:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008088:	2b00      	cmp	r3, #0
 800808a:	d04f      	beq.n	800812c <SIM7600_sendHTTP+0x424>
			{
				if (pHTTP->datalen > sizeof(pHTTP->response))
 800808c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008090:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 800809a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800809e:	d931      	bls.n	8008104 <SIM7600_sendHTTP+0x3fc>
				{
					memcpy(pHTTP->response, sPtr + 2, sizeof(pHTTP->response));
 80080a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080a4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 80080ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80080b2:	3302      	adds	r3, #2
 80080b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80080b8:	4619      	mov	r1, r3
 80080ba:	f001 fbae 	bl	800981a <memcpy>
					pHTTP->response[SIM_HTTP_RESPONSE_SIZE - 1] = '\0';
 80080be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80080c2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 24c4 	strb.w	r2, [r3, #1220]	; 0x4c4
 80080ce:	e02d      	b.n	800812c <SIM7600_sendHTTP+0x424>
 80080d0:	0800dfe8 	.word	0x0800dfe8
 80080d4:	0800dff0 	.word	0x0800dff0
 80080d8:	0800e3c4 	.word	0x0800e3c4
 80080dc:	0800e3d0 	.word	0x0800e3d0
 80080e0:	0800e3dc 	.word	0x0800e3dc
 80080e4:	0800e3f4 	.word	0x0800e3f4
 80080e8:	0800e410 	.word	0x0800e410
 80080ec:	0800e424 	.word	0x0800e424
 80080f0:	0800e430 	.word	0x0800e430
 80080f4:	0800e444 	.word	0x0800e444
 80080f8:	0800e454 	.word	0x0800e454
 80080fc:	0800e468 	.word	0x0800e468
 8008100:	0800e478 	.word	0x0800e478
				}
				else
				{
					memcpy(pHTTP->response, sPtr + 2, pHTTP->datalen);
 8008104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008108:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 8008112:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008116:	1c99      	adds	r1, r3, #2
 8008118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800811c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8008126:	461a      	mov	r2, r3
 8008128:	f001 fb77 	bl	800981a <memcpy>
			}
		}
	}

	/* Terminal the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 800812c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008130:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8008134:	f241 3388 	movw	r3, #5000	; 0x1388
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <SIM7600_sendHTTP+0x468>)
 800813c:	4a0d      	ldr	r2, [pc, #52]	; (8008174 <SIM7600_sendHTTP+0x46c>)
 800813e:	490e      	ldr	r1, [pc, #56]	; (8008178 <SIM7600_sendHTTP+0x470>)
 8008140:	6800      	ldr	r0, [r0, #0]
 8008142:	f7fe fb25 	bl	8006790 <SIM7600_sendATCommand>

	if (pHTTP->errorcode == 200 || status == THT_OK)
 8008146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800814a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8008154:	2bc8      	cmp	r3, #200	; 0xc8
 8008156:	d003      	beq.n	8008160 <SIM7600_sendHTTP+0x458>
 8008158:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <SIM7600_sendHTTP+0x45c>
	{
		return THT_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	e000      	b.n	8008166 <SIM7600_sendHTTP+0x45e>
	}
	else
	{
		return THT_ERROR;
 8008164:	2301      	movs	r3, #1
	}
}
 8008166:	4618      	mov	r0, r3
 8008168:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	0800dfe8 	.word	0x0800dfe8
 8008174:	0800dff0 	.word	0x0800dff0
 8008178:	0800e3c4 	.word	0x0800e3c4

0800817c <SIM7600_getFileHTTP>:
 * @param pUrl [in] A pointer to URL string
 * @param pFilename [in] A pointer to the filename want to be save
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getFileHTTP(SIM7600_HandleTypeDef *const me, const char *pUrl, const char *pFilename)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008182:	af02      	add	r7, sp, #8
 8008184:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800818c:	6018      	str	r0, [r3, #0]
 800818e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008192:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8008196:	6019      	str	r1, [r3, #0]
 8008198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800819c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081a0:	601a      	str	r2, [r3, #0]
	if (me == NULL || pUrl == NULL || pFilename == NULL)
 80081a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00d      	beq.n	80081cc <SIM7600_getFileHTTP+0x50>
 80081b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081b4:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d006      	beq.n	80081cc <SIM7600_getFileHTTP+0x50>
 80081be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <SIM7600_getFileHTTP+0x54>
	{
		return THT_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e09e      	b.n	800830e <SIM7600_getFileHTTP+0x192>
	}

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 80081d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	3304      	adds	r3, #4
 80081de:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fa19 	bl	800961c <memset>

	THT_StatusTypeDef status;

	/* Terminate the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 80081ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80081ee:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 80081f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4b47      	ldr	r3, [pc, #284]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 80081fa:	4a48      	ldr	r2, [pc, #288]	; (800831c <SIM7600_getFileHTTP+0x1a0>)
 80081fc:	4948      	ldr	r1, [pc, #288]	; (8008320 <SIM7600_getFileHTTP+0x1a4>)
 80081fe:	6800      	ldr	r0, [r0, #0]
 8008200:	f7fe fac6 	bl	8006790 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8008204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008208:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 800820c:	f242 7310 	movw	r3, #10000	; 0x2710
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	4b41      	ldr	r3, [pc, #260]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 8008214:	4a41      	ldr	r2, [pc, #260]	; (800831c <SIM7600_getFileHTTP+0x1a0>)
 8008216:	4943      	ldr	r1, [pc, #268]	; (8008324 <SIM7600_getFileHTTP+0x1a8>)
 8008218:	6800      	ldr	r0, [r0, #0]
 800821a:	f7fe fab9 	bl	8006790 <SIM7600_sendATCommand>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8008224:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <SIM7600_getFileHTTP+0xb6>
	{
		return status;
 800822c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008230:	e06d      	b.n	800830e <SIM7600_getFileHTTP+0x192>
	}

	/* Insert the URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pUrl);
 8008232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008236:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800823a:	f107 0010 	add.w	r0, r7, #16
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a39      	ldr	r2, [pc, #228]	; (8008328 <SIM7600_getFileHTTP+0x1ac>)
 8008242:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008246:	f001 f8bd 	bl	80093c4 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 800824a:	f107 0110 	add.w	r1, r7, #16
 800824e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008252:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8008256:	f242 7310 	movw	r3, #10000	; 0x2710
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4b2e      	ldr	r3, [pc, #184]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 800825e:	4a2f      	ldr	r2, [pc, #188]	; (800831c <SIM7600_getFileHTTP+0x1a0>)
 8008260:	6800      	ldr	r0, [r0, #0]
 8008262:	f7fe fa95 	bl	8006790 <SIM7600_sendATCommand>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800826c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SIM7600_getFileHTTP+0xfe>
	{
		return status;
 8008274:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008278:	e049      	b.n	800830e <SIM7600_getFileHTTP+0x192>
	}

	/* Use GET method to get file */
	status = SIM7600_sendATCommand(me, "AT+HTTPACTION=0", "+HTTPACTION:", SIM_URC_ERROR, 10000);
 800827a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800827e:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8008282:	f242 7310 	movw	r3, #10000	; 0x2710
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	4b23      	ldr	r3, [pc, #140]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 800828a:	4a28      	ldr	r2, [pc, #160]	; (800832c <SIM7600_getFileHTTP+0x1b0>)
 800828c:	4928      	ldr	r1, [pc, #160]	; (8008330 <SIM7600_getFileHTTP+0x1b4>)
 800828e:	6800      	ldr	r0, [r0, #0]
 8008290:	f7fe fa7e 	bl	8006790 <SIM7600_sendATCommand>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800829a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <SIM7600_getFileHTTP+0x12c>
	{
		return status;
 80082a2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80082a6:	e032      	b.n	800830e <SIM7600_getFileHTTP+0x192>
	}

	/* Save file */
	memset(command, '\0', sizeof(command));
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 f9b2 	bl	800961c <memset>
	snprintf(command, sizeof(command), "AT+HTTPREADFILE=\"%s\"", pFilename);
 80082b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80082c0:	f107 0010 	add.w	r0, r7, #16
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1b      	ldr	r2, [pc, #108]	; (8008334 <SIM7600_getFileHTTP+0x1b8>)
 80082c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80082cc:	f001 f87a 	bl	80093c4 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTP_PEER_CLOSED", SIM_URC_ERROR, 20000);
 80082d0:	f107 0110 	add.w	r1, r7, #16
 80082d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082d8:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 80082dc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 80082e4:	4a14      	ldr	r2, [pc, #80]	; (8008338 <SIM7600_getFileHTTP+0x1bc>)
 80082e6:	6800      	ldr	r0, [r0, #0]
 80082e8:	f7fe fa52 	bl	8006790 <SIM7600_sendATCommand>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	/* Terminate the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 80082f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80082f6:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 80082fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <SIM7600_getFileHTTP+0x19c>)
 8008302:	4a06      	ldr	r2, [pc, #24]	; (800831c <SIM7600_getFileHTTP+0x1a0>)
 8008304:	4906      	ldr	r1, [pc, #24]	; (8008320 <SIM7600_getFileHTTP+0x1a4>)
 8008306:	6800      	ldr	r0, [r0, #0]
 8008308:	f7fe fa42 	bl	8006790 <SIM7600_sendATCommand>

	return THT_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	0800dfe8 	.word	0x0800dfe8
 800831c:	0800dff0 	.word	0x0800dff0
 8008320:	0800e3c4 	.word	0x0800e3c4
 8008324:	0800e3d0 	.word	0x0800e3d0
 8008328:	0800e3dc 	.word	0x0800e3dc
 800832c:	0800e444 	.word	0x0800e444
 8008330:	0800e47c 	.word	0x0800e47c
 8008334:	0800e48c 	.word	0x0800e48c
 8008338:	0800e4a4 	.word	0x0800e4a4

0800833c <atoi>:
 800833c:	220a      	movs	r2, #10
 800833e:	2100      	movs	r1, #0
 8008340:	f000 b888 	b.w	8008454 <strtol>

08008344 <atol>:
 8008344:	220a      	movs	r2, #10
 8008346:	2100      	movs	r1, #0
 8008348:	f000 b884 	b.w	8008454 <strtol>

0800834c <_strtol_l.constprop.0>:
 800834c:	2b01      	cmp	r3, #1
 800834e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008352:	d001      	beq.n	8008358 <_strtol_l.constprop.0+0xc>
 8008354:	2b24      	cmp	r3, #36	; 0x24
 8008356:	d906      	bls.n	8008366 <_strtol_l.constprop.0+0x1a>
 8008358:	f001 fa32 	bl	80097c0 <__errno>
 800835c:	2316      	movs	r3, #22
 800835e:	6003      	str	r3, [r0, #0]
 8008360:	2000      	movs	r0, #0
 8008362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008366:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800844c <_strtol_l.constprop.0+0x100>
 800836a:	460d      	mov	r5, r1
 800836c:	462e      	mov	r6, r5
 800836e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008372:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008376:	f017 0708 	ands.w	r7, r7, #8
 800837a:	d1f7      	bne.n	800836c <_strtol_l.constprop.0+0x20>
 800837c:	2c2d      	cmp	r4, #45	; 0x2d
 800837e:	d132      	bne.n	80083e6 <_strtol_l.constprop.0+0x9a>
 8008380:	782c      	ldrb	r4, [r5, #0]
 8008382:	2701      	movs	r7, #1
 8008384:	1cb5      	adds	r5, r6, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d05b      	beq.n	8008442 <_strtol_l.constprop.0+0xf6>
 800838a:	2b10      	cmp	r3, #16
 800838c:	d109      	bne.n	80083a2 <_strtol_l.constprop.0+0x56>
 800838e:	2c30      	cmp	r4, #48	; 0x30
 8008390:	d107      	bne.n	80083a2 <_strtol_l.constprop.0+0x56>
 8008392:	782c      	ldrb	r4, [r5, #0]
 8008394:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008398:	2c58      	cmp	r4, #88	; 0x58
 800839a:	d14d      	bne.n	8008438 <_strtol_l.constprop.0+0xec>
 800839c:	786c      	ldrb	r4, [r5, #1]
 800839e:	2310      	movs	r3, #16
 80083a0:	3502      	adds	r5, #2
 80083a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80083a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80083aa:	f04f 0e00 	mov.w	lr, #0
 80083ae:	fbb8 f9f3 	udiv	r9, r8, r3
 80083b2:	4676      	mov	r6, lr
 80083b4:	fb03 8a19 	mls	sl, r3, r9, r8
 80083b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80083bc:	f1bc 0f09 	cmp.w	ip, #9
 80083c0:	d816      	bhi.n	80083f0 <_strtol_l.constprop.0+0xa4>
 80083c2:	4664      	mov	r4, ip
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	dd24      	ble.n	8008412 <_strtol_l.constprop.0+0xc6>
 80083c8:	f1be 3fff 	cmp.w	lr, #4294967295
 80083cc:	d008      	beq.n	80083e0 <_strtol_l.constprop.0+0x94>
 80083ce:	45b1      	cmp	r9, r6
 80083d0:	d31c      	bcc.n	800840c <_strtol_l.constprop.0+0xc0>
 80083d2:	d101      	bne.n	80083d8 <_strtol_l.constprop.0+0x8c>
 80083d4:	45a2      	cmp	sl, r4
 80083d6:	db19      	blt.n	800840c <_strtol_l.constprop.0+0xc0>
 80083d8:	fb06 4603 	mla	r6, r6, r3, r4
 80083dc:	f04f 0e01 	mov.w	lr, #1
 80083e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e4:	e7e8      	b.n	80083b8 <_strtol_l.constprop.0+0x6c>
 80083e6:	2c2b      	cmp	r4, #43	; 0x2b
 80083e8:	bf04      	itt	eq
 80083ea:	782c      	ldrbeq	r4, [r5, #0]
 80083ec:	1cb5      	addeq	r5, r6, #2
 80083ee:	e7ca      	b.n	8008386 <_strtol_l.constprop.0+0x3a>
 80083f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80083f4:	f1bc 0f19 	cmp.w	ip, #25
 80083f8:	d801      	bhi.n	80083fe <_strtol_l.constprop.0+0xb2>
 80083fa:	3c37      	subs	r4, #55	; 0x37
 80083fc:	e7e2      	b.n	80083c4 <_strtol_l.constprop.0+0x78>
 80083fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008402:	f1bc 0f19 	cmp.w	ip, #25
 8008406:	d804      	bhi.n	8008412 <_strtol_l.constprop.0+0xc6>
 8008408:	3c57      	subs	r4, #87	; 0x57
 800840a:	e7db      	b.n	80083c4 <_strtol_l.constprop.0+0x78>
 800840c:	f04f 3eff 	mov.w	lr, #4294967295
 8008410:	e7e6      	b.n	80083e0 <_strtol_l.constprop.0+0x94>
 8008412:	f1be 3fff 	cmp.w	lr, #4294967295
 8008416:	d105      	bne.n	8008424 <_strtol_l.constprop.0+0xd8>
 8008418:	2322      	movs	r3, #34	; 0x22
 800841a:	6003      	str	r3, [r0, #0]
 800841c:	4646      	mov	r6, r8
 800841e:	b942      	cbnz	r2, 8008432 <_strtol_l.constprop.0+0xe6>
 8008420:	4630      	mov	r0, r6
 8008422:	e79e      	b.n	8008362 <_strtol_l.constprop.0+0x16>
 8008424:	b107      	cbz	r7, 8008428 <_strtol_l.constprop.0+0xdc>
 8008426:	4276      	negs	r6, r6
 8008428:	2a00      	cmp	r2, #0
 800842a:	d0f9      	beq.n	8008420 <_strtol_l.constprop.0+0xd4>
 800842c:	f1be 0f00 	cmp.w	lr, #0
 8008430:	d000      	beq.n	8008434 <_strtol_l.constprop.0+0xe8>
 8008432:	1e69      	subs	r1, r5, #1
 8008434:	6011      	str	r1, [r2, #0]
 8008436:	e7f3      	b.n	8008420 <_strtol_l.constprop.0+0xd4>
 8008438:	2430      	movs	r4, #48	; 0x30
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1b1      	bne.n	80083a2 <_strtol_l.constprop.0+0x56>
 800843e:	2308      	movs	r3, #8
 8008440:	e7af      	b.n	80083a2 <_strtol_l.constprop.0+0x56>
 8008442:	2c30      	cmp	r4, #48	; 0x30
 8008444:	d0a5      	beq.n	8008392 <_strtol_l.constprop.0+0x46>
 8008446:	230a      	movs	r3, #10
 8008448:	e7ab      	b.n	80083a2 <_strtol_l.constprop.0+0x56>
 800844a:	bf00      	nop
 800844c:	0800e4e5 	.word	0x0800e4e5

08008450 <_strtol_r>:
 8008450:	f7ff bf7c 	b.w	800834c <_strtol_l.constprop.0>

08008454 <strtol>:
 8008454:	4613      	mov	r3, r2
 8008456:	460a      	mov	r2, r1
 8008458:	4601      	mov	r1, r0
 800845a:	4802      	ldr	r0, [pc, #8]	; (8008464 <strtol+0x10>)
 800845c:	6800      	ldr	r0, [r0, #0]
 800845e:	f7ff bf75 	b.w	800834c <_strtol_l.constprop.0>
 8008462:	bf00      	nop
 8008464:	20000064 	.word	0x20000064

08008468 <__cvt>:
 8008468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800846c:	ec55 4b10 	vmov	r4, r5, d0
 8008470:	2d00      	cmp	r5, #0
 8008472:	460e      	mov	r6, r1
 8008474:	4619      	mov	r1, r3
 8008476:	462b      	mov	r3, r5
 8008478:	bfbb      	ittet	lt
 800847a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800847e:	461d      	movlt	r5, r3
 8008480:	2300      	movge	r3, #0
 8008482:	232d      	movlt	r3, #45	; 0x2d
 8008484:	700b      	strb	r3, [r1, #0]
 8008486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008488:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800848c:	4691      	mov	r9, r2
 800848e:	f023 0820 	bic.w	r8, r3, #32
 8008492:	bfbc      	itt	lt
 8008494:	4622      	movlt	r2, r4
 8008496:	4614      	movlt	r4, r2
 8008498:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800849c:	d005      	beq.n	80084aa <__cvt+0x42>
 800849e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084a2:	d100      	bne.n	80084a6 <__cvt+0x3e>
 80084a4:	3601      	adds	r6, #1
 80084a6:	2102      	movs	r1, #2
 80084a8:	e000      	b.n	80084ac <__cvt+0x44>
 80084aa:	2103      	movs	r1, #3
 80084ac:	ab03      	add	r3, sp, #12
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	ab02      	add	r3, sp, #8
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	ec45 4b10 	vmov	d0, r4, r5
 80084b8:	4653      	mov	r3, sl
 80084ba:	4632      	mov	r2, r6
 80084bc:	f001 fa68 	bl	8009990 <_dtoa_r>
 80084c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084c4:	4607      	mov	r7, r0
 80084c6:	d102      	bne.n	80084ce <__cvt+0x66>
 80084c8:	f019 0f01 	tst.w	r9, #1
 80084cc:	d022      	beq.n	8008514 <__cvt+0xac>
 80084ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084d2:	eb07 0906 	add.w	r9, r7, r6
 80084d6:	d110      	bne.n	80084fa <__cvt+0x92>
 80084d8:	783b      	ldrb	r3, [r7, #0]
 80084da:	2b30      	cmp	r3, #48	; 0x30
 80084dc:	d10a      	bne.n	80084f4 <__cvt+0x8c>
 80084de:	2200      	movs	r2, #0
 80084e0:	2300      	movs	r3, #0
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f8 faf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ea:	b918      	cbnz	r0, 80084f4 <__cvt+0x8c>
 80084ec:	f1c6 0601 	rsb	r6, r6, #1
 80084f0:	f8ca 6000 	str.w	r6, [sl]
 80084f4:	f8da 3000 	ldr.w	r3, [sl]
 80084f8:	4499      	add	r9, r3
 80084fa:	2200      	movs	r2, #0
 80084fc:	2300      	movs	r3, #0
 80084fe:	4620      	mov	r0, r4
 8008500:	4629      	mov	r1, r5
 8008502:	f7f8 fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008506:	b108      	cbz	r0, 800850c <__cvt+0xa4>
 8008508:	f8cd 900c 	str.w	r9, [sp, #12]
 800850c:	2230      	movs	r2, #48	; 0x30
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	454b      	cmp	r3, r9
 8008512:	d307      	bcc.n	8008524 <__cvt+0xbc>
 8008514:	9b03      	ldr	r3, [sp, #12]
 8008516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008518:	1bdb      	subs	r3, r3, r7
 800851a:	4638      	mov	r0, r7
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	b004      	add	sp, #16
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	1c59      	adds	r1, r3, #1
 8008526:	9103      	str	r1, [sp, #12]
 8008528:	701a      	strb	r2, [r3, #0]
 800852a:	e7f0      	b.n	800850e <__cvt+0xa6>

0800852c <__exponent>:
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852e:	4603      	mov	r3, r0
 8008530:	2900      	cmp	r1, #0
 8008532:	bfb8      	it	lt
 8008534:	4249      	neglt	r1, r1
 8008536:	f803 2b02 	strb.w	r2, [r3], #2
 800853a:	bfb4      	ite	lt
 800853c:	222d      	movlt	r2, #45	; 0x2d
 800853e:	222b      	movge	r2, #43	; 0x2b
 8008540:	2909      	cmp	r1, #9
 8008542:	7042      	strb	r2, [r0, #1]
 8008544:	dd2a      	ble.n	800859c <__exponent+0x70>
 8008546:	f10d 0207 	add.w	r2, sp, #7
 800854a:	4617      	mov	r7, r2
 800854c:	260a      	movs	r6, #10
 800854e:	4694      	mov	ip, r2
 8008550:	fb91 f5f6 	sdiv	r5, r1, r6
 8008554:	fb06 1415 	mls	r4, r6, r5, r1
 8008558:	3430      	adds	r4, #48	; 0x30
 800855a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800855e:	460c      	mov	r4, r1
 8008560:	2c63      	cmp	r4, #99	; 0x63
 8008562:	f102 32ff 	add.w	r2, r2, #4294967295
 8008566:	4629      	mov	r1, r5
 8008568:	dcf1      	bgt.n	800854e <__exponent+0x22>
 800856a:	3130      	adds	r1, #48	; 0x30
 800856c:	f1ac 0402 	sub.w	r4, ip, #2
 8008570:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008574:	1c41      	adds	r1, r0, #1
 8008576:	4622      	mov	r2, r4
 8008578:	42ba      	cmp	r2, r7
 800857a:	d30a      	bcc.n	8008592 <__exponent+0x66>
 800857c:	f10d 0209 	add.w	r2, sp, #9
 8008580:	eba2 020c 	sub.w	r2, r2, ip
 8008584:	42bc      	cmp	r4, r7
 8008586:	bf88      	it	hi
 8008588:	2200      	movhi	r2, #0
 800858a:	4413      	add	r3, r2
 800858c:	1a18      	subs	r0, r3, r0
 800858e:	b003      	add	sp, #12
 8008590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008592:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008596:	f801 5f01 	strb.w	r5, [r1, #1]!
 800859a:	e7ed      	b.n	8008578 <__exponent+0x4c>
 800859c:	2330      	movs	r3, #48	; 0x30
 800859e:	3130      	adds	r1, #48	; 0x30
 80085a0:	7083      	strb	r3, [r0, #2]
 80085a2:	70c1      	strb	r1, [r0, #3]
 80085a4:	1d03      	adds	r3, r0, #4
 80085a6:	e7f1      	b.n	800858c <__exponent+0x60>

080085a8 <_printf_float>:
 80085a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ac:	ed2d 8b02 	vpush	{d8}
 80085b0:	b08d      	sub	sp, #52	; 0x34
 80085b2:	460c      	mov	r4, r1
 80085b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085b8:	4616      	mov	r6, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	4605      	mov	r5, r0
 80085be:	f001 f8b5 	bl	800972c <_localeconv_r>
 80085c2:	f8d0 a000 	ldr.w	sl, [r0]
 80085c6:	4650      	mov	r0, sl
 80085c8:	f7f7 fe5a 	bl	8000280 <strlen>
 80085cc:	2300      	movs	r3, #0
 80085ce:	930a      	str	r3, [sp, #40]	; 0x28
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f8d8 3000 	ldr.w	r3, [r8]
 80085d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085dc:	3307      	adds	r3, #7
 80085de:	f023 0307 	bic.w	r3, r3, #7
 80085e2:	f103 0208 	add.w	r2, r3, #8
 80085e6:	f8c8 2000 	str.w	r2, [r8]
 80085ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085f2:	9307      	str	r3, [sp, #28]
 80085f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80085f8:	ee08 0a10 	vmov	s16, r0
 80085fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008604:	4b9e      	ldr	r3, [pc, #632]	; (8008880 <_printf_float+0x2d8>)
 8008606:	f04f 32ff 	mov.w	r2, #4294967295
 800860a:	f7f8 fa97 	bl	8000b3c <__aeabi_dcmpun>
 800860e:	bb88      	cbnz	r0, 8008674 <_printf_float+0xcc>
 8008610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008614:	4b9a      	ldr	r3, [pc, #616]	; (8008880 <_printf_float+0x2d8>)
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	f7f8 fa71 	bl	8000b00 <__aeabi_dcmple>
 800861e:	bb48      	cbnz	r0, 8008674 <_printf_float+0xcc>
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f8 fa60 	bl	8000aec <__aeabi_dcmplt>
 800862c:	b110      	cbz	r0, 8008634 <_printf_float+0x8c>
 800862e:	232d      	movs	r3, #45	; 0x2d
 8008630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008634:	4a93      	ldr	r2, [pc, #588]	; (8008884 <_printf_float+0x2dc>)
 8008636:	4b94      	ldr	r3, [pc, #592]	; (8008888 <_printf_float+0x2e0>)
 8008638:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800863c:	bf94      	ite	ls
 800863e:	4690      	movls	r8, r2
 8008640:	4698      	movhi	r8, r3
 8008642:	2303      	movs	r3, #3
 8008644:	6123      	str	r3, [r4, #16]
 8008646:	9b05      	ldr	r3, [sp, #20]
 8008648:	f023 0304 	bic.w	r3, r3, #4
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	9700      	str	r7, [sp, #0]
 8008654:	4633      	mov	r3, r6
 8008656:	aa0b      	add	r2, sp, #44	; 0x2c
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f9da 	bl	8008a14 <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	f040 8090 	bne.w	8008786 <_printf_float+0x1de>
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	b00d      	add	sp, #52	; 0x34
 800866c:	ecbd 8b02 	vpop	{d8}
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	4642      	mov	r2, r8
 8008676:	464b      	mov	r3, r9
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa5e 	bl	8000b3c <__aeabi_dcmpun>
 8008680:	b140      	cbz	r0, 8008694 <_printf_float+0xec>
 8008682:	464b      	mov	r3, r9
 8008684:	2b00      	cmp	r3, #0
 8008686:	bfbc      	itt	lt
 8008688:	232d      	movlt	r3, #45	; 0x2d
 800868a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800868e:	4a7f      	ldr	r2, [pc, #508]	; (800888c <_printf_float+0x2e4>)
 8008690:	4b7f      	ldr	r3, [pc, #508]	; (8008890 <_printf_float+0x2e8>)
 8008692:	e7d1      	b.n	8008638 <_printf_float+0x90>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800869a:	9206      	str	r2, [sp, #24]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	d13f      	bne.n	8008720 <_printf_float+0x178>
 80086a0:	2306      	movs	r3, #6
 80086a2:	6063      	str	r3, [r4, #4]
 80086a4:	9b05      	ldr	r3, [sp, #20]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086ac:	2300      	movs	r3, #0
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	ab0a      	add	r3, sp, #40	; 0x28
 80086b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086b6:	ab09      	add	r3, sp, #36	; 0x24
 80086b8:	ec49 8b10 	vmov	d0, r8, r9
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086c4:	4628      	mov	r0, r5
 80086c6:	f7ff fecf 	bl	8008468 <__cvt>
 80086ca:	9b06      	ldr	r3, [sp, #24]
 80086cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ce:	2b47      	cmp	r3, #71	; 0x47
 80086d0:	4680      	mov	r8, r0
 80086d2:	d108      	bne.n	80086e6 <_printf_float+0x13e>
 80086d4:	1cc8      	adds	r0, r1, #3
 80086d6:	db02      	blt.n	80086de <_printf_float+0x136>
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	4299      	cmp	r1, r3
 80086dc:	dd41      	ble.n	8008762 <_printf_float+0x1ba>
 80086de:	f1ab 0302 	sub.w	r3, fp, #2
 80086e2:	fa5f fb83 	uxtb.w	fp, r3
 80086e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086ea:	d820      	bhi.n	800872e <_printf_float+0x186>
 80086ec:	3901      	subs	r1, #1
 80086ee:	465a      	mov	r2, fp
 80086f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086f4:	9109      	str	r1, [sp, #36]	; 0x24
 80086f6:	f7ff ff19 	bl	800852c <__exponent>
 80086fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fc:	1813      	adds	r3, r2, r0
 80086fe:	2a01      	cmp	r2, #1
 8008700:	4681      	mov	r9, r0
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	dc02      	bgt.n	800870c <_printf_float+0x164>
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	07d2      	lsls	r2, r2, #31
 800870a:	d501      	bpl.n	8008710 <_printf_float+0x168>
 800870c:	3301      	adds	r3, #1
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008714:	2b00      	cmp	r3, #0
 8008716:	d09c      	beq.n	8008652 <_printf_float+0xaa>
 8008718:	232d      	movs	r3, #45	; 0x2d
 800871a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800871e:	e798      	b.n	8008652 <_printf_float+0xaa>
 8008720:	9a06      	ldr	r2, [sp, #24]
 8008722:	2a47      	cmp	r2, #71	; 0x47
 8008724:	d1be      	bne.n	80086a4 <_printf_float+0xfc>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1bc      	bne.n	80086a4 <_printf_float+0xfc>
 800872a:	2301      	movs	r3, #1
 800872c:	e7b9      	b.n	80086a2 <_printf_float+0xfa>
 800872e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008732:	d118      	bne.n	8008766 <_printf_float+0x1be>
 8008734:	2900      	cmp	r1, #0
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	dd0b      	ble.n	8008752 <_printf_float+0x1aa>
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	b913      	cbnz	r3, 8008744 <_printf_float+0x19c>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	07d0      	lsls	r0, r2, #31
 8008742:	d502      	bpl.n	800874a <_printf_float+0x1a2>
 8008744:	3301      	adds	r3, #1
 8008746:	440b      	add	r3, r1
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	65a1      	str	r1, [r4, #88]	; 0x58
 800874c:	f04f 0900 	mov.w	r9, #0
 8008750:	e7de      	b.n	8008710 <_printf_float+0x168>
 8008752:	b913      	cbnz	r3, 800875a <_printf_float+0x1b2>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	07d2      	lsls	r2, r2, #31
 8008758:	d501      	bpl.n	800875e <_printf_float+0x1b6>
 800875a:	3302      	adds	r3, #2
 800875c:	e7f4      	b.n	8008748 <_printf_float+0x1a0>
 800875e:	2301      	movs	r3, #1
 8008760:	e7f2      	b.n	8008748 <_printf_float+0x1a0>
 8008762:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	4299      	cmp	r1, r3
 800876a:	db05      	blt.n	8008778 <_printf_float+0x1d0>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	6121      	str	r1, [r4, #16]
 8008770:	07d8      	lsls	r0, r3, #31
 8008772:	d5ea      	bpl.n	800874a <_printf_float+0x1a2>
 8008774:	1c4b      	adds	r3, r1, #1
 8008776:	e7e7      	b.n	8008748 <_printf_float+0x1a0>
 8008778:	2900      	cmp	r1, #0
 800877a:	bfd4      	ite	le
 800877c:	f1c1 0202 	rsble	r2, r1, #2
 8008780:	2201      	movgt	r2, #1
 8008782:	4413      	add	r3, r2
 8008784:	e7e0      	b.n	8008748 <_printf_float+0x1a0>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	055a      	lsls	r2, r3, #21
 800878a:	d407      	bmi.n	800879c <_printf_float+0x1f4>
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	4642      	mov	r2, r8
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	d12c      	bne.n	80087f4 <_printf_float+0x24c>
 800879a:	e764      	b.n	8008666 <_printf_float+0xbe>
 800879c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087a0:	f240 80e0 	bls.w	8008964 <_printf_float+0x3bc>
 80087a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	f7f8 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d034      	beq.n	800881e <_printf_float+0x276>
 80087b4:	4a37      	ldr	r2, [pc, #220]	; (8008894 <_printf_float+0x2ec>)
 80087b6:	2301      	movs	r3, #1
 80087b8:	4631      	mov	r1, r6
 80087ba:	4628      	mov	r0, r5
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af51 	beq.w	8008666 <_printf_float+0xbe>
 80087c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087c8:	429a      	cmp	r2, r3
 80087ca:	db02      	blt.n	80087d2 <_printf_float+0x22a>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07d8      	lsls	r0, r3, #31
 80087d0:	d510      	bpl.n	80087f4 <_printf_float+0x24c>
 80087d2:	ee18 3a10 	vmov	r3, s16
 80087d6:	4652      	mov	r2, sl
 80087d8:	4631      	mov	r1, r6
 80087da:	4628      	mov	r0, r5
 80087dc:	47b8      	blx	r7
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af41 	beq.w	8008666 <_printf_float+0xbe>
 80087e4:	f04f 0800 	mov.w	r8, #0
 80087e8:	f104 091a 	add.w	r9, r4, #26
 80087ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ee:	3b01      	subs	r3, #1
 80087f0:	4543      	cmp	r3, r8
 80087f2:	dc09      	bgt.n	8008808 <_printf_float+0x260>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	079b      	lsls	r3, r3, #30
 80087f8:	f100 8107 	bmi.w	8008a0a <_printf_float+0x462>
 80087fc:	68e0      	ldr	r0, [r4, #12]
 80087fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008800:	4298      	cmp	r0, r3
 8008802:	bfb8      	it	lt
 8008804:	4618      	movlt	r0, r3
 8008806:	e730      	b.n	800866a <_printf_float+0xc2>
 8008808:	2301      	movs	r3, #1
 800880a:	464a      	mov	r2, r9
 800880c:	4631      	mov	r1, r6
 800880e:	4628      	mov	r0, r5
 8008810:	47b8      	blx	r7
 8008812:	3001      	adds	r0, #1
 8008814:	f43f af27 	beq.w	8008666 <_printf_float+0xbe>
 8008818:	f108 0801 	add.w	r8, r8, #1
 800881c:	e7e6      	b.n	80087ec <_printf_float+0x244>
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc39      	bgt.n	8008898 <_printf_float+0x2f0>
 8008824:	4a1b      	ldr	r2, [pc, #108]	; (8008894 <_printf_float+0x2ec>)
 8008826:	2301      	movs	r3, #1
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	f43f af19 	beq.w	8008666 <_printf_float+0xbe>
 8008834:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008838:	4313      	orrs	r3, r2
 800883a:	d102      	bne.n	8008842 <_printf_float+0x29a>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	d5d8      	bpl.n	80087f4 <_printf_float+0x24c>
 8008842:	ee18 3a10 	vmov	r3, s16
 8008846:	4652      	mov	r2, sl
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af09 	beq.w	8008666 <_printf_float+0xbe>
 8008854:	f04f 0900 	mov.w	r9, #0
 8008858:	f104 0a1a 	add.w	sl, r4, #26
 800885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885e:	425b      	negs	r3, r3
 8008860:	454b      	cmp	r3, r9
 8008862:	dc01      	bgt.n	8008868 <_printf_float+0x2c0>
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	e792      	b.n	800878e <_printf_float+0x1e6>
 8008868:	2301      	movs	r3, #1
 800886a:	4652      	mov	r2, sl
 800886c:	4631      	mov	r1, r6
 800886e:	4628      	mov	r0, r5
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f aef7 	beq.w	8008666 <_printf_float+0xbe>
 8008878:	f109 0901 	add.w	r9, r9, #1
 800887c:	e7ee      	b.n	800885c <_printf_float+0x2b4>
 800887e:	bf00      	nop
 8008880:	7fefffff 	.word	0x7fefffff
 8008884:	0800e5e5 	.word	0x0800e5e5
 8008888:	0800e5e9 	.word	0x0800e5e9
 800888c:	0800e5ed 	.word	0x0800e5ed
 8008890:	0800e5f1 	.word	0x0800e5f1
 8008894:	0800e5f5 	.word	0x0800e5f5
 8008898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800889c:	429a      	cmp	r2, r3
 800889e:	bfa8      	it	ge
 80088a0:	461a      	movge	r2, r3
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	4691      	mov	r9, r2
 80088a6:	dc37      	bgt.n	8008918 <_printf_float+0x370>
 80088a8:	f04f 0b00 	mov.w	fp, #0
 80088ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088b0:	f104 021a 	add.w	r2, r4, #26
 80088b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	eba3 0309 	sub.w	r3, r3, r9
 80088bc:	455b      	cmp	r3, fp
 80088be:	dc33      	bgt.n	8008928 <_printf_float+0x380>
 80088c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088c4:	429a      	cmp	r2, r3
 80088c6:	db3b      	blt.n	8008940 <_printf_float+0x398>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	07da      	lsls	r2, r3, #31
 80088cc:	d438      	bmi.n	8008940 <_printf_float+0x398>
 80088ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088d2:	eba2 0903 	sub.w	r9, r2, r3
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	1ad2      	subs	r2, r2, r3
 80088da:	4591      	cmp	r9, r2
 80088dc:	bfa8      	it	ge
 80088de:	4691      	movge	r9, r2
 80088e0:	f1b9 0f00 	cmp.w	r9, #0
 80088e4:	dc35      	bgt.n	8008952 <_printf_float+0x3aa>
 80088e6:	f04f 0800 	mov.w	r8, #0
 80088ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ee:	f104 0a1a 	add.w	sl, r4, #26
 80088f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	eba3 0309 	sub.w	r3, r3, r9
 80088fc:	4543      	cmp	r3, r8
 80088fe:	f77f af79 	ble.w	80087f4 <_printf_float+0x24c>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f aeaa 	beq.w	8008666 <_printf_float+0xbe>
 8008912:	f108 0801 	add.w	r8, r8, #1
 8008916:	e7ec      	b.n	80088f2 <_printf_float+0x34a>
 8008918:	4613      	mov	r3, r2
 800891a:	4631      	mov	r1, r6
 800891c:	4642      	mov	r2, r8
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	d1c0      	bne.n	80088a8 <_printf_float+0x300>
 8008926:	e69e      	b.n	8008666 <_printf_float+0xbe>
 8008928:	2301      	movs	r3, #1
 800892a:	4631      	mov	r1, r6
 800892c:	4628      	mov	r0, r5
 800892e:	9205      	str	r2, [sp, #20]
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f ae97 	beq.w	8008666 <_printf_float+0xbe>
 8008938:	9a05      	ldr	r2, [sp, #20]
 800893a:	f10b 0b01 	add.w	fp, fp, #1
 800893e:	e7b9      	b.n	80088b4 <_printf_float+0x30c>
 8008940:	ee18 3a10 	vmov	r3, s16
 8008944:	4652      	mov	r2, sl
 8008946:	4631      	mov	r1, r6
 8008948:	4628      	mov	r0, r5
 800894a:	47b8      	blx	r7
 800894c:	3001      	adds	r0, #1
 800894e:	d1be      	bne.n	80088ce <_printf_float+0x326>
 8008950:	e689      	b.n	8008666 <_printf_float+0xbe>
 8008952:	9a05      	ldr	r2, [sp, #20]
 8008954:	464b      	mov	r3, r9
 8008956:	4442      	add	r2, r8
 8008958:	4631      	mov	r1, r6
 800895a:	4628      	mov	r0, r5
 800895c:	47b8      	blx	r7
 800895e:	3001      	adds	r0, #1
 8008960:	d1c1      	bne.n	80088e6 <_printf_float+0x33e>
 8008962:	e680      	b.n	8008666 <_printf_float+0xbe>
 8008964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008966:	2a01      	cmp	r2, #1
 8008968:	dc01      	bgt.n	800896e <_printf_float+0x3c6>
 800896a:	07db      	lsls	r3, r3, #31
 800896c:	d53a      	bpl.n	80089e4 <_printf_float+0x43c>
 800896e:	2301      	movs	r3, #1
 8008970:	4642      	mov	r2, r8
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f ae74 	beq.w	8008666 <_printf_float+0xbe>
 800897e:	ee18 3a10 	vmov	r3, s16
 8008982:	4652      	mov	r2, sl
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f ae6b 	beq.w	8008666 <_printf_float+0xbe>
 8008990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008994:	2200      	movs	r2, #0
 8008996:	2300      	movs	r3, #0
 8008998:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800899c:	f7f8 f89c 	bl	8000ad8 <__aeabi_dcmpeq>
 80089a0:	b9d8      	cbnz	r0, 80089da <_printf_float+0x432>
 80089a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80089a6:	f108 0201 	add.w	r2, r8, #1
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	d10e      	bne.n	80089d2 <_printf_float+0x42a>
 80089b4:	e657      	b.n	8008666 <_printf_float+0xbe>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f ae50 	beq.w	8008666 <_printf_float+0xbe>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089cc:	3b01      	subs	r3, #1
 80089ce:	4543      	cmp	r3, r8
 80089d0:	dcf1      	bgt.n	80089b6 <_printf_float+0x40e>
 80089d2:	464b      	mov	r3, r9
 80089d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089d8:	e6da      	b.n	8008790 <_printf_float+0x1e8>
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	f104 0a1a 	add.w	sl, r4, #26
 80089e2:	e7f2      	b.n	80089ca <_printf_float+0x422>
 80089e4:	2301      	movs	r3, #1
 80089e6:	4642      	mov	r2, r8
 80089e8:	e7df      	b.n	80089aa <_printf_float+0x402>
 80089ea:	2301      	movs	r3, #1
 80089ec:	464a      	mov	r2, r9
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f ae36 	beq.w	8008666 <_printf_float+0xbe>
 80089fa:	f108 0801 	add.w	r8, r8, #1
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a02:	1a5b      	subs	r3, r3, r1
 8008a04:	4543      	cmp	r3, r8
 8008a06:	dcf0      	bgt.n	80089ea <_printf_float+0x442>
 8008a08:	e6f8      	b.n	80087fc <_printf_float+0x254>
 8008a0a:	f04f 0800 	mov.w	r8, #0
 8008a0e:	f104 0919 	add.w	r9, r4, #25
 8008a12:	e7f4      	b.n	80089fe <_printf_float+0x456>

08008a14 <_printf_common>:
 8008a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	4616      	mov	r6, r2
 8008a1a:	4699      	mov	r9, r3
 8008a1c:	688a      	ldr	r2, [r1, #8]
 8008a1e:	690b      	ldr	r3, [r1, #16]
 8008a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bfb8      	it	lt
 8008a28:	4613      	movlt	r3, r2
 8008a2a:	6033      	str	r3, [r6, #0]
 8008a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a30:	4607      	mov	r7, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b10a      	cbz	r2, 8008a3a <_printf_common+0x26>
 8008a36:	3301      	adds	r3, #1
 8008a38:	6033      	str	r3, [r6, #0]
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	0699      	lsls	r1, r3, #26
 8008a3e:	bf42      	ittt	mi
 8008a40:	6833      	ldrmi	r3, [r6, #0]
 8008a42:	3302      	addmi	r3, #2
 8008a44:	6033      	strmi	r3, [r6, #0]
 8008a46:	6825      	ldr	r5, [r4, #0]
 8008a48:	f015 0506 	ands.w	r5, r5, #6
 8008a4c:	d106      	bne.n	8008a5c <_printf_common+0x48>
 8008a4e:	f104 0a19 	add.w	sl, r4, #25
 8008a52:	68e3      	ldr	r3, [r4, #12]
 8008a54:	6832      	ldr	r2, [r6, #0]
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	42ab      	cmp	r3, r5
 8008a5a:	dc26      	bgt.n	8008aaa <_printf_common+0x96>
 8008a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a60:	1e13      	subs	r3, r2, #0
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	bf18      	it	ne
 8008a66:	2301      	movne	r3, #1
 8008a68:	0692      	lsls	r2, r2, #26
 8008a6a:	d42b      	bmi.n	8008ac4 <_printf_common+0xb0>
 8008a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a70:	4649      	mov	r1, r9
 8008a72:	4638      	mov	r0, r7
 8008a74:	47c0      	blx	r8
 8008a76:	3001      	adds	r0, #1
 8008a78:	d01e      	beq.n	8008ab8 <_printf_common+0xa4>
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	6922      	ldr	r2, [r4, #16]
 8008a7e:	f003 0306 	and.w	r3, r3, #6
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	bf02      	ittt	eq
 8008a86:	68e5      	ldreq	r5, [r4, #12]
 8008a88:	6833      	ldreq	r3, [r6, #0]
 8008a8a:	1aed      	subeq	r5, r5, r3
 8008a8c:	68a3      	ldr	r3, [r4, #8]
 8008a8e:	bf0c      	ite	eq
 8008a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a94:	2500      	movne	r5, #0
 8008a96:	4293      	cmp	r3, r2
 8008a98:	bfc4      	itt	gt
 8008a9a:	1a9b      	subgt	r3, r3, r2
 8008a9c:	18ed      	addgt	r5, r5, r3
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	341a      	adds	r4, #26
 8008aa2:	42b5      	cmp	r5, r6
 8008aa4:	d11a      	bne.n	8008adc <_printf_common+0xc8>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e008      	b.n	8008abc <_printf_common+0xa8>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4652      	mov	r2, sl
 8008aae:	4649      	mov	r1, r9
 8008ab0:	4638      	mov	r0, r7
 8008ab2:	47c0      	blx	r8
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	d103      	bne.n	8008ac0 <_printf_common+0xac>
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	e7c6      	b.n	8008a52 <_printf_common+0x3e>
 8008ac4:	18e1      	adds	r1, r4, r3
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	2030      	movs	r0, #48	; 0x30
 8008aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ace:	4422      	add	r2, r4
 8008ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ad8:	3302      	adds	r3, #2
 8008ada:	e7c7      	b.n	8008a6c <_printf_common+0x58>
 8008adc:	2301      	movs	r3, #1
 8008ade:	4622      	mov	r2, r4
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	47c0      	blx	r8
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d0e6      	beq.n	8008ab8 <_printf_common+0xa4>
 8008aea:	3601      	adds	r6, #1
 8008aec:	e7d9      	b.n	8008aa2 <_printf_common+0x8e>
	...

08008af0 <_printf_i>:
 8008af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	7e0f      	ldrb	r7, [r1, #24]
 8008af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008af8:	2f78      	cmp	r7, #120	; 0x78
 8008afa:	4691      	mov	r9, r2
 8008afc:	4680      	mov	r8, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	469a      	mov	sl, r3
 8008b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b06:	d807      	bhi.n	8008b18 <_printf_i+0x28>
 8008b08:	2f62      	cmp	r7, #98	; 0x62
 8008b0a:	d80a      	bhi.n	8008b22 <_printf_i+0x32>
 8008b0c:	2f00      	cmp	r7, #0
 8008b0e:	f000 80d4 	beq.w	8008cba <_printf_i+0x1ca>
 8008b12:	2f58      	cmp	r7, #88	; 0x58
 8008b14:	f000 80c0 	beq.w	8008c98 <_printf_i+0x1a8>
 8008b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b20:	e03a      	b.n	8008b98 <_printf_i+0xa8>
 8008b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b26:	2b15      	cmp	r3, #21
 8008b28:	d8f6      	bhi.n	8008b18 <_printf_i+0x28>
 8008b2a:	a101      	add	r1, pc, #4	; (adr r1, 8008b30 <_printf_i+0x40>)
 8008b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b9d 	.word	0x08008b9d
 8008b38:	08008b19 	.word	0x08008b19
 8008b3c:	08008b19 	.word	0x08008b19
 8008b40:	08008b19 	.word	0x08008b19
 8008b44:	08008b19 	.word	0x08008b19
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008b19 	.word	0x08008b19
 8008b50:	08008b19 	.word	0x08008b19
 8008b54:	08008b19 	.word	0x08008b19
 8008b58:	08008b19 	.word	0x08008b19
 8008b5c:	08008ca1 	.word	0x08008ca1
 8008b60:	08008bc9 	.word	0x08008bc9
 8008b64:	08008c5b 	.word	0x08008c5b
 8008b68:	08008b19 	.word	0x08008b19
 8008b6c:	08008b19 	.word	0x08008b19
 8008b70:	08008cc3 	.word	0x08008cc3
 8008b74:	08008b19 	.word	0x08008b19
 8008b78:	08008bc9 	.word	0x08008bc9
 8008b7c:	08008b19 	.word	0x08008b19
 8008b80:	08008b19 	.word	0x08008b19
 8008b84:	08008c63 	.word	0x08008c63
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	1d1a      	adds	r2, r3, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	602a      	str	r2, [r5, #0]
 8008b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e09f      	b.n	8008cdc <_printf_i+0x1ec>
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	0607      	lsls	r7, r0, #24
 8008ba2:	f103 0104 	add.w	r1, r3, #4
 8008ba6:	6029      	str	r1, [r5, #0]
 8008ba8:	d501      	bpl.n	8008bae <_printf_i+0xbe>
 8008baa:	681e      	ldr	r6, [r3, #0]
 8008bac:	e003      	b.n	8008bb6 <_printf_i+0xc6>
 8008bae:	0646      	lsls	r6, r0, #25
 8008bb0:	d5fb      	bpl.n	8008baa <_printf_i+0xba>
 8008bb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	da03      	bge.n	8008bc2 <_printf_i+0xd2>
 8008bba:	232d      	movs	r3, #45	; 0x2d
 8008bbc:	4276      	negs	r6, r6
 8008bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc2:	485a      	ldr	r0, [pc, #360]	; (8008d2c <_printf_i+0x23c>)
 8008bc4:	230a      	movs	r3, #10
 8008bc6:	e012      	b.n	8008bee <_printf_i+0xfe>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	1d19      	adds	r1, r3, #4
 8008bce:	6029      	str	r1, [r5, #0]
 8008bd0:	0605      	lsls	r5, r0, #24
 8008bd2:	d501      	bpl.n	8008bd8 <_printf_i+0xe8>
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <_printf_i+0xee>
 8008bd8:	0641      	lsls	r1, r0, #25
 8008bda:	d5fb      	bpl.n	8008bd4 <_printf_i+0xe4>
 8008bdc:	881e      	ldrh	r6, [r3, #0]
 8008bde:	4853      	ldr	r0, [pc, #332]	; (8008d2c <_printf_i+0x23c>)
 8008be0:	2f6f      	cmp	r7, #111	; 0x6f
 8008be2:	bf0c      	ite	eq
 8008be4:	2308      	moveq	r3, #8
 8008be6:	230a      	movne	r3, #10
 8008be8:	2100      	movs	r1, #0
 8008bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bee:	6865      	ldr	r5, [r4, #4]
 8008bf0:	60a5      	str	r5, [r4, #8]
 8008bf2:	2d00      	cmp	r5, #0
 8008bf4:	bfa2      	ittt	ge
 8008bf6:	6821      	ldrge	r1, [r4, #0]
 8008bf8:	f021 0104 	bicge.w	r1, r1, #4
 8008bfc:	6021      	strge	r1, [r4, #0]
 8008bfe:	b90e      	cbnz	r6, 8008c04 <_printf_i+0x114>
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	d04b      	beq.n	8008c9c <_printf_i+0x1ac>
 8008c04:	4615      	mov	r5, r2
 8008c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8008c0e:	5dc7      	ldrb	r7, [r0, r7]
 8008c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c14:	4637      	mov	r7, r6
 8008c16:	42bb      	cmp	r3, r7
 8008c18:	460e      	mov	r6, r1
 8008c1a:	d9f4      	bls.n	8008c06 <_printf_i+0x116>
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d10b      	bne.n	8008c38 <_printf_i+0x148>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	07de      	lsls	r6, r3, #31
 8008c24:	d508      	bpl.n	8008c38 <_printf_i+0x148>
 8008c26:	6923      	ldr	r3, [r4, #16]
 8008c28:	6861      	ldr	r1, [r4, #4]
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	bfde      	ittt	le
 8008c2e:	2330      	movle	r3, #48	; 0x30
 8008c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c38:	1b52      	subs	r2, r2, r5
 8008c3a:	6122      	str	r2, [r4, #16]
 8008c3c:	f8cd a000 	str.w	sl, [sp]
 8008c40:	464b      	mov	r3, r9
 8008c42:	aa03      	add	r2, sp, #12
 8008c44:	4621      	mov	r1, r4
 8008c46:	4640      	mov	r0, r8
 8008c48:	f7ff fee4 	bl	8008a14 <_printf_common>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d14a      	bne.n	8008ce6 <_printf_i+0x1f6>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b004      	add	sp, #16
 8008c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	4833      	ldr	r0, [pc, #204]	; (8008d30 <_printf_i+0x240>)
 8008c64:	2778      	movs	r7, #120	; 0x78
 8008c66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c6a:	6823      	ldr	r3, [r4, #0]
 8008c6c:	6829      	ldr	r1, [r5, #0]
 8008c6e:	061f      	lsls	r7, r3, #24
 8008c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c74:	d402      	bmi.n	8008c7c <_printf_i+0x18c>
 8008c76:	065f      	lsls	r7, r3, #25
 8008c78:	bf48      	it	mi
 8008c7a:	b2b6      	uxthmi	r6, r6
 8008c7c:	07df      	lsls	r7, r3, #31
 8008c7e:	bf48      	it	mi
 8008c80:	f043 0320 	orrmi.w	r3, r3, #32
 8008c84:	6029      	str	r1, [r5, #0]
 8008c86:	bf48      	it	mi
 8008c88:	6023      	strmi	r3, [r4, #0]
 8008c8a:	b91e      	cbnz	r6, 8008c94 <_printf_i+0x1a4>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	f023 0320 	bic.w	r3, r3, #32
 8008c92:	6023      	str	r3, [r4, #0]
 8008c94:	2310      	movs	r3, #16
 8008c96:	e7a7      	b.n	8008be8 <_printf_i+0xf8>
 8008c98:	4824      	ldr	r0, [pc, #144]	; (8008d2c <_printf_i+0x23c>)
 8008c9a:	e7e4      	b.n	8008c66 <_printf_i+0x176>
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	e7bd      	b.n	8008c1c <_printf_i+0x12c>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	6826      	ldr	r6, [r4, #0]
 8008ca4:	6961      	ldr	r1, [r4, #20]
 8008ca6:	1d18      	adds	r0, r3, #4
 8008ca8:	6028      	str	r0, [r5, #0]
 8008caa:	0635      	lsls	r5, r6, #24
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	d501      	bpl.n	8008cb4 <_printf_i+0x1c4>
 8008cb0:	6019      	str	r1, [r3, #0]
 8008cb2:	e002      	b.n	8008cba <_printf_i+0x1ca>
 8008cb4:	0670      	lsls	r0, r6, #25
 8008cb6:	d5fb      	bpl.n	8008cb0 <_printf_i+0x1c0>
 8008cb8:	8019      	strh	r1, [r3, #0]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	4615      	mov	r5, r2
 8008cc0:	e7bc      	b.n	8008c3c <_printf_i+0x14c>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	1d1a      	adds	r2, r3, #4
 8008cc6:	602a      	str	r2, [r5, #0]
 8008cc8:	681d      	ldr	r5, [r3, #0]
 8008cca:	6862      	ldr	r2, [r4, #4]
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7f7 fa86 	bl	80001e0 <memchr>
 8008cd4:	b108      	cbz	r0, 8008cda <_printf_i+0x1ea>
 8008cd6:	1b40      	subs	r0, r0, r5
 8008cd8:	6060      	str	r0, [r4, #4]
 8008cda:	6863      	ldr	r3, [r4, #4]
 8008cdc:	6123      	str	r3, [r4, #16]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce4:	e7aa      	b.n	8008c3c <_printf_i+0x14c>
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4649      	mov	r1, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	47d0      	blx	sl
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d0ad      	beq.n	8008c50 <_printf_i+0x160>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	079b      	lsls	r3, r3, #30
 8008cf8:	d413      	bmi.n	8008d22 <_printf_i+0x232>
 8008cfa:	68e0      	ldr	r0, [r4, #12]
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	4298      	cmp	r0, r3
 8008d00:	bfb8      	it	lt
 8008d02:	4618      	movlt	r0, r3
 8008d04:	e7a6      	b.n	8008c54 <_printf_i+0x164>
 8008d06:	2301      	movs	r3, #1
 8008d08:	4632      	mov	r2, r6
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	47d0      	blx	sl
 8008d10:	3001      	adds	r0, #1
 8008d12:	d09d      	beq.n	8008c50 <_printf_i+0x160>
 8008d14:	3501      	adds	r5, #1
 8008d16:	68e3      	ldr	r3, [r4, #12]
 8008d18:	9903      	ldr	r1, [sp, #12]
 8008d1a:	1a5b      	subs	r3, r3, r1
 8008d1c:	42ab      	cmp	r3, r5
 8008d1e:	dcf2      	bgt.n	8008d06 <_printf_i+0x216>
 8008d20:	e7eb      	b.n	8008cfa <_printf_i+0x20a>
 8008d22:	2500      	movs	r5, #0
 8008d24:	f104 0619 	add.w	r6, r4, #25
 8008d28:	e7f5      	b.n	8008d16 <_printf_i+0x226>
 8008d2a:	bf00      	nop
 8008d2c:	0800e5f7 	.word	0x0800e5f7
 8008d30:	0800e608 	.word	0x0800e608

08008d34 <_scanf_float>:
 8008d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d38:	b087      	sub	sp, #28
 8008d3a:	4617      	mov	r7, r2
 8008d3c:	9303      	str	r3, [sp, #12]
 8008d3e:	688b      	ldr	r3, [r1, #8]
 8008d40:	1e5a      	subs	r2, r3, #1
 8008d42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d46:	bf83      	ittte	hi
 8008d48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d4c:	195b      	addhi	r3, r3, r5
 8008d4e:	9302      	strhi	r3, [sp, #8]
 8008d50:	2300      	movls	r3, #0
 8008d52:	bf86      	itte	hi
 8008d54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d58:	608b      	strhi	r3, [r1, #8]
 8008d5a:	9302      	strls	r3, [sp, #8]
 8008d5c:	680b      	ldr	r3, [r1, #0]
 8008d5e:	468b      	mov	fp, r1
 8008d60:	2500      	movs	r5, #0
 8008d62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008d66:	f84b 3b1c 	str.w	r3, [fp], #28
 8008d6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d6e:	4680      	mov	r8, r0
 8008d70:	460c      	mov	r4, r1
 8008d72:	465e      	mov	r6, fp
 8008d74:	46aa      	mov	sl, r5
 8008d76:	46a9      	mov	r9, r5
 8008d78:	9501      	str	r5, [sp, #4]
 8008d7a:	68a2      	ldr	r2, [r4, #8]
 8008d7c:	b152      	cbz	r2, 8008d94 <_scanf_float+0x60>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b4e      	cmp	r3, #78	; 0x4e
 8008d84:	d864      	bhi.n	8008e50 <_scanf_float+0x11c>
 8008d86:	2b40      	cmp	r3, #64	; 0x40
 8008d88:	d83c      	bhi.n	8008e04 <_scanf_float+0xd0>
 8008d8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008d8e:	b2c8      	uxtb	r0, r1
 8008d90:	280e      	cmp	r0, #14
 8008d92:	d93a      	bls.n	8008e0a <_scanf_float+0xd6>
 8008d94:	f1b9 0f00 	cmp.w	r9, #0
 8008d98:	d003      	beq.n	8008da2 <_scanf_float+0x6e>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008da6:	f1ba 0f01 	cmp.w	sl, #1
 8008daa:	f200 8113 	bhi.w	8008fd4 <_scanf_float+0x2a0>
 8008dae:	455e      	cmp	r6, fp
 8008db0:	f200 8105 	bhi.w	8008fbe <_scanf_float+0x28a>
 8008db4:	2501      	movs	r5, #1
 8008db6:	4628      	mov	r0, r5
 8008db8:	b007      	add	sp, #28
 8008dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008dc2:	2a0d      	cmp	r2, #13
 8008dc4:	d8e6      	bhi.n	8008d94 <_scanf_float+0x60>
 8008dc6:	a101      	add	r1, pc, #4	; (adr r1, 8008dcc <_scanf_float+0x98>)
 8008dc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008dcc:	08008f0b 	.word	0x08008f0b
 8008dd0:	08008d95 	.word	0x08008d95
 8008dd4:	08008d95 	.word	0x08008d95
 8008dd8:	08008d95 	.word	0x08008d95
 8008ddc:	08008f6b 	.word	0x08008f6b
 8008de0:	08008f43 	.word	0x08008f43
 8008de4:	08008d95 	.word	0x08008d95
 8008de8:	08008d95 	.word	0x08008d95
 8008dec:	08008f19 	.word	0x08008f19
 8008df0:	08008d95 	.word	0x08008d95
 8008df4:	08008d95 	.word	0x08008d95
 8008df8:	08008d95 	.word	0x08008d95
 8008dfc:	08008d95 	.word	0x08008d95
 8008e00:	08008ed1 	.word	0x08008ed1
 8008e04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e08:	e7db      	b.n	8008dc2 <_scanf_float+0x8e>
 8008e0a:	290e      	cmp	r1, #14
 8008e0c:	d8c2      	bhi.n	8008d94 <_scanf_float+0x60>
 8008e0e:	a001      	add	r0, pc, #4	; (adr r0, 8008e14 <_scanf_float+0xe0>)
 8008e10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e14:	08008ec3 	.word	0x08008ec3
 8008e18:	08008d95 	.word	0x08008d95
 8008e1c:	08008ec3 	.word	0x08008ec3
 8008e20:	08008f57 	.word	0x08008f57
 8008e24:	08008d95 	.word	0x08008d95
 8008e28:	08008e71 	.word	0x08008e71
 8008e2c:	08008ead 	.word	0x08008ead
 8008e30:	08008ead 	.word	0x08008ead
 8008e34:	08008ead 	.word	0x08008ead
 8008e38:	08008ead 	.word	0x08008ead
 8008e3c:	08008ead 	.word	0x08008ead
 8008e40:	08008ead 	.word	0x08008ead
 8008e44:	08008ead 	.word	0x08008ead
 8008e48:	08008ead 	.word	0x08008ead
 8008e4c:	08008ead 	.word	0x08008ead
 8008e50:	2b6e      	cmp	r3, #110	; 0x6e
 8008e52:	d809      	bhi.n	8008e68 <_scanf_float+0x134>
 8008e54:	2b60      	cmp	r3, #96	; 0x60
 8008e56:	d8b2      	bhi.n	8008dbe <_scanf_float+0x8a>
 8008e58:	2b54      	cmp	r3, #84	; 0x54
 8008e5a:	d077      	beq.n	8008f4c <_scanf_float+0x218>
 8008e5c:	2b59      	cmp	r3, #89	; 0x59
 8008e5e:	d199      	bne.n	8008d94 <_scanf_float+0x60>
 8008e60:	2d07      	cmp	r5, #7
 8008e62:	d197      	bne.n	8008d94 <_scanf_float+0x60>
 8008e64:	2508      	movs	r5, #8
 8008e66:	e029      	b.n	8008ebc <_scanf_float+0x188>
 8008e68:	2b74      	cmp	r3, #116	; 0x74
 8008e6a:	d06f      	beq.n	8008f4c <_scanf_float+0x218>
 8008e6c:	2b79      	cmp	r3, #121	; 0x79
 8008e6e:	e7f6      	b.n	8008e5e <_scanf_float+0x12a>
 8008e70:	6821      	ldr	r1, [r4, #0]
 8008e72:	05c8      	lsls	r0, r1, #23
 8008e74:	d51a      	bpl.n	8008eac <_scanf_float+0x178>
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008e7c:	6021      	str	r1, [r4, #0]
 8008e7e:	f109 0901 	add.w	r9, r9, #1
 8008e82:	b11b      	cbz	r3, 8008e8c <_scanf_float+0x158>
 8008e84:	3b01      	subs	r3, #1
 8008e86:	3201      	adds	r2, #1
 8008e88:	9302      	str	r3, [sp, #8]
 8008e8a:	60a2      	str	r2, [r4, #8]
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	60a3      	str	r3, [r4, #8]
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	3301      	adds	r3, #1
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	607b      	str	r3, [r7, #4]
 8008ea0:	f340 8084 	ble.w	8008fac <_scanf_float+0x278>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	603b      	str	r3, [r7, #0]
 8008eaa:	e766      	b.n	8008d7a <_scanf_float+0x46>
 8008eac:	eb1a 0f05 	cmn.w	sl, r5
 8008eb0:	f47f af70 	bne.w	8008d94 <_scanf_float+0x60>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ec0:	e7e4      	b.n	8008e8c <_scanf_float+0x158>
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	0610      	lsls	r0, r2, #24
 8008ec6:	f57f af65 	bpl.w	8008d94 <_scanf_float+0x60>
 8008eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ece:	e7f4      	b.n	8008eba <_scanf_float+0x186>
 8008ed0:	f1ba 0f00 	cmp.w	sl, #0
 8008ed4:	d10e      	bne.n	8008ef4 <_scanf_float+0x1c0>
 8008ed6:	f1b9 0f00 	cmp.w	r9, #0
 8008eda:	d10e      	bne.n	8008efa <_scanf_float+0x1c6>
 8008edc:	6822      	ldr	r2, [r4, #0]
 8008ede:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ee2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ee6:	d108      	bne.n	8008efa <_scanf_float+0x1c6>
 8008ee8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	f04f 0a01 	mov.w	sl, #1
 8008ef2:	e7e3      	b.n	8008ebc <_scanf_float+0x188>
 8008ef4:	f1ba 0f02 	cmp.w	sl, #2
 8008ef8:	d055      	beq.n	8008fa6 <_scanf_float+0x272>
 8008efa:	2d01      	cmp	r5, #1
 8008efc:	d002      	beq.n	8008f04 <_scanf_float+0x1d0>
 8008efe:	2d04      	cmp	r5, #4
 8008f00:	f47f af48 	bne.w	8008d94 <_scanf_float+0x60>
 8008f04:	3501      	adds	r5, #1
 8008f06:	b2ed      	uxtb	r5, r5
 8008f08:	e7d8      	b.n	8008ebc <_scanf_float+0x188>
 8008f0a:	f1ba 0f01 	cmp.w	sl, #1
 8008f0e:	f47f af41 	bne.w	8008d94 <_scanf_float+0x60>
 8008f12:	f04f 0a02 	mov.w	sl, #2
 8008f16:	e7d1      	b.n	8008ebc <_scanf_float+0x188>
 8008f18:	b97d      	cbnz	r5, 8008f3a <_scanf_float+0x206>
 8008f1a:	f1b9 0f00 	cmp.w	r9, #0
 8008f1e:	f47f af3c 	bne.w	8008d9a <_scanf_float+0x66>
 8008f22:	6822      	ldr	r2, [r4, #0]
 8008f24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f2c:	f47f af39 	bne.w	8008da2 <_scanf_float+0x6e>
 8008f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f34:	6022      	str	r2, [r4, #0]
 8008f36:	2501      	movs	r5, #1
 8008f38:	e7c0      	b.n	8008ebc <_scanf_float+0x188>
 8008f3a:	2d03      	cmp	r5, #3
 8008f3c:	d0e2      	beq.n	8008f04 <_scanf_float+0x1d0>
 8008f3e:	2d05      	cmp	r5, #5
 8008f40:	e7de      	b.n	8008f00 <_scanf_float+0x1cc>
 8008f42:	2d02      	cmp	r5, #2
 8008f44:	f47f af26 	bne.w	8008d94 <_scanf_float+0x60>
 8008f48:	2503      	movs	r5, #3
 8008f4a:	e7b7      	b.n	8008ebc <_scanf_float+0x188>
 8008f4c:	2d06      	cmp	r5, #6
 8008f4e:	f47f af21 	bne.w	8008d94 <_scanf_float+0x60>
 8008f52:	2507      	movs	r5, #7
 8008f54:	e7b2      	b.n	8008ebc <_scanf_float+0x188>
 8008f56:	6822      	ldr	r2, [r4, #0]
 8008f58:	0591      	lsls	r1, r2, #22
 8008f5a:	f57f af1b 	bpl.w	8008d94 <_scanf_float+0x60>
 8008f5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f68:	e7a8      	b.n	8008ebc <_scanf_float+0x188>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008f70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008f74:	d006      	beq.n	8008f84 <_scanf_float+0x250>
 8008f76:	0550      	lsls	r0, r2, #21
 8008f78:	f57f af0c 	bpl.w	8008d94 <_scanf_float+0x60>
 8008f7c:	f1b9 0f00 	cmp.w	r9, #0
 8008f80:	f43f af0f 	beq.w	8008da2 <_scanf_float+0x6e>
 8008f84:	0591      	lsls	r1, r2, #22
 8008f86:	bf58      	it	pl
 8008f88:	9901      	ldrpl	r1, [sp, #4]
 8008f8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f8e:	bf58      	it	pl
 8008f90:	eba9 0101 	subpl.w	r1, r9, r1
 8008f94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008f98:	bf58      	it	pl
 8008f9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f9e:	6022      	str	r2, [r4, #0]
 8008fa0:	f04f 0900 	mov.w	r9, #0
 8008fa4:	e78a      	b.n	8008ebc <_scanf_float+0x188>
 8008fa6:	f04f 0a03 	mov.w	sl, #3
 8008faa:	e787      	b.n	8008ebc <_scanf_float+0x188>
 8008fac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4798      	blx	r3
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f aedf 	beq.w	8008d7a <_scanf_float+0x46>
 8008fbc:	e6ea      	b.n	8008d94 <_scanf_float+0x60>
 8008fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fc6:	463a      	mov	r2, r7
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4798      	blx	r3
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	6123      	str	r3, [r4, #16]
 8008fd2:	e6ec      	b.n	8008dae <_scanf_float+0x7a>
 8008fd4:	1e6b      	subs	r3, r5, #1
 8008fd6:	2b06      	cmp	r3, #6
 8008fd8:	d825      	bhi.n	8009026 <_scanf_float+0x2f2>
 8008fda:	2d02      	cmp	r5, #2
 8008fdc:	d836      	bhi.n	800904c <_scanf_float+0x318>
 8008fde:	455e      	cmp	r6, fp
 8008fe0:	f67f aee8 	bls.w	8008db4 <_scanf_float+0x80>
 8008fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008fe8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fec:	463a      	mov	r2, r7
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4798      	blx	r3
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	e7f1      	b.n	8008fde <_scanf_float+0x2aa>
 8008ffa:	9802      	ldr	r0, [sp, #8]
 8008ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009000:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009004:	9002      	str	r0, [sp, #8]
 8009006:	463a      	mov	r2, r7
 8009008:	4640      	mov	r0, r8
 800900a:	4798      	blx	r3
 800900c:	6923      	ldr	r3, [r4, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009016:	fa5f fa8a 	uxtb.w	sl, sl
 800901a:	f1ba 0f02 	cmp.w	sl, #2
 800901e:	d1ec      	bne.n	8008ffa <_scanf_float+0x2c6>
 8009020:	3d03      	subs	r5, #3
 8009022:	b2ed      	uxtb	r5, r5
 8009024:	1b76      	subs	r6, r6, r5
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	05da      	lsls	r2, r3, #23
 800902a:	d52f      	bpl.n	800908c <_scanf_float+0x358>
 800902c:	055b      	lsls	r3, r3, #21
 800902e:	d510      	bpl.n	8009052 <_scanf_float+0x31e>
 8009030:	455e      	cmp	r6, fp
 8009032:	f67f aebf 	bls.w	8008db4 <_scanf_float+0x80>
 8009036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800903a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800903e:	463a      	mov	r2, r7
 8009040:	4640      	mov	r0, r8
 8009042:	4798      	blx	r3
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	3b01      	subs	r3, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	e7f1      	b.n	8009030 <_scanf_float+0x2fc>
 800904c:	46aa      	mov	sl, r5
 800904e:	9602      	str	r6, [sp, #8]
 8009050:	e7df      	b.n	8009012 <_scanf_float+0x2de>
 8009052:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	2965      	cmp	r1, #101	; 0x65
 800905a:	f103 33ff 	add.w	r3, r3, #4294967295
 800905e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009062:	6123      	str	r3, [r4, #16]
 8009064:	d00c      	beq.n	8009080 <_scanf_float+0x34c>
 8009066:	2945      	cmp	r1, #69	; 0x45
 8009068:	d00a      	beq.n	8009080 <_scanf_float+0x34c>
 800906a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800906e:	463a      	mov	r2, r7
 8009070:	4640      	mov	r0, r8
 8009072:	4798      	blx	r3
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800907a:	3b01      	subs	r3, #1
 800907c:	1eb5      	subs	r5, r6, #2
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009084:	463a      	mov	r2, r7
 8009086:	4640      	mov	r0, r8
 8009088:	4798      	blx	r3
 800908a:	462e      	mov	r6, r5
 800908c:	6825      	ldr	r5, [r4, #0]
 800908e:	f015 0510 	ands.w	r5, r5, #16
 8009092:	d158      	bne.n	8009146 <_scanf_float+0x412>
 8009094:	7035      	strb	r5, [r6, #0]
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800909c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090a0:	d11c      	bne.n	80090dc <_scanf_float+0x3a8>
 80090a2:	9b01      	ldr	r3, [sp, #4]
 80090a4:	454b      	cmp	r3, r9
 80090a6:	eba3 0209 	sub.w	r2, r3, r9
 80090aa:	d124      	bne.n	80090f6 <_scanf_float+0x3c2>
 80090ac:	2200      	movs	r2, #0
 80090ae:	4659      	mov	r1, fp
 80090b0:	4640      	mov	r0, r8
 80090b2:	f002 fe19 	bl	800bce8 <_strtod_r>
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	6821      	ldr	r1, [r4, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f011 0f02 	tst.w	r1, #2
 80090c0:	ec57 6b10 	vmov	r6, r7, d0
 80090c4:	f103 0204 	add.w	r2, r3, #4
 80090c8:	d020      	beq.n	800910c <_scanf_float+0x3d8>
 80090ca:	9903      	ldr	r1, [sp, #12]
 80090cc:	600a      	str	r2, [r1, #0]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	e9c3 6700 	strd	r6, r7, [r3]
 80090d4:	68e3      	ldr	r3, [r4, #12]
 80090d6:	3301      	adds	r3, #1
 80090d8:	60e3      	str	r3, [r4, #12]
 80090da:	e66c      	b.n	8008db6 <_scanf_float+0x82>
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0e4      	beq.n	80090ac <_scanf_float+0x378>
 80090e2:	9905      	ldr	r1, [sp, #20]
 80090e4:	230a      	movs	r3, #10
 80090e6:	462a      	mov	r2, r5
 80090e8:	3101      	adds	r1, #1
 80090ea:	4640      	mov	r0, r8
 80090ec:	f7ff f9b0 	bl	8008450 <_strtol_r>
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	9e05      	ldr	r6, [sp, #20]
 80090f4:	1ac2      	subs	r2, r0, r3
 80090f6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80090fa:	429e      	cmp	r6, r3
 80090fc:	bf28      	it	cs
 80090fe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009102:	4912      	ldr	r1, [pc, #72]	; (800914c <_scanf_float+0x418>)
 8009104:	4630      	mov	r0, r6
 8009106:	f000 f991 	bl	800942c <siprintf>
 800910a:	e7cf      	b.n	80090ac <_scanf_float+0x378>
 800910c:	f011 0f04 	tst.w	r1, #4
 8009110:	9903      	ldr	r1, [sp, #12]
 8009112:	600a      	str	r2, [r1, #0]
 8009114:	d1db      	bne.n	80090ce <_scanf_float+0x39a>
 8009116:	f8d3 8000 	ldr.w	r8, [r3]
 800911a:	ee10 2a10 	vmov	r2, s0
 800911e:	ee10 0a10 	vmov	r0, s0
 8009122:	463b      	mov	r3, r7
 8009124:	4639      	mov	r1, r7
 8009126:	f7f7 fd09 	bl	8000b3c <__aeabi_dcmpun>
 800912a:	b128      	cbz	r0, 8009138 <_scanf_float+0x404>
 800912c:	4808      	ldr	r0, [pc, #32]	; (8009150 <_scanf_float+0x41c>)
 800912e:	f000 fb83 	bl	8009838 <nanf>
 8009132:	ed88 0a00 	vstr	s0, [r8]
 8009136:	e7cd      	b.n	80090d4 <_scanf_float+0x3a0>
 8009138:	4630      	mov	r0, r6
 800913a:	4639      	mov	r1, r7
 800913c:	f7f7 fd5c 	bl	8000bf8 <__aeabi_d2f>
 8009140:	f8c8 0000 	str.w	r0, [r8]
 8009144:	e7c6      	b.n	80090d4 <_scanf_float+0x3a0>
 8009146:	2500      	movs	r5, #0
 8009148:	e635      	b.n	8008db6 <_scanf_float+0x82>
 800914a:	bf00      	nop
 800914c:	0800e619 	.word	0x0800e619
 8009150:	0800e6ca 	.word	0x0800e6ca

08009154 <std>:
 8009154:	2300      	movs	r3, #0
 8009156:	b510      	push	{r4, lr}
 8009158:	4604      	mov	r4, r0
 800915a:	e9c0 3300 	strd	r3, r3, [r0]
 800915e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009162:	6083      	str	r3, [r0, #8]
 8009164:	8181      	strh	r1, [r0, #12]
 8009166:	6643      	str	r3, [r0, #100]	; 0x64
 8009168:	81c2      	strh	r2, [r0, #14]
 800916a:	6183      	str	r3, [r0, #24]
 800916c:	4619      	mov	r1, r3
 800916e:	2208      	movs	r2, #8
 8009170:	305c      	adds	r0, #92	; 0x5c
 8009172:	f000 fa53 	bl	800961c <memset>
 8009176:	4b0d      	ldr	r3, [pc, #52]	; (80091ac <std+0x58>)
 8009178:	6263      	str	r3, [r4, #36]	; 0x24
 800917a:	4b0d      	ldr	r3, [pc, #52]	; (80091b0 <std+0x5c>)
 800917c:	62a3      	str	r3, [r4, #40]	; 0x28
 800917e:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <std+0x60>)
 8009180:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <std+0x64>)
 8009184:	6323      	str	r3, [r4, #48]	; 0x30
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <std+0x68>)
 8009188:	6224      	str	r4, [r4, #32]
 800918a:	429c      	cmp	r4, r3
 800918c:	d006      	beq.n	800919c <std+0x48>
 800918e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009192:	4294      	cmp	r4, r2
 8009194:	d002      	beq.n	800919c <std+0x48>
 8009196:	33d0      	adds	r3, #208	; 0xd0
 8009198:	429c      	cmp	r4, r3
 800919a:	d105      	bne.n	80091a8 <std+0x54>
 800919c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a4:	f000 bb36 	b.w	8009814 <__retarget_lock_init_recursive>
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	bf00      	nop
 80091ac:	0800946d 	.word	0x0800946d
 80091b0:	0800948f 	.word	0x0800948f
 80091b4:	080094c7 	.word	0x080094c7
 80091b8:	080094eb 	.word	0x080094eb
 80091bc:	20000cf0 	.word	0x20000cf0

080091c0 <stdio_exit_handler>:
 80091c0:	4a02      	ldr	r2, [pc, #8]	; (80091cc <stdio_exit_handler+0xc>)
 80091c2:	4903      	ldr	r1, [pc, #12]	; (80091d0 <stdio_exit_handler+0x10>)
 80091c4:	4803      	ldr	r0, [pc, #12]	; (80091d4 <stdio_exit_handler+0x14>)
 80091c6:	f000 b869 	b.w	800929c <_fwalk_sglue>
 80091ca:	bf00      	nop
 80091cc:	2000000c 	.word	0x2000000c
 80091d0:	0800c339 	.word	0x0800c339
 80091d4:	20000018 	.word	0x20000018

080091d8 <cleanup_stdio>:
 80091d8:	6841      	ldr	r1, [r0, #4]
 80091da:	4b0c      	ldr	r3, [pc, #48]	; (800920c <cleanup_stdio+0x34>)
 80091dc:	4299      	cmp	r1, r3
 80091de:	b510      	push	{r4, lr}
 80091e0:	4604      	mov	r4, r0
 80091e2:	d001      	beq.n	80091e8 <cleanup_stdio+0x10>
 80091e4:	f003 f8a8 	bl	800c338 <_fflush_r>
 80091e8:	68a1      	ldr	r1, [r4, #8]
 80091ea:	4b09      	ldr	r3, [pc, #36]	; (8009210 <cleanup_stdio+0x38>)
 80091ec:	4299      	cmp	r1, r3
 80091ee:	d002      	beq.n	80091f6 <cleanup_stdio+0x1e>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f003 f8a1 	bl	800c338 <_fflush_r>
 80091f6:	68e1      	ldr	r1, [r4, #12]
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <cleanup_stdio+0x3c>)
 80091fa:	4299      	cmp	r1, r3
 80091fc:	d004      	beq.n	8009208 <cleanup_stdio+0x30>
 80091fe:	4620      	mov	r0, r4
 8009200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009204:	f003 b898 	b.w	800c338 <_fflush_r>
 8009208:	bd10      	pop	{r4, pc}
 800920a:	bf00      	nop
 800920c:	20000cf0 	.word	0x20000cf0
 8009210:	20000d58 	.word	0x20000d58
 8009214:	20000dc0 	.word	0x20000dc0

08009218 <global_stdio_init.part.0>:
 8009218:	b510      	push	{r4, lr}
 800921a:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <global_stdio_init.part.0+0x30>)
 800921c:	4c0b      	ldr	r4, [pc, #44]	; (800924c <global_stdio_init.part.0+0x34>)
 800921e:	4a0c      	ldr	r2, [pc, #48]	; (8009250 <global_stdio_init.part.0+0x38>)
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	4620      	mov	r0, r4
 8009224:	2200      	movs	r2, #0
 8009226:	2104      	movs	r1, #4
 8009228:	f7ff ff94 	bl	8009154 <std>
 800922c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009230:	2201      	movs	r2, #1
 8009232:	2109      	movs	r1, #9
 8009234:	f7ff ff8e 	bl	8009154 <std>
 8009238:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800923c:	2202      	movs	r2, #2
 800923e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009242:	2112      	movs	r1, #18
 8009244:	f7ff bf86 	b.w	8009154 <std>
 8009248:	20000e28 	.word	0x20000e28
 800924c:	20000cf0 	.word	0x20000cf0
 8009250:	080091c1 	.word	0x080091c1

08009254 <__sfp_lock_acquire>:
 8009254:	4801      	ldr	r0, [pc, #4]	; (800925c <__sfp_lock_acquire+0x8>)
 8009256:	f000 bade 	b.w	8009816 <__retarget_lock_acquire_recursive>
 800925a:	bf00      	nop
 800925c:	20000e31 	.word	0x20000e31

08009260 <__sfp_lock_release>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__sfp_lock_release+0x8>)
 8009262:	f000 bad9 	b.w	8009818 <__retarget_lock_release_recursive>
 8009266:	bf00      	nop
 8009268:	20000e31 	.word	0x20000e31

0800926c <__sinit>:
 800926c:	b510      	push	{r4, lr}
 800926e:	4604      	mov	r4, r0
 8009270:	f7ff fff0 	bl	8009254 <__sfp_lock_acquire>
 8009274:	6a23      	ldr	r3, [r4, #32]
 8009276:	b11b      	cbz	r3, 8009280 <__sinit+0x14>
 8009278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927c:	f7ff bff0 	b.w	8009260 <__sfp_lock_release>
 8009280:	4b04      	ldr	r3, [pc, #16]	; (8009294 <__sinit+0x28>)
 8009282:	6223      	str	r3, [r4, #32]
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <__sinit+0x2c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1f5      	bne.n	8009278 <__sinit+0xc>
 800928c:	f7ff ffc4 	bl	8009218 <global_stdio_init.part.0>
 8009290:	e7f2      	b.n	8009278 <__sinit+0xc>
 8009292:	bf00      	nop
 8009294:	080091d9 	.word	0x080091d9
 8009298:	20000e28 	.word	0x20000e28

0800929c <_fwalk_sglue>:
 800929c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a0:	4607      	mov	r7, r0
 80092a2:	4688      	mov	r8, r1
 80092a4:	4614      	mov	r4, r2
 80092a6:	2600      	movs	r6, #0
 80092a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ac:	f1b9 0901 	subs.w	r9, r9, #1
 80092b0:	d505      	bpl.n	80092be <_fwalk_sglue+0x22>
 80092b2:	6824      	ldr	r4, [r4, #0]
 80092b4:	2c00      	cmp	r4, #0
 80092b6:	d1f7      	bne.n	80092a8 <_fwalk_sglue+0xc>
 80092b8:	4630      	mov	r0, r6
 80092ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d907      	bls.n	80092d4 <_fwalk_sglue+0x38>
 80092c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092c8:	3301      	adds	r3, #1
 80092ca:	d003      	beq.n	80092d4 <_fwalk_sglue+0x38>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4638      	mov	r0, r7
 80092d0:	47c0      	blx	r8
 80092d2:	4306      	orrs	r6, r0
 80092d4:	3568      	adds	r5, #104	; 0x68
 80092d6:	e7e9      	b.n	80092ac <_fwalk_sglue+0x10>

080092d8 <iprintf>:
 80092d8:	b40f      	push	{r0, r1, r2, r3}
 80092da:	b507      	push	{r0, r1, r2, lr}
 80092dc:	4906      	ldr	r1, [pc, #24]	; (80092f8 <iprintf+0x20>)
 80092de:	ab04      	add	r3, sp, #16
 80092e0:	6808      	ldr	r0, [r1, #0]
 80092e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e6:	6881      	ldr	r1, [r0, #8]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	f002 fe85 	bl	800bff8 <_vfiprintf_r>
 80092ee:	b003      	add	sp, #12
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	b004      	add	sp, #16
 80092f6:	4770      	bx	lr
 80092f8:	20000064 	.word	0x20000064

080092fc <putchar>:
 80092fc:	4b02      	ldr	r3, [pc, #8]	; (8009308 <putchar+0xc>)
 80092fe:	4601      	mov	r1, r0
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	6882      	ldr	r2, [r0, #8]
 8009304:	f003 b8b4 	b.w	800c470 <_putc_r>
 8009308:	20000064 	.word	0x20000064

0800930c <_puts_r>:
 800930c:	6a03      	ldr	r3, [r0, #32]
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	6884      	ldr	r4, [r0, #8]
 8009312:	4605      	mov	r5, r0
 8009314:	460e      	mov	r6, r1
 8009316:	b90b      	cbnz	r3, 800931c <_puts_r+0x10>
 8009318:	f7ff ffa8 	bl	800926c <__sinit>
 800931c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800931e:	07db      	lsls	r3, r3, #31
 8009320:	d405      	bmi.n	800932e <_puts_r+0x22>
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	0598      	lsls	r0, r3, #22
 8009326:	d402      	bmi.n	800932e <_puts_r+0x22>
 8009328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932a:	f000 fa74 	bl	8009816 <__retarget_lock_acquire_recursive>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	0719      	lsls	r1, r3, #28
 8009332:	d513      	bpl.n	800935c <_puts_r+0x50>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	b18b      	cbz	r3, 800935c <_puts_r+0x50>
 8009338:	3e01      	subs	r6, #1
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009340:	3b01      	subs	r3, #1
 8009342:	60a3      	str	r3, [r4, #8]
 8009344:	b9e9      	cbnz	r1, 8009382 <_puts_r+0x76>
 8009346:	2b00      	cmp	r3, #0
 8009348:	da2e      	bge.n	80093a8 <_puts_r+0x9c>
 800934a:	4622      	mov	r2, r4
 800934c:	210a      	movs	r1, #10
 800934e:	4628      	mov	r0, r5
 8009350:	f000 f8cf 	bl	80094f2 <__swbuf_r>
 8009354:	3001      	adds	r0, #1
 8009356:	d007      	beq.n	8009368 <_puts_r+0x5c>
 8009358:	250a      	movs	r5, #10
 800935a:	e007      	b.n	800936c <_puts_r+0x60>
 800935c:	4621      	mov	r1, r4
 800935e:	4628      	mov	r0, r5
 8009360:	f000 f904 	bl	800956c <__swsetup_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	d0e7      	beq.n	8009338 <_puts_r+0x2c>
 8009368:	f04f 35ff 	mov.w	r5, #4294967295
 800936c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800936e:	07da      	lsls	r2, r3, #31
 8009370:	d405      	bmi.n	800937e <_puts_r+0x72>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	059b      	lsls	r3, r3, #22
 8009376:	d402      	bmi.n	800937e <_puts_r+0x72>
 8009378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937a:	f000 fa4d 	bl	8009818 <__retarget_lock_release_recursive>
 800937e:	4628      	mov	r0, r5
 8009380:	bd70      	pop	{r4, r5, r6, pc}
 8009382:	2b00      	cmp	r3, #0
 8009384:	da04      	bge.n	8009390 <_puts_r+0x84>
 8009386:	69a2      	ldr	r2, [r4, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	dc06      	bgt.n	800939a <_puts_r+0x8e>
 800938c:	290a      	cmp	r1, #10
 800938e:	d004      	beq.n	800939a <_puts_r+0x8e>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	6022      	str	r2, [r4, #0]
 8009396:	7019      	strb	r1, [r3, #0]
 8009398:	e7cf      	b.n	800933a <_puts_r+0x2e>
 800939a:	4622      	mov	r2, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f000 f8a8 	bl	80094f2 <__swbuf_r>
 80093a2:	3001      	adds	r0, #1
 80093a4:	d1c9      	bne.n	800933a <_puts_r+0x2e>
 80093a6:	e7df      	b.n	8009368 <_puts_r+0x5c>
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	250a      	movs	r5, #10
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	701d      	strb	r5, [r3, #0]
 80093b2:	e7db      	b.n	800936c <_puts_r+0x60>

080093b4 <puts>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <puts+0xc>)
 80093b6:	4601      	mov	r1, r0
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f7ff bfa7 	b.w	800930c <_puts_r>
 80093be:	bf00      	nop
 80093c0:	20000064 	.word	0x20000064

080093c4 <sniprintf>:
 80093c4:	b40c      	push	{r2, r3}
 80093c6:	b530      	push	{r4, r5, lr}
 80093c8:	4b17      	ldr	r3, [pc, #92]	; (8009428 <sniprintf+0x64>)
 80093ca:	1e0c      	subs	r4, r1, #0
 80093cc:	681d      	ldr	r5, [r3, #0]
 80093ce:	b09d      	sub	sp, #116	; 0x74
 80093d0:	da08      	bge.n	80093e4 <sniprintf+0x20>
 80093d2:	238b      	movs	r3, #139	; 0x8b
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	b01d      	add	sp, #116	; 0x74
 80093dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093e0:	b002      	add	sp, #8
 80093e2:	4770      	bx	lr
 80093e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093ec:	bf14      	ite	ne
 80093ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093f2:	4623      	moveq	r3, r4
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093fc:	9002      	str	r0, [sp, #8]
 80093fe:	9006      	str	r0, [sp, #24]
 8009400:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009406:	ab21      	add	r3, sp, #132	; 0x84
 8009408:	a902      	add	r1, sp, #8
 800940a:	4628      	mov	r0, r5
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	f002 fccb 	bl	800bda8 <_svfiprintf_r>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	bfbc      	itt	lt
 8009416:	238b      	movlt	r3, #139	; 0x8b
 8009418:	602b      	strlt	r3, [r5, #0]
 800941a:	2c00      	cmp	r4, #0
 800941c:	d0dd      	beq.n	80093da <sniprintf+0x16>
 800941e:	9b02      	ldr	r3, [sp, #8]
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	e7d9      	b.n	80093da <sniprintf+0x16>
 8009426:	bf00      	nop
 8009428:	20000064 	.word	0x20000064

0800942c <siprintf>:
 800942c:	b40e      	push	{r1, r2, r3}
 800942e:	b500      	push	{lr}
 8009430:	b09c      	sub	sp, #112	; 0x70
 8009432:	ab1d      	add	r3, sp, #116	; 0x74
 8009434:	9002      	str	r0, [sp, #8]
 8009436:	9006      	str	r0, [sp, #24]
 8009438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800943c:	4809      	ldr	r0, [pc, #36]	; (8009464 <siprintf+0x38>)
 800943e:	9107      	str	r1, [sp, #28]
 8009440:	9104      	str	r1, [sp, #16]
 8009442:	4909      	ldr	r1, [pc, #36]	; (8009468 <siprintf+0x3c>)
 8009444:	f853 2b04 	ldr.w	r2, [r3], #4
 8009448:	9105      	str	r1, [sp, #20]
 800944a:	6800      	ldr	r0, [r0, #0]
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	a902      	add	r1, sp, #8
 8009450:	f002 fcaa 	bl	800bda8 <_svfiprintf_r>
 8009454:	9b02      	ldr	r3, [sp, #8]
 8009456:	2200      	movs	r2, #0
 8009458:	701a      	strb	r2, [r3, #0]
 800945a:	b01c      	add	sp, #112	; 0x70
 800945c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009460:	b003      	add	sp, #12
 8009462:	4770      	bx	lr
 8009464:	20000064 	.word	0x20000064
 8009468:	ffff0208 	.word	0xffff0208

0800946c <__sread>:
 800946c:	b510      	push	{r4, lr}
 800946e:	460c      	mov	r4, r1
 8009470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009474:	f000 f980 	bl	8009778 <_read_r>
 8009478:	2800      	cmp	r0, #0
 800947a:	bfab      	itete	ge
 800947c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800947e:	89a3      	ldrhlt	r3, [r4, #12]
 8009480:	181b      	addge	r3, r3, r0
 8009482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009486:	bfac      	ite	ge
 8009488:	6563      	strge	r3, [r4, #84]	; 0x54
 800948a:	81a3      	strhlt	r3, [r4, #12]
 800948c:	bd10      	pop	{r4, pc}

0800948e <__swrite>:
 800948e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009492:	461f      	mov	r7, r3
 8009494:	898b      	ldrh	r3, [r1, #12]
 8009496:	05db      	lsls	r3, r3, #23
 8009498:	4605      	mov	r5, r0
 800949a:	460c      	mov	r4, r1
 800949c:	4616      	mov	r6, r2
 800949e:	d505      	bpl.n	80094ac <__swrite+0x1e>
 80094a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a4:	2302      	movs	r3, #2
 80094a6:	2200      	movs	r2, #0
 80094a8:	f000 f954 	bl	8009754 <_lseek_r>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	4632      	mov	r2, r6
 80094ba:	463b      	mov	r3, r7
 80094bc:	4628      	mov	r0, r5
 80094be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094c2:	f000 b96b 	b.w	800979c <_write_r>

080094c6 <__sseek>:
 80094c6:	b510      	push	{r4, lr}
 80094c8:	460c      	mov	r4, r1
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	f000 f941 	bl	8009754 <_lseek_r>
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	bf15      	itete	ne
 80094d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80094da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094e2:	81a3      	strheq	r3, [r4, #12]
 80094e4:	bf18      	it	ne
 80094e6:	81a3      	strhne	r3, [r4, #12]
 80094e8:	bd10      	pop	{r4, pc}

080094ea <__sclose>:
 80094ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ee:	f000 b921 	b.w	8009734 <_close_r>

080094f2 <__swbuf_r>:
 80094f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f4:	460e      	mov	r6, r1
 80094f6:	4614      	mov	r4, r2
 80094f8:	4605      	mov	r5, r0
 80094fa:	b118      	cbz	r0, 8009504 <__swbuf_r+0x12>
 80094fc:	6a03      	ldr	r3, [r0, #32]
 80094fe:	b90b      	cbnz	r3, 8009504 <__swbuf_r+0x12>
 8009500:	f7ff feb4 	bl	800926c <__sinit>
 8009504:	69a3      	ldr	r3, [r4, #24]
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	071a      	lsls	r2, r3, #28
 800950c:	d525      	bpl.n	800955a <__swbuf_r+0x68>
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	b31b      	cbz	r3, 800955a <__swbuf_r+0x68>
 8009512:	6823      	ldr	r3, [r4, #0]
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	1a98      	subs	r0, r3, r2
 8009518:	6963      	ldr	r3, [r4, #20]
 800951a:	b2f6      	uxtb	r6, r6
 800951c:	4283      	cmp	r3, r0
 800951e:	4637      	mov	r7, r6
 8009520:	dc04      	bgt.n	800952c <__swbuf_r+0x3a>
 8009522:	4621      	mov	r1, r4
 8009524:	4628      	mov	r0, r5
 8009526:	f002 ff07 	bl	800c338 <_fflush_r>
 800952a:	b9e0      	cbnz	r0, 8009566 <__swbuf_r+0x74>
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	3b01      	subs	r3, #1
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	6022      	str	r2, [r4, #0]
 8009538:	701e      	strb	r6, [r3, #0]
 800953a:	6962      	ldr	r2, [r4, #20]
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	429a      	cmp	r2, r3
 8009540:	d004      	beq.n	800954c <__swbuf_r+0x5a>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	07db      	lsls	r3, r3, #31
 8009546:	d506      	bpl.n	8009556 <__swbuf_r+0x64>
 8009548:	2e0a      	cmp	r6, #10
 800954a:	d104      	bne.n	8009556 <__swbuf_r+0x64>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f002 fef2 	bl	800c338 <_fflush_r>
 8009554:	b938      	cbnz	r0, 8009566 <__swbuf_r+0x74>
 8009556:	4638      	mov	r0, r7
 8009558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955a:	4621      	mov	r1, r4
 800955c:	4628      	mov	r0, r5
 800955e:	f000 f805 	bl	800956c <__swsetup_r>
 8009562:	2800      	cmp	r0, #0
 8009564:	d0d5      	beq.n	8009512 <__swbuf_r+0x20>
 8009566:	f04f 37ff 	mov.w	r7, #4294967295
 800956a:	e7f4      	b.n	8009556 <__swbuf_r+0x64>

0800956c <__swsetup_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4b2a      	ldr	r3, [pc, #168]	; (8009618 <__swsetup_r+0xac>)
 8009570:	4605      	mov	r5, r0
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	460c      	mov	r4, r1
 8009576:	b118      	cbz	r0, 8009580 <__swsetup_r+0x14>
 8009578:	6a03      	ldr	r3, [r0, #32]
 800957a:	b90b      	cbnz	r3, 8009580 <__swsetup_r+0x14>
 800957c:	f7ff fe76 	bl	800926c <__sinit>
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009586:	0718      	lsls	r0, r3, #28
 8009588:	d422      	bmi.n	80095d0 <__swsetup_r+0x64>
 800958a:	06d9      	lsls	r1, r3, #27
 800958c:	d407      	bmi.n	800959e <__swsetup_r+0x32>
 800958e:	2309      	movs	r3, #9
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	f04f 30ff 	mov.w	r0, #4294967295
 800959c:	e034      	b.n	8009608 <__swsetup_r+0x9c>
 800959e:	0758      	lsls	r0, r3, #29
 80095a0:	d512      	bpl.n	80095c8 <__swsetup_r+0x5c>
 80095a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095a4:	b141      	cbz	r1, 80095b8 <__swsetup_r+0x4c>
 80095a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095aa:	4299      	cmp	r1, r3
 80095ac:	d002      	beq.n	80095b4 <__swsetup_r+0x48>
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 ffe0 	bl	800a574 <_free_r>
 80095b4:	2300      	movs	r3, #0
 80095b6:	6363      	str	r3, [r4, #52]	; 0x34
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	2300      	movs	r3, #0
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	6023      	str	r3, [r4, #0]
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	f043 0308 	orr.w	r3, r3, #8
 80095ce:	81a3      	strh	r3, [r4, #12]
 80095d0:	6923      	ldr	r3, [r4, #16]
 80095d2:	b94b      	cbnz	r3, 80095e8 <__swsetup_r+0x7c>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095de:	d003      	beq.n	80095e8 <__swsetup_r+0x7c>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	f002 ff08 	bl	800c3f8 <__smakebuf_r>
 80095e8:	89a0      	ldrh	r0, [r4, #12]
 80095ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ee:	f010 0301 	ands.w	r3, r0, #1
 80095f2:	d00a      	beq.n	800960a <__swsetup_r+0x9e>
 80095f4:	2300      	movs	r3, #0
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6963      	ldr	r3, [r4, #20]
 80095fa:	425b      	negs	r3, r3
 80095fc:	61a3      	str	r3, [r4, #24]
 80095fe:	6923      	ldr	r3, [r4, #16]
 8009600:	b943      	cbnz	r3, 8009614 <__swsetup_r+0xa8>
 8009602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009606:	d1c4      	bne.n	8009592 <__swsetup_r+0x26>
 8009608:	bd38      	pop	{r3, r4, r5, pc}
 800960a:	0781      	lsls	r1, r0, #30
 800960c:	bf58      	it	pl
 800960e:	6963      	ldrpl	r3, [r4, #20]
 8009610:	60a3      	str	r3, [r4, #8]
 8009612:	e7f4      	b.n	80095fe <__swsetup_r+0x92>
 8009614:	2000      	movs	r0, #0
 8009616:	e7f7      	b.n	8009608 <__swsetup_r+0x9c>
 8009618:	20000064 	.word	0x20000064

0800961c <memset>:
 800961c:	4402      	add	r2, r0
 800961e:	4603      	mov	r3, r0
 8009620:	4293      	cmp	r3, r2
 8009622:	d100      	bne.n	8009626 <memset+0xa>
 8009624:	4770      	bx	lr
 8009626:	f803 1b01 	strb.w	r1, [r3], #1
 800962a:	e7f9      	b.n	8009620 <memset+0x4>

0800962c <strchr>:
 800962c:	b2c9      	uxtb	r1, r1
 800962e:	4603      	mov	r3, r0
 8009630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009634:	b11a      	cbz	r2, 800963e <strchr+0x12>
 8009636:	428a      	cmp	r2, r1
 8009638:	d1f9      	bne.n	800962e <strchr+0x2>
 800963a:	4618      	mov	r0, r3
 800963c:	4770      	bx	lr
 800963e:	2900      	cmp	r1, #0
 8009640:	bf18      	it	ne
 8009642:	2300      	movne	r3, #0
 8009644:	e7f9      	b.n	800963a <strchr+0xe>
	...

08009648 <strtok>:
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <strtok+0x5c>)
 800964a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800964c:	681e      	ldr	r6, [r3, #0]
 800964e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009650:	4605      	mov	r5, r0
 8009652:	b9fc      	cbnz	r4, 8009694 <strtok+0x4c>
 8009654:	2050      	movs	r0, #80	; 0x50
 8009656:	9101      	str	r1, [sp, #4]
 8009658:	f000 ffd8 	bl	800a60c <malloc>
 800965c:	9901      	ldr	r1, [sp, #4]
 800965e:	6470      	str	r0, [r6, #68]	; 0x44
 8009660:	4602      	mov	r2, r0
 8009662:	b920      	cbnz	r0, 800966e <strtok+0x26>
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <strtok+0x60>)
 8009666:	4811      	ldr	r0, [pc, #68]	; (80096ac <strtok+0x64>)
 8009668:	215b      	movs	r1, #91	; 0x5b
 800966a:	f000 f8eb 	bl	8009844 <__assert_func>
 800966e:	e9c0 4400 	strd	r4, r4, [r0]
 8009672:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009676:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800967a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800967e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009682:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009686:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800968a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800968e:	6184      	str	r4, [r0, #24]
 8009690:	7704      	strb	r4, [r0, #28]
 8009692:	6244      	str	r4, [r0, #36]	; 0x24
 8009694:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8009696:	2301      	movs	r3, #1
 8009698:	4628      	mov	r0, r5
 800969a:	b002      	add	sp, #8
 800969c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096a0:	f000 b806 	b.w	80096b0 <__strtok_r>
 80096a4:	20000064 	.word	0x20000064
 80096a8:	0800e61e 	.word	0x0800e61e
 80096ac:	0800e635 	.word	0x0800e635

080096b0 <__strtok_r>:
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	b908      	cbnz	r0, 80096b8 <__strtok_r+0x8>
 80096b4:	6810      	ldr	r0, [r2, #0]
 80096b6:	b188      	cbz	r0, 80096dc <__strtok_r+0x2c>
 80096b8:	4604      	mov	r4, r0
 80096ba:	4620      	mov	r0, r4
 80096bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80096c0:	460f      	mov	r7, r1
 80096c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096c6:	b91e      	cbnz	r6, 80096d0 <__strtok_r+0x20>
 80096c8:	b965      	cbnz	r5, 80096e4 <__strtok_r+0x34>
 80096ca:	6015      	str	r5, [r2, #0]
 80096cc:	4628      	mov	r0, r5
 80096ce:	e005      	b.n	80096dc <__strtok_r+0x2c>
 80096d0:	42b5      	cmp	r5, r6
 80096d2:	d1f6      	bne.n	80096c2 <__strtok_r+0x12>
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f0      	bne.n	80096ba <__strtok_r+0xa>
 80096d8:	6014      	str	r4, [r2, #0]
 80096da:	7003      	strb	r3, [r0, #0]
 80096dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096de:	461c      	mov	r4, r3
 80096e0:	e00c      	b.n	80096fc <__strtok_r+0x4c>
 80096e2:	b915      	cbnz	r5, 80096ea <__strtok_r+0x3a>
 80096e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096e8:	460e      	mov	r6, r1
 80096ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 80096ee:	42ab      	cmp	r3, r5
 80096f0:	d1f7      	bne.n	80096e2 <__strtok_r+0x32>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f3      	beq.n	80096de <__strtok_r+0x2e>
 80096f6:	2300      	movs	r3, #0
 80096f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80096fc:	6014      	str	r4, [r2, #0]
 80096fe:	e7ed      	b.n	80096dc <__strtok_r+0x2c>

08009700 <strstr>:
 8009700:	780a      	ldrb	r2, [r1, #0]
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	b96a      	cbnz	r2, 8009722 <strstr+0x22>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	429a      	cmp	r2, r3
 800970a:	d109      	bne.n	8009720 <strstr+0x20>
 800970c:	460c      	mov	r4, r1
 800970e:	4605      	mov	r5, r0
 8009710:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0f6      	beq.n	8009706 <strstr+0x6>
 8009718:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800971c:	429e      	cmp	r6, r3
 800971e:	d0f7      	beq.n	8009710 <strstr+0x10>
 8009720:	3001      	adds	r0, #1
 8009722:	7803      	ldrb	r3, [r0, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1ef      	bne.n	8009708 <strstr+0x8>
 8009728:	4618      	mov	r0, r3
 800972a:	e7ec      	b.n	8009706 <strstr+0x6>

0800972c <_localeconv_r>:
 800972c:	4800      	ldr	r0, [pc, #0]	; (8009730 <_localeconv_r+0x4>)
 800972e:	4770      	bx	lr
 8009730:	20000158 	.word	0x20000158

08009734 <_close_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d06      	ldr	r5, [pc, #24]	; (8009750 <_close_r+0x1c>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	602b      	str	r3, [r5, #0]
 8009740:	f7f8 fadb 	bl	8001cfa <_close>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d102      	bne.n	800974e <_close_r+0x1a>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	b103      	cbz	r3, 800974e <_close_r+0x1a>
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	20000e2c 	.word	0x20000e2c

08009754 <_lseek_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_lseek_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f8 faf0 	bl	8001d48 <_lseek>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_lseek_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_lseek_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20000e2c 	.word	0x20000e2c

08009778 <_read_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d07      	ldr	r5, [pc, #28]	; (8009798 <_read_r+0x20>)
 800977c:	4604      	mov	r4, r0
 800977e:	4608      	mov	r0, r1
 8009780:	4611      	mov	r1, r2
 8009782:	2200      	movs	r2, #0
 8009784:	602a      	str	r2, [r5, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	f7f8 fa7e 	bl	8001c88 <_read>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_read_r+0x1e>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_read_r+0x1e>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	20000e2c 	.word	0x20000e2c

0800979c <_write_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_write_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f8 fa89 	bl	8001cc2 <_write>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_write_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_write_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000e2c 	.word	0x20000e2c

080097c0 <__errno>:
 80097c0:	4b01      	ldr	r3, [pc, #4]	; (80097c8 <__errno+0x8>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000064 	.word	0x20000064

080097cc <__libc_init_array>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4d0d      	ldr	r5, [pc, #52]	; (8009804 <__libc_init_array+0x38>)
 80097d0:	4c0d      	ldr	r4, [pc, #52]	; (8009808 <__libc_init_array+0x3c>)
 80097d2:	1b64      	subs	r4, r4, r5
 80097d4:	10a4      	asrs	r4, r4, #2
 80097d6:	2600      	movs	r6, #0
 80097d8:	42a6      	cmp	r6, r4
 80097da:	d109      	bne.n	80097f0 <__libc_init_array+0x24>
 80097dc:	4d0b      	ldr	r5, [pc, #44]	; (800980c <__libc_init_array+0x40>)
 80097de:	4c0c      	ldr	r4, [pc, #48]	; (8009810 <__libc_init_array+0x44>)
 80097e0:	f004 fa2a 	bl	800dc38 <_init>
 80097e4:	1b64      	subs	r4, r4, r5
 80097e6:	10a4      	asrs	r4, r4, #2
 80097e8:	2600      	movs	r6, #0
 80097ea:	42a6      	cmp	r6, r4
 80097ec:	d105      	bne.n	80097fa <__libc_init_array+0x2e>
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f4:	4798      	blx	r3
 80097f6:	3601      	adds	r6, #1
 80097f8:	e7ee      	b.n	80097d8 <__libc_init_array+0xc>
 80097fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80097fe:	4798      	blx	r3
 8009800:	3601      	adds	r6, #1
 8009802:	e7f2      	b.n	80097ea <__libc_init_array+0x1e>
 8009804:	0800e9a8 	.word	0x0800e9a8
 8009808:	0800e9a8 	.word	0x0800e9a8
 800980c:	0800e9a8 	.word	0x0800e9a8
 8009810:	0800e9ac 	.word	0x0800e9ac

08009814 <__retarget_lock_init_recursive>:
 8009814:	4770      	bx	lr

08009816 <__retarget_lock_acquire_recursive>:
 8009816:	4770      	bx	lr

08009818 <__retarget_lock_release_recursive>:
 8009818:	4770      	bx	lr

0800981a <memcpy>:
 800981a:	440a      	add	r2, r1
 800981c:	4291      	cmp	r1, r2
 800981e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009822:	d100      	bne.n	8009826 <memcpy+0xc>
 8009824:	4770      	bx	lr
 8009826:	b510      	push	{r4, lr}
 8009828:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009830:	4291      	cmp	r1, r2
 8009832:	d1f9      	bne.n	8009828 <memcpy+0xe>
 8009834:	bd10      	pop	{r4, pc}
	...

08009838 <nanf>:
 8009838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009840 <nanf+0x8>
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	7fc00000 	.word	0x7fc00000

08009844 <__assert_func>:
 8009844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009846:	4614      	mov	r4, r2
 8009848:	461a      	mov	r2, r3
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <__assert_func+0x2c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4605      	mov	r5, r0
 8009850:	68d8      	ldr	r0, [r3, #12]
 8009852:	b14c      	cbz	r4, 8009868 <__assert_func+0x24>
 8009854:	4b07      	ldr	r3, [pc, #28]	; (8009874 <__assert_func+0x30>)
 8009856:	9100      	str	r1, [sp, #0]
 8009858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800985c:	4906      	ldr	r1, [pc, #24]	; (8009878 <__assert_func+0x34>)
 800985e:	462b      	mov	r3, r5
 8009860:	f002 fd92 	bl	800c388 <fiprintf>
 8009864:	f002 fea0 	bl	800c5a8 <abort>
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <__assert_func+0x38>)
 800986a:	461c      	mov	r4, r3
 800986c:	e7f3      	b.n	8009856 <__assert_func+0x12>
 800986e:	bf00      	nop
 8009870:	20000064 	.word	0x20000064
 8009874:	0800e68f 	.word	0x0800e68f
 8009878:	0800e69c 	.word	0x0800e69c
 800987c:	0800e6ca 	.word	0x0800e6ca

08009880 <quorem>:
 8009880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	6903      	ldr	r3, [r0, #16]
 8009886:	690c      	ldr	r4, [r1, #16]
 8009888:	42a3      	cmp	r3, r4
 800988a:	4607      	mov	r7, r0
 800988c:	db7e      	blt.n	800998c <quorem+0x10c>
 800988e:	3c01      	subs	r4, #1
 8009890:	f101 0814 	add.w	r8, r1, #20
 8009894:	f100 0514 	add.w	r5, r0, #20
 8009898:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098a6:	3301      	adds	r3, #1
 80098a8:	429a      	cmp	r2, r3
 80098aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80098b6:	d331      	bcc.n	800991c <quorem+0x9c>
 80098b8:	f04f 0e00 	mov.w	lr, #0
 80098bc:	4640      	mov	r0, r8
 80098be:	46ac      	mov	ip, r5
 80098c0:	46f2      	mov	sl, lr
 80098c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80098c6:	b293      	uxth	r3, r2
 80098c8:	fb06 e303 	mla	r3, r6, r3, lr
 80098cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098d0:	0c1a      	lsrs	r2, r3, #16
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ebaa 0303 	sub.w	r3, sl, r3
 80098d8:	f8dc a000 	ldr.w	sl, [ip]
 80098dc:	fa13 f38a 	uxtah	r3, r3, sl
 80098e0:	fb06 220e 	mla	r2, r6, lr, r2
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	9b00      	ldr	r3, [sp, #0]
 80098e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80098ec:	b292      	uxth	r2, r2
 80098ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80098f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80098fa:	4581      	cmp	r9, r0
 80098fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009900:	f84c 3b04 	str.w	r3, [ip], #4
 8009904:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009908:	d2db      	bcs.n	80098c2 <quorem+0x42>
 800990a:	f855 300b 	ldr.w	r3, [r5, fp]
 800990e:	b92b      	cbnz	r3, 800991c <quorem+0x9c>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	3b04      	subs	r3, #4
 8009914:	429d      	cmp	r5, r3
 8009916:	461a      	mov	r2, r3
 8009918:	d32c      	bcc.n	8009974 <quorem+0xf4>
 800991a:	613c      	str	r4, [r7, #16]
 800991c:	4638      	mov	r0, r7
 800991e:	f001 f9ef 	bl	800ad00 <__mcmp>
 8009922:	2800      	cmp	r0, #0
 8009924:	db22      	blt.n	800996c <quorem+0xec>
 8009926:	3601      	adds	r6, #1
 8009928:	4629      	mov	r1, r5
 800992a:	2000      	movs	r0, #0
 800992c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009930:	f8d1 c000 	ldr.w	ip, [r1]
 8009934:	b293      	uxth	r3, r2
 8009936:	1ac3      	subs	r3, r0, r3
 8009938:	0c12      	lsrs	r2, r2, #16
 800993a:	fa13 f38c 	uxtah	r3, r3, ip
 800993e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800994c:	45c1      	cmp	r9, r8
 800994e:	f841 3b04 	str.w	r3, [r1], #4
 8009952:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009956:	d2e9      	bcs.n	800992c <quorem+0xac>
 8009958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800995c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009960:	b922      	cbnz	r2, 800996c <quorem+0xec>
 8009962:	3b04      	subs	r3, #4
 8009964:	429d      	cmp	r5, r3
 8009966:	461a      	mov	r2, r3
 8009968:	d30a      	bcc.n	8009980 <quorem+0x100>
 800996a:	613c      	str	r4, [r7, #16]
 800996c:	4630      	mov	r0, r6
 800996e:	b003      	add	sp, #12
 8009970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	3b04      	subs	r3, #4
 8009978:	2a00      	cmp	r2, #0
 800997a:	d1ce      	bne.n	800991a <quorem+0x9a>
 800997c:	3c01      	subs	r4, #1
 800997e:	e7c9      	b.n	8009914 <quorem+0x94>
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	3b04      	subs	r3, #4
 8009984:	2a00      	cmp	r2, #0
 8009986:	d1f0      	bne.n	800996a <quorem+0xea>
 8009988:	3c01      	subs	r4, #1
 800998a:	e7eb      	b.n	8009964 <quorem+0xe4>
 800998c:	2000      	movs	r0, #0
 800998e:	e7ee      	b.n	800996e <quorem+0xee>

08009990 <_dtoa_r>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	ed2d 8b04 	vpush	{d8-d9}
 8009998:	69c5      	ldr	r5, [r0, #28]
 800999a:	b093      	sub	sp, #76	; 0x4c
 800999c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099a0:	ec57 6b10 	vmov	r6, r7, d0
 80099a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099a8:	9107      	str	r1, [sp, #28]
 80099aa:	4604      	mov	r4, r0
 80099ac:	920a      	str	r2, [sp, #40]	; 0x28
 80099ae:	930d      	str	r3, [sp, #52]	; 0x34
 80099b0:	b975      	cbnz	r5, 80099d0 <_dtoa_r+0x40>
 80099b2:	2010      	movs	r0, #16
 80099b4:	f000 fe2a 	bl	800a60c <malloc>
 80099b8:	4602      	mov	r2, r0
 80099ba:	61e0      	str	r0, [r4, #28]
 80099bc:	b920      	cbnz	r0, 80099c8 <_dtoa_r+0x38>
 80099be:	4bae      	ldr	r3, [pc, #696]	; (8009c78 <_dtoa_r+0x2e8>)
 80099c0:	21ef      	movs	r1, #239	; 0xef
 80099c2:	48ae      	ldr	r0, [pc, #696]	; (8009c7c <_dtoa_r+0x2ec>)
 80099c4:	f7ff ff3e 	bl	8009844 <__assert_func>
 80099c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099cc:	6005      	str	r5, [r0, #0]
 80099ce:	60c5      	str	r5, [r0, #12]
 80099d0:	69e3      	ldr	r3, [r4, #28]
 80099d2:	6819      	ldr	r1, [r3, #0]
 80099d4:	b151      	cbz	r1, 80099ec <_dtoa_r+0x5c>
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	604a      	str	r2, [r1, #4]
 80099da:	2301      	movs	r3, #1
 80099dc:	4093      	lsls	r3, r2
 80099de:	608b      	str	r3, [r1, #8]
 80099e0:	4620      	mov	r0, r4
 80099e2:	f000 ff07 	bl	800a7f4 <_Bfree>
 80099e6:	69e3      	ldr	r3, [r4, #28]
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	1e3b      	subs	r3, r7, #0
 80099ee:	bfbb      	ittet	lt
 80099f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099f4:	9303      	strlt	r3, [sp, #12]
 80099f6:	2300      	movge	r3, #0
 80099f8:	2201      	movlt	r2, #1
 80099fa:	bfac      	ite	ge
 80099fc:	f8c8 3000 	strge.w	r3, [r8]
 8009a00:	f8c8 2000 	strlt.w	r2, [r8]
 8009a04:	4b9e      	ldr	r3, [pc, #632]	; (8009c80 <_dtoa_r+0x2f0>)
 8009a06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a0a:	ea33 0308 	bics.w	r3, r3, r8
 8009a0e:	d11b      	bne.n	8009a48 <_dtoa_r+0xb8>
 8009a10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a12:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a1c:	4333      	orrs	r3, r6
 8009a1e:	f000 8593 	beq.w	800a548 <_dtoa_r+0xbb8>
 8009a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a24:	b963      	cbnz	r3, 8009a40 <_dtoa_r+0xb0>
 8009a26:	4b97      	ldr	r3, [pc, #604]	; (8009c84 <_dtoa_r+0x2f4>)
 8009a28:	e027      	b.n	8009a7a <_dtoa_r+0xea>
 8009a2a:	4b97      	ldr	r3, [pc, #604]	; (8009c88 <_dtoa_r+0x2f8>)
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	3308      	adds	r3, #8
 8009a30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	9800      	ldr	r0, [sp, #0]
 8009a36:	b013      	add	sp, #76	; 0x4c
 8009a38:	ecbd 8b04 	vpop	{d8-d9}
 8009a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a40:	4b90      	ldr	r3, [pc, #576]	; (8009c84 <_dtoa_r+0x2f4>)
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	3303      	adds	r3, #3
 8009a46:	e7f3      	b.n	8009a30 <_dtoa_r+0xa0>
 8009a48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	ec51 0b17 	vmov	r0, r1, d7
 8009a52:	eeb0 8a47 	vmov.f32	s16, s14
 8009a56:	eef0 8a67 	vmov.f32	s17, s15
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f7f7 f83c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a60:	4681      	mov	r9, r0
 8009a62:	b160      	cbz	r0, 8009a7e <_dtoa_r+0xee>
 8009a64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a66:	2301      	movs	r3, #1
 8009a68:	6013      	str	r3, [r2, #0]
 8009a6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8568 	beq.w	800a542 <_dtoa_r+0xbb2>
 8009a72:	4b86      	ldr	r3, [pc, #536]	; (8009c8c <_dtoa_r+0x2fc>)
 8009a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	e7da      	b.n	8009a34 <_dtoa_r+0xa4>
 8009a7e:	aa10      	add	r2, sp, #64	; 0x40
 8009a80:	a911      	add	r1, sp, #68	; 0x44
 8009a82:	4620      	mov	r0, r4
 8009a84:	eeb0 0a48 	vmov.f32	s0, s16
 8009a88:	eef0 0a68 	vmov.f32	s1, s17
 8009a8c:	f001 fa4e 	bl	800af2c <__d2b>
 8009a90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a94:	4682      	mov	sl, r0
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	d07f      	beq.n	8009b9a <_dtoa_r+0x20a>
 8009a9a:	ee18 3a90 	vmov	r3, s17
 8009a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009aa6:	ec51 0b18 	vmov	r0, r1, d8
 8009aaa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ab2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4b75      	ldr	r3, [pc, #468]	; (8009c90 <_dtoa_r+0x300>)
 8009abc:	f7f6 fbec 	bl	8000298 <__aeabi_dsub>
 8009ac0:	a367      	add	r3, pc, #412	; (adr r3, 8009c60 <_dtoa_r+0x2d0>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fd9f 	bl	8000608 <__aeabi_dmul>
 8009aca:	a367      	add	r3, pc, #412	; (adr r3, 8009c68 <_dtoa_r+0x2d8>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fbe4 	bl	800029c <__adddf3>
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	460f      	mov	r7, r1
 8009ada:	f7f6 fd2b 	bl	8000534 <__aeabi_i2d>
 8009ade:	a364      	add	r3, pc, #400	; (adr r3, 8009c70 <_dtoa_r+0x2e0>)
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f7f6 fd90 	bl	8000608 <__aeabi_dmul>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f6 fbd4 	bl	800029c <__adddf3>
 8009af4:	4606      	mov	r6, r0
 8009af6:	460f      	mov	r7, r1
 8009af8:	f7f7 f836 	bl	8000b68 <__aeabi_d2iz>
 8009afc:	2200      	movs	r2, #0
 8009afe:	4683      	mov	fp, r0
 8009b00:	2300      	movs	r3, #0
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fff1 	bl	8000aec <__aeabi_dcmplt>
 8009b0a:	b148      	cbz	r0, 8009b20 <_dtoa_r+0x190>
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f7f6 fd11 	bl	8000534 <__aeabi_i2d>
 8009b12:	4632      	mov	r2, r6
 8009b14:	463b      	mov	r3, r7
 8009b16:	f7f6 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b1a:	b908      	cbnz	r0, 8009b20 <_dtoa_r+0x190>
 8009b1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b20:	f1bb 0f16 	cmp.w	fp, #22
 8009b24:	d857      	bhi.n	8009bd6 <_dtoa_r+0x246>
 8009b26:	4b5b      	ldr	r3, [pc, #364]	; (8009c94 <_dtoa_r+0x304>)
 8009b28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	ec51 0b18 	vmov	r0, r1, d8
 8009b34:	f7f6 ffda 	bl	8000aec <__aeabi_dcmplt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d04e      	beq.n	8009bda <_dtoa_r+0x24a>
 8009b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b40:	2300      	movs	r3, #0
 8009b42:	930c      	str	r3, [sp, #48]	; 0x30
 8009b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b46:	1b5b      	subs	r3, r3, r5
 8009b48:	1e5a      	subs	r2, r3, #1
 8009b4a:	bf45      	ittet	mi
 8009b4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b50:	9305      	strmi	r3, [sp, #20]
 8009b52:	2300      	movpl	r3, #0
 8009b54:	2300      	movmi	r3, #0
 8009b56:	9206      	str	r2, [sp, #24]
 8009b58:	bf54      	ite	pl
 8009b5a:	9305      	strpl	r3, [sp, #20]
 8009b5c:	9306      	strmi	r3, [sp, #24]
 8009b5e:	f1bb 0f00 	cmp.w	fp, #0
 8009b62:	db3c      	blt.n	8009bde <_dtoa_r+0x24e>
 8009b64:	9b06      	ldr	r3, [sp, #24]
 8009b66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009b6a:	445b      	add	r3, fp
 8009b6c:	9306      	str	r3, [sp, #24]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	9308      	str	r3, [sp, #32]
 8009b72:	9b07      	ldr	r3, [sp, #28]
 8009b74:	2b09      	cmp	r3, #9
 8009b76:	d868      	bhi.n	8009c4a <_dtoa_r+0x2ba>
 8009b78:	2b05      	cmp	r3, #5
 8009b7a:	bfc4      	itt	gt
 8009b7c:	3b04      	subgt	r3, #4
 8009b7e:	9307      	strgt	r3, [sp, #28]
 8009b80:	9b07      	ldr	r3, [sp, #28]
 8009b82:	f1a3 0302 	sub.w	r3, r3, #2
 8009b86:	bfcc      	ite	gt
 8009b88:	2500      	movgt	r5, #0
 8009b8a:	2501      	movle	r5, #1
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	f200 8085 	bhi.w	8009c9c <_dtoa_r+0x30c>
 8009b92:	e8df f003 	tbb	[pc, r3]
 8009b96:	3b2e      	.short	0x3b2e
 8009b98:	5839      	.short	0x5839
 8009b9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009b9e:	441d      	add	r5, r3
 8009ba0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	bfc1      	itttt	gt
 8009ba8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bac:	fa08 f803 	lslgt.w	r8, r8, r3
 8009bb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009bb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009bb8:	bfd6      	itet	le
 8009bba:	f1c3 0320 	rsble	r3, r3, #32
 8009bbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009bc2:	fa06 f003 	lslle.w	r0, r6, r3
 8009bc6:	f7f6 fca5 	bl	8000514 <__aeabi_ui2d>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009bd0:	3d01      	subs	r5, #1
 8009bd2:	920e      	str	r2, [sp, #56]	; 0x38
 8009bd4:	e76f      	b.n	8009ab6 <_dtoa_r+0x126>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e7b3      	b.n	8009b42 <_dtoa_r+0x1b2>
 8009bda:	900c      	str	r0, [sp, #48]	; 0x30
 8009bdc:	e7b2      	b.n	8009b44 <_dtoa_r+0x1b4>
 8009bde:	9b05      	ldr	r3, [sp, #20]
 8009be0:	eba3 030b 	sub.w	r3, r3, fp
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f1cb 0300 	rsb	r3, fp, #0
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	2300      	movs	r3, #0
 8009bee:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bf0:	e7bf      	b.n	8009b72 <_dtoa_r+0x1e2>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	dc52      	bgt.n	8009ca2 <_dtoa_r+0x312>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	9304      	str	r3, [sp, #16]
 8009c02:	461a      	mov	r2, r3
 8009c04:	920a      	str	r2, [sp, #40]	; 0x28
 8009c06:	e00b      	b.n	8009c20 <_dtoa_r+0x290>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7f3      	b.n	8009bf4 <_dtoa_r+0x264>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	445b      	add	r3, fp
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	9304      	str	r3, [sp, #16]
 8009c1c:	bfb8      	it	lt
 8009c1e:	2301      	movlt	r3, #1
 8009c20:	69e0      	ldr	r0, [r4, #28]
 8009c22:	2100      	movs	r1, #0
 8009c24:	2204      	movs	r2, #4
 8009c26:	f102 0614 	add.w	r6, r2, #20
 8009c2a:	429e      	cmp	r6, r3
 8009c2c:	d93d      	bls.n	8009caa <_dtoa_r+0x31a>
 8009c2e:	6041      	str	r1, [r0, #4]
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fd9f 	bl	800a774 <_Balloc>
 8009c36:	9000      	str	r0, [sp, #0]
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d139      	bne.n	8009cb0 <_dtoa_r+0x320>
 8009c3c:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <_dtoa_r+0x308>)
 8009c3e:	4602      	mov	r2, r0
 8009c40:	f240 11af 	movw	r1, #431	; 0x1af
 8009c44:	e6bd      	b.n	80099c2 <_dtoa_r+0x32>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7e1      	b.n	8009c0e <_dtoa_r+0x27e>
 8009c4a:	2501      	movs	r5, #1
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	9509      	str	r5, [sp, #36]	; 0x24
 8009c52:	f04f 33ff 	mov.w	r3, #4294967295
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2312      	movs	r3, #18
 8009c5e:	e7d1      	b.n	8009c04 <_dtoa_r+0x274>
 8009c60:	636f4361 	.word	0x636f4361
 8009c64:	3fd287a7 	.word	0x3fd287a7
 8009c68:	8b60c8b3 	.word	0x8b60c8b3
 8009c6c:	3fc68a28 	.word	0x3fc68a28
 8009c70:	509f79fb 	.word	0x509f79fb
 8009c74:	3fd34413 	.word	0x3fd34413
 8009c78:	0800e61e 	.word	0x0800e61e
 8009c7c:	0800e6d8 	.word	0x0800e6d8
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	0800e6d4 	.word	0x0800e6d4
 8009c88:	0800e6cb 	.word	0x0800e6cb
 8009c8c:	0800e5f6 	.word	0x0800e5f6
 8009c90:	3ff80000 	.word	0x3ff80000
 8009c94:	0800e7c8 	.word	0x0800e7c8
 8009c98:	0800e730 	.word	0x0800e730
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca0:	e7d7      	b.n	8009c52 <_dtoa_r+0x2c2>
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	9301      	str	r3, [sp, #4]
 8009ca6:	9304      	str	r3, [sp, #16]
 8009ca8:	e7ba      	b.n	8009c20 <_dtoa_r+0x290>
 8009caa:	3101      	adds	r1, #1
 8009cac:	0052      	lsls	r2, r2, #1
 8009cae:	e7ba      	b.n	8009c26 <_dtoa_r+0x296>
 8009cb0:	69e3      	ldr	r3, [r4, #28]
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	2b0e      	cmp	r3, #14
 8009cba:	f200 80a8 	bhi.w	8009e0e <_dtoa_r+0x47e>
 8009cbe:	2d00      	cmp	r5, #0
 8009cc0:	f000 80a5 	beq.w	8009e0e <_dtoa_r+0x47e>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	dd38      	ble.n	8009d3c <_dtoa_r+0x3ac>
 8009cca:	4bc0      	ldr	r3, [pc, #768]	; (8009fcc <_dtoa_r+0x63c>)
 8009ccc:	f00b 020f 	and.w	r2, fp, #15
 8009cd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009cd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009cdc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009ce0:	d019      	beq.n	8009d16 <_dtoa_r+0x386>
 8009ce2:	4bbb      	ldr	r3, [pc, #748]	; (8009fd0 <_dtoa_r+0x640>)
 8009ce4:	ec51 0b18 	vmov	r0, r1, d8
 8009ce8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cec:	f7f6 fdb6 	bl	800085c <__aeabi_ddiv>
 8009cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf4:	f008 080f 	and.w	r8, r8, #15
 8009cf8:	2503      	movs	r5, #3
 8009cfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009fd0 <_dtoa_r+0x640>
 8009cfe:	f1b8 0f00 	cmp.w	r8, #0
 8009d02:	d10a      	bne.n	8009d1a <_dtoa_r+0x38a>
 8009d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d08:	4632      	mov	r2, r6
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	f7f6 fda6 	bl	800085c <__aeabi_ddiv>
 8009d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d14:	e02b      	b.n	8009d6e <_dtoa_r+0x3de>
 8009d16:	2502      	movs	r5, #2
 8009d18:	e7ef      	b.n	8009cfa <_dtoa_r+0x36a>
 8009d1a:	f018 0f01 	tst.w	r8, #1
 8009d1e:	d008      	beq.n	8009d32 <_dtoa_r+0x3a2>
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	460f      	mov	r7, r1
 8009d32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d36:	f109 0908 	add.w	r9, r9, #8
 8009d3a:	e7e0      	b.n	8009cfe <_dtoa_r+0x36e>
 8009d3c:	f000 809f 	beq.w	8009e7e <_dtoa_r+0x4ee>
 8009d40:	f1cb 0600 	rsb	r6, fp, #0
 8009d44:	4ba1      	ldr	r3, [pc, #644]	; (8009fcc <_dtoa_r+0x63c>)
 8009d46:	4fa2      	ldr	r7, [pc, #648]	; (8009fd0 <_dtoa_r+0x640>)
 8009d48:	f006 020f 	and.w	r2, r6, #15
 8009d4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d54:	ec51 0b18 	vmov	r0, r1, d8
 8009d58:	f7f6 fc56 	bl	8000608 <__aeabi_dmul>
 8009d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d60:	1136      	asrs	r6, r6, #4
 8009d62:	2300      	movs	r3, #0
 8009d64:	2502      	movs	r5, #2
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d17e      	bne.n	8009e68 <_dtoa_r+0x4d8>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1d0      	bne.n	8009d10 <_dtoa_r+0x380>
 8009d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8084 	beq.w	8009e82 <_dtoa_r+0x4f2>
 8009d7a:	4b96      	ldr	r3, [pc, #600]	; (8009fd4 <_dtoa_r+0x644>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4640      	mov	r0, r8
 8009d80:	4649      	mov	r1, r9
 8009d82:	f7f6 feb3 	bl	8000aec <__aeabi_dcmplt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d07b      	beq.n	8009e82 <_dtoa_r+0x4f2>
 8009d8a:	9b04      	ldr	r3, [sp, #16]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d078      	beq.n	8009e82 <_dtoa_r+0x4f2>
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd39      	ble.n	8009e0a <_dtoa_r+0x47a>
 8009d96:	4b90      	ldr	r3, [pc, #576]	; (8009fd8 <_dtoa_r+0x648>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	f7f6 fc33 	bl	8000608 <__aeabi_dmul>
 8009da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da6:	9e01      	ldr	r6, [sp, #4]
 8009da8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009dac:	3501      	adds	r5, #1
 8009dae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7f6 fbbe 	bl	8000534 <__aeabi_i2d>
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	f7f6 fc24 	bl	8000608 <__aeabi_dmul>
 8009dc0:	4b86      	ldr	r3, [pc, #536]	; (8009fdc <_dtoa_r+0x64c>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f7f6 fa6a 	bl	800029c <__adddf3>
 8009dc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd0:	9303      	str	r3, [sp, #12]
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d158      	bne.n	8009e88 <_dtoa_r+0x4f8>
 8009dd6:	4b82      	ldr	r3, [pc, #520]	; (8009fe0 <_dtoa_r+0x650>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 fa5b 	bl	8000298 <__aeabi_dsub>
 8009de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de6:	4680      	mov	r8, r0
 8009de8:	4689      	mov	r9, r1
 8009dea:	f7f6 fe9d 	bl	8000b28 <__aeabi_dcmpgt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f040 8296 	bne.w	800a320 <_dtoa_r+0x990>
 8009df4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 fe74 	bl	8000aec <__aeabi_dcmplt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f040 8289 	bne.w	800a31c <_dtoa_r+0x98c>
 8009e0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f2c0 814e 	blt.w	800a0b2 <_dtoa_r+0x722>
 8009e16:	f1bb 0f0e 	cmp.w	fp, #14
 8009e1a:	f300 814a 	bgt.w	800a0b2 <_dtoa_r+0x722>
 8009e1e:	4b6b      	ldr	r3, [pc, #428]	; (8009fcc <_dtoa_r+0x63c>)
 8009e20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f280 80dc 	bge.w	8009fe8 <_dtoa_r+0x658>
 8009e30:	9b04      	ldr	r3, [sp, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f300 80d8 	bgt.w	8009fe8 <_dtoa_r+0x658>
 8009e38:	f040 826f 	bne.w	800a31a <_dtoa_r+0x98a>
 8009e3c:	4b68      	ldr	r3, [pc, #416]	; (8009fe0 <_dtoa_r+0x650>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4640      	mov	r0, r8
 8009e42:	4649      	mov	r1, r9
 8009e44:	f7f6 fbe0 	bl	8000608 <__aeabi_dmul>
 8009e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4c:	f7f6 fe62 	bl	8000b14 <__aeabi_dcmpge>
 8009e50:	9e04      	ldr	r6, [sp, #16]
 8009e52:	4637      	mov	r7, r6
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f040 8245 	bne.w	800a2e4 <_dtoa_r+0x954>
 8009e5a:	9d00      	ldr	r5, [sp, #0]
 8009e5c:	2331      	movs	r3, #49	; 0x31
 8009e5e:	f805 3b01 	strb.w	r3, [r5], #1
 8009e62:	f10b 0b01 	add.w	fp, fp, #1
 8009e66:	e241      	b.n	800a2ec <_dtoa_r+0x95c>
 8009e68:	07f2      	lsls	r2, r6, #31
 8009e6a:	d505      	bpl.n	8009e78 <_dtoa_r+0x4e8>
 8009e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e70:	f7f6 fbca 	bl	8000608 <__aeabi_dmul>
 8009e74:	3501      	adds	r5, #1
 8009e76:	2301      	movs	r3, #1
 8009e78:	1076      	asrs	r6, r6, #1
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	e773      	b.n	8009d66 <_dtoa_r+0x3d6>
 8009e7e:	2502      	movs	r5, #2
 8009e80:	e775      	b.n	8009d6e <_dtoa_r+0x3de>
 8009e82:	9e04      	ldr	r6, [sp, #16]
 8009e84:	465f      	mov	r7, fp
 8009e86:	e792      	b.n	8009dae <_dtoa_r+0x41e>
 8009e88:	9900      	ldr	r1, [sp, #0]
 8009e8a:	4b50      	ldr	r3, [pc, #320]	; (8009fcc <_dtoa_r+0x63c>)
 8009e8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e90:	4431      	add	r1, r6
 8009e92:	9102      	str	r1, [sp, #8]
 8009e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e96:	eeb0 9a47 	vmov.f32	s18, s14
 8009e9a:	eef0 9a67 	vmov.f32	s19, s15
 8009e9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ea6:	2900      	cmp	r1, #0
 8009ea8:	d044      	beq.n	8009f34 <_dtoa_r+0x5a4>
 8009eaa:	494e      	ldr	r1, [pc, #312]	; (8009fe4 <_dtoa_r+0x654>)
 8009eac:	2000      	movs	r0, #0
 8009eae:	f7f6 fcd5 	bl	800085c <__aeabi_ddiv>
 8009eb2:	ec53 2b19 	vmov	r2, r3, d9
 8009eb6:	f7f6 f9ef 	bl	8000298 <__aeabi_dsub>
 8009eba:	9d00      	ldr	r5, [sp, #0]
 8009ebc:	ec41 0b19 	vmov	d9, r0, r1
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	f7f6 fe50 	bl	8000b68 <__aeabi_d2iz>
 8009ec8:	4606      	mov	r6, r0
 8009eca:	f7f6 fb33 	bl	8000534 <__aeabi_i2d>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	f7f6 f9df 	bl	8000298 <__aeabi_dsub>
 8009eda:	3630      	adds	r6, #48	; 0x30
 8009edc:	f805 6b01 	strb.w	r6, [r5], #1
 8009ee0:	ec53 2b19 	vmov	r2, r3, d9
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	4689      	mov	r9, r1
 8009ee8:	f7f6 fe00 	bl	8000aec <__aeabi_dcmplt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d164      	bne.n	8009fba <_dtoa_r+0x62a>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	4937      	ldr	r1, [pc, #220]	; (8009fd4 <_dtoa_r+0x644>)
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	f7f6 f9ce 	bl	8000298 <__aeabi_dsub>
 8009efc:	ec53 2b19 	vmov	r2, r3, d9
 8009f00:	f7f6 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	f040 80b6 	bne.w	800a076 <_dtoa_r+0x6e6>
 8009f0a:	9b02      	ldr	r3, [sp, #8]
 8009f0c:	429d      	cmp	r5, r3
 8009f0e:	f43f af7c 	beq.w	8009e0a <_dtoa_r+0x47a>
 8009f12:	4b31      	ldr	r3, [pc, #196]	; (8009fd8 <_dtoa_r+0x648>)
 8009f14:	ec51 0b19 	vmov	r0, r1, d9
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f7f6 fb75 	bl	8000608 <__aeabi_dmul>
 8009f1e:	4b2e      	ldr	r3, [pc, #184]	; (8009fd8 <_dtoa_r+0x648>)
 8009f20:	ec41 0b19 	vmov	d9, r0, r1
 8009f24:	2200      	movs	r2, #0
 8009f26:	4640      	mov	r0, r8
 8009f28:	4649      	mov	r1, r9
 8009f2a:	f7f6 fb6d 	bl	8000608 <__aeabi_dmul>
 8009f2e:	4680      	mov	r8, r0
 8009f30:	4689      	mov	r9, r1
 8009f32:	e7c5      	b.n	8009ec0 <_dtoa_r+0x530>
 8009f34:	ec51 0b17 	vmov	r0, r1, d7
 8009f38:	f7f6 fb66 	bl	8000608 <__aeabi_dmul>
 8009f3c:	9b02      	ldr	r3, [sp, #8]
 8009f3e:	9d00      	ldr	r5, [sp, #0]
 8009f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f42:	ec41 0b19 	vmov	d9, r0, r1
 8009f46:	4649      	mov	r1, r9
 8009f48:	4640      	mov	r0, r8
 8009f4a:	f7f6 fe0d 	bl	8000b68 <__aeabi_d2iz>
 8009f4e:	4606      	mov	r6, r0
 8009f50:	f7f6 faf0 	bl	8000534 <__aeabi_i2d>
 8009f54:	3630      	adds	r6, #48	; 0x30
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	f7f6 f99b 	bl	8000298 <__aeabi_dsub>
 8009f62:	f805 6b01 	strb.w	r6, [r5], #1
 8009f66:	9b02      	ldr	r3, [sp, #8]
 8009f68:	429d      	cmp	r5, r3
 8009f6a:	4680      	mov	r8, r0
 8009f6c:	4689      	mov	r9, r1
 8009f6e:	f04f 0200 	mov.w	r2, #0
 8009f72:	d124      	bne.n	8009fbe <_dtoa_r+0x62e>
 8009f74:	4b1b      	ldr	r3, [pc, #108]	; (8009fe4 <_dtoa_r+0x654>)
 8009f76:	ec51 0b19 	vmov	r0, r1, d9
 8009f7a:	f7f6 f98f 	bl	800029c <__adddf3>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	460b      	mov	r3, r1
 8009f82:	4640      	mov	r0, r8
 8009f84:	4649      	mov	r1, r9
 8009f86:	f7f6 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d173      	bne.n	800a076 <_dtoa_r+0x6e6>
 8009f8e:	ec53 2b19 	vmov	r2, r3, d9
 8009f92:	4914      	ldr	r1, [pc, #80]	; (8009fe4 <_dtoa_r+0x654>)
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f6 f97f 	bl	8000298 <__aeabi_dsub>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	f7f6 fda3 	bl	8000aec <__aeabi_dcmplt>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	f43f af2f 	beq.w	8009e0a <_dtoa_r+0x47a>
 8009fac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fae:	1e6b      	subs	r3, r5, #1
 8009fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fb6:	2b30      	cmp	r3, #48	; 0x30
 8009fb8:	d0f8      	beq.n	8009fac <_dtoa_r+0x61c>
 8009fba:	46bb      	mov	fp, r7
 8009fbc:	e04a      	b.n	800a054 <_dtoa_r+0x6c4>
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <_dtoa_r+0x648>)
 8009fc0:	f7f6 fb22 	bl	8000608 <__aeabi_dmul>
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4689      	mov	r9, r1
 8009fc8:	e7bd      	b.n	8009f46 <_dtoa_r+0x5b6>
 8009fca:	bf00      	nop
 8009fcc:	0800e7c8 	.word	0x0800e7c8
 8009fd0:	0800e7a0 	.word	0x0800e7a0
 8009fd4:	3ff00000 	.word	0x3ff00000
 8009fd8:	40240000 	.word	0x40240000
 8009fdc:	401c0000 	.word	0x401c0000
 8009fe0:	40140000 	.word	0x40140000
 8009fe4:	3fe00000 	.word	0x3fe00000
 8009fe8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fec:	9d00      	ldr	r5, [sp, #0]
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	f7f6 fc31 	bl	800085c <__aeabi_ddiv>
 8009ffa:	f7f6 fdb5 	bl	8000b68 <__aeabi_d2iz>
 8009ffe:	9001      	str	r0, [sp, #4]
 800a000:	f7f6 fa98 	bl	8000534 <__aeabi_i2d>
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	f7f6 fafe 	bl	8000608 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 f940 	bl	8000298 <__aeabi_dsub>
 800a018:	9e01      	ldr	r6, [sp, #4]
 800a01a:	9f04      	ldr	r7, [sp, #16]
 800a01c:	3630      	adds	r6, #48	; 0x30
 800a01e:	f805 6b01 	strb.w	r6, [r5], #1
 800a022:	9e00      	ldr	r6, [sp, #0]
 800a024:	1bae      	subs	r6, r5, r6
 800a026:	42b7      	cmp	r7, r6
 800a028:	4602      	mov	r2, r0
 800a02a:	460b      	mov	r3, r1
 800a02c:	d134      	bne.n	800a098 <_dtoa_r+0x708>
 800a02e:	f7f6 f935 	bl	800029c <__adddf3>
 800a032:	4642      	mov	r2, r8
 800a034:	464b      	mov	r3, r9
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	f7f6 fd75 	bl	8000b28 <__aeabi_dcmpgt>
 800a03e:	b9c8      	cbnz	r0, 800a074 <_dtoa_r+0x6e4>
 800a040:	4642      	mov	r2, r8
 800a042:	464b      	mov	r3, r9
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04c:	b110      	cbz	r0, 800a054 <_dtoa_r+0x6c4>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	07db      	lsls	r3, r3, #31
 800a052:	d40f      	bmi.n	800a074 <_dtoa_r+0x6e4>
 800a054:	4651      	mov	r1, sl
 800a056:	4620      	mov	r0, r4
 800a058:	f000 fbcc 	bl	800a7f4 <_Bfree>
 800a05c:	2300      	movs	r3, #0
 800a05e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a060:	702b      	strb	r3, [r5, #0]
 800a062:	f10b 0301 	add.w	r3, fp, #1
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f43f ace2 	beq.w	8009a34 <_dtoa_r+0xa4>
 800a070:	601d      	str	r5, [r3, #0]
 800a072:	e4df      	b.n	8009a34 <_dtoa_r+0xa4>
 800a074:	465f      	mov	r7, fp
 800a076:	462b      	mov	r3, r5
 800a078:	461d      	mov	r5, r3
 800a07a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a07e:	2a39      	cmp	r2, #57	; 0x39
 800a080:	d106      	bne.n	800a090 <_dtoa_r+0x700>
 800a082:	9a00      	ldr	r2, [sp, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d1f7      	bne.n	800a078 <_dtoa_r+0x6e8>
 800a088:	9900      	ldr	r1, [sp, #0]
 800a08a:	2230      	movs	r2, #48	; 0x30
 800a08c:	3701      	adds	r7, #1
 800a08e:	700a      	strb	r2, [r1, #0]
 800a090:	781a      	ldrb	r2, [r3, #0]
 800a092:	3201      	adds	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	e790      	b.n	8009fba <_dtoa_r+0x62a>
 800a098:	4ba3      	ldr	r3, [pc, #652]	; (800a328 <_dtoa_r+0x998>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	f7f6 fab4 	bl	8000608 <__aeabi_dmul>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	f7f6 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d09e      	beq.n	8009fee <_dtoa_r+0x65e>
 800a0b0:	e7d0      	b.n	800a054 <_dtoa_r+0x6c4>
 800a0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	f000 80ca 	beq.w	800a24e <_dtoa_r+0x8be>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	2a01      	cmp	r2, #1
 800a0be:	f300 80ad 	bgt.w	800a21c <_dtoa_r+0x88c>
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	f000 80a5 	beq.w	800a214 <_dtoa_r+0x884>
 800a0ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0ce:	9e08      	ldr	r6, [sp, #32]
 800a0d0:	9d05      	ldr	r5, [sp, #20]
 800a0d2:	9a05      	ldr	r2, [sp, #20]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	9205      	str	r2, [sp, #20]
 800a0d8:	9a06      	ldr	r2, [sp, #24]
 800a0da:	2101      	movs	r1, #1
 800a0dc:	441a      	add	r2, r3
 800a0de:	4620      	mov	r0, r4
 800a0e0:	9206      	str	r2, [sp, #24]
 800a0e2:	f000 fc87 	bl	800a9f4 <__i2b>
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	b165      	cbz	r5, 800a104 <_dtoa_r+0x774>
 800a0ea:	9b06      	ldr	r3, [sp, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd09      	ble.n	800a104 <_dtoa_r+0x774>
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	9a05      	ldr	r2, [sp, #20]
 800a0f4:	bfa8      	it	ge
 800a0f6:	462b      	movge	r3, r5
 800a0f8:	1ad2      	subs	r2, r2, r3
 800a0fa:	9205      	str	r2, [sp, #20]
 800a0fc:	9a06      	ldr	r2, [sp, #24]
 800a0fe:	1aed      	subs	r5, r5, r3
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	b1f3      	cbz	r3, 800a146 <_dtoa_r+0x7b6>
 800a108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	f000 80a3 	beq.w	800a256 <_dtoa_r+0x8c6>
 800a110:	2e00      	cmp	r6, #0
 800a112:	dd10      	ble.n	800a136 <_dtoa_r+0x7a6>
 800a114:	4639      	mov	r1, r7
 800a116:	4632      	mov	r2, r6
 800a118:	4620      	mov	r0, r4
 800a11a:	f000 fd2b 	bl	800ab74 <__pow5mult>
 800a11e:	4652      	mov	r2, sl
 800a120:	4601      	mov	r1, r0
 800a122:	4607      	mov	r7, r0
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fc7b 	bl	800aa20 <__multiply>
 800a12a:	4651      	mov	r1, sl
 800a12c:	4680      	mov	r8, r0
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 fb60 	bl	800a7f4 <_Bfree>
 800a134:	46c2      	mov	sl, r8
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	1b9a      	subs	r2, r3, r6
 800a13a:	d004      	beq.n	800a146 <_dtoa_r+0x7b6>
 800a13c:	4651      	mov	r1, sl
 800a13e:	4620      	mov	r0, r4
 800a140:	f000 fd18 	bl	800ab74 <__pow5mult>
 800a144:	4682      	mov	sl, r0
 800a146:	2101      	movs	r1, #1
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fc53 	bl	800a9f4 <__i2b>
 800a14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a150:	2b00      	cmp	r3, #0
 800a152:	4606      	mov	r6, r0
 800a154:	f340 8081 	ble.w	800a25a <_dtoa_r+0x8ca>
 800a158:	461a      	mov	r2, r3
 800a15a:	4601      	mov	r1, r0
 800a15c:	4620      	mov	r0, r4
 800a15e:	f000 fd09 	bl	800ab74 <__pow5mult>
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	2b01      	cmp	r3, #1
 800a166:	4606      	mov	r6, r0
 800a168:	dd7a      	ble.n	800a260 <_dtoa_r+0x8d0>
 800a16a:	f04f 0800 	mov.w	r8, #0
 800a16e:	6933      	ldr	r3, [r6, #16]
 800a170:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a174:	6918      	ldr	r0, [r3, #16]
 800a176:	f000 fbef 	bl	800a958 <__hi0bits>
 800a17a:	f1c0 0020 	rsb	r0, r0, #32
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	4418      	add	r0, r3
 800a182:	f010 001f 	ands.w	r0, r0, #31
 800a186:	f000 8094 	beq.w	800a2b2 <_dtoa_r+0x922>
 800a18a:	f1c0 0320 	rsb	r3, r0, #32
 800a18e:	2b04      	cmp	r3, #4
 800a190:	f340 8085 	ble.w	800a29e <_dtoa_r+0x90e>
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	f1c0 001c 	rsb	r0, r0, #28
 800a19a:	4403      	add	r3, r0
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	4403      	add	r3, r0
 800a1a2:	4405      	add	r5, r0
 800a1a4:	9306      	str	r3, [sp, #24]
 800a1a6:	9b05      	ldr	r3, [sp, #20]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd05      	ble.n	800a1b8 <_dtoa_r+0x828>
 800a1ac:	4651      	mov	r1, sl
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fd39 	bl	800ac28 <__lshift>
 800a1b6:	4682      	mov	sl, r0
 800a1b8:	9b06      	ldr	r3, [sp, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dd05      	ble.n	800a1ca <_dtoa_r+0x83a>
 800a1be:	4631      	mov	r1, r6
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f000 fd30 	bl	800ac28 <__lshift>
 800a1c8:	4606      	mov	r6, r0
 800a1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d072      	beq.n	800a2b6 <_dtoa_r+0x926>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	f000 fd94 	bl	800ad00 <__mcmp>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	da6c      	bge.n	800a2b6 <_dtoa_r+0x926>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4651      	mov	r1, sl
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f000 fb28 	bl	800a838 <__multadd>
 800a1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1ee:	4682      	mov	sl, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 81b0 	beq.w	800a556 <_dtoa_r+0xbc6>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	220a      	movs	r2, #10
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 fb1b 	bl	800a838 <__multadd>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	4607      	mov	r7, r0
 800a208:	f300 8096 	bgt.w	800a338 <_dtoa_r+0x9a8>
 800a20c:	9b07      	ldr	r3, [sp, #28]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	dc59      	bgt.n	800a2c6 <_dtoa_r+0x936>
 800a212:	e091      	b.n	800a338 <_dtoa_r+0x9a8>
 800a214:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a21a:	e758      	b.n	800a0ce <_dtoa_r+0x73e>
 800a21c:	9b04      	ldr	r3, [sp, #16]
 800a21e:	1e5e      	subs	r6, r3, #1
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	42b3      	cmp	r3, r6
 800a224:	bfbf      	itttt	lt
 800a226:	9b08      	ldrlt	r3, [sp, #32]
 800a228:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a22a:	9608      	strlt	r6, [sp, #32]
 800a22c:	1af3      	sublt	r3, r6, r3
 800a22e:	bfb4      	ite	lt
 800a230:	18d2      	addlt	r2, r2, r3
 800a232:	1b9e      	subge	r6, r3, r6
 800a234:	9b04      	ldr	r3, [sp, #16]
 800a236:	bfbc      	itt	lt
 800a238:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a23a:	2600      	movlt	r6, #0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	bfb7      	itett	lt
 800a240:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a244:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a248:	1a9d      	sublt	r5, r3, r2
 800a24a:	2300      	movlt	r3, #0
 800a24c:	e741      	b.n	800a0d2 <_dtoa_r+0x742>
 800a24e:	9e08      	ldr	r6, [sp, #32]
 800a250:	9d05      	ldr	r5, [sp, #20]
 800a252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a254:	e748      	b.n	800a0e8 <_dtoa_r+0x758>
 800a256:	9a08      	ldr	r2, [sp, #32]
 800a258:	e770      	b.n	800a13c <_dtoa_r+0x7ac>
 800a25a:	9b07      	ldr	r3, [sp, #28]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	dc19      	bgt.n	800a294 <_dtoa_r+0x904>
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	b9bb      	cbnz	r3, 800a294 <_dtoa_r+0x904>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26a:	b99b      	cbnz	r3, 800a294 <_dtoa_r+0x904>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a272:	0d1b      	lsrs	r3, r3, #20
 800a274:	051b      	lsls	r3, r3, #20
 800a276:	b183      	cbz	r3, 800a29a <_dtoa_r+0x90a>
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	3301      	adds	r3, #1
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	3301      	adds	r3, #1
 800a282:	9306      	str	r3, [sp, #24]
 800a284:	f04f 0801 	mov.w	r8, #1
 800a288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f47f af6f 	bne.w	800a16e <_dtoa_r+0x7de>
 800a290:	2001      	movs	r0, #1
 800a292:	e774      	b.n	800a17e <_dtoa_r+0x7ee>
 800a294:	f04f 0800 	mov.w	r8, #0
 800a298:	e7f6      	b.n	800a288 <_dtoa_r+0x8f8>
 800a29a:	4698      	mov	r8, r3
 800a29c:	e7f4      	b.n	800a288 <_dtoa_r+0x8f8>
 800a29e:	d082      	beq.n	800a1a6 <_dtoa_r+0x816>
 800a2a0:	9a05      	ldr	r2, [sp, #20]
 800a2a2:	331c      	adds	r3, #28
 800a2a4:	441a      	add	r2, r3
 800a2a6:	9205      	str	r2, [sp, #20]
 800a2a8:	9a06      	ldr	r2, [sp, #24]
 800a2aa:	441a      	add	r2, r3
 800a2ac:	441d      	add	r5, r3
 800a2ae:	9206      	str	r2, [sp, #24]
 800a2b0:	e779      	b.n	800a1a6 <_dtoa_r+0x816>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	e7f4      	b.n	800a2a0 <_dtoa_r+0x910>
 800a2b6:	9b04      	ldr	r3, [sp, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dc37      	bgt.n	800a32c <_dtoa_r+0x99c>
 800a2bc:	9b07      	ldr	r3, [sp, #28]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	dd34      	ble.n	800a32c <_dtoa_r+0x99c>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	b963      	cbnz	r3, 800a2e4 <_dtoa_r+0x954>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 fab2 	bl	800a838 <__multadd>
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	4650      	mov	r0, sl
 800a2da:	f000 fd11 	bl	800ad00 <__mcmp>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	f73f adbb 	bgt.w	8009e5a <_dtoa_r+0x4ca>
 800a2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e6:	9d00      	ldr	r5, [sp, #0]
 800a2e8:	ea6f 0b03 	mvn.w	fp, r3
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fa7e 	bl	800a7f4 <_Bfree>
 800a2f8:	2f00      	cmp	r7, #0
 800a2fa:	f43f aeab 	beq.w	800a054 <_dtoa_r+0x6c4>
 800a2fe:	f1b8 0f00 	cmp.w	r8, #0
 800a302:	d005      	beq.n	800a310 <_dtoa_r+0x980>
 800a304:	45b8      	cmp	r8, r7
 800a306:	d003      	beq.n	800a310 <_dtoa_r+0x980>
 800a308:	4641      	mov	r1, r8
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 fa72 	bl	800a7f4 <_Bfree>
 800a310:	4639      	mov	r1, r7
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fa6e 	bl	800a7f4 <_Bfree>
 800a318:	e69c      	b.n	800a054 <_dtoa_r+0x6c4>
 800a31a:	2600      	movs	r6, #0
 800a31c:	4637      	mov	r7, r6
 800a31e:	e7e1      	b.n	800a2e4 <_dtoa_r+0x954>
 800a320:	46bb      	mov	fp, r7
 800a322:	4637      	mov	r7, r6
 800a324:	e599      	b.n	8009e5a <_dtoa_r+0x4ca>
 800a326:	bf00      	nop
 800a328:	40240000 	.word	0x40240000
 800a32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f000 80c8 	beq.w	800a4c4 <_dtoa_r+0xb34>
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	9301      	str	r3, [sp, #4]
 800a338:	2d00      	cmp	r5, #0
 800a33a:	dd05      	ble.n	800a348 <_dtoa_r+0x9b8>
 800a33c:	4639      	mov	r1, r7
 800a33e:	462a      	mov	r2, r5
 800a340:	4620      	mov	r0, r4
 800a342:	f000 fc71 	bl	800ac28 <__lshift>
 800a346:	4607      	mov	r7, r0
 800a348:	f1b8 0f00 	cmp.w	r8, #0
 800a34c:	d05b      	beq.n	800a406 <_dtoa_r+0xa76>
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fa0f 	bl	800a774 <_Balloc>
 800a356:	4605      	mov	r5, r0
 800a358:	b928      	cbnz	r0, 800a366 <_dtoa_r+0x9d6>
 800a35a:	4b83      	ldr	r3, [pc, #524]	; (800a568 <_dtoa_r+0xbd8>)
 800a35c:	4602      	mov	r2, r0
 800a35e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a362:	f7ff bb2e 	b.w	80099c2 <_dtoa_r+0x32>
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	3202      	adds	r2, #2
 800a36a:	0092      	lsls	r2, r2, #2
 800a36c:	f107 010c 	add.w	r1, r7, #12
 800a370:	300c      	adds	r0, #12
 800a372:	f7ff fa52 	bl	800981a <memcpy>
 800a376:	2201      	movs	r2, #1
 800a378:	4629      	mov	r1, r5
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fc54 	bl	800ac28 <__lshift>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a38a:	4413      	add	r3, r2
 800a38c:	9308      	str	r3, [sp, #32]
 800a38e:	9b02      	ldr	r3, [sp, #8]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	46b8      	mov	r8, r7
 800a396:	9306      	str	r3, [sp, #24]
 800a398:	4607      	mov	r7, r0
 800a39a:	9b04      	ldr	r3, [sp, #16]
 800a39c:	4631      	mov	r1, r6
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	9301      	str	r3, [sp, #4]
 800a3a4:	f7ff fa6c 	bl	8009880 <quorem>
 800a3a8:	4641      	mov	r1, r8
 800a3aa:	9002      	str	r0, [sp, #8]
 800a3ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a3b0:	4650      	mov	r0, sl
 800a3b2:	f000 fca5 	bl	800ad00 <__mcmp>
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	9005      	str	r0, [sp, #20]
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 fcbb 	bl	800ad38 <__mdiff>
 800a3c2:	68c2      	ldr	r2, [r0, #12]
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	bb02      	cbnz	r2, 800a40a <_dtoa_r+0xa7a>
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	4650      	mov	r0, sl
 800a3cc:	f000 fc98 	bl	800ad00 <__mcmp>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d8:	f000 fa0c 	bl	800a7f4 <_Bfree>
 800a3dc:	9b07      	ldr	r3, [sp, #28]
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	9d04      	ldr	r5, [sp, #16]
 800a3e2:	ea43 0102 	orr.w	r1, r3, r2
 800a3e6:	9b06      	ldr	r3, [sp, #24]
 800a3e8:	4319      	orrs	r1, r3
 800a3ea:	d110      	bne.n	800a40e <_dtoa_r+0xa7e>
 800a3ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a3f0:	d029      	beq.n	800a446 <_dtoa_r+0xab6>
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd02      	ble.n	800a3fe <_dtoa_r+0xa6e>
 800a3f8:	9b02      	ldr	r3, [sp, #8]
 800a3fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	f883 9000 	strb.w	r9, [r3]
 800a404:	e774      	b.n	800a2f0 <_dtoa_r+0x960>
 800a406:	4638      	mov	r0, r7
 800a408:	e7ba      	b.n	800a380 <_dtoa_r+0x9f0>
 800a40a:	2201      	movs	r2, #1
 800a40c:	e7e1      	b.n	800a3d2 <_dtoa_r+0xa42>
 800a40e:	9b05      	ldr	r3, [sp, #20]
 800a410:	2b00      	cmp	r3, #0
 800a412:	db04      	blt.n	800a41e <_dtoa_r+0xa8e>
 800a414:	9907      	ldr	r1, [sp, #28]
 800a416:	430b      	orrs	r3, r1
 800a418:	9906      	ldr	r1, [sp, #24]
 800a41a:	430b      	orrs	r3, r1
 800a41c:	d120      	bne.n	800a460 <_dtoa_r+0xad0>
 800a41e:	2a00      	cmp	r2, #0
 800a420:	dded      	ble.n	800a3fe <_dtoa_r+0xa6e>
 800a422:	4651      	mov	r1, sl
 800a424:	2201      	movs	r2, #1
 800a426:	4620      	mov	r0, r4
 800a428:	f000 fbfe 	bl	800ac28 <__lshift>
 800a42c:	4631      	mov	r1, r6
 800a42e:	4682      	mov	sl, r0
 800a430:	f000 fc66 	bl	800ad00 <__mcmp>
 800a434:	2800      	cmp	r0, #0
 800a436:	dc03      	bgt.n	800a440 <_dtoa_r+0xab0>
 800a438:	d1e1      	bne.n	800a3fe <_dtoa_r+0xa6e>
 800a43a:	f019 0f01 	tst.w	r9, #1
 800a43e:	d0de      	beq.n	800a3fe <_dtoa_r+0xa6e>
 800a440:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a444:	d1d8      	bne.n	800a3f8 <_dtoa_r+0xa68>
 800a446:	9a01      	ldr	r2, [sp, #4]
 800a448:	2339      	movs	r3, #57	; 0x39
 800a44a:	7013      	strb	r3, [r2, #0]
 800a44c:	462b      	mov	r3, r5
 800a44e:	461d      	mov	r5, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a456:	2a39      	cmp	r2, #57	; 0x39
 800a458:	d06c      	beq.n	800a534 <_dtoa_r+0xba4>
 800a45a:	3201      	adds	r2, #1
 800a45c:	701a      	strb	r2, [r3, #0]
 800a45e:	e747      	b.n	800a2f0 <_dtoa_r+0x960>
 800a460:	2a00      	cmp	r2, #0
 800a462:	dd07      	ble.n	800a474 <_dtoa_r+0xae4>
 800a464:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a468:	d0ed      	beq.n	800a446 <_dtoa_r+0xab6>
 800a46a:	9a01      	ldr	r2, [sp, #4]
 800a46c:	f109 0301 	add.w	r3, r9, #1
 800a470:	7013      	strb	r3, [r2, #0]
 800a472:	e73d      	b.n	800a2f0 <_dtoa_r+0x960>
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	9a08      	ldr	r2, [sp, #32]
 800a478:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d043      	beq.n	800a508 <_dtoa_r+0xb78>
 800a480:	4651      	mov	r1, sl
 800a482:	2300      	movs	r3, #0
 800a484:	220a      	movs	r2, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f9d6 	bl	800a838 <__multadd>
 800a48c:	45b8      	cmp	r8, r7
 800a48e:	4682      	mov	sl, r0
 800a490:	f04f 0300 	mov.w	r3, #0
 800a494:	f04f 020a 	mov.w	r2, #10
 800a498:	4641      	mov	r1, r8
 800a49a:	4620      	mov	r0, r4
 800a49c:	d107      	bne.n	800a4ae <_dtoa_r+0xb1e>
 800a49e:	f000 f9cb 	bl	800a838 <__multadd>
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	e775      	b.n	800a39a <_dtoa_r+0xa0a>
 800a4ae:	f000 f9c3 	bl	800a838 <__multadd>
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	4680      	mov	r8, r0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f9bc 	bl	800a838 <__multadd>
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	e7f0      	b.n	800a4a6 <_dtoa_r+0xb16>
 800a4c4:	9b04      	ldr	r3, [sp, #16]
 800a4c6:	9301      	str	r3, [sp, #4]
 800a4c8:	9d00      	ldr	r5, [sp, #0]
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7ff f9d7 	bl	8009880 <quorem>
 800a4d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	f805 9b01 	strb.w	r9, [r5], #1
 800a4dc:	1aea      	subs	r2, r5, r3
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	dd07      	ble.n	800a4f4 <_dtoa_r+0xb64>
 800a4e4:	4651      	mov	r1, sl
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f9a4 	bl	800a838 <__multadd>
 800a4f0:	4682      	mov	sl, r0
 800a4f2:	e7ea      	b.n	800a4ca <_dtoa_r+0xb3a>
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfc8      	it	gt
 800a4fa:	461d      	movgt	r5, r3
 800a4fc:	9b00      	ldr	r3, [sp, #0]
 800a4fe:	bfd8      	it	le
 800a500:	2501      	movle	r5, #1
 800a502:	441d      	add	r5, r3
 800a504:	f04f 0800 	mov.w	r8, #0
 800a508:	4651      	mov	r1, sl
 800a50a:	2201      	movs	r2, #1
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fb8b 	bl	800ac28 <__lshift>
 800a512:	4631      	mov	r1, r6
 800a514:	4682      	mov	sl, r0
 800a516:	f000 fbf3 	bl	800ad00 <__mcmp>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	dc96      	bgt.n	800a44c <_dtoa_r+0xabc>
 800a51e:	d102      	bne.n	800a526 <_dtoa_r+0xb96>
 800a520:	f019 0f01 	tst.w	r9, #1
 800a524:	d192      	bne.n	800a44c <_dtoa_r+0xabc>
 800a526:	462b      	mov	r3, r5
 800a528:	461d      	mov	r5, r3
 800a52a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a52e:	2a30      	cmp	r2, #48	; 0x30
 800a530:	d0fa      	beq.n	800a528 <_dtoa_r+0xb98>
 800a532:	e6dd      	b.n	800a2f0 <_dtoa_r+0x960>
 800a534:	9a00      	ldr	r2, [sp, #0]
 800a536:	429a      	cmp	r2, r3
 800a538:	d189      	bne.n	800a44e <_dtoa_r+0xabe>
 800a53a:	f10b 0b01 	add.w	fp, fp, #1
 800a53e:	2331      	movs	r3, #49	; 0x31
 800a540:	e796      	b.n	800a470 <_dtoa_r+0xae0>
 800a542:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <_dtoa_r+0xbdc>)
 800a544:	f7ff ba99 	b.w	8009a7a <_dtoa_r+0xea>
 800a548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f47f aa6d 	bne.w	8009a2a <_dtoa_r+0x9a>
 800a550:	4b07      	ldr	r3, [pc, #28]	; (800a570 <_dtoa_r+0xbe0>)
 800a552:	f7ff ba92 	b.w	8009a7a <_dtoa_r+0xea>
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dcb5      	bgt.n	800a4c8 <_dtoa_r+0xb38>
 800a55c:	9b07      	ldr	r3, [sp, #28]
 800a55e:	2b02      	cmp	r3, #2
 800a560:	f73f aeb1 	bgt.w	800a2c6 <_dtoa_r+0x936>
 800a564:	e7b0      	b.n	800a4c8 <_dtoa_r+0xb38>
 800a566:	bf00      	nop
 800a568:	0800e730 	.word	0x0800e730
 800a56c:	0800e5f5 	.word	0x0800e5f5
 800a570:	0800e6cb 	.word	0x0800e6cb

0800a574 <_free_r>:
 800a574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a576:	2900      	cmp	r1, #0
 800a578:	d044      	beq.n	800a604 <_free_r+0x90>
 800a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57e:	9001      	str	r0, [sp, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	f1a1 0404 	sub.w	r4, r1, #4
 800a586:	bfb8      	it	lt
 800a588:	18e4      	addlt	r4, r4, r3
 800a58a:	f000 f8e7 	bl	800a75c <__malloc_lock>
 800a58e:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <_free_r+0x94>)
 800a590:	9801      	ldr	r0, [sp, #4]
 800a592:	6813      	ldr	r3, [r2, #0]
 800a594:	b933      	cbnz	r3, 800a5a4 <_free_r+0x30>
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6014      	str	r4, [r2, #0]
 800a59a:	b003      	add	sp, #12
 800a59c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5a0:	f000 b8e2 	b.w	800a768 <__malloc_unlock>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d908      	bls.n	800a5ba <_free_r+0x46>
 800a5a8:	6825      	ldr	r5, [r4, #0]
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf01      	itttt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	1949      	addeq	r1, r1, r5
 800a5b6:	6021      	streq	r1, [r4, #0]
 800a5b8:	e7ed      	b.n	800a596 <_free_r+0x22>
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	b10b      	cbz	r3, 800a5c4 <_free_r+0x50>
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	d9fa      	bls.n	800a5ba <_free_r+0x46>
 800a5c4:	6811      	ldr	r1, [r2, #0]
 800a5c6:	1855      	adds	r5, r2, r1
 800a5c8:	42a5      	cmp	r5, r4
 800a5ca:	d10b      	bne.n	800a5e4 <_free_r+0x70>
 800a5cc:	6824      	ldr	r4, [r4, #0]
 800a5ce:	4421      	add	r1, r4
 800a5d0:	1854      	adds	r4, r2, r1
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	6011      	str	r1, [r2, #0]
 800a5d6:	d1e0      	bne.n	800a59a <_free_r+0x26>
 800a5d8:	681c      	ldr	r4, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	6053      	str	r3, [r2, #4]
 800a5de:	440c      	add	r4, r1
 800a5e0:	6014      	str	r4, [r2, #0]
 800a5e2:	e7da      	b.n	800a59a <_free_r+0x26>
 800a5e4:	d902      	bls.n	800a5ec <_free_r+0x78>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	e7d6      	b.n	800a59a <_free_r+0x26>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	1961      	adds	r1, r4, r5
 800a5f0:	428b      	cmp	r3, r1
 800a5f2:	bf04      	itt	eq
 800a5f4:	6819      	ldreq	r1, [r3, #0]
 800a5f6:	685b      	ldreq	r3, [r3, #4]
 800a5f8:	6063      	str	r3, [r4, #4]
 800a5fa:	bf04      	itt	eq
 800a5fc:	1949      	addeq	r1, r1, r5
 800a5fe:	6021      	streq	r1, [r4, #0]
 800a600:	6054      	str	r4, [r2, #4]
 800a602:	e7ca      	b.n	800a59a <_free_r+0x26>
 800a604:	b003      	add	sp, #12
 800a606:	bd30      	pop	{r4, r5, pc}
 800a608:	20000e34 	.word	0x20000e34

0800a60c <malloc>:
 800a60c:	4b02      	ldr	r3, [pc, #8]	; (800a618 <malloc+0xc>)
 800a60e:	4601      	mov	r1, r0
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	f000 b823 	b.w	800a65c <_malloc_r>
 800a616:	bf00      	nop
 800a618:	20000064 	.word	0x20000064

0800a61c <sbrk_aligned>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	4e0e      	ldr	r6, [pc, #56]	; (800a658 <sbrk_aligned+0x3c>)
 800a620:	460c      	mov	r4, r1
 800a622:	6831      	ldr	r1, [r6, #0]
 800a624:	4605      	mov	r5, r0
 800a626:	b911      	cbnz	r1, 800a62e <sbrk_aligned+0x12>
 800a628:	f001 ffa4 	bl	800c574 <_sbrk_r>
 800a62c:	6030      	str	r0, [r6, #0]
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f001 ff9f 	bl	800c574 <_sbrk_r>
 800a636:	1c43      	adds	r3, r0, #1
 800a638:	d00a      	beq.n	800a650 <sbrk_aligned+0x34>
 800a63a:	1cc4      	adds	r4, r0, #3
 800a63c:	f024 0403 	bic.w	r4, r4, #3
 800a640:	42a0      	cmp	r0, r4
 800a642:	d007      	beq.n	800a654 <sbrk_aligned+0x38>
 800a644:	1a21      	subs	r1, r4, r0
 800a646:	4628      	mov	r0, r5
 800a648:	f001 ff94 	bl	800c574 <_sbrk_r>
 800a64c:	3001      	adds	r0, #1
 800a64e:	d101      	bne.n	800a654 <sbrk_aligned+0x38>
 800a650:	f04f 34ff 	mov.w	r4, #4294967295
 800a654:	4620      	mov	r0, r4
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	20000e38 	.word	0x20000e38

0800a65c <_malloc_r>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	1ccd      	adds	r5, r1, #3
 800a662:	f025 0503 	bic.w	r5, r5, #3
 800a666:	3508      	adds	r5, #8
 800a668:	2d0c      	cmp	r5, #12
 800a66a:	bf38      	it	cc
 800a66c:	250c      	movcc	r5, #12
 800a66e:	2d00      	cmp	r5, #0
 800a670:	4607      	mov	r7, r0
 800a672:	db01      	blt.n	800a678 <_malloc_r+0x1c>
 800a674:	42a9      	cmp	r1, r5
 800a676:	d905      	bls.n	800a684 <_malloc_r+0x28>
 800a678:	230c      	movs	r3, #12
 800a67a:	603b      	str	r3, [r7, #0]
 800a67c:	2600      	movs	r6, #0
 800a67e:	4630      	mov	r0, r6
 800a680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a684:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a758 <_malloc_r+0xfc>
 800a688:	f000 f868 	bl	800a75c <__malloc_lock>
 800a68c:	f8d8 3000 	ldr.w	r3, [r8]
 800a690:	461c      	mov	r4, r3
 800a692:	bb5c      	cbnz	r4, 800a6ec <_malloc_r+0x90>
 800a694:	4629      	mov	r1, r5
 800a696:	4638      	mov	r0, r7
 800a698:	f7ff ffc0 	bl	800a61c <sbrk_aligned>
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	4604      	mov	r4, r0
 800a6a0:	d155      	bne.n	800a74e <_malloc_r+0xf2>
 800a6a2:	f8d8 4000 	ldr.w	r4, [r8]
 800a6a6:	4626      	mov	r6, r4
 800a6a8:	2e00      	cmp	r6, #0
 800a6aa:	d145      	bne.n	800a738 <_malloc_r+0xdc>
 800a6ac:	2c00      	cmp	r4, #0
 800a6ae:	d048      	beq.n	800a742 <_malloc_r+0xe6>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	4638      	mov	r0, r7
 800a6b6:	eb04 0903 	add.w	r9, r4, r3
 800a6ba:	f001 ff5b 	bl	800c574 <_sbrk_r>
 800a6be:	4581      	cmp	r9, r0
 800a6c0:	d13f      	bne.n	800a742 <_malloc_r+0xe6>
 800a6c2:	6821      	ldr	r1, [r4, #0]
 800a6c4:	1a6d      	subs	r5, r5, r1
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f7ff ffa7 	bl	800a61c <sbrk_aligned>
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d037      	beq.n	800a742 <_malloc_r+0xe6>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	442b      	add	r3, r5
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d038      	beq.n	800a752 <_malloc_r+0xf6>
 800a6e0:	685a      	ldr	r2, [r3, #4]
 800a6e2:	42a2      	cmp	r2, r4
 800a6e4:	d12b      	bne.n	800a73e <_malloc_r+0xe2>
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	605a      	str	r2, [r3, #4]
 800a6ea:	e00f      	b.n	800a70c <_malloc_r+0xb0>
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	1b52      	subs	r2, r2, r5
 800a6f0:	d41f      	bmi.n	800a732 <_malloc_r+0xd6>
 800a6f2:	2a0b      	cmp	r2, #11
 800a6f4:	d917      	bls.n	800a726 <_malloc_r+0xca>
 800a6f6:	1961      	adds	r1, r4, r5
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	6025      	str	r5, [r4, #0]
 800a6fc:	bf18      	it	ne
 800a6fe:	6059      	strne	r1, [r3, #4]
 800a700:	6863      	ldr	r3, [r4, #4]
 800a702:	bf08      	it	eq
 800a704:	f8c8 1000 	streq.w	r1, [r8]
 800a708:	5162      	str	r2, [r4, r5]
 800a70a:	604b      	str	r3, [r1, #4]
 800a70c:	4638      	mov	r0, r7
 800a70e:	f104 060b 	add.w	r6, r4, #11
 800a712:	f000 f829 	bl	800a768 <__malloc_unlock>
 800a716:	f026 0607 	bic.w	r6, r6, #7
 800a71a:	1d23      	adds	r3, r4, #4
 800a71c:	1af2      	subs	r2, r6, r3
 800a71e:	d0ae      	beq.n	800a67e <_malloc_r+0x22>
 800a720:	1b9b      	subs	r3, r3, r6
 800a722:	50a3      	str	r3, [r4, r2]
 800a724:	e7ab      	b.n	800a67e <_malloc_r+0x22>
 800a726:	42a3      	cmp	r3, r4
 800a728:	6862      	ldr	r2, [r4, #4]
 800a72a:	d1dd      	bne.n	800a6e8 <_malloc_r+0x8c>
 800a72c:	f8c8 2000 	str.w	r2, [r8]
 800a730:	e7ec      	b.n	800a70c <_malloc_r+0xb0>
 800a732:	4623      	mov	r3, r4
 800a734:	6864      	ldr	r4, [r4, #4]
 800a736:	e7ac      	b.n	800a692 <_malloc_r+0x36>
 800a738:	4634      	mov	r4, r6
 800a73a:	6876      	ldr	r6, [r6, #4]
 800a73c:	e7b4      	b.n	800a6a8 <_malloc_r+0x4c>
 800a73e:	4613      	mov	r3, r2
 800a740:	e7cc      	b.n	800a6dc <_malloc_r+0x80>
 800a742:	230c      	movs	r3, #12
 800a744:	603b      	str	r3, [r7, #0]
 800a746:	4638      	mov	r0, r7
 800a748:	f000 f80e 	bl	800a768 <__malloc_unlock>
 800a74c:	e797      	b.n	800a67e <_malloc_r+0x22>
 800a74e:	6025      	str	r5, [r4, #0]
 800a750:	e7dc      	b.n	800a70c <_malloc_r+0xb0>
 800a752:	605b      	str	r3, [r3, #4]
 800a754:	deff      	udf	#255	; 0xff
 800a756:	bf00      	nop
 800a758:	20000e34 	.word	0x20000e34

0800a75c <__malloc_lock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	; (800a764 <__malloc_lock+0x8>)
 800a75e:	f7ff b85a 	b.w	8009816 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	20000e30 	.word	0x20000e30

0800a768 <__malloc_unlock>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__malloc_unlock+0x8>)
 800a76a:	f7ff b855 	b.w	8009818 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	20000e30 	.word	0x20000e30

0800a774 <_Balloc>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	69c6      	ldr	r6, [r0, #28]
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	b976      	cbnz	r6, 800a79c <_Balloc+0x28>
 800a77e:	2010      	movs	r0, #16
 800a780:	f7ff ff44 	bl	800a60c <malloc>
 800a784:	4602      	mov	r2, r0
 800a786:	61e0      	str	r0, [r4, #28]
 800a788:	b920      	cbnz	r0, 800a794 <_Balloc+0x20>
 800a78a:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <_Balloc+0x78>)
 800a78c:	4818      	ldr	r0, [pc, #96]	; (800a7f0 <_Balloc+0x7c>)
 800a78e:	216b      	movs	r1, #107	; 0x6b
 800a790:	f7ff f858 	bl	8009844 <__assert_func>
 800a794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a798:	6006      	str	r6, [r0, #0]
 800a79a:	60c6      	str	r6, [r0, #12]
 800a79c:	69e6      	ldr	r6, [r4, #28]
 800a79e:	68f3      	ldr	r3, [r6, #12]
 800a7a0:	b183      	cbz	r3, 800a7c4 <_Balloc+0x50>
 800a7a2:	69e3      	ldr	r3, [r4, #28]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7aa:	b9b8      	cbnz	r0, 800a7dc <_Balloc+0x68>
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a7b2:	1d72      	adds	r2, r6, #5
 800a7b4:	0092      	lsls	r2, r2, #2
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f001 fefd 	bl	800c5b6 <_calloc_r>
 800a7bc:	b160      	cbz	r0, 800a7d8 <_Balloc+0x64>
 800a7be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7c2:	e00e      	b.n	800a7e2 <_Balloc+0x6e>
 800a7c4:	2221      	movs	r2, #33	; 0x21
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 fef4 	bl	800c5b6 <_calloc_r>
 800a7ce:	69e3      	ldr	r3, [r4, #28]
 800a7d0:	60f0      	str	r0, [r6, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e4      	bne.n	800a7a2 <_Balloc+0x2e>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	6802      	ldr	r2, [r0, #0]
 800a7de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e8:	e7f7      	b.n	800a7da <_Balloc+0x66>
 800a7ea:	bf00      	nop
 800a7ec:	0800e61e 	.word	0x0800e61e
 800a7f0:	0800e741 	.word	0x0800e741

0800a7f4 <_Bfree>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	69c6      	ldr	r6, [r0, #28]
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b976      	cbnz	r6, 800a81c <_Bfree+0x28>
 800a7fe:	2010      	movs	r0, #16
 800a800:	f7ff ff04 	bl	800a60c <malloc>
 800a804:	4602      	mov	r2, r0
 800a806:	61e8      	str	r0, [r5, #28]
 800a808:	b920      	cbnz	r0, 800a814 <_Bfree+0x20>
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <_Bfree+0x3c>)
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <_Bfree+0x40>)
 800a80e:	218f      	movs	r1, #143	; 0x8f
 800a810:	f7ff f818 	bl	8009844 <__assert_func>
 800a814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a818:	6006      	str	r6, [r0, #0]
 800a81a:	60c6      	str	r6, [r0, #12]
 800a81c:	b13c      	cbz	r4, 800a82e <_Bfree+0x3a>
 800a81e:	69eb      	ldr	r3, [r5, #28]
 800a820:	6862      	ldr	r2, [r4, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a828:	6021      	str	r1, [r4, #0]
 800a82a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	0800e61e 	.word	0x0800e61e
 800a834:	0800e741 	.word	0x0800e741

0800a838 <__multadd>:
 800a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	690d      	ldr	r5, [r1, #16]
 800a83e:	4607      	mov	r7, r0
 800a840:	460c      	mov	r4, r1
 800a842:	461e      	mov	r6, r3
 800a844:	f101 0c14 	add.w	ip, r1, #20
 800a848:	2000      	movs	r0, #0
 800a84a:	f8dc 3000 	ldr.w	r3, [ip]
 800a84e:	b299      	uxth	r1, r3
 800a850:	fb02 6101 	mla	r1, r2, r1, r6
 800a854:	0c1e      	lsrs	r6, r3, #16
 800a856:	0c0b      	lsrs	r3, r1, #16
 800a858:	fb02 3306 	mla	r3, r2, r6, r3
 800a85c:	b289      	uxth	r1, r1
 800a85e:	3001      	adds	r0, #1
 800a860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a864:	4285      	cmp	r5, r0
 800a866:	f84c 1b04 	str.w	r1, [ip], #4
 800a86a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a86e:	dcec      	bgt.n	800a84a <__multadd+0x12>
 800a870:	b30e      	cbz	r6, 800a8b6 <__multadd+0x7e>
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	42ab      	cmp	r3, r5
 800a876:	dc19      	bgt.n	800a8ac <__multadd+0x74>
 800a878:	6861      	ldr	r1, [r4, #4]
 800a87a:	4638      	mov	r0, r7
 800a87c:	3101      	adds	r1, #1
 800a87e:	f7ff ff79 	bl	800a774 <_Balloc>
 800a882:	4680      	mov	r8, r0
 800a884:	b928      	cbnz	r0, 800a892 <__multadd+0x5a>
 800a886:	4602      	mov	r2, r0
 800a888:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <__multadd+0x84>)
 800a88a:	480d      	ldr	r0, [pc, #52]	; (800a8c0 <__multadd+0x88>)
 800a88c:	21ba      	movs	r1, #186	; 0xba
 800a88e:	f7fe ffd9 	bl	8009844 <__assert_func>
 800a892:	6922      	ldr	r2, [r4, #16]
 800a894:	3202      	adds	r2, #2
 800a896:	f104 010c 	add.w	r1, r4, #12
 800a89a:	0092      	lsls	r2, r2, #2
 800a89c:	300c      	adds	r0, #12
 800a89e:	f7fe ffbc 	bl	800981a <memcpy>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff ffa5 	bl	800a7f4 <_Bfree>
 800a8aa:	4644      	mov	r4, r8
 800a8ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	615e      	str	r6, [r3, #20]
 800a8b4:	6125      	str	r5, [r4, #16]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	0800e730 	.word	0x0800e730
 800a8c0:	0800e741 	.word	0x0800e741

0800a8c4 <__s2b>:
 800a8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	4615      	mov	r5, r2
 800a8cc:	461f      	mov	r7, r3
 800a8ce:	2209      	movs	r2, #9
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2201      	movs	r2, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	db09      	blt.n	800a8f4 <__s2b+0x30>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7ff ff47 	bl	800a774 <_Balloc>
 800a8e6:	b940      	cbnz	r0, 800a8fa <__s2b+0x36>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	4b19      	ldr	r3, [pc, #100]	; (800a950 <__s2b+0x8c>)
 800a8ec:	4819      	ldr	r0, [pc, #100]	; (800a954 <__s2b+0x90>)
 800a8ee:	21d3      	movs	r1, #211	; 0xd3
 800a8f0:	f7fe ffa8 	bl	8009844 <__assert_func>
 800a8f4:	0052      	lsls	r2, r2, #1
 800a8f6:	3101      	adds	r1, #1
 800a8f8:	e7f0      	b.n	800a8dc <__s2b+0x18>
 800a8fa:	9b08      	ldr	r3, [sp, #32]
 800a8fc:	6143      	str	r3, [r0, #20]
 800a8fe:	2d09      	cmp	r5, #9
 800a900:	f04f 0301 	mov.w	r3, #1
 800a904:	6103      	str	r3, [r0, #16]
 800a906:	dd16      	ble.n	800a936 <__s2b+0x72>
 800a908:	f104 0909 	add.w	r9, r4, #9
 800a90c:	46c8      	mov	r8, r9
 800a90e:	442c      	add	r4, r5
 800a910:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a914:	4601      	mov	r1, r0
 800a916:	3b30      	subs	r3, #48	; 0x30
 800a918:	220a      	movs	r2, #10
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff8c 	bl	800a838 <__multadd>
 800a920:	45a0      	cmp	r8, r4
 800a922:	d1f5      	bne.n	800a910 <__s2b+0x4c>
 800a924:	f1a5 0408 	sub.w	r4, r5, #8
 800a928:	444c      	add	r4, r9
 800a92a:	1b2d      	subs	r5, r5, r4
 800a92c:	1963      	adds	r3, r4, r5
 800a92e:	42bb      	cmp	r3, r7
 800a930:	db04      	blt.n	800a93c <__s2b+0x78>
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	340a      	adds	r4, #10
 800a938:	2509      	movs	r5, #9
 800a93a:	e7f6      	b.n	800a92a <__s2b+0x66>
 800a93c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a940:	4601      	mov	r1, r0
 800a942:	3b30      	subs	r3, #48	; 0x30
 800a944:	220a      	movs	r2, #10
 800a946:	4630      	mov	r0, r6
 800a948:	f7ff ff76 	bl	800a838 <__multadd>
 800a94c:	e7ee      	b.n	800a92c <__s2b+0x68>
 800a94e:	bf00      	nop
 800a950:	0800e730 	.word	0x0800e730
 800a954:	0800e741 	.word	0x0800e741

0800a958 <__hi0bits>:
 800a958:	0c03      	lsrs	r3, r0, #16
 800a95a:	041b      	lsls	r3, r3, #16
 800a95c:	b9d3      	cbnz	r3, 800a994 <__hi0bits+0x3c>
 800a95e:	0400      	lsls	r0, r0, #16
 800a960:	2310      	movs	r3, #16
 800a962:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a966:	bf04      	itt	eq
 800a968:	0200      	lsleq	r0, r0, #8
 800a96a:	3308      	addeq	r3, #8
 800a96c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a970:	bf04      	itt	eq
 800a972:	0100      	lsleq	r0, r0, #4
 800a974:	3304      	addeq	r3, #4
 800a976:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a97a:	bf04      	itt	eq
 800a97c:	0080      	lsleq	r0, r0, #2
 800a97e:	3302      	addeq	r3, #2
 800a980:	2800      	cmp	r0, #0
 800a982:	db05      	blt.n	800a990 <__hi0bits+0x38>
 800a984:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a988:	f103 0301 	add.w	r3, r3, #1
 800a98c:	bf08      	it	eq
 800a98e:	2320      	moveq	r3, #32
 800a990:	4618      	mov	r0, r3
 800a992:	4770      	bx	lr
 800a994:	2300      	movs	r3, #0
 800a996:	e7e4      	b.n	800a962 <__hi0bits+0xa>

0800a998 <__lo0bits>:
 800a998:	6803      	ldr	r3, [r0, #0]
 800a99a:	f013 0207 	ands.w	r2, r3, #7
 800a99e:	d00c      	beq.n	800a9ba <__lo0bits+0x22>
 800a9a0:	07d9      	lsls	r1, r3, #31
 800a9a2:	d422      	bmi.n	800a9ea <__lo0bits+0x52>
 800a9a4:	079a      	lsls	r2, r3, #30
 800a9a6:	bf49      	itett	mi
 800a9a8:	085b      	lsrmi	r3, r3, #1
 800a9aa:	089b      	lsrpl	r3, r3, #2
 800a9ac:	6003      	strmi	r3, [r0, #0]
 800a9ae:	2201      	movmi	r2, #1
 800a9b0:	bf5c      	itt	pl
 800a9b2:	6003      	strpl	r3, [r0, #0]
 800a9b4:	2202      	movpl	r2, #2
 800a9b6:	4610      	mov	r0, r2
 800a9b8:	4770      	bx	lr
 800a9ba:	b299      	uxth	r1, r3
 800a9bc:	b909      	cbnz	r1, 800a9c2 <__lo0bits+0x2a>
 800a9be:	0c1b      	lsrs	r3, r3, #16
 800a9c0:	2210      	movs	r2, #16
 800a9c2:	b2d9      	uxtb	r1, r3
 800a9c4:	b909      	cbnz	r1, 800a9ca <__lo0bits+0x32>
 800a9c6:	3208      	adds	r2, #8
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	0719      	lsls	r1, r3, #28
 800a9cc:	bf04      	itt	eq
 800a9ce:	091b      	lsreq	r3, r3, #4
 800a9d0:	3204      	addeq	r2, #4
 800a9d2:	0799      	lsls	r1, r3, #30
 800a9d4:	bf04      	itt	eq
 800a9d6:	089b      	lsreq	r3, r3, #2
 800a9d8:	3202      	addeq	r2, #2
 800a9da:	07d9      	lsls	r1, r3, #31
 800a9dc:	d403      	bmi.n	800a9e6 <__lo0bits+0x4e>
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	f102 0201 	add.w	r2, r2, #1
 800a9e4:	d003      	beq.n	800a9ee <__lo0bits+0x56>
 800a9e6:	6003      	str	r3, [r0, #0]
 800a9e8:	e7e5      	b.n	800a9b6 <__lo0bits+0x1e>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	e7e3      	b.n	800a9b6 <__lo0bits+0x1e>
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	e7e1      	b.n	800a9b6 <__lo0bits+0x1e>
	...

0800a9f4 <__i2b>:
 800a9f4:	b510      	push	{r4, lr}
 800a9f6:	460c      	mov	r4, r1
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	f7ff febb 	bl	800a774 <_Balloc>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	b928      	cbnz	r0, 800aa0e <__i2b+0x1a>
 800aa02:	4b05      	ldr	r3, [pc, #20]	; (800aa18 <__i2b+0x24>)
 800aa04:	4805      	ldr	r0, [pc, #20]	; (800aa1c <__i2b+0x28>)
 800aa06:	f240 1145 	movw	r1, #325	; 0x145
 800aa0a:	f7fe ff1b 	bl	8009844 <__assert_func>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	6144      	str	r4, [r0, #20]
 800aa12:	6103      	str	r3, [r0, #16]
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	bf00      	nop
 800aa18:	0800e730 	.word	0x0800e730
 800aa1c:	0800e741 	.word	0x0800e741

0800aa20 <__multiply>:
 800aa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa24:	4691      	mov	r9, r2
 800aa26:	690a      	ldr	r2, [r1, #16]
 800aa28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	bfb8      	it	lt
 800aa30:	460b      	movlt	r3, r1
 800aa32:	460c      	mov	r4, r1
 800aa34:	bfbc      	itt	lt
 800aa36:	464c      	movlt	r4, r9
 800aa38:	4699      	movlt	r9, r3
 800aa3a:	6927      	ldr	r7, [r4, #16]
 800aa3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa40:	68a3      	ldr	r3, [r4, #8]
 800aa42:	6861      	ldr	r1, [r4, #4]
 800aa44:	eb07 060a 	add.w	r6, r7, sl
 800aa48:	42b3      	cmp	r3, r6
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	bfb8      	it	lt
 800aa4e:	3101      	addlt	r1, #1
 800aa50:	f7ff fe90 	bl	800a774 <_Balloc>
 800aa54:	b930      	cbnz	r0, 800aa64 <__multiply+0x44>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b44      	ldr	r3, [pc, #272]	; (800ab6c <__multiply+0x14c>)
 800aa5a:	4845      	ldr	r0, [pc, #276]	; (800ab70 <__multiply+0x150>)
 800aa5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa60:	f7fe fef0 	bl	8009844 <__assert_func>
 800aa64:	f100 0514 	add.w	r5, r0, #20
 800aa68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	2200      	movs	r2, #0
 800aa70:	4543      	cmp	r3, r8
 800aa72:	d321      	bcc.n	800aab8 <__multiply+0x98>
 800aa74:	f104 0314 	add.w	r3, r4, #20
 800aa78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa7c:	f109 0314 	add.w	r3, r9, #20
 800aa80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa84:	9202      	str	r2, [sp, #8]
 800aa86:	1b3a      	subs	r2, r7, r4
 800aa88:	3a15      	subs	r2, #21
 800aa8a:	f022 0203 	bic.w	r2, r2, #3
 800aa8e:	3204      	adds	r2, #4
 800aa90:	f104 0115 	add.w	r1, r4, #21
 800aa94:	428f      	cmp	r7, r1
 800aa96:	bf38      	it	cc
 800aa98:	2204      	movcc	r2, #4
 800aa9a:	9201      	str	r2, [sp, #4]
 800aa9c:	9a02      	ldr	r2, [sp, #8]
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d80c      	bhi.n	800aabe <__multiply+0x9e>
 800aaa4:	2e00      	cmp	r6, #0
 800aaa6:	dd03      	ble.n	800aab0 <__multiply+0x90>
 800aaa8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d05b      	beq.n	800ab68 <__multiply+0x148>
 800aab0:	6106      	str	r6, [r0, #16]
 800aab2:	b005      	add	sp, #20
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	f843 2b04 	str.w	r2, [r3], #4
 800aabc:	e7d8      	b.n	800aa70 <__multiply+0x50>
 800aabe:	f8b3 a000 	ldrh.w	sl, [r3]
 800aac2:	f1ba 0f00 	cmp.w	sl, #0
 800aac6:	d024      	beq.n	800ab12 <__multiply+0xf2>
 800aac8:	f104 0e14 	add.w	lr, r4, #20
 800aacc:	46a9      	mov	r9, r5
 800aace:	f04f 0c00 	mov.w	ip, #0
 800aad2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aad6:	f8d9 1000 	ldr.w	r1, [r9]
 800aada:	fa1f fb82 	uxth.w	fp, r2
 800aade:	b289      	uxth	r1, r1
 800aae0:	fb0a 110b 	mla	r1, sl, fp, r1
 800aae4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aae8:	f8d9 2000 	ldr.w	r2, [r9]
 800aaec:	4461      	add	r1, ip
 800aaee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaf2:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aafa:	b289      	uxth	r1, r1
 800aafc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab00:	4577      	cmp	r7, lr
 800ab02:	f849 1b04 	str.w	r1, [r9], #4
 800ab06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab0a:	d8e2      	bhi.n	800aad2 <__multiply+0xb2>
 800ab0c:	9a01      	ldr	r2, [sp, #4]
 800ab0e:	f845 c002 	str.w	ip, [r5, r2]
 800ab12:	9a03      	ldr	r2, [sp, #12]
 800ab14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	d021      	beq.n	800ab64 <__multiply+0x144>
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	f104 0c14 	add.w	ip, r4, #20
 800ab26:	46ae      	mov	lr, r5
 800ab28:	f04f 0a00 	mov.w	sl, #0
 800ab2c:	f8bc b000 	ldrh.w	fp, [ip]
 800ab30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab34:	fb09 220b 	mla	r2, r9, fp, r2
 800ab38:	4452      	add	r2, sl
 800ab3a:	b289      	uxth	r1, r1
 800ab3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab40:	f84e 1b04 	str.w	r1, [lr], #4
 800ab44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab4c:	f8be 1000 	ldrh.w	r1, [lr]
 800ab50:	fb09 110a 	mla	r1, r9, sl, r1
 800ab54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab58:	4567      	cmp	r7, ip
 800ab5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab5e:	d8e5      	bhi.n	800ab2c <__multiply+0x10c>
 800ab60:	9a01      	ldr	r2, [sp, #4]
 800ab62:	50a9      	str	r1, [r5, r2]
 800ab64:	3504      	adds	r5, #4
 800ab66:	e799      	b.n	800aa9c <__multiply+0x7c>
 800ab68:	3e01      	subs	r6, #1
 800ab6a:	e79b      	b.n	800aaa4 <__multiply+0x84>
 800ab6c:	0800e730 	.word	0x0800e730
 800ab70:	0800e741 	.word	0x0800e741

0800ab74 <__pow5mult>:
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	4615      	mov	r5, r2
 800ab7a:	f012 0203 	ands.w	r2, r2, #3
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	d007      	beq.n	800ab94 <__pow5mult+0x20>
 800ab84:	4c25      	ldr	r4, [pc, #148]	; (800ac1c <__pow5mult+0xa8>)
 800ab86:	3a01      	subs	r2, #1
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab8e:	f7ff fe53 	bl	800a838 <__multadd>
 800ab92:	4607      	mov	r7, r0
 800ab94:	10ad      	asrs	r5, r5, #2
 800ab96:	d03d      	beq.n	800ac14 <__pow5mult+0xa0>
 800ab98:	69f4      	ldr	r4, [r6, #28]
 800ab9a:	b97c      	cbnz	r4, 800abbc <__pow5mult+0x48>
 800ab9c:	2010      	movs	r0, #16
 800ab9e:	f7ff fd35 	bl	800a60c <malloc>
 800aba2:	4602      	mov	r2, r0
 800aba4:	61f0      	str	r0, [r6, #28]
 800aba6:	b928      	cbnz	r0, 800abb4 <__pow5mult+0x40>
 800aba8:	4b1d      	ldr	r3, [pc, #116]	; (800ac20 <__pow5mult+0xac>)
 800abaa:	481e      	ldr	r0, [pc, #120]	; (800ac24 <__pow5mult+0xb0>)
 800abac:	f240 11b3 	movw	r1, #435	; 0x1b3
 800abb0:	f7fe fe48 	bl	8009844 <__assert_func>
 800abb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abb8:	6004      	str	r4, [r0, #0]
 800abba:	60c4      	str	r4, [r0, #12]
 800abbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800abc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abc4:	b94c      	cbnz	r4, 800abda <__pow5mult+0x66>
 800abc6:	f240 2171 	movw	r1, #625	; 0x271
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ff12 	bl	800a9f4 <__i2b>
 800abd0:	2300      	movs	r3, #0
 800abd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800abd6:	4604      	mov	r4, r0
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	f04f 0900 	mov.w	r9, #0
 800abde:	07eb      	lsls	r3, r5, #31
 800abe0:	d50a      	bpl.n	800abf8 <__pow5mult+0x84>
 800abe2:	4639      	mov	r1, r7
 800abe4:	4622      	mov	r2, r4
 800abe6:	4630      	mov	r0, r6
 800abe8:	f7ff ff1a 	bl	800aa20 <__multiply>
 800abec:	4639      	mov	r1, r7
 800abee:	4680      	mov	r8, r0
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff fdff 	bl	800a7f4 <_Bfree>
 800abf6:	4647      	mov	r7, r8
 800abf8:	106d      	asrs	r5, r5, #1
 800abfa:	d00b      	beq.n	800ac14 <__pow5mult+0xa0>
 800abfc:	6820      	ldr	r0, [r4, #0]
 800abfe:	b938      	cbnz	r0, 800ac10 <__pow5mult+0x9c>
 800ac00:	4622      	mov	r2, r4
 800ac02:	4621      	mov	r1, r4
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7ff ff0b 	bl	800aa20 <__multiply>
 800ac0a:	6020      	str	r0, [r4, #0]
 800ac0c:	f8c0 9000 	str.w	r9, [r0]
 800ac10:	4604      	mov	r4, r0
 800ac12:	e7e4      	b.n	800abde <__pow5mult+0x6a>
 800ac14:	4638      	mov	r0, r7
 800ac16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1a:	bf00      	nop
 800ac1c:	0800e890 	.word	0x0800e890
 800ac20:	0800e61e 	.word	0x0800e61e
 800ac24:	0800e741 	.word	0x0800e741

0800ac28 <__lshift>:
 800ac28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	6849      	ldr	r1, [r1, #4]
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac36:	68a3      	ldr	r3, [r4, #8]
 800ac38:	4607      	mov	r7, r0
 800ac3a:	4691      	mov	r9, r2
 800ac3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac40:	f108 0601 	add.w	r6, r8, #1
 800ac44:	42b3      	cmp	r3, r6
 800ac46:	db0b      	blt.n	800ac60 <__lshift+0x38>
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff fd93 	bl	800a774 <_Balloc>
 800ac4e:	4605      	mov	r5, r0
 800ac50:	b948      	cbnz	r0, 800ac66 <__lshift+0x3e>
 800ac52:	4602      	mov	r2, r0
 800ac54:	4b28      	ldr	r3, [pc, #160]	; (800acf8 <__lshift+0xd0>)
 800ac56:	4829      	ldr	r0, [pc, #164]	; (800acfc <__lshift+0xd4>)
 800ac58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac5c:	f7fe fdf2 	bl	8009844 <__assert_func>
 800ac60:	3101      	adds	r1, #1
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	e7ee      	b.n	800ac44 <__lshift+0x1c>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f100 0114 	add.w	r1, r0, #20
 800ac6c:	f100 0210 	add.w	r2, r0, #16
 800ac70:	4618      	mov	r0, r3
 800ac72:	4553      	cmp	r3, sl
 800ac74:	db33      	blt.n	800acde <__lshift+0xb6>
 800ac76:	6920      	ldr	r0, [r4, #16]
 800ac78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac7c:	f104 0314 	add.w	r3, r4, #20
 800ac80:	f019 091f 	ands.w	r9, r9, #31
 800ac84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac8c:	d02b      	beq.n	800ace6 <__lshift+0xbe>
 800ac8e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac92:	468a      	mov	sl, r1
 800ac94:	2200      	movs	r2, #0
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	fa00 f009 	lsl.w	r0, r0, r9
 800ac9c:	4310      	orrs	r0, r2
 800ac9e:	f84a 0b04 	str.w	r0, [sl], #4
 800aca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aca6:	459c      	cmp	ip, r3
 800aca8:	fa22 f20e 	lsr.w	r2, r2, lr
 800acac:	d8f3      	bhi.n	800ac96 <__lshift+0x6e>
 800acae:	ebac 0304 	sub.w	r3, ip, r4
 800acb2:	3b15      	subs	r3, #21
 800acb4:	f023 0303 	bic.w	r3, r3, #3
 800acb8:	3304      	adds	r3, #4
 800acba:	f104 0015 	add.w	r0, r4, #21
 800acbe:	4584      	cmp	ip, r0
 800acc0:	bf38      	it	cc
 800acc2:	2304      	movcc	r3, #4
 800acc4:	50ca      	str	r2, [r1, r3]
 800acc6:	b10a      	cbz	r2, 800accc <__lshift+0xa4>
 800acc8:	f108 0602 	add.w	r6, r8, #2
 800accc:	3e01      	subs	r6, #1
 800acce:	4638      	mov	r0, r7
 800acd0:	612e      	str	r6, [r5, #16]
 800acd2:	4621      	mov	r1, r4
 800acd4:	f7ff fd8e 	bl	800a7f4 <_Bfree>
 800acd8:	4628      	mov	r0, r5
 800acda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ace2:	3301      	adds	r3, #1
 800ace4:	e7c5      	b.n	800ac72 <__lshift+0x4a>
 800ace6:	3904      	subs	r1, #4
 800ace8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acec:	f841 2f04 	str.w	r2, [r1, #4]!
 800acf0:	459c      	cmp	ip, r3
 800acf2:	d8f9      	bhi.n	800ace8 <__lshift+0xc0>
 800acf4:	e7ea      	b.n	800accc <__lshift+0xa4>
 800acf6:	bf00      	nop
 800acf8:	0800e730 	.word	0x0800e730
 800acfc:	0800e741 	.word	0x0800e741

0800ad00 <__mcmp>:
 800ad00:	b530      	push	{r4, r5, lr}
 800ad02:	6902      	ldr	r2, [r0, #16]
 800ad04:	690c      	ldr	r4, [r1, #16]
 800ad06:	1b12      	subs	r2, r2, r4
 800ad08:	d10e      	bne.n	800ad28 <__mcmp+0x28>
 800ad0a:	f100 0314 	add.w	r3, r0, #20
 800ad0e:	3114      	adds	r1, #20
 800ad10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad20:	42a5      	cmp	r5, r4
 800ad22:	d003      	beq.n	800ad2c <__mcmp+0x2c>
 800ad24:	d305      	bcc.n	800ad32 <__mcmp+0x32>
 800ad26:	2201      	movs	r2, #1
 800ad28:	4610      	mov	r0, r2
 800ad2a:	bd30      	pop	{r4, r5, pc}
 800ad2c:	4283      	cmp	r3, r0
 800ad2e:	d3f3      	bcc.n	800ad18 <__mcmp+0x18>
 800ad30:	e7fa      	b.n	800ad28 <__mcmp+0x28>
 800ad32:	f04f 32ff 	mov.w	r2, #4294967295
 800ad36:	e7f7      	b.n	800ad28 <__mcmp+0x28>

0800ad38 <__mdiff>:
 800ad38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	4611      	mov	r1, r2
 800ad42:	4620      	mov	r0, r4
 800ad44:	4690      	mov	r8, r2
 800ad46:	f7ff ffdb 	bl	800ad00 <__mcmp>
 800ad4a:	1e05      	subs	r5, r0, #0
 800ad4c:	d110      	bne.n	800ad70 <__mdiff+0x38>
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4630      	mov	r0, r6
 800ad52:	f7ff fd0f 	bl	800a774 <_Balloc>
 800ad56:	b930      	cbnz	r0, 800ad66 <__mdiff+0x2e>
 800ad58:	4b3a      	ldr	r3, [pc, #232]	; (800ae44 <__mdiff+0x10c>)
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	f240 2137 	movw	r1, #567	; 0x237
 800ad60:	4839      	ldr	r0, [pc, #228]	; (800ae48 <__mdiff+0x110>)
 800ad62:	f7fe fd6f 	bl	8009844 <__assert_func>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	bfa4      	itt	ge
 800ad72:	4643      	movge	r3, r8
 800ad74:	46a0      	movge	r8, r4
 800ad76:	4630      	mov	r0, r6
 800ad78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad7c:	bfa6      	itte	ge
 800ad7e:	461c      	movge	r4, r3
 800ad80:	2500      	movge	r5, #0
 800ad82:	2501      	movlt	r5, #1
 800ad84:	f7ff fcf6 	bl	800a774 <_Balloc>
 800ad88:	b920      	cbnz	r0, 800ad94 <__mdiff+0x5c>
 800ad8a:	4b2e      	ldr	r3, [pc, #184]	; (800ae44 <__mdiff+0x10c>)
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	f240 2145 	movw	r1, #581	; 0x245
 800ad92:	e7e5      	b.n	800ad60 <__mdiff+0x28>
 800ad94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad98:	6926      	ldr	r6, [r4, #16]
 800ad9a:	60c5      	str	r5, [r0, #12]
 800ad9c:	f104 0914 	add.w	r9, r4, #20
 800ada0:	f108 0514 	add.w	r5, r8, #20
 800ada4:	f100 0e14 	add.w	lr, r0, #20
 800ada8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adb0:	f108 0210 	add.w	r2, r8, #16
 800adb4:	46f2      	mov	sl, lr
 800adb6:	2100      	movs	r1, #0
 800adb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800adbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adc0:	fa11 f88b 	uxtah	r8, r1, fp
 800adc4:	b299      	uxth	r1, r3
 800adc6:	0c1b      	lsrs	r3, r3, #16
 800adc8:	eba8 0801 	sub.w	r8, r8, r1
 800adcc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800add0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800add4:	fa1f f888 	uxth.w	r8, r8
 800add8:	1419      	asrs	r1, r3, #16
 800adda:	454e      	cmp	r6, r9
 800addc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ade0:	f84a 3b04 	str.w	r3, [sl], #4
 800ade4:	d8e8      	bhi.n	800adb8 <__mdiff+0x80>
 800ade6:	1b33      	subs	r3, r6, r4
 800ade8:	3b15      	subs	r3, #21
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	3304      	adds	r3, #4
 800adf0:	3415      	adds	r4, #21
 800adf2:	42a6      	cmp	r6, r4
 800adf4:	bf38      	it	cc
 800adf6:	2304      	movcc	r3, #4
 800adf8:	441d      	add	r5, r3
 800adfa:	4473      	add	r3, lr
 800adfc:	469e      	mov	lr, r3
 800adfe:	462e      	mov	r6, r5
 800ae00:	4566      	cmp	r6, ip
 800ae02:	d30e      	bcc.n	800ae22 <__mdiff+0xea>
 800ae04:	f10c 0203 	add.w	r2, ip, #3
 800ae08:	1b52      	subs	r2, r2, r5
 800ae0a:	f022 0203 	bic.w	r2, r2, #3
 800ae0e:	3d03      	subs	r5, #3
 800ae10:	45ac      	cmp	ip, r5
 800ae12:	bf38      	it	cc
 800ae14:	2200      	movcc	r2, #0
 800ae16:	4413      	add	r3, r2
 800ae18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae1c:	b17a      	cbz	r2, 800ae3e <__mdiff+0x106>
 800ae1e:	6107      	str	r7, [r0, #16]
 800ae20:	e7a4      	b.n	800ad6c <__mdiff+0x34>
 800ae22:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae26:	fa11 f288 	uxtah	r2, r1, r8
 800ae2a:	1414      	asrs	r4, r2, #16
 800ae2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae30:	b292      	uxth	r2, r2
 800ae32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae36:	f84e 2b04 	str.w	r2, [lr], #4
 800ae3a:	1421      	asrs	r1, r4, #16
 800ae3c:	e7e0      	b.n	800ae00 <__mdiff+0xc8>
 800ae3e:	3f01      	subs	r7, #1
 800ae40:	e7ea      	b.n	800ae18 <__mdiff+0xe0>
 800ae42:	bf00      	nop
 800ae44:	0800e730 	.word	0x0800e730
 800ae48:	0800e741 	.word	0x0800e741

0800ae4c <__ulp>:
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	ed8d 0b00 	vstr	d0, [sp]
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <__ulp+0x48>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dc08      	bgt.n	800ae72 <__ulp+0x26>
 800ae60:	425b      	negs	r3, r3
 800ae62:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ae66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae6a:	da04      	bge.n	800ae76 <__ulp+0x2a>
 800ae6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae70:	4113      	asrs	r3, r2
 800ae72:	2200      	movs	r2, #0
 800ae74:	e008      	b.n	800ae88 <__ulp+0x3c>
 800ae76:	f1a2 0314 	sub.w	r3, r2, #20
 800ae7a:	2b1e      	cmp	r3, #30
 800ae7c:	bfda      	itte	le
 800ae7e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ae82:	40da      	lsrle	r2, r3
 800ae84:	2201      	movgt	r2, #1
 800ae86:	2300      	movs	r3, #0
 800ae88:	4619      	mov	r1, r3
 800ae8a:	4610      	mov	r0, r2
 800ae8c:	ec41 0b10 	vmov	d0, r0, r1
 800ae90:	b002      	add	sp, #8
 800ae92:	4770      	bx	lr
 800ae94:	7ff00000 	.word	0x7ff00000

0800ae98 <__b2d>:
 800ae98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9c:	6906      	ldr	r6, [r0, #16]
 800ae9e:	f100 0814 	add.w	r8, r0, #20
 800aea2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aea6:	1f37      	subs	r7, r6, #4
 800aea8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aeac:	4610      	mov	r0, r2
 800aeae:	f7ff fd53 	bl	800a958 <__hi0bits>
 800aeb2:	f1c0 0320 	rsb	r3, r0, #32
 800aeb6:	280a      	cmp	r0, #10
 800aeb8:	600b      	str	r3, [r1, #0]
 800aeba:	491b      	ldr	r1, [pc, #108]	; (800af28 <__b2d+0x90>)
 800aebc:	dc15      	bgt.n	800aeea <__b2d+0x52>
 800aebe:	f1c0 0c0b 	rsb	ip, r0, #11
 800aec2:	fa22 f30c 	lsr.w	r3, r2, ip
 800aec6:	45b8      	cmp	r8, r7
 800aec8:	ea43 0501 	orr.w	r5, r3, r1
 800aecc:	bf34      	ite	cc
 800aece:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aed2:	2300      	movcs	r3, #0
 800aed4:	3015      	adds	r0, #21
 800aed6:	fa02 f000 	lsl.w	r0, r2, r0
 800aeda:	fa23 f30c 	lsr.w	r3, r3, ip
 800aede:	4303      	orrs	r3, r0
 800aee0:	461c      	mov	r4, r3
 800aee2:	ec45 4b10 	vmov	d0, r4, r5
 800aee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeea:	45b8      	cmp	r8, r7
 800aeec:	bf3a      	itte	cc
 800aeee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aef2:	f1a6 0708 	subcc.w	r7, r6, #8
 800aef6:	2300      	movcs	r3, #0
 800aef8:	380b      	subs	r0, #11
 800aefa:	d012      	beq.n	800af22 <__b2d+0x8a>
 800aefc:	f1c0 0120 	rsb	r1, r0, #32
 800af00:	fa23 f401 	lsr.w	r4, r3, r1
 800af04:	4082      	lsls	r2, r0
 800af06:	4322      	orrs	r2, r4
 800af08:	4547      	cmp	r7, r8
 800af0a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800af0e:	bf8c      	ite	hi
 800af10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af14:	2200      	movls	r2, #0
 800af16:	4083      	lsls	r3, r0
 800af18:	40ca      	lsrs	r2, r1
 800af1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af1e:	4313      	orrs	r3, r2
 800af20:	e7de      	b.n	800aee0 <__b2d+0x48>
 800af22:	ea42 0501 	orr.w	r5, r2, r1
 800af26:	e7db      	b.n	800aee0 <__b2d+0x48>
 800af28:	3ff00000 	.word	0x3ff00000

0800af2c <__d2b>:
 800af2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af30:	460f      	mov	r7, r1
 800af32:	2101      	movs	r1, #1
 800af34:	ec59 8b10 	vmov	r8, r9, d0
 800af38:	4616      	mov	r6, r2
 800af3a:	f7ff fc1b 	bl	800a774 <_Balloc>
 800af3e:	4604      	mov	r4, r0
 800af40:	b930      	cbnz	r0, 800af50 <__d2b+0x24>
 800af42:	4602      	mov	r2, r0
 800af44:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <__d2b+0xac>)
 800af46:	4825      	ldr	r0, [pc, #148]	; (800afdc <__d2b+0xb0>)
 800af48:	f240 310f 	movw	r1, #783	; 0x30f
 800af4c:	f7fe fc7a 	bl	8009844 <__assert_func>
 800af50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af58:	bb2d      	cbnz	r5, 800afa6 <__d2b+0x7a>
 800af5a:	9301      	str	r3, [sp, #4]
 800af5c:	f1b8 0300 	subs.w	r3, r8, #0
 800af60:	d026      	beq.n	800afb0 <__d2b+0x84>
 800af62:	4668      	mov	r0, sp
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	f7ff fd17 	bl	800a998 <__lo0bits>
 800af6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af6e:	b1e8      	cbz	r0, 800afac <__d2b+0x80>
 800af70:	f1c0 0320 	rsb	r3, r0, #32
 800af74:	fa02 f303 	lsl.w	r3, r2, r3
 800af78:	430b      	orrs	r3, r1
 800af7a:	40c2      	lsrs	r2, r0
 800af7c:	6163      	str	r3, [r4, #20]
 800af7e:	9201      	str	r2, [sp, #4]
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	61a3      	str	r3, [r4, #24]
 800af84:	2b00      	cmp	r3, #0
 800af86:	bf14      	ite	ne
 800af88:	2202      	movne	r2, #2
 800af8a:	2201      	moveq	r2, #1
 800af8c:	6122      	str	r2, [r4, #16]
 800af8e:	b1bd      	cbz	r5, 800afc0 <__d2b+0x94>
 800af90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af94:	4405      	add	r5, r0
 800af96:	603d      	str	r5, [r7, #0]
 800af98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af9c:	6030      	str	r0, [r6, #0]
 800af9e:	4620      	mov	r0, r4
 800afa0:	b003      	add	sp, #12
 800afa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afaa:	e7d6      	b.n	800af5a <__d2b+0x2e>
 800afac:	6161      	str	r1, [r4, #20]
 800afae:	e7e7      	b.n	800af80 <__d2b+0x54>
 800afb0:	a801      	add	r0, sp, #4
 800afb2:	f7ff fcf1 	bl	800a998 <__lo0bits>
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	6163      	str	r3, [r4, #20]
 800afba:	3020      	adds	r0, #32
 800afbc:	2201      	movs	r2, #1
 800afbe:	e7e5      	b.n	800af8c <__d2b+0x60>
 800afc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800afc8:	6038      	str	r0, [r7, #0]
 800afca:	6918      	ldr	r0, [r3, #16]
 800afcc:	f7ff fcc4 	bl	800a958 <__hi0bits>
 800afd0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afd4:	e7e2      	b.n	800af9c <__d2b+0x70>
 800afd6:	bf00      	nop
 800afd8:	0800e730 	.word	0x0800e730
 800afdc:	0800e741 	.word	0x0800e741

0800afe0 <__ratio>:
 800afe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	4688      	mov	r8, r1
 800afe6:	4669      	mov	r1, sp
 800afe8:	4681      	mov	r9, r0
 800afea:	f7ff ff55 	bl	800ae98 <__b2d>
 800afee:	a901      	add	r1, sp, #4
 800aff0:	4640      	mov	r0, r8
 800aff2:	ec55 4b10 	vmov	r4, r5, d0
 800aff6:	f7ff ff4f 	bl	800ae98 <__b2d>
 800affa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800affe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b002:	eba3 0c02 	sub.w	ip, r3, r2
 800b006:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b00a:	1a9b      	subs	r3, r3, r2
 800b00c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b010:	ec51 0b10 	vmov	r0, r1, d0
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfd6      	itet	le
 800b018:	460a      	movle	r2, r1
 800b01a:	462a      	movgt	r2, r5
 800b01c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b020:	468b      	mov	fp, r1
 800b022:	462f      	mov	r7, r5
 800b024:	bfd4      	ite	le
 800b026:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b02a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b02e:	4620      	mov	r0, r4
 800b030:	ee10 2a10 	vmov	r2, s0
 800b034:	465b      	mov	r3, fp
 800b036:	4639      	mov	r1, r7
 800b038:	f7f5 fc10 	bl	800085c <__aeabi_ddiv>
 800b03c:	ec41 0b10 	vmov	d0, r0, r1
 800b040:	b003      	add	sp, #12
 800b042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b046 <__copybits>:
 800b046:	3901      	subs	r1, #1
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	1149      	asrs	r1, r1, #5
 800b04c:	6914      	ldr	r4, [r2, #16]
 800b04e:	3101      	adds	r1, #1
 800b050:	f102 0314 	add.w	r3, r2, #20
 800b054:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b058:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b05c:	1f05      	subs	r5, r0, #4
 800b05e:	42a3      	cmp	r3, r4
 800b060:	d30c      	bcc.n	800b07c <__copybits+0x36>
 800b062:	1aa3      	subs	r3, r4, r2
 800b064:	3b11      	subs	r3, #17
 800b066:	f023 0303 	bic.w	r3, r3, #3
 800b06a:	3211      	adds	r2, #17
 800b06c:	42a2      	cmp	r2, r4
 800b06e:	bf88      	it	hi
 800b070:	2300      	movhi	r3, #0
 800b072:	4418      	add	r0, r3
 800b074:	2300      	movs	r3, #0
 800b076:	4288      	cmp	r0, r1
 800b078:	d305      	bcc.n	800b086 <__copybits+0x40>
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b080:	f845 6f04 	str.w	r6, [r5, #4]!
 800b084:	e7eb      	b.n	800b05e <__copybits+0x18>
 800b086:	f840 3b04 	str.w	r3, [r0], #4
 800b08a:	e7f4      	b.n	800b076 <__copybits+0x30>

0800b08c <__any_on>:
 800b08c:	f100 0214 	add.w	r2, r0, #20
 800b090:	6900      	ldr	r0, [r0, #16]
 800b092:	114b      	asrs	r3, r1, #5
 800b094:	4298      	cmp	r0, r3
 800b096:	b510      	push	{r4, lr}
 800b098:	db11      	blt.n	800b0be <__any_on+0x32>
 800b09a:	dd0a      	ble.n	800b0b2 <__any_on+0x26>
 800b09c:	f011 011f 	ands.w	r1, r1, #31
 800b0a0:	d007      	beq.n	800b0b2 <__any_on+0x26>
 800b0a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0a6:	fa24 f001 	lsr.w	r0, r4, r1
 800b0aa:	fa00 f101 	lsl.w	r1, r0, r1
 800b0ae:	428c      	cmp	r4, r1
 800b0b0:	d10b      	bne.n	800b0ca <__any_on+0x3e>
 800b0b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d803      	bhi.n	800b0c2 <__any_on+0x36>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	4603      	mov	r3, r0
 800b0c0:	e7f7      	b.n	800b0b2 <__any_on+0x26>
 800b0c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d0f5      	beq.n	800b0b6 <__any_on+0x2a>
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	e7f6      	b.n	800b0bc <__any_on+0x30>

0800b0ce <sulp>:
 800b0ce:	b570      	push	{r4, r5, r6, lr}
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	ec45 4b10 	vmov	d0, r4, r5
 800b0d8:	4616      	mov	r6, r2
 800b0da:	f7ff feb7 	bl	800ae4c <__ulp>
 800b0de:	ec51 0b10 	vmov	r0, r1, d0
 800b0e2:	b17e      	cbz	r6, 800b104 <sulp+0x36>
 800b0e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b0e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd09      	ble.n	800b104 <sulp+0x36>
 800b0f0:	051b      	lsls	r3, r3, #20
 800b0f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b0f6:	2400      	movs	r4, #0
 800b0f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	462b      	mov	r3, r5
 800b100:	f7f5 fa82 	bl	8000608 <__aeabi_dmul>
 800b104:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b108 <_strtod_l>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	ed2d 8b02 	vpush	{d8}
 800b110:	b09b      	sub	sp, #108	; 0x6c
 800b112:	4604      	mov	r4, r0
 800b114:	9213      	str	r2, [sp, #76]	; 0x4c
 800b116:	2200      	movs	r2, #0
 800b118:	9216      	str	r2, [sp, #88]	; 0x58
 800b11a:	460d      	mov	r5, r1
 800b11c:	f04f 0800 	mov.w	r8, #0
 800b120:	f04f 0900 	mov.w	r9, #0
 800b124:	460a      	mov	r2, r1
 800b126:	9215      	str	r2, [sp, #84]	; 0x54
 800b128:	7811      	ldrb	r1, [r2, #0]
 800b12a:	292b      	cmp	r1, #43	; 0x2b
 800b12c:	d04c      	beq.n	800b1c8 <_strtod_l+0xc0>
 800b12e:	d83a      	bhi.n	800b1a6 <_strtod_l+0x9e>
 800b130:	290d      	cmp	r1, #13
 800b132:	d834      	bhi.n	800b19e <_strtod_l+0x96>
 800b134:	2908      	cmp	r1, #8
 800b136:	d834      	bhi.n	800b1a2 <_strtod_l+0x9a>
 800b138:	2900      	cmp	r1, #0
 800b13a:	d03d      	beq.n	800b1b8 <_strtod_l+0xb0>
 800b13c:	2200      	movs	r2, #0
 800b13e:	920a      	str	r2, [sp, #40]	; 0x28
 800b140:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b142:	7832      	ldrb	r2, [r6, #0]
 800b144:	2a30      	cmp	r2, #48	; 0x30
 800b146:	f040 80b4 	bne.w	800b2b2 <_strtod_l+0x1aa>
 800b14a:	7872      	ldrb	r2, [r6, #1]
 800b14c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b150:	2a58      	cmp	r2, #88	; 0x58
 800b152:	d170      	bne.n	800b236 <_strtod_l+0x12e>
 800b154:	9302      	str	r3, [sp, #8]
 800b156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	ab16      	add	r3, sp, #88	; 0x58
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	4a8e      	ldr	r2, [pc, #568]	; (800b398 <_strtod_l+0x290>)
 800b160:	ab17      	add	r3, sp, #92	; 0x5c
 800b162:	a915      	add	r1, sp, #84	; 0x54
 800b164:	4620      	mov	r0, r4
 800b166:	f001 faa3 	bl	800c6b0 <__gethex>
 800b16a:	f010 070f 	ands.w	r7, r0, #15
 800b16e:	4605      	mov	r5, r0
 800b170:	d005      	beq.n	800b17e <_strtod_l+0x76>
 800b172:	2f06      	cmp	r7, #6
 800b174:	d12a      	bne.n	800b1cc <_strtod_l+0xc4>
 800b176:	3601      	adds	r6, #1
 800b178:	2300      	movs	r3, #0
 800b17a:	9615      	str	r6, [sp, #84]	; 0x54
 800b17c:	930a      	str	r3, [sp, #40]	; 0x28
 800b17e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b180:	2b00      	cmp	r3, #0
 800b182:	f040 857f 	bne.w	800bc84 <_strtod_l+0xb7c>
 800b186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b188:	b1db      	cbz	r3, 800b1c2 <_strtod_l+0xba>
 800b18a:	4642      	mov	r2, r8
 800b18c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b190:	ec43 2b10 	vmov	d0, r2, r3
 800b194:	b01b      	add	sp, #108	; 0x6c
 800b196:	ecbd 8b02 	vpop	{d8}
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	2920      	cmp	r1, #32
 800b1a0:	d1cc      	bne.n	800b13c <_strtod_l+0x34>
 800b1a2:	3201      	adds	r2, #1
 800b1a4:	e7bf      	b.n	800b126 <_strtod_l+0x1e>
 800b1a6:	292d      	cmp	r1, #45	; 0x2d
 800b1a8:	d1c8      	bne.n	800b13c <_strtod_l+0x34>
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	910a      	str	r1, [sp, #40]	; 0x28
 800b1ae:	1c51      	adds	r1, r2, #1
 800b1b0:	9115      	str	r1, [sp, #84]	; 0x54
 800b1b2:	7852      	ldrb	r2, [r2, #1]
 800b1b4:	2a00      	cmp	r2, #0
 800b1b6:	d1c3      	bne.n	800b140 <_strtod_l+0x38>
 800b1b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1ba:	9515      	str	r5, [sp, #84]	; 0x54
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 855f 	bne.w	800bc80 <_strtod_l+0xb78>
 800b1c2:	4642      	mov	r2, r8
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	e7e3      	b.n	800b190 <_strtod_l+0x88>
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	e7ef      	b.n	800b1ac <_strtod_l+0xa4>
 800b1cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b1ce:	b13a      	cbz	r2, 800b1e0 <_strtod_l+0xd8>
 800b1d0:	2135      	movs	r1, #53	; 0x35
 800b1d2:	a818      	add	r0, sp, #96	; 0x60
 800b1d4:	f7ff ff37 	bl	800b046 <__copybits>
 800b1d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f7ff fb0a 	bl	800a7f4 <_Bfree>
 800b1e0:	3f01      	subs	r7, #1
 800b1e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1e4:	2f04      	cmp	r7, #4
 800b1e6:	d806      	bhi.n	800b1f6 <_strtod_l+0xee>
 800b1e8:	e8df f007 	tbb	[pc, r7]
 800b1ec:	201d0314 	.word	0x201d0314
 800b1f0:	14          	.byte	0x14
 800b1f1:	00          	.byte	0x00
 800b1f2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b1f6:	05e9      	lsls	r1, r5, #23
 800b1f8:	bf48      	it	mi
 800b1fa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b1fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b202:	0d1b      	lsrs	r3, r3, #20
 800b204:	051b      	lsls	r3, r3, #20
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1b9      	bne.n	800b17e <_strtod_l+0x76>
 800b20a:	f7fe fad9 	bl	80097c0 <__errno>
 800b20e:	2322      	movs	r3, #34	; 0x22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	e7b4      	b.n	800b17e <_strtod_l+0x76>
 800b214:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b218:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b21c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b220:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b224:	e7e7      	b.n	800b1f6 <_strtod_l+0xee>
 800b226:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b3a0 <_strtod_l+0x298>
 800b22a:	e7e4      	b.n	800b1f6 <_strtod_l+0xee>
 800b22c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b230:	f04f 38ff 	mov.w	r8, #4294967295
 800b234:	e7df      	b.n	800b1f6 <_strtod_l+0xee>
 800b236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b238:	1c5a      	adds	r2, r3, #1
 800b23a:	9215      	str	r2, [sp, #84]	; 0x54
 800b23c:	785b      	ldrb	r3, [r3, #1]
 800b23e:	2b30      	cmp	r3, #48	; 0x30
 800b240:	d0f9      	beq.n	800b236 <_strtod_l+0x12e>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d09b      	beq.n	800b17e <_strtod_l+0x76>
 800b246:	2301      	movs	r3, #1
 800b248:	f04f 0a00 	mov.w	sl, #0
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b250:	930b      	str	r3, [sp, #44]	; 0x2c
 800b252:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b256:	46d3      	mov	fp, sl
 800b258:	220a      	movs	r2, #10
 800b25a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b25c:	7806      	ldrb	r6, [r0, #0]
 800b25e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b262:	b2d9      	uxtb	r1, r3
 800b264:	2909      	cmp	r1, #9
 800b266:	d926      	bls.n	800b2b6 <_strtod_l+0x1ae>
 800b268:	494c      	ldr	r1, [pc, #304]	; (800b39c <_strtod_l+0x294>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	f001 f94e 	bl	800c50c <strncmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	d030      	beq.n	800b2d6 <_strtod_l+0x1ce>
 800b274:	2000      	movs	r0, #0
 800b276:	4632      	mov	r2, r6
 800b278:	9005      	str	r0, [sp, #20]
 800b27a:	465e      	mov	r6, fp
 800b27c:	4603      	mov	r3, r0
 800b27e:	2a65      	cmp	r2, #101	; 0x65
 800b280:	d001      	beq.n	800b286 <_strtod_l+0x17e>
 800b282:	2a45      	cmp	r2, #69	; 0x45
 800b284:	d113      	bne.n	800b2ae <_strtod_l+0x1a6>
 800b286:	b91e      	cbnz	r6, 800b290 <_strtod_l+0x188>
 800b288:	9a04      	ldr	r2, [sp, #16]
 800b28a:	4302      	orrs	r2, r0
 800b28c:	d094      	beq.n	800b1b8 <_strtod_l+0xb0>
 800b28e:	2600      	movs	r6, #0
 800b290:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b292:	1c6a      	adds	r2, r5, #1
 800b294:	9215      	str	r2, [sp, #84]	; 0x54
 800b296:	786a      	ldrb	r2, [r5, #1]
 800b298:	2a2b      	cmp	r2, #43	; 0x2b
 800b29a:	d074      	beq.n	800b386 <_strtod_l+0x27e>
 800b29c:	2a2d      	cmp	r2, #45	; 0x2d
 800b29e:	d078      	beq.n	800b392 <_strtod_l+0x28a>
 800b2a0:	f04f 0c00 	mov.w	ip, #0
 800b2a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b2a8:	2909      	cmp	r1, #9
 800b2aa:	d97f      	bls.n	800b3ac <_strtod_l+0x2a4>
 800b2ac:	9515      	str	r5, [sp, #84]	; 0x54
 800b2ae:	2700      	movs	r7, #0
 800b2b0:	e09e      	b.n	800b3f0 <_strtod_l+0x2e8>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e7c8      	b.n	800b248 <_strtod_l+0x140>
 800b2b6:	f1bb 0f08 	cmp.w	fp, #8
 800b2ba:	bfd8      	it	le
 800b2bc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b2be:	f100 0001 	add.w	r0, r0, #1
 800b2c2:	bfda      	itte	le
 800b2c4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b2c8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b2ca:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b2ce:	f10b 0b01 	add.w	fp, fp, #1
 800b2d2:	9015      	str	r0, [sp, #84]	; 0x54
 800b2d4:	e7c1      	b.n	800b25a <_strtod_l+0x152>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	9215      	str	r2, [sp, #84]	; 0x54
 800b2dc:	785a      	ldrb	r2, [r3, #1]
 800b2de:	f1bb 0f00 	cmp.w	fp, #0
 800b2e2:	d037      	beq.n	800b354 <_strtod_l+0x24c>
 800b2e4:	9005      	str	r0, [sp, #20]
 800b2e6:	465e      	mov	r6, fp
 800b2e8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b2ec:	2b09      	cmp	r3, #9
 800b2ee:	d912      	bls.n	800b316 <_strtod_l+0x20e>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e7c4      	b.n	800b27e <_strtod_l+0x176>
 800b2f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f6:	1c5a      	adds	r2, r3, #1
 800b2f8:	9215      	str	r2, [sp, #84]	; 0x54
 800b2fa:	785a      	ldrb	r2, [r3, #1]
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	2a30      	cmp	r2, #48	; 0x30
 800b300:	d0f8      	beq.n	800b2f4 <_strtod_l+0x1ec>
 800b302:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b306:	2b08      	cmp	r3, #8
 800b308:	f200 84c1 	bhi.w	800bc8e <_strtod_l+0xb86>
 800b30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b30e:	9005      	str	r0, [sp, #20]
 800b310:	2000      	movs	r0, #0
 800b312:	930b      	str	r3, [sp, #44]	; 0x2c
 800b314:	4606      	mov	r6, r0
 800b316:	3a30      	subs	r2, #48	; 0x30
 800b318:	f100 0301 	add.w	r3, r0, #1
 800b31c:	d014      	beq.n	800b348 <_strtod_l+0x240>
 800b31e:	9905      	ldr	r1, [sp, #20]
 800b320:	4419      	add	r1, r3
 800b322:	9105      	str	r1, [sp, #20]
 800b324:	4633      	mov	r3, r6
 800b326:	eb00 0c06 	add.w	ip, r0, r6
 800b32a:	210a      	movs	r1, #10
 800b32c:	4563      	cmp	r3, ip
 800b32e:	d113      	bne.n	800b358 <_strtod_l+0x250>
 800b330:	1833      	adds	r3, r6, r0
 800b332:	2b08      	cmp	r3, #8
 800b334:	f106 0601 	add.w	r6, r6, #1
 800b338:	4406      	add	r6, r0
 800b33a:	dc1a      	bgt.n	800b372 <_strtod_l+0x26a>
 800b33c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b33e:	230a      	movs	r3, #10
 800b340:	fb03 2301 	mla	r3, r3, r1, r2
 800b344:	9309      	str	r3, [sp, #36]	; 0x24
 800b346:	2300      	movs	r3, #0
 800b348:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b34a:	1c51      	adds	r1, r2, #1
 800b34c:	9115      	str	r1, [sp, #84]	; 0x54
 800b34e:	7852      	ldrb	r2, [r2, #1]
 800b350:	4618      	mov	r0, r3
 800b352:	e7c9      	b.n	800b2e8 <_strtod_l+0x1e0>
 800b354:	4658      	mov	r0, fp
 800b356:	e7d2      	b.n	800b2fe <_strtod_l+0x1f6>
 800b358:	2b08      	cmp	r3, #8
 800b35a:	f103 0301 	add.w	r3, r3, #1
 800b35e:	dc03      	bgt.n	800b368 <_strtod_l+0x260>
 800b360:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b362:	434f      	muls	r7, r1
 800b364:	9709      	str	r7, [sp, #36]	; 0x24
 800b366:	e7e1      	b.n	800b32c <_strtod_l+0x224>
 800b368:	2b10      	cmp	r3, #16
 800b36a:	bfd8      	it	le
 800b36c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b370:	e7dc      	b.n	800b32c <_strtod_l+0x224>
 800b372:	2e10      	cmp	r6, #16
 800b374:	bfdc      	itt	le
 800b376:	230a      	movle	r3, #10
 800b378:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b37c:	e7e3      	b.n	800b346 <_strtod_l+0x23e>
 800b37e:	2300      	movs	r3, #0
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	2301      	movs	r3, #1
 800b384:	e780      	b.n	800b288 <_strtod_l+0x180>
 800b386:	f04f 0c00 	mov.w	ip, #0
 800b38a:	1caa      	adds	r2, r5, #2
 800b38c:	9215      	str	r2, [sp, #84]	; 0x54
 800b38e:	78aa      	ldrb	r2, [r5, #2]
 800b390:	e788      	b.n	800b2a4 <_strtod_l+0x19c>
 800b392:	f04f 0c01 	mov.w	ip, #1
 800b396:	e7f8      	b.n	800b38a <_strtod_l+0x282>
 800b398:	0800e8a0 	.word	0x0800e8a0
 800b39c:	0800e89c 	.word	0x0800e89c
 800b3a0:	7ff00000 	.word	0x7ff00000
 800b3a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3a6:	1c51      	adds	r1, r2, #1
 800b3a8:	9115      	str	r1, [sp, #84]	; 0x54
 800b3aa:	7852      	ldrb	r2, [r2, #1]
 800b3ac:	2a30      	cmp	r2, #48	; 0x30
 800b3ae:	d0f9      	beq.n	800b3a4 <_strtod_l+0x29c>
 800b3b0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b3b4:	2908      	cmp	r1, #8
 800b3b6:	f63f af7a 	bhi.w	800b2ae <_strtod_l+0x1a6>
 800b3ba:	3a30      	subs	r2, #48	; 0x30
 800b3bc:	9208      	str	r2, [sp, #32]
 800b3be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3c0:	920c      	str	r2, [sp, #48]	; 0x30
 800b3c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3c4:	1c57      	adds	r7, r2, #1
 800b3c6:	9715      	str	r7, [sp, #84]	; 0x54
 800b3c8:	7852      	ldrb	r2, [r2, #1]
 800b3ca:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b3ce:	f1be 0f09 	cmp.w	lr, #9
 800b3d2:	d938      	bls.n	800b446 <_strtod_l+0x33e>
 800b3d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b3d6:	1a7f      	subs	r7, r7, r1
 800b3d8:	2f08      	cmp	r7, #8
 800b3da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b3de:	dc03      	bgt.n	800b3e8 <_strtod_l+0x2e0>
 800b3e0:	9908      	ldr	r1, [sp, #32]
 800b3e2:	428f      	cmp	r7, r1
 800b3e4:	bfa8      	it	ge
 800b3e6:	460f      	movge	r7, r1
 800b3e8:	f1bc 0f00 	cmp.w	ip, #0
 800b3ec:	d000      	beq.n	800b3f0 <_strtod_l+0x2e8>
 800b3ee:	427f      	negs	r7, r7
 800b3f0:	2e00      	cmp	r6, #0
 800b3f2:	d14f      	bne.n	800b494 <_strtod_l+0x38c>
 800b3f4:	9904      	ldr	r1, [sp, #16]
 800b3f6:	4301      	orrs	r1, r0
 800b3f8:	f47f aec1 	bne.w	800b17e <_strtod_l+0x76>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f47f aedb 	bne.w	800b1b8 <_strtod_l+0xb0>
 800b402:	2a69      	cmp	r2, #105	; 0x69
 800b404:	d029      	beq.n	800b45a <_strtod_l+0x352>
 800b406:	dc26      	bgt.n	800b456 <_strtod_l+0x34e>
 800b408:	2a49      	cmp	r2, #73	; 0x49
 800b40a:	d026      	beq.n	800b45a <_strtod_l+0x352>
 800b40c:	2a4e      	cmp	r2, #78	; 0x4e
 800b40e:	f47f aed3 	bne.w	800b1b8 <_strtod_l+0xb0>
 800b412:	499b      	ldr	r1, [pc, #620]	; (800b680 <_strtod_l+0x578>)
 800b414:	a815      	add	r0, sp, #84	; 0x54
 800b416:	f001 fb8b 	bl	800cb30 <__match>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	f43f aecc 	beq.w	800b1b8 <_strtod_l+0xb0>
 800b420:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b28      	cmp	r3, #40	; 0x28
 800b426:	d12f      	bne.n	800b488 <_strtod_l+0x380>
 800b428:	4996      	ldr	r1, [pc, #600]	; (800b684 <_strtod_l+0x57c>)
 800b42a:	aa18      	add	r2, sp, #96	; 0x60
 800b42c:	a815      	add	r0, sp, #84	; 0x54
 800b42e:	f001 fb93 	bl	800cb58 <__hexnan>
 800b432:	2805      	cmp	r0, #5
 800b434:	d128      	bne.n	800b488 <_strtod_l+0x380>
 800b436:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b43c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b440:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b444:	e69b      	b.n	800b17e <_strtod_l+0x76>
 800b446:	9f08      	ldr	r7, [sp, #32]
 800b448:	210a      	movs	r1, #10
 800b44a:	fb01 2107 	mla	r1, r1, r7, r2
 800b44e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b452:	9208      	str	r2, [sp, #32]
 800b454:	e7b5      	b.n	800b3c2 <_strtod_l+0x2ba>
 800b456:	2a6e      	cmp	r2, #110	; 0x6e
 800b458:	e7d9      	b.n	800b40e <_strtod_l+0x306>
 800b45a:	498b      	ldr	r1, [pc, #556]	; (800b688 <_strtod_l+0x580>)
 800b45c:	a815      	add	r0, sp, #84	; 0x54
 800b45e:	f001 fb67 	bl	800cb30 <__match>
 800b462:	2800      	cmp	r0, #0
 800b464:	f43f aea8 	beq.w	800b1b8 <_strtod_l+0xb0>
 800b468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b46a:	4988      	ldr	r1, [pc, #544]	; (800b68c <_strtod_l+0x584>)
 800b46c:	3b01      	subs	r3, #1
 800b46e:	a815      	add	r0, sp, #84	; 0x54
 800b470:	9315      	str	r3, [sp, #84]	; 0x54
 800b472:	f001 fb5d 	bl	800cb30 <__match>
 800b476:	b910      	cbnz	r0, 800b47e <_strtod_l+0x376>
 800b478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b47a:	3301      	adds	r3, #1
 800b47c:	9315      	str	r3, [sp, #84]	; 0x54
 800b47e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b69c <_strtod_l+0x594>
 800b482:	f04f 0800 	mov.w	r8, #0
 800b486:	e67a      	b.n	800b17e <_strtod_l+0x76>
 800b488:	4881      	ldr	r0, [pc, #516]	; (800b690 <_strtod_l+0x588>)
 800b48a:	f001 f885 	bl	800c598 <nan>
 800b48e:	ec59 8b10 	vmov	r8, r9, d0
 800b492:	e674      	b.n	800b17e <_strtod_l+0x76>
 800b494:	9b05      	ldr	r3, [sp, #20]
 800b496:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b498:	1afb      	subs	r3, r7, r3
 800b49a:	f1bb 0f00 	cmp.w	fp, #0
 800b49e:	bf08      	it	eq
 800b4a0:	46b3      	moveq	fp, r6
 800b4a2:	2e10      	cmp	r6, #16
 800b4a4:	9308      	str	r3, [sp, #32]
 800b4a6:	4635      	mov	r5, r6
 800b4a8:	bfa8      	it	ge
 800b4aa:	2510      	movge	r5, #16
 800b4ac:	f7f5 f832 	bl	8000514 <__aeabi_ui2d>
 800b4b0:	2e09      	cmp	r6, #9
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	dd13      	ble.n	800b4e0 <_strtod_l+0x3d8>
 800b4b8:	4b76      	ldr	r3, [pc, #472]	; (800b694 <_strtod_l+0x58c>)
 800b4ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b4be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b4c2:	f7f5 f8a1 	bl	8000608 <__aeabi_dmul>
 800b4c6:	4680      	mov	r8, r0
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	4689      	mov	r9, r1
 800b4cc:	f7f5 f822 	bl	8000514 <__aeabi_ui2d>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	f7f4 fee0 	bl	800029c <__adddf3>
 800b4dc:	4680      	mov	r8, r0
 800b4de:	4689      	mov	r9, r1
 800b4e0:	2e0f      	cmp	r6, #15
 800b4e2:	dc38      	bgt.n	800b556 <_strtod_l+0x44e>
 800b4e4:	9b08      	ldr	r3, [sp, #32]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	f43f ae49 	beq.w	800b17e <_strtod_l+0x76>
 800b4ec:	dd24      	ble.n	800b538 <_strtod_l+0x430>
 800b4ee:	2b16      	cmp	r3, #22
 800b4f0:	dc0b      	bgt.n	800b50a <_strtod_l+0x402>
 800b4f2:	4968      	ldr	r1, [pc, #416]	; (800b694 <_strtod_l+0x58c>)
 800b4f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	464b      	mov	r3, r9
 800b500:	f7f5 f882 	bl	8000608 <__aeabi_dmul>
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	e639      	b.n	800b17e <_strtod_l+0x76>
 800b50a:	9a08      	ldr	r2, [sp, #32]
 800b50c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b510:	4293      	cmp	r3, r2
 800b512:	db20      	blt.n	800b556 <_strtod_l+0x44e>
 800b514:	4c5f      	ldr	r4, [pc, #380]	; (800b694 <_strtod_l+0x58c>)
 800b516:	f1c6 060f 	rsb	r6, r6, #15
 800b51a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b526:	f7f5 f86f 	bl	8000608 <__aeabi_dmul>
 800b52a:	9b08      	ldr	r3, [sp, #32]
 800b52c:	1b9e      	subs	r6, r3, r6
 800b52e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b532:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b536:	e7e3      	b.n	800b500 <_strtod_l+0x3f8>
 800b538:	9b08      	ldr	r3, [sp, #32]
 800b53a:	3316      	adds	r3, #22
 800b53c:	db0b      	blt.n	800b556 <_strtod_l+0x44e>
 800b53e:	9b05      	ldr	r3, [sp, #20]
 800b540:	1bdf      	subs	r7, r3, r7
 800b542:	4b54      	ldr	r3, [pc, #336]	; (800b694 <_strtod_l+0x58c>)
 800b544:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f5 f984 	bl	800085c <__aeabi_ddiv>
 800b554:	e7d6      	b.n	800b504 <_strtod_l+0x3fc>
 800b556:	9b08      	ldr	r3, [sp, #32]
 800b558:	1b75      	subs	r5, r6, r5
 800b55a:	441d      	add	r5, r3
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	dd70      	ble.n	800b642 <_strtod_l+0x53a>
 800b560:	f015 030f 	ands.w	r3, r5, #15
 800b564:	d00a      	beq.n	800b57c <_strtod_l+0x474>
 800b566:	494b      	ldr	r1, [pc, #300]	; (800b694 <_strtod_l+0x58c>)
 800b568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b574:	f7f5 f848 	bl	8000608 <__aeabi_dmul>
 800b578:	4680      	mov	r8, r0
 800b57a:	4689      	mov	r9, r1
 800b57c:	f035 050f 	bics.w	r5, r5, #15
 800b580:	d04d      	beq.n	800b61e <_strtod_l+0x516>
 800b582:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b586:	dd22      	ble.n	800b5ce <_strtod_l+0x4c6>
 800b588:	2500      	movs	r5, #0
 800b58a:	46ab      	mov	fp, r5
 800b58c:	9509      	str	r5, [sp, #36]	; 0x24
 800b58e:	9505      	str	r5, [sp, #20]
 800b590:	2322      	movs	r3, #34	; 0x22
 800b592:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b69c <_strtod_l+0x594>
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	f04f 0800 	mov.w	r8, #0
 800b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f43f aded 	beq.w	800b17e <_strtod_l+0x76>
 800b5a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	f7ff f924 	bl	800a7f4 <_Bfree>
 800b5ac:	9905      	ldr	r1, [sp, #20]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	f7ff f920 	bl	800a7f4 <_Bfree>
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff f91c 	bl	800a7f4 <_Bfree>
 800b5bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f7ff f918 	bl	800a7f4 <_Bfree>
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff f914 	bl	800a7f4 <_Bfree>
 800b5cc:	e5d7      	b.n	800b17e <_strtod_l+0x76>
 800b5ce:	4b32      	ldr	r3, [pc, #200]	; (800b698 <_strtod_l+0x590>)
 800b5d0:	9304      	str	r3, [sp, #16]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	112d      	asrs	r5, r5, #4
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	469a      	mov	sl, r3
 800b5dc:	2d01      	cmp	r5, #1
 800b5de:	dc21      	bgt.n	800b624 <_strtod_l+0x51c>
 800b5e0:	b10b      	cbz	r3, 800b5e6 <_strtod_l+0x4de>
 800b5e2:	4680      	mov	r8, r0
 800b5e4:	4689      	mov	r9, r1
 800b5e6:	492c      	ldr	r1, [pc, #176]	; (800b698 <_strtod_l+0x590>)
 800b5e8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b5ec:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b5f0:	4642      	mov	r2, r8
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5f8:	f7f5 f806 	bl	8000608 <__aeabi_dmul>
 800b5fc:	4b27      	ldr	r3, [pc, #156]	; (800b69c <_strtod_l+0x594>)
 800b5fe:	460a      	mov	r2, r1
 800b600:	400b      	ands	r3, r1
 800b602:	4927      	ldr	r1, [pc, #156]	; (800b6a0 <_strtod_l+0x598>)
 800b604:	428b      	cmp	r3, r1
 800b606:	4680      	mov	r8, r0
 800b608:	d8be      	bhi.n	800b588 <_strtod_l+0x480>
 800b60a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b60e:	428b      	cmp	r3, r1
 800b610:	bf86      	itte	hi
 800b612:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b6a4 <_strtod_l+0x59c>
 800b616:	f04f 38ff 	movhi.w	r8, #4294967295
 800b61a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b61e:	2300      	movs	r3, #0
 800b620:	9304      	str	r3, [sp, #16]
 800b622:	e07b      	b.n	800b71c <_strtod_l+0x614>
 800b624:	07ea      	lsls	r2, r5, #31
 800b626:	d505      	bpl.n	800b634 <_strtod_l+0x52c>
 800b628:	9b04      	ldr	r3, [sp, #16]
 800b62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62e:	f7f4 ffeb 	bl	8000608 <__aeabi_dmul>
 800b632:	2301      	movs	r3, #1
 800b634:	9a04      	ldr	r2, [sp, #16]
 800b636:	3208      	adds	r2, #8
 800b638:	f10a 0a01 	add.w	sl, sl, #1
 800b63c:	106d      	asrs	r5, r5, #1
 800b63e:	9204      	str	r2, [sp, #16]
 800b640:	e7cc      	b.n	800b5dc <_strtod_l+0x4d4>
 800b642:	d0ec      	beq.n	800b61e <_strtod_l+0x516>
 800b644:	426d      	negs	r5, r5
 800b646:	f015 020f 	ands.w	r2, r5, #15
 800b64a:	d00a      	beq.n	800b662 <_strtod_l+0x55a>
 800b64c:	4b11      	ldr	r3, [pc, #68]	; (800b694 <_strtod_l+0x58c>)
 800b64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f5 f8ff 	bl	800085c <__aeabi_ddiv>
 800b65e:	4680      	mov	r8, r0
 800b660:	4689      	mov	r9, r1
 800b662:	112d      	asrs	r5, r5, #4
 800b664:	d0db      	beq.n	800b61e <_strtod_l+0x516>
 800b666:	2d1f      	cmp	r5, #31
 800b668:	dd1e      	ble.n	800b6a8 <_strtod_l+0x5a0>
 800b66a:	2500      	movs	r5, #0
 800b66c:	46ab      	mov	fp, r5
 800b66e:	9509      	str	r5, [sp, #36]	; 0x24
 800b670:	9505      	str	r5, [sp, #20]
 800b672:	2322      	movs	r3, #34	; 0x22
 800b674:	f04f 0800 	mov.w	r8, #0
 800b678:	f04f 0900 	mov.w	r9, #0
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	e78d      	b.n	800b59c <_strtod_l+0x494>
 800b680:	0800e5f2 	.word	0x0800e5f2
 800b684:	0800e8b4 	.word	0x0800e8b4
 800b688:	0800e5ea 	.word	0x0800e5ea
 800b68c:	0800e6ce 	.word	0x0800e6ce
 800b690:	0800e6ca 	.word	0x0800e6ca
 800b694:	0800e7c8 	.word	0x0800e7c8
 800b698:	0800e7a0 	.word	0x0800e7a0
 800b69c:	7ff00000 	.word	0x7ff00000
 800b6a0:	7ca00000 	.word	0x7ca00000
 800b6a4:	7fefffff 	.word	0x7fefffff
 800b6a8:	f015 0310 	ands.w	r3, r5, #16
 800b6ac:	bf18      	it	ne
 800b6ae:	236a      	movne	r3, #106	; 0x6a
 800b6b0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ba54 <_strtod_l+0x94c>
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	07ea      	lsls	r2, r5, #31
 800b6be:	d504      	bpl.n	800b6ca <_strtod_l+0x5c2>
 800b6c0:	e9da 2300 	ldrd	r2, r3, [sl]
 800b6c4:	f7f4 ffa0 	bl	8000608 <__aeabi_dmul>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	106d      	asrs	r5, r5, #1
 800b6cc:	f10a 0a08 	add.w	sl, sl, #8
 800b6d0:	d1f4      	bne.n	800b6bc <_strtod_l+0x5b4>
 800b6d2:	b10b      	cbz	r3, 800b6d8 <_strtod_l+0x5d0>
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	4689      	mov	r9, r1
 800b6d8:	9b04      	ldr	r3, [sp, #16]
 800b6da:	b1bb      	cbz	r3, 800b70c <_strtod_l+0x604>
 800b6dc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b6e0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	dd10      	ble.n	800b70c <_strtod_l+0x604>
 800b6ea:	2b1f      	cmp	r3, #31
 800b6ec:	f340 811e 	ble.w	800b92c <_strtod_l+0x824>
 800b6f0:	2b34      	cmp	r3, #52	; 0x34
 800b6f2:	bfde      	ittt	le
 800b6f4:	f04f 33ff 	movle.w	r3, #4294967295
 800b6f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b6fc:	4093      	lslle	r3, r2
 800b6fe:	f04f 0800 	mov.w	r8, #0
 800b702:	bfcc      	ite	gt
 800b704:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b708:	ea03 0901 	andle.w	r9, r3, r1
 800b70c:	2200      	movs	r2, #0
 800b70e:	2300      	movs	r3, #0
 800b710:	4640      	mov	r0, r8
 800b712:	4649      	mov	r1, r9
 800b714:	f7f5 f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b718:	2800      	cmp	r0, #0
 800b71a:	d1a6      	bne.n	800b66a <_strtod_l+0x562>
 800b71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b722:	4633      	mov	r3, r6
 800b724:	465a      	mov	r2, fp
 800b726:	4620      	mov	r0, r4
 800b728:	f7ff f8cc 	bl	800a8c4 <__s2b>
 800b72c:	9009      	str	r0, [sp, #36]	; 0x24
 800b72e:	2800      	cmp	r0, #0
 800b730:	f43f af2a 	beq.w	800b588 <_strtod_l+0x480>
 800b734:	9a08      	ldr	r2, [sp, #32]
 800b736:	9b05      	ldr	r3, [sp, #20]
 800b738:	2a00      	cmp	r2, #0
 800b73a:	eba3 0307 	sub.w	r3, r3, r7
 800b73e:	bfa8      	it	ge
 800b740:	2300      	movge	r3, #0
 800b742:	930c      	str	r3, [sp, #48]	; 0x30
 800b744:	2500      	movs	r5, #0
 800b746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b74a:	9312      	str	r3, [sp, #72]	; 0x48
 800b74c:	46ab      	mov	fp, r5
 800b74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b750:	4620      	mov	r0, r4
 800b752:	6859      	ldr	r1, [r3, #4]
 800b754:	f7ff f80e 	bl	800a774 <_Balloc>
 800b758:	9005      	str	r0, [sp, #20]
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f af18 	beq.w	800b590 <_strtod_l+0x488>
 800b760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	3202      	adds	r2, #2
 800b766:	f103 010c 	add.w	r1, r3, #12
 800b76a:	0092      	lsls	r2, r2, #2
 800b76c:	300c      	adds	r0, #12
 800b76e:	f7fe f854 	bl	800981a <memcpy>
 800b772:	ec49 8b10 	vmov	d0, r8, r9
 800b776:	aa18      	add	r2, sp, #96	; 0x60
 800b778:	a917      	add	r1, sp, #92	; 0x5c
 800b77a:	4620      	mov	r0, r4
 800b77c:	f7ff fbd6 	bl	800af2c <__d2b>
 800b780:	ec49 8b18 	vmov	d8, r8, r9
 800b784:	9016      	str	r0, [sp, #88]	; 0x58
 800b786:	2800      	cmp	r0, #0
 800b788:	f43f af02 	beq.w	800b590 <_strtod_l+0x488>
 800b78c:	2101      	movs	r1, #1
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff f930 	bl	800a9f4 <__i2b>
 800b794:	4683      	mov	fp, r0
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f aefa 	beq.w	800b590 <_strtod_l+0x488>
 800b79c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b79e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b7a0:	2e00      	cmp	r6, #0
 800b7a2:	bfab      	itete	ge
 800b7a4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b7a6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b7a8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b7aa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b7ae:	bfac      	ite	ge
 800b7b0:	eb06 0a03 	addge.w	sl, r6, r3
 800b7b4:	1b9f      	sublt	r7, r3, r6
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	1af6      	subs	r6, r6, r3
 800b7ba:	4416      	add	r6, r2
 800b7bc:	4ba0      	ldr	r3, [pc, #640]	; (800ba40 <_strtod_l+0x938>)
 800b7be:	3e01      	subs	r6, #1
 800b7c0:	429e      	cmp	r6, r3
 800b7c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b7c6:	f280 80c4 	bge.w	800b952 <_strtod_l+0x84a>
 800b7ca:	1b9b      	subs	r3, r3, r6
 800b7cc:	2b1f      	cmp	r3, #31
 800b7ce:	eba2 0203 	sub.w	r2, r2, r3
 800b7d2:	f04f 0101 	mov.w	r1, #1
 800b7d6:	f300 80b0 	bgt.w	800b93a <_strtod_l+0x832>
 800b7da:	fa01 f303 	lsl.w	r3, r1, r3
 800b7de:	930e      	str	r3, [sp, #56]	; 0x38
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b7e4:	eb0a 0602 	add.w	r6, sl, r2
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	45b2      	cmp	sl, r6
 800b7ec:	4417      	add	r7, r2
 800b7ee:	441f      	add	r7, r3
 800b7f0:	4653      	mov	r3, sl
 800b7f2:	bfa8      	it	ge
 800b7f4:	4633      	movge	r3, r6
 800b7f6:	42bb      	cmp	r3, r7
 800b7f8:	bfa8      	it	ge
 800b7fa:	463b      	movge	r3, r7
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bfc2      	ittt	gt
 800b800:	1af6      	subgt	r6, r6, r3
 800b802:	1aff      	subgt	r7, r7, r3
 800b804:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dd17      	ble.n	800b83e <_strtod_l+0x736>
 800b80e:	4659      	mov	r1, fp
 800b810:	461a      	mov	r2, r3
 800b812:	4620      	mov	r0, r4
 800b814:	f7ff f9ae 	bl	800ab74 <__pow5mult>
 800b818:	4683      	mov	fp, r0
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f aeb8 	beq.w	800b590 <_strtod_l+0x488>
 800b820:	4601      	mov	r1, r0
 800b822:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b824:	4620      	mov	r0, r4
 800b826:	f7ff f8fb 	bl	800aa20 <__multiply>
 800b82a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b82c:	2800      	cmp	r0, #0
 800b82e:	f43f aeaf 	beq.w	800b590 <_strtod_l+0x488>
 800b832:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b834:	4620      	mov	r0, r4
 800b836:	f7fe ffdd 	bl	800a7f4 <_Bfree>
 800b83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83c:	9316      	str	r3, [sp, #88]	; 0x58
 800b83e:	2e00      	cmp	r6, #0
 800b840:	f300 808c 	bgt.w	800b95c <_strtod_l+0x854>
 800b844:	9b08      	ldr	r3, [sp, #32]
 800b846:	2b00      	cmp	r3, #0
 800b848:	dd08      	ble.n	800b85c <_strtod_l+0x754>
 800b84a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b84c:	9905      	ldr	r1, [sp, #20]
 800b84e:	4620      	mov	r0, r4
 800b850:	f7ff f990 	bl	800ab74 <__pow5mult>
 800b854:	9005      	str	r0, [sp, #20]
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f ae9a 	beq.w	800b590 <_strtod_l+0x488>
 800b85c:	2f00      	cmp	r7, #0
 800b85e:	dd08      	ble.n	800b872 <_strtod_l+0x76a>
 800b860:	9905      	ldr	r1, [sp, #20]
 800b862:	463a      	mov	r2, r7
 800b864:	4620      	mov	r0, r4
 800b866:	f7ff f9df 	bl	800ac28 <__lshift>
 800b86a:	9005      	str	r0, [sp, #20]
 800b86c:	2800      	cmp	r0, #0
 800b86e:	f43f ae8f 	beq.w	800b590 <_strtod_l+0x488>
 800b872:	f1ba 0f00 	cmp.w	sl, #0
 800b876:	dd08      	ble.n	800b88a <_strtod_l+0x782>
 800b878:	4659      	mov	r1, fp
 800b87a:	4652      	mov	r2, sl
 800b87c:	4620      	mov	r0, r4
 800b87e:	f7ff f9d3 	bl	800ac28 <__lshift>
 800b882:	4683      	mov	fp, r0
 800b884:	2800      	cmp	r0, #0
 800b886:	f43f ae83 	beq.w	800b590 <_strtod_l+0x488>
 800b88a:	9a05      	ldr	r2, [sp, #20]
 800b88c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b88e:	4620      	mov	r0, r4
 800b890:	f7ff fa52 	bl	800ad38 <__mdiff>
 800b894:	4605      	mov	r5, r0
 800b896:	2800      	cmp	r0, #0
 800b898:	f43f ae7a 	beq.w	800b590 <_strtod_l+0x488>
 800b89c:	68c3      	ldr	r3, [r0, #12]
 800b89e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60c3      	str	r3, [r0, #12]
 800b8a4:	4659      	mov	r1, fp
 800b8a6:	f7ff fa2b 	bl	800ad00 <__mcmp>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	da60      	bge.n	800b970 <_strtod_l+0x868>
 800b8ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8b0:	ea53 0308 	orrs.w	r3, r3, r8
 800b8b4:	f040 8084 	bne.w	800b9c0 <_strtod_l+0x8b8>
 800b8b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d17f      	bne.n	800b9c0 <_strtod_l+0x8b8>
 800b8c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8c4:	0d1b      	lsrs	r3, r3, #20
 800b8c6:	051b      	lsls	r3, r3, #20
 800b8c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b8cc:	d978      	bls.n	800b9c0 <_strtod_l+0x8b8>
 800b8ce:	696b      	ldr	r3, [r5, #20]
 800b8d0:	b913      	cbnz	r3, 800b8d8 <_strtod_l+0x7d0>
 800b8d2:	692b      	ldr	r3, [r5, #16]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	dd73      	ble.n	800b9c0 <_strtod_l+0x8b8>
 800b8d8:	4629      	mov	r1, r5
 800b8da:	2201      	movs	r2, #1
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff f9a3 	bl	800ac28 <__lshift>
 800b8e2:	4659      	mov	r1, fp
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	f7ff fa0b 	bl	800ad00 <__mcmp>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	dd68      	ble.n	800b9c0 <_strtod_l+0x8b8>
 800b8ee:	9904      	ldr	r1, [sp, #16]
 800b8f0:	4a54      	ldr	r2, [pc, #336]	; (800ba44 <_strtod_l+0x93c>)
 800b8f2:	464b      	mov	r3, r9
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	f000 8084 	beq.w	800ba02 <_strtod_l+0x8fa>
 800b8fa:	ea02 0109 	and.w	r1, r2, r9
 800b8fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b902:	dc7e      	bgt.n	800ba02 <_strtod_l+0x8fa>
 800b904:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b908:	f77f aeb3 	ble.w	800b672 <_strtod_l+0x56a>
 800b90c:	4b4e      	ldr	r3, [pc, #312]	; (800ba48 <_strtod_l+0x940>)
 800b90e:	4640      	mov	r0, r8
 800b910:	4649      	mov	r1, r9
 800b912:	2200      	movs	r2, #0
 800b914:	f7f4 fe78 	bl	8000608 <__aeabi_dmul>
 800b918:	4b4a      	ldr	r3, [pc, #296]	; (800ba44 <_strtod_l+0x93c>)
 800b91a:	400b      	ands	r3, r1
 800b91c:	4680      	mov	r8, r0
 800b91e:	4689      	mov	r9, r1
 800b920:	2b00      	cmp	r3, #0
 800b922:	f47f ae3f 	bne.w	800b5a4 <_strtod_l+0x49c>
 800b926:	2322      	movs	r3, #34	; 0x22
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	e63b      	b.n	800b5a4 <_strtod_l+0x49c>
 800b92c:	f04f 32ff 	mov.w	r2, #4294967295
 800b930:	fa02 f303 	lsl.w	r3, r2, r3
 800b934:	ea03 0808 	and.w	r8, r3, r8
 800b938:	e6e8      	b.n	800b70c <_strtod_l+0x604>
 800b93a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b93e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b942:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b946:	36e2      	adds	r6, #226	; 0xe2
 800b948:	fa01 f306 	lsl.w	r3, r1, r6
 800b94c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b950:	e748      	b.n	800b7e4 <_strtod_l+0x6dc>
 800b952:	2100      	movs	r1, #0
 800b954:	2301      	movs	r3, #1
 800b956:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b95a:	e743      	b.n	800b7e4 <_strtod_l+0x6dc>
 800b95c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b95e:	4632      	mov	r2, r6
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff f961 	bl	800ac28 <__lshift>
 800b966:	9016      	str	r0, [sp, #88]	; 0x58
 800b968:	2800      	cmp	r0, #0
 800b96a:	f47f af6b 	bne.w	800b844 <_strtod_l+0x73c>
 800b96e:	e60f      	b.n	800b590 <_strtod_l+0x488>
 800b970:	46ca      	mov	sl, r9
 800b972:	d171      	bne.n	800ba58 <_strtod_l+0x950>
 800b974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b976:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97a:	b352      	cbz	r2, 800b9d2 <_strtod_l+0x8ca>
 800b97c:	4a33      	ldr	r2, [pc, #204]	; (800ba4c <_strtod_l+0x944>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d12a      	bne.n	800b9d8 <_strtod_l+0x8d0>
 800b982:	9b04      	ldr	r3, [sp, #16]
 800b984:	4641      	mov	r1, r8
 800b986:	b1fb      	cbz	r3, 800b9c8 <_strtod_l+0x8c0>
 800b988:	4b2e      	ldr	r3, [pc, #184]	; (800ba44 <_strtod_l+0x93c>)
 800b98a:	ea09 0303 	and.w	r3, r9, r3
 800b98e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b992:	f04f 32ff 	mov.w	r2, #4294967295
 800b996:	d81a      	bhi.n	800b9ce <_strtod_l+0x8c6>
 800b998:	0d1b      	lsrs	r3, r3, #20
 800b99a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b99e:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	d118      	bne.n	800b9d8 <_strtod_l+0x8d0>
 800b9a6:	4b2a      	ldr	r3, [pc, #168]	; (800ba50 <_strtod_l+0x948>)
 800b9a8:	459a      	cmp	sl, r3
 800b9aa:	d102      	bne.n	800b9b2 <_strtod_l+0x8aa>
 800b9ac:	3101      	adds	r1, #1
 800b9ae:	f43f adef 	beq.w	800b590 <_strtod_l+0x488>
 800b9b2:	4b24      	ldr	r3, [pc, #144]	; (800ba44 <_strtod_l+0x93c>)
 800b9b4:	ea0a 0303 	and.w	r3, sl, r3
 800b9b8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b9bc:	f04f 0800 	mov.w	r8, #0
 800b9c0:	9b04      	ldr	r3, [sp, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1a2      	bne.n	800b90c <_strtod_l+0x804>
 800b9c6:	e5ed      	b.n	800b5a4 <_strtod_l+0x49c>
 800b9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9cc:	e7e9      	b.n	800b9a2 <_strtod_l+0x89a>
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	e7e7      	b.n	800b9a2 <_strtod_l+0x89a>
 800b9d2:	ea53 0308 	orrs.w	r3, r3, r8
 800b9d6:	d08a      	beq.n	800b8ee <_strtod_l+0x7e6>
 800b9d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9da:	b1e3      	cbz	r3, 800ba16 <_strtod_l+0x90e>
 800b9dc:	ea13 0f0a 	tst.w	r3, sl
 800b9e0:	d0ee      	beq.n	800b9c0 <_strtod_l+0x8b8>
 800b9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	b1c3      	cbz	r3, 800ba1e <_strtod_l+0x916>
 800b9ec:	f7ff fb6f 	bl	800b0ce <sulp>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	ec51 0b18 	vmov	r0, r1, d8
 800b9f8:	f7f4 fc50 	bl	800029c <__adddf3>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	e7de      	b.n	800b9c0 <_strtod_l+0x8b8>
 800ba02:	4013      	ands	r3, r2
 800ba04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ba08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ba0c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ba10:	f04f 38ff 	mov.w	r8, #4294967295
 800ba14:	e7d4      	b.n	800b9c0 <_strtod_l+0x8b8>
 800ba16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba18:	ea13 0f08 	tst.w	r3, r8
 800ba1c:	e7e0      	b.n	800b9e0 <_strtod_l+0x8d8>
 800ba1e:	f7ff fb56 	bl	800b0ce <sulp>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	ec51 0b18 	vmov	r0, r1, d8
 800ba2a:	f7f4 fc35 	bl	8000298 <__aeabi_dsub>
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2300      	movs	r3, #0
 800ba32:	4680      	mov	r8, r0
 800ba34:	4689      	mov	r9, r1
 800ba36:	f7f5 f84f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	d0c0      	beq.n	800b9c0 <_strtod_l+0x8b8>
 800ba3e:	e618      	b.n	800b672 <_strtod_l+0x56a>
 800ba40:	fffffc02 	.word	0xfffffc02
 800ba44:	7ff00000 	.word	0x7ff00000
 800ba48:	39500000 	.word	0x39500000
 800ba4c:	000fffff 	.word	0x000fffff
 800ba50:	7fefffff 	.word	0x7fefffff
 800ba54:	0800e8c8 	.word	0x0800e8c8
 800ba58:	4659      	mov	r1, fp
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f7ff fac0 	bl	800afe0 <__ratio>
 800ba60:	ec57 6b10 	vmov	r6, r7, d0
 800ba64:	ee10 0a10 	vmov	r0, s0
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f5 f846 	bl	8000b00 <__aeabi_dcmple>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d071      	beq.n	800bb5c <_strtod_l+0xa54>
 800ba78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d17c      	bne.n	800bb78 <_strtod_l+0xa70>
 800ba7e:	f1b8 0f00 	cmp.w	r8, #0
 800ba82:	d15a      	bne.n	800bb3a <_strtod_l+0xa32>
 800ba84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d15d      	bne.n	800bb48 <_strtod_l+0xa40>
 800ba8c:	4b90      	ldr	r3, [pc, #576]	; (800bcd0 <_strtod_l+0xbc8>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	4630      	mov	r0, r6
 800ba92:	4639      	mov	r1, r7
 800ba94:	f7f5 f82a 	bl	8000aec <__aeabi_dcmplt>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	d15c      	bne.n	800bb56 <_strtod_l+0xa4e>
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	4b8c      	ldr	r3, [pc, #560]	; (800bcd4 <_strtod_l+0xbcc>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	f7f4 fdb0 	bl	8000608 <__aeabi_dmul>
 800baa8:	4606      	mov	r6, r0
 800baaa:	460f      	mov	r7, r1
 800baac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bab0:	9606      	str	r6, [sp, #24]
 800bab2:	9307      	str	r3, [sp, #28]
 800bab4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bab8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800babc:	4b86      	ldr	r3, [pc, #536]	; (800bcd8 <_strtod_l+0xbd0>)
 800babe:	ea0a 0303 	and.w	r3, sl, r3
 800bac2:	930d      	str	r3, [sp, #52]	; 0x34
 800bac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bac6:	4b85      	ldr	r3, [pc, #532]	; (800bcdc <_strtod_l+0xbd4>)
 800bac8:	429a      	cmp	r2, r3
 800baca:	f040 8090 	bne.w	800bbee <_strtod_l+0xae6>
 800bace:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bad2:	ec49 8b10 	vmov	d0, r8, r9
 800bad6:	f7ff f9b9 	bl	800ae4c <__ulp>
 800bada:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bade:	ec51 0b10 	vmov	r0, r1, d0
 800bae2:	f7f4 fd91 	bl	8000608 <__aeabi_dmul>
 800bae6:	4642      	mov	r2, r8
 800bae8:	464b      	mov	r3, r9
 800baea:	f7f4 fbd7 	bl	800029c <__adddf3>
 800baee:	460b      	mov	r3, r1
 800baf0:	4979      	ldr	r1, [pc, #484]	; (800bcd8 <_strtod_l+0xbd0>)
 800baf2:	4a7b      	ldr	r2, [pc, #492]	; (800bce0 <_strtod_l+0xbd8>)
 800baf4:	4019      	ands	r1, r3
 800baf6:	4291      	cmp	r1, r2
 800baf8:	4680      	mov	r8, r0
 800bafa:	d944      	bls.n	800bb86 <_strtod_l+0xa7e>
 800bafc:	ee18 2a90 	vmov	r2, s17
 800bb00:	4b78      	ldr	r3, [pc, #480]	; (800bce4 <_strtod_l+0xbdc>)
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d104      	bne.n	800bb10 <_strtod_l+0xa08>
 800bb06:	ee18 3a10 	vmov	r3, s16
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	f43f ad40 	beq.w	800b590 <_strtod_l+0x488>
 800bb10:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bce4 <_strtod_l+0xbdc>
 800bb14:	f04f 38ff 	mov.w	r8, #4294967295
 800bb18:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f7fe fe6a 	bl	800a7f4 <_Bfree>
 800bb20:	9905      	ldr	r1, [sp, #20]
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7fe fe66 	bl	800a7f4 <_Bfree>
 800bb28:	4659      	mov	r1, fp
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7fe fe62 	bl	800a7f4 <_Bfree>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4620      	mov	r0, r4
 800bb34:	f7fe fe5e 	bl	800a7f4 <_Bfree>
 800bb38:	e609      	b.n	800b74e <_strtod_l+0x646>
 800bb3a:	f1b8 0f01 	cmp.w	r8, #1
 800bb3e:	d103      	bne.n	800bb48 <_strtod_l+0xa40>
 800bb40:	f1b9 0f00 	cmp.w	r9, #0
 800bb44:	f43f ad95 	beq.w	800b672 <_strtod_l+0x56a>
 800bb48:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bca0 <_strtod_l+0xb98>
 800bb4c:	4f60      	ldr	r7, [pc, #384]	; (800bcd0 <_strtod_l+0xbc8>)
 800bb4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb52:	2600      	movs	r6, #0
 800bb54:	e7ae      	b.n	800bab4 <_strtod_l+0x9ac>
 800bb56:	4f5f      	ldr	r7, [pc, #380]	; (800bcd4 <_strtod_l+0xbcc>)
 800bb58:	2600      	movs	r6, #0
 800bb5a:	e7a7      	b.n	800baac <_strtod_l+0x9a4>
 800bb5c:	4b5d      	ldr	r3, [pc, #372]	; (800bcd4 <_strtod_l+0xbcc>)
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	2200      	movs	r2, #0
 800bb64:	f7f4 fd50 	bl	8000608 <__aeabi_dmul>
 800bb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d09c      	beq.n	800baac <_strtod_l+0x9a4>
 800bb72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bb76:	e79d      	b.n	800bab4 <_strtod_l+0x9ac>
 800bb78:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bca8 <_strtod_l+0xba0>
 800bb7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb80:	ec57 6b17 	vmov	r6, r7, d7
 800bb84:	e796      	b.n	800bab4 <_strtod_l+0x9ac>
 800bb86:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bb8a:	9b04      	ldr	r3, [sp, #16]
 800bb8c:	46ca      	mov	sl, r9
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1c2      	bne.n	800bb18 <_strtod_l+0xa10>
 800bb92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb98:	0d1b      	lsrs	r3, r3, #20
 800bb9a:	051b      	lsls	r3, r3, #20
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d1bb      	bne.n	800bb18 <_strtod_l+0xa10>
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f5 f890 	bl	8000cc8 <__aeabi_d2lz>
 800bba8:	f7f4 fd00 	bl	80005ac <__aeabi_l2d>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fb70 	bl	8000298 <__aeabi_dsub>
 800bbb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbbe:	ea43 0308 	orr.w	r3, r3, r8
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	d054      	beq.n	800bc74 <_strtod_l+0xb6c>
 800bbca:	a339      	add	r3, pc, #228	; (adr r3, 800bcb0 <_strtod_l+0xba8>)
 800bbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd0:	f7f4 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f47f ace5 	bne.w	800b5a4 <_strtod_l+0x49c>
 800bbda:	a337      	add	r3, pc, #220	; (adr r3, 800bcb8 <_strtod_l+0xbb0>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	4639      	mov	r1, r7
 800bbe4:	f7f4 ffa0 	bl	8000b28 <__aeabi_dcmpgt>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d095      	beq.n	800bb18 <_strtod_l+0xa10>
 800bbec:	e4da      	b.n	800b5a4 <_strtod_l+0x49c>
 800bbee:	9b04      	ldr	r3, [sp, #16]
 800bbf0:	b333      	cbz	r3, 800bc40 <_strtod_l+0xb38>
 800bbf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbf4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbf8:	d822      	bhi.n	800bc40 <_strtod_l+0xb38>
 800bbfa:	a331      	add	r3, pc, #196	; (adr r3, 800bcc0 <_strtod_l+0xbb8>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 ff7c 	bl	8000b00 <__aeabi_dcmple>
 800bc08:	b1a0      	cbz	r0, 800bc34 <_strtod_l+0xb2c>
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7f4 ffd3 	bl	8000bb8 <__aeabi_d2uiz>
 800bc12:	2801      	cmp	r0, #1
 800bc14:	bf38      	it	cc
 800bc16:	2001      	movcc	r0, #1
 800bc18:	f7f4 fc7c 	bl	8000514 <__aeabi_ui2d>
 800bc1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	bb23      	cbnz	r3, 800bc6e <_strtod_l+0xb66>
 800bc24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc28:	9010      	str	r0, [sp, #64]	; 0x40
 800bc2a:	9311      	str	r3, [sp, #68]	; 0x44
 800bc2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc30:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc38:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bc3c:	1a9b      	subs	r3, r3, r2
 800bc3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc44:	eeb0 0a48 	vmov.f32	s0, s16
 800bc48:	eef0 0a68 	vmov.f32	s1, s17
 800bc4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bc50:	f7ff f8fc 	bl	800ae4c <__ulp>
 800bc54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bc58:	ec53 2b10 	vmov	r2, r3, d0
 800bc5c:	f7f4 fcd4 	bl	8000608 <__aeabi_dmul>
 800bc60:	ec53 2b18 	vmov	r2, r3, d8
 800bc64:	f7f4 fb1a 	bl	800029c <__adddf3>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	e78d      	b.n	800bb8a <_strtod_l+0xa82>
 800bc6e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bc72:	e7db      	b.n	800bc2c <_strtod_l+0xb24>
 800bc74:	a314      	add	r3, pc, #80	; (adr r3, 800bcc8 <_strtod_l+0xbc0>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f7f4 ff37 	bl	8000aec <__aeabi_dcmplt>
 800bc7e:	e7b3      	b.n	800bbe8 <_strtod_l+0xae0>
 800bc80:	2300      	movs	r3, #0
 800bc82:	930a      	str	r3, [sp, #40]	; 0x28
 800bc84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bc86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc88:	6013      	str	r3, [r2, #0]
 800bc8a:	f7ff ba7c 	b.w	800b186 <_strtod_l+0x7e>
 800bc8e:	2a65      	cmp	r2, #101	; 0x65
 800bc90:	f43f ab75 	beq.w	800b37e <_strtod_l+0x276>
 800bc94:	2a45      	cmp	r2, #69	; 0x45
 800bc96:	f43f ab72 	beq.w	800b37e <_strtod_l+0x276>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	f7ff bbaa 	b.w	800b3f4 <_strtod_l+0x2ec>
 800bca0:	00000000 	.word	0x00000000
 800bca4:	bff00000 	.word	0xbff00000
 800bca8:	00000000 	.word	0x00000000
 800bcac:	3ff00000 	.word	0x3ff00000
 800bcb0:	94a03595 	.word	0x94a03595
 800bcb4:	3fdfffff 	.word	0x3fdfffff
 800bcb8:	35afe535 	.word	0x35afe535
 800bcbc:	3fe00000 	.word	0x3fe00000
 800bcc0:	ffc00000 	.word	0xffc00000
 800bcc4:	41dfffff 	.word	0x41dfffff
 800bcc8:	94a03595 	.word	0x94a03595
 800bccc:	3fcfffff 	.word	0x3fcfffff
 800bcd0:	3ff00000 	.word	0x3ff00000
 800bcd4:	3fe00000 	.word	0x3fe00000
 800bcd8:	7ff00000 	.word	0x7ff00000
 800bcdc:	7fe00000 	.word	0x7fe00000
 800bce0:	7c9fffff 	.word	0x7c9fffff
 800bce4:	7fefffff 	.word	0x7fefffff

0800bce8 <_strtod_r>:
 800bce8:	4b01      	ldr	r3, [pc, #4]	; (800bcf0 <_strtod_r+0x8>)
 800bcea:	f7ff ba0d 	b.w	800b108 <_strtod_l>
 800bcee:	bf00      	nop
 800bcf0:	20000068 	.word	0x20000068

0800bcf4 <__ssputs_r>:
 800bcf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf8:	688e      	ldr	r6, [r1, #8]
 800bcfa:	461f      	mov	r7, r3
 800bcfc:	42be      	cmp	r6, r7
 800bcfe:	680b      	ldr	r3, [r1, #0]
 800bd00:	4682      	mov	sl, r0
 800bd02:	460c      	mov	r4, r1
 800bd04:	4690      	mov	r8, r2
 800bd06:	d82c      	bhi.n	800bd62 <__ssputs_r+0x6e>
 800bd08:	898a      	ldrh	r2, [r1, #12]
 800bd0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd0e:	d026      	beq.n	800bd5e <__ssputs_r+0x6a>
 800bd10:	6965      	ldr	r5, [r4, #20]
 800bd12:	6909      	ldr	r1, [r1, #16]
 800bd14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd18:	eba3 0901 	sub.w	r9, r3, r1
 800bd1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd20:	1c7b      	adds	r3, r7, #1
 800bd22:	444b      	add	r3, r9
 800bd24:	106d      	asrs	r5, r5, #1
 800bd26:	429d      	cmp	r5, r3
 800bd28:	bf38      	it	cc
 800bd2a:	461d      	movcc	r5, r3
 800bd2c:	0553      	lsls	r3, r2, #21
 800bd2e:	d527      	bpl.n	800bd80 <__ssputs_r+0x8c>
 800bd30:	4629      	mov	r1, r5
 800bd32:	f7fe fc93 	bl	800a65c <_malloc_r>
 800bd36:	4606      	mov	r6, r0
 800bd38:	b360      	cbz	r0, 800bd94 <__ssputs_r+0xa0>
 800bd3a:	6921      	ldr	r1, [r4, #16]
 800bd3c:	464a      	mov	r2, r9
 800bd3e:	f7fd fd6c 	bl	800981a <memcpy>
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd4c:	81a3      	strh	r3, [r4, #12]
 800bd4e:	6126      	str	r6, [r4, #16]
 800bd50:	6165      	str	r5, [r4, #20]
 800bd52:	444e      	add	r6, r9
 800bd54:	eba5 0509 	sub.w	r5, r5, r9
 800bd58:	6026      	str	r6, [r4, #0]
 800bd5a:	60a5      	str	r5, [r4, #8]
 800bd5c:	463e      	mov	r6, r7
 800bd5e:	42be      	cmp	r6, r7
 800bd60:	d900      	bls.n	800bd64 <__ssputs_r+0x70>
 800bd62:	463e      	mov	r6, r7
 800bd64:	6820      	ldr	r0, [r4, #0]
 800bd66:	4632      	mov	r2, r6
 800bd68:	4641      	mov	r1, r8
 800bd6a:	f000 fbb5 	bl	800c4d8 <memmove>
 800bd6e:	68a3      	ldr	r3, [r4, #8]
 800bd70:	1b9b      	subs	r3, r3, r6
 800bd72:	60a3      	str	r3, [r4, #8]
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	4433      	add	r3, r6
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd80:	462a      	mov	r2, r5
 800bd82:	f000 ff96 	bl	800ccb2 <_realloc_r>
 800bd86:	4606      	mov	r6, r0
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d1e0      	bne.n	800bd4e <__ssputs_r+0x5a>
 800bd8c:	6921      	ldr	r1, [r4, #16]
 800bd8e:	4650      	mov	r0, sl
 800bd90:	f7fe fbf0 	bl	800a574 <_free_r>
 800bd94:	230c      	movs	r3, #12
 800bd96:	f8ca 3000 	str.w	r3, [sl]
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda0:	81a3      	strh	r3, [r4, #12]
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	e7e9      	b.n	800bd7c <__ssputs_r+0x88>

0800bda8 <_svfiprintf_r>:
 800bda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdac:	4698      	mov	r8, r3
 800bdae:	898b      	ldrh	r3, [r1, #12]
 800bdb0:	061b      	lsls	r3, r3, #24
 800bdb2:	b09d      	sub	sp, #116	; 0x74
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	4614      	mov	r4, r2
 800bdba:	d50e      	bpl.n	800bdda <_svfiprintf_r+0x32>
 800bdbc:	690b      	ldr	r3, [r1, #16]
 800bdbe:	b963      	cbnz	r3, 800bdda <_svfiprintf_r+0x32>
 800bdc0:	2140      	movs	r1, #64	; 0x40
 800bdc2:	f7fe fc4b 	bl	800a65c <_malloc_r>
 800bdc6:	6028      	str	r0, [r5, #0]
 800bdc8:	6128      	str	r0, [r5, #16]
 800bdca:	b920      	cbnz	r0, 800bdd6 <_svfiprintf_r+0x2e>
 800bdcc:	230c      	movs	r3, #12
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd4:	e0d0      	b.n	800bf78 <_svfiprintf_r+0x1d0>
 800bdd6:	2340      	movs	r3, #64	; 0x40
 800bdd8:	616b      	str	r3, [r5, #20]
 800bdda:	2300      	movs	r3, #0
 800bddc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdde:	2320      	movs	r3, #32
 800bde0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bde8:	2330      	movs	r3, #48	; 0x30
 800bdea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf90 <_svfiprintf_r+0x1e8>
 800bdee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf2:	f04f 0901 	mov.w	r9, #1
 800bdf6:	4623      	mov	r3, r4
 800bdf8:	469a      	mov	sl, r3
 800bdfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdfe:	b10a      	cbz	r2, 800be04 <_svfiprintf_r+0x5c>
 800be00:	2a25      	cmp	r2, #37	; 0x25
 800be02:	d1f9      	bne.n	800bdf8 <_svfiprintf_r+0x50>
 800be04:	ebba 0b04 	subs.w	fp, sl, r4
 800be08:	d00b      	beq.n	800be22 <_svfiprintf_r+0x7a>
 800be0a:	465b      	mov	r3, fp
 800be0c:	4622      	mov	r2, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	4638      	mov	r0, r7
 800be12:	f7ff ff6f 	bl	800bcf4 <__ssputs_r>
 800be16:	3001      	adds	r0, #1
 800be18:	f000 80a9 	beq.w	800bf6e <_svfiprintf_r+0x1c6>
 800be1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be1e:	445a      	add	r2, fp
 800be20:	9209      	str	r2, [sp, #36]	; 0x24
 800be22:	f89a 3000 	ldrb.w	r3, [sl]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80a1 	beq.w	800bf6e <_svfiprintf_r+0x1c6>
 800be2c:	2300      	movs	r3, #0
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295
 800be32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be36:	f10a 0a01 	add.w	sl, sl, #1
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	9307      	str	r3, [sp, #28]
 800be3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be42:	931a      	str	r3, [sp, #104]	; 0x68
 800be44:	4654      	mov	r4, sl
 800be46:	2205      	movs	r2, #5
 800be48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4c:	4850      	ldr	r0, [pc, #320]	; (800bf90 <_svfiprintf_r+0x1e8>)
 800be4e:	f7f4 f9c7 	bl	80001e0 <memchr>
 800be52:	9a04      	ldr	r2, [sp, #16]
 800be54:	b9d8      	cbnz	r0, 800be8e <_svfiprintf_r+0xe6>
 800be56:	06d0      	lsls	r0, r2, #27
 800be58:	bf44      	itt	mi
 800be5a:	2320      	movmi	r3, #32
 800be5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be60:	0711      	lsls	r1, r2, #28
 800be62:	bf44      	itt	mi
 800be64:	232b      	movmi	r3, #43	; 0x2b
 800be66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be6a:	f89a 3000 	ldrb.w	r3, [sl]
 800be6e:	2b2a      	cmp	r3, #42	; 0x2a
 800be70:	d015      	beq.n	800be9e <_svfiprintf_r+0xf6>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	4654      	mov	r4, sl
 800be76:	2000      	movs	r0, #0
 800be78:	f04f 0c0a 	mov.w	ip, #10
 800be7c:	4621      	mov	r1, r4
 800be7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be82:	3b30      	subs	r3, #48	; 0x30
 800be84:	2b09      	cmp	r3, #9
 800be86:	d94d      	bls.n	800bf24 <_svfiprintf_r+0x17c>
 800be88:	b1b0      	cbz	r0, 800beb8 <_svfiprintf_r+0x110>
 800be8a:	9207      	str	r2, [sp, #28]
 800be8c:	e014      	b.n	800beb8 <_svfiprintf_r+0x110>
 800be8e:	eba0 0308 	sub.w	r3, r0, r8
 800be92:	fa09 f303 	lsl.w	r3, r9, r3
 800be96:	4313      	orrs	r3, r2
 800be98:	9304      	str	r3, [sp, #16]
 800be9a:	46a2      	mov	sl, r4
 800be9c:	e7d2      	b.n	800be44 <_svfiprintf_r+0x9c>
 800be9e:	9b03      	ldr	r3, [sp, #12]
 800bea0:	1d19      	adds	r1, r3, #4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	9103      	str	r1, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bfbb      	ittet	lt
 800beaa:	425b      	neglt	r3, r3
 800beac:	f042 0202 	orrlt.w	r2, r2, #2
 800beb0:	9307      	strge	r3, [sp, #28]
 800beb2:	9307      	strlt	r3, [sp, #28]
 800beb4:	bfb8      	it	lt
 800beb6:	9204      	strlt	r2, [sp, #16]
 800beb8:	7823      	ldrb	r3, [r4, #0]
 800beba:	2b2e      	cmp	r3, #46	; 0x2e
 800bebc:	d10c      	bne.n	800bed8 <_svfiprintf_r+0x130>
 800bebe:	7863      	ldrb	r3, [r4, #1]
 800bec0:	2b2a      	cmp	r3, #42	; 0x2a
 800bec2:	d134      	bne.n	800bf2e <_svfiprintf_r+0x186>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	1d1a      	adds	r2, r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	9203      	str	r2, [sp, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bfb8      	it	lt
 800bed0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bed4:	3402      	adds	r4, #2
 800bed6:	9305      	str	r3, [sp, #20]
 800bed8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bfa0 <_svfiprintf_r+0x1f8>
 800bedc:	7821      	ldrb	r1, [r4, #0]
 800bede:	2203      	movs	r2, #3
 800bee0:	4650      	mov	r0, sl
 800bee2:	f7f4 f97d 	bl	80001e0 <memchr>
 800bee6:	b138      	cbz	r0, 800bef8 <_svfiprintf_r+0x150>
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	eba0 000a 	sub.w	r0, r0, sl
 800beee:	2240      	movs	r2, #64	; 0x40
 800bef0:	4082      	lsls	r2, r0
 800bef2:	4313      	orrs	r3, r2
 800bef4:	3401      	adds	r4, #1
 800bef6:	9304      	str	r3, [sp, #16]
 800bef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befc:	4825      	ldr	r0, [pc, #148]	; (800bf94 <_svfiprintf_r+0x1ec>)
 800befe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf02:	2206      	movs	r2, #6
 800bf04:	f7f4 f96c 	bl	80001e0 <memchr>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d038      	beq.n	800bf7e <_svfiprintf_r+0x1d6>
 800bf0c:	4b22      	ldr	r3, [pc, #136]	; (800bf98 <_svfiprintf_r+0x1f0>)
 800bf0e:	bb1b      	cbnz	r3, 800bf58 <_svfiprintf_r+0x1b0>
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	3307      	adds	r3, #7
 800bf14:	f023 0307 	bic.w	r3, r3, #7
 800bf18:	3308      	adds	r3, #8
 800bf1a:	9303      	str	r3, [sp, #12]
 800bf1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1e:	4433      	add	r3, r6
 800bf20:	9309      	str	r3, [sp, #36]	; 0x24
 800bf22:	e768      	b.n	800bdf6 <_svfiprintf_r+0x4e>
 800bf24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf28:	460c      	mov	r4, r1
 800bf2a:	2001      	movs	r0, #1
 800bf2c:	e7a6      	b.n	800be7c <_svfiprintf_r+0xd4>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	3401      	adds	r4, #1
 800bf32:	9305      	str	r3, [sp, #20]
 800bf34:	4619      	mov	r1, r3
 800bf36:	f04f 0c0a 	mov.w	ip, #10
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf40:	3a30      	subs	r2, #48	; 0x30
 800bf42:	2a09      	cmp	r2, #9
 800bf44:	d903      	bls.n	800bf4e <_svfiprintf_r+0x1a6>
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0c6      	beq.n	800bed8 <_svfiprintf_r+0x130>
 800bf4a:	9105      	str	r1, [sp, #20]
 800bf4c:	e7c4      	b.n	800bed8 <_svfiprintf_r+0x130>
 800bf4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf52:	4604      	mov	r4, r0
 800bf54:	2301      	movs	r3, #1
 800bf56:	e7f0      	b.n	800bf3a <_svfiprintf_r+0x192>
 800bf58:	ab03      	add	r3, sp, #12
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	462a      	mov	r2, r5
 800bf5e:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <_svfiprintf_r+0x1f4>)
 800bf60:	a904      	add	r1, sp, #16
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7fc fb20 	bl	80085a8 <_printf_float>
 800bf68:	1c42      	adds	r2, r0, #1
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	d1d6      	bne.n	800bf1c <_svfiprintf_r+0x174>
 800bf6e:	89ab      	ldrh	r3, [r5, #12]
 800bf70:	065b      	lsls	r3, r3, #25
 800bf72:	f53f af2d 	bmi.w	800bdd0 <_svfiprintf_r+0x28>
 800bf76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf78:	b01d      	add	sp, #116	; 0x74
 800bf7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7e:	ab03      	add	r3, sp, #12
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	462a      	mov	r2, r5
 800bf84:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <_svfiprintf_r+0x1f4>)
 800bf86:	a904      	add	r1, sp, #16
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7fc fdb1 	bl	8008af0 <_printf_i>
 800bf8e:	e7eb      	b.n	800bf68 <_svfiprintf_r+0x1c0>
 800bf90:	0800e8f0 	.word	0x0800e8f0
 800bf94:	0800e8fa 	.word	0x0800e8fa
 800bf98:	080085a9 	.word	0x080085a9
 800bf9c:	0800bcf5 	.word	0x0800bcf5
 800bfa0:	0800e8f6 	.word	0x0800e8f6

0800bfa4 <__sfputc_r>:
 800bfa4:	6893      	ldr	r3, [r2, #8]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	b410      	push	{r4}
 800bfac:	6093      	str	r3, [r2, #8]
 800bfae:	da08      	bge.n	800bfc2 <__sfputc_r+0x1e>
 800bfb0:	6994      	ldr	r4, [r2, #24]
 800bfb2:	42a3      	cmp	r3, r4
 800bfb4:	db01      	blt.n	800bfba <__sfputc_r+0x16>
 800bfb6:	290a      	cmp	r1, #10
 800bfb8:	d103      	bne.n	800bfc2 <__sfputc_r+0x1e>
 800bfba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfbe:	f7fd ba98 	b.w	80094f2 <__swbuf_r>
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	1c58      	adds	r0, r3, #1
 800bfc6:	6010      	str	r0, [r2, #0]
 800bfc8:	7019      	strb	r1, [r3, #0]
 800bfca:	4608      	mov	r0, r1
 800bfcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <__sfputs_r>:
 800bfd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfd4:	4606      	mov	r6, r0
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	4614      	mov	r4, r2
 800bfda:	18d5      	adds	r5, r2, r3
 800bfdc:	42ac      	cmp	r4, r5
 800bfde:	d101      	bne.n	800bfe4 <__sfputs_r+0x12>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	e007      	b.n	800bff4 <__sfputs_r+0x22>
 800bfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfe8:	463a      	mov	r2, r7
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7ff ffda 	bl	800bfa4 <__sfputc_r>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d1f3      	bne.n	800bfdc <__sfputs_r+0xa>
 800bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bff8 <_vfiprintf_r>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	460d      	mov	r5, r1
 800bffe:	b09d      	sub	sp, #116	; 0x74
 800c000:	4614      	mov	r4, r2
 800c002:	4698      	mov	r8, r3
 800c004:	4606      	mov	r6, r0
 800c006:	b118      	cbz	r0, 800c010 <_vfiprintf_r+0x18>
 800c008:	6a03      	ldr	r3, [r0, #32]
 800c00a:	b90b      	cbnz	r3, 800c010 <_vfiprintf_r+0x18>
 800c00c:	f7fd f92e 	bl	800926c <__sinit>
 800c010:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d405      	bmi.n	800c022 <_vfiprintf_r+0x2a>
 800c016:	89ab      	ldrh	r3, [r5, #12]
 800c018:	059a      	lsls	r2, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_vfiprintf_r+0x2a>
 800c01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c01e:	f7fd fbfa 	bl	8009816 <__retarget_lock_acquire_recursive>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	071b      	lsls	r3, r3, #28
 800c026:	d501      	bpl.n	800c02c <_vfiprintf_r+0x34>
 800c028:	692b      	ldr	r3, [r5, #16]
 800c02a:	b99b      	cbnz	r3, 800c054 <_vfiprintf_r+0x5c>
 800c02c:	4629      	mov	r1, r5
 800c02e:	4630      	mov	r0, r6
 800c030:	f7fd fa9c 	bl	800956c <__swsetup_r>
 800c034:	b170      	cbz	r0, 800c054 <_vfiprintf_r+0x5c>
 800c036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c038:	07dc      	lsls	r4, r3, #31
 800c03a:	d504      	bpl.n	800c046 <_vfiprintf_r+0x4e>
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	b01d      	add	sp, #116	; 0x74
 800c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	0598      	lsls	r0, r3, #22
 800c04a:	d4f7      	bmi.n	800c03c <_vfiprintf_r+0x44>
 800c04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c04e:	f7fd fbe3 	bl	8009818 <__retarget_lock_release_recursive>
 800c052:	e7f3      	b.n	800c03c <_vfiprintf_r+0x44>
 800c054:	2300      	movs	r3, #0
 800c056:	9309      	str	r3, [sp, #36]	; 0x24
 800c058:	2320      	movs	r3, #32
 800c05a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c05e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c062:	2330      	movs	r3, #48	; 0x30
 800c064:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c218 <_vfiprintf_r+0x220>
 800c068:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c06c:	f04f 0901 	mov.w	r9, #1
 800c070:	4623      	mov	r3, r4
 800c072:	469a      	mov	sl, r3
 800c074:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c078:	b10a      	cbz	r2, 800c07e <_vfiprintf_r+0x86>
 800c07a:	2a25      	cmp	r2, #37	; 0x25
 800c07c:	d1f9      	bne.n	800c072 <_vfiprintf_r+0x7a>
 800c07e:	ebba 0b04 	subs.w	fp, sl, r4
 800c082:	d00b      	beq.n	800c09c <_vfiprintf_r+0xa4>
 800c084:	465b      	mov	r3, fp
 800c086:	4622      	mov	r2, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7ff ffa1 	bl	800bfd2 <__sfputs_r>
 800c090:	3001      	adds	r0, #1
 800c092:	f000 80a9 	beq.w	800c1e8 <_vfiprintf_r+0x1f0>
 800c096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c098:	445a      	add	r2, fp
 800c09a:	9209      	str	r2, [sp, #36]	; 0x24
 800c09c:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 80a1 	beq.w	800c1e8 <_vfiprintf_r+0x1f0>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0b0:	f10a 0a01 	add.w	sl, sl, #1
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	9307      	str	r3, [sp, #28]
 800c0b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0bc:	931a      	str	r3, [sp, #104]	; 0x68
 800c0be:	4654      	mov	r4, sl
 800c0c0:	2205      	movs	r2, #5
 800c0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c6:	4854      	ldr	r0, [pc, #336]	; (800c218 <_vfiprintf_r+0x220>)
 800c0c8:	f7f4 f88a 	bl	80001e0 <memchr>
 800c0cc:	9a04      	ldr	r2, [sp, #16]
 800c0ce:	b9d8      	cbnz	r0, 800c108 <_vfiprintf_r+0x110>
 800c0d0:	06d1      	lsls	r1, r2, #27
 800c0d2:	bf44      	itt	mi
 800c0d4:	2320      	movmi	r3, #32
 800c0d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0da:	0713      	lsls	r3, r2, #28
 800c0dc:	bf44      	itt	mi
 800c0de:	232b      	movmi	r3, #43	; 0x2b
 800c0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0ea:	d015      	beq.n	800c118 <_vfiprintf_r+0x120>
 800c0ec:	9a07      	ldr	r2, [sp, #28]
 800c0ee:	4654      	mov	r4, sl
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f04f 0c0a 	mov.w	ip, #10
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0fc:	3b30      	subs	r3, #48	; 0x30
 800c0fe:	2b09      	cmp	r3, #9
 800c100:	d94d      	bls.n	800c19e <_vfiprintf_r+0x1a6>
 800c102:	b1b0      	cbz	r0, 800c132 <_vfiprintf_r+0x13a>
 800c104:	9207      	str	r2, [sp, #28]
 800c106:	e014      	b.n	800c132 <_vfiprintf_r+0x13a>
 800c108:	eba0 0308 	sub.w	r3, r0, r8
 800c10c:	fa09 f303 	lsl.w	r3, r9, r3
 800c110:	4313      	orrs	r3, r2
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	46a2      	mov	sl, r4
 800c116:	e7d2      	b.n	800c0be <_vfiprintf_r+0xc6>
 800c118:	9b03      	ldr	r3, [sp, #12]
 800c11a:	1d19      	adds	r1, r3, #4
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	9103      	str	r1, [sp, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	bfbb      	ittet	lt
 800c124:	425b      	neglt	r3, r3
 800c126:	f042 0202 	orrlt.w	r2, r2, #2
 800c12a:	9307      	strge	r3, [sp, #28]
 800c12c:	9307      	strlt	r3, [sp, #28]
 800c12e:	bfb8      	it	lt
 800c130:	9204      	strlt	r2, [sp, #16]
 800c132:	7823      	ldrb	r3, [r4, #0]
 800c134:	2b2e      	cmp	r3, #46	; 0x2e
 800c136:	d10c      	bne.n	800c152 <_vfiprintf_r+0x15a>
 800c138:	7863      	ldrb	r3, [r4, #1]
 800c13a:	2b2a      	cmp	r3, #42	; 0x2a
 800c13c:	d134      	bne.n	800c1a8 <_vfiprintf_r+0x1b0>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	1d1a      	adds	r2, r3, #4
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	9203      	str	r2, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfb8      	it	lt
 800c14a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c14e:	3402      	adds	r4, #2
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c228 <_vfiprintf_r+0x230>
 800c156:	7821      	ldrb	r1, [r4, #0]
 800c158:	2203      	movs	r2, #3
 800c15a:	4650      	mov	r0, sl
 800c15c:	f7f4 f840 	bl	80001e0 <memchr>
 800c160:	b138      	cbz	r0, 800c172 <_vfiprintf_r+0x17a>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	eba0 000a 	sub.w	r0, r0, sl
 800c168:	2240      	movs	r2, #64	; 0x40
 800c16a:	4082      	lsls	r2, r0
 800c16c:	4313      	orrs	r3, r2
 800c16e:	3401      	adds	r4, #1
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c176:	4829      	ldr	r0, [pc, #164]	; (800c21c <_vfiprintf_r+0x224>)
 800c178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c17c:	2206      	movs	r2, #6
 800c17e:	f7f4 f82f 	bl	80001e0 <memchr>
 800c182:	2800      	cmp	r0, #0
 800c184:	d03f      	beq.n	800c206 <_vfiprintf_r+0x20e>
 800c186:	4b26      	ldr	r3, [pc, #152]	; (800c220 <_vfiprintf_r+0x228>)
 800c188:	bb1b      	cbnz	r3, 800c1d2 <_vfiprintf_r+0x1da>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	3307      	adds	r3, #7
 800c18e:	f023 0307 	bic.w	r3, r3, #7
 800c192:	3308      	adds	r3, #8
 800c194:	9303      	str	r3, [sp, #12]
 800c196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c198:	443b      	add	r3, r7
 800c19a:	9309      	str	r3, [sp, #36]	; 0x24
 800c19c:	e768      	b.n	800c070 <_vfiprintf_r+0x78>
 800c19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	2001      	movs	r0, #1
 800c1a6:	e7a6      	b.n	800c0f6 <_vfiprintf_r+0xfe>
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	9305      	str	r3, [sp, #20]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	f04f 0c0a 	mov.w	ip, #10
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ba:	3a30      	subs	r2, #48	; 0x30
 800c1bc:	2a09      	cmp	r2, #9
 800c1be:	d903      	bls.n	800c1c8 <_vfiprintf_r+0x1d0>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0c6      	beq.n	800c152 <_vfiprintf_r+0x15a>
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	e7c4      	b.n	800c152 <_vfiprintf_r+0x15a>
 800c1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1cc:	4604      	mov	r4, r0
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e7f0      	b.n	800c1b4 <_vfiprintf_r+0x1bc>
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	462a      	mov	r2, r5
 800c1d8:	4b12      	ldr	r3, [pc, #72]	; (800c224 <_vfiprintf_r+0x22c>)
 800c1da:	a904      	add	r1, sp, #16
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7fc f9e3 	bl	80085a8 <_printf_float>
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	1c78      	adds	r0, r7, #1
 800c1e6:	d1d6      	bne.n	800c196 <_vfiprintf_r+0x19e>
 800c1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ea:	07d9      	lsls	r1, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_vfiprintf_r+0x202>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_vfiprintf_r+0x202>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1f6:	f7fd fb0f 	bl	8009818 <__retarget_lock_release_recursive>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	065b      	lsls	r3, r3, #25
 800c1fe:	f53f af1d 	bmi.w	800c03c <_vfiprintf_r+0x44>
 800c202:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c204:	e71c      	b.n	800c040 <_vfiprintf_r+0x48>
 800c206:	ab03      	add	r3, sp, #12
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	462a      	mov	r2, r5
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <_vfiprintf_r+0x22c>)
 800c20e:	a904      	add	r1, sp, #16
 800c210:	4630      	mov	r0, r6
 800c212:	f7fc fc6d 	bl	8008af0 <_printf_i>
 800c216:	e7e4      	b.n	800c1e2 <_vfiprintf_r+0x1ea>
 800c218:	0800e8f0 	.word	0x0800e8f0
 800c21c:	0800e8fa 	.word	0x0800e8fa
 800c220:	080085a9 	.word	0x080085a9
 800c224:	0800bfd3 	.word	0x0800bfd3
 800c228:	0800e8f6 	.word	0x0800e8f6

0800c22c <__sflush_r>:
 800c22c:	898a      	ldrh	r2, [r1, #12]
 800c22e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c232:	4605      	mov	r5, r0
 800c234:	0710      	lsls	r0, r2, #28
 800c236:	460c      	mov	r4, r1
 800c238:	d458      	bmi.n	800c2ec <__sflush_r+0xc0>
 800c23a:	684b      	ldr	r3, [r1, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dc05      	bgt.n	800c24c <__sflush_r+0x20>
 800c240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	dc02      	bgt.n	800c24c <__sflush_r+0x20>
 800c246:	2000      	movs	r0, #0
 800c248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c24c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c24e:	2e00      	cmp	r6, #0
 800c250:	d0f9      	beq.n	800c246 <__sflush_r+0x1a>
 800c252:	2300      	movs	r3, #0
 800c254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c258:	682f      	ldr	r7, [r5, #0]
 800c25a:	6a21      	ldr	r1, [r4, #32]
 800c25c:	602b      	str	r3, [r5, #0]
 800c25e:	d032      	beq.n	800c2c6 <__sflush_r+0x9a>
 800c260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	075a      	lsls	r2, r3, #29
 800c266:	d505      	bpl.n	800c274 <__sflush_r+0x48>
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	1ac0      	subs	r0, r0, r3
 800c26c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c26e:	b10b      	cbz	r3, 800c274 <__sflush_r+0x48>
 800c270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c272:	1ac0      	subs	r0, r0, r3
 800c274:	2300      	movs	r3, #0
 800c276:	4602      	mov	r2, r0
 800c278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c27a:	6a21      	ldr	r1, [r4, #32]
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b0      	blx	r6
 800c280:	1c43      	adds	r3, r0, #1
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	d106      	bne.n	800c294 <__sflush_r+0x68>
 800c286:	6829      	ldr	r1, [r5, #0]
 800c288:	291d      	cmp	r1, #29
 800c28a:	d82b      	bhi.n	800c2e4 <__sflush_r+0xb8>
 800c28c:	4a29      	ldr	r2, [pc, #164]	; (800c334 <__sflush_r+0x108>)
 800c28e:	410a      	asrs	r2, r1
 800c290:	07d6      	lsls	r6, r2, #31
 800c292:	d427      	bmi.n	800c2e4 <__sflush_r+0xb8>
 800c294:	2200      	movs	r2, #0
 800c296:	6062      	str	r2, [r4, #4]
 800c298:	04d9      	lsls	r1, r3, #19
 800c29a:	6922      	ldr	r2, [r4, #16]
 800c29c:	6022      	str	r2, [r4, #0]
 800c29e:	d504      	bpl.n	800c2aa <__sflush_r+0x7e>
 800c2a0:	1c42      	adds	r2, r0, #1
 800c2a2:	d101      	bne.n	800c2a8 <__sflush_r+0x7c>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b903      	cbnz	r3, 800c2aa <__sflush_r+0x7e>
 800c2a8:	6560      	str	r0, [r4, #84]	; 0x54
 800c2aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ac:	602f      	str	r7, [r5, #0]
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	d0c9      	beq.n	800c246 <__sflush_r+0x1a>
 800c2b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2b6:	4299      	cmp	r1, r3
 800c2b8:	d002      	beq.n	800c2c0 <__sflush_r+0x94>
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7fe f95a 	bl	800a574 <_free_r>
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	6360      	str	r0, [r4, #52]	; 0x34
 800c2c4:	e7c0      	b.n	800c248 <__sflush_r+0x1c>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	47b0      	blx	r6
 800c2cc:	1c41      	adds	r1, r0, #1
 800c2ce:	d1c8      	bne.n	800c262 <__sflush_r+0x36>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d0c5      	beq.n	800c262 <__sflush_r+0x36>
 800c2d6:	2b1d      	cmp	r3, #29
 800c2d8:	d001      	beq.n	800c2de <__sflush_r+0xb2>
 800c2da:	2b16      	cmp	r3, #22
 800c2dc:	d101      	bne.n	800c2e2 <__sflush_r+0xb6>
 800c2de:	602f      	str	r7, [r5, #0]
 800c2e0:	e7b1      	b.n	800c246 <__sflush_r+0x1a>
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	e7ad      	b.n	800c248 <__sflush_r+0x1c>
 800c2ec:	690f      	ldr	r7, [r1, #16]
 800c2ee:	2f00      	cmp	r7, #0
 800c2f0:	d0a9      	beq.n	800c246 <__sflush_r+0x1a>
 800c2f2:	0793      	lsls	r3, r2, #30
 800c2f4:	680e      	ldr	r6, [r1, #0]
 800c2f6:	bf08      	it	eq
 800c2f8:	694b      	ldreq	r3, [r1, #20]
 800c2fa:	600f      	str	r7, [r1, #0]
 800c2fc:	bf18      	it	ne
 800c2fe:	2300      	movne	r3, #0
 800c300:	eba6 0807 	sub.w	r8, r6, r7
 800c304:	608b      	str	r3, [r1, #8]
 800c306:	f1b8 0f00 	cmp.w	r8, #0
 800c30a:	dd9c      	ble.n	800c246 <__sflush_r+0x1a>
 800c30c:	6a21      	ldr	r1, [r4, #32]
 800c30e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c310:	4643      	mov	r3, r8
 800c312:	463a      	mov	r2, r7
 800c314:	4628      	mov	r0, r5
 800c316:	47b0      	blx	r6
 800c318:	2800      	cmp	r0, #0
 800c31a:	dc06      	bgt.n	800c32a <__sflush_r+0xfe>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	f04f 30ff 	mov.w	r0, #4294967295
 800c328:	e78e      	b.n	800c248 <__sflush_r+0x1c>
 800c32a:	4407      	add	r7, r0
 800c32c:	eba8 0800 	sub.w	r8, r8, r0
 800c330:	e7e9      	b.n	800c306 <__sflush_r+0xda>
 800c332:	bf00      	nop
 800c334:	dfbffffe 	.word	0xdfbffffe

0800c338 <_fflush_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	690b      	ldr	r3, [r1, #16]
 800c33c:	4605      	mov	r5, r0
 800c33e:	460c      	mov	r4, r1
 800c340:	b913      	cbnz	r3, 800c348 <_fflush_r+0x10>
 800c342:	2500      	movs	r5, #0
 800c344:	4628      	mov	r0, r5
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	b118      	cbz	r0, 800c352 <_fflush_r+0x1a>
 800c34a:	6a03      	ldr	r3, [r0, #32]
 800c34c:	b90b      	cbnz	r3, 800c352 <_fflush_r+0x1a>
 800c34e:	f7fc ff8d 	bl	800926c <__sinit>
 800c352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0f3      	beq.n	800c342 <_fflush_r+0xa>
 800c35a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c35c:	07d0      	lsls	r0, r2, #31
 800c35e:	d404      	bmi.n	800c36a <_fflush_r+0x32>
 800c360:	0599      	lsls	r1, r3, #22
 800c362:	d402      	bmi.n	800c36a <_fflush_r+0x32>
 800c364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c366:	f7fd fa56 	bl	8009816 <__retarget_lock_acquire_recursive>
 800c36a:	4628      	mov	r0, r5
 800c36c:	4621      	mov	r1, r4
 800c36e:	f7ff ff5d 	bl	800c22c <__sflush_r>
 800c372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c374:	07da      	lsls	r2, r3, #31
 800c376:	4605      	mov	r5, r0
 800c378:	d4e4      	bmi.n	800c344 <_fflush_r+0xc>
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	059b      	lsls	r3, r3, #22
 800c37e:	d4e1      	bmi.n	800c344 <_fflush_r+0xc>
 800c380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c382:	f7fd fa49 	bl	8009818 <__retarget_lock_release_recursive>
 800c386:	e7dd      	b.n	800c344 <_fflush_r+0xc>

0800c388 <fiprintf>:
 800c388:	b40e      	push	{r1, r2, r3}
 800c38a:	b503      	push	{r0, r1, lr}
 800c38c:	4601      	mov	r1, r0
 800c38e:	ab03      	add	r3, sp, #12
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <fiprintf+0x20>)
 800c392:	f853 2b04 	ldr.w	r2, [r3], #4
 800c396:	6800      	ldr	r0, [r0, #0]
 800c398:	9301      	str	r3, [sp, #4]
 800c39a:	f7ff fe2d 	bl	800bff8 <_vfiprintf_r>
 800c39e:	b002      	add	sp, #8
 800c3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	4770      	bx	lr
 800c3a8:	20000064 	.word	0x20000064

0800c3ac <__swhatbuf_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3b4:	2900      	cmp	r1, #0
 800c3b6:	b096      	sub	sp, #88	; 0x58
 800c3b8:	4615      	mov	r5, r2
 800c3ba:	461e      	mov	r6, r3
 800c3bc:	da0d      	bge.n	800c3da <__swhatbuf_r+0x2e>
 800c3be:	89a3      	ldrh	r3, [r4, #12]
 800c3c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3c4:	f04f 0100 	mov.w	r1, #0
 800c3c8:	bf0c      	ite	eq
 800c3ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3ce:	2340      	movne	r3, #64	; 0x40
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	6031      	str	r1, [r6, #0]
 800c3d4:	602b      	str	r3, [r5, #0]
 800c3d6:	b016      	add	sp, #88	; 0x58
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	466a      	mov	r2, sp
 800c3dc:	f000 f8a8 	bl	800c530 <_fstat_r>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	dbec      	blt.n	800c3be <__swhatbuf_r+0x12>
 800c3e4:	9901      	ldr	r1, [sp, #4]
 800c3e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c3ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c3ee:	4259      	negs	r1, r3
 800c3f0:	4159      	adcs	r1, r3
 800c3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f6:	e7eb      	b.n	800c3d0 <__swhatbuf_r+0x24>

0800c3f8 <__smakebuf_r>:
 800c3f8:	898b      	ldrh	r3, [r1, #12]
 800c3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3fc:	079d      	lsls	r5, r3, #30
 800c3fe:	4606      	mov	r6, r0
 800c400:	460c      	mov	r4, r1
 800c402:	d507      	bpl.n	800c414 <__smakebuf_r+0x1c>
 800c404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c408:	6023      	str	r3, [r4, #0]
 800c40a:	6123      	str	r3, [r4, #16]
 800c40c:	2301      	movs	r3, #1
 800c40e:	6163      	str	r3, [r4, #20]
 800c410:	b002      	add	sp, #8
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	ab01      	add	r3, sp, #4
 800c416:	466a      	mov	r2, sp
 800c418:	f7ff ffc8 	bl	800c3ac <__swhatbuf_r>
 800c41c:	9900      	ldr	r1, [sp, #0]
 800c41e:	4605      	mov	r5, r0
 800c420:	4630      	mov	r0, r6
 800c422:	f7fe f91b 	bl	800a65c <_malloc_r>
 800c426:	b948      	cbnz	r0, 800c43c <__smakebuf_r+0x44>
 800c428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42c:	059a      	lsls	r2, r3, #22
 800c42e:	d4ef      	bmi.n	800c410 <__smakebuf_r+0x18>
 800c430:	f023 0303 	bic.w	r3, r3, #3
 800c434:	f043 0302 	orr.w	r3, r3, #2
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7e3      	b.n	800c404 <__smakebuf_r+0xc>
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c444:	81a3      	strh	r3, [r4, #12]
 800c446:	9b00      	ldr	r3, [sp, #0]
 800c448:	6163      	str	r3, [r4, #20]
 800c44a:	9b01      	ldr	r3, [sp, #4]
 800c44c:	6120      	str	r0, [r4, #16]
 800c44e:	b15b      	cbz	r3, 800c468 <__smakebuf_r+0x70>
 800c450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c454:	4630      	mov	r0, r6
 800c456:	f000 f87d 	bl	800c554 <_isatty_r>
 800c45a:	b128      	cbz	r0, 800c468 <__smakebuf_r+0x70>
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f023 0303 	bic.w	r3, r3, #3
 800c462:	f043 0301 	orr.w	r3, r3, #1
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	89a3      	ldrh	r3, [r4, #12]
 800c46a:	431d      	orrs	r5, r3
 800c46c:	81a5      	strh	r5, [r4, #12]
 800c46e:	e7cf      	b.n	800c410 <__smakebuf_r+0x18>

0800c470 <_putc_r>:
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	460d      	mov	r5, r1
 800c474:	4614      	mov	r4, r2
 800c476:	4606      	mov	r6, r0
 800c478:	b118      	cbz	r0, 800c482 <_putc_r+0x12>
 800c47a:	6a03      	ldr	r3, [r0, #32]
 800c47c:	b90b      	cbnz	r3, 800c482 <_putc_r+0x12>
 800c47e:	f7fc fef5 	bl	800926c <__sinit>
 800c482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c484:	07d8      	lsls	r0, r3, #31
 800c486:	d405      	bmi.n	800c494 <_putc_r+0x24>
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	0599      	lsls	r1, r3, #22
 800c48c:	d402      	bmi.n	800c494 <_putc_r+0x24>
 800c48e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c490:	f7fd f9c1 	bl	8009816 <__retarget_lock_acquire_recursive>
 800c494:	68a3      	ldr	r3, [r4, #8]
 800c496:	3b01      	subs	r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	60a3      	str	r3, [r4, #8]
 800c49c:	da05      	bge.n	800c4aa <_putc_r+0x3a>
 800c49e:	69a2      	ldr	r2, [r4, #24]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	db12      	blt.n	800c4ca <_putc_r+0x5a>
 800c4a4:	b2eb      	uxtb	r3, r5
 800c4a6:	2b0a      	cmp	r3, #10
 800c4a8:	d00f      	beq.n	800c4ca <_putc_r+0x5a>
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	1c5a      	adds	r2, r3, #1
 800c4ae:	6022      	str	r2, [r4, #0]
 800c4b0:	701d      	strb	r5, [r3, #0]
 800c4b2:	b2ed      	uxtb	r5, r5
 800c4b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4b6:	07da      	lsls	r2, r3, #31
 800c4b8:	d405      	bmi.n	800c4c6 <_putc_r+0x56>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	059b      	lsls	r3, r3, #22
 800c4be:	d402      	bmi.n	800c4c6 <_putc_r+0x56>
 800c4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4c2:	f7fd f9a9 	bl	8009818 <__retarget_lock_release_recursive>
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7fd f80f 	bl	80094f2 <__swbuf_r>
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	e7ed      	b.n	800c4b4 <_putc_r+0x44>

0800c4d8 <memmove>:
 800c4d8:	4288      	cmp	r0, r1
 800c4da:	b510      	push	{r4, lr}
 800c4dc:	eb01 0402 	add.w	r4, r1, r2
 800c4e0:	d902      	bls.n	800c4e8 <memmove+0x10>
 800c4e2:	4284      	cmp	r4, r0
 800c4e4:	4623      	mov	r3, r4
 800c4e6:	d807      	bhi.n	800c4f8 <memmove+0x20>
 800c4e8:	1e43      	subs	r3, r0, #1
 800c4ea:	42a1      	cmp	r1, r4
 800c4ec:	d008      	beq.n	800c500 <memmove+0x28>
 800c4ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4f6:	e7f8      	b.n	800c4ea <memmove+0x12>
 800c4f8:	4402      	add	r2, r0
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	428a      	cmp	r2, r1
 800c4fe:	d100      	bne.n	800c502 <memmove+0x2a>
 800c500:	bd10      	pop	{r4, pc}
 800c502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c50a:	e7f7      	b.n	800c4fc <memmove+0x24>

0800c50c <strncmp>:
 800c50c:	b510      	push	{r4, lr}
 800c50e:	b16a      	cbz	r2, 800c52c <strncmp+0x20>
 800c510:	3901      	subs	r1, #1
 800c512:	1884      	adds	r4, r0, r2
 800c514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c518:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d103      	bne.n	800c528 <strncmp+0x1c>
 800c520:	42a0      	cmp	r0, r4
 800c522:	d001      	beq.n	800c528 <strncmp+0x1c>
 800c524:	2a00      	cmp	r2, #0
 800c526:	d1f5      	bne.n	800c514 <strncmp+0x8>
 800c528:	1ad0      	subs	r0, r2, r3
 800c52a:	bd10      	pop	{r4, pc}
 800c52c:	4610      	mov	r0, r2
 800c52e:	e7fc      	b.n	800c52a <strncmp+0x1e>

0800c530 <_fstat_r>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d07      	ldr	r5, [pc, #28]	; (800c550 <_fstat_r+0x20>)
 800c534:	2300      	movs	r3, #0
 800c536:	4604      	mov	r4, r0
 800c538:	4608      	mov	r0, r1
 800c53a:	4611      	mov	r1, r2
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f7f5 fbe8 	bl	8001d12 <_fstat>
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	d102      	bne.n	800c54c <_fstat_r+0x1c>
 800c546:	682b      	ldr	r3, [r5, #0]
 800c548:	b103      	cbz	r3, 800c54c <_fstat_r+0x1c>
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	bd38      	pop	{r3, r4, r5, pc}
 800c54e:	bf00      	nop
 800c550:	20000e2c 	.word	0x20000e2c

0800c554 <_isatty_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_isatty_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f5 fbe7 	bl	8001d32 <_isatty>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_isatty_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_isatty_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	20000e2c 	.word	0x20000e2c

0800c574 <_sbrk_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d06      	ldr	r5, [pc, #24]	; (800c590 <_sbrk_r+0x1c>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f5 fbf0 	bl	8001d64 <_sbrk>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_sbrk_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_sbrk_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	20000e2c 	.word	0x20000e2c
 800c594:	00000000 	.word	0x00000000

0800c598 <nan>:
 800c598:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c5a0 <nan+0x8>
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	00000000 	.word	0x00000000
 800c5a4:	7ff80000 	.word	0x7ff80000

0800c5a8 <abort>:
 800c5a8:	b508      	push	{r3, lr}
 800c5aa:	2006      	movs	r0, #6
 800c5ac:	f000 fbe6 	bl	800cd7c <raise>
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	f7f5 fb5f 	bl	8001c74 <_exit>

0800c5b6 <_calloc_r>:
 800c5b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5b8:	fba1 2402 	umull	r2, r4, r1, r2
 800c5bc:	b94c      	cbnz	r4, 800c5d2 <_calloc_r+0x1c>
 800c5be:	4611      	mov	r1, r2
 800c5c0:	9201      	str	r2, [sp, #4]
 800c5c2:	f7fe f84b 	bl	800a65c <_malloc_r>
 800c5c6:	9a01      	ldr	r2, [sp, #4]
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	b930      	cbnz	r0, 800c5da <_calloc_r+0x24>
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	b003      	add	sp, #12
 800c5d0:	bd30      	pop	{r4, r5, pc}
 800c5d2:	220c      	movs	r2, #12
 800c5d4:	6002      	str	r2, [r0, #0]
 800c5d6:	2500      	movs	r5, #0
 800c5d8:	e7f8      	b.n	800c5cc <_calloc_r+0x16>
 800c5da:	4621      	mov	r1, r4
 800c5dc:	f7fd f81e 	bl	800961c <memset>
 800c5e0:	e7f4      	b.n	800c5cc <_calloc_r+0x16>

0800c5e2 <rshift>:
 800c5e2:	6903      	ldr	r3, [r0, #16]
 800c5e4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5ec:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5f0:	f100 0414 	add.w	r4, r0, #20
 800c5f4:	dd45      	ble.n	800c682 <rshift+0xa0>
 800c5f6:	f011 011f 	ands.w	r1, r1, #31
 800c5fa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5fe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c602:	d10c      	bne.n	800c61e <rshift+0x3c>
 800c604:	f100 0710 	add.w	r7, r0, #16
 800c608:	4629      	mov	r1, r5
 800c60a:	42b1      	cmp	r1, r6
 800c60c:	d334      	bcc.n	800c678 <rshift+0x96>
 800c60e:	1a9b      	subs	r3, r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	1eea      	subs	r2, r5, #3
 800c614:	4296      	cmp	r6, r2
 800c616:	bf38      	it	cc
 800c618:	2300      	movcc	r3, #0
 800c61a:	4423      	add	r3, r4
 800c61c:	e015      	b.n	800c64a <rshift+0x68>
 800c61e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c622:	f1c1 0820 	rsb	r8, r1, #32
 800c626:	40cf      	lsrs	r7, r1
 800c628:	f105 0e04 	add.w	lr, r5, #4
 800c62c:	46a1      	mov	r9, r4
 800c62e:	4576      	cmp	r6, lr
 800c630:	46f4      	mov	ip, lr
 800c632:	d815      	bhi.n	800c660 <rshift+0x7e>
 800c634:	1a9a      	subs	r2, r3, r2
 800c636:	0092      	lsls	r2, r2, #2
 800c638:	3a04      	subs	r2, #4
 800c63a:	3501      	adds	r5, #1
 800c63c:	42ae      	cmp	r6, r5
 800c63e:	bf38      	it	cc
 800c640:	2200      	movcc	r2, #0
 800c642:	18a3      	adds	r3, r4, r2
 800c644:	50a7      	str	r7, [r4, r2]
 800c646:	b107      	cbz	r7, 800c64a <rshift+0x68>
 800c648:	3304      	adds	r3, #4
 800c64a:	1b1a      	subs	r2, r3, r4
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c652:	bf08      	it	eq
 800c654:	2300      	moveq	r3, #0
 800c656:	6102      	str	r2, [r0, #16]
 800c658:	bf08      	it	eq
 800c65a:	6143      	streq	r3, [r0, #20]
 800c65c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c660:	f8dc c000 	ldr.w	ip, [ip]
 800c664:	fa0c fc08 	lsl.w	ip, ip, r8
 800c668:	ea4c 0707 	orr.w	r7, ip, r7
 800c66c:	f849 7b04 	str.w	r7, [r9], #4
 800c670:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c674:	40cf      	lsrs	r7, r1
 800c676:	e7da      	b.n	800c62e <rshift+0x4c>
 800c678:	f851 cb04 	ldr.w	ip, [r1], #4
 800c67c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c680:	e7c3      	b.n	800c60a <rshift+0x28>
 800c682:	4623      	mov	r3, r4
 800c684:	e7e1      	b.n	800c64a <rshift+0x68>

0800c686 <__hexdig_fun>:
 800c686:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d802      	bhi.n	800c694 <__hexdig_fun+0xe>
 800c68e:	3820      	subs	r0, #32
 800c690:	b2c0      	uxtb	r0, r0
 800c692:	4770      	bx	lr
 800c694:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c698:	2b05      	cmp	r3, #5
 800c69a:	d801      	bhi.n	800c6a0 <__hexdig_fun+0x1a>
 800c69c:	3847      	subs	r0, #71	; 0x47
 800c69e:	e7f7      	b.n	800c690 <__hexdig_fun+0xa>
 800c6a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c6a4:	2b05      	cmp	r3, #5
 800c6a6:	d801      	bhi.n	800c6ac <__hexdig_fun+0x26>
 800c6a8:	3827      	subs	r0, #39	; 0x27
 800c6aa:	e7f1      	b.n	800c690 <__hexdig_fun+0xa>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	4770      	bx	lr

0800c6b0 <__gethex>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	4617      	mov	r7, r2
 800c6b6:	680a      	ldr	r2, [r1, #0]
 800c6b8:	b085      	sub	sp, #20
 800c6ba:	f102 0b02 	add.w	fp, r2, #2
 800c6be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c6c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c6c6:	4681      	mov	r9, r0
 800c6c8:	468a      	mov	sl, r1
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	32fe      	adds	r2, #254	; 0xfe
 800c6ce:	eb02 030b 	add.w	r3, r2, fp
 800c6d2:	46d8      	mov	r8, fp
 800c6d4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	2830      	cmp	r0, #48	; 0x30
 800c6dc:	d0f7      	beq.n	800c6ce <__gethex+0x1e>
 800c6de:	f7ff ffd2 	bl	800c686 <__hexdig_fun>
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d138      	bne.n	800c75a <__gethex+0xaa>
 800c6e8:	49a7      	ldr	r1, [pc, #668]	; (800c988 <__gethex+0x2d8>)
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	4640      	mov	r0, r8
 800c6ee:	f7ff ff0d 	bl	800c50c <strncmp>
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d169      	bne.n	800c7cc <__gethex+0x11c>
 800c6f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c6fc:	465d      	mov	r5, fp
 800c6fe:	f7ff ffc2 	bl	800c686 <__hexdig_fun>
 800c702:	2800      	cmp	r0, #0
 800c704:	d064      	beq.n	800c7d0 <__gethex+0x120>
 800c706:	465a      	mov	r2, fp
 800c708:	7810      	ldrb	r0, [r2, #0]
 800c70a:	2830      	cmp	r0, #48	; 0x30
 800c70c:	4690      	mov	r8, r2
 800c70e:	f102 0201 	add.w	r2, r2, #1
 800c712:	d0f9      	beq.n	800c708 <__gethex+0x58>
 800c714:	f7ff ffb7 	bl	800c686 <__hexdig_fun>
 800c718:	2301      	movs	r3, #1
 800c71a:	fab0 f480 	clz	r4, r0
 800c71e:	0964      	lsrs	r4, r4, #5
 800c720:	465e      	mov	r6, fp
 800c722:	9301      	str	r3, [sp, #4]
 800c724:	4642      	mov	r2, r8
 800c726:	4615      	mov	r5, r2
 800c728:	3201      	adds	r2, #1
 800c72a:	7828      	ldrb	r0, [r5, #0]
 800c72c:	f7ff ffab 	bl	800c686 <__hexdig_fun>
 800c730:	2800      	cmp	r0, #0
 800c732:	d1f8      	bne.n	800c726 <__gethex+0x76>
 800c734:	4994      	ldr	r1, [pc, #592]	; (800c988 <__gethex+0x2d8>)
 800c736:	2201      	movs	r2, #1
 800c738:	4628      	mov	r0, r5
 800c73a:	f7ff fee7 	bl	800c50c <strncmp>
 800c73e:	b978      	cbnz	r0, 800c760 <__gethex+0xb0>
 800c740:	b946      	cbnz	r6, 800c754 <__gethex+0xa4>
 800c742:	1c6e      	adds	r6, r5, #1
 800c744:	4632      	mov	r2, r6
 800c746:	4615      	mov	r5, r2
 800c748:	3201      	adds	r2, #1
 800c74a:	7828      	ldrb	r0, [r5, #0]
 800c74c:	f7ff ff9b 	bl	800c686 <__hexdig_fun>
 800c750:	2800      	cmp	r0, #0
 800c752:	d1f8      	bne.n	800c746 <__gethex+0x96>
 800c754:	1b73      	subs	r3, r6, r5
 800c756:	009e      	lsls	r6, r3, #2
 800c758:	e004      	b.n	800c764 <__gethex+0xb4>
 800c75a:	2400      	movs	r4, #0
 800c75c:	4626      	mov	r6, r4
 800c75e:	e7e1      	b.n	800c724 <__gethex+0x74>
 800c760:	2e00      	cmp	r6, #0
 800c762:	d1f7      	bne.n	800c754 <__gethex+0xa4>
 800c764:	782b      	ldrb	r3, [r5, #0]
 800c766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c76a:	2b50      	cmp	r3, #80	; 0x50
 800c76c:	d13d      	bne.n	800c7ea <__gethex+0x13a>
 800c76e:	786b      	ldrb	r3, [r5, #1]
 800c770:	2b2b      	cmp	r3, #43	; 0x2b
 800c772:	d02f      	beq.n	800c7d4 <__gethex+0x124>
 800c774:	2b2d      	cmp	r3, #45	; 0x2d
 800c776:	d031      	beq.n	800c7dc <__gethex+0x12c>
 800c778:	1c69      	adds	r1, r5, #1
 800c77a:	f04f 0b00 	mov.w	fp, #0
 800c77e:	7808      	ldrb	r0, [r1, #0]
 800c780:	f7ff ff81 	bl	800c686 <__hexdig_fun>
 800c784:	1e42      	subs	r2, r0, #1
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	2a18      	cmp	r2, #24
 800c78a:	d82e      	bhi.n	800c7ea <__gethex+0x13a>
 800c78c:	f1a0 0210 	sub.w	r2, r0, #16
 800c790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c794:	f7ff ff77 	bl	800c686 <__hexdig_fun>
 800c798:	f100 3cff 	add.w	ip, r0, #4294967295
 800c79c:	fa5f fc8c 	uxtb.w	ip, ip
 800c7a0:	f1bc 0f18 	cmp.w	ip, #24
 800c7a4:	d91d      	bls.n	800c7e2 <__gethex+0x132>
 800c7a6:	f1bb 0f00 	cmp.w	fp, #0
 800c7aa:	d000      	beq.n	800c7ae <__gethex+0xfe>
 800c7ac:	4252      	negs	r2, r2
 800c7ae:	4416      	add	r6, r2
 800c7b0:	f8ca 1000 	str.w	r1, [sl]
 800c7b4:	b1dc      	cbz	r4, 800c7ee <__gethex+0x13e>
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bf14      	ite	ne
 800c7bc:	f04f 0800 	movne.w	r8, #0
 800c7c0:	f04f 0806 	moveq.w	r8, #6
 800c7c4:	4640      	mov	r0, r8
 800c7c6:	b005      	add	sp, #20
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7cc:	4645      	mov	r5, r8
 800c7ce:	4626      	mov	r6, r4
 800c7d0:	2401      	movs	r4, #1
 800c7d2:	e7c7      	b.n	800c764 <__gethex+0xb4>
 800c7d4:	f04f 0b00 	mov.w	fp, #0
 800c7d8:	1ca9      	adds	r1, r5, #2
 800c7da:	e7d0      	b.n	800c77e <__gethex+0xce>
 800c7dc:	f04f 0b01 	mov.w	fp, #1
 800c7e0:	e7fa      	b.n	800c7d8 <__gethex+0x128>
 800c7e2:	230a      	movs	r3, #10
 800c7e4:	fb03 0002 	mla	r0, r3, r2, r0
 800c7e8:	e7d0      	b.n	800c78c <__gethex+0xdc>
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	e7e0      	b.n	800c7b0 <__gethex+0x100>
 800c7ee:	eba5 0308 	sub.w	r3, r5, r8
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	2b07      	cmp	r3, #7
 800c7f8:	dc0a      	bgt.n	800c810 <__gethex+0x160>
 800c7fa:	4648      	mov	r0, r9
 800c7fc:	f7fd ffba 	bl	800a774 <_Balloc>
 800c800:	4604      	mov	r4, r0
 800c802:	b940      	cbnz	r0, 800c816 <__gethex+0x166>
 800c804:	4b61      	ldr	r3, [pc, #388]	; (800c98c <__gethex+0x2dc>)
 800c806:	4602      	mov	r2, r0
 800c808:	21e4      	movs	r1, #228	; 0xe4
 800c80a:	4861      	ldr	r0, [pc, #388]	; (800c990 <__gethex+0x2e0>)
 800c80c:	f7fd f81a 	bl	8009844 <__assert_func>
 800c810:	3101      	adds	r1, #1
 800c812:	105b      	asrs	r3, r3, #1
 800c814:	e7ef      	b.n	800c7f6 <__gethex+0x146>
 800c816:	f100 0a14 	add.w	sl, r0, #20
 800c81a:	2300      	movs	r3, #0
 800c81c:	495a      	ldr	r1, [pc, #360]	; (800c988 <__gethex+0x2d8>)
 800c81e:	f8cd a004 	str.w	sl, [sp, #4]
 800c822:	469b      	mov	fp, r3
 800c824:	45a8      	cmp	r8, r5
 800c826:	d342      	bcc.n	800c8ae <__gethex+0x1fe>
 800c828:	9801      	ldr	r0, [sp, #4]
 800c82a:	f840 bb04 	str.w	fp, [r0], #4
 800c82e:	eba0 000a 	sub.w	r0, r0, sl
 800c832:	1080      	asrs	r0, r0, #2
 800c834:	6120      	str	r0, [r4, #16]
 800c836:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c83a:	4658      	mov	r0, fp
 800c83c:	f7fe f88c 	bl	800a958 <__hi0bits>
 800c840:	683d      	ldr	r5, [r7, #0]
 800c842:	eba8 0000 	sub.w	r0, r8, r0
 800c846:	42a8      	cmp	r0, r5
 800c848:	dd59      	ble.n	800c8fe <__gethex+0x24e>
 800c84a:	eba0 0805 	sub.w	r8, r0, r5
 800c84e:	4641      	mov	r1, r8
 800c850:	4620      	mov	r0, r4
 800c852:	f7fe fc1b 	bl	800b08c <__any_on>
 800c856:	4683      	mov	fp, r0
 800c858:	b1b8      	cbz	r0, 800c88a <__gethex+0x1da>
 800c85a:	f108 33ff 	add.w	r3, r8, #4294967295
 800c85e:	1159      	asrs	r1, r3, #5
 800c860:	f003 021f 	and.w	r2, r3, #31
 800c864:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c868:	f04f 0b01 	mov.w	fp, #1
 800c86c:	fa0b f202 	lsl.w	r2, fp, r2
 800c870:	420a      	tst	r2, r1
 800c872:	d00a      	beq.n	800c88a <__gethex+0x1da>
 800c874:	455b      	cmp	r3, fp
 800c876:	dd06      	ble.n	800c886 <__gethex+0x1d6>
 800c878:	f1a8 0102 	sub.w	r1, r8, #2
 800c87c:	4620      	mov	r0, r4
 800c87e:	f7fe fc05 	bl	800b08c <__any_on>
 800c882:	2800      	cmp	r0, #0
 800c884:	d138      	bne.n	800c8f8 <__gethex+0x248>
 800c886:	f04f 0b02 	mov.w	fp, #2
 800c88a:	4641      	mov	r1, r8
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7ff fea8 	bl	800c5e2 <rshift>
 800c892:	4446      	add	r6, r8
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	42b3      	cmp	r3, r6
 800c898:	da41      	bge.n	800c91e <__gethex+0x26e>
 800c89a:	4621      	mov	r1, r4
 800c89c:	4648      	mov	r0, r9
 800c89e:	f7fd ffa9 	bl	800a7f4 <_Bfree>
 800c8a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6013      	str	r3, [r2, #0]
 800c8a8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c8ac:	e78a      	b.n	800c7c4 <__gethex+0x114>
 800c8ae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c8b2:	2a2e      	cmp	r2, #46	; 0x2e
 800c8b4:	d014      	beq.n	800c8e0 <__gethex+0x230>
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	d106      	bne.n	800c8c8 <__gethex+0x218>
 800c8ba:	9b01      	ldr	r3, [sp, #4]
 800c8bc:	f843 bb04 	str.w	fp, [r3], #4
 800c8c0:	f04f 0b00 	mov.w	fp, #0
 800c8c4:	9301      	str	r3, [sp, #4]
 800c8c6:	465b      	mov	r3, fp
 800c8c8:	7828      	ldrb	r0, [r5, #0]
 800c8ca:	9303      	str	r3, [sp, #12]
 800c8cc:	f7ff fedb 	bl	800c686 <__hexdig_fun>
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	f000 000f 	and.w	r0, r0, #15
 800c8d6:	4098      	lsls	r0, r3
 800c8d8:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8dc:	3304      	adds	r3, #4
 800c8de:	e7a1      	b.n	800c824 <__gethex+0x174>
 800c8e0:	45a8      	cmp	r8, r5
 800c8e2:	d8e8      	bhi.n	800c8b6 <__gethex+0x206>
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	4628      	mov	r0, r5
 800c8e8:	9303      	str	r3, [sp, #12]
 800c8ea:	f7ff fe0f 	bl	800c50c <strncmp>
 800c8ee:	4926      	ldr	r1, [pc, #152]	; (800c988 <__gethex+0x2d8>)
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d1df      	bne.n	800c8b6 <__gethex+0x206>
 800c8f6:	e795      	b.n	800c824 <__gethex+0x174>
 800c8f8:	f04f 0b03 	mov.w	fp, #3
 800c8fc:	e7c5      	b.n	800c88a <__gethex+0x1da>
 800c8fe:	da0b      	bge.n	800c918 <__gethex+0x268>
 800c900:	eba5 0800 	sub.w	r8, r5, r0
 800c904:	4621      	mov	r1, r4
 800c906:	4642      	mov	r2, r8
 800c908:	4648      	mov	r0, r9
 800c90a:	f7fe f98d 	bl	800ac28 <__lshift>
 800c90e:	eba6 0608 	sub.w	r6, r6, r8
 800c912:	4604      	mov	r4, r0
 800c914:	f100 0a14 	add.w	sl, r0, #20
 800c918:	f04f 0b00 	mov.w	fp, #0
 800c91c:	e7ba      	b.n	800c894 <__gethex+0x1e4>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	42b3      	cmp	r3, r6
 800c922:	dd73      	ble.n	800ca0c <__gethex+0x35c>
 800c924:	1b9e      	subs	r6, r3, r6
 800c926:	42b5      	cmp	r5, r6
 800c928:	dc34      	bgt.n	800c994 <__gethex+0x2e4>
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d023      	beq.n	800c978 <__gethex+0x2c8>
 800c930:	2b03      	cmp	r3, #3
 800c932:	d025      	beq.n	800c980 <__gethex+0x2d0>
 800c934:	2b01      	cmp	r3, #1
 800c936:	d115      	bne.n	800c964 <__gethex+0x2b4>
 800c938:	42b5      	cmp	r5, r6
 800c93a:	d113      	bne.n	800c964 <__gethex+0x2b4>
 800c93c:	2d01      	cmp	r5, #1
 800c93e:	d10b      	bne.n	800c958 <__gethex+0x2a8>
 800c940:	9a02      	ldr	r2, [sp, #8]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	2301      	movs	r3, #1
 800c948:	6123      	str	r3, [r4, #16]
 800c94a:	f8ca 3000 	str.w	r3, [sl]
 800c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c950:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c954:	601c      	str	r4, [r3, #0]
 800c956:	e735      	b.n	800c7c4 <__gethex+0x114>
 800c958:	1e69      	subs	r1, r5, #1
 800c95a:	4620      	mov	r0, r4
 800c95c:	f7fe fb96 	bl	800b08c <__any_on>
 800c960:	2800      	cmp	r0, #0
 800c962:	d1ed      	bne.n	800c940 <__gethex+0x290>
 800c964:	4621      	mov	r1, r4
 800c966:	4648      	mov	r0, r9
 800c968:	f7fd ff44 	bl	800a7f4 <_Bfree>
 800c96c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c96e:	2300      	movs	r3, #0
 800c970:	6013      	str	r3, [r2, #0]
 800c972:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c976:	e725      	b.n	800c7c4 <__gethex+0x114>
 800c978:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d1f2      	bne.n	800c964 <__gethex+0x2b4>
 800c97e:	e7df      	b.n	800c940 <__gethex+0x290>
 800c980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1dc      	bne.n	800c940 <__gethex+0x290>
 800c986:	e7ed      	b.n	800c964 <__gethex+0x2b4>
 800c988:	0800e89c 	.word	0x0800e89c
 800c98c:	0800e730 	.word	0x0800e730
 800c990:	0800e909 	.word	0x0800e909
 800c994:	f106 38ff 	add.w	r8, r6, #4294967295
 800c998:	f1bb 0f00 	cmp.w	fp, #0
 800c99c:	d133      	bne.n	800ca06 <__gethex+0x356>
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	d004      	beq.n	800c9ae <__gethex+0x2fe>
 800c9a4:	4641      	mov	r1, r8
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	f7fe fb70 	bl	800b08c <__any_on>
 800c9ac:	4683      	mov	fp, r0
 800c9ae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9b8:	f008 081f 	and.w	r8, r8, #31
 800c9bc:	fa03 f308 	lsl.w	r3, r3, r8
 800c9c0:	4213      	tst	r3, r2
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	bf18      	it	ne
 800c9c8:	f04b 0b02 	orrne.w	fp, fp, #2
 800c9cc:	1bad      	subs	r5, r5, r6
 800c9ce:	f7ff fe08 	bl	800c5e2 <rshift>
 800c9d2:	687e      	ldr	r6, [r7, #4]
 800c9d4:	f04f 0802 	mov.w	r8, #2
 800c9d8:	f1bb 0f00 	cmp.w	fp, #0
 800c9dc:	d04a      	beq.n	800ca74 <__gethex+0x3c4>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b02      	cmp	r3, #2
 800c9e2:	d016      	beq.n	800ca12 <__gethex+0x362>
 800c9e4:	2b03      	cmp	r3, #3
 800c9e6:	d018      	beq.n	800ca1a <__gethex+0x36a>
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d109      	bne.n	800ca00 <__gethex+0x350>
 800c9ec:	f01b 0f02 	tst.w	fp, #2
 800c9f0:	d006      	beq.n	800ca00 <__gethex+0x350>
 800c9f2:	f8da 3000 	ldr.w	r3, [sl]
 800c9f6:	ea4b 0b03 	orr.w	fp, fp, r3
 800c9fa:	f01b 0f01 	tst.w	fp, #1
 800c9fe:	d10f      	bne.n	800ca20 <__gethex+0x370>
 800ca00:	f048 0810 	orr.w	r8, r8, #16
 800ca04:	e036      	b.n	800ca74 <__gethex+0x3c4>
 800ca06:	f04f 0b01 	mov.w	fp, #1
 800ca0a:	e7d0      	b.n	800c9ae <__gethex+0x2fe>
 800ca0c:	f04f 0801 	mov.w	r8, #1
 800ca10:	e7e2      	b.n	800c9d8 <__gethex+0x328>
 800ca12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca14:	f1c3 0301 	rsb	r3, r3, #1
 800ca18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d0ef      	beq.n	800ca00 <__gethex+0x350>
 800ca20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca24:	f104 0214 	add.w	r2, r4, #20
 800ca28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ca32:	2300      	movs	r3, #0
 800ca34:	4694      	mov	ip, r2
 800ca36:	f852 1b04 	ldr.w	r1, [r2], #4
 800ca3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ca3e:	d01e      	beq.n	800ca7e <__gethex+0x3ce>
 800ca40:	3101      	adds	r1, #1
 800ca42:	f8cc 1000 	str.w	r1, [ip]
 800ca46:	f1b8 0f02 	cmp.w	r8, #2
 800ca4a:	f104 0214 	add.w	r2, r4, #20
 800ca4e:	d13d      	bne.n	800cacc <__gethex+0x41c>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	3b01      	subs	r3, #1
 800ca54:	42ab      	cmp	r3, r5
 800ca56:	d10b      	bne.n	800ca70 <__gethex+0x3c0>
 800ca58:	1169      	asrs	r1, r5, #5
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	f005 051f 	and.w	r5, r5, #31
 800ca60:	fa03 f505 	lsl.w	r5, r3, r5
 800ca64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca68:	421d      	tst	r5, r3
 800ca6a:	bf18      	it	ne
 800ca6c:	f04f 0801 	movne.w	r8, #1
 800ca70:	f048 0820 	orr.w	r8, r8, #32
 800ca74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca76:	601c      	str	r4, [r3, #0]
 800ca78:	9b02      	ldr	r3, [sp, #8]
 800ca7a:	601e      	str	r6, [r3, #0]
 800ca7c:	e6a2      	b.n	800c7c4 <__gethex+0x114>
 800ca7e:	4290      	cmp	r0, r2
 800ca80:	f842 3c04 	str.w	r3, [r2, #-4]
 800ca84:	d8d6      	bhi.n	800ca34 <__gethex+0x384>
 800ca86:	68a2      	ldr	r2, [r4, #8]
 800ca88:	4593      	cmp	fp, r2
 800ca8a:	db17      	blt.n	800cabc <__gethex+0x40c>
 800ca8c:	6861      	ldr	r1, [r4, #4]
 800ca8e:	4648      	mov	r0, r9
 800ca90:	3101      	adds	r1, #1
 800ca92:	f7fd fe6f 	bl	800a774 <_Balloc>
 800ca96:	4682      	mov	sl, r0
 800ca98:	b918      	cbnz	r0, 800caa2 <__gethex+0x3f2>
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <__gethex+0x458>)
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	2184      	movs	r1, #132	; 0x84
 800caa0:	e6b3      	b.n	800c80a <__gethex+0x15a>
 800caa2:	6922      	ldr	r2, [r4, #16]
 800caa4:	3202      	adds	r2, #2
 800caa6:	f104 010c 	add.w	r1, r4, #12
 800caaa:	0092      	lsls	r2, r2, #2
 800caac:	300c      	adds	r0, #12
 800caae:	f7fc feb4 	bl	800981a <memcpy>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4648      	mov	r0, r9
 800cab6:	f7fd fe9d 	bl	800a7f4 <_Bfree>
 800caba:	4654      	mov	r4, sl
 800cabc:	6922      	ldr	r2, [r4, #16]
 800cabe:	1c51      	adds	r1, r2, #1
 800cac0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cac4:	6121      	str	r1, [r4, #16]
 800cac6:	2101      	movs	r1, #1
 800cac8:	6151      	str	r1, [r2, #20]
 800caca:	e7bc      	b.n	800ca46 <__gethex+0x396>
 800cacc:	6921      	ldr	r1, [r4, #16]
 800cace:	4559      	cmp	r1, fp
 800cad0:	dd0b      	ble.n	800caea <__gethex+0x43a>
 800cad2:	2101      	movs	r1, #1
 800cad4:	4620      	mov	r0, r4
 800cad6:	f7ff fd84 	bl	800c5e2 <rshift>
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	3601      	adds	r6, #1
 800cade:	42b3      	cmp	r3, r6
 800cae0:	f6ff aedb 	blt.w	800c89a <__gethex+0x1ea>
 800cae4:	f04f 0801 	mov.w	r8, #1
 800cae8:	e7c2      	b.n	800ca70 <__gethex+0x3c0>
 800caea:	f015 051f 	ands.w	r5, r5, #31
 800caee:	d0f9      	beq.n	800cae4 <__gethex+0x434>
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	441a      	add	r2, r3
 800caf4:	f1c5 0520 	rsb	r5, r5, #32
 800caf8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cafc:	f7fd ff2c 	bl	800a958 <__hi0bits>
 800cb00:	42a8      	cmp	r0, r5
 800cb02:	dbe6      	blt.n	800cad2 <__gethex+0x422>
 800cb04:	e7ee      	b.n	800cae4 <__gethex+0x434>
 800cb06:	bf00      	nop
 800cb08:	0800e730 	.word	0x0800e730

0800cb0c <L_shift>:
 800cb0c:	f1c2 0208 	rsb	r2, r2, #8
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	b570      	push	{r4, r5, r6, lr}
 800cb14:	f1c2 0620 	rsb	r6, r2, #32
 800cb18:	6843      	ldr	r3, [r0, #4]
 800cb1a:	6804      	ldr	r4, [r0, #0]
 800cb1c:	fa03 f506 	lsl.w	r5, r3, r6
 800cb20:	432c      	orrs	r4, r5
 800cb22:	40d3      	lsrs	r3, r2
 800cb24:	6004      	str	r4, [r0, #0]
 800cb26:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb2a:	4288      	cmp	r0, r1
 800cb2c:	d3f4      	bcc.n	800cb18 <L_shift+0xc>
 800cb2e:	bd70      	pop	{r4, r5, r6, pc}

0800cb30 <__match>:
 800cb30:	b530      	push	{r4, r5, lr}
 800cb32:	6803      	ldr	r3, [r0, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3a:	b914      	cbnz	r4, 800cb42 <__match+0x12>
 800cb3c:	6003      	str	r3, [r0, #0]
 800cb3e:	2001      	movs	r0, #1
 800cb40:	bd30      	pop	{r4, r5, pc}
 800cb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb4a:	2d19      	cmp	r5, #25
 800cb4c:	bf98      	it	ls
 800cb4e:	3220      	addls	r2, #32
 800cb50:	42a2      	cmp	r2, r4
 800cb52:	d0f0      	beq.n	800cb36 <__match+0x6>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e7f3      	b.n	800cb40 <__match+0x10>

0800cb58 <__hexnan>:
 800cb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb5c:	680b      	ldr	r3, [r1, #0]
 800cb5e:	6801      	ldr	r1, [r0, #0]
 800cb60:	115e      	asrs	r6, r3, #5
 800cb62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb66:	f013 031f 	ands.w	r3, r3, #31
 800cb6a:	b087      	sub	sp, #28
 800cb6c:	bf18      	it	ne
 800cb6e:	3604      	addne	r6, #4
 800cb70:	2500      	movs	r5, #0
 800cb72:	1f37      	subs	r7, r6, #4
 800cb74:	4682      	mov	sl, r0
 800cb76:	4690      	mov	r8, r2
 800cb78:	9301      	str	r3, [sp, #4]
 800cb7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb7e:	46b9      	mov	r9, r7
 800cb80:	463c      	mov	r4, r7
 800cb82:	9502      	str	r5, [sp, #8]
 800cb84:	46ab      	mov	fp, r5
 800cb86:	784a      	ldrb	r2, [r1, #1]
 800cb88:	1c4b      	adds	r3, r1, #1
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	b342      	cbz	r2, 800cbe0 <__hexnan+0x88>
 800cb8e:	4610      	mov	r0, r2
 800cb90:	9105      	str	r1, [sp, #20]
 800cb92:	9204      	str	r2, [sp, #16]
 800cb94:	f7ff fd77 	bl	800c686 <__hexdig_fun>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d14f      	bne.n	800cc3c <__hexnan+0xe4>
 800cb9c:	9a04      	ldr	r2, [sp, #16]
 800cb9e:	9905      	ldr	r1, [sp, #20]
 800cba0:	2a20      	cmp	r2, #32
 800cba2:	d818      	bhi.n	800cbd6 <__hexnan+0x7e>
 800cba4:	9b02      	ldr	r3, [sp, #8]
 800cba6:	459b      	cmp	fp, r3
 800cba8:	dd13      	ble.n	800cbd2 <__hexnan+0x7a>
 800cbaa:	454c      	cmp	r4, r9
 800cbac:	d206      	bcs.n	800cbbc <__hexnan+0x64>
 800cbae:	2d07      	cmp	r5, #7
 800cbb0:	dc04      	bgt.n	800cbbc <__hexnan+0x64>
 800cbb2:	462a      	mov	r2, r5
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f7ff ffa8 	bl	800cb0c <L_shift>
 800cbbc:	4544      	cmp	r4, r8
 800cbbe:	d950      	bls.n	800cc62 <__hexnan+0x10a>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f1a4 0904 	sub.w	r9, r4, #4
 800cbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbca:	f8cd b008 	str.w	fp, [sp, #8]
 800cbce:	464c      	mov	r4, r9
 800cbd0:	461d      	mov	r5, r3
 800cbd2:	9903      	ldr	r1, [sp, #12]
 800cbd4:	e7d7      	b.n	800cb86 <__hexnan+0x2e>
 800cbd6:	2a29      	cmp	r2, #41	; 0x29
 800cbd8:	d155      	bne.n	800cc86 <__hexnan+0x12e>
 800cbda:	3102      	adds	r1, #2
 800cbdc:	f8ca 1000 	str.w	r1, [sl]
 800cbe0:	f1bb 0f00 	cmp.w	fp, #0
 800cbe4:	d04f      	beq.n	800cc86 <__hexnan+0x12e>
 800cbe6:	454c      	cmp	r4, r9
 800cbe8:	d206      	bcs.n	800cbf8 <__hexnan+0xa0>
 800cbea:	2d07      	cmp	r5, #7
 800cbec:	dc04      	bgt.n	800cbf8 <__hexnan+0xa0>
 800cbee:	462a      	mov	r2, r5
 800cbf0:	4649      	mov	r1, r9
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f7ff ff8a 	bl	800cb0c <L_shift>
 800cbf8:	4544      	cmp	r4, r8
 800cbfa:	d934      	bls.n	800cc66 <__hexnan+0x10e>
 800cbfc:	f1a8 0204 	sub.w	r2, r8, #4
 800cc00:	4623      	mov	r3, r4
 800cc02:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc06:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc0a:	429f      	cmp	r7, r3
 800cc0c:	d2f9      	bcs.n	800cc02 <__hexnan+0xaa>
 800cc0e:	1b3b      	subs	r3, r7, r4
 800cc10:	f023 0303 	bic.w	r3, r3, #3
 800cc14:	3304      	adds	r3, #4
 800cc16:	3e03      	subs	r6, #3
 800cc18:	3401      	adds	r4, #1
 800cc1a:	42a6      	cmp	r6, r4
 800cc1c:	bf38      	it	cc
 800cc1e:	2304      	movcc	r3, #4
 800cc20:	4443      	add	r3, r8
 800cc22:	2200      	movs	r2, #0
 800cc24:	f843 2b04 	str.w	r2, [r3], #4
 800cc28:	429f      	cmp	r7, r3
 800cc2a:	d2fb      	bcs.n	800cc24 <__hexnan+0xcc>
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	b91b      	cbnz	r3, 800cc38 <__hexnan+0xe0>
 800cc30:	4547      	cmp	r7, r8
 800cc32:	d126      	bne.n	800cc82 <__hexnan+0x12a>
 800cc34:	2301      	movs	r3, #1
 800cc36:	603b      	str	r3, [r7, #0]
 800cc38:	2005      	movs	r0, #5
 800cc3a:	e025      	b.n	800cc88 <__hexnan+0x130>
 800cc3c:	3501      	adds	r5, #1
 800cc3e:	2d08      	cmp	r5, #8
 800cc40:	f10b 0b01 	add.w	fp, fp, #1
 800cc44:	dd06      	ble.n	800cc54 <__hexnan+0xfc>
 800cc46:	4544      	cmp	r4, r8
 800cc48:	d9c3      	bls.n	800cbd2 <__hexnan+0x7a>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc50:	2501      	movs	r5, #1
 800cc52:	3c04      	subs	r4, #4
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	f000 000f 	and.w	r0, r0, #15
 800cc5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc5e:	6020      	str	r0, [r4, #0]
 800cc60:	e7b7      	b.n	800cbd2 <__hexnan+0x7a>
 800cc62:	2508      	movs	r5, #8
 800cc64:	e7b5      	b.n	800cbd2 <__hexnan+0x7a>
 800cc66:	9b01      	ldr	r3, [sp, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d0df      	beq.n	800cc2c <__hexnan+0xd4>
 800cc6c:	f1c3 0320 	rsb	r3, r3, #32
 800cc70:	f04f 32ff 	mov.w	r2, #4294967295
 800cc74:	40da      	lsrs	r2, r3
 800cc76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc7a:	4013      	ands	r3, r2
 800cc7c:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc80:	e7d4      	b.n	800cc2c <__hexnan+0xd4>
 800cc82:	3f04      	subs	r7, #4
 800cc84:	e7d2      	b.n	800cc2c <__hexnan+0xd4>
 800cc86:	2004      	movs	r0, #4
 800cc88:	b007      	add	sp, #28
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc8e <__ascii_mbtowc>:
 800cc8e:	b082      	sub	sp, #8
 800cc90:	b901      	cbnz	r1, 800cc94 <__ascii_mbtowc+0x6>
 800cc92:	a901      	add	r1, sp, #4
 800cc94:	b142      	cbz	r2, 800cca8 <__ascii_mbtowc+0x1a>
 800cc96:	b14b      	cbz	r3, 800ccac <__ascii_mbtowc+0x1e>
 800cc98:	7813      	ldrb	r3, [r2, #0]
 800cc9a:	600b      	str	r3, [r1, #0]
 800cc9c:	7812      	ldrb	r2, [r2, #0]
 800cc9e:	1e10      	subs	r0, r2, #0
 800cca0:	bf18      	it	ne
 800cca2:	2001      	movne	r0, #1
 800cca4:	b002      	add	sp, #8
 800cca6:	4770      	bx	lr
 800cca8:	4610      	mov	r0, r2
 800ccaa:	e7fb      	b.n	800cca4 <__ascii_mbtowc+0x16>
 800ccac:	f06f 0001 	mvn.w	r0, #1
 800ccb0:	e7f8      	b.n	800cca4 <__ascii_mbtowc+0x16>

0800ccb2 <_realloc_r>:
 800ccb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb6:	4680      	mov	r8, r0
 800ccb8:	4614      	mov	r4, r2
 800ccba:	460e      	mov	r6, r1
 800ccbc:	b921      	cbnz	r1, 800ccc8 <_realloc_r+0x16>
 800ccbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	f7fd bcca 	b.w	800a65c <_malloc_r>
 800ccc8:	b92a      	cbnz	r2, 800ccd6 <_realloc_r+0x24>
 800ccca:	f7fd fc53 	bl	800a574 <_free_r>
 800ccce:	4625      	mov	r5, r4
 800ccd0:	4628      	mov	r0, r5
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd6:	f000 f86d 	bl	800cdb4 <_malloc_usable_size_r>
 800ccda:	4284      	cmp	r4, r0
 800ccdc:	4607      	mov	r7, r0
 800ccde:	d802      	bhi.n	800cce6 <_realloc_r+0x34>
 800cce0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cce4:	d812      	bhi.n	800cd0c <_realloc_r+0x5a>
 800cce6:	4621      	mov	r1, r4
 800cce8:	4640      	mov	r0, r8
 800ccea:	f7fd fcb7 	bl	800a65c <_malloc_r>
 800ccee:	4605      	mov	r5, r0
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d0ed      	beq.n	800ccd0 <_realloc_r+0x1e>
 800ccf4:	42bc      	cmp	r4, r7
 800ccf6:	4622      	mov	r2, r4
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	bf28      	it	cs
 800ccfc:	463a      	movcs	r2, r7
 800ccfe:	f7fc fd8c 	bl	800981a <memcpy>
 800cd02:	4631      	mov	r1, r6
 800cd04:	4640      	mov	r0, r8
 800cd06:	f7fd fc35 	bl	800a574 <_free_r>
 800cd0a:	e7e1      	b.n	800ccd0 <_realloc_r+0x1e>
 800cd0c:	4635      	mov	r5, r6
 800cd0e:	e7df      	b.n	800ccd0 <_realloc_r+0x1e>

0800cd10 <__ascii_wctomb>:
 800cd10:	b149      	cbz	r1, 800cd26 <__ascii_wctomb+0x16>
 800cd12:	2aff      	cmp	r2, #255	; 0xff
 800cd14:	bf85      	ittet	hi
 800cd16:	238a      	movhi	r3, #138	; 0x8a
 800cd18:	6003      	strhi	r3, [r0, #0]
 800cd1a:	700a      	strbls	r2, [r1, #0]
 800cd1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cd20:	bf98      	it	ls
 800cd22:	2001      	movls	r0, #1
 800cd24:	4770      	bx	lr
 800cd26:	4608      	mov	r0, r1
 800cd28:	4770      	bx	lr

0800cd2a <_raise_r>:
 800cd2a:	291f      	cmp	r1, #31
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	d904      	bls.n	800cd3e <_raise_r+0x14>
 800cd34:	2316      	movs	r3, #22
 800cd36:	6003      	str	r3, [r0, #0]
 800cd38:	f04f 30ff 	mov.w	r0, #4294967295
 800cd3c:	bd38      	pop	{r3, r4, r5, pc}
 800cd3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cd40:	b112      	cbz	r2, 800cd48 <_raise_r+0x1e>
 800cd42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd46:	b94b      	cbnz	r3, 800cd5c <_raise_r+0x32>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f000 f831 	bl	800cdb0 <_getpid_r>
 800cd4e:	462a      	mov	r2, r5
 800cd50:	4601      	mov	r1, r0
 800cd52:	4620      	mov	r0, r4
 800cd54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd58:	f000 b818 	b.w	800cd8c <_kill_r>
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d00a      	beq.n	800cd76 <_raise_r+0x4c>
 800cd60:	1c59      	adds	r1, r3, #1
 800cd62:	d103      	bne.n	800cd6c <_raise_r+0x42>
 800cd64:	2316      	movs	r3, #22
 800cd66:	6003      	str	r3, [r0, #0]
 800cd68:	2001      	movs	r0, #1
 800cd6a:	e7e7      	b.n	800cd3c <_raise_r+0x12>
 800cd6c:	2400      	movs	r4, #0
 800cd6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd72:	4628      	mov	r0, r5
 800cd74:	4798      	blx	r3
 800cd76:	2000      	movs	r0, #0
 800cd78:	e7e0      	b.n	800cd3c <_raise_r+0x12>
	...

0800cd7c <raise>:
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <raise+0xc>)
 800cd7e:	4601      	mov	r1, r0
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	f7ff bfd2 	b.w	800cd2a <_raise_r>
 800cd86:	bf00      	nop
 800cd88:	20000064 	.word	0x20000064

0800cd8c <_kill_r>:
 800cd8c:	b538      	push	{r3, r4, r5, lr}
 800cd8e:	4d07      	ldr	r5, [pc, #28]	; (800cdac <_kill_r+0x20>)
 800cd90:	2300      	movs	r3, #0
 800cd92:	4604      	mov	r4, r0
 800cd94:	4608      	mov	r0, r1
 800cd96:	4611      	mov	r1, r2
 800cd98:	602b      	str	r3, [r5, #0]
 800cd9a:	f7f4 ff5b 	bl	8001c54 <_kill>
 800cd9e:	1c43      	adds	r3, r0, #1
 800cda0:	d102      	bne.n	800cda8 <_kill_r+0x1c>
 800cda2:	682b      	ldr	r3, [r5, #0]
 800cda4:	b103      	cbz	r3, 800cda8 <_kill_r+0x1c>
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	bd38      	pop	{r3, r4, r5, pc}
 800cdaa:	bf00      	nop
 800cdac:	20000e2c 	.word	0x20000e2c

0800cdb0 <_getpid_r>:
 800cdb0:	f7f4 bf48 	b.w	8001c44 <_getpid>

0800cdb4 <_malloc_usable_size_r>:
 800cdb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdb8:	1f18      	subs	r0, r3, #4
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bfbc      	itt	lt
 800cdbe:	580b      	ldrlt	r3, [r1, r0]
 800cdc0:	18c0      	addlt	r0, r0, r3
 800cdc2:	4770      	bx	lr

0800cdc4 <pow>:
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc6:	ed2d 8b02 	vpush	{d8}
 800cdca:	eeb0 8a40 	vmov.f32	s16, s0
 800cdce:	eef0 8a60 	vmov.f32	s17, s1
 800cdd2:	ec55 4b11 	vmov	r4, r5, d1
 800cdd6:	f000 f873 	bl	800cec0 <__ieee754_pow>
 800cdda:	4622      	mov	r2, r4
 800cddc:	462b      	mov	r3, r5
 800cdde:	4620      	mov	r0, r4
 800cde0:	4629      	mov	r1, r5
 800cde2:	ec57 6b10 	vmov	r6, r7, d0
 800cde6:	f7f3 fea9 	bl	8000b3c <__aeabi_dcmpun>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d13b      	bne.n	800ce66 <pow+0xa2>
 800cdee:	ec51 0b18 	vmov	r0, r1, d8
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f7f3 fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdfa:	b1b8      	cbz	r0, 800ce2c <pow+0x68>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	4620      	mov	r0, r4
 800ce02:	4629      	mov	r1, r5
 800ce04:	f7f3 fe68 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce08:	2800      	cmp	r0, #0
 800ce0a:	d146      	bne.n	800ce9a <pow+0xd6>
 800ce0c:	ec45 4b10 	vmov	d0, r4, r5
 800ce10:	f000 f848 	bl	800cea4 <finite>
 800ce14:	b338      	cbz	r0, 800ce66 <pow+0xa2>
 800ce16:	2200      	movs	r2, #0
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7f3 fe65 	bl	8000aec <__aeabi_dcmplt>
 800ce22:	b300      	cbz	r0, 800ce66 <pow+0xa2>
 800ce24:	f7fc fccc 	bl	80097c0 <__errno>
 800ce28:	2322      	movs	r3, #34	; 0x22
 800ce2a:	e01b      	b.n	800ce64 <pow+0xa0>
 800ce2c:	ec47 6b10 	vmov	d0, r6, r7
 800ce30:	f000 f838 	bl	800cea4 <finite>
 800ce34:	b9e0      	cbnz	r0, 800ce70 <pow+0xac>
 800ce36:	eeb0 0a48 	vmov.f32	s0, s16
 800ce3a:	eef0 0a68 	vmov.f32	s1, s17
 800ce3e:	f000 f831 	bl	800cea4 <finite>
 800ce42:	b1a8      	cbz	r0, 800ce70 <pow+0xac>
 800ce44:	ec45 4b10 	vmov	d0, r4, r5
 800ce48:	f000 f82c 	bl	800cea4 <finite>
 800ce4c:	b180      	cbz	r0, 800ce70 <pow+0xac>
 800ce4e:	4632      	mov	r2, r6
 800ce50:	463b      	mov	r3, r7
 800ce52:	4630      	mov	r0, r6
 800ce54:	4639      	mov	r1, r7
 800ce56:	f7f3 fe71 	bl	8000b3c <__aeabi_dcmpun>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d0e2      	beq.n	800ce24 <pow+0x60>
 800ce5e:	f7fc fcaf 	bl	80097c0 <__errno>
 800ce62:	2321      	movs	r3, #33	; 0x21
 800ce64:	6003      	str	r3, [r0, #0]
 800ce66:	ecbd 8b02 	vpop	{d8}
 800ce6a:	ec47 6b10 	vmov	d0, r6, r7
 800ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce70:	2200      	movs	r2, #0
 800ce72:	2300      	movs	r3, #0
 800ce74:	4630      	mov	r0, r6
 800ce76:	4639      	mov	r1, r7
 800ce78:	f7f3 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d0f2      	beq.n	800ce66 <pow+0xa2>
 800ce80:	eeb0 0a48 	vmov.f32	s0, s16
 800ce84:	eef0 0a68 	vmov.f32	s1, s17
 800ce88:	f000 f80c 	bl	800cea4 <finite>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d0ea      	beq.n	800ce66 <pow+0xa2>
 800ce90:	ec45 4b10 	vmov	d0, r4, r5
 800ce94:	f000 f806 	bl	800cea4 <finite>
 800ce98:	e7c3      	b.n	800ce22 <pow+0x5e>
 800ce9a:	4f01      	ldr	r7, [pc, #4]	; (800cea0 <pow+0xdc>)
 800ce9c:	2600      	movs	r6, #0
 800ce9e:	e7e2      	b.n	800ce66 <pow+0xa2>
 800cea0:	3ff00000 	.word	0x3ff00000

0800cea4 <finite>:
 800cea4:	b082      	sub	sp, #8
 800cea6:	ed8d 0b00 	vstr	d0, [sp]
 800ceaa:	9801      	ldr	r0, [sp, #4]
 800ceac:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ceb0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ceb4:	0fc0      	lsrs	r0, r0, #31
 800ceb6:	b002      	add	sp, #8
 800ceb8:	4770      	bx	lr
 800ceba:	0000      	movs	r0, r0
 800cebc:	0000      	movs	r0, r0
	...

0800cec0 <__ieee754_pow>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	ed2d 8b06 	vpush	{d8-d10}
 800cec8:	b089      	sub	sp, #36	; 0x24
 800ceca:	ed8d 1b00 	vstr	d1, [sp]
 800cece:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ced2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ced6:	ea58 0102 	orrs.w	r1, r8, r2
 800ceda:	ec57 6b10 	vmov	r6, r7, d0
 800cede:	d115      	bne.n	800cf0c <__ieee754_pow+0x4c>
 800cee0:	19b3      	adds	r3, r6, r6
 800cee2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800cee6:	4152      	adcs	r2, r2
 800cee8:	4299      	cmp	r1, r3
 800ceea:	4b89      	ldr	r3, [pc, #548]	; (800d110 <__ieee754_pow+0x250>)
 800ceec:	4193      	sbcs	r3, r2
 800ceee:	f080 84d1 	bcs.w	800d894 <__ieee754_pow+0x9d4>
 800cef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cef6:	4630      	mov	r0, r6
 800cef8:	4639      	mov	r1, r7
 800cefa:	f7f3 f9cf 	bl	800029c <__adddf3>
 800cefe:	ec41 0b10 	vmov	d0, r0, r1
 800cf02:	b009      	add	sp, #36	; 0x24
 800cf04:	ecbd 8b06 	vpop	{d8-d10}
 800cf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0c:	4b81      	ldr	r3, [pc, #516]	; (800d114 <__ieee754_pow+0x254>)
 800cf0e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800cf12:	429c      	cmp	r4, r3
 800cf14:	ee10 aa10 	vmov	sl, s0
 800cf18:	463d      	mov	r5, r7
 800cf1a:	dc06      	bgt.n	800cf2a <__ieee754_pow+0x6a>
 800cf1c:	d101      	bne.n	800cf22 <__ieee754_pow+0x62>
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	d1e7      	bne.n	800cef2 <__ieee754_pow+0x32>
 800cf22:	4598      	cmp	r8, r3
 800cf24:	dc01      	bgt.n	800cf2a <__ieee754_pow+0x6a>
 800cf26:	d10f      	bne.n	800cf48 <__ieee754_pow+0x88>
 800cf28:	b172      	cbz	r2, 800cf48 <__ieee754_pow+0x88>
 800cf2a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cf2e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cf32:	ea55 050a 	orrs.w	r5, r5, sl
 800cf36:	d1dc      	bne.n	800cef2 <__ieee754_pow+0x32>
 800cf38:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf3c:	18db      	adds	r3, r3, r3
 800cf3e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cf42:	4152      	adcs	r2, r2
 800cf44:	429d      	cmp	r5, r3
 800cf46:	e7d0      	b.n	800ceea <__ieee754_pow+0x2a>
 800cf48:	2d00      	cmp	r5, #0
 800cf4a:	da3b      	bge.n	800cfc4 <__ieee754_pow+0x104>
 800cf4c:	4b72      	ldr	r3, [pc, #456]	; (800d118 <__ieee754_pow+0x258>)
 800cf4e:	4598      	cmp	r8, r3
 800cf50:	dc51      	bgt.n	800cff6 <__ieee754_pow+0x136>
 800cf52:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cf56:	4598      	cmp	r8, r3
 800cf58:	f340 84ab 	ble.w	800d8b2 <__ieee754_pow+0x9f2>
 800cf5c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cf64:	2b14      	cmp	r3, #20
 800cf66:	dd0f      	ble.n	800cf88 <__ieee754_pow+0xc8>
 800cf68:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf6c:	fa22 f103 	lsr.w	r1, r2, r3
 800cf70:	fa01 f303 	lsl.w	r3, r1, r3
 800cf74:	4293      	cmp	r3, r2
 800cf76:	f040 849c 	bne.w	800d8b2 <__ieee754_pow+0x9f2>
 800cf7a:	f001 0101 	and.w	r1, r1, #1
 800cf7e:	f1c1 0302 	rsb	r3, r1, #2
 800cf82:	9304      	str	r3, [sp, #16]
 800cf84:	b182      	cbz	r2, 800cfa8 <__ieee754_pow+0xe8>
 800cf86:	e05f      	b.n	800d048 <__ieee754_pow+0x188>
 800cf88:	2a00      	cmp	r2, #0
 800cf8a:	d15b      	bne.n	800d044 <__ieee754_pow+0x184>
 800cf8c:	f1c3 0314 	rsb	r3, r3, #20
 800cf90:	fa48 f103 	asr.w	r1, r8, r3
 800cf94:	fa01 f303 	lsl.w	r3, r1, r3
 800cf98:	4543      	cmp	r3, r8
 800cf9a:	f040 8487 	bne.w	800d8ac <__ieee754_pow+0x9ec>
 800cf9e:	f001 0101 	and.w	r1, r1, #1
 800cfa2:	f1c1 0302 	rsb	r3, r1, #2
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	4b5c      	ldr	r3, [pc, #368]	; (800d11c <__ieee754_pow+0x25c>)
 800cfaa:	4598      	cmp	r8, r3
 800cfac:	d132      	bne.n	800d014 <__ieee754_pow+0x154>
 800cfae:	f1b9 0f00 	cmp.w	r9, #0
 800cfb2:	f280 8477 	bge.w	800d8a4 <__ieee754_pow+0x9e4>
 800cfb6:	4959      	ldr	r1, [pc, #356]	; (800d11c <__ieee754_pow+0x25c>)
 800cfb8:	4632      	mov	r2, r6
 800cfba:	463b      	mov	r3, r7
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	f7f3 fc4d 	bl	800085c <__aeabi_ddiv>
 800cfc2:	e79c      	b.n	800cefe <__ieee754_pow+0x3e>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	d13d      	bne.n	800d048 <__ieee754_pow+0x188>
 800cfcc:	4b51      	ldr	r3, [pc, #324]	; (800d114 <__ieee754_pow+0x254>)
 800cfce:	4598      	cmp	r8, r3
 800cfd0:	d1ea      	bne.n	800cfa8 <__ieee754_pow+0xe8>
 800cfd2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cfd6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cfda:	ea53 030a 	orrs.w	r3, r3, sl
 800cfde:	f000 8459 	beq.w	800d894 <__ieee754_pow+0x9d4>
 800cfe2:	4b4f      	ldr	r3, [pc, #316]	; (800d120 <__ieee754_pow+0x260>)
 800cfe4:	429c      	cmp	r4, r3
 800cfe6:	dd08      	ble.n	800cffa <__ieee754_pow+0x13a>
 800cfe8:	f1b9 0f00 	cmp.w	r9, #0
 800cfec:	f2c0 8456 	blt.w	800d89c <__ieee754_pow+0x9dc>
 800cff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff4:	e783      	b.n	800cefe <__ieee754_pow+0x3e>
 800cff6:	2302      	movs	r3, #2
 800cff8:	e7e5      	b.n	800cfc6 <__ieee754_pow+0x106>
 800cffa:	f1b9 0f00 	cmp.w	r9, #0
 800cffe:	f04f 0000 	mov.w	r0, #0
 800d002:	f04f 0100 	mov.w	r1, #0
 800d006:	f6bf af7a 	bge.w	800cefe <__ieee754_pow+0x3e>
 800d00a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d00e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d012:	e774      	b.n	800cefe <__ieee754_pow+0x3e>
 800d014:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d018:	d106      	bne.n	800d028 <__ieee754_pow+0x168>
 800d01a:	4632      	mov	r2, r6
 800d01c:	463b      	mov	r3, r7
 800d01e:	4630      	mov	r0, r6
 800d020:	4639      	mov	r1, r7
 800d022:	f7f3 faf1 	bl	8000608 <__aeabi_dmul>
 800d026:	e76a      	b.n	800cefe <__ieee754_pow+0x3e>
 800d028:	4b3e      	ldr	r3, [pc, #248]	; (800d124 <__ieee754_pow+0x264>)
 800d02a:	4599      	cmp	r9, r3
 800d02c:	d10c      	bne.n	800d048 <__ieee754_pow+0x188>
 800d02e:	2d00      	cmp	r5, #0
 800d030:	db0a      	blt.n	800d048 <__ieee754_pow+0x188>
 800d032:	ec47 6b10 	vmov	d0, r6, r7
 800d036:	b009      	add	sp, #36	; 0x24
 800d038:	ecbd 8b06 	vpop	{d8-d10}
 800d03c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d040:	f000 bd20 	b.w	800da84 <__ieee754_sqrt>
 800d044:	2300      	movs	r3, #0
 800d046:	9304      	str	r3, [sp, #16]
 800d048:	ec47 6b10 	vmov	d0, r6, r7
 800d04c:	f000 fc62 	bl	800d914 <fabs>
 800d050:	ec51 0b10 	vmov	r0, r1, d0
 800d054:	f1ba 0f00 	cmp.w	sl, #0
 800d058:	d129      	bne.n	800d0ae <__ieee754_pow+0x1ee>
 800d05a:	b124      	cbz	r4, 800d066 <__ieee754_pow+0x1a6>
 800d05c:	4b2f      	ldr	r3, [pc, #188]	; (800d11c <__ieee754_pow+0x25c>)
 800d05e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d062:	429a      	cmp	r2, r3
 800d064:	d123      	bne.n	800d0ae <__ieee754_pow+0x1ee>
 800d066:	f1b9 0f00 	cmp.w	r9, #0
 800d06a:	da05      	bge.n	800d078 <__ieee754_pow+0x1b8>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	2000      	movs	r0, #0
 800d072:	492a      	ldr	r1, [pc, #168]	; (800d11c <__ieee754_pow+0x25c>)
 800d074:	f7f3 fbf2 	bl	800085c <__aeabi_ddiv>
 800d078:	2d00      	cmp	r5, #0
 800d07a:	f6bf af40 	bge.w	800cefe <__ieee754_pow+0x3e>
 800d07e:	9b04      	ldr	r3, [sp, #16]
 800d080:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d084:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d088:	431c      	orrs	r4, r3
 800d08a:	d108      	bne.n	800d09e <__ieee754_pow+0x1de>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	4610      	mov	r0, r2
 800d092:	4619      	mov	r1, r3
 800d094:	f7f3 f900 	bl	8000298 <__aeabi_dsub>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	e78f      	b.n	800cfbe <__ieee754_pow+0xfe>
 800d09e:	9b04      	ldr	r3, [sp, #16]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	f47f af2c 	bne.w	800cefe <__ieee754_pow+0x3e>
 800d0a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	e727      	b.n	800cefe <__ieee754_pow+0x3e>
 800d0ae:	0feb      	lsrs	r3, r5, #31
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	9306      	str	r3, [sp, #24]
 800d0b4:	9a06      	ldr	r2, [sp, #24]
 800d0b6:	9b04      	ldr	r3, [sp, #16]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	d102      	bne.n	800d0c2 <__ieee754_pow+0x202>
 800d0bc:	4632      	mov	r2, r6
 800d0be:	463b      	mov	r3, r7
 800d0c0:	e7e6      	b.n	800d090 <__ieee754_pow+0x1d0>
 800d0c2:	4b19      	ldr	r3, [pc, #100]	; (800d128 <__ieee754_pow+0x268>)
 800d0c4:	4598      	cmp	r8, r3
 800d0c6:	f340 80fb 	ble.w	800d2c0 <__ieee754_pow+0x400>
 800d0ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d0ce:	4598      	cmp	r8, r3
 800d0d0:	4b13      	ldr	r3, [pc, #76]	; (800d120 <__ieee754_pow+0x260>)
 800d0d2:	dd0c      	ble.n	800d0ee <__ieee754_pow+0x22e>
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	dc0f      	bgt.n	800d0f8 <__ieee754_pow+0x238>
 800d0d8:	f1b9 0f00 	cmp.w	r9, #0
 800d0dc:	da0f      	bge.n	800d0fe <__ieee754_pow+0x23e>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	b009      	add	sp, #36	; 0x24
 800d0e2:	ecbd 8b06 	vpop	{d8-d10}
 800d0e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0ea:	f000 bcc2 	b.w	800da72 <__math_oflow>
 800d0ee:	429c      	cmp	r4, r3
 800d0f0:	dbf2      	blt.n	800d0d8 <__ieee754_pow+0x218>
 800d0f2:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <__ieee754_pow+0x25c>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	dd19      	ble.n	800d12c <__ieee754_pow+0x26c>
 800d0f8:	f1b9 0f00 	cmp.w	r9, #0
 800d0fc:	dcef      	bgt.n	800d0de <__ieee754_pow+0x21e>
 800d0fe:	2000      	movs	r0, #0
 800d100:	b009      	add	sp, #36	; 0x24
 800d102:	ecbd 8b06 	vpop	{d8-d10}
 800d106:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10a:	f000 bca9 	b.w	800da60 <__math_uflow>
 800d10e:	bf00      	nop
 800d110:	fff00000 	.word	0xfff00000
 800d114:	7ff00000 	.word	0x7ff00000
 800d118:	433fffff 	.word	0x433fffff
 800d11c:	3ff00000 	.word	0x3ff00000
 800d120:	3fefffff 	.word	0x3fefffff
 800d124:	3fe00000 	.word	0x3fe00000
 800d128:	41e00000 	.word	0x41e00000
 800d12c:	4b60      	ldr	r3, [pc, #384]	; (800d2b0 <__ieee754_pow+0x3f0>)
 800d12e:	2200      	movs	r2, #0
 800d130:	f7f3 f8b2 	bl	8000298 <__aeabi_dsub>
 800d134:	a354      	add	r3, pc, #336	; (adr r3, 800d288 <__ieee754_pow+0x3c8>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	f7f3 fa63 	bl	8000608 <__aeabi_dmul>
 800d142:	a353      	add	r3, pc, #332	; (adr r3, 800d290 <__ieee754_pow+0x3d0>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	4606      	mov	r6, r0
 800d14a:	460f      	mov	r7, r1
 800d14c:	4620      	mov	r0, r4
 800d14e:	4629      	mov	r1, r5
 800d150:	f7f3 fa5a 	bl	8000608 <__aeabi_dmul>
 800d154:	4b57      	ldr	r3, [pc, #348]	; (800d2b4 <__ieee754_pow+0x3f4>)
 800d156:	4682      	mov	sl, r0
 800d158:	468b      	mov	fp, r1
 800d15a:	2200      	movs	r2, #0
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fa52 	bl	8000608 <__aeabi_dmul>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	a14b      	add	r1, pc, #300	; (adr r1, 800d298 <__ieee754_pow+0x3d8>)
 800d16a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d16e:	f7f3 f893 	bl	8000298 <__aeabi_dsub>
 800d172:	4622      	mov	r2, r4
 800d174:	462b      	mov	r3, r5
 800d176:	f7f3 fa47 	bl	8000608 <__aeabi_dmul>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	2000      	movs	r0, #0
 800d180:	494d      	ldr	r1, [pc, #308]	; (800d2b8 <__ieee754_pow+0x3f8>)
 800d182:	f7f3 f889 	bl	8000298 <__aeabi_dsub>
 800d186:	4622      	mov	r2, r4
 800d188:	4680      	mov	r8, r0
 800d18a:	4689      	mov	r9, r1
 800d18c:	462b      	mov	r3, r5
 800d18e:	4620      	mov	r0, r4
 800d190:	4629      	mov	r1, r5
 800d192:	f7f3 fa39 	bl	8000608 <__aeabi_dmul>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4640      	mov	r0, r8
 800d19c:	4649      	mov	r1, r9
 800d19e:	f7f3 fa33 	bl	8000608 <__aeabi_dmul>
 800d1a2:	a33f      	add	r3, pc, #252	; (adr r3, 800d2a0 <__ieee754_pow+0x3e0>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f7f3 fa2e 	bl	8000608 <__aeabi_dmul>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	4650      	mov	r0, sl
 800d1b2:	4659      	mov	r1, fp
 800d1b4:	f7f3 f870 	bl	8000298 <__aeabi_dsub>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4680      	mov	r8, r0
 800d1be:	4689      	mov	r9, r1
 800d1c0:	4630      	mov	r0, r6
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	f7f3 f86a 	bl	800029c <__adddf3>
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	4632      	mov	r2, r6
 800d1cc:	463b      	mov	r3, r7
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	460d      	mov	r5, r1
 800d1d2:	f7f3 f861 	bl	8000298 <__aeabi_dsub>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	460b      	mov	r3, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	f7f3 f85b 	bl	8000298 <__aeabi_dsub>
 800d1e2:	9b04      	ldr	r3, [sp, #16]
 800d1e4:	9a06      	ldr	r2, [sp, #24]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	4682      	mov	sl, r0
 800d1ec:	468b      	mov	fp, r1
 800d1ee:	f040 81e7 	bne.w	800d5c0 <__ieee754_pow+0x700>
 800d1f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d2a8 <__ieee754_pow+0x3e8>
 800d1f6:	eeb0 8a47 	vmov.f32	s16, s14
 800d1fa:	eef0 8a67 	vmov.f32	s17, s15
 800d1fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d202:	2600      	movs	r6, #0
 800d204:	4632      	mov	r2, r6
 800d206:	463b      	mov	r3, r7
 800d208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d20c:	f7f3 f844 	bl	8000298 <__aeabi_dsub>
 800d210:	4622      	mov	r2, r4
 800d212:	462b      	mov	r3, r5
 800d214:	f7f3 f9f8 	bl	8000608 <__aeabi_dmul>
 800d218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d21c:	4680      	mov	r8, r0
 800d21e:	4689      	mov	r9, r1
 800d220:	4650      	mov	r0, sl
 800d222:	4659      	mov	r1, fp
 800d224:	f7f3 f9f0 	bl	8000608 <__aeabi_dmul>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 f834 	bl	800029c <__adddf3>
 800d234:	4632      	mov	r2, r6
 800d236:	463b      	mov	r3, r7
 800d238:	4680      	mov	r8, r0
 800d23a:	4689      	mov	r9, r1
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f3 f9e2 	bl	8000608 <__aeabi_dmul>
 800d244:	460b      	mov	r3, r1
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	4602      	mov	r2, r0
 800d24c:	4649      	mov	r1, r9
 800d24e:	4640      	mov	r0, r8
 800d250:	f7f3 f824 	bl	800029c <__adddf3>
 800d254:	4b19      	ldr	r3, [pc, #100]	; (800d2bc <__ieee754_pow+0x3fc>)
 800d256:	4299      	cmp	r1, r3
 800d258:	ec45 4b19 	vmov	d9, r4, r5
 800d25c:	4606      	mov	r6, r0
 800d25e:	460f      	mov	r7, r1
 800d260:	468b      	mov	fp, r1
 800d262:	f340 82f0 	ble.w	800d846 <__ieee754_pow+0x986>
 800d266:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d26a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d26e:	4303      	orrs	r3, r0
 800d270:	f000 81e4 	beq.w	800d63c <__ieee754_pow+0x77c>
 800d274:	ec51 0b18 	vmov	r0, r1, d8
 800d278:	2200      	movs	r2, #0
 800d27a:	2300      	movs	r3, #0
 800d27c:	f7f3 fc36 	bl	8000aec <__aeabi_dcmplt>
 800d280:	3800      	subs	r0, #0
 800d282:	bf18      	it	ne
 800d284:	2001      	movne	r0, #1
 800d286:	e72b      	b.n	800d0e0 <__ieee754_pow+0x220>
 800d288:	60000000 	.word	0x60000000
 800d28c:	3ff71547 	.word	0x3ff71547
 800d290:	f85ddf44 	.word	0xf85ddf44
 800d294:	3e54ae0b 	.word	0x3e54ae0b
 800d298:	55555555 	.word	0x55555555
 800d29c:	3fd55555 	.word	0x3fd55555
 800d2a0:	652b82fe 	.word	0x652b82fe
 800d2a4:	3ff71547 	.word	0x3ff71547
 800d2a8:	00000000 	.word	0x00000000
 800d2ac:	bff00000 	.word	0xbff00000
 800d2b0:	3ff00000 	.word	0x3ff00000
 800d2b4:	3fd00000 	.word	0x3fd00000
 800d2b8:	3fe00000 	.word	0x3fe00000
 800d2bc:	408fffff 	.word	0x408fffff
 800d2c0:	4bd5      	ldr	r3, [pc, #852]	; (800d618 <__ieee754_pow+0x758>)
 800d2c2:	402b      	ands	r3, r5
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	b92b      	cbnz	r3, 800d2d4 <__ieee754_pow+0x414>
 800d2c8:	4bd4      	ldr	r3, [pc, #848]	; (800d61c <__ieee754_pow+0x75c>)
 800d2ca:	f7f3 f99d 	bl	8000608 <__aeabi_dmul>
 800d2ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d2d2:	460c      	mov	r4, r1
 800d2d4:	1523      	asrs	r3, r4, #20
 800d2d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d2da:	4413      	add	r3, r2
 800d2dc:	9305      	str	r3, [sp, #20]
 800d2de:	4bd0      	ldr	r3, [pc, #832]	; (800d620 <__ieee754_pow+0x760>)
 800d2e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d2e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d2e8:	429c      	cmp	r4, r3
 800d2ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2ee:	dd08      	ble.n	800d302 <__ieee754_pow+0x442>
 800d2f0:	4bcc      	ldr	r3, [pc, #816]	; (800d624 <__ieee754_pow+0x764>)
 800d2f2:	429c      	cmp	r4, r3
 800d2f4:	f340 8162 	ble.w	800d5bc <__ieee754_pow+0x6fc>
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	9305      	str	r3, [sp, #20]
 800d2fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d302:	2400      	movs	r4, #0
 800d304:	00e3      	lsls	r3, r4, #3
 800d306:	9307      	str	r3, [sp, #28]
 800d308:	4bc7      	ldr	r3, [pc, #796]	; (800d628 <__ieee754_pow+0x768>)
 800d30a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d30e:	ed93 7b00 	vldr	d7, [r3]
 800d312:	4629      	mov	r1, r5
 800d314:	ec53 2b17 	vmov	r2, r3, d7
 800d318:	eeb0 9a47 	vmov.f32	s18, s14
 800d31c:	eef0 9a67 	vmov.f32	s19, s15
 800d320:	4682      	mov	sl, r0
 800d322:	f7f2 ffb9 	bl	8000298 <__aeabi_dsub>
 800d326:	4652      	mov	r2, sl
 800d328:	4606      	mov	r6, r0
 800d32a:	460f      	mov	r7, r1
 800d32c:	462b      	mov	r3, r5
 800d32e:	ec51 0b19 	vmov	r0, r1, d9
 800d332:	f7f2 ffb3 	bl	800029c <__adddf3>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	2000      	movs	r0, #0
 800d33c:	49bb      	ldr	r1, [pc, #748]	; (800d62c <__ieee754_pow+0x76c>)
 800d33e:	f7f3 fa8d 	bl	800085c <__aeabi_ddiv>
 800d342:	ec41 0b1a 	vmov	d10, r0, r1
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4630      	mov	r0, r6
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f3 f95b 	bl	8000608 <__aeabi_dmul>
 800d352:	2300      	movs	r3, #0
 800d354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d358:	9302      	str	r3, [sp, #8]
 800d35a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d35e:	46ab      	mov	fp, r5
 800d360:	106d      	asrs	r5, r5, #1
 800d362:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d366:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d36a:	ec41 0b18 	vmov	d8, r0, r1
 800d36e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d372:	2200      	movs	r2, #0
 800d374:	4640      	mov	r0, r8
 800d376:	4649      	mov	r1, r9
 800d378:	4614      	mov	r4, r2
 800d37a:	461d      	mov	r5, r3
 800d37c:	f7f3 f944 	bl	8000608 <__aeabi_dmul>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4630      	mov	r0, r6
 800d386:	4639      	mov	r1, r7
 800d388:	f7f2 ff86 	bl	8000298 <__aeabi_dsub>
 800d38c:	ec53 2b19 	vmov	r2, r3, d9
 800d390:	4606      	mov	r6, r0
 800d392:	460f      	mov	r7, r1
 800d394:	4620      	mov	r0, r4
 800d396:	4629      	mov	r1, r5
 800d398:	f7f2 ff7e 	bl	8000298 <__aeabi_dsub>
 800d39c:	4602      	mov	r2, r0
 800d39e:	460b      	mov	r3, r1
 800d3a0:	4650      	mov	r0, sl
 800d3a2:	4659      	mov	r1, fp
 800d3a4:	f7f2 ff78 	bl	8000298 <__aeabi_dsub>
 800d3a8:	4642      	mov	r2, r8
 800d3aa:	464b      	mov	r3, r9
 800d3ac:	f7f3 f92c 	bl	8000608 <__aeabi_dmul>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	f7f2 ff6e 	bl	8000298 <__aeabi_dsub>
 800d3bc:	ec53 2b1a 	vmov	r2, r3, d10
 800d3c0:	f7f3 f922 	bl	8000608 <__aeabi_dmul>
 800d3c4:	ec53 2b18 	vmov	r2, r3, d8
 800d3c8:	ec41 0b19 	vmov	d9, r0, r1
 800d3cc:	ec51 0b18 	vmov	r0, r1, d8
 800d3d0:	f7f3 f91a 	bl	8000608 <__aeabi_dmul>
 800d3d4:	a37c      	add	r3, pc, #496	; (adr r3, 800d5c8 <__ieee754_pow+0x708>)
 800d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3da:	4604      	mov	r4, r0
 800d3dc:	460d      	mov	r5, r1
 800d3de:	f7f3 f913 	bl	8000608 <__aeabi_dmul>
 800d3e2:	a37b      	add	r3, pc, #492	; (adr r3, 800d5d0 <__ieee754_pow+0x710>)
 800d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e8:	f7f2 ff58 	bl	800029c <__adddf3>
 800d3ec:	4622      	mov	r2, r4
 800d3ee:	462b      	mov	r3, r5
 800d3f0:	f7f3 f90a 	bl	8000608 <__aeabi_dmul>
 800d3f4:	a378      	add	r3, pc, #480	; (adr r3, 800d5d8 <__ieee754_pow+0x718>)
 800d3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fa:	f7f2 ff4f 	bl	800029c <__adddf3>
 800d3fe:	4622      	mov	r2, r4
 800d400:	462b      	mov	r3, r5
 800d402:	f7f3 f901 	bl	8000608 <__aeabi_dmul>
 800d406:	a376      	add	r3, pc, #472	; (adr r3, 800d5e0 <__ieee754_pow+0x720>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	f7f2 ff46 	bl	800029c <__adddf3>
 800d410:	4622      	mov	r2, r4
 800d412:	462b      	mov	r3, r5
 800d414:	f7f3 f8f8 	bl	8000608 <__aeabi_dmul>
 800d418:	a373      	add	r3, pc, #460	; (adr r3, 800d5e8 <__ieee754_pow+0x728>)
 800d41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41e:	f7f2 ff3d 	bl	800029c <__adddf3>
 800d422:	4622      	mov	r2, r4
 800d424:	462b      	mov	r3, r5
 800d426:	f7f3 f8ef 	bl	8000608 <__aeabi_dmul>
 800d42a:	a371      	add	r3, pc, #452	; (adr r3, 800d5f0 <__ieee754_pow+0x730>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7f2 ff34 	bl	800029c <__adddf3>
 800d434:	4622      	mov	r2, r4
 800d436:	4606      	mov	r6, r0
 800d438:	460f      	mov	r7, r1
 800d43a:	462b      	mov	r3, r5
 800d43c:	4620      	mov	r0, r4
 800d43e:	4629      	mov	r1, r5
 800d440:	f7f3 f8e2 	bl	8000608 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4630      	mov	r0, r6
 800d44a:	4639      	mov	r1, r7
 800d44c:	f7f3 f8dc 	bl	8000608 <__aeabi_dmul>
 800d450:	4642      	mov	r2, r8
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	464b      	mov	r3, r9
 800d458:	ec51 0b18 	vmov	r0, r1, d8
 800d45c:	f7f2 ff1e 	bl	800029c <__adddf3>
 800d460:	ec53 2b19 	vmov	r2, r3, d9
 800d464:	f7f3 f8d0 	bl	8000608 <__aeabi_dmul>
 800d468:	4622      	mov	r2, r4
 800d46a:	462b      	mov	r3, r5
 800d46c:	f7f2 ff16 	bl	800029c <__adddf3>
 800d470:	4642      	mov	r2, r8
 800d472:	4682      	mov	sl, r0
 800d474:	468b      	mov	fp, r1
 800d476:	464b      	mov	r3, r9
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f3 f8c4 	bl	8000608 <__aeabi_dmul>
 800d480:	4b6b      	ldr	r3, [pc, #428]	; (800d630 <__ieee754_pow+0x770>)
 800d482:	2200      	movs	r2, #0
 800d484:	4606      	mov	r6, r0
 800d486:	460f      	mov	r7, r1
 800d488:	f7f2 ff08 	bl	800029c <__adddf3>
 800d48c:	4652      	mov	r2, sl
 800d48e:	465b      	mov	r3, fp
 800d490:	f7f2 ff04 	bl	800029c <__adddf3>
 800d494:	2000      	movs	r0, #0
 800d496:	4604      	mov	r4, r0
 800d498:	460d      	mov	r5, r1
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4640      	mov	r0, r8
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	f7f3 f8b1 	bl	8000608 <__aeabi_dmul>
 800d4a6:	4b62      	ldr	r3, [pc, #392]	; (800d630 <__ieee754_pow+0x770>)
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	4689      	mov	r9, r1
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	4629      	mov	r1, r5
 800d4b2:	f7f2 fef1 	bl	8000298 <__aeabi_dsub>
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	463b      	mov	r3, r7
 800d4ba:	f7f2 feed 	bl	8000298 <__aeabi_dsub>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4650      	mov	r0, sl
 800d4c4:	4659      	mov	r1, fp
 800d4c6:	f7f2 fee7 	bl	8000298 <__aeabi_dsub>
 800d4ca:	ec53 2b18 	vmov	r2, r3, d8
 800d4ce:	f7f3 f89b 	bl	8000608 <__aeabi_dmul>
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	4606      	mov	r6, r0
 800d4d6:	460f      	mov	r7, r1
 800d4d8:	462b      	mov	r3, r5
 800d4da:	ec51 0b19 	vmov	r0, r1, d9
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	f7f2 fed7 	bl	800029c <__adddf3>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	460f      	mov	r7, r1
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	f7f2 fecf 	bl	800029c <__adddf3>
 800d4fe:	a33e      	add	r3, pc, #248	; (adr r3, 800d5f8 <__ieee754_pow+0x738>)
 800d500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d504:	2000      	movs	r0, #0
 800d506:	4604      	mov	r4, r0
 800d508:	460d      	mov	r5, r1
 800d50a:	f7f3 f87d 	bl	8000608 <__aeabi_dmul>
 800d50e:	4642      	mov	r2, r8
 800d510:	ec41 0b18 	vmov	d8, r0, r1
 800d514:	464b      	mov	r3, r9
 800d516:	4620      	mov	r0, r4
 800d518:	4629      	mov	r1, r5
 800d51a:	f7f2 febd 	bl	8000298 <__aeabi_dsub>
 800d51e:	4602      	mov	r2, r0
 800d520:	460b      	mov	r3, r1
 800d522:	4630      	mov	r0, r6
 800d524:	4639      	mov	r1, r7
 800d526:	f7f2 feb7 	bl	8000298 <__aeabi_dsub>
 800d52a:	a335      	add	r3, pc, #212	; (adr r3, 800d600 <__ieee754_pow+0x740>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f3 f86a 	bl	8000608 <__aeabi_dmul>
 800d534:	a334      	add	r3, pc, #208	; (adr r3, 800d608 <__ieee754_pow+0x748>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	4620      	mov	r0, r4
 800d540:	4629      	mov	r1, r5
 800d542:	f7f3 f861 	bl	8000608 <__aeabi_dmul>
 800d546:	4602      	mov	r2, r0
 800d548:	460b      	mov	r3, r1
 800d54a:	4630      	mov	r0, r6
 800d54c:	4639      	mov	r1, r7
 800d54e:	f7f2 fea5 	bl	800029c <__adddf3>
 800d552:	9a07      	ldr	r2, [sp, #28]
 800d554:	4b37      	ldr	r3, [pc, #220]	; (800d634 <__ieee754_pow+0x774>)
 800d556:	4413      	add	r3, r2
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	f7f2 fe9e 	bl	800029c <__adddf3>
 800d560:	4682      	mov	sl, r0
 800d562:	9805      	ldr	r0, [sp, #20]
 800d564:	468b      	mov	fp, r1
 800d566:	f7f2 ffe5 	bl	8000534 <__aeabi_i2d>
 800d56a:	9a07      	ldr	r2, [sp, #28]
 800d56c:	4b32      	ldr	r3, [pc, #200]	; (800d638 <__ieee754_pow+0x778>)
 800d56e:	4413      	add	r3, r2
 800d570:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d574:	4606      	mov	r6, r0
 800d576:	460f      	mov	r7, r1
 800d578:	4652      	mov	r2, sl
 800d57a:	465b      	mov	r3, fp
 800d57c:	ec51 0b18 	vmov	r0, r1, d8
 800d580:	f7f2 fe8c 	bl	800029c <__adddf3>
 800d584:	4642      	mov	r2, r8
 800d586:	464b      	mov	r3, r9
 800d588:	f7f2 fe88 	bl	800029c <__adddf3>
 800d58c:	4632      	mov	r2, r6
 800d58e:	463b      	mov	r3, r7
 800d590:	f7f2 fe84 	bl	800029c <__adddf3>
 800d594:	2000      	movs	r0, #0
 800d596:	4632      	mov	r2, r6
 800d598:	463b      	mov	r3, r7
 800d59a:	4604      	mov	r4, r0
 800d59c:	460d      	mov	r5, r1
 800d59e:	f7f2 fe7b 	bl	8000298 <__aeabi_dsub>
 800d5a2:	4642      	mov	r2, r8
 800d5a4:	464b      	mov	r3, r9
 800d5a6:	f7f2 fe77 	bl	8000298 <__aeabi_dsub>
 800d5aa:	ec53 2b18 	vmov	r2, r3, d8
 800d5ae:	f7f2 fe73 	bl	8000298 <__aeabi_dsub>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	4659      	mov	r1, fp
 800d5ba:	e610      	b.n	800d1de <__ieee754_pow+0x31e>
 800d5bc:	2401      	movs	r4, #1
 800d5be:	e6a1      	b.n	800d304 <__ieee754_pow+0x444>
 800d5c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800d610 <__ieee754_pow+0x750>
 800d5c4:	e617      	b.n	800d1f6 <__ieee754_pow+0x336>
 800d5c6:	bf00      	nop
 800d5c8:	4a454eef 	.word	0x4a454eef
 800d5cc:	3fca7e28 	.word	0x3fca7e28
 800d5d0:	93c9db65 	.word	0x93c9db65
 800d5d4:	3fcd864a 	.word	0x3fcd864a
 800d5d8:	a91d4101 	.word	0xa91d4101
 800d5dc:	3fd17460 	.word	0x3fd17460
 800d5e0:	518f264d 	.word	0x518f264d
 800d5e4:	3fd55555 	.word	0x3fd55555
 800d5e8:	db6fabff 	.word	0xdb6fabff
 800d5ec:	3fdb6db6 	.word	0x3fdb6db6
 800d5f0:	33333303 	.word	0x33333303
 800d5f4:	3fe33333 	.word	0x3fe33333
 800d5f8:	e0000000 	.word	0xe0000000
 800d5fc:	3feec709 	.word	0x3feec709
 800d600:	dc3a03fd 	.word	0xdc3a03fd
 800d604:	3feec709 	.word	0x3feec709
 800d608:	145b01f5 	.word	0x145b01f5
 800d60c:	be3e2fe0 	.word	0xbe3e2fe0
 800d610:	00000000 	.word	0x00000000
 800d614:	3ff00000 	.word	0x3ff00000
 800d618:	7ff00000 	.word	0x7ff00000
 800d61c:	43400000 	.word	0x43400000
 800d620:	0003988e 	.word	0x0003988e
 800d624:	000bb679 	.word	0x000bb679
 800d628:	0800e970 	.word	0x0800e970
 800d62c:	3ff00000 	.word	0x3ff00000
 800d630:	40080000 	.word	0x40080000
 800d634:	0800e990 	.word	0x0800e990
 800d638:	0800e980 	.word	0x0800e980
 800d63c:	a3b3      	add	r3, pc, #716	; (adr r3, 800d90c <__ieee754_pow+0xa4c>)
 800d63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d642:	4640      	mov	r0, r8
 800d644:	4649      	mov	r1, r9
 800d646:	f7f2 fe29 	bl	800029c <__adddf3>
 800d64a:	4622      	mov	r2, r4
 800d64c:	ec41 0b1a 	vmov	d10, r0, r1
 800d650:	462b      	mov	r3, r5
 800d652:	4630      	mov	r0, r6
 800d654:	4639      	mov	r1, r7
 800d656:	f7f2 fe1f 	bl	8000298 <__aeabi_dsub>
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	ec51 0b1a 	vmov	r0, r1, d10
 800d662:	f7f3 fa61 	bl	8000b28 <__aeabi_dcmpgt>
 800d666:	2800      	cmp	r0, #0
 800d668:	f47f ae04 	bne.w	800d274 <__ieee754_pow+0x3b4>
 800d66c:	4aa2      	ldr	r2, [pc, #648]	; (800d8f8 <__ieee754_pow+0xa38>)
 800d66e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d672:	4293      	cmp	r3, r2
 800d674:	f340 8107 	ble.w	800d886 <__ieee754_pow+0x9c6>
 800d678:	151b      	asrs	r3, r3, #20
 800d67a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d67e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d682:	fa4a fa03 	asr.w	sl, sl, r3
 800d686:	44da      	add	sl, fp
 800d688:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d68c:	489b      	ldr	r0, [pc, #620]	; (800d8fc <__ieee754_pow+0xa3c>)
 800d68e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d692:	4108      	asrs	r0, r1
 800d694:	ea00 030a 	and.w	r3, r0, sl
 800d698:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d69c:	f1c1 0114 	rsb	r1, r1, #20
 800d6a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d6a4:	fa4a fa01 	asr.w	sl, sl, r1
 800d6a8:	f1bb 0f00 	cmp.w	fp, #0
 800d6ac:	f04f 0200 	mov.w	r2, #0
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	bfb8      	it	lt
 800d6b6:	f1ca 0a00 	rsblt	sl, sl, #0
 800d6ba:	f7f2 fded 	bl	8000298 <__aeabi_dsub>
 800d6be:	ec41 0b19 	vmov	d9, r0, r1
 800d6c2:	4642      	mov	r2, r8
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	ec51 0b19 	vmov	r0, r1, d9
 800d6ca:	f7f2 fde7 	bl	800029c <__adddf3>
 800d6ce:	a37a      	add	r3, pc, #488	; (adr r3, 800d8b8 <__ieee754_pow+0x9f8>)
 800d6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	460d      	mov	r5, r1
 800d6da:	f7f2 ff95 	bl	8000608 <__aeabi_dmul>
 800d6de:	ec53 2b19 	vmov	r2, r3, d9
 800d6e2:	4606      	mov	r6, r0
 800d6e4:	460f      	mov	r7, r1
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7f2 fdd5 	bl	8000298 <__aeabi_dsub>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	4649      	mov	r1, r9
 800d6f6:	f7f2 fdcf 	bl	8000298 <__aeabi_dsub>
 800d6fa:	a371      	add	r3, pc, #452	; (adr r3, 800d8c0 <__ieee754_pow+0xa00>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	f7f2 ff82 	bl	8000608 <__aeabi_dmul>
 800d704:	a370      	add	r3, pc, #448	; (adr r3, 800d8c8 <__ieee754_pow+0xa08>)
 800d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70a:	4680      	mov	r8, r0
 800d70c:	4689      	mov	r9, r1
 800d70e:	4620      	mov	r0, r4
 800d710:	4629      	mov	r1, r5
 800d712:	f7f2 ff79 	bl	8000608 <__aeabi_dmul>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	4640      	mov	r0, r8
 800d71c:	4649      	mov	r1, r9
 800d71e:	f7f2 fdbd 	bl	800029c <__adddf3>
 800d722:	4604      	mov	r4, r0
 800d724:	460d      	mov	r5, r1
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4630      	mov	r0, r6
 800d72c:	4639      	mov	r1, r7
 800d72e:	f7f2 fdb5 	bl	800029c <__adddf3>
 800d732:	4632      	mov	r2, r6
 800d734:	463b      	mov	r3, r7
 800d736:	4680      	mov	r8, r0
 800d738:	4689      	mov	r9, r1
 800d73a:	f7f2 fdad 	bl	8000298 <__aeabi_dsub>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	4620      	mov	r0, r4
 800d744:	4629      	mov	r1, r5
 800d746:	f7f2 fda7 	bl	8000298 <__aeabi_dsub>
 800d74a:	4642      	mov	r2, r8
 800d74c:	4606      	mov	r6, r0
 800d74e:	460f      	mov	r7, r1
 800d750:	464b      	mov	r3, r9
 800d752:	4640      	mov	r0, r8
 800d754:	4649      	mov	r1, r9
 800d756:	f7f2 ff57 	bl	8000608 <__aeabi_dmul>
 800d75a:	a35d      	add	r3, pc, #372	; (adr r3, 800d8d0 <__ieee754_pow+0xa10>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	4604      	mov	r4, r0
 800d762:	460d      	mov	r5, r1
 800d764:	f7f2 ff50 	bl	8000608 <__aeabi_dmul>
 800d768:	a35b      	add	r3, pc, #364	; (adr r3, 800d8d8 <__ieee754_pow+0xa18>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	f7f2 fd93 	bl	8000298 <__aeabi_dsub>
 800d772:	4622      	mov	r2, r4
 800d774:	462b      	mov	r3, r5
 800d776:	f7f2 ff47 	bl	8000608 <__aeabi_dmul>
 800d77a:	a359      	add	r3, pc, #356	; (adr r3, 800d8e0 <__ieee754_pow+0xa20>)
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f7f2 fd8c 	bl	800029c <__adddf3>
 800d784:	4622      	mov	r2, r4
 800d786:	462b      	mov	r3, r5
 800d788:	f7f2 ff3e 	bl	8000608 <__aeabi_dmul>
 800d78c:	a356      	add	r3, pc, #344	; (adr r3, 800d8e8 <__ieee754_pow+0xa28>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	f7f2 fd81 	bl	8000298 <__aeabi_dsub>
 800d796:	4622      	mov	r2, r4
 800d798:	462b      	mov	r3, r5
 800d79a:	f7f2 ff35 	bl	8000608 <__aeabi_dmul>
 800d79e:	a354      	add	r3, pc, #336	; (adr r3, 800d8f0 <__ieee754_pow+0xa30>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f7f2 fd7a 	bl	800029c <__adddf3>
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	462b      	mov	r3, r5
 800d7ac:	f7f2 ff2c 	bl	8000608 <__aeabi_dmul>
 800d7b0:	4602      	mov	r2, r0
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	4640      	mov	r0, r8
 800d7b6:	4649      	mov	r1, r9
 800d7b8:	f7f2 fd6e 	bl	8000298 <__aeabi_dsub>
 800d7bc:	4604      	mov	r4, r0
 800d7be:	460d      	mov	r5, r1
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	f7f2 ff1e 	bl	8000608 <__aeabi_dmul>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	ec41 0b19 	vmov	d9, r0, r1
 800d7d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	4629      	mov	r1, r5
 800d7da:	f7f2 fd5d 	bl	8000298 <__aeabi_dsub>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	460b      	mov	r3, r1
 800d7e2:	ec51 0b19 	vmov	r0, r1, d9
 800d7e6:	f7f3 f839 	bl	800085c <__aeabi_ddiv>
 800d7ea:	4632      	mov	r2, r6
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	460d      	mov	r5, r1
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f2 ff07 	bl	8000608 <__aeabi_dmul>
 800d7fa:	4632      	mov	r2, r6
 800d7fc:	463b      	mov	r3, r7
 800d7fe:	f7f2 fd4d 	bl	800029c <__adddf3>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4620      	mov	r0, r4
 800d808:	4629      	mov	r1, r5
 800d80a:	f7f2 fd45 	bl	8000298 <__aeabi_dsub>
 800d80e:	4642      	mov	r2, r8
 800d810:	464b      	mov	r3, r9
 800d812:	f7f2 fd41 	bl	8000298 <__aeabi_dsub>
 800d816:	460b      	mov	r3, r1
 800d818:	4602      	mov	r2, r0
 800d81a:	4939      	ldr	r1, [pc, #228]	; (800d900 <__ieee754_pow+0xa40>)
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7f2 fd3b 	bl	8000298 <__aeabi_dsub>
 800d822:	ec41 0b10 	vmov	d0, r0, r1
 800d826:	ee10 3a90 	vmov	r3, s1
 800d82a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d82e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d832:	da2b      	bge.n	800d88c <__ieee754_pow+0x9cc>
 800d834:	4650      	mov	r0, sl
 800d836:	f000 f877 	bl	800d928 <scalbn>
 800d83a:	ec51 0b10 	vmov	r0, r1, d0
 800d83e:	ec53 2b18 	vmov	r2, r3, d8
 800d842:	f7ff bbee 	b.w	800d022 <__ieee754_pow+0x162>
 800d846:	4b2f      	ldr	r3, [pc, #188]	; (800d904 <__ieee754_pow+0xa44>)
 800d848:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d84c:	429e      	cmp	r6, r3
 800d84e:	f77f af0d 	ble.w	800d66c <__ieee754_pow+0x7ac>
 800d852:	4b2d      	ldr	r3, [pc, #180]	; (800d908 <__ieee754_pow+0xa48>)
 800d854:	440b      	add	r3, r1
 800d856:	4303      	orrs	r3, r0
 800d858:	d009      	beq.n	800d86e <__ieee754_pow+0x9ae>
 800d85a:	ec51 0b18 	vmov	r0, r1, d8
 800d85e:	2200      	movs	r2, #0
 800d860:	2300      	movs	r3, #0
 800d862:	f7f3 f943 	bl	8000aec <__aeabi_dcmplt>
 800d866:	3800      	subs	r0, #0
 800d868:	bf18      	it	ne
 800d86a:	2001      	movne	r0, #1
 800d86c:	e448      	b.n	800d100 <__ieee754_pow+0x240>
 800d86e:	4622      	mov	r2, r4
 800d870:	462b      	mov	r3, r5
 800d872:	f7f2 fd11 	bl	8000298 <__aeabi_dsub>
 800d876:	4642      	mov	r2, r8
 800d878:	464b      	mov	r3, r9
 800d87a:	f7f3 f94b 	bl	8000b14 <__aeabi_dcmpge>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f43f aef4 	beq.w	800d66c <__ieee754_pow+0x7ac>
 800d884:	e7e9      	b.n	800d85a <__ieee754_pow+0x99a>
 800d886:	f04f 0a00 	mov.w	sl, #0
 800d88a:	e71a      	b.n	800d6c2 <__ieee754_pow+0x802>
 800d88c:	ec51 0b10 	vmov	r0, r1, d0
 800d890:	4619      	mov	r1, r3
 800d892:	e7d4      	b.n	800d83e <__ieee754_pow+0x97e>
 800d894:	491a      	ldr	r1, [pc, #104]	; (800d900 <__ieee754_pow+0xa40>)
 800d896:	2000      	movs	r0, #0
 800d898:	f7ff bb31 	b.w	800cefe <__ieee754_pow+0x3e>
 800d89c:	2000      	movs	r0, #0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	f7ff bb2d 	b.w	800cefe <__ieee754_pow+0x3e>
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f7ff bb29 	b.w	800cefe <__ieee754_pow+0x3e>
 800d8ac:	9204      	str	r2, [sp, #16]
 800d8ae:	f7ff bb7b 	b.w	800cfa8 <__ieee754_pow+0xe8>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f7ff bb65 	b.w	800cf82 <__ieee754_pow+0xc2>
 800d8b8:	00000000 	.word	0x00000000
 800d8bc:	3fe62e43 	.word	0x3fe62e43
 800d8c0:	fefa39ef 	.word	0xfefa39ef
 800d8c4:	3fe62e42 	.word	0x3fe62e42
 800d8c8:	0ca86c39 	.word	0x0ca86c39
 800d8cc:	be205c61 	.word	0xbe205c61
 800d8d0:	72bea4d0 	.word	0x72bea4d0
 800d8d4:	3e663769 	.word	0x3e663769
 800d8d8:	c5d26bf1 	.word	0xc5d26bf1
 800d8dc:	3ebbbd41 	.word	0x3ebbbd41
 800d8e0:	af25de2c 	.word	0xaf25de2c
 800d8e4:	3f11566a 	.word	0x3f11566a
 800d8e8:	16bebd93 	.word	0x16bebd93
 800d8ec:	3f66c16c 	.word	0x3f66c16c
 800d8f0:	5555553e 	.word	0x5555553e
 800d8f4:	3fc55555 	.word	0x3fc55555
 800d8f8:	3fe00000 	.word	0x3fe00000
 800d8fc:	fff00000 	.word	0xfff00000
 800d900:	3ff00000 	.word	0x3ff00000
 800d904:	4090cbff 	.word	0x4090cbff
 800d908:	3f6f3400 	.word	0x3f6f3400
 800d90c:	652b82fe 	.word	0x652b82fe
 800d910:	3c971547 	.word	0x3c971547

0800d914 <fabs>:
 800d914:	ec51 0b10 	vmov	r0, r1, d0
 800d918:	ee10 2a10 	vmov	r2, s0
 800d91c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d920:	ec43 2b10 	vmov	d0, r2, r3
 800d924:	4770      	bx	lr
	...

0800d928 <scalbn>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	ec55 4b10 	vmov	r4, r5, d0
 800d92e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d932:	4606      	mov	r6, r0
 800d934:	462b      	mov	r3, r5
 800d936:	b999      	cbnz	r1, 800d960 <scalbn+0x38>
 800d938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d93c:	4323      	orrs	r3, r4
 800d93e:	d03f      	beq.n	800d9c0 <scalbn+0x98>
 800d940:	4b35      	ldr	r3, [pc, #212]	; (800da18 <scalbn+0xf0>)
 800d942:	4629      	mov	r1, r5
 800d944:	ee10 0a10 	vmov	r0, s0
 800d948:	2200      	movs	r2, #0
 800d94a:	f7f2 fe5d 	bl	8000608 <__aeabi_dmul>
 800d94e:	4b33      	ldr	r3, [pc, #204]	; (800da1c <scalbn+0xf4>)
 800d950:	429e      	cmp	r6, r3
 800d952:	4604      	mov	r4, r0
 800d954:	460d      	mov	r5, r1
 800d956:	da10      	bge.n	800d97a <scalbn+0x52>
 800d958:	a327      	add	r3, pc, #156	; (adr r3, 800d9f8 <scalbn+0xd0>)
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	e01f      	b.n	800d9a0 <scalbn+0x78>
 800d960:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d964:	4291      	cmp	r1, r2
 800d966:	d10c      	bne.n	800d982 <scalbn+0x5a>
 800d968:	ee10 2a10 	vmov	r2, s0
 800d96c:	4620      	mov	r0, r4
 800d96e:	4629      	mov	r1, r5
 800d970:	f7f2 fc94 	bl	800029c <__adddf3>
 800d974:	4604      	mov	r4, r0
 800d976:	460d      	mov	r5, r1
 800d978:	e022      	b.n	800d9c0 <scalbn+0x98>
 800d97a:	460b      	mov	r3, r1
 800d97c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d980:	3936      	subs	r1, #54	; 0x36
 800d982:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d986:	4296      	cmp	r6, r2
 800d988:	dd0d      	ble.n	800d9a6 <scalbn+0x7e>
 800d98a:	2d00      	cmp	r5, #0
 800d98c:	a11c      	add	r1, pc, #112	; (adr r1, 800da00 <scalbn+0xd8>)
 800d98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d992:	da02      	bge.n	800d99a <scalbn+0x72>
 800d994:	a11c      	add	r1, pc, #112	; (adr r1, 800da08 <scalbn+0xe0>)
 800d996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d99a:	a319      	add	r3, pc, #100	; (adr r3, 800da00 <scalbn+0xd8>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f7f2 fe32 	bl	8000608 <__aeabi_dmul>
 800d9a4:	e7e6      	b.n	800d974 <scalbn+0x4c>
 800d9a6:	1872      	adds	r2, r6, r1
 800d9a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d9ac:	428a      	cmp	r2, r1
 800d9ae:	dcec      	bgt.n	800d98a <scalbn+0x62>
 800d9b0:	2a00      	cmp	r2, #0
 800d9b2:	dd08      	ble.n	800d9c6 <scalbn+0x9e>
 800d9b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d9c0:	ec45 4b10 	vmov	d0, r4, r5
 800d9c4:	bd70      	pop	{r4, r5, r6, pc}
 800d9c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d9ca:	da08      	bge.n	800d9de <scalbn+0xb6>
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	a10a      	add	r1, pc, #40	; (adr r1, 800d9f8 <scalbn+0xd0>)
 800d9d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9d4:	dac0      	bge.n	800d958 <scalbn+0x30>
 800d9d6:	a10e      	add	r1, pc, #56	; (adr r1, 800da10 <scalbn+0xe8>)
 800d9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9dc:	e7bc      	b.n	800d958 <scalbn+0x30>
 800d9de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d9e2:	3236      	adds	r2, #54	; 0x36
 800d9e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d9e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <scalbn+0xf8>)
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	e7d5      	b.n	800d9a0 <scalbn+0x78>
 800d9f4:	f3af 8000 	nop.w
 800d9f8:	c2f8f359 	.word	0xc2f8f359
 800d9fc:	01a56e1f 	.word	0x01a56e1f
 800da00:	8800759c 	.word	0x8800759c
 800da04:	7e37e43c 	.word	0x7e37e43c
 800da08:	8800759c 	.word	0x8800759c
 800da0c:	fe37e43c 	.word	0xfe37e43c
 800da10:	c2f8f359 	.word	0xc2f8f359
 800da14:	81a56e1f 	.word	0x81a56e1f
 800da18:	43500000 	.word	0x43500000
 800da1c:	ffff3cb0 	.word	0xffff3cb0
 800da20:	3c900000 	.word	0x3c900000

0800da24 <with_errno>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4604      	mov	r4, r0
 800da28:	460d      	mov	r5, r1
 800da2a:	4616      	mov	r6, r2
 800da2c:	f7fb fec8 	bl	80097c0 <__errno>
 800da30:	4629      	mov	r1, r5
 800da32:	6006      	str	r6, [r0, #0]
 800da34:	4620      	mov	r0, r4
 800da36:	bd70      	pop	{r4, r5, r6, pc}

0800da38 <xflow>:
 800da38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da3a:	4614      	mov	r4, r2
 800da3c:	461d      	mov	r5, r3
 800da3e:	b108      	cbz	r0, 800da44 <xflow+0xc>
 800da40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800da44:	e9cd 2300 	strd	r2, r3, [sp]
 800da48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da4c:	4620      	mov	r0, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	f7f2 fdda 	bl	8000608 <__aeabi_dmul>
 800da54:	2222      	movs	r2, #34	; 0x22
 800da56:	b003      	add	sp, #12
 800da58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da5c:	f7ff bfe2 	b.w	800da24 <with_errno>

0800da60 <__math_uflow>:
 800da60:	b508      	push	{r3, lr}
 800da62:	2200      	movs	r2, #0
 800da64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da68:	f7ff ffe6 	bl	800da38 <xflow>
 800da6c:	ec41 0b10 	vmov	d0, r0, r1
 800da70:	bd08      	pop	{r3, pc}

0800da72 <__math_oflow>:
 800da72:	b508      	push	{r3, lr}
 800da74:	2200      	movs	r2, #0
 800da76:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800da7a:	f7ff ffdd 	bl	800da38 <xflow>
 800da7e:	ec41 0b10 	vmov	d0, r0, r1
 800da82:	bd08      	pop	{r3, pc}

0800da84 <__ieee754_sqrt>:
 800da84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da88:	ec55 4b10 	vmov	r4, r5, d0
 800da8c:	4e67      	ldr	r6, [pc, #412]	; (800dc2c <__ieee754_sqrt+0x1a8>)
 800da8e:	43ae      	bics	r6, r5
 800da90:	ee10 0a10 	vmov	r0, s0
 800da94:	ee10 2a10 	vmov	r2, s0
 800da98:	4629      	mov	r1, r5
 800da9a:	462b      	mov	r3, r5
 800da9c:	d10d      	bne.n	800daba <__ieee754_sqrt+0x36>
 800da9e:	f7f2 fdb3 	bl	8000608 <__aeabi_dmul>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f7f2 fbf7 	bl	800029c <__adddf3>
 800daae:	4604      	mov	r4, r0
 800dab0:	460d      	mov	r5, r1
 800dab2:	ec45 4b10 	vmov	d0, r4, r5
 800dab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daba:	2d00      	cmp	r5, #0
 800dabc:	dc0b      	bgt.n	800dad6 <__ieee754_sqrt+0x52>
 800dabe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dac2:	4326      	orrs	r6, r4
 800dac4:	d0f5      	beq.n	800dab2 <__ieee754_sqrt+0x2e>
 800dac6:	b135      	cbz	r5, 800dad6 <__ieee754_sqrt+0x52>
 800dac8:	f7f2 fbe6 	bl	8000298 <__aeabi_dsub>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	f7f2 fec4 	bl	800085c <__aeabi_ddiv>
 800dad4:	e7eb      	b.n	800daae <__ieee754_sqrt+0x2a>
 800dad6:	1509      	asrs	r1, r1, #20
 800dad8:	f000 808d 	beq.w	800dbf6 <__ieee754_sqrt+0x172>
 800dadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dae0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dae8:	07c9      	lsls	r1, r1, #31
 800daea:	bf5c      	itt	pl
 800daec:	005b      	lslpl	r3, r3, #1
 800daee:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800daf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800daf6:	bf58      	it	pl
 800daf8:	0052      	lslpl	r2, r2, #1
 800dafa:	2500      	movs	r5, #0
 800dafc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800db00:	1076      	asrs	r6, r6, #1
 800db02:	0052      	lsls	r2, r2, #1
 800db04:	f04f 0e16 	mov.w	lr, #22
 800db08:	46ac      	mov	ip, r5
 800db0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800db0e:	eb0c 0001 	add.w	r0, ip, r1
 800db12:	4298      	cmp	r0, r3
 800db14:	bfde      	ittt	le
 800db16:	1a1b      	suble	r3, r3, r0
 800db18:	eb00 0c01 	addle.w	ip, r0, r1
 800db1c:	186d      	addle	r5, r5, r1
 800db1e:	005b      	lsls	r3, r3, #1
 800db20:	f1be 0e01 	subs.w	lr, lr, #1
 800db24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800db28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800db2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800db30:	d1ed      	bne.n	800db0e <__ieee754_sqrt+0x8a>
 800db32:	4674      	mov	r4, lr
 800db34:	2720      	movs	r7, #32
 800db36:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800db3a:	4563      	cmp	r3, ip
 800db3c:	eb01 000e 	add.w	r0, r1, lr
 800db40:	dc02      	bgt.n	800db48 <__ieee754_sqrt+0xc4>
 800db42:	d113      	bne.n	800db6c <__ieee754_sqrt+0xe8>
 800db44:	4290      	cmp	r0, r2
 800db46:	d811      	bhi.n	800db6c <__ieee754_sqrt+0xe8>
 800db48:	2800      	cmp	r0, #0
 800db4a:	eb00 0e01 	add.w	lr, r0, r1
 800db4e:	da57      	bge.n	800dc00 <__ieee754_sqrt+0x17c>
 800db50:	f1be 0f00 	cmp.w	lr, #0
 800db54:	db54      	blt.n	800dc00 <__ieee754_sqrt+0x17c>
 800db56:	f10c 0801 	add.w	r8, ip, #1
 800db5a:	eba3 030c 	sub.w	r3, r3, ip
 800db5e:	4290      	cmp	r0, r2
 800db60:	bf88      	it	hi
 800db62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db66:	1a12      	subs	r2, r2, r0
 800db68:	440c      	add	r4, r1
 800db6a:	46c4      	mov	ip, r8
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	3f01      	subs	r7, #1
 800db70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800db74:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800db78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800db7c:	d1dd      	bne.n	800db3a <__ieee754_sqrt+0xb6>
 800db7e:	4313      	orrs	r3, r2
 800db80:	d01b      	beq.n	800dbba <__ieee754_sqrt+0x136>
 800db82:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dc30 <__ieee754_sqrt+0x1ac>
 800db86:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dc34 <__ieee754_sqrt+0x1b0>
 800db8a:	e9da 0100 	ldrd	r0, r1, [sl]
 800db8e:	e9db 2300 	ldrd	r2, r3, [fp]
 800db92:	f7f2 fb81 	bl	8000298 <__aeabi_dsub>
 800db96:	e9da 8900 	ldrd	r8, r9, [sl]
 800db9a:	4602      	mov	r2, r0
 800db9c:	460b      	mov	r3, r1
 800db9e:	4640      	mov	r0, r8
 800dba0:	4649      	mov	r1, r9
 800dba2:	f7f2 ffad 	bl	8000b00 <__aeabi_dcmple>
 800dba6:	b140      	cbz	r0, 800dbba <__ieee754_sqrt+0x136>
 800dba8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dbac:	e9da 0100 	ldrd	r0, r1, [sl]
 800dbb0:	e9db 2300 	ldrd	r2, r3, [fp]
 800dbb4:	d126      	bne.n	800dc04 <__ieee754_sqrt+0x180>
 800dbb6:	3501      	adds	r5, #1
 800dbb8:	463c      	mov	r4, r7
 800dbba:	106a      	asrs	r2, r5, #1
 800dbbc:	0863      	lsrs	r3, r4, #1
 800dbbe:	07e9      	lsls	r1, r5, #31
 800dbc0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dbc4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dbc8:	bf48      	it	mi
 800dbca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dbce:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dbd2:	461c      	mov	r4, r3
 800dbd4:	e76d      	b.n	800dab2 <__ieee754_sqrt+0x2e>
 800dbd6:	0ad3      	lsrs	r3, r2, #11
 800dbd8:	3815      	subs	r0, #21
 800dbda:	0552      	lsls	r2, r2, #21
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d0fa      	beq.n	800dbd6 <__ieee754_sqrt+0x152>
 800dbe0:	02dc      	lsls	r4, r3, #11
 800dbe2:	d50a      	bpl.n	800dbfa <__ieee754_sqrt+0x176>
 800dbe4:	f1c1 0420 	rsb	r4, r1, #32
 800dbe8:	fa22 f404 	lsr.w	r4, r2, r4
 800dbec:	1e4d      	subs	r5, r1, #1
 800dbee:	408a      	lsls	r2, r1
 800dbf0:	4323      	orrs	r3, r4
 800dbf2:	1b41      	subs	r1, r0, r5
 800dbf4:	e772      	b.n	800dadc <__ieee754_sqrt+0x58>
 800dbf6:	4608      	mov	r0, r1
 800dbf8:	e7f0      	b.n	800dbdc <__ieee754_sqrt+0x158>
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	3101      	adds	r1, #1
 800dbfe:	e7ef      	b.n	800dbe0 <__ieee754_sqrt+0x15c>
 800dc00:	46e0      	mov	r8, ip
 800dc02:	e7aa      	b.n	800db5a <__ieee754_sqrt+0xd6>
 800dc04:	f7f2 fb4a 	bl	800029c <__adddf3>
 800dc08:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	460b      	mov	r3, r1
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	f7f2 ff6a 	bl	8000aec <__aeabi_dcmplt>
 800dc18:	b120      	cbz	r0, 800dc24 <__ieee754_sqrt+0x1a0>
 800dc1a:	1ca0      	adds	r0, r4, #2
 800dc1c:	bf08      	it	eq
 800dc1e:	3501      	addeq	r5, #1
 800dc20:	3402      	adds	r4, #2
 800dc22:	e7ca      	b.n	800dbba <__ieee754_sqrt+0x136>
 800dc24:	3401      	adds	r4, #1
 800dc26:	f024 0401 	bic.w	r4, r4, #1
 800dc2a:	e7c6      	b.n	800dbba <__ieee754_sqrt+0x136>
 800dc2c:	7ff00000 	.word	0x7ff00000
 800dc30:	200001d8 	.word	0x200001d8
 800dc34:	200001e0 	.word	0x200001e0

0800dc38 <_init>:
 800dc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3a:	bf00      	nop
 800dc3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3e:	bc08      	pop	{r3}
 800dc40:	469e      	mov	lr, r3
 800dc42:	4770      	bx	lr

0800dc44 <_fini>:
 800dc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc46:	bf00      	nop
 800dc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4a:	bc08      	pop	{r3}
 800dc4c:	469e      	mov	lr, r3
 800dc4e:	4770      	bx	lr
