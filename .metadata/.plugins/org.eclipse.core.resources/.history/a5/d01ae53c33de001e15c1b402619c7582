/*
 * sim7600.c
 *
 *  Created on: Mar 9, 2024
 *      Author: Trump
 */
#include <sim7600.h>

/**
 * @brief  Wake up module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_wakeup(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_RESET); // DTR Low: Wakeup, DTR high: Sleep
	HAL_Delay(100UL);
}

/**
 * The function SIM7600_POWER_ON turns on the SIM7600 module by setting a GPIO pin high and delaying
 * for 100 milliseconds.
 *
 * @param me `SIM7600_HandleTypeDef *const me` is a pointer to a structure `SIM7600_HandleTypeDef`
 * which contains information about the SIM7600 module. The structure likely includes members such as
 * `powerEnPort` (GPIO port for power enable), `powerEnPin` (GPIO pin for power
 *
 * @return If the input parameter `me` is `NULL`, the function will return without executing the rest
 * of the code inside the function.
 */
void SIM7600_POWER_ON(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	HAL_GPIO_WritePin(me->powerEnPort, me->powerEnPin, GPIO_PIN_SET);
	HAL_Delay(100UL);
}

/**
 * The function SIM7600_POWER_OFF turns off the power to a SIM7600 module after checking for a valid
 * handle.
 *
 * @param me The `me` parameter is a pointer to a structure of type `SIM7600_HandleTypeDef`. This
 * structure likely contains information and configurations related to the SIM7600 module, such as GPIO
 * ports and pins used for power control.
 *
 * @return If the input parameter `me` is `NULL`, the function will return without performing any
 * further actions.
 */
void SIM7600_POWER_OFF(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	HAL_GPIO_WritePin(me->powerEnPort, me->powerEnPin, GPIO_PIN_RESET);
	HAL_Delay(100UL);
}

void SIM7600_PWRKEY_ON(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_SET);
	HAL_Delay(1000UL);
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_RESET);
	HAL_Delay(10000UL);
}

/**
 * The function `SIM7600_RESET_ON` resets a SIM7600 module by toggling a GPIO pin after a specific
 * delay.
 *
 * @param me The `me` parameter in the `SIM7600_RESET_ON` function is a pointer to a structure of type
 * `SIM7600_HandleTypeDef`. This structure likely contains information about the SIM7600 module, such
 * as the GPIO port and pin used for resetting the module.
 *
 * @return If the input parameter `me` is `NULL`, the function will return without performing any
 * actions.
 */
void SIM7600_RESET_ON(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
	HAL_Delay(500UL);
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
	HAL_Delay(1000UL);
}

/**
 * @brief  Put the module to sleep
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_sleep(SIM7600_HandleTypeDef *const me)
{
	if (me == NULL)
	{
		return;
	}
	SIM7600_sendATCommand(me, "AT+CSCLK=1", SIM_URC_OK, SIM_URC_ERROR, 3000);
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_SET);
	HAL_Delay(100UL);
}

/* Power on and reset module */
	SIM7600_wakeup(me);
	SIM7600_POWER_ON(me);
	SIM7600_RESET_ON(me);

	/* Enable receive data through UART port */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);

	/* Powerkey on */
	SIM7600_PWRKEY_ON(me);

