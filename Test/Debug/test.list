
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003714  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800389c  0800389c  0001389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038c4  080038c4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080038cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000002e4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002f8  200002f8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000967a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a80  00000000  00000000  00029701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  0002b188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000057b  00000000  00000000  0002b8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f8dd  00000000  00000000  0002be3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009beb  00000000  00000000  0004b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1d08  00000000  00000000  00055303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c00  00000000  00000000  0011700c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00118c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003884 	.word	0x08003884

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003884 	.word	0x08003884

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <RS485_Init>:
        .DataRegsH = 0x00,
        .DataRegsL = 0x08,
};

void RS485_Init()
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  data = &Data;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <RS485_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <RS485_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  data->RS485_Power_Port = GPIOA;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <RS485_Init+0x4c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <RS485_Init+0x54>)
 80004e4:	601a      	str	r2, [r3, #0]
  data->RS485_Power_Pin = GPIO_PIN_4;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <RS485_Init+0x4c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2210      	movs	r2, #16
 80004ec:	809a      	strh	r2, [r3, #4]
  data->RS485_RE_Port = GPIOB;
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <RS485_Init+0x4c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <RS485_Init+0x58>)
 80004f4:	611a      	str	r2, [r3, #16]
  data->RS485_RE_Pin = GPIO_PIN_1;
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <RS485_Init+0x4c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2202      	movs	r2, #2
 80004fc:	829a      	strh	r2, [r3, #20]
  data->RS485_DE_Port = GPIOB;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <RS485_Init+0x4c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a0a      	ldr	r2, [pc, #40]	; (800052c <RS485_Init+0x58>)
 8000504:	609a      	str	r2, [r3, #8]
  data->RS485_DE_Pin = GPIO_PIN_2;
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <RS485_Init+0x4c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2204      	movs	r2, #4
 800050c:	819a      	strh	r2, [r3, #12]
  data->huart = &huart4;
 800050e:	4b04      	ldr	r3, [pc, #16]	; (8000520 <RS485_Init+0x4c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a07      	ldr	r2, [pc, #28]	; (8000530 <RS485_Init+0x5c>)
 8000514:	619a      	str	r2, [r3, #24]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	200000d4 	.word	0x200000d4
 8000524:	200000d8 	.word	0x200000d8
 8000528:	40020000 	.word	0x40020000
 800052c:	40020400 	.word	0x40020400
 8000530:	20000030 	.word	0x20000030

08000534 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == UART4)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <HAL_UART_RxCpltCallback+0x44>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d114      	bne.n	8000570 <HAL_UART_RxCpltCallback+0x3c>
  {
    HAL_UART_Transmit(data->huart, (uint8_t *)(data->TxBuffer), 8, 1000);
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <HAL_UART_RxCpltCallback+0x48>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6998      	ldr	r0, [r3, #24]
 800054c:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_UART_RxCpltCallback+0x48>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f103 011c 	add.w	r1, r3, #28
 8000554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000558:	2208      	movs	r2, #8
 800055a:	f001 fe42 	bl	80021e2 <HAL_UART_Transmit>
    HAL_UART_Receive_DMA(&huart4, (uint8_t *)(data->RxBuffer), 8);
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <HAL_UART_RxCpltCallback+0x48>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000566:	2208      	movs	r2, #8
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <HAL_UART_RxCpltCallback+0x4c>)
 800056c:	f001 fecb 	bl	8002306 <HAL_UART_Receive_DMA>
  }
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40004c00 	.word	0x40004c00
 800057c:	200000d4 	.word	0x200000d4
 8000580:	20000030 	.word	0x20000030

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa4a 	bl	8000a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f81e 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8c4 	bl	800071c <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f8a2 	bl	80006dc <MX_DMA_Init>
  MX_UART4_Init();
 8000598:	f000 f876 	bl	8000688 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  RS485_Init();
 800059c:	f7ff ff9a 	bl	80004d4 <RS485_Init>
//  memset(data->TxBuffer, "hello", sizeof("hello"));

  RS485_Transmit(data);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <main+0x3c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f003 f831 	bl	800360c <RS485_Transmit>
  Ducati_transmit(&huart4, Ducati_Query_F);
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <main+0x40>)
 80005ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <main+0x44>)
 80005b2:	f003 f8ad 	bl	8003710 <Ducati_transmit>
  Ducati_Master_Receive(9);
 80005b6:	2009      	movs	r0, #9
 80005b8:	f003 f91a 	bl	80037f0 <Ducati_Master_Receive>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x38>
 80005be:	bf00      	nop
 80005c0:	200000d4 	.word	0x200000d4
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000030 	.word	0x20000030

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f926 	bl	800382c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xb4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xb4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xb4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <SystemClock_Config+0xb8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config+0xb8>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f92b 	bl	8001898 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000648:	f000 f8c0 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fb8e 	bl	8001d88 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000672:	f000 f8ab 	bl	80007cc <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_UART4_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_UART4_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_UART4_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_UART4_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_UART4_Init+0x4c>)
 80006c0:	f001 fd42 	bl	8002148 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f87f 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000030 	.word	0x20000030
 80006d8:	40004c00 	.word	0x40004c00

080006dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_DMA_Init+0x3c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <MX_DMA_Init+0x3c>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	200d      	movs	r0, #13
 8000704:	f000 fad9 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000708:	200d      	movs	r0, #13
 800070a:	f000 faf2 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_GPIO_Init+0xa4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xa4>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_GPIO_Init+0xa4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xa4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1a      	ldr	r2, [pc, #104]	; (80007c0 <MX_GPIO_Init+0xa4>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_GPIO_Init+0xa4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	4815      	ldr	r0, [pc, #84]	; (80007c4 <MX_GPIO_Init+0xa8>)
 8000770:	f001 f878 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2106      	movs	r1, #6
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_GPIO_Init+0xac>)
 800077a:	f001 f873 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800077e:	2310      	movs	r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <MX_GPIO_Init+0xa8>)
 8000796:	f000 fec9 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800079a:	2306      	movs	r3, #6
 800079c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0xac>)
 80007b2:	f000 febb 	bl	800152c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000
 80007c8:	40020400 	.word	0x40020400

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a34      	ldr	r2, [pc, #208]	; (8000918 <HAL_UART_MspInit+0xf0>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d161      	bne.n	800090e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <HAL_UART_MspInit+0xf4>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a32      	ldr	r2, [pc, #200]	; (800091c <HAL_UART_MspInit+0xf4>)
 8000854:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <HAL_UART_MspInit+0xf4>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b2c      	ldr	r3, [pc, #176]	; (800091c <HAL_UART_MspInit+0xf4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a2b      	ldr	r2, [pc, #172]	; (800091c <HAL_UART_MspInit+0xf4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_UART_MspInit+0xf4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000882:	2303      	movs	r3, #3
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000892:	2308      	movs	r3, #8
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4820      	ldr	r0, [pc, #128]	; (8000920 <HAL_UART_MspInit+0xf8>)
 800089e:	f000 fe45 	bl	800152c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <HAL_UART_MspInit+0x100>)
 80008a6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008d4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008e4:	f000 fa20 	bl	8000d28 <HAL_DMA_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80008ee:	f7ff ff6d 	bl	80007cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008f6:	639a      	str	r2, [r3, #56]	; 0x38
 80008f8:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_UART_MspInit+0xfc>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2034      	movs	r0, #52	; 0x34
 8000904:	f000 f9d9 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000908:	2034      	movs	r0, #52	; 0x34
 800090a:	f000 f9f2 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004c00 	.word	0x40004c00
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000
 8000924:	20000074 	.word	0x20000074
 8000928:	40026040 	.word	0x40026040

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8a4 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <DMA1_Stream2_IRQHandler+0x10>)
 8000986:	f000 fb67 	bl	8001058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000074 	.word	0x20000074

08000994 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <UART4_IRQHandler+0x10>)
 800099a:	f001 fce5 	bl	8002368 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000030 	.word	0x20000030

080009a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <SystemInit+0x20>)
 80009ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <SystemInit+0x20>)
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ffd7 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f002 ff1f 	bl	800383c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fdc1 	bl	8000584 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a10:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 8000a14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a18:	200002f8 	.word	0x200002f8

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f92b 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fec0 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f943 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f90b 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000010 	.word	0x20000010
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000010 	.word	0x20000010
 8000ae8:	200002f4 	.word	0x200002f4

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	200002f4 	.word	0x200002f4

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff3e 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff31 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff feda 	bl	8000aec <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e099      	b.n	8000e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d64:	e00f      	b.n	8000d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d66:	f7ff fec1 	bl	8000aec <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d908      	bls.n	8000d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2220      	movs	r2, #32
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e078      	b.n	8000e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1e8      	bne.n	8000d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_DMA_Init+0x158>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	2b04      	cmp	r3, #4
 8000dde:	d107      	bne.n	8000df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4313      	orrs	r3, r2
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f023 0307 	bic.w	r3, r3, #7
 8000e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d117      	bne.n	8000e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00e      	beq.n	8000e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 fb01 	bl	8001434 <DMA_CheckFifoParam>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d008      	beq.n	8000e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e46:	2301      	movs	r3, #1
 8000e48:	e016      	b.n	8000e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fab8 	bl	80013c8 <DMA_CalcBaseAndBitshift>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e60:	223f      	movs	r2, #63	; 0x3f
 8000e62:	409a      	lsls	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	f010803f 	.word	0xf010803f

08000e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d101      	bne.n	8000eaa <HAL_DMA_Start_IT+0x26>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e040      	b.n	8000f2c <HAL_DMA_Start_IT+0xa8>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d12f      	bne.n	8000f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f000 fa4a 	bl	800136c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000edc:	223f      	movs	r2, #63	; 0x3f
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0216 	orr.w	r2, r2, #22
 8000ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0208 	orr.w	r2, r2, #8
 8000f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0201 	orr.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e005      	b.n	8000f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f26:	2302      	movs	r3, #2
 8000f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f42:	f7ff fdd3 	bl	8000aec <HAL_GetTick>
 8000f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e052      	b.n	800100c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0216 	bic.w	r2, r2, #22
 8000f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d103      	bne.n	8000f96 <HAL_DMA_Abort+0x62>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d007      	beq.n	8000fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0208 	bic.w	r2, r2, #8
 8000fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0201 	bic.w	r2, r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fb6:	e013      	b.n	8000fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fb8:	f7ff fd98 	bl	8000aec <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d90c      	bls.n	8000fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2220      	movs	r2, #32
 8000fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e015      	b.n	800100c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1e4      	bne.n	8000fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff2:	223f      	movs	r2, #63	; 0x3f
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d004      	beq.n	8001032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00c      	b.n	800104c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2205      	movs	r2, #5
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001064:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <HAL_DMA_IRQHandler+0x248>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a8e      	ldr	r2, [pc, #568]	; (80012a4 <HAL_DMA_IRQHandler+0x24c>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0a9b      	lsrs	r3, r3, #10
 8001070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	2208      	movs	r2, #8
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d01a      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0204 	bic.w	r2, r2, #4
 80010aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b0:	2208      	movs	r2, #8
 80010b2:	409a      	lsls	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010bc:	f043 0201 	orr.w	r2, r3, #1
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	2201      	movs	r2, #1
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d012      	beq.n	80010fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e6:	2201      	movs	r2, #1
 80010e8:	409a      	lsls	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fe:	2204      	movs	r2, #4
 8001100:	409a      	lsls	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d012      	beq.n	8001130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	2204      	movs	r2, #4
 800111e:	409a      	lsls	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001128:	f043 0204 	orr.w	r2, r3, #4
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	2210      	movs	r2, #16
 8001136:	409a      	lsls	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d043      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d03c      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001152:	2210      	movs	r2, #16
 8001154:	409a      	lsls	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d018      	beq.n	800119a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
 8001186:	e01f      	b.n	80011c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118c:	2b00      	cmp	r3, #0
 800118e:	d01b      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	4798      	blx	r3
 8001198:	e016      	b.n	80011c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0208 	bic.w	r2, r2, #8
 80011b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011cc:	2220      	movs	r2, #32
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 808f 	beq.w	80012f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8087 	beq.w	80012f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ee:	2220      	movs	r2, #32
 80011f0:	409a      	lsls	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d136      	bne.n	8001270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0216 	bic.w	r2, r2, #22
 8001210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_DMA_IRQHandler+0x1da>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0208 	bic.w	r2, r2, #8
 8001240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	223f      	movs	r2, #63	; 0x3f
 8001248:	409a      	lsls	r2, r3
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001262:	2b00      	cmp	r3, #0
 8001264:	d07e      	beq.n	8001364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
        }
        return;
 800126e:	e079      	b.n	8001364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01d      	beq.n	80012ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10d      	bne.n	80012a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	2b00      	cmp	r3, #0
 8001292:	d031      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	4798      	blx	r3
 800129c:	e02c      	b.n	80012f8 <HAL_DMA_IRQHandler+0x2a0>
 800129e:	bf00      	nop
 80012a0:	20000008 	.word	0x20000008
 80012a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d023      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	4798      	blx	r3
 80012b8:	e01e      	b.n	80012f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0210 	bic.w	r2, r2, #16
 80012d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d032      	beq.n	8001366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d022      	beq.n	8001352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2205      	movs	r2, #5
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	3301      	adds	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	d307      	bcc.n	8001340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f2      	bne.n	8001324 <HAL_DMA_IRQHandler+0x2cc>
 800133e:	e000      	b.n	8001342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	4798      	blx	r3
 8001362:	e000      	b.n	8001366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001364:	bf00      	nop
    }
  }
}
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b40      	cmp	r3, #64	; 0x40
 8001398:	d108      	bne.n	80013ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013aa:	e007      	b.n	80013bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	3b10      	subs	r3, #16
 80013d8:	4a14      	ldr	r2, [pc, #80]	; (800142c <DMA_CalcBaseAndBitshift+0x64>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <DMA_CalcBaseAndBitshift+0x68>)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d909      	bls.n	800140a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	1d1a      	adds	r2, r3, #4
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	659a      	str	r2, [r3, #88]	; 0x58
 8001408:	e007      	b.n	800141a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001412:	f023 0303 	bic.w	r3, r3, #3
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	aaaaaaab 	.word	0xaaaaaaab
 8001430:	080038b4 	.word	0x080038b4

08001434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11f      	bne.n	800148e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d856      	bhi.n	8001502 <DMA_CheckFifoParam+0xce>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <DMA_CheckFifoParam+0x28>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	0800147f 	.word	0x0800147f
 8001464:	0800146d 	.word	0x0800146d
 8001468:	08001503 	.word	0x08001503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d046      	beq.n	8001506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800147c:	e043      	b.n	8001506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001486:	d140      	bne.n	800150a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800148c:	e03d      	b.n	800150a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001496:	d121      	bne.n	80014dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b03      	cmp	r3, #3
 800149c:	d837      	bhi.n	800150e <DMA_CheckFifoParam+0xda>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <DMA_CheckFifoParam+0x70>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014b5 	.word	0x080014b5
 80014a8:	080014bb 	.word	0x080014bb
 80014ac:	080014b5 	.word	0x080014b5
 80014b0:	080014cd 	.word	0x080014cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
      break;
 80014b8:	e030      	b.n	800151c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d025      	beq.n	8001512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014ca:	e022      	b.n	8001512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d4:	d11f      	bne.n	8001516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014da:	e01c      	b.n	8001516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d903      	bls.n	80014ea <DMA_CheckFifoParam+0xb6>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d003      	beq.n	80014f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014e8:	e018      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
      break;
 80014ee:	e015      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001500:	e00b      	b.n	800151a <DMA_CheckFifoParam+0xe6>
      break;
 8001502:	bf00      	nop
 8001504:	e00a      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;
 8001506:	bf00      	nop
 8001508:	e008      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;
 800150a:	bf00      	nop
 800150c:	e006      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;
 800150e:	bf00      	nop
 8001510:	e004      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;
 8001512:	bf00      	nop
 8001514:	e002      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;   
 8001516:	bf00      	nop
 8001518:	e000      	b.n	800151c <DMA_CheckFifoParam+0xe8>
      break;
 800151a:	bf00      	nop
    }
  } 
  
  return status; 
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e16b      	b.n	8001820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 815a 	bne.w	800181a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80b4 	beq.w	800181a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b60      	ldr	r3, [pc, #384]	; (8001838 <HAL_GPIO_Init+0x30c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a5f      	ldr	r2, [pc, #380]	; (8001838 <HAL_GPIO_Init+0x30c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_GPIO_Init+0x30c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a5b      	ldr	r2, [pc, #364]	; (800183c <HAL_GPIO_Init+0x310>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a52      	ldr	r2, [pc, #328]	; (8001840 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4f      	ldr	r2, [pc, #316]	; (800184c <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x21a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4e      	ldr	r2, [pc, #312]	; (8001850 <HAL_GPIO_Init+0x324>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x216>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4d      	ldr	r2, [pc, #308]	; (8001854 <HAL_GPIO_Init+0x328>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x212>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_GPIO_Init+0x32c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4b      	ldr	r2, [pc, #300]	; (800185c <HAL_GPIO_Init+0x330>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x20a>
 8001732:	2307      	movs	r3, #7
 8001734:	e00e      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001736:	2308      	movs	r3, #8
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173a:	2306      	movs	r3, #6
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4935      	ldr	r1, [pc, #212]	; (800183c <HAL_GPIO_Init+0x310>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a32      	ldr	r2, [pc, #200]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <HAL_GPIO_Init+0x334>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <HAL_GPIO_Init+0x334>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_GPIO_Init+0x334>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_GPIO_Init+0x334>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_GPIO_Init+0x334>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae90 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40013800 	.word	0x40013800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400
 8001848:	40020800 	.word	0x40020800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40021400 	.word	0x40021400
 8001858:	40021800 	.word	0x40021800
 800185c:	40021c00 	.word	0x40021c00
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e267      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d075      	beq.n	80019a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b6:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d00c      	beq.n	80018dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x108>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d157      	bne.n	80019a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e242      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x74>
 80018fe:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6f      	ldr	r2, [pc, #444]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6d      	ldr	r3, [pc, #436]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6c      	ldr	r2, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a68      	ldr	r2, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a65      	ldr	r2, [pc, #404]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f8cc 	bl	8000aec <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f8c8 	bl	8000aec <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e207      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xc0>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f8b8 	bl	8000aec <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f8b4 	bl	8000aec <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1f3      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0xe8>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1c7      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	; (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f86d 	bl	8000aec <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f869 	bl	8000aec <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1a8      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f84c 	bl	8000aec <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f848 	bl	8000aec <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e187      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f82c 	bl	8000aec <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f828 	bl	8000aec <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e167      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x200>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff f815 	bl	8000aec <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f811 	bl	8000aec <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e150      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b81      	ldr	r3, [pc, #516]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a7c      	ldr	r2, [pc, #496]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b74      	ldr	r3, [pc, #464]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a73      	ldr	r2, [pc, #460]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7fe ffd1 	bl	8000aec <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7fe ffcd 	bl	8000aec <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e10c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ea>
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a63      	ldr	r2, [pc, #396]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x30c>
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8e:	4a5e      	ldr	r2, [pc, #376]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	; 0x70
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb0:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ff92 	bl	8000aec <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ff8e 	bl	8000aec <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0cb      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x334>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7fe ff7c 	bl	8000aec <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7fe ff78 	bl	8000aec <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0b5      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b39      	ldr	r3, [pc, #228]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	4a38      	ldr	r2, [pc, #224]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a1 	beq.w	8001d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d05c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d141      	bne.n	8001cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7fe ff4c 	bl	8000aec <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ff48 	bl	8000aec <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e087      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	491b      	ldr	r1, [pc, #108]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe ff21 	bl	8000aec <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe ff1d 	bl	8000aec <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e05c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x416>
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff0a 	bl	8000aec <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7fe ff06 	bl	8000aec <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e045      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x444>
 8001cfa:	e03d      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e038      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x4ec>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d028      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cc      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b68      	ldr	r3, [pc, #416]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d90c      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b65      	ldr	r3, [pc, #404]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d044      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e067      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4934      	ldr	r1, [pc, #208]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fe38 	bl	8000aec <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fe34 	bl	8000aec <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d20c      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fd98 	bl	8000a64 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00
 8001f44:	40023800 	.word	0x40023800
 8001f48:	0800389c 	.word	0x0800389c
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f58:	b090      	sub	sp, #64	; 0x40
 8001f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f60:	2300      	movs	r3, #0
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f64:	2300      	movs	r3, #0
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d00d      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x40>
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	f200 80a1 	bhi.w	80020c0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x34>
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f86:	e09b      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b53      	ldr	r3, [pc, #332]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f8c:	e09b      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f92:	e098      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d028      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	623b      	str	r3, [r7, #32]
 8001fb4:	627a      	str	r2, [r7, #36]	; 0x24
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fc0:	fb03 f201 	mul.w	r2, r3, r1
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	fb00 f303 	mul.w	r3, r0, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a43      	ldr	r2, [pc, #268]	; (80020dc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fce:	fba0 1202 	umull	r1, r2, r0, r2
 8001fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fd4:	460a      	mov	r2, r1
 8001fd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fda:	4413      	add	r3, r2
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	61fa      	str	r2, [r7, #28]
 8001fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fee:	f7fe f8f3 	bl	80001d8 <__aeabi_uldivmod>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffa:	e053      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	617a      	str	r2, [r7, #20]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800200e:	f04f 0b00 	mov.w	fp, #0
 8002012:	4652      	mov	r2, sl
 8002014:	465b      	mov	r3, fp
 8002016:	f04f 0000 	mov.w	r0, #0
 800201a:	f04f 0100 	mov.w	r1, #0
 800201e:	0159      	lsls	r1, r3, #5
 8002020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002024:	0150      	lsls	r0, r2, #5
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	ebb2 080a 	subs.w	r8, r2, sl
 800202e:	eb63 090b 	sbc.w	r9, r3, fp
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800203e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002042:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002046:	ebb2 0408 	subs.w	r4, r2, r8
 800204a:	eb63 0509 	sbc.w	r5, r3, r9
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	00eb      	lsls	r3, r5, #3
 8002058:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205c:	00e2      	lsls	r2, r4, #3
 800205e:	4614      	mov	r4, r2
 8002060:	461d      	mov	r5, r3
 8002062:	eb14 030a 	adds.w	r3, r4, sl
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	eb45 030b 	adc.w	r3, r5, fp
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207a:	4629      	mov	r1, r5
 800207c:	028b      	lsls	r3, r1, #10
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002084:	4621      	mov	r1, r4
 8002086:	028a      	lsls	r2, r1, #10
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	2200      	movs	r2, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	60fa      	str	r2, [r7, #12]
 8002094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002098:	f7fe f89e 	bl	80001d8 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80020c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3740      	adds	r7, #64	; 0x40
 80020cc:	46bd      	mov	sp, r7
 80020ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	017d7840 	.word	0x017d7840

080020e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a9b      	lsrs	r3, r3, #10
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	080038ac 	.word	0x080038ac

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002124:	f7ff ffdc 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0b5b      	lsrs	r3, r3, #13
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	080038ac 	.word	0x080038ac

08002148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e03f      	b.n	80021da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fb5a 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 ff69 	bl	8003064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b08a      	sub	sp, #40	; 0x28
 80021e6:	af02      	add	r7, sp, #8
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d17c      	bne.n	80022fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_UART_Transmit+0x2c>
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e075      	b.n	80022fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_UART_Transmit+0x3e>
 800221c:	2302      	movs	r3, #2
 800221e:	e06e      	b.n	80022fe <HAL_UART_Transmit+0x11c>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fc59 	bl	8000aec <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x82>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002274:	e02a      	b.n	80022cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fc21 	bl	8002ac8 <UART_WaitOnFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e036      	b.n	80022fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	3302      	adds	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e007      	b.n	80022be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1cf      	bne.n	8002276 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	2140      	movs	r1, #64	; 0x40
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fbf1 	bl	8002ac8 <UART_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b20      	cmp	r3, #32
 800231e:	d11d      	bne.n	800235c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_UART_Receive_DMA+0x26>
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e016      	b.n	800235e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_UART_Receive_DMA+0x38>
 800233a:	2302      	movs	r3, #2
 800233c:	e00f      	b.n	800235e <HAL_UART_Receive_DMA+0x58>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	461a      	mov	r2, r3
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fc26 	bl	8002ba4 <UART_Start_Receive_DMA>
 8002358:	4603      	mov	r3, r0
 800235a:	e000      	b.n	800235e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0ba      	sub	sp, #232	; 0xe8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800239a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80023a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10f      	bne.n	80023ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_UART_IRQHandler+0x66>
 80023ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fd91 	bl	8002eee <UART_Receive_IT>
      return;
 80023cc:	e256      	b.n	800287c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80de 	beq.w	8002594 <HAL_UART_IRQHandler+0x22c>
 80023d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80d1 	beq.w	8002594 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_UART_IRQHandler+0xae>
 80023fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_UART_IRQHandler+0xd2>
 8002422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0xf6>
 8002446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d005      	beq.n	800245e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0204 	orr.w	r2, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d011      	beq.n	800248e <HAL_UART_IRQHandler+0x126>
 800246a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0208 	orr.w	r2, r3, #8
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 81ed 	beq.w	8002872 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_UART_IRQHandler+0x14e>
 80024a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fd1c 	bl	8002eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c0:	2b40      	cmp	r3, #64	; 0x40
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_UART_IRQHandler+0x17a>
 80024da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d04f      	beq.n	8002582 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fc24 	bl	8002d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d141      	bne.n	800257a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002504:	e853 3f00 	ldrex	r3, [r3]
 8002508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800250c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3314      	adds	r3, #20
 800251e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002522:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800252e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800253a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1d9      	bne.n	80024f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	2b00      	cmp	r3, #0
 8002548:	d013      	beq.n	8002572 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254e:	4a7d      	ldr	r2, [pc, #500]	; (8002744 <HAL_UART_IRQHandler+0x3dc>)
 8002550:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd5c 	bl	8001014 <HAL_DMA_Abort_IT>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800256c:	4610      	mov	r0, r2
 800256e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	e00e      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f99a 	bl	80028ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	e00a      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f996 	bl	80028ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002580:	e006      	b.n	8002590 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f992 	bl	80028ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800258e:	e170      	b.n	8002872 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	bf00      	nop
    return;
 8002592:	e16e      	b.n	8002872 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	2b01      	cmp	r3, #1
 800259a:	f040 814a 	bne.w	8002832 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8143 	beq.w	8002832 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 813c 	beq.w	8002832 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	f040 80b4 	bne.w	8002748 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8140 	beq.w	8002876 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025fe:	429a      	cmp	r2, r3
 8002600:	f080 8139 	bcs.w	8002876 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800260a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002616:	f000 8088 	beq.w	800272a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002628:	e853 3f00 	ldrex	r3, [r3]
 800262c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002646:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002656:	e841 2300 	strex	r3, r2, [r1]
 800265a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800265e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1d9      	bne.n	800261a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3314      	adds	r3, #20
 800266c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3314      	adds	r3, #20
 8002686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800268a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800268e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800269c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e1      	bne.n	8002666 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3314      	adds	r3, #20
 80026a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80026b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	3314      	adds	r3, #20
 80026c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80026c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026ce:	e841 2300 	strex	r3, r2, [r1]
 80026d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e3      	bne.n	80026a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fa:	f023 0310 	bic.w	r3, r3, #16
 80026fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800270c:	65ba      	str	r2, [r7, #88]	; 0x58
 800270e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002714:	e841 2300 	strex	r3, r2, [r1]
 8002718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e3      	bne.n	80026e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fc05 	bl	8000f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002732:	b29b      	uxth	r3, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f8c0 	bl	80028c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002740:	e099      	b.n	8002876 <HAL_UART_IRQHandler+0x50e>
 8002742:	bf00      	nop
 8002744:	08002df7 	.word	0x08002df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002750:	b29b      	uxth	r3, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 808b 	beq.w	800287a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8086 	beq.w	800287a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002792:	647a      	str	r2, [r7, #68]	; 0x44
 8002794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80027a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e3      	bne.n	800276e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	e853 3f00 	ldrex	r3, [r3]
 80027b4:	623b      	str	r3, [r7, #32]
   return(result);
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3314      	adds	r3, #20
 80027c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027ca:	633a      	str	r2, [r7, #48]	; 0x30
 80027cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e3      	bne.n	80027a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002810:	61fa      	str	r2, [r7, #28]
 8002812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002814:	69b9      	ldr	r1, [r7, #24]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	e841 2300 	strex	r3, r2, [r1]
 800281c:	617b      	str	r3, [r7, #20]
   return(result);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e3      	bne.n	80027ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f848 	bl	80028c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002830:	e023      	b.n	800287a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_UART_IRQHandler+0x4ea>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fae7 	bl	8002e1e <UART_Transmit_IT>
    return;
 8002850:	e014      	b.n	800287c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00e      	beq.n	800287c <HAL_UART_IRQHandler+0x514>
 800285e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fb27 	bl	8002ebe <UART_EndTransmit_IT>
    return;
 8002870:	e004      	b.n	800287c <HAL_UART_IRQHandler+0x514>
    return;
 8002872:	bf00      	nop
 8002874:	e002      	b.n	800287c <HAL_UART_IRQHandler+0x514>
      return;
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <HAL_UART_IRQHandler+0x514>
      return;
 800287a:	bf00      	nop
  }
}
 800287c:	37e8      	adds	r7, #232	; 0xe8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop

08002884 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b09c      	sub	sp, #112	; 0x70
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d172      	bne.n	80029da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80028f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f6:	2200      	movs	r2, #0
 80028f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800290a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002910:	66bb      	str	r3, [r7, #104]	; 0x68
 8002912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800291a:	65ba      	str	r2, [r7, #88]	; 0x58
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e5      	bne.n	80028fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	667b      	str	r3, [r7, #100]	; 0x64
 8002946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800294e:	647a      	str	r2, [r7, #68]	; 0x44
 8002950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e5      	bne.n	800292e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	623b      	str	r3, [r7, #32]
   return(result);
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002982:	633a      	str	r2, [r7, #48]	; 0x30
 8002984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298a:	e841 2300 	strex	r3, r2, [r1]
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1e5      	bne.n	8002962 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d119      	bne.n	80029da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	330c      	adds	r3, #12
 80029ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f023 0310 	bic.w	r3, r3, #16
 80029bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	330c      	adds	r3, #12
 80029c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029c6:	61fa      	str	r2, [r7, #28]
 80029c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	617b      	str	r3, [r7, #20]
   return(result);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e5      	bne.n	80029a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d106      	bne.n	80029f0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029e6:	4619      	mov	r1, r3
 80029e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029ea:	f7ff ff69 	bl	80028c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029ee:	e002      	b.n	80029f6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80029f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80029f2:	f7fd fd9f 	bl	8000534 <HAL_UART_RxCpltCallback>
}
 80029f6:	bf00      	nop
 80029f8:	3770      	adds	r7, #112	; 0x70
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d108      	bne.n	8002a26 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7ff ff4e 	bl	80028c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a24:	e002      	b.n	8002a2c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7ff ff36 	bl	8002898 <HAL_UART_RxHalfCpltCallback>
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b80      	cmp	r3, #128	; 0x80
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b21      	cmp	r3, #33	; 0x21
 8002a66:	d108      	bne.n	8002a7a <UART_DMAError+0x46>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2200      	movs	r2, #0
 8002a72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002a74:	68b8      	ldr	r0, [r7, #8]
 8002a76:	f000 f933 	bl	8002ce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b22      	cmp	r3, #34	; 0x22
 8002a9a:	d108      	bne.n	8002aae <UART_DMAError+0x7a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002aa8:	68b8      	ldr	r0, [r7, #8]
 8002aaa:	f000 f941 	bl	8002d30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0210 	orr.w	r2, r3, #16
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aba:	68b8      	ldr	r0, [r7, #8]
 8002abc:	f7ff fef6 	bl	80028ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b090      	sub	sp, #64	; 0x40
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ad8:	e050      	b.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d04c      	beq.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ae8:	f7fe f800 	bl	8000aec <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d241      	bcs.n	8002b7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b18:	637a      	str	r2, [r7, #52]	; 0x34
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e5      	bne.n	8002af8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b4c:	623a      	str	r2, [r7, #32]
 8002b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	69f9      	ldr	r1, [r7, #28]
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e00f      	b.n	8002b9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d09f      	beq.n	8002ada <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3740      	adds	r7, #64	; 0x40
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b098      	sub	sp, #96	; 0x60
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	88fa      	ldrh	r2, [r7, #6]
 8002bbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2222      	movs	r2, #34	; 0x22
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <UART_Start_Receive_DMA+0x130>)
 8002bd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	4a3f      	ldr	r2, [pc, #252]	; (8002cd8 <UART_Start_Receive_DMA+0x134>)
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be0:	4a3e      	ldr	r2, [pc, #248]	; (8002cdc <UART_Start_Receive_DMA+0x138>)
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	2200      	movs	r2, #0
 8002bea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	f7fe f93e 	bl	8000e84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	613b      	str	r3, [r7, #16]
 8002c1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d019      	beq.n	8002c62 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	657b      	str	r3, [r7, #84]	; 0x54
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c82:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e5      	bne.n	8002c62 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	e853 3f00 	ldrex	r3, [r3]
 8002ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cac:	653b      	str	r3, [r7, #80]	; 0x50
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3314      	adds	r3, #20
 8002cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002cb6:	627a      	str	r2, [r7, #36]	; 0x24
 8002cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6a39      	ldr	r1, [r7, #32]
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e5      	bne.n	8002c96 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3760      	adds	r7, #96	; 0x60
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	080028d9 	.word	0x080028d9
 8002cd8:	080029ff 	.word	0x080029ff
 8002cdc:	08002a35 	.word	0x08002a35

08002ce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	; 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	61ba      	str	r2, [r7, #24]
 8002d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	613b      	str	r3, [r7, #16]
   return(result);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d24:	bf00      	nop
 8002d26:	3724      	adds	r7, #36	; 0x24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b095      	sub	sp, #84	; 0x54
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d58:	643a      	str	r2, [r7, #64]	; 0x40
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d119      	bne.n	8002ddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0310 	bic.w	r3, r3, #16
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dc8:	61ba      	str	r2, [r7, #24]
 8002dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dea:	bf00      	nop
 8002dec:	3754      	adds	r7, #84	; 0x54
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fd4b 	bl	80028ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b21      	cmp	r3, #33	; 0x21
 8002e30:	d13e      	bne.n	8002eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d114      	bne.n	8002e66 <UART_Transmit_IT+0x48>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d110      	bne.n	8002e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	1c9a      	adds	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	621a      	str	r2, [r3, #32]
 8002e64:	e008      	b.n	8002e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6211      	str	r1, [r2, #32]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4619      	mov	r1, r3
 8002e86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e000      	b.n	8002eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fcd0 	bl	8002884 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b08c      	sub	sp, #48	; 0x30
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b22      	cmp	r3, #34	; 0x22
 8002f00:	f040 80ab 	bne.w	800305a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0c:	d117      	bne.n	8002f3e <UART_Receive_IT+0x50>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d113      	bne.n	8002f3e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	1c9a      	adds	r2, r3, #2
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f3c:	e026      	b.n	8002f8c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d007      	beq.n	8002f62 <UART_Receive_IT+0x74>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <UART_Receive_IT+0x82>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e008      	b.n	8002f82 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d15a      	bne.n	8003056 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d135      	bne.n	800304c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f023 0310 	bic.w	r3, r3, #16
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	623a      	str	r2, [r7, #32]
 8003008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	61bb      	str	r3, [r7, #24]
   return(result);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e5      	bne.n	8002fe6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d10a      	bne.n	800303e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fc3b 	bl	80028c0 <HAL_UARTEx_RxEventCallback>
 800304a:	e002      	b.n	8003052 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fa71 	bl	8000534 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e002      	b.n	800305c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3730      	adds	r7, #48	; 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003068:	b0c0      	sub	sp, #256	; 0x100
 800306a:	af00      	add	r7, sp, #0
 800306c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	68d9      	ldr	r1, [r3, #12]
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	ea40 0301 	orr.w	r3, r0, r1
 800308c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800308e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	431a      	orrs	r2, r3
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	431a      	orrs	r2, r3
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030bc:	f021 010c 	bic.w	r1, r1, #12
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ca:	430b      	orrs	r3, r1
 80030cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030de:	6999      	ldr	r1, [r3, #24]
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	ea40 0301 	orr.w	r3, r0, r1
 80030ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4b8f      	ldr	r3, [pc, #572]	; (8003330 <UART_SetConfig+0x2cc>)
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d005      	beq.n	8003104 <UART_SetConfig+0xa0>
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b8d      	ldr	r3, [pc, #564]	; (8003334 <UART_SetConfig+0x2d0>)
 8003100:	429a      	cmp	r2, r3
 8003102:	d104      	bne.n	800310e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff f80c 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8003108:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800310c:	e003      	b.n	8003116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800310e:	f7fe fff3 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003112:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003120:	f040 810c 	bne.w	800333c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800312e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003136:	4622      	mov	r2, r4
 8003138:	462b      	mov	r3, r5
 800313a:	1891      	adds	r1, r2, r2
 800313c:	65b9      	str	r1, [r7, #88]	; 0x58
 800313e:	415b      	adcs	r3, r3
 8003140:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003146:	4621      	mov	r1, r4
 8003148:	eb12 0801 	adds.w	r8, r2, r1
 800314c:	4629      	mov	r1, r5
 800314e:	eb43 0901 	adc.w	r9, r3, r1
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800315e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003166:	4690      	mov	r8, r2
 8003168:	4699      	mov	r9, r3
 800316a:	4623      	mov	r3, r4
 800316c:	eb18 0303 	adds.w	r3, r8, r3
 8003170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003174:	462b      	mov	r3, r5
 8003176:	eb49 0303 	adc.w	r3, r9, r3
 800317a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800318a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800318e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003192:	460b      	mov	r3, r1
 8003194:	18db      	adds	r3, r3, r3
 8003196:	653b      	str	r3, [r7, #80]	; 0x50
 8003198:	4613      	mov	r3, r2
 800319a:	eb42 0303 	adc.w	r3, r2, r3
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
 80031a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031a8:	f7fd f816 	bl	80001d8 <__aeabi_uldivmod>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4b61      	ldr	r3, [pc, #388]	; (8003338 <UART_SetConfig+0x2d4>)
 80031b2:	fba3 2302 	umull	r2, r3, r3, r2
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	011c      	lsls	r4, r3, #4
 80031ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031cc:	4642      	mov	r2, r8
 80031ce:	464b      	mov	r3, r9
 80031d0:	1891      	adds	r1, r2, r2
 80031d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031d4:	415b      	adcs	r3, r3
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031dc:	4641      	mov	r1, r8
 80031de:	eb12 0a01 	adds.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb43 0b01 	adc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fc:	4692      	mov	sl, r2
 80031fe:	469b      	mov	fp, r3
 8003200:	4643      	mov	r3, r8
 8003202:	eb1a 0303 	adds.w	r3, sl, r3
 8003206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800320a:	464b      	mov	r3, r9
 800320c:	eb4b 0303 	adc.w	r3, fp, r3
 8003210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003220:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003228:	460b      	mov	r3, r1
 800322a:	18db      	adds	r3, r3, r3
 800322c:	643b      	str	r3, [r7, #64]	; 0x40
 800322e:	4613      	mov	r3, r2
 8003230:	eb42 0303 	adc.w	r3, r2, r3
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
 8003236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800323a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800323e:	f7fc ffcb 	bl	80001d8 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <UART_SetConfig+0x2d4>)
 800324a:	fba3 2301 	umull	r2, r3, r3, r1
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2264      	movs	r2, #100	; 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <UART_SetConfig+0x2d4>)
 8003260:	fba3 2302 	umull	r2, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800326c:	441c      	add	r4, r3
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003278:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800327c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	63b9      	str	r1, [r7, #56]	; 0x38
 8003288:	415b      	adcs	r3, r3
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003290:	4641      	mov	r1, r8
 8003292:	1851      	adds	r1, r2, r1
 8003294:	6339      	str	r1, [r7, #48]	; 0x30
 8003296:	4649      	mov	r1, r9
 8003298:	414b      	adcs	r3, r1
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032a8:	4659      	mov	r1, fp
 80032aa:	00cb      	lsls	r3, r1, #3
 80032ac:	4651      	mov	r1, sl
 80032ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b2:	4651      	mov	r1, sl
 80032b4:	00ca      	lsls	r2, r1, #3
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	4642      	mov	r2, r8
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c4:	464b      	mov	r3, r9
 80032c6:	460a      	mov	r2, r1
 80032c8:	eb42 0303 	adc.w	r3, r2, r3
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80032e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032e4:	460b      	mov	r3, r1
 80032e6:	18db      	adds	r3, r3, r3
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	4613      	mov	r3, r2
 80032ec:	eb42 0303 	adc.w	r3, r2, r3
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80032fa:	f7fc ff6d 	bl	80001d8 <__aeabi_uldivmod>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <UART_SetConfig+0x2d4>)
 8003304:	fba3 1302 	umull	r1, r3, r3, r2
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	2164      	movs	r1, #100	; 0x64
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	3332      	adds	r3, #50	; 0x32
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <UART_SetConfig+0x2d4>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	095b      	lsrs	r3, r3, #5
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4422      	add	r2, r4
 800332a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800332c:	e106      	b.n	800353c <UART_SetConfig+0x4d8>
 800332e:	bf00      	nop
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800333c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003340:	2200      	movs	r2, #0
 8003342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003346:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800334a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800334e:	4642      	mov	r2, r8
 8003350:	464b      	mov	r3, r9
 8003352:	1891      	adds	r1, r2, r2
 8003354:	6239      	str	r1, [r7, #32]
 8003356:	415b      	adcs	r3, r3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
 800335a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800335e:	4641      	mov	r1, r8
 8003360:	1854      	adds	r4, r2, r1
 8003362:	4649      	mov	r1, r9
 8003364:	eb43 0501 	adc.w	r5, r3, r1
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	00eb      	lsls	r3, r5, #3
 8003372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003376:	00e2      	lsls	r2, r4, #3
 8003378:	4614      	mov	r4, r2
 800337a:	461d      	mov	r5, r3
 800337c:	4643      	mov	r3, r8
 800337e:	18e3      	adds	r3, r4, r3
 8003380:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003384:	464b      	mov	r3, r9
 8003386:	eb45 0303 	adc.w	r3, r5, r3
 800338a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800339a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033aa:	4629      	mov	r1, r5
 80033ac:	008b      	lsls	r3, r1, #2
 80033ae:	4621      	mov	r1, r4
 80033b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033b4:	4621      	mov	r1, r4
 80033b6:	008a      	lsls	r2, r1, #2
 80033b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033bc:	f7fc ff0c 	bl	80001d8 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4b60      	ldr	r3, [pc, #384]	; (8003548 <UART_SetConfig+0x4e4>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	011c      	lsls	r4, r3, #4
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	61b9      	str	r1, [r7, #24]
 80033e8:	415b      	adcs	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f0:	4641      	mov	r1, r8
 80033f2:	1851      	adds	r1, r2, r1
 80033f4:	6139      	str	r1, [r7, #16]
 80033f6:	4649      	mov	r1, r9
 80033f8:	414b      	adcs	r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	00cb      	lsls	r3, r1, #3
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003412:	4651      	mov	r1, sl
 8003414:	00ca      	lsls	r2, r1, #3
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	4603      	mov	r3, r0
 800341c:	4642      	mov	r2, r8
 800341e:	189b      	adds	r3, r3, r2
 8003420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003424:	464b      	mov	r3, r9
 8003426:	460a      	mov	r2, r1
 8003428:	eb42 0303 	adc.w	r3, r2, r3
 800342c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	67bb      	str	r3, [r7, #120]	; 0x78
 800343a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003448:	4649      	mov	r1, r9
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	4641      	mov	r1, r8
 800344e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003452:	4641      	mov	r1, r8
 8003454:	008a      	lsls	r2, r1, #2
 8003456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800345a:	f7fc febd 	bl	80001d8 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4611      	mov	r1, r2
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <UART_SetConfig+0x4e4>)
 8003466:	fba3 2301 	umull	r2, r3, r3, r1
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2264      	movs	r2, #100	; 0x64
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	1acb      	subs	r3, r1, r3
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	3332      	adds	r3, #50	; 0x32
 8003478:	4a33      	ldr	r2, [pc, #204]	; (8003548 <UART_SetConfig+0x4e4>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003484:	441c      	add	r4, r3
 8003486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348a:	2200      	movs	r2, #0
 800348c:	673b      	str	r3, [r7, #112]	; 0x70
 800348e:	677a      	str	r2, [r7, #116]	; 0x74
 8003490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	1891      	adds	r1, r2, r2
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	415b      	adcs	r3, r3
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a4:	4641      	mov	r1, r8
 80034a6:	1851      	adds	r1, r2, r1
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	4649      	mov	r1, r9
 80034ac:	414b      	adcs	r3, r1
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034bc:	4659      	mov	r1, fp
 80034be:	00cb      	lsls	r3, r1, #3
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c6:	4651      	mov	r1, sl
 80034c8:	00ca      	lsls	r2, r1, #3
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	4642      	mov	r2, r8
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034d6:	464b      	mov	r3, r9
 80034d8:	460a      	mov	r2, r1
 80034da:	eb42 0303 	adc.w	r3, r2, r3
 80034de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ea:	667a      	str	r2, [r7, #100]	; 0x64
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80034f8:	4649      	mov	r1, r9
 80034fa:	008b      	lsls	r3, r1, #2
 80034fc:	4641      	mov	r1, r8
 80034fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003502:	4641      	mov	r1, r8
 8003504:	008a      	lsls	r2, r1, #2
 8003506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800350a:	f7fc fe65 	bl	80001d8 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <UART_SetConfig+0x4e4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <UART_SetConfig+0x4e4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4422      	add	r2, r4
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003542:	46bd      	mov	sp, r7
 8003544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003548:	51eb851f 	.word	0x51eb851f

0800354c <RS485_enablePowerOn>:
 * @brief 
 * 
 * @param me 
 */
static void RS485_enablePowerOn(RS485 *me)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <RS485_enablePowerOn+0x20>
    {
        return;
    }
    HAL_GPIO_WritePin(me->RS485_Power_Port, me->RS485_Power_Pin, GPIO_PIN_SET);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	889b      	ldrh	r3, [r3, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	4619      	mov	r1, r3
 8003566:	f7fe f97d 	bl	8001864 <HAL_GPIO_WritePin>
 800356a:	e000      	b.n	800356e <RS485_enablePowerOn+0x22>
        return;
 800356c:	bf00      	nop
}
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <RS485_enablePowerOff>:

static void RS485_enablePowerOff(RS485 *me)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <RS485_enablePowerOff+0x20>
    {
        return;
    }
    HAL_GPIO_WritePin(me->RS485_Power_Port, me->RS485_Power_Pin, GPIO_PIN_RESET);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	889b      	ldrh	r3, [r3, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	4619      	mov	r1, r3
 800358e:	f7fe f969 	bl	8001864 <HAL_GPIO_WritePin>
 8003592:	e000      	b.n	8003596 <RS485_enablePowerOff+0x22>
        return;
 8003594:	bf00      	nop
}
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <RS485_enableTransmitMode>:

/* To enable the transmit mode,
You need to set the RE pin to logic level 0 and the DE pin to logic level 0.*/
void RS485_enableTransmitMode(RS485 *me)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <RS485_enableTransmitMode+0x30>
    {
        return;
    }
    HAL_GPIO_WritePin(me->RS485_RE_Port, me->RS485_RE_Pin, GPIO_PIN_RESET);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6918      	ldr	r0, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8a9b      	ldrh	r3, [r3, #20]
 80035b2:	2200      	movs	r2, #0
 80035b4:	4619      	mov	r1, r3
 80035b6:	f7fe f955 	bl	8001864 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(me->RS485_DE_Port, me->RS485_DE_Pin, GPIO_PIN_RESET);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6898      	ldr	r0, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	899b      	ldrh	r3, [r3, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fe f94d 	bl	8001864 <HAL_GPIO_WritePin>
 80035ca:	e000      	b.n	80035ce <RS485_enableTransmitMode+0x32>
        return;
 80035cc:	bf00      	nop
}
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <RS485_enableReceiveMode>:

/* To enable the receive mode,
You need to set the RE pin to logic level 1 and the DE pin to logic level 0.*/
static void RS485_enableReceiveMode(RS485 *me)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <RS485_enableReceiveMode+0x30>
    {
        return;
    }
    HAL_GPIO_WritePin(me->RS485_RE_Port, me->RS485_RE_Pin, GPIO_PIN_SET);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6918      	ldr	r0, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8a9b      	ldrh	r3, [r3, #20]
 80035ea:	2201      	movs	r2, #1
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fe f939 	bl	8001864 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(me->RS485_DE_Port, me->RS485_DE_Pin, GPIO_PIN_RESET);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6898      	ldr	r0, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	899b      	ldrh	r3, [r3, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7fe f931 	bl	8001864 <HAL_GPIO_WritePin>
 8003602:	e000      	b.n	8003606 <RS485_enableReceiveMode+0x32>
        return;
 8003604:	bf00      	nop
}
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <RS485_Transmit>:

void RS485_Transmit(RS485 *me)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01b      	beq.n	8003652 <RS485_Transmit+0x46>
    {
        return;
    }
    RS485_enablePowerOn(me);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ff96 	bl	800354c <RS485_enablePowerOn>
    RS485_enableTransmitMode(me);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ffbb 	bl	800359c <RS485_enableTransmitMode>
    uint8_t Size = strlen((char *)(me->TxBuffer));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	331c      	adds	r3, #28
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc fdcc 	bl	80001c8 <strlen>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(me->huart, (uint8_t *)(me->TxBuffer), Size, 1000);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6998      	ldr	r0, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f103 011c 	add.w	r1, r3, #28
 800363e:	7bfb      	ldrb	r3, [r7, #15]
 8003640:	b29a      	uxth	r2, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003646:	f7fe fdcc 	bl	80021e2 <HAL_UART_Transmit>
    RS485_enablePowerOff(me);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff92 	bl	8003574 <RS485_enablePowerOff>
 8003650:	e000      	b.n	8003654 <RS485_Transmit+0x48>
        return;
 8003652:	bf00      	nop
}
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <RS485_Receive>:

void RS485_Receive(RS485 *me)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
    if (me == NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <RS485_Receive+0x34>
    {
        return;
    }
    RS485_enablePowerOn(me);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff6f 	bl	800354c <RS485_enablePowerOn>
    RS485_enableReceiveMode(me);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ffb0 	bl	80035d4 <RS485_enableReceiveMode>
    uint8_t Size = 255;
 8003674:	23ff      	movs	r3, #255	; 0xff
 8003676:	73fb      	strb	r3, [r7, #15]
    
    HAL_UART_Receive_DMA(me->huart, (uint8_t *)(me->RxBuffer), Size);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6998      	ldr	r0, [r3, #24]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	b292      	uxth	r2, r2
 8003686:	4619      	mov	r1, r3
 8003688:	f7fe fe3d 	bl	8002306 <HAL_UART_Receive_DMA>
 800368c:	e000      	b.n	8003690 <RS485_Receive+0x36>
        return;
 800368e:	bf00      	nop
}
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <crcCalculation>:
#include "rs485.h"

extern RS485 *data;

uint16_t crcCalculation(uint8_t *rs485_data, int in_dx)
{
 8003696:	b480      	push	{r7}
 8003698:	b087      	sub	sp, #28
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
	int i, j;
	uint16_t crc = 0xFFFF;
 80036a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036a4:	81fb      	strh	r3, [r7, #14]
	uint16_t crctemp;
	for (i = 0; i < in_dx; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e026      	b.n	80036fa <crcCalculation+0x64>
	{
		crc = rs485_data[i] ^ crc;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	89fb      	ldrh	r3, [r7, #14]
 80036b8:	4053      	eors	r3, r2
 80036ba:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 80036bc:	2301      	movs	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	e015      	b.n	80036ee <crcCalculation+0x58>
		{
			crctemp = crc / 2;
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	085b      	lsrs	r3, r3, #1
 80036c6:	81bb      	strh	r3, [r7, #12]
			if (crc - crctemp * 2 == 1)
 80036c8:	89fa      	ldrh	r2, [r7, #14]
 80036ca:	89bb      	ldrh	r3, [r7, #12]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d107      	bne.n	80036e4 <crcCalculation+0x4e>
			{
				crc = crctemp ^ 0xA001;
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80036da:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80036de:	43db      	mvns	r3, r3
 80036e0:	81fb      	strh	r3, [r7, #14]
 80036e2:	e001      	b.n	80036e8 <crcCalculation+0x52>
			}
			else
			{
				crc = crctemp;
 80036e4:	89bb      	ldrh	r3, [r7, #12]
 80036e6:	81fb      	strh	r3, [r7, #14]
		for (j = 1; j < 9; j++)
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	3301      	adds	r3, #1
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	dde6      	ble.n	80036c2 <crcCalculation+0x2c>
	for (i = 0; i < in_dx; i++)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3301      	adds	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	dbd4      	blt.n	80036ac <crcCalculation+0x16>
			}
		}
	}
	return crc;
 8003702:	89fb      	ldrh	r3, [r7, #14]
}
 8003704:	4618      	mov	r0, r3
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <Ducati_transmit>:

void Ducati_transmit(UART_HandleTypeDef *huart, Ducati_Query_t Query)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t queryData[8] = {0};
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
	uint8_t ind = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	77fb      	strb	r3, [r7, #31]
	queryData[ind++] = Query.slaveAddress;
 800372a:	7ffb      	ldrb	r3, [r7, #31]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	77fa      	strb	r2, [r7, #31]
 8003730:	793a      	ldrb	r2, [r7, #4]
 8003732:	3320      	adds	r3, #32
 8003734:	443b      	add	r3, r7
 8003736:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = Query.FunC;
 800373a:	7ffb      	ldrb	r3, [r7, #31]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	77fa      	strb	r2, [r7, #31]
 8003740:	797a      	ldrb	r2, [r7, #5]
 8003742:	3320      	adds	r3, #32
 8003744:	443b      	add	r3, r7
 8003746:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = Query.DataStartRegisterH;
 800374a:	7ffb      	ldrb	r3, [r7, #31]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	77fa      	strb	r2, [r7, #31]
 8003750:	79ba      	ldrb	r2, [r7, #6]
 8003752:	3320      	adds	r3, #32
 8003754:	443b      	add	r3, r7
 8003756:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = Query.DataStartRegisterL;
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	77fa      	strb	r2, [r7, #31]
 8003760:	79fa      	ldrb	r2, [r7, #7]
 8003762:	3320      	adds	r3, #32
 8003764:	443b      	add	r3, r7
 8003766:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = Query.DataRegsH;
 800376a:	7ffb      	ldrb	r3, [r7, #31]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	77fa      	strb	r2, [r7, #31]
 8003770:	7a3a      	ldrb	r2, [r7, #8]
 8003772:	3320      	adds	r3, #32
 8003774:	443b      	add	r3, r7
 8003776:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = Query.DataRegsL;
 800377a:	7ffb      	ldrb	r3, [r7, #31]
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	77fa      	strb	r2, [r7, #31]
 8003780:	7a7a      	ldrb	r2, [r7, #9]
 8003782:	3320      	adds	r3, #32
 8003784:	443b      	add	r3, r7
 8003786:	f803 2c0c 	strb.w	r2, [r3, #-12]
	Query.crc = crcCalculation(queryData, ind );
 800378a:	7ffa      	ldrb	r2, [r7, #31]
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff7f 	bl	8003696 <crcCalculation>
 8003798:	4603      	mov	r3, r0
 800379a:	817b      	strh	r3, [r7, #10]
	queryData[ind++] = (uint8_t)(Query.crc & 0xFF);
 800379c:	897a      	ldrh	r2, [r7, #10]
 800379e:	7ffb      	ldrb	r3, [r7, #31]
 80037a0:	1c59      	adds	r1, r3, #1
 80037a2:	77f9      	strb	r1, [r7, #31]
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	3320      	adds	r3, #32
 80037a8:	443b      	add	r3, r7
 80037aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	queryData[ind++] = (uint8_t)(Query.crc >> 8);
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	77f9      	strb	r1, [r7, #31]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	3320      	adds	r3, #32
 80037be:	443b      	add	r3, r7
 80037c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	HAL_UART_Transmit(data->huart, (uint8_t *)queryData, ind, 1000);
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <Ducati_transmit+0xdc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6998      	ldr	r0, [r3, #24]
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f107 0114 	add.w	r1, r7, #20
 80037d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d6:	f7fe fd04 	bl	80021e2 <HAL_UART_Transmit>
	RS485_Receive(data);
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <Ducati_transmit+0xdc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff3b 	bl	800365a <RS485_Receive>
}
 80037e4:	bf00      	nop
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200000d4 	.word	0x200000d4

080037f0 <Ducati_Master_Receive>:

void Ducati_Master_Receive(int length)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0ce      	sub	sp, #312	; 0x138
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80037fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80037fe:	6018      	str	r0, [r3, #0]
	char Master_ReceivedBuff[300];
	RS485_Receive(data);
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <Ducati_Master_Receive+0x38>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff28 	bl	800365a <RS485_Receive>
	Master_ReceivedBuff[300] = data->RxBuffer[255];
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <Ducati_Master_Receive+0x38>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 8003812:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8003816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800381a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
	// 		// 	{
	// 		// 		Master_ReceivedBuff[v] = data->RxBuffer[(v + index_Adr) % length];
	// 		// 	}
	// 		// }
	// 	}
}
 800381e:	bf00      	nop
 8003820:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	200000d4 	.word	0x200000d4

0800382c <memset>:
 800382c:	4402      	add	r2, r0
 800382e:	4603      	mov	r3, r0
 8003830:	4293      	cmp	r3, r2
 8003832:	d100      	bne.n	8003836 <memset+0xa>
 8003834:	4770      	bx	lr
 8003836:	f803 1b01 	strb.w	r1, [r3], #1
 800383a:	e7f9      	b.n	8003830 <memset+0x4>

0800383c <__libc_init_array>:
 800383c:	b570      	push	{r4, r5, r6, lr}
 800383e:	4d0d      	ldr	r5, [pc, #52]	; (8003874 <__libc_init_array+0x38>)
 8003840:	4c0d      	ldr	r4, [pc, #52]	; (8003878 <__libc_init_array+0x3c>)
 8003842:	1b64      	subs	r4, r4, r5
 8003844:	10a4      	asrs	r4, r4, #2
 8003846:	2600      	movs	r6, #0
 8003848:	42a6      	cmp	r6, r4
 800384a:	d109      	bne.n	8003860 <__libc_init_array+0x24>
 800384c:	4d0b      	ldr	r5, [pc, #44]	; (800387c <__libc_init_array+0x40>)
 800384e:	4c0c      	ldr	r4, [pc, #48]	; (8003880 <__libc_init_array+0x44>)
 8003850:	f000 f818 	bl	8003884 <_init>
 8003854:	1b64      	subs	r4, r4, r5
 8003856:	10a4      	asrs	r4, r4, #2
 8003858:	2600      	movs	r6, #0
 800385a:	42a6      	cmp	r6, r4
 800385c:	d105      	bne.n	800386a <__libc_init_array+0x2e>
 800385e:	bd70      	pop	{r4, r5, r6, pc}
 8003860:	f855 3b04 	ldr.w	r3, [r5], #4
 8003864:	4798      	blx	r3
 8003866:	3601      	adds	r6, #1
 8003868:	e7ee      	b.n	8003848 <__libc_init_array+0xc>
 800386a:	f855 3b04 	ldr.w	r3, [r5], #4
 800386e:	4798      	blx	r3
 8003870:	3601      	adds	r6, #1
 8003872:	e7f2      	b.n	800385a <__libc_init_array+0x1e>
 8003874:	080038c4 	.word	0x080038c4
 8003878:	080038c4 	.word	0x080038c4
 800387c:	080038c4 	.word	0x080038c4
 8003880:	080038c8 	.word	0x080038c8

08003884 <_init>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr

08003890 <_fini>:
 8003890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003892:	bf00      	nop
 8003894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003896:	bc08      	pop	{r3}
 8003898:	469e      	mov	lr, r3
 800389a:	4770      	bx	lr
