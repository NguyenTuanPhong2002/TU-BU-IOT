
GATEWAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08006d58  08006d58  00016d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e00  08006e00  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006e00  08006e00  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e00  08006e00  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006e08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000290  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009c1c  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ca7  00000000  00000000  00029d07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008b8  00000000  00000000  0002b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000678  00000000  00000000  0002c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212ae  00000000  00000000  0002c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ade5  00000000  00000000  0004db8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2040  00000000  00000000  00058973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e20  00000000  00000000  0011a9b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0011d7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d40 	.word	0x08006d40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006d40 	.word	0x08006d40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <LORA_begin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LORA_begin() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	lora = (LORA_HandleTypeDef*) &rfm95w;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <LORA_begin+0x7c>)
 8000c0e:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <LORA_begin+0x80>)
 8000c10:	601a      	str	r2, [r3, #0]

	rfm95w.resetPort = RESET_GPIO_Port;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <LORA_begin+0x80>)
 8000c14:	4a1d      	ldr	r2, [pc, #116]	; (8000c8c <LORA_begin+0x84>)
 8000c16:	639a      	str	r2, [r3, #56]	; 0x38
	rfm95w.resetPin = RESET_Pin;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <LORA_begin+0x80>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rfm95w.nssPort = NSS_GPIO_Port;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <LORA_begin+0x80>)
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <LORA_begin+0x84>)
 8000c22:	63da      	str	r2, [r3, #60]	; 0x3c
	rfm95w.nssPin = NSS_Pin;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <LORA_begin+0x80>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	85da      	strh	r2, [r3, #46]	; 0x2e
	rfm95w.dio1Port = DIO1_GPIO_Port;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <LORA_begin+0x80>)
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <LORA_begin+0x88>)
 8000c2e:	645a      	str	r2, [r3, #68]	; 0x44
	rfm95w.dio1 = DIO1_Pin;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <LORA_begin+0x80>)
 8000c32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c36:	865a      	strh	r2, [r3, #50]	; 0x32
	rfm95w.hspi = &hspi3;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <LORA_begin+0x80>)
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <LORA_begin+0x8c>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28

	rfm95w.parent.init = (loraInit) &RFM95_init;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <LORA_begin+0x80>)
 8000c40:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <LORA_begin+0x90>)
 8000c42:	60da      	str	r2, [r3, #12]
	rfm95w.parent.transmit = (loraTransmit) &RFM95_transmit;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <LORA_begin+0x80>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	; (8000c9c <LORA_begin+0x94>)
 8000c48:	611a      	str	r2, [r3, #16]
	rfm95w.parent.receive = (loraReceive) &RFM95_receiveContinuous;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <LORA_begin+0x80>)
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <LORA_begin+0x98>)
 8000c4e:	615a      	str	r2, [r3, #20]
	rfm95w.parent.startReceiveIT =
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <LORA_begin+0x80>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <LORA_begin+0x9c>)
 8000c54:	619a      	str	r2, [r3, #24]
			(loraStartReceiveOnIRQ) &RFM95_startReceiveIT;
	rfm95w.parent.receiveIT = (loraReceiveOnIRQ) &RFM95_receiveIT;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LORA_begin+0x80>)
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <LORA_begin+0xa0>)
 8000c5a:	61da      	str	r2, [r3, #28]
	rfm95w.parent.getRSSI = (loraGetRSSI) &RFM95_getRSSI;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <LORA_begin+0x80>)
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <LORA_begin+0xa4>)
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24


	if (LORA_init(lora) == THT_OK) {
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <LORA_begin+0x7c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f003 faba 	bl	80041e0 <LORA_init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <LORA_begin+0x72>
		printf("LORA OK");
 8000c72:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <LORA_begin+0xa8>)
 8000c74:	f004 fab6 	bl	80051e4 <iprintf>
	} else {
		printf("LORA ERROR");
	}
}
 8000c78:	e002      	b.n	8000c80 <LORA_begin+0x78>
		printf("LORA ERROR");
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <LORA_begin+0xac>)
 8000c7c:	f004 fab2 	bl	80051e4 <iprintf>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000018c 	.word	0x2000018c
 8000c88:	2000013c 	.word	0x2000013c
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	48000400 	.word	0x48000400
 8000c94:	20000094 	.word	0x20000094
 8000c98:	08004ff7 	.word	0x08004ff7
 8000c9c:	08004939 	.word	0x08004939
 8000ca0:	08004c5f 	.word	0x08004c5f
 8000ca4:	08004a91 	.word	0x08004a91
 8000ca8:	08004b61 	.word	0x08004b61
 8000cac:	08004f59 	.word	0x08004f59
 8000cb0:	08006d58 	.word	0x08006d58
 8000cb4:	08006d60 	.word	0x08006d60

08000cb8 <CTL_CRC8XOR>:
 * value. It indicates the size of the array in terms of the number of elements it contains
 *
 * @return The function `CTL_CRC8XOR` returns a `uint8_t` value, which is the result of XORing all
 * elements in the input array.
 */
uint8_t CTL_CRC8XOR(const uint8_t *array, size_t size) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
	uint8_t value = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < size; i++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	e009      	b.n	8000ce0 <CTL_CRC8XOR+0x28>
		value ^= array[i];
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	4053      	eors	r3, r2
 8000cd8:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < size; i++) {
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d3f1      	bcc.n	8000ccc <CTL_CRC8XOR+0x14>
	}
	return value;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <loraHandle>:

void loraHandle() {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	enum {
		LORA_RESPONSE_SIZE = 4
	};
	uint8_t msgResLoRa[LORA_RESPONSE_SIZE] = { 0 };
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
	uint8_t messLora[4] = { 4,5,6,7 };
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <loraHandle+0x70>)
 8000d04:	603b      	str	r3, [r7, #0]
//
//	for (size_t i = 0; i < CFG_MASTER_ID_SIZE - 1; i++) {
//		master[i] = *(volatile uint8_t*) (CFG_EEPROM_MASTER_ID + i);
//	}

	messLora[0] = CTL_CRC8XOR((uint8_t*) id, strlen(id));
 8000d06:	4819      	ldr	r0, [pc, #100]	; (8000d6c <loraHandle+0x74>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <loraHandle+0x74>)
 8000d12:	f7ff ffd1 	bl	8000cb8 <CTL_CRC8XOR>
 8000d16:	4603      	mov	r3, r0
 8000d18:	703b      	strb	r3, [r7, #0]
	messLora[1] = CTL_CRC8XOR((uint8_t*) master, strlen(master));
 8000d1a:	4815      	ldr	r0, [pc, #84]	; (8000d70 <loraHandle+0x78>)
 8000d1c:	f7ff fa60 	bl	80001e0 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4619      	mov	r1, r3
 8000d24:	4812      	ldr	r0, [pc, #72]	; (8000d70 <loraHandle+0x78>)
 8000d26:	f7ff ffc7 	bl	8000cb8 <CTL_CRC8XOR>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	707b      	strb	r3, [r7, #1]
	messLora[2] = 0x01;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	70bb      	strb	r3, [r7, #2]
	messLora[3] = CTL_CRC8XOR(messLora, 3);
 8000d32:	463b      	mov	r3, r7
 8000d34:	2103      	movs	r1, #3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ffbe 	bl	8000cb8 <CTL_CRC8XOR>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	70fb      	strb	r3, [r7, #3]

//	LORA_startReceiveIT(lora);
	while(1){

		LORA_receiveIT(lora,msgResLoRa,4);
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <loraHandle+0x7c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	1d39      	adds	r1, r7, #4
 8000d46:	2204      	movs	r2, #4
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 fa77 	bl	800423c <LORA_receiveIT>
		LORA_transmit(lora, messLora, 4, 1000);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <loraHandle+0x7c>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	4639      	mov	r1, r7
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	2204      	movs	r2, #4
 8000d5a:	f003 fa53 	bl	8004204 <LORA_transmit>
		HAL_Delay(1000);
 8000d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d62:	f000 fb65 	bl	8001430 <HAL_Delay>
		LORA_receiveIT(lora,msgResLoRa,4);
 8000d66:	e7eb      	b.n	8000d40 <loraHandle+0x48>
 8000d68:	07060504 	.word	0x07060504
 8000d6c:	20000194 	.word	0x20000194
 8000d70:	200001a4 	.word	0x200001a4
 8000d74:	2000018c 	.word	0x2000018c

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 faf2 	bl	8001364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f80b 	bl	8000d9a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 f8a0 	bl	8000ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d88:	f000 f880 	bl	8000e8c <MX_DMA_Init>
  MX_SPI3_Init();
 8000d8c:	f000 f840 	bl	8000e10 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LORA_begin();
 8000d90:	f7ff ff3a 	bl	8000c08 <LORA_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loraHandle();
 8000d94:	f7ff ffb0 	bl	8000cf8 <loraHandle>
 8000d98:	e7fc      	b.n	8000d94 <main+0x1c>

08000d9a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b090      	sub	sp, #64	; 0x40
 8000d9e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da0:	f107 0318 	add.w	r3, r7, #24
 8000da4:	2228      	movs	r2, #40	; 0x28
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f004 fa70 	bl	800528e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 ff81 	bl	8001cd8 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000ddc:	f000 f8fc 	bl	8000fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 ffc1 	bl	8002d80 <HAL_RCC_ClockConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e04:	f000 f8e8 	bl	8000fd8 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3740      	adds	r7, #64	; 0x40
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_SPI3_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e70:	f002 f96c 	bl	800314c <HAL_SPI_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f000 f8ad 	bl	8000fd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000094 	.word	0x20000094
 8000e88:	40003c00 	.word	0x40003c00

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_DMA_Init+0x38>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2038      	movs	r0, #56	; 0x38
 8000eb0:	f000 fbbd 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000eb4:	2038      	movs	r0, #56	; 0x38
 8000eb6:	f000 fbd6 	bl	8001666 <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ee8:	6153      	str	r3, [r2, #20]
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f00:	6153      	str	r3, [r2, #20]
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6153      	str	r3, [r2, #20]
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_GPIO_Init+0xd4>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	210c      	movs	r1, #12
 8000f2a:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <MX_GPIO_Init+0xd8>)
 8000f2c:	f000 fea4 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 8000f30:	230c      	movs	r3, #12
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0xd8>)
 8000f48:	f000 fd0c 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8000f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	4619      	mov	r1, r3
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0xdc>)
 8000f64:	f000 fcfe 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO2_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin;
 8000f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO2_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <MX_GPIO_Init+0xdc>)
 8000f7e:	f000 fcf1 	bl	8001964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2028      	movs	r0, #40	; 0x28
 8000f88:	f000 fb51 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8c:	2028      	movs	r0, #40	; 0x28
 8000f8e:	f000 fb6a 	bl	8001666 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000800 	.word	0x48000800
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
	/* Wake up MCU from stop mode by any EXTI line */
	if (GPIO_Pin == rfm95w.dio1) {
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d102      	bne.n	8000fc2 <HAL_GPIO_EXTI_Callback+0x1a>
		/* Set flag to read LoRa message */
		irqLoRaFlag = 1;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000013c 	.word	0x2000013c
 8000fd4:	20000190 	.word	0x20000190

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <Error_Handler+0x8>
	...

08000fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <HAL_MspInit+0x44>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_MspInit+0x44>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6193      	str	r3, [r2, #24]
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_MspInit+0x44>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x44>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x44>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000

0800102c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <HAL_SPI_MspInit+0xd8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d156      	bne.n	80010fc <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 8001054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001058:	61d3      	str	r3, [r2, #28]
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 800106c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001070:	6153      	str	r3, [r2, #20]
 8001072:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_SPI_MspInit+0xdc>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800107e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001090:	2306      	movs	r3, #6
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <HAL_SPI_MspInit+0xe0>)
 800109c:	f000 fc62 	bl	8001964 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_SPI_MspInit+0xe8>)
 80010a4:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010be:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010d2:	f000 fae2 	bl	800169a <HAL_DMA_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80010dc:	f7ff ff7c 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010e4:	659a      	str	r2, [r3, #88]	; 0x58
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_SPI_MspInit+0xe4>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2033      	movs	r0, #51	; 0x33
 80010f2:	f000 fa9c 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80010f6:	2033      	movs	r0, #51	; 0x33
 80010f8:	f000 fab5 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40003c00 	.word	0x40003c00
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800
 8001110:	200000f8 	.word	0x200000f8
 8001114:	40020408 	.word	0x40020408

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800111c:	e7fe      	b.n	800111c <NMI_Handler+0x4>

0800111e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <HardFault_Handler+0x4>

08001124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <MemManage_Handler+0x4>

0800112a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <UsageFault_Handler+0x4>

08001136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001164:	f000 f944 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8001170:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001174:	f000 fd98 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <SPI3_IRQHandler+0x10>)
 8001182:	f002 fd5d 	bl	8003c40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000094 	.word	0x20000094

08001190 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA2_Channel1_IRQHandler+0x10>)
 8001196:	f000 fb05 	bl	80017a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000f8 	.word	0x200000f8

080011a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	e00a      	b.n	80011cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b6:	f3af 8000 	nop.w
 80011ba:	4601      	mov	r1, r0
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	60ba      	str	r2, [r7, #8]
 80011c2:	b2ca      	uxtb	r2, r1
 80011c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3301      	adds	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbf0      	blt.n	80011b6 <_read+0x12>
  }

  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e009      	b.n	8001204 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	60ba      	str	r2, [r7, #8]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	429a      	cmp	r2, r3
 800120a:	dbf1      	blt.n	80011f0 <_write+0x12>
  }
  return len;
 800120c:	687b      	ldr	r3, [r7, #4]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_close>:

int _close(int file)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123e:	605a      	str	r2, [r3, #4]
  return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_isatty>:

int _isatty(int file)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d207      	bcs.n	80012c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b0:	f004 f83c 	bl	800532c <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	220c      	movs	r2, #12
 80012b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	e009      	b.n	80012d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <_sbrk+0x64>)
 80012d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d2:	68fb      	ldr	r3, [r7, #12]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20010000 	.word	0x20010000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	200001b4 	.word	0x200001b4
 80012e8:	20000308 	.word	0x20000308

080012ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001348 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001314:	f7ff ffea 	bl	80012ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0a      	ldr	r4, [pc, #40]	; (800135c <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f003 fffb 	bl	8005338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001342:	f7ff fd19 	bl	8000d78 <main>

08001346 <LoopForever>:

LoopForever:
    b LoopForever
 8001346:	e7fe      	b.n	8001346 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001348:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800134c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001350:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001354:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 8001358:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800135c:	20000308 	.word	0x20000308

08001360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001360:	e7fe      	b.n	8001360 <ADC1_2_IRQHandler>
	...

08001364 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001368:	4b08      	ldr	r3, [pc, #32]	; (800138c <HAL_Init+0x28>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_Init+0x28>)
 800136e:	f043 0310 	orr.w	r3, r3, #16
 8001372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001374:	2003      	movs	r0, #3
 8001376:	f000 f94f 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137a:	200f      	movs	r0, #15
 800137c:	f000 f808 	bl	8001390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001380:	f7ff fe30 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40022000 	.word	0x40022000

08001390 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_InitTick+0x54>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x58>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f967 	bl	8001682 <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00e      	b.n	80013dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d80a      	bhi.n	80013da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f000 f92f 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4a06      	ldr	r2, [pc, #24]	; (80013ec <HAL_InitTick+0x5c>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_IncTick+0x20>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x24>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_IncTick+0x24>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000008 	.word	0x20000008
 8001414:	200001b8 	.word	0x200001b8

08001418 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;  
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_GetTick+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200001b8 	.word	0x200001b8

08001430 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001438:	f7ff ffee 	bl	8001418 <HAL_GetTick>
 800143c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	d005      	beq.n	8001456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <HAL_Delay+0x44>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4413      	add	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001456:	bf00      	nop
 8001458:	f7ff ffde 	bl	8001418 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	429a      	cmp	r2, r3
 8001466:	d8f7      	bhi.n	8001458 <HAL_Delay+0x28>
  {
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000008 	.word	0x20000008

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e037      	b.n	8001720 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8f2 	bl	80018ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}  
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800173a:	2b02      	cmp	r3, #2
 800173c:	d005      	beq.n	800174a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e027      	b.n	800179a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 020e 	bic.w	r2, r2, #14
 8001758:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	4798      	blx	r3
    } 
  }
  return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2204      	movs	r2, #4
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d024      	beq.n	8001816 <HAL_DMA_IRQHandler+0x72>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01f      	beq.n	8001816 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d107      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0204 	bic.w	r2, r2, #4
 80017f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	2104      	movs	r1, #4
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d06a      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001814:	e065      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	2202      	movs	r2, #2
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02c      	beq.n	8001880 <HAL_DMA_IRQHandler+0xdc>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d027      	beq.n	8001880 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10b      	bne.n	8001856 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 020a 	bic.w	r2, r2, #10
 800184c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	2102      	movs	r1, #2
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d035      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800187e:	e030      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	2208      	movs	r2, #8
 8001886:	409a      	lsls	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d028      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d023      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020e 	bic.w	r2, r2, #14
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b2:	2101      	movs	r1, #1
 80018b4:	fa01 f202 	lsl.w	r2, r1, r2
 80018b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
    }
  }
}  
 80018e0:	e7ff      	b.n	80018e2 <HAL_DMA_IRQHandler+0x13e>
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <DMA_CalcBaseAndBitshift+0x60>)
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d80f      	bhi.n	8001920 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <DMA_CalcBaseAndBitshift+0x64>)
 8001908:	4413      	add	r3, r2
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	009a      	lsls	r2, r3, #2
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <DMA_CalcBaseAndBitshift+0x6c>)
 800191c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800191e:	e00e      	b.n	800193e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <DMA_CalcBaseAndBitshift+0x70>)
 8001928:	4413      	add	r3, r2
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <DMA_CalcBaseAndBitshift+0x68>)
 800192c:	fba2 2303 	umull	r2, r3, r2, r3
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	009a      	lsls	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <DMA_CalcBaseAndBitshift+0x74>)
 800193c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40020407 	.word	0x40020407
 8001950:	bffdfff8 	.word	0xbffdfff8
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	40020000 	.word	0x40020000
 800195c:	bffdfbf8 	.word	0xbffdfbf8
 8001960:	40020400 	.word	0x40020400

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	e160      	b.n	8001c36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	4013      	ands	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8152 	beq.w	8001c30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d005      	beq.n	80019a4 <HAL_GPIO_Init+0x40>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d130      	bne.n	8001a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019da:	2201      	movs	r2, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 0201 	and.w	r2, r3, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d017      	beq.n	8001a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d123      	bne.n	8001a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	08da      	lsrs	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	691a      	ldr	r2, [r3, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	08da      	lsrs	r2, r3, #3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3208      	adds	r2, #8
 8001a90:	6939      	ldr	r1, [r7, #16]
 8001a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f003 0203 	and.w	r2, r3, #3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80ac 	beq.w	8001c30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad8:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a5d      	ldr	r2, [pc, #372]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001af0:	4a59      	ldr	r2, [pc, #356]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	220f      	movs	r2, #15
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b1a:	d025      	beq.n	8001b68 <HAL_GPIO_Init+0x204>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <HAL_GPIO_Init+0x2f8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d01f      	beq.n	8001b64 <HAL_GPIO_Init+0x200>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a4e      	ldr	r2, [pc, #312]	; (8001c60 <HAL_GPIO_Init+0x2fc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_GPIO_Init+0x1fc>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <HAL_GPIO_Init+0x300>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_GPIO_Init+0x1f8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_GPIO_Init+0x304>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1f4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a4b      	ldr	r2, [pc, #300]	; (8001c6c <HAL_GPIO_Init+0x308>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1f0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_GPIO_Init+0x30c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1ec>
 8001b4c:	2306      	movs	r3, #6
 8001b4e:	e00c      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b50:	2307      	movs	r3, #7
 8001b52:	e00a      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b54:	2305      	movs	r3, #5
 8001b56:	e008      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e004      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e002      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_GPIO_Init+0x206>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4093      	lsls	r3, r2
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7a:	4937      	ldr	r1, [pc, #220]	; (8001c58 <HAL_GPIO_Init+0x2f4>)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bac:	4a31      	ldr	r2, [pc, #196]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bd6:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_GPIO_Init+0x310>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f47f ae97 	bne.w	8001974 <HAL_GPIO_Init+0x10>
  }
}
 8001c46:	bf00      	nop
 8001c48:	bf00      	nop
 8001c4a:	371c      	adds	r7, #28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48001400 	.word	0x48001400
 8001c70:	48001800 	.word	0x48001800
 8001c74:	40010400 	.word	0x40010400

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f96e 	bl	8000fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f001 b83a 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 816f 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d14:	4bb5      	ldr	r3, [pc, #724]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d00c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d20:	4bb2      	ldr	r3, [pc, #712]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b08      	cmp	r3, #8
 8001d2a:	d15c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x10e>
 8001d2c:	4baf      	ldr	r3, [pc, #700]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d38:	d155      	bne.n	8001de6 <HAL_RCC_OscConfig+0x10e>
 8001d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d46:	fa93 f3a3 	rbit	r3, r3
 8001d4a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d4e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d52:	fab3 f383 	clz	r3, r3
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	095b      	lsrs	r3, r3, #5
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d102      	bne.n	8001d6c <HAL_RCC_OscConfig+0x94>
 8001d66:	4ba1      	ldr	r3, [pc, #644]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d84:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d88:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d94:	4b95      	ldr	r3, [pc, #596]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d9c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001da0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001dac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001db0:	fab2 f282 	clz	r2, r2
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	f042 0220 	orr.w	r2, r2, #32
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f002 021f 	and.w	r2, r2, #31
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8111 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x318>
 8001dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 8108 	bne.w	8001ff0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f000 bfc6 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12e>
 8001df8:	4b7c      	ldr	r3, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7b      	ldr	r2, [pc, #492]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e036      	b.n	8001e74 <HAL_RCC_OscConfig+0x19c>
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x158>
 8001e16:	4b75      	ldr	r3, [pc, #468]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a74      	ldr	r2, [pc, #464]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b72      	ldr	r3, [pc, #456]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a71      	ldr	r2, [pc, #452]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e021      	b.n	8001e74 <HAL_RCC_OscConfig+0x19c>
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x184>
 8001e42:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a66      	ldr	r2, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x19c>
 8001e5c:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a62      	ldr	r2, [pc, #392]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5f      	ldr	r2, [pc, #380]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d059      	beq.n	8001f38 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fac8 	bl	8001418 <HAL_GetTick>
 8001e88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fac3 	bl	8001418 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b64      	cmp	r3, #100	; 0x64
 8001e9c:	d902      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f000 bf67 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001eb8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1fe>
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e015      	b.n	8001f02 <HAL_RCC_OscConfig+0x22a>
 8001ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eda:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ede:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001ef2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f06:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f0a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f16:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0ab      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b6>
 8001f36:	e05c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fa6e 	bl	8001418 <HAL_GetTick>
 8001f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f42:	f7ff fa69 	bl	8001418 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d902      	bls.n	8001f58 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f000 bf0d 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8001f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001f6c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2b2>
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2de>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_RCC_OscConfig+0x314>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fba:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001fbe:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001fca:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ab      	bne.n	8001f42 <HAL_RCC_OscConfig+0x26a>
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_OscConfig+0x31a>
 8001fec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 817f 	beq.w	8002306 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002008:	4ba7      	ldr	r3, [pc, #668]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00c      	beq.n	800202e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002014:	4ba4      	ldr	r3, [pc, #656]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b08      	cmp	r3, #8
 800201e:	d173      	bne.n	8002108 <HAL_RCC_OscConfig+0x430>
 8002020:	4ba1      	ldr	r3, [pc, #644]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	d16c      	bne.n	8002108 <HAL_RCC_OscConfig+0x430>
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002040:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <HAL_RCC_OscConfig+0x386>
 8002058:	4b93      	ldr	r3, [pc, #588]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	e013      	b.n	8002086 <HAL_RCC_OscConfig+0x3ae>
 800205e:	2302      	movs	r3, #2
 8002060:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002076:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2202      	movs	r2, #2
 8002088:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800208c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002090:	fa92 f2a2 	rbit	r2, r2
 8002094:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002098:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800209c:	fab2 f282 	clz	r2, r2
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f042 0220 	orr.w	r2, r2, #32
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	f002 021f 	and.w	r2, r2, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f202 	lsl.w	r2, r1, r2
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCC_OscConfig+0x3f6>
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d002      	beq.n	80020ce <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f000 be52 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	21f8      	movs	r1, #248	; 0xf8
 80020e4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80020ec:	fa91 f1a1 	rbit	r1, r1
 80020f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80020f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80020f8:	fab1 f181 	clz	r1, r1
 80020fc:	b2c9      	uxtb	r1, r1
 80020fe:	408b      	lsls	r3, r1
 8002100:	4969      	ldr	r1, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e0fe      	b.n	8002306 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8088 	beq.w	800222a <HAL_RCC_OscConfig+0x552>
 800211a:	2301      	movs	r3, #1
 800211c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800212c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800213a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	461a      	mov	r2, r3
 8002142:	2301      	movs	r3, #1
 8002144:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f967 	bl	8001418 <HAL_GetTick>
 800214a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f962 	bl	8001418 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	f000 be06 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002178:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d102      	bne.n	8002196 <HAL_RCC_OscConfig+0x4be>
 8002190:	4b45      	ldr	r3, [pc, #276]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	e013      	b.n	80021be <HAL_RCC_OscConfig+0x4e6>
 8002196:	2302      	movs	r3, #2
 8002198:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021a8:	2302      	movs	r3, #2
 80021aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	2202      	movs	r2, #2
 80021c0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021c4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021c8:	fa92 f2a2 	rbit	r2, r2
 80021cc:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80021d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80021d4:	fab2 f282 	clz	r2, r2
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0af      	beq.n	8002150 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	21f8      	movs	r1, #248	; 0xf8
 8002206:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800220e:	fa91 f1a1 	rbit	r1, r1
 8002212:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002216:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800221a:	fab1 f181 	clz	r1, r1
 800221e:	b2c9      	uxtb	r1, r1
 8002220:	408b      	lsls	r3, r1
 8002222:	4921      	ldr	r1, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e06d      	b.n	8002306 <HAL_RCC_OscConfig+0x62e>
 800222a:	2301      	movs	r3, #1
 800222c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800223c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	2300      	movs	r3, #0
 8002254:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7ff f8df 	bl	8001418 <HAL_GetTick>
 800225a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff f8da 	bl	8001418 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d902      	bls.n	8002276 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	f000 bd7e 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002276:	2302      	movs	r3, #2
 8002278:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x5d4>
 80022a0:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <HAL_RCC_OscConfig+0x5d0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	e016      	b.n	80022d4 <HAL_RCC_OscConfig+0x5fc>
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	2302      	movs	r3, #2
 80022ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022d0:	4bbf      	ldr	r3, [pc, #764]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2202      	movs	r2, #2
 80022d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80022da:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80022de:	fa92 f2a2 	rbit	r2, r2
 80022e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80022e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f042 0220 	orr.w	r2, r2, #32
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	f002 021f 	and.w	r2, r2, #31
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ac      	bne.n	8002260 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 8113 	beq.w	8002542 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002320:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d07c      	beq.n	8002426 <HAL_RCC_OscConfig+0x74e>
 800232c:	2301      	movs	r3, #1
 800232e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800233e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	4ba2      	ldr	r3, [pc, #648]	; (80025d4 <HAL_RCC_OscConfig+0x8fc>)
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	461a      	mov	r2, r3
 8002352:	2301      	movs	r3, #1
 8002354:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002356:	f7ff f85f 	bl	8001418 <HAL_GetTick>
 800235a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002360:	f7ff f85a 	bl	8001418 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d902      	bls.n	8002376 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	f000 bcfe 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002380:	fa93 f2a3 	rbit	r2, r3
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002392:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80023d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4b7e      	ldr	r3, [pc, #504]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 80023d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023e2:	2102      	movs	r1, #2
 80023e4:	6019      	str	r1, [r3, #0]
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	fa93 f1a3 	rbit	r1, r3
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023fc:	6019      	str	r1, [r3, #0]
  return result;
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002412:	b2db      	uxtb	r3, r3
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2101      	movs	r1, #1
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d09d      	beq.n	8002360 <HAL_RCC_OscConfig+0x688>
 8002424:	e08d      	b.n	8002542 <HAL_RCC_OscConfig+0x86a>
 8002426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002452:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	4b5d      	ldr	r3, [pc, #372]	; (80025d4 <HAL_RCC_OscConfig+0x8fc>)
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	461a      	mov	r2, r3
 8002464:	2300      	movs	r3, #0
 8002466:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7fe ffd6 	bl	8001418 <HAL_GetTick>
 800246c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002472:	f7fe ffd1 	bl	8001418 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d902      	bls.n	8002488 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	f000 bc75 	b.w	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002490:	2202      	movs	r2, #2
 8002492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002498:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f2a3 	rbit	r2, r3
 80024a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024b4:	2202      	movs	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	fa93 f2a3 	rbit	r2, r3
 80024c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 80024f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002500:	2102      	movs	r1, #2
 8002502:	6019      	str	r1, [r3, #0]
 8002504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002508:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fa93 f1a3 	rbit	r1, r3
 8002512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002516:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800251a:	6019      	str	r1, [r3, #0]
  return result;
 800251c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002520:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d197      	bne.n	8002472 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 81a5 	beq.w	80028a2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d116      	bne.n	8002598 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	61d3      	str	r3, [r2, #28]
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_RCC_OscConfig+0x8f8>)
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800257e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002590:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCC_OscConfig+0x900>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d121      	bne.n	80025e8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <HAL_RCC_OscConfig+0x900>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0b      	ldr	r2, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x900>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b0:	f7fe ff32 	bl	8001418 <HAL_GetTick>
 80025b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	e010      	b.n	80025dc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe ff2d 	bl	8001418 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d908      	bls.n	80025dc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e3d1      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	10908120 	.word	0x10908120
 80025d8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025dc:	4b8d      	ldr	r3, [pc, #564]	; (8002814 <HAL_RCC_OscConfig+0xb3c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0e8      	beq.n	80025ba <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x92e>
 80025f8:	4b87      	ldr	r3, [pc, #540]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a86      	ldr	r2, [pc, #536]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e035      	b.n	8002672 <HAL_RCC_OscConfig+0x99a>
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x958>
 8002616:	4b80      	ldr	r3, [pc, #512]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a7f      	ldr	r2, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b7d      	ldr	r3, [pc, #500]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a7c      	ldr	r2, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	e020      	b.n	8002672 <HAL_RCC_OscConfig+0x99a>
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x982>
 8002640:	4b75      	ldr	r3, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a74      	ldr	r2, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b72      	ldr	r3, [pc, #456]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a71      	ldr	r2, [pc, #452]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x99a>
 800265a:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a6b      	ldr	r2, [pc, #428]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002676:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8081 	beq.w	8002786 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002684:	f7fe fec8 	bl	8001418 <HAL_GetTick>
 8002688:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00b      	b.n	80026a6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fec3 	bl	8001418 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e365      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 80026a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026aa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026ae:	2202      	movs	r2, #2
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026d2:	2202      	movs	r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	fa93 f2a3 	rbit	r2, r3
 80026e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026ec:	601a      	str	r2, [r3, #0]
  return result;
 80026ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80026f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d102      	bne.n	8002712 <HAL_RCC_OscConfig+0xa3a>
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	e013      	b.n	800273a <HAL_RCC_OscConfig+0xa62>
 8002712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002716:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800271a:	2202      	movs	r2, #2
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002722:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002742:	2102      	movs	r1, #2
 8002744:	6011      	str	r1, [r2, #0]
 8002746:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800274a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	fa92 f1a2 	rbit	r1, r2
 8002754:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002758:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800275c:	6011      	str	r1, [r2, #0]
  return result;
 800275e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002762:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d084      	beq.n	800268e <HAL_RCC_OscConfig+0x9b6>
 8002784:	e083      	b.n	800288e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7fe fe47 	bl	8001418 <HAL_GetTick>
 800278a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fe42 	bl	8001418 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e2e4      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 80027a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80027f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0xb44>
 800280e:	4b02      	ldr	r3, [pc, #8]	; (8002818 <HAL_RCC_OscConfig+0xb40>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	e017      	b.n	8002844 <HAL_RCC_OscConfig+0xb6c>
 8002814:	40007000 	.word	0x40007000
 8002818:	40021000 	.word	0x40021000
 800281c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002820:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002824:	2202      	movs	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800282c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	fa93 f2a3 	rbit	r2, r3
 8002836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800283a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	4bb3      	ldr	r3, [pc, #716]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002848:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800284c:	2102      	movs	r1, #2
 800284e:	6011      	str	r1, [r2, #0]
 8002850:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002854:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	fa92 f1a2 	rbit	r1, r2
 800285e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002862:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002866:	6011      	str	r1, [r2, #0]
  return result;
 8002868:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800286c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d180      	bne.n	8002790 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800288e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a9d      	ldr	r2, [pc, #628]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 825e 	beq.w	8002d70 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b4:	4b96      	ldr	r3, [pc, #600]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	f000 821f 	beq.w	8002d00 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 8170 	bne.w	8002bb4 <HAL_RCC_OscConfig+0xedc>
 80028d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	fa93 f2a3 	rbit	r2, r3
 80028f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028f4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028f8:	601a      	str	r2, [r3, #0]
  return result;
 80028fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002902:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800290e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	461a      	mov	r2, r3
 8002916:	2300      	movs	r3, #0
 8002918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fd7d 	bl	8001418 <HAL_GetTick>
 800291e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	e009      	b.n	8002938 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe fd78 	bl	8001418 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e21c      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800293c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002940:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800294a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	fa93 f2a3 	rbit	r2, r3
 8002954:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002958:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800295c:	601a      	str	r2, [r3, #0]
  return result;
 800295e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002962:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002966:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d102      	bne.n	8002982 <HAL_RCC_OscConfig+0xcaa>
 800297c:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e027      	b.n	80029d2 <HAL_RCC_OscConfig+0xcfa>
 8002982:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002986:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002994:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	fa93 f2a3 	rbit	r2, r3
 800299e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	fa93 f2a3 	rbit	r2, r3
 80029c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029d6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029da:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029de:	6011      	str	r1, [r2, #0]
 80029e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029e4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	fa92 f1a2 	rbit	r1, r2
 80029ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029f2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80029f6:	6011      	str	r1, [r2, #0]
  return result;
 80029f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80029fc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d182      	bne.n	8002924 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f023 020f 	bic.w	r2, r3, #15
 8002a26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	4937      	ldr	r1, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a19      	ldr	r1, [r3, #32]
 8002a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	492d      	ldr	r1, [pc, #180]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
 8002a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a64:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a72:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	fa93 f2a3 	rbit	r2, r3
 8002a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a80:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a84:	601a      	str	r2, [r3, #0]
  return result;
 8002a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a8e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fcb7 	bl	8001418 <HAL_GetTick>
 8002aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aae:	e009      	b.n	8002ac4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fcb2 	bl	8001418 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e156      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002acc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f2a3 	rbit	r2, r3
 8002ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ae8:	601a      	str	r2, [r3, #0]
  return result;
 8002aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aee:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002af2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0xe3c>
 8002b08:	4b01      	ldr	r3, [pc, #4]	; (8002b10 <HAL_RCC_OscConfig+0xe38>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	e02a      	b.n	8002b64 <HAL_RCC_OscConfig+0xe8c>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b4c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b5a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b86      	ldr	r3, [pc, #536]	; (8002d7c <HAL_RCC_OscConfig+0x10a4>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b70:	6011      	str	r1, [r2, #0]
 8002b72:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	fa92 f1a2 	rbit	r1, r2
 8002b80:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b84:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b88:	6011      	str	r1, [r2, #0]
  return result;
 8002b8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b8e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	fab2 f282 	clz	r2, r2
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	f042 0220 	orr.w	r2, r2, #32
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f002 021f 	and.w	r2, r2, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f43f af7f 	beq.w	8002ab0 <HAL_RCC_OscConfig+0xdd8>
 8002bb2:	e0dd      	b.n	8002d70 <HAL_RCC_OscConfig+0x1098>
 8002bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bb8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002bd8:	601a      	str	r2, [r3, #0]
  return result;
 8002bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bde:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002be2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fc0d 	bl	8001418 <HAL_GetTick>
 8002bfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c02:	e009      	b.n	8002c18 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c04:	f7fe fc08 	bl	8001418 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0ac      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
 8002c18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c1c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c3c:	601a      	str	r2, [r3, #0]
  return result;
 8002c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d102      	bne.n	8002c62 <HAL_RCC_OscConfig+0xf8a>
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_OscConfig+0x10a4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	e027      	b.n	8002cb2 <HAL_RCC_OscConfig+0xfda>
 8002c62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c66:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	fa93 f2a3 	rbit	r2, r3
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c8c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	fa93 f2a3 	rbit	r2, r3
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x10a4>)
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cb6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cbe:	6011      	str	r1, [r2, #0]
 8002cc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	fa92 f1a2 	rbit	r1, r2
 8002cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cd2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002cd6:	6011      	str	r1, [r2, #0]
  return result;
 8002cd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cdc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	f002 021f 	and.w	r2, r2, #31
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d182      	bne.n	8002c04 <HAL_RCC_OscConfig+0xf2c>
 8002cfe:	e037      	b.n	8002d70 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e02e      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <HAL_RCC_OscConfig+0x10a4>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002d1c:	4b17      	ldr	r3, [pc, #92]	; (8002d7c <HAL_RCC_OscConfig+0x10a4>)
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d24:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d28:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d117      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002d40:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b09e      	sub	sp, #120	; 0x78
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e162      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b90      	ldr	r3, [pc, #576]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b8d      	ldr	r3, [pc, #564]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	498b      	ldr	r1, [pc, #556]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e14a      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	497f      	ldr	r1, [pc, #508]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80dc 	beq.w	8002fac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d13c      	bne.n	8002e76 <HAL_RCC_ClockConfig+0xf6>
 8002dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d102      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xa6>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	e00f      	b.n	8002e46 <HAL_RCC_ClockConfig+0xc6>
 8002e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	667b      	str	r3, [r7, #100]	; 0x64
 8002e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e38:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e42:	4b67      	ldr	r3, [pc, #412]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4e:	fa92 f2a2 	rbit	r2, r2
 8002e52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e56:	fab2 f282 	clz	r2, r2
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	f042 0220 	orr.w	r2, r2, #32
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	f002 021f 	and.w	r2, r2, #31
 8002e66:	2101      	movs	r1, #1
 8002e68:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d17b      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e0f3      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d13c      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x178>
 8002e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x128>
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	e00f      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x148>
 8002ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
 8002ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	4b46      	ldr	r3, [pc, #280]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ecc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ed0:	fa92 f2a2 	rbit	r2, r2
 8002ed4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ed8:	fab2 f282 	clz	r2, r2
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f042 0220 	orr.w	r2, r2, #32
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	f002 021f 	and.w	r2, r2, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d13a      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b2      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	095b      	lsrs	r3, r3, #5
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x1a0>
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	e00d      	b.n	8002f3c <HAL_RCC_ClockConfig+0x1bc>
 8002f20:	2302      	movs	r3, #2
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	61ba      	str	r2, [r7, #24]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	617a      	str	r2, [r7, #20]
  return result;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e079      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f023 0203 	bic.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	491a      	ldr	r1, [pc, #104]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fa4c 	bl	8001418 <HAL_GetTick>
 8002f80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	e00a      	b.n	8002f9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f84:	f7fe fa48 	bl	8001418 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e061      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_ClockConfig+0x260>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 020c 	and.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d1eb      	bne.n	8002f84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d214      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 0207 	bic.w	r2, r3, #7
 8002fc2:	4906      	ldr	r1, [pc, #24]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_RCC_ClockConfig+0x25c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e040      	b.n	800305e <HAL_RCC_ClockConfig+0x2de>
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	491a      	ldr	r1, [pc, #104]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4912      	ldr	r1, [pc, #72]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003022:	f000 f829 	bl	8003078 <HAL_RCC_GetSysClockFreq>
 8003026:	4601      	mov	r1, r0
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_RCC_ClockConfig+0x2e8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003030:	22f0      	movs	r2, #240	; 0xf0
 8003032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	fa92 f2a2 	rbit	r2, r2
 800303a:	60fa      	str	r2, [r7, #12]
  return result;
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	fab2 f282 	clz	r2, r2
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	40d3      	lsrs	r3, r2
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <HAL_RCC_ClockConfig+0x2ec>)
 8003048:	5cd3      	ldrb	r3, [r2, r3]
 800304a:	fa21 f303 	lsr.w	r3, r1, r3
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_RCC_ClockConfig+0x2f0>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_ClockConfig+0x2f4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe f99a 	bl	8001390 <HAL_InitTick>
  
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3778      	adds	r7, #120	; 0x78
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	08006d6c 	.word	0x08006d6c
 8003070:	20000000 	.word	0x20000000
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	b08b      	sub	sp, #44	; 0x2c
 800307c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x30>
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x36>
 80030a6:	e03f      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a8:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc8>)
 80030aa:	623b      	str	r3, [r7, #32]
      break;
 80030ac:	e03f      	b.n	800312e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	607a      	str	r2, [r7, #4]
  return result;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	40d3      	lsrs	r3, r2
 80030cc:	4a1d      	ldr	r2, [pc, #116]	; (8003144 <HAL_RCC_GetSysClockFreq+0xcc>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	220f      	movs	r2, #15
 80030dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	60fa      	str	r2, [r7, #12]
  return result;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	40d3      	lsrs	r3, r2
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003100:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	fbb2 f2f3 	udiv	r2, r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
 8003110:	e007      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fbb2 f2f3 	udiv	r2, r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	623b      	str	r3, [r7, #32]
      break;
 8003126:	e002      	b.n	800312e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetSysClockFreq+0xc8>)
 800312a:	623b      	str	r3, [r7, #32]
      break;
 800312c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312e:	6a3b      	ldr	r3, [r7, #32]
}
 8003130:	4618      	mov	r0, r3
 8003132:	372c      	adds	r7, #44	; 0x2c
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40021000 	.word	0x40021000
 8003140:	007a1200 	.word	0x007a1200
 8003144:	08006d7c 	.word	0x08006d7c
 8003148:	08006d8c 	.word	0x08006d8c

0800314c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e09d      	b.n	800329a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316e:	d009      	beq.n	8003184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
 8003176:	e005      	b.n	8003184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd ff44 	bl	800102c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c4:	d902      	bls.n	80031cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	e002      	b.n	80031d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031da:	d007      	beq.n	80031ec <HAL_SPI_Init+0xa0>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e4:	d002      	beq.n	80031ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	ea42 0103 	orr.w	r1, r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	f003 0204 	and.w	r2, r3, #4
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003268:	ea42 0103 	orr.w	r1, r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	603b      	str	r3, [r7, #0]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_SPI_Transmit+0x22>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e15f      	b.n	8003584 <HAL_SPI_Transmit+0x2e2>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032cc:	f7fe f8a4 	bl	8001418 <HAL_GetTick>
 80032d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032d2:	88fb      	ldrh	r3, [r7, #6]
 80032d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032e6:	e148      	b.n	800357a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_SPI_Transmit+0x52>
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032f8:	e13f      	b.n	800357a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2203      	movs	r2, #3
 80032fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d10f      	bne.n	8003366 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800338c:	d94f      	bls.n	800342e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0xfa>
 8003396:	8afb      	ldrh	r3, [r7, #22]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d142      	bne.n	8003422 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c0:	e02f      	b.n	8003422 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d112      	bne.n	80033f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033f4:	e015      	b.n	8003422 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fe f80f 	bl	8001418 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Transmit+0x16c>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x172>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d106      	bne.n	8003422 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003420:	e0ab      	b.n	800357a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ca      	bne.n	80033c2 <HAL_SPI_Transmit+0x120>
 800342c:	e080      	b.n	8003530 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_SPI_Transmit+0x19a>
 8003436:	8afb      	ldrh	r3, [r7, #22]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d174      	bne.n	8003526 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d912      	bls.n	800346c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b02      	subs	r3, #2
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	; 0x3e
 800346a:	e05c      	b.n	8003526 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003492:	e048      	b.n	8003526 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d12b      	bne.n	80034fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d912      	bls.n	80034d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b02      	subs	r3, #2
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034d0:	e029      	b.n	8003526 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f8:	e015      	b.n	8003526 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034fa:	f7fd ff8d 	bl	8001418 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d803      	bhi.n	8003512 <HAL_SPI_Transmit+0x270>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003510:	d102      	bne.n	8003518 <HAL_SPI_Transmit+0x276>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d106      	bne.n	8003526 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003524:	e029      	b.n	800357a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1b1      	bne.n	8003494 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	6839      	ldr	r1, [r7, #0]
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fe0d 	bl	8004154 <SPI_EndRxTxTransaction>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e003      	b.n	800357a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003582:	7ffb      	ldrb	r3, [r7, #31]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3720      	adds	r7, #32
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d002      	beq.n	80035b2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
 80035ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035b0:	e11a      	b.n	80037e8 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ba:	d112      	bne.n	80035e2 <HAL_SPI_Receive+0x56>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10e      	bne.n	80035e2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2204      	movs	r2, #4
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	4613      	mov	r3, r2
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f90e 	bl	80037fa <HAL_SPI_TransmitReceive>
 80035de:	4603      	mov	r3, r0
 80035e0:	e107      	b.n	80037f2 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_SPI_Receive+0x64>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e100      	b.n	80037f2 <HAL_SPI_Receive+0x266>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f8:	f7fd ff0e 	bl	8001418 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_SPI_Receive+0x7e>
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800360e:	e0eb      	b.n	80037e8 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2204      	movs	r2, #4
 8003614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800365a:	d908      	bls.n	800366e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e007      	b.n	800367e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003686:	d10f      	bne.n	80036a8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d007      	beq.n	80036c6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036ce:	d86f      	bhi.n	80037b0 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036d0:	e034      	b.n	800373c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d117      	bne.n	8003710 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f103 020c 	add.w	r2, r3, #12
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800370e:	e015      	b.n	800373c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003710:	f7fd fe82 	bl	8001418 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d803      	bhi.n	8003728 <HAL_SPI_Receive+0x19c>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d102      	bne.n	800372e <HAL_SPI_Receive+0x1a2>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800373a:	e055      	b.n	80037e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1c4      	bne.n	80036d2 <HAL_SPI_Receive+0x146>
 8003748:	e038      	b.n	80037bc <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d115      	bne.n	8003784 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	b292      	uxth	r2, r2
 8003764:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	1c9a      	adds	r2, r3, #2
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003782:	e015      	b.n	80037b0 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003784:	f7fd fe48 	bl	8001418 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d803      	bhi.n	800379c <HAL_SPI_Receive+0x210>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d102      	bne.n	80037a2 <HAL_SPI_Receive+0x216>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80037ae:	e01b      	b.n	80037e8 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1c6      	bne.n	800374a <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	6839      	ldr	r1, [r7, #0]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 fc6f 	bl	80040a4 <SPI_EndRxTransaction>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
 80037de:	e003      	b.n	80037e8 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b08a      	sub	sp, #40	; 0x28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003808:	2301      	movs	r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x26>
 800381c:	2302      	movs	r3, #2
 800381e:	e20a      	b.n	8003c36 <HAL_SPI_TransmitReceive+0x43c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003828:	f7fd fdf6 	bl	8001418 <HAL_GetTick>
 800382c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003834:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003844:	7efb      	ldrb	r3, [r7, #27]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d00e      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x6e>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003850:	d106      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d102      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x66>
 800385a:	7efb      	ldrb	r3, [r7, #27]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d003      	beq.n	8003868 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003860:	2302      	movs	r3, #2
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003866:	e1e0      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_SPI_TransmitReceive+0x80>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_SPI_TransmitReceive+0x80>
 8003874:	887b      	ldrh	r3, [r7, #2]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003880:	e1d3      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b04      	cmp	r3, #4
 800388c:	d003      	beq.n	8003896 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2205      	movs	r2, #5
 8003892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	887a      	ldrh	r2, [r7, #2]
 80038a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d8:	d802      	bhi.n	80038e0 <HAL_SPI_TransmitReceive+0xe6>
 80038da:	8a3b      	ldrh	r3, [r7, #16]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d908      	bls.n	80038f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	e007      	b.n	8003902 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003900:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d007      	beq.n	8003920 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003928:	f240 8081 	bls.w	8003a2e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_SPI_TransmitReceive+0x140>
 8003934:	8a7b      	ldrh	r3, [r7, #18]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d16d      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	881a      	ldrh	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	1c9a      	adds	r2, r3, #2
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395e:	e05a      	b.n	8003a16 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d11b      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x1ac>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d016      	beq.n	80039a6 <HAL_SPI_TransmitReceive+0x1ac>
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b01      	cmp	r3, #1
 800397c:	d113      	bne.n	80039a6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	1c9a      	adds	r2, r3, #2
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d11c      	bne.n	80039ee <HAL_SPI_TransmitReceive+0x1f4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d016      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	b292      	uxth	r2, r2
 80039cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	1c9a      	adds	r2, r3, #2
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039ea:	2301      	movs	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ee:	f7fd fd13 	bl	8001418 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d80b      	bhi.n	8003a16 <HAL_SPI_TransmitReceive+0x21c>
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d007      	beq.n	8003a16 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003a14:	e109      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d19f      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x166>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d199      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x166>
 8003a2c:	e0e3      	b.n	8003bf6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_SPI_TransmitReceive+0x244>
 8003a36:	8a7b      	ldrh	r3, [r7, #18]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	f040 80cf 	bne.w	8003bdc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d912      	bls.n	8003a6e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b02      	subs	r3, #2
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a6c:	e0b6      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a94:	e0a2      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d134      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x314>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02f      	beq.n	8003b0e <HAL_SPI_TransmitReceive+0x314>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d12c      	bne.n	8003b0e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d912      	bls.n	8003ae4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b02      	subs	r3, #2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ae2:	e012      	b.n	8003b0a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d148      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x3b4>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d042      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d923      	bls.n	8003b7c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b02      	subs	r3, #2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d81f      	bhi.n	8003baa <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e016      	b.n	8003baa <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f103 020c 	add.w	r2, r3, #12
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bae:	f7fd fc33 	bl	8001418 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_TransmitReceive+0x3cc>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x3d2>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003bda:	e026      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f47f af57 	bne.w	8003a96 <HAL_SPI_TransmitReceive+0x29c>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f47f af50 	bne.w	8003a96 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 faaa 	bl	8004154 <SPI_EndRxTxTransaction>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c20:	e003      	b.n	8003c2a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	; 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
	...

08003c40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d004      	beq.n	8003c80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
    return;
 8003c7e:	e0ce      	b.n	8003e1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_SPI_IRQHandler+0x5e>
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
    return;
 8003c9c:	e0bf      	b.n	8003e1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10a      	bne.n	8003cbe <HAL_SPI_IRQHandler+0x7e>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80b0 	beq.w	8003e1e <HAL_SPI_IRQHandler+0x1de>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80aa 	beq.w	8003e1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d023      	beq.n	8003d1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d011      	beq.n	8003d04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e00b      	b.n	8003d1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	693b      	ldr	r3, [r7, #16]
        return;
 8003d1a:	e080      	b.n	8003e1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00c      	beq.n	8003d74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	f043 0208 	orr.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d04f      	beq.n	8003e1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d104      	bne.n	8003da8 <HAL_SPI_IRQHandler+0x168>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d034      	beq.n	8003e12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0203 	bic.w	r2, r2, #3
 8003db6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d011      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <HAL_SPI_IRQHandler+0x1e4>)
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fcab 	bl	8001728 <HAL_DMA_Abort_IT>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d016      	beq.n	8003e1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	4a0c      	ldr	r2, [pc, #48]	; (8003e24 <HAL_SPI_IRQHandler+0x1e4>)
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fd fc95 	bl	8001728 <HAL_DMA_Abort_IT>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003e10:	e003      	b.n	8003e1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f808 	bl	8003e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e18:	e000      	b.n	8003e1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8003e1a:	bf00      	nop
    return;
 8003e1c:	bf00      	nop
  }
}
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08003e3d 	.word	0x08003e3d

08003e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ffe5 	bl	8003e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e78:	f7fd face 	bl	8001418 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	4413      	add	r3, r2
 8003e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e88:	f7fd fac6 	bl	8001418 <HAL_GetTick>
 8003e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	015b      	lsls	r3, r3, #5
 8003e94:	0d1b      	lsrs	r3, r3, #20
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	fb02 f303 	mul.w	r3, r2, r3
 8003e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9e:	e054      	b.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d050      	beq.n	8003f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea8:	f7fd fab6 	bl	8001418 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d902      	bls.n	8003ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d13d      	bne.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed6:	d111      	bne.n	8003efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee0:	d004      	beq.n	8003eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eea:	d107      	bne.n	8003efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d10f      	bne.n	8003f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e017      	b.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4013      	ands	r3, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	bf0c      	ite	eq
 8003f5a:	2301      	moveq	r3, #1
 8003f5c:	2300      	movne	r3, #0
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d19b      	bne.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000000 	.word	0x20000000

08003f78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f8a:	f7fd fa45 	bl	8001418 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	4413      	add	r3, r2
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f9a:	f7fd fa3d 	bl	8001418 <HAL_GetTick>
 8003f9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00da      	lsls	r2, r3, #3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	0d1b      	lsrs	r3, r3, #20
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fc0:	e060      	b.n	8004084 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fc8:	d107      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d104      	bne.n	8003fda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d050      	beq.n	8004084 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fe2:	f7fd fa19 	bl	8001418 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d902      	bls.n	8003ff8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d13d      	bne.n	8004074 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004010:	d111      	bne.n	8004036 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	d004      	beq.n	8004026 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d107      	bne.n	8004036 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004034:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403e:	d10f      	bne.n	8004060 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e010      	b.n	8004096 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	3b01      	subs	r3, #1
 8004082:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	d196      	bne.n	8003fc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000000 	.word	0x20000000

080040a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040b8:	d111      	bne.n	80040de <SPI_EndRxTransaction+0x3a>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c2:	d004      	beq.n	80040ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040cc:	d107      	bne.n	80040de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040dc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff febd 	bl	8003e68 <SPI_WaitFlagStateUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e023      	b.n	800414c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800410c:	d11d      	bne.n	800414a <SPI_EndRxTransaction+0xa6>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004116:	d004      	beq.n	8004122 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004120:	d113      	bne.n	800414a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2200      	movs	r2, #0
 800412a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff ff22 	bl	8003f78 <SPI_WaitFifoStateUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d007      	beq.n	800414a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e000      	b.n	800414c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff ff03 	bl	8003f78 <SPI_WaitFifoStateUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d007      	beq.n	8004188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417c:	f043 0220 	orr.w	r2, r3, #32
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e027      	b.n	80041d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff fe68 	bl	8003e68 <SPI_WaitFlagStateUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e014      	b.n	80041d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7ff fedc 	bl	8003f78 <SPI_WaitFifoStateUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e000      	b.n	80041d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <LORA_init>:
#include "lora.h"

#include "../RFM/rfm.h"

THT_StatusTypeDef LORA_init(LORA_HandleTypeDef *const me)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <LORA_init+0x12>
	{
		return THT_ERROR;
 80041ee:	2302      	movs	r3, #2
 80041f0:	e004      	b.n	80041fc <LORA_init+0x1c>
	}
	return (*me->init)(me);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	4798      	blx	r3
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <LORA_transmit>:

THT_StatusTypeDef LORA_transmit(LORA_HandleTypeDef *const me, const uint8_t *pBuffer, uint16_t size, uint32_t timeout)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <LORA_transmit+0x1c>
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <LORA_transmit+0x20>
	{
		return THT_ERROR;
 8004220:	2302      	movs	r3, #2
 8004222:	e007      	b.n	8004234 <LORA_transmit+0x30>
	}

	return (*me->transmit)(me, pBuffer, size, timeout);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691c      	ldr	r4, [r3, #16]
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	47a0      	blx	r4
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bd90      	pop	{r4, r7, pc}

0800423c <LORA_receiveIT>:

	return (*me->startReceiveIT)(me);
}

THT_StatusTypeDef LORA_receiveIT(LORA_HandleTypeDef *const me, uint8_t *pBuffer, uint16_t size)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <LORA_receiveIT+0x1a>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <LORA_receiveIT+0x1e>
	{
		return THT_ERROR;
 8004256:	2302      	movs	r3, #2
 8004258:	e006      	b.n	8004268 <LORA_receiveIT+0x2c>
	}

	return (*me->receiveIT)(me, pBuffer, size);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	4798      	blx	r3
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <RFM95_setNSSPin>:
 * @brief Set NSS pin - this enable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004286:	2201      	movs	r2, #1
 8004288:	4619      	mov	r1, r3
 800428a:	f7fd fcf5 	bl	8001c78 <HAL_GPIO_WritePin>
 800428e:	e000      	b.n	8004292 <RFM95_setNSSPin+0x22>
		return;
 8004290:	bf00      	nop
}
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <RFM95_clearNSSPin>:
 * @brief Reset NSS pin - this disable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ae:	2200      	movs	r2, #0
 80042b0:	4619      	mov	r1, r3
 80042b2:	f7fd fce1 	bl	8001c78 <HAL_GPIO_WritePin>
 80042b6:	e000      	b.n	80042ba <RFM95_clearNSSPin+0x22>
		return;
 80042b8:	bf00      	nop
}
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <RFM95_writeRegister>:
 * @param data [in] The data of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
											 uint8_t address, const uint8_t data)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
 80042cc:	4613      	mov	r3, r2
 80042ce:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <RFM95_writeRegister+0x1a>
	{
		return THT_ERROR;
 80042d6:	2302      	movs	r3, #2
 80042d8:	e021      	b.n	800431e <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffdc 	bl	8004298 <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = {address | 0x80, data};
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	733b      	strb	r3, [r7, #12]
 80042ea:	78bb      	ldrb	r3, [r7, #2]
 80042ec:	737b      	strb	r3, [r7, #13]
	//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80042f2:	f107 010c 	add.w	r1, r7, #12
 80042f6:	2364      	movs	r3, #100	; 0x64
 80042f8:	2202      	movs	r2, #2
 80042fa:	f7fe ffd2 	bl	80032a2 <HAL_SPI_Transmit>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte.*/
	RFM95_setNSSPin(me);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ffb4 	bl	8004270 <RFM95_setNSSPin>

	if (res == HAL_OK)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <RFM95_writeRegister+0x52>
	{
		return THT_OK;
 800430e:	2301      	movs	r3, #1
 8004310:	e005      	b.n	800431e <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <RFM95_writeRegister+0x5c>
	{
		return THT_ERROR;
 8004318:	2302      	movs	r3, #2
 800431a:	e000      	b.n	800431e <RFM95_writeRegister+0x5e>
	}
	else
	{
		return THT_TIMEOUT;
 800431c:	2303      	movs	r3, #3
	}
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <RFM95_writeBurstRegister>:
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeBurstRegister(
	RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *pData,
	uint8_t size)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	461a      	mov	r2, r3
 8004332:	460b      	mov	r3, r1
 8004334:	72fb      	strb	r3, [r7, #11]
 8004336:	4613      	mov	r3, r2
 8004338:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <RFM95_writeBurstRegister+0x1e>
	{
		return THT_ERROR;
 8004340:	2302      	movs	r3, #2
 8004342:	e041      	b.n	80043c8 <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 8004348:	7abb      	ldrb	r3, [r7, #10]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d109      	bne.n	8004362 <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 800434e:	7af9      	ldrb	r1, [r7, #11]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ffb2 	bl	80042c0 <RFM95_writeRegister>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]
 8004360:	e031      	b.n	80043c6 <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ff98 	bl	8004298 <RFM95_clearNSSPin>

		address |= 0x80;
 8004368:	7afb      	ldrb	r3, [r7, #11]
 800436a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800436e:	b2db      	uxtb	r3, r3
 8004370:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004376:	f107 010b 	add.w	r1, r7, #11
 800437a:	2364      	movs	r3, #100	; 0x64
 800437c:	2201      	movs	r2, #1
 800437e:	f7fe ff90 	bl	80032a2 <HAL_SPI_Transmit>
 8004382:	4603      	mov	r3, r0
 8004384:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 8004386:	7dfb      	ldrb	r3, [r7, #23]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d119      	bne.n	80043c0 <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	e010      	b.n	80043b4 <RFM95_writeBurstRegister+0x8e>
			{
				//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100); // pdata++
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	1c4b      	adds	r3, r1, #1
 800439a:	607b      	str	r3, [r7, #4]
 800439c:	2364      	movs	r3, #100	; 0x64
 800439e:	2201      	movs	r2, #1
 80043a0:	f7fe ff7f 	bl	80032a2 <HAL_SPI_Transmit>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3301      	adds	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	7abb      	ldrb	r3, [r7, #10]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3ea      	bcc.n	8004392 <RFM95_writeBurstRegister+0x6c>
 80043bc:	e000      	b.n	80043c0 <RFM95_writeBurstRegister+0x9a>
				{
					break;
 80043be:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff ff55 	bl	8004270 <RFM95_setNSSPin>
	}

	return res;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <RFM95_readRegister>:
 * @param address [in] Register address
 * @param value [out] A pointer to a variable store the value of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *value)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	460b      	mov	r3, r1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <RFM95_readRegister+0x18>
	{
		return THT_ERROR;
 80043e4:	2302      	movs	r3, #2
 80043e6:	e025      	b.n	8004434 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff ff55 	bl	8004298 <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80043f6:	f107 010b 	add.w	r1, r7, #11
 80043fa:	2364      	movs	r3, #100	; 0x64
 80043fc:	2201      	movs	r2, #1
 80043fe:	f7fe ff50 	bl	80032a2 <HAL_SPI_Transmit>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800440a:	2364      	movs	r3, #100	; 0x64
 800440c:	2201      	movs	r2, #1
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	f7ff f8bc 	bl	800358c <HAL_SPI_Receive>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7ff ff29 	bl	8004270 <RFM95_setNSSPin>
	//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <RFM95_readRegister+0x58>
	{
		return THT_OK;
 8004424:	2301      	movs	r3, #1
 8004426:	e005      	b.n	8004434 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <RFM95_readRegister+0x62>
	{
		return THT_ERROR;
 800442e:	2302      	movs	r3, #2
 8004430:	e000      	b.n	8004434 <RFM95_readRegister+0x64>
	}
	else
	{
		return THT_TIMEOUT;
 8004432:	2303      	movs	r3, #3
	}
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <RFM95_setHeaderMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param headerMode [in] Header mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me, const uint8_t headerMode)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <RFM95_setHeaderMode+0x16>
	{
		return THT_ERROR;
 800444e:	2302      	movs	r3, #2
 8004450:	e024      	b.n	800449c <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 800445a:	f107 030d 	add.w	r3, r7, #13
 800445e:	461a      	mov	r2, r3
 8004460:	211d      	movs	r1, #29
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff ffb4 	bl	80043d0 <RFM95_readRegister>
 8004468:	4603      	mov	r3, r0
 800446a:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800446c:	7bbb      	ldrb	r3, [r7, #14]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <RFM95_setHeaderMode+0x3a>
	{
		return res;
 8004472:	7bbb      	ldrb	r3, [r7, #14]
 8004474:	e012      	b.n	800449c <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t)(headerMode | (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 8004476:	7b7b      	ldrb	r3, [r7, #13]
 8004478:	b25b      	sxtb	r3, r3
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	b25a      	sxtb	r2, r3
 8004480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004484:	4313      	orrs	r3, r2
 8004486:	b25b      	sxtb	r3, r3
 8004488:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	461a      	mov	r2, r3
 800448e:	211d      	movs	r1, #29
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff15 	bl	80042c0 <RFM95_writeRegister>
 8004496:	4603      	mov	r3, r0
 8004498:	73bb      	strb	r3, [r7, #14]

	return res;
 800449a:	7bbb      	ldrb	r3, [r7, #14]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <RFM95_setSpreadingFactor>:
	@arg RFLR_MODEMCONFIG2_SF_11
	@arg RFLR_MODEMCONFIG2_SF_12                      // Phải cấu hình thêm LowDataRate
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me, const uint8_t SF)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <RFM95_setSpreadingFactor+0x16>
	{
		return THT_ERROR;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0ac      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	me->parent.SF = SF >> 4u;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80044cc:	f107 030d 	add.w	r3, r7, #13
 80044d0:	461a      	mov	r2, r3
 80044d2:	211e      	movs	r1, #30
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff7b 	bl	80043d0 <RFM95_readRegister>
 80044da:	4603      	mov	r3, r0
 80044dc:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d001      	beq.n	80044e8 <RFM95_setSpreadingFactor+0x44>
	{
		return THT_ERROR;
 80044e4:	2302      	movs	r3, #2
 80044e6:	e095      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b60      	cmp	r3, #96	; 0x60
 80044ec:	d144      	bne.n	8004578 <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t)(RFLR_MODEMCONFIG2_SF_6 | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80044ee:	7b7b      	ldrb	r3, [r7, #13]
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	461a      	mov	r2, r3
 8004504:	211e      	movs	r1, #30
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff feda 	bl	80042c0 <RFM95_writeRegister>
 800450c:	4603      	mov	r3, r0
 800450e:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d001      	beq.n	800451a <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	e07c      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 800451a:	2101      	movs	r1, #1
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff8d 	bl	800443c <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8004522:	f107 030d 	add.w	r3, r7, #13
 8004526:	461a      	mov	r2, r3
 8004528:	2131      	movs	r1, #49	; 0x31
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ff50 	bl	80043d0 <RFM95_readRegister>
 8004530:	4603      	mov	r3, r0
 8004532:	73bb      	strb	r3, [r7, #14]
		if (res != THT_OK)
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <RFM95_setSpreadingFactor+0x9a>
		{
			return THT_ERROR;
 800453a:	2302      	movs	r3, #2
 800453c:	e06a      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
		}

		wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF6 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 800453e:	7b7b      	ldrb	r3, [r7, #13]
 8004540:	b25b      	sxtb	r3, r3
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	b25b      	sxtb	r3, r3
 8004548:	f043 0305 	orr.w	r3, r3, #5
 800454c:	b25b      	sxtb	r3, r3
 800454e:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	461a      	mov	r2, r3
 8004554:	2131      	movs	r1, #49	; 0x31
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff feb2 	bl	80042c0 <RFM95_writeRegister>
 800455c:	4603      	mov	r3, r0
 800455e:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 8004560:	7bbb      	ldrb	r3, [r7, #14]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	e054      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF6);
 800456a:	220c      	movs	r2, #12
 800456c:	2137      	movs	r1, #55	; 0x37
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fea6 	bl	80042c0 <RFM95_writeRegister>
 8004574:	4603      	mov	r3, r0
 8004576:	e04d      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8004578:	f107 030d 	add.w	r3, r7, #13
 800457c:	461a      	mov	r2, r3
 800457e:	2131      	movs	r1, #49	; 0x31
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff25 	bl	80043d0 <RFM95_readRegister>
 8004586:	4603      	mov	r3, r0
 8004588:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <RFM95_setSpreadingFactor+0xf0>
	{
		return THT_ERROR;
 8004590:	2302      	movs	r3, #2
 8004592:	e03f      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8004594:	7b7b      	ldrb	r3, [r7, #13]
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f023 0307 	bic.w	r3, r3, #7
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f043 0303 	orr.w	r3, r3, #3
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	461a      	mov	r2, r3
 80045aa:	2131      	movs	r1, #49	; 0x31
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fe87 	bl	80042c0 <RFM95_writeRegister>
 80045b2:	4603      	mov	r3, r0
 80045b4:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80045b6:	7bbb      	ldrb	r3, [r7, #14]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d001      	beq.n	80045c0 <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 80045bc:	7bbb      	ldrb	r3, [r7, #14]
 80045be:	e029      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	/* 2. Write register address 0x37 to value 0x0A */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF7_TO_SF12);
 80045c0:	220a      	movs	r2, #10
 80045c2:	2137      	movs	r1, #55	; 0x37
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fe7b 	bl	80042c0 <RFM95_writeRegister>
 80045ca:	4603      	mov	r3, r0
 80045cc:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80045ce:	7bbb      	ldrb	r3, [r7, #14]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 80045d4:	7bbb      	ldrb	r3, [r7, #14]
 80045d6:	e01d      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */

	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t)(SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80045d8:	7b7b      	ldrb	r3, [r7, #13]
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	b25a      	sxtb	r2, r3
 80045e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	73fb      	strb	r3, [r7, #15]
	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	//	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	461a      	mov	r2, r3
 80045f0:	211e      	movs	r1, #30
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fe64 	bl	80042c0 <RFM95_writeRegister>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73bb      	strb	r3, [r7, #14]

	if (SF == RFLR_MODEMCONFIG2_SF_12 || SF == RFLR_MODEMCONFIG2_SF_11)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004600:	d002      	beq.n	8004608 <RFM95_setSpreadingFactor+0x164>
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	2bb0      	cmp	r3, #176	; 0xb0
 8004606:	d104      	bne.n	8004612 <RFM95_setSpreadingFactor+0x16e>
	{
		return RFM95_lowDataRateOptimize(me);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f871 	bl	80046f0 <RFM95_lowDataRateOptimize>
 800460e:	4603      	mov	r3, r0
 8004610:	e000      	b.n	8004614 <RFM95_setSpreadingFactor+0x170>
	}

	return res;
 8004612:	7bbb      	ldrb	r3, [r7, #14]
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <RFM95_setBandwidth>:
	@arg RFLR_MODEMCONFIG1_BW_250_KHZ 0x80
	@arg RFLR_MODEMCONFIG1_BW_500_KHZ 0x90
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <RFM95_setBandwidth+0x16>
	{
		return THT_ERROR;
 800462e:	2302      	movs	r3, #2
 8004630:	e027      	b.n	8004682 <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	b2da      	uxtb	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 8004644:	f107 030d 	add.w	r3, r7, #13
 8004648:	461a      	mov	r2, r3
 800464a:	211d      	movs	r1, #29
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff febf 	bl	80043d0 <RFM95_readRegister>
 8004652:	4603      	mov	r3, r0
 8004654:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8004656:	7bbb      	ldrb	r3, [r7, #14]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <RFM95_setBandwidth+0x44>
	{
		return THT_ERROR;
 800465c:	2302      	movs	r3, #2
 800465e:	e010      	b.n	8004682 <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t)(BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 8004660:	7b7b      	ldrb	r3, [r7, #13]
 8004662:	b25b      	sxtb	r3, r3
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b25a      	sxtb	r2, r3
 800466a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466e:	4313      	orrs	r3, r2
 8004670:	b25b      	sxtb	r3, r3
 8004672:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	461a      	mov	r2, r3
 8004678:	211d      	movs	r1, #29
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe20 	bl	80042c0 <RFM95_writeRegister>
 8004680:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <RFM95_setCRCMode>:
 *  @arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 * 	@arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setCRCMode(RFM95_HandleTypeDef *const me, uint8_t CRCMode)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	460b      	mov	r3, r1
 8004694:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <RFM95_setCRCMode+0x16>
	{
		return THT_ERROR;
 800469c:	2302      	movs	r3, #2
 800469e:	e022      	b.n	80046e6 <RFM95_setCRCMode+0x5c>
	}

	uint8_t rByte = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80046a8:	f107 030d 	add.w	r3, r7, #13
 80046ac:	461a      	mov	r2, r3
 80046ae:	211e      	movs	r1, #30
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fe8d 	bl	80043d0 <RFM95_readRegister>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d001      	beq.n	80046c4 <RFM95_setCRCMode+0x3a>
	{
		return THT_ERROR;
 80046c0:	2302      	movs	r3, #2
 80046c2:	e010      	b.n	80046e6 <RFM95_setCRCMode+0x5c>
	}

	wByte = (uint8_t)(CRCMode | (rByte & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK));
 80046c4:	7b7b      	ldrb	r3, [r7, #13]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	f023 0304 	bic.w	r3, r3, #4
 80046cc:	b25a      	sxtb	r2, r3
 80046ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b25b      	sxtb	r3, r3
 80046d6:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	461a      	mov	r2, r3
 80046dc:	211e      	movs	r1, #30
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fdee 	bl	80042c0 <RFM95_writeRegister>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <RFM95_lowDataRateOptimize>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_lowDataRateOptimize(RFM95_HandleTypeDef *const me)
{
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <RFM95_lowDataRateOptimize+0x12>
	{
		return THT_ERROR;
 80046fe:	2302      	movs	r3, #2
 8004700:	e076      	b.n	80047f0 <RFM95_lowDataRateOptimize+0x100>
	}
	uint32_t bandwidth = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
	switch (me->parent.BW)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	795b      	ldrb	r3, [r3, #5]
 800470a:	2b09      	cmp	r3, #9
 800470c:	d00c      	beq.n	8004728 <RFM95_lowDataRateOptimize+0x38>
 800470e:	2b09      	cmp	r3, #9
 8004710:	dc0d      	bgt.n	800472e <RFM95_lowDataRateOptimize+0x3e>
 8004712:	2b07      	cmp	r3, #7
 8004714:	d002      	beq.n	800471c <RFM95_lowDataRateOptimize+0x2c>
 8004716:	2b08      	cmp	r3, #8
 8004718:	d003      	beq.n	8004722 <RFM95_lowDataRateOptimize+0x32>
		break;
	case 9:
		bandwidth = 500000;
		break;
	default:
		break;
 800471a:	e008      	b.n	800472e <RFM95_lowDataRateOptimize+0x3e>
		bandwidth = 125000;
 800471c:	4b38      	ldr	r3, [pc, #224]	; (8004800 <RFM95_lowDataRateOptimize+0x110>)
 800471e:	617b      	str	r3, [r7, #20]
		break;
 8004720:	e006      	b.n	8004730 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 250000;
 8004722:	4b38      	ldr	r3, [pc, #224]	; (8004804 <RFM95_lowDataRateOptimize+0x114>)
 8004724:	617b      	str	r3, [r7, #20]
		break;
 8004726:	e003      	b.n	8004730 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 500000;
 8004728:	4b37      	ldr	r3, [pc, #220]	; (8004808 <RFM95_lowDataRateOptimize+0x118>)
 800472a:	617b      	str	r3, [r7, #20]
		break;
 800472c:	e000      	b.n	8004730 <RFM95_lowDataRateOptimize+0x40>
		break;
 800472e:	bf00      	nop
	}

	float Tsymbol = 1000.0 * pow(2, me->parent.SF) / bandwidth;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb feed 	bl	8000514 <__aeabi_ui2d>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	ec43 2b11 	vmov	d1, r2, r3
 8004742:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 80047f8 <RFM95_lowDataRateOptimize+0x108>
 8004746:	f001 fbc3 	bl	8005ed0 <pow>
 800474a:	ec51 0b10 	vmov	r0, r1, d0
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <RFM95_lowDataRateOptimize+0x11c>)
 8004754:	f7fb ff58 	bl	8000608 <__aeabi_dmul>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	6978      	ldr	r0, [r7, #20]
 8004762:	f7fb fed7 	bl	8000514 <__aeabi_ui2d>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fc f875 	bl	800085c <__aeabi_ddiv>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	f7fc f9f5 	bl	8000b68 <__aeabi_d2f>
 800477e:	4603      	mov	r3, r0
 8004780:	60fb      	str	r3, [r7, #12]
	uint8_t isEnableLDO = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	74fb      	strb	r3, [r7, #19]

	if (Tsymbol > 16.0)
 8004786:	edd7 7a03 	vldr	s15, [r7, #12]
 800478a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800478e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004796:	dd02      	ble.n	800479e <RFM95_lowDataRateOptimize+0xae>
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON;
 8004798:	2308      	movs	r3, #8
 800479a:	74fb      	strb	r3, [r7, #19]
 800479c:	e001      	b.n	80047a2 <RFM95_lowDataRateOptimize+0xb2>
	}
	else
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_OFF;
 800479e:	2300      	movs	r3, #0
 80047a0:	74fb      	strb	r3, [r7, #19]
	}

	uint8_t rByte = 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	727b      	strb	r3, [r7, #9]
	uint8_t wByte = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	72fb      	strb	r3, [r7, #11]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
 80047aa:	f107 0309 	add.w	r3, r7, #9
 80047ae:	461a      	mov	r2, r3
 80047b0:	2126      	movs	r1, #38	; 0x26
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fe0c 	bl	80043d0 <RFM95_readRegister>
 80047b8:	4603      	mov	r3, r0
 80047ba:	72bb      	strb	r3, [r7, #10]

	if (res != THT_OK)
 80047bc:	7abb      	ldrb	r3, [r7, #10]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d001      	beq.n	80047c6 <RFM95_lowDataRateOptimize+0xd6>
	{
		return THT_ERROR;
 80047c2:	2302      	movs	r3, #2
 80047c4:	e014      	b.n	80047f0 <RFM95_lowDataRateOptimize+0x100>
	}

	wByte = (uint8_t)(isEnableLDO | (rByte & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK));
 80047c6:	7a7b      	ldrb	r3, [r7, #9]
 80047c8:	b25b      	sxtb	r3, r3
 80047ca:	f023 0308 	bic.w	r3, r3, #8
 80047ce:	b25a      	sxtb	r2, r3
 80047d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b25b      	sxtb	r3, r3
 80047d8:	72fb      	strb	r3, [r7, #11]
	wByte = (uint8_t)(RFLR_MODEMCONFIG3_AGCAUTO_ON | wByte); // turn on AGC
 80047da:	7afb      	ldrb	r3, [r7, #11]
 80047dc:	f043 0304 	orr.w	r3, r3, #4
 80047e0:	72fb      	strb	r3, [r7, #11]
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	461a      	mov	r2, r3
 80047e6:	2126      	movs	r1, #38	; 0x26
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fd69 	bl	80042c0 <RFM95_writeRegister>
 80047ee:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bdb0      	pop	{r4, r5, r7, pc}
 80047f8:	00000000 	.word	0x00000000
 80047fc:	40000000 	.word	0x40000000
 8004800:	0001e848 	.word	0x0001e848
 8004804:	0003d090 	.word	0x0003d090
 8004808:	0007a120 	.word	0x0007a120
 800480c:	408f4000 	.word	0x408f4000

08004810 <RFM95_setLNA>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8004820:	f107 030d 	add.w	r3, r7, #13
 8004824:	461a      	mov	r2, r3
 8004826:	210c      	movs	r1, #12
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fdd1 	bl	80043d0 <RFM95_readRegister>
 800482e:	4603      	mov	r3, r0
 8004830:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <RFM95_setLNA+0x2c>
	{
		return THT_ERROR;
 8004838:	2302      	movs	r3, #2
 800483a:	e00c      	b.n	8004856 <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t)(RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 800483c:	7b7b      	ldrb	r3, [r7, #13]
 800483e:	b25b      	sxtb	r3, r3
 8004840:	f043 0303 	orr.w	r3, r3, #3
 8004844:	b25b      	sxtb	r3, r3
 8004846:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	461a      	mov	r2, r3
 800484c:	210c      	movs	r1, #12
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fd36 	bl	80042c0 <RFM95_writeRegister>
 8004854:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_LNA, wByte);
	//	return RFM95_readRegister(me, REG_LR_LNA, &rByte);
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <RFM95_setMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mode [in] Mode is combine of LORA, SLEEP, STANDBY, SYNTHESIZERTX, TRANSMITTER, RECEIVER, SYNTHESIZERRX
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, const uint8_t mode)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <RFM95_setMode+0x16>
	{
		return THT_ERROR;
 8004870:	2302      	movs	r3, #2
 8004872:	e022      	b.n	80048ba <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 800487c:	f107 030d 	add.w	r3, r7, #13
 8004880:	461a      	mov	r2, r3
 8004882:	2101      	movs	r1, #1
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fda3 	bl	80043d0 <RFM95_readRegister>
 800488a:	4603      	mov	r3, r0
 800488c:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800488e:	7bbb      	ldrb	r3, [r7, #14]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d001      	beq.n	8004898 <RFM95_setMode+0x3a>
	{
		return THT_ERROR;
 8004894:	2302      	movs	r3, #2
 8004896:	e010      	b.n	80048ba <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t)(mode | (rByte & 0x70));
 8004898:	7b7b      	ldrb	r3, [r7, #13]
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048a0:	b25a      	sxtb	r2, r3
 80048a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	461a      	mov	r2, r3
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff fd04 	bl	80042c0 <RFM95_writeRegister>
 80048b8:	4603      	mov	r3, r0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <RFM95_setFrequency>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param frequency frequency value, ex: 923
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me, uint32_t frequency)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d101      	bne.n	80048d6 <RFM95_setFrequency+0x14>
	{
		return THT_ERROR;
 80048d2:	2302      	movs	r3, #2
 80048d4:	e02c      	b.n	8004930 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	6008      	str	r0, [r1, #0]
	uint64_t frf = (uint64_t)(frequency << 19u) / 32;
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	04c9      	lsls	r1, r1, #19
 80048e0:	0949      	lsrs	r1, r1, #5
 80048e2:	2000      	movs	r0, #0
 80048e4:	460a      	mov	r2, r1
 80048e6:	4603      	mov	r3, r0
 80048e8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 80048ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	0c02      	lsrs	r2, r0, #16
 80048fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048fe:	0c0b      	lsrs	r3, r1, #16
 8004900:	b2d3      	uxtb	r3, r2
 8004902:	733b      	strb	r3, [r7, #12]
 8004904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	0a02      	lsrs	r2, r0, #8
 8004912:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004916:	0a0b      	lsrs	r3, r1, #8
 8004918:	b2d3      	uxtb	r3, r2
 800491a:	737b      	strb	r3, [r7, #13]
					   (uint8_t)(frf >> 0)};
 800491c:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 800491e:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8004920:	f107 020c 	add.w	r2, r7, #12
 8004924:	2303      	movs	r3, #3
 8004926:	2106      	movs	r1, #6
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff fcfc 	bl	8004326 <RFM95_writeBurstRegister>
 800492e:	4603      	mov	r3, r0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <RFM95_transmit>:
 * @param size [in] The size of buffer
 * @param timeout [in] The timeout to terminate transmit
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData, uint8_t size, uint32_t timeout)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <RFM95_transmit+0x1c>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <RFM95_transmit+0x20>
	{
		return THT_ERROR;
 8004954:	2302      	movs	r3, #2
 8004956:	e097      	b.n	8004a88 <RFM95_transmit+0x150>
	}

	uint8_t rByte = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	74bb      	strb	r3, [r7, #18]

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8004964:	f107 0312 	add.w	r3, r7, #18
 8004968:	461a      	mov	r2, r3
 800496a:	2101      	movs	r1, #1
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fd2f 	bl	80043d0 <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8004972:	7cbb      	ldrb	r3, [r7, #18]
 8004974:	b25b      	sxtb	r3, r3
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	b25b      	sxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b25b      	sxtb	r3, r3
 8004982:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8004984:	7efb      	ldrb	r3, [r7, #27]
 8004986:	461a      	mov	r2, r3
 8004988:	2101      	movs	r1, #1
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff fc98 	bl	80042c0 <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	791b      	ldrb	r3, [r3, #4]
 8004994:	2b06      	cmp	r3, #6
 8004996:	d103      	bne.n	80049a0 <RFM95_transmit+0x68>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8004998:	2101      	movs	r1, #1
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff fd4e 	bl	800443c <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 80049a0:	f107 0313 	add.w	r3, r7, #19
 80049a4:	461a      	mov	r2, r3
 80049a6:	210e      	movs	r1, #14
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fd11 	bl	80043d0 <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	461a      	mov	r2, r3
 80049b2:	210d      	movs	r1, #13
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fc83 	bl	80042c0 <RFM95_writeRegister>

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	461a      	mov	r2, r3
 80049be:	2122      	movs	r1, #34	; 0x22
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fc7d 	bl	80042c0 <RFM95_writeRegister>
	uint8_t temp = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 80049ca:	f107 0311 	add.w	r3, r7, #17
 80049ce:	461a      	mov	r2, r3
 80049d0:	2122      	movs	r1, #34	; 0x22
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff fcfc 	bl	80043d0 <RFM95_readRegister>

	(void)temp;

	for (size_t i = 0; i < size; i++)
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e00b      	b.n	80049f6 <RFM95_transmit+0xbe>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	60ba      	str	r2, [r7, #8]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	2100      	movs	r1, #0
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff fc68 	bl	80042c0 <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3ef      	bcc.n	80049de <RFM95_transmit+0xa6>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 80049fe:	2383      	movs	r3, #131	; 0x83
 8004a00:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8004a02:	7efb      	ldrb	r3, [r7, #27]
 8004a04:	461a      	mov	r2, r3
 8004a06:	2101      	movs	r1, #1
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff fc59 	bl	80042c0 <RFM95_writeRegister>

	HAL_Delay(1000);
 8004a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a12:	f7fc fd0d 	bl	8001430 <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8004a16:	f7fc fcff 	bl	8001418 <HAL_GetTick>
 8004a1a:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8004a1c:	e02b      	b.n	8004a76 <RFM95_transmit+0x13e>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004a1e:	f107 0313 	add.w	r3, r7, #19
 8004a22:	461a      	mov	r2, r3
 8004a24:	2112      	movs	r1, #18
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff fcd2 	bl	80043d0 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01f      	beq.n	8004a76 <RFM95_transmit+0x13e>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_TXDONE | (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
 8004a36:	2308      	movs	r3, #8
 8004a38:	76fb      	strb	r3, [r7, #27]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004a3a:	7efb      	ldrb	r3, [r7, #27]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2112      	movs	r1, #18
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fc3d 	bl	80042c0 <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004a46:	f107 0313 	add.w	r3, r7, #19
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2112      	movs	r1, #18
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f7ff fcbe 	bl	80043d0 <RFM95_readRegister>

			wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8004a54:	7cbb      	ldrb	r3, [r7, #18]
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	f023 0307 	bic.w	r3, r3, #7
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	76fb      	strb	r3, [r7, #27]
			return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8004a66:	7efb      	ldrb	r3, [r7, #27]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fc27 	bl	80042c0 <RFM95_writeRegister>
 8004a72:	4603      	mov	r3, r0
 8004a74:	e008      	b.n	8004a88 <RFM95_transmit+0x150>
	while (HAL_GetTick() - tickStart <= timeout)
 8004a76:	f7fc fccf 	bl	8001418 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d2cb      	bcs.n	8004a1e <RFM95_transmit+0xe6>
		}
	}

	return THT_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <RFM95_startReceiveIT>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_startReceiveIT(RFM95_HandleTypeDef *const me)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <RFM95_startReceiveIT+0x12>
	{
		return THT_ERROR;
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e05a      	b.n	8004b58 <RFM95_startReceiveIT+0xc8>
	}
	/* Mapping DIO0 to rxDone */
	RFM95_mappingDIO0(me, RFLR_DIOMAPPING1_DIO0_00);
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa8a 	bl	8004fbe <RFM95_mappingDIO0>

	uint8_t rByte = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73bb      	strb	r3, [r7, #14]
	uint8_t wByte = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8004ab2:	f107 030e 	add.w	r3, r7, #14
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2131      	movs	r1, #49	; 0x31
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fc88 	bl	80043d0 <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	795b      	ldrb	r3, [r3, #5]
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d104      	bne.n	8004ad2 <RFM95_startReceiveIT+0x42>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8004ac8:	7bbb      	ldrb	r3, [r7, #14]
 8004aca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ace:	73fb      	strb	r3, [r7, #15]
 8004ad0:	e003      	b.n	8004ada <RFM95_startReceiveIT+0x4a>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8004ad2:	7bbb      	ldrb	r3, [r7, #14]
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	73fb      	strb	r3, [r7, #15]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	461a      	mov	r2, r3
 8004ade:	2131      	movs	r1, #49	; 0x31
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff fbed 	bl	80042c0 <RFM95_writeRegister>

	switch (me->parent.BW)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	795b      	ldrb	r3, [r3, #5]
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	dc2a      	bgt.n	8004b44 <RFM95_startReceiveIT+0xb4>
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	da1d      	bge.n	8004b2e <RFM95_startReceiveIT+0x9e>
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <RFM95_startReceiveIT+0x72>
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db24      	blt.n	8004b44 <RFM95_startReceiveIT+0xb4>
 8004afa:	3b01      	subs	r3, #1
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d821      	bhi.n	8004b44 <RFM95_startReceiveIT+0xb4>
 8004b00:	e00a      	b.n	8004b18 <RFM95_startReceiveIT+0x88>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8004b02:	2248      	movs	r2, #72	; 0x48
 8004b04:	2127      	movs	r1, #39	; 0x27
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fbda 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	213f      	movs	r1, #63	; 0x3f
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fbd5 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004b16:	e016      	b.n	8004b46 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8004b18:	2244      	movs	r2, #68	; 0x44
 8004b1a:	2127      	movs	r1, #39	; 0x27
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fbcf 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004b22:	2200      	movs	r2, #0
 8004b24:	213f      	movs	r1, #63	; 0x3f
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fbca 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004b2c:	e00b      	b.n	8004b46 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8004b2e:	2240      	movs	r2, #64	; 0x40
 8004b30:	2127      	movs	r1, #39	; 0x27
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fbc4 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	213f      	movs	r1, #63	; 0x3f
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff fbbf 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004b42:	e000      	b.n	8004b46 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_500:
	default:
		break;
 8004b44:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8004b46:	2385      	movs	r3, #133	; 0x85
 8004b48:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7ff fbb5 	bl	80042c0 <RFM95_writeRegister>
 8004b56:	4603      	mov	r3, r0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <RFM95_receiveIT>:
 * @param pBuffer [out] A pointer to buffer used to store data
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveIT(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <RFM95_receiveIT+0x1a>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <RFM95_receiveIT+0x1e>
	{
		return THT_ERROR;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e06b      	b.n	8004c56 <RFM95_receiveIT+0xf6>
	}
	uint8_t rByte = 0;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	74bb      	strb	r3, [r7, #18]
	uint8_t wByte = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	74fb      	strb	r3, [r7, #19]

	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8004b86:	2181      	movs	r1, #129	; 0x81
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7ff fe68 	bl	800485e <RFM95_setMode>

	RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004b8e:	f107 0312 	add.w	r3, r7, #18
 8004b92:	461a      	mov	r2, r3
 8004b94:	2112      	movs	r1, #18
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fc1a 	bl	80043d0 <RFM95_readRegister>

	if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8004b9c:	7cbb      	ldrb	r3, [r7, #18]
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da08      	bge.n	8004bb6 <RFM95_receiveIT+0x56>
	{
		/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	461a      	mov	r2, r3
 8004bac:	2112      	movs	r1, #18
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f7ff fb86 	bl	80042c0 <RFM95_writeRegister>
 8004bb4:	e04e      	b.n	8004c54 <RFM95_receiveIT+0xf4>
	}
	else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8004bb6:	7cbb      	ldrb	r3, [r7, #18]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d049      	beq.n	8004c54 <RFM95_receiveIT+0xf4>
	{
		/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8004bc0:	2340      	movs	r3, #64	; 0x40
 8004bc2:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004bc4:	7cfb      	ldrb	r3, [r7, #19]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2112      	movs	r1, #18
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fb78 	bl	80042c0 <RFM95_writeRegister>

		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004bd0:	f107 0312 	add.w	r3, r7, #18
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2112      	movs	r1, #18
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff fbf9 	bl	80043d0 <RFM95_readRegister>

		/* Payload CRC not error - read data */
		if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8004bde:	7cbb      	ldrb	r3, [r7, #18]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d12d      	bne.n	8004c44 <RFM95_receiveIT+0xe4>
		{
			/* Read first byte position of last packet */
			RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8004be8:	f107 0312 	add.w	r3, r7, #18
 8004bec:	461a      	mov	r2, r3
 8004bee:	2110      	movs	r1, #16
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f7ff fbed 	bl	80043d0 <RFM95_readRegister>

			/* */
			RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8004bf6:	7cbb      	ldrb	r3, [r7, #18]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	210d      	movs	r1, #13
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff fb5f 	bl	80042c0 <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8004c02:	f107 0312 	add.w	r3, r7, #18
 8004c06:	461a      	mov	r2, r3
 8004c08:	2113      	movs	r1, #19
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f7ff fbe0 	bl	80043d0 <RFM95_readRegister>
			/* May be use read burst or fifo read */

			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e00a      	b.n	8004c2c <RFM95_receiveIT+0xcc>
			{
				RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	60ba      	str	r2, [r7, #8]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2100      	movs	r1, #0
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fbd5 	bl	80043d0 <RFM95_readRegister>
			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	7cbb      	ldrb	r3, [r7, #18]
 8004c2e:	79fa      	ldrb	r2, [r7, #7]
 8004c30:	4293      	cmp	r3, r2
 8004c32:	bf28      	it	cs
 8004c34:	4613      	movcs	r3, r2
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d3ea      	bcc.n	8004c16 <RFM95_receiveIT+0xb6>
			}

			return THT_OK;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e008      	b.n	8004c56 <RFM95_receiveIT+0xf6>
		}
		else
		{
			/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8004c44:	2320      	movs	r3, #32
 8004c46:	74fb      	strb	r3, [r7, #19]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2112      	movs	r1, #18
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fb36 	bl	80042c0 <RFM95_writeRegister>
		}
	}

	return THT_ERROR;
 8004c54:	2302      	movs	r3, #2
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <RFM95_receiveContinuous>:
 * @param size [in] The size of the bufffer
 * @param timeout [in] Timeout
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveContinuous(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size, uint32_t timeout)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b088      	sub	sp, #32
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	60f8      	str	r0, [r7, #12]
 8004c66:	60b9      	str	r1, [r7, #8]
 8004c68:	603b      	str	r3, [r7, #0]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <RFM95_receiveContinuous+0x1c>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <RFM95_receiveContinuous+0x20>
	{
		return THT_ERROR;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e0e7      	b.n	8004e4e <RFM95_receiveContinuous+0x1f0>
	}

	uint8_t rByte = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]
	uint8_t currentMode = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	74bb      	strb	r3, [r7, #18]

	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8004c8a:	f107 0312 	add.w	r3, r7, #18
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2101      	movs	r1, #1
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f7ff fb9c 	bl	80043d0 <RFM95_readRegister>

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8004c98:	f107 0313 	add.w	r3, r7, #19
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	2131      	movs	r1, #49	; 0x31
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7ff fb95 	bl	80043d0 <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	795b      	ldrb	r3, [r3, #5]
 8004caa:	2b09      	cmp	r3, #9
 8004cac:	d104      	bne.n	8004cb8 <RFM95_receiveContinuous+0x5a>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e003      	b.n	8004cc0 <RFM95_receiveContinuous+0x62>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cbe:	77fb      	strb	r3, [r7, #31]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2131      	movs	r1, #49	; 0x31
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff fafa 	bl	80042c0 <RFM95_writeRegister>

	switch (me->parent.BW)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	795b      	ldrb	r3, [r3, #5]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	dc2a      	bgt.n	8004d2a <RFM95_receiveContinuous+0xcc>
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	da1d      	bge.n	8004d14 <RFM95_receiveContinuous+0xb6>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d005      	beq.n	8004ce8 <RFM95_receiveContinuous+0x8a>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db24      	blt.n	8004d2a <RFM95_receiveContinuous+0xcc>
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d821      	bhi.n	8004d2a <RFM95_receiveContinuous+0xcc>
 8004ce6:	e00a      	b.n	8004cfe <RFM95_receiveContinuous+0xa0>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8004ce8:	2248      	movs	r2, #72	; 0x48
 8004cea:	2127      	movs	r1, #39	; 0x27
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff fae7 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	213f      	movs	r1, #63	; 0x3f
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fae2 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004cfc:	e016      	b.n	8004d2c <RFM95_receiveContinuous+0xce>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8004cfe:	2244      	movs	r2, #68	; 0x44
 8004d00:	2127      	movs	r1, #39	; 0x27
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fadc 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	213f      	movs	r1, #63	; 0x3f
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f7ff fad7 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004d12:	e00b      	b.n	8004d2c <RFM95_receiveContinuous+0xce>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	2127      	movs	r1, #39	; 0x27
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fad1 	bl	80042c0 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	213f      	movs	r1, #63	; 0x3f
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff facc 	bl	80042c0 <RFM95_writeRegister>
		break;
 8004d28:	e000      	b.n	8004d2c <RFM95_receiveContinuous+0xce>
	case LORA_BW_500:
	default:
		break;
 8004d2a:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8004d2c:	2385      	movs	r3, #133	; 0x85
 8004d2e:	77fb      	strb	r3, [r7, #31]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8004d30:	7ffb      	ldrb	r3, [r7, #31]
 8004d32:	461a      	mov	r2, r3
 8004d34:	2101      	movs	r1, #1
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fac2 	bl	80042c0 <RFM95_writeRegister>

	uint32_t tickStart = HAL_GetTick();
 8004d3c:	f7fc fb6c 	bl	8001418 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8004d42:	e07a      	b.n	8004e3a <RFM95_receiveContinuous+0x1dc>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004d44:	f107 0313 	add.w	r3, r7, #19
 8004d48:	461a      	mov	r2, r3
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff fb3f 	bl	80043d0 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8004d52:	7cfb      	ldrb	r3, [r7, #19]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da0e      	bge.n	8004d78 <RFM95_receiveContinuous+0x11a>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8004d5a:	7cbb      	ldrb	r3, [r7, #18]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2101      	movs	r1, #1
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff faad 	bl	80042c0 <RFM95_writeRegister>
			/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2112      	movs	r1, #18
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff faa5 	bl	80042c0 <RFM95_writeRegister>
 8004d76:	e060      	b.n	8004e3a <RFM95_receiveContinuous+0x1dc>
		}
		else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d05b      	beq.n	8004e3a <RFM95_receiveContinuous+0x1dc>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8004d82:	7cbb      	ldrb	r3, [r7, #18]
 8004d84:	461a      	mov	r2, r3
 8004d86:	2101      	movs	r1, #1
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7ff fa99 	bl	80042c0 <RFM95_writeRegister>

			/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8004d8e:	2340      	movs	r3, #64	; 0x40
 8004d90:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004d92:	7ffb      	ldrb	r3, [r7, #31]
 8004d94:	461a      	mov	r2, r3
 8004d96:	2112      	movs	r1, #18
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff fa91 	bl	80042c0 <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8004d9e:	f107 0313 	add.w	r3, r7, #19
 8004da2:	461a      	mov	r2, r3
 8004da4:	2112      	movs	r1, #18
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fb12 	bl	80043d0 <RFM95_readRegister>

			/* Payload CRC not error - read data */
			if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d133      	bne.n	8004e1e <RFM95_receiveContinuous+0x1c0>
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8004db6:	7cbb      	ldrb	r3, [r7, #18]
 8004db8:	461a      	mov	r2, r3
 8004dba:	2101      	movs	r1, #1
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fa7f 	bl	80042c0 <RFM95_writeRegister>

				/* Read first byte position of last packet */
				RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8004dc2:	f107 0313 	add.w	r3, r7, #19
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2110      	movs	r1, #16
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff fb00 	bl	80043d0 <RFM95_readRegister>

				/* */
				RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	210d      	movs	r1, #13
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fa72 	bl	80042c0 <RFM95_writeRegister>

				RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8004ddc:	f107 0313 	add.w	r3, r7, #19
 8004de0:	461a      	mov	r2, r3
 8004de2:	2113      	movs	r1, #19
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff faf3 	bl	80043d0 <RFM95_readRegister>
				/* May be use read burst or fifo read */

				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
 8004dee:	e00a      	b.n	8004e06 <RFM95_receiveContinuous+0x1a8>
				{
					RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	60ba      	str	r2, [r7, #8]
 8004df6:	461a      	mov	r2, r3
 8004df8:	2100      	movs	r1, #0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fae8 	bl	80043d0 <RFM95_readRegister>
				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	3301      	adds	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	7cfb      	ldrb	r3, [r7, #19]
 8004e08:	79fa      	ldrb	r2, [r7, #7]
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	bf28      	it	cs
 8004e0e:	4613      	movcs	r3, r2
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	461a      	mov	r2, r3
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d3ea      	bcc.n	8004df0 <RFM95_receiveContinuous+0x192>
				}

				return THT_OK;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e017      	b.n	8004e4e <RFM95_receiveContinuous+0x1f0>
			}
			else
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8004e1e:	7cbb      	ldrb	r3, [r7, #18]
 8004e20:	461a      	mov	r2, r3
 8004e22:	2101      	movs	r1, #1
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fa4b 	bl	80042c0 <RFM95_writeRegister>
				/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
				wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	77fb      	strb	r3, [r7, #31]
				RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8004e2e:	7ffb      	ldrb	r3, [r7, #31]
 8004e30:	461a      	mov	r2, r3
 8004e32:	2112      	movs	r1, #18
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fa43 	bl	80042c0 <RFM95_writeRegister>
	while (HAL_GetTick() - tickStart <= timeout)
 8004e3a:	f7fc faed 	bl	8001418 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	f4bf af7c 	bcs.w	8004d44 <RFM95_receiveContinuous+0xe6>
			}
		}
	}

	return THT_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <RFM95_reset>:
 * @note When module is power on, call this function to reset the module
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01f      	beq.n	8004ea4 <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f7fc ff02 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fc fadb 	bl	8001430 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e82:	2201      	movs	r2, #1
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7fc fef7 	bl	8001c78 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8004e8a:	200a      	movs	r0, #10
 8004e8c:	f7fc fad0 	bl	8001430 <HAL_Delay>

	uint8_t rByte = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8004e94:	f107 030f 	add.w	r3, r7, #15
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2142      	movs	r1, #66	; 0x42
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fa97 	bl	80043d0 <RFM95_readRegister>
 8004ea2:	e000      	b.n	8004ea6 <RFM95_reset+0x50>
		return;
 8004ea4:	bf00      	nop

	if (rByte != 0x12)
	{
		//		while(1);
	}
}
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <RFM95_setRFPowerAmplifier>:
 *  @arg RFLR_PACONFIG_PASELECT_RFO
 * @param Pout Power value
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me, uint8_t paSelect, uint8_t Pout)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <RFM95_setRFPowerAmplifier+0x1a>
	{
		return THT_ERROR;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e044      	b.n	8004f50 <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST &&
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d11e      	bne.n	8004f12 <RFM95_setRFPowerAmplifier+0x66>
 8004ed4:	78bb      	ldrb	r3, [r7, #2]
 8004ed6:	2b0e      	cmp	r3, #14
 8004ed8:	d91b      	bls.n	8004f12 <RFM95_setRFPowerAmplifier+0x66>
		((Pout >= 15) && (Pout <= 20)))
 8004eda:	78bb      	ldrb	r3, [r7, #2]
 8004edc:	2b14      	cmp	r3, #20
 8004ede:	d818      	bhi.n	8004f12 <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8004ee0:	78bb      	ldrb	r3, [r7, #2]
 8004ee2:	2b11      	cmp	r3, #17
 8004ee4:	d906      	bls.n	8004ef4 <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	214d      	movs	r1, #77	; 0x4d
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff f9e8 	bl	80042c0 <RFM95_writeRegister>
			Pout = 17;
 8004ef0:	2311      	movs	r3, #17
 8004ef2:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8004ef4:	78bb      	ldrb	r3, [r7, #2]
 8004ef6:	3b02      	subs	r3, #2
 8004ef8:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | outputPower);
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	7bbb      	ldrb	r3, [r7, #14]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	461a      	mov	r2, r3
 8004f06:	2109      	movs	r1, #9
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff f9d9 	bl	80042c0 <RFM95_writeRegister>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	e01e      	b.n	8004f50 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO &&
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11a      	bne.n	8004f4e <RFM95_setRFPowerAmplifier+0xa2>
 8004f18:	78bb      	ldrb	r3, [r7, #2]
 8004f1a:	2b0e      	cmp	r3, #14
 8004f1c:	d817      	bhi.n	8004f4e <RFM95_setRFPowerAmplifier+0xa2>
			 ((Pout >= 0) && (Pout <= 14)))
	{
		uint8_t maxPower = 7; // chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 8004f1e:	2307      	movs	r3, #7
 8004f20:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 8004f22:	78bb      	ldrb	r3, [r7, #2]
 8004f24:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | (maxPower << 4) | outputPower);
 8004f26:	7b7b      	ldrb	r3, [r7, #13]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	b25a      	sxtb	r2, r3
 8004f2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	b25a      	sxtb	r2, r3
 8004f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	b25b      	sxtb	r3, r3
 8004f3c:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	461a      	mov	r2, r3
 8004f42:	2109      	movs	r1, #9
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff f9bb 	bl	80042c0 <RFM95_writeRegister>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	e000      	b.n	8004f50 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return THT_OK;
 8004f4e:	2301      	movs	r3, #1
	}
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <RFM95_getRSSI>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return int16_t
 */
int16_t RFM95_getRSSI(RFM95_HandleTypeDef *const me)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <RFM95_getRSSI+0x12>
	{
		return 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e025      	b.n	8004fb6 <RFM95_getRSSI+0x5e>
	}

	uint8_t rByte = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73bb      	strb	r3, [r7, #14]
	THT_StatusTypeDef res;
	res = RFM95_readRegister(me, REG_LR_PKTRSSIVALUE, &rByte);
 8004f6e:	f107 030e 	add.w	r3, r7, #14
 8004f72:	461a      	mov	r2, r3
 8004f74:	211a      	movs	r1, #26
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fa2a 	bl	80043d0 <RFM95_readRegister>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
		RF_UHF_BAND = 860,
		RF_RSSI_UHL_OFFSET = 157,
		RF_RSSI_UFL_OFFSET = 164,
	};

	if (THT_OK == res)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d116      	bne.n	8004fb4 <RFM95_getRSSI+0x5c>
	{
		if (me->parent.freq >= RF_UHF_BAND)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 8004f8e:	d305      	bcc.n	8004f9c <RFM95_getRSSI+0x44>
		{
			return rByte - RF_RSSI_UHL_OFFSET;
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b9d      	subs	r3, #157	; 0x9d
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	e00c      	b.n	8004fb6 <RFM95_getRSSI+0x5e>
		}
		else if (me->parent.freq <= RF_ULF_BAND)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f240 220d 	movw	r2, #525	; 0x20d
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d805      	bhi.n	8004fb4 <RFM95_getRSSI+0x5c>
		{
			return rByte - RF_RSSI_UFL_OFFSET;
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3ba4      	subs	r3, #164	; 0xa4
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	e000      	b.n	8004fb6 <RFM95_getRSSI+0x5e>
		}
	}

	return 0;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <RFM95_mappingDIO0>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mappingMode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_mappingDIO0(RFM95_HandleTypeDef *const me, uint8_t mappingMode)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <RFM95_mappingDIO0+0x16>
	{
		return THT_ERROR;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e00c      	b.n	8004fee <RFM95_mappingDIO0+0x30>
	}
	uint8_t wByte = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	73fb      	strb	r3, [r7, #15]

	wByte = (uint8_t)(mappingMode | RFLR_DIOMAPPING1_DIO0_MASK);
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004fde:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_DIOMAPPING1, wByte);
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2140      	movs	r1, #64	; 0x40
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff f96a 	bl	80042c0 <RFM95_writeRegister>
 8004fec:	4603      	mov	r3, r0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <RFM95_init>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_init(RFM95_HandleTypeDef *const me)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <RFM95_init+0x12>
	{
		return THT_ERROR;
 8005004:	2302      	movs	r3, #2
 8005006:	e027      	b.n	8005058 <RFM95_init+0x62>
	}

	//RFM95_powerOn(me);
	HAL_Delay(100);
 8005008:	2064      	movs	r0, #100	; 0x64
 800500a:	f7fc fa11 	bl	8001430 <HAL_Delay>
	RFM95_reset(me);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff ff21 	bl	8004e56 <RFM95_reset>
	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP | RFLR_OPMODE_FREQMODE_ACCESS_HF);
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff fc21 	bl	800485e <RFM95_setMode>
	RFM95_setFrequency(me, 923);
 800501c:	f240 319b 	movw	r1, #923	; 0x39b
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff fc4e 	bl	80048c2 <RFM95_setFrequency>
	RFM95_setBandwidth(me, RFLR_MODEMCONFIG1_BW_125_KHZ);
 8005026:	2170      	movs	r1, #112	; 0x70
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff faf7 	bl	800461c <RFM95_setBandwidth>
	RFM95_setCRCMode(me, RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON);
 800502e:	2104      	movs	r1, #4
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fb2a 	bl	800468a <RFM95_setCRCMode>
	RFM95_setLNA(me);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff fbea 	bl	8004810 <RFM95_setLNA>
	RFM95_setSpreadingFactor(me, RFLR_MODEMCONFIG2_SF_10);
 800503c:	21a0      	movs	r1, #160	; 0xa0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fa30 	bl	80044a4 <RFM95_setSpreadingFactor>
	RFM95_setRFPowerAmplifier(me, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 8005044:	2214      	movs	r2, #20
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff ff2f 	bl	8004eac <RFM95_setRFPowerAmplifier>

	return RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 800504e:	2181      	movs	r1, #129	; 0x81
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fc04 	bl	800485e <RFM95_setMode>
 8005056:	4603      	mov	r3, r0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <std>:
 8005060:	2300      	movs	r3, #0
 8005062:	b510      	push	{r4, lr}
 8005064:	4604      	mov	r4, r0
 8005066:	e9c0 3300 	strd	r3, r3, [r0]
 800506a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800506e:	6083      	str	r3, [r0, #8]
 8005070:	8181      	strh	r1, [r0, #12]
 8005072:	6643      	str	r3, [r0, #100]	; 0x64
 8005074:	81c2      	strh	r2, [r0, #14]
 8005076:	6183      	str	r3, [r0, #24]
 8005078:	4619      	mov	r1, r3
 800507a:	2208      	movs	r2, #8
 800507c:	305c      	adds	r0, #92	; 0x5c
 800507e:	f000 f906 	bl	800528e <memset>
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <std+0x58>)
 8005084:	6263      	str	r3, [r4, #36]	; 0x24
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <std+0x5c>)
 8005088:	62a3      	str	r3, [r4, #40]	; 0x28
 800508a:	4b0d      	ldr	r3, [pc, #52]	; (80050c0 <std+0x60>)
 800508c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800508e:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <std+0x64>)
 8005090:	6323      	str	r3, [r4, #48]	; 0x30
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <std+0x68>)
 8005094:	6224      	str	r4, [r4, #32]
 8005096:	429c      	cmp	r4, r3
 8005098:	d006      	beq.n	80050a8 <std+0x48>
 800509a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800509e:	4294      	cmp	r4, r2
 80050a0:	d002      	beq.n	80050a8 <std+0x48>
 80050a2:	33d0      	adds	r3, #208	; 0xd0
 80050a4:	429c      	cmp	r4, r3
 80050a6:	d105      	bne.n	80050b4 <std+0x54>
 80050a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b0:	f000 b966 	b.w	8005380 <__retarget_lock_init_recursive>
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	08005209 	.word	0x08005209
 80050bc:	0800522b 	.word	0x0800522b
 80050c0:	08005263 	.word	0x08005263
 80050c4:	08005287 	.word	0x08005287
 80050c8:	200001bc 	.word	0x200001bc

080050cc <stdio_exit_handler>:
 80050cc:	4a02      	ldr	r2, [pc, #8]	; (80050d8 <stdio_exit_handler+0xc>)
 80050ce:	4903      	ldr	r1, [pc, #12]	; (80050dc <stdio_exit_handler+0x10>)
 80050d0:	4803      	ldr	r0, [pc, #12]	; (80050e0 <stdio_exit_handler+0x14>)
 80050d2:	f000 b869 	b.w	80051a8 <_fwalk_sglue>
 80050d6:	bf00      	nop
 80050d8:	2000000c 	.word	0x2000000c
 80050dc:	08005c2d 	.word	0x08005c2d
 80050e0:	20000018 	.word	0x20000018

080050e4 <cleanup_stdio>:
 80050e4:	6841      	ldr	r1, [r0, #4]
 80050e6:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <cleanup_stdio+0x34>)
 80050e8:	4299      	cmp	r1, r3
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	d001      	beq.n	80050f4 <cleanup_stdio+0x10>
 80050f0:	f000 fd9c 	bl	8005c2c <_fflush_r>
 80050f4:	68a1      	ldr	r1, [r4, #8]
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <cleanup_stdio+0x38>)
 80050f8:	4299      	cmp	r1, r3
 80050fa:	d002      	beq.n	8005102 <cleanup_stdio+0x1e>
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fd95 	bl	8005c2c <_fflush_r>
 8005102:	68e1      	ldr	r1, [r4, #12]
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <cleanup_stdio+0x3c>)
 8005106:	4299      	cmp	r1, r3
 8005108:	d004      	beq.n	8005114 <cleanup_stdio+0x30>
 800510a:	4620      	mov	r0, r4
 800510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005110:	f000 bd8c 	b.w	8005c2c <_fflush_r>
 8005114:	bd10      	pop	{r4, pc}
 8005116:	bf00      	nop
 8005118:	200001bc 	.word	0x200001bc
 800511c:	20000224 	.word	0x20000224
 8005120:	2000028c 	.word	0x2000028c

08005124 <global_stdio_init.part.0>:
 8005124:	b510      	push	{r4, lr}
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <global_stdio_init.part.0+0x30>)
 8005128:	4c0b      	ldr	r4, [pc, #44]	; (8005158 <global_stdio_init.part.0+0x34>)
 800512a:	4a0c      	ldr	r2, [pc, #48]	; (800515c <global_stdio_init.part.0+0x38>)
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	4620      	mov	r0, r4
 8005130:	2200      	movs	r2, #0
 8005132:	2104      	movs	r1, #4
 8005134:	f7ff ff94 	bl	8005060 <std>
 8005138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800513c:	2201      	movs	r2, #1
 800513e:	2109      	movs	r1, #9
 8005140:	f7ff ff8e 	bl	8005060 <std>
 8005144:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005148:	2202      	movs	r2, #2
 800514a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800514e:	2112      	movs	r1, #18
 8005150:	f7ff bf86 	b.w	8005060 <std>
 8005154:	200002f4 	.word	0x200002f4
 8005158:	200001bc 	.word	0x200001bc
 800515c:	080050cd 	.word	0x080050cd

08005160 <__sfp_lock_acquire>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sfp_lock_acquire+0x8>)
 8005162:	f000 b90e 	b.w	8005382 <__retarget_lock_acquire_recursive>
 8005166:	bf00      	nop
 8005168:	200002fd 	.word	0x200002fd

0800516c <__sfp_lock_release>:
 800516c:	4801      	ldr	r0, [pc, #4]	; (8005174 <__sfp_lock_release+0x8>)
 800516e:	f000 b909 	b.w	8005384 <__retarget_lock_release_recursive>
 8005172:	bf00      	nop
 8005174:	200002fd 	.word	0x200002fd

08005178 <__sinit>:
 8005178:	b510      	push	{r4, lr}
 800517a:	4604      	mov	r4, r0
 800517c:	f7ff fff0 	bl	8005160 <__sfp_lock_acquire>
 8005180:	6a23      	ldr	r3, [r4, #32]
 8005182:	b11b      	cbz	r3, 800518c <__sinit+0x14>
 8005184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005188:	f7ff bff0 	b.w	800516c <__sfp_lock_release>
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <__sinit+0x28>)
 800518e:	6223      	str	r3, [r4, #32]
 8005190:	4b04      	ldr	r3, [pc, #16]	; (80051a4 <__sinit+0x2c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f5      	bne.n	8005184 <__sinit+0xc>
 8005198:	f7ff ffc4 	bl	8005124 <global_stdio_init.part.0>
 800519c:	e7f2      	b.n	8005184 <__sinit+0xc>
 800519e:	bf00      	nop
 80051a0:	080050e5 	.word	0x080050e5
 80051a4:	200002f4 	.word	0x200002f4

080051a8 <_fwalk_sglue>:
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ac:	4607      	mov	r7, r0
 80051ae:	4688      	mov	r8, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	2600      	movs	r6, #0
 80051b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051b8:	f1b9 0901 	subs.w	r9, r9, #1
 80051bc:	d505      	bpl.n	80051ca <_fwalk_sglue+0x22>
 80051be:	6824      	ldr	r4, [r4, #0]
 80051c0:	2c00      	cmp	r4, #0
 80051c2:	d1f7      	bne.n	80051b4 <_fwalk_sglue+0xc>
 80051c4:	4630      	mov	r0, r6
 80051c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d907      	bls.n	80051e0 <_fwalk_sglue+0x38>
 80051d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d4:	3301      	adds	r3, #1
 80051d6:	d003      	beq.n	80051e0 <_fwalk_sglue+0x38>
 80051d8:	4629      	mov	r1, r5
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	4306      	orrs	r6, r0
 80051e0:	3568      	adds	r5, #104	; 0x68
 80051e2:	e7e9      	b.n	80051b8 <_fwalk_sglue+0x10>

080051e4 <iprintf>:
 80051e4:	b40f      	push	{r0, r1, r2, r3}
 80051e6:	b507      	push	{r0, r1, r2, lr}
 80051e8:	4906      	ldr	r1, [pc, #24]	; (8005204 <iprintf+0x20>)
 80051ea:	ab04      	add	r3, sp, #16
 80051ec:	6808      	ldr	r0, [r1, #0]
 80051ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80051f2:	6881      	ldr	r1, [r0, #8]
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	f000 f9e9 	bl	80055cc <_vfiprintf_r>
 80051fa:	b003      	add	sp, #12
 80051fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005200:	b004      	add	sp, #16
 8005202:	4770      	bx	lr
 8005204:	20000064 	.word	0x20000064

08005208 <__sread>:
 8005208:	b510      	push	{r4, lr}
 800520a:	460c      	mov	r4, r1
 800520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005210:	f000 f868 	bl	80052e4 <_read_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	bfab      	itete	ge
 8005218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800521a:	89a3      	ldrhlt	r3, [r4, #12]
 800521c:	181b      	addge	r3, r3, r0
 800521e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005222:	bfac      	ite	ge
 8005224:	6563      	strge	r3, [r4, #84]	; 0x54
 8005226:	81a3      	strhlt	r3, [r4, #12]
 8005228:	bd10      	pop	{r4, pc}

0800522a <__swrite>:
 800522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522e:	461f      	mov	r7, r3
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4616      	mov	r6, r2
 800523a:	d505      	bpl.n	8005248 <__swrite+0x1e>
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	2302      	movs	r3, #2
 8005242:	2200      	movs	r2, #0
 8005244:	f000 f83c 	bl	80052c0 <_lseek_r>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	4628      	mov	r0, r5
 800525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	f000 b853 	b.w	8005308 <_write_r>

08005262 <__sseek>:
 8005262:	b510      	push	{r4, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 f829 	bl	80052c0 <_lseek_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	bf15      	itete	ne
 8005274:	6560      	strne	r0, [r4, #84]	; 0x54
 8005276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800527a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strheq	r3, [r4, #12]
 8005280:	bf18      	it	ne
 8005282:	81a3      	strhne	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__sclose>:
 8005286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528a:	f000 b809 	b.w	80052a0 <_close_r>

0800528e <memset>:
 800528e:	4402      	add	r2, r0
 8005290:	4603      	mov	r3, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	d100      	bne.n	8005298 <memset+0xa>
 8005296:	4770      	bx	lr
 8005298:	f803 1b01 	strb.w	r1, [r3], #1
 800529c:	e7f9      	b.n	8005292 <memset+0x4>
	...

080052a0 <_close_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_close_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fb ffb3 	bl	8001216 <_close>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_close_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_close_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	200002f8 	.word	0x200002f8

080052c0 <_lseek_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	4d07      	ldr	r5, [pc, #28]	; (80052e0 <_lseek_r+0x20>)
 80052c4:	4604      	mov	r4, r0
 80052c6:	4608      	mov	r0, r1
 80052c8:	4611      	mov	r1, r2
 80052ca:	2200      	movs	r2, #0
 80052cc:	602a      	str	r2, [r5, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f7fb ffc8 	bl	8001264 <_lseek>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_lseek_r+0x1e>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_lseek_r+0x1e>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	200002f8 	.word	0x200002f8

080052e4 <_read_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	; (8005304 <_read_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fb ff56 	bl	80011a4 <_read>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_read_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_read_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	200002f8 	.word	0x200002f8

08005308 <_write_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	; (8005328 <_write_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fb ff61 	bl	80011de <_write>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_write_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_write_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	200002f8 	.word	0x200002f8

0800532c <__errno>:
 800532c:	4b01      	ldr	r3, [pc, #4]	; (8005334 <__errno+0x8>)
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000064 	.word	0x20000064

08005338 <__libc_init_array>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4d0d      	ldr	r5, [pc, #52]	; (8005370 <__libc_init_array+0x38>)
 800533c:	4c0d      	ldr	r4, [pc, #52]	; (8005374 <__libc_init_array+0x3c>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	2600      	movs	r6, #0
 8005344:	42a6      	cmp	r6, r4
 8005346:	d109      	bne.n	800535c <__libc_init_array+0x24>
 8005348:	4d0b      	ldr	r5, [pc, #44]	; (8005378 <__libc_init_array+0x40>)
 800534a:	4c0c      	ldr	r4, [pc, #48]	; (800537c <__libc_init_array+0x44>)
 800534c:	f001 fcf8 	bl	8006d40 <_init>
 8005350:	1b64      	subs	r4, r4, r5
 8005352:	10a4      	asrs	r4, r4, #2
 8005354:	2600      	movs	r6, #0
 8005356:	42a6      	cmp	r6, r4
 8005358:	d105      	bne.n	8005366 <__libc_init_array+0x2e>
 800535a:	bd70      	pop	{r4, r5, r6, pc}
 800535c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005360:	4798      	blx	r3
 8005362:	3601      	adds	r6, #1
 8005364:	e7ee      	b.n	8005344 <__libc_init_array+0xc>
 8005366:	f855 3b04 	ldr.w	r3, [r5], #4
 800536a:	4798      	blx	r3
 800536c:	3601      	adds	r6, #1
 800536e:	e7f2      	b.n	8005356 <__libc_init_array+0x1e>
 8005370:	08006e00 	.word	0x08006e00
 8005374:	08006e00 	.word	0x08006e00
 8005378:	08006e00 	.word	0x08006e00
 800537c:	08006e04 	.word	0x08006e04

08005380 <__retarget_lock_init_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_acquire_recursive>:
 8005382:	4770      	bx	lr

08005384 <__retarget_lock_release_recursive>:
 8005384:	4770      	bx	lr
	...

08005388 <_free_r>:
 8005388:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800538a:	2900      	cmp	r1, #0
 800538c:	d044      	beq.n	8005418 <_free_r+0x90>
 800538e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005392:	9001      	str	r0, [sp, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f1a1 0404 	sub.w	r4, r1, #4
 800539a:	bfb8      	it	lt
 800539c:	18e4      	addlt	r4, r4, r3
 800539e:	f000 f8df 	bl	8005560 <__malloc_lock>
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <_free_r+0x94>)
 80053a4:	9801      	ldr	r0, [sp, #4]
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	b933      	cbnz	r3, 80053b8 <_free_r+0x30>
 80053aa:	6063      	str	r3, [r4, #4]
 80053ac:	6014      	str	r4, [r2, #0]
 80053ae:	b003      	add	sp, #12
 80053b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053b4:	f000 b8da 	b.w	800556c <__malloc_unlock>
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d908      	bls.n	80053ce <_free_r+0x46>
 80053bc:	6825      	ldr	r5, [r4, #0]
 80053be:	1961      	adds	r1, r4, r5
 80053c0:	428b      	cmp	r3, r1
 80053c2:	bf01      	itttt	eq
 80053c4:	6819      	ldreq	r1, [r3, #0]
 80053c6:	685b      	ldreq	r3, [r3, #4]
 80053c8:	1949      	addeq	r1, r1, r5
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	e7ed      	b.n	80053aa <_free_r+0x22>
 80053ce:	461a      	mov	r2, r3
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b10b      	cbz	r3, 80053d8 <_free_r+0x50>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d9fa      	bls.n	80053ce <_free_r+0x46>
 80053d8:	6811      	ldr	r1, [r2, #0]
 80053da:	1855      	adds	r5, r2, r1
 80053dc:	42a5      	cmp	r5, r4
 80053de:	d10b      	bne.n	80053f8 <_free_r+0x70>
 80053e0:	6824      	ldr	r4, [r4, #0]
 80053e2:	4421      	add	r1, r4
 80053e4:	1854      	adds	r4, r2, r1
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	d1e0      	bne.n	80053ae <_free_r+0x26>
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	6053      	str	r3, [r2, #4]
 80053f2:	440c      	add	r4, r1
 80053f4:	6014      	str	r4, [r2, #0]
 80053f6:	e7da      	b.n	80053ae <_free_r+0x26>
 80053f8:	d902      	bls.n	8005400 <_free_r+0x78>
 80053fa:	230c      	movs	r3, #12
 80053fc:	6003      	str	r3, [r0, #0]
 80053fe:	e7d6      	b.n	80053ae <_free_r+0x26>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1961      	adds	r1, r4, r5
 8005404:	428b      	cmp	r3, r1
 8005406:	bf04      	itt	eq
 8005408:	6819      	ldreq	r1, [r3, #0]
 800540a:	685b      	ldreq	r3, [r3, #4]
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	bf04      	itt	eq
 8005410:	1949      	addeq	r1, r1, r5
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	6054      	str	r4, [r2, #4]
 8005416:	e7ca      	b.n	80053ae <_free_r+0x26>
 8005418:	b003      	add	sp, #12
 800541a:	bd30      	pop	{r4, r5, pc}
 800541c:	20000300 	.word	0x20000300

08005420 <sbrk_aligned>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4e0e      	ldr	r6, [pc, #56]	; (800545c <sbrk_aligned+0x3c>)
 8005424:	460c      	mov	r4, r1
 8005426:	6831      	ldr	r1, [r6, #0]
 8005428:	4605      	mov	r5, r0
 800542a:	b911      	cbnz	r1, 8005432 <sbrk_aligned+0x12>
 800542c:	f000 fcbc 	bl	8005da8 <_sbrk_r>
 8005430:	6030      	str	r0, [r6, #0]
 8005432:	4621      	mov	r1, r4
 8005434:	4628      	mov	r0, r5
 8005436:	f000 fcb7 	bl	8005da8 <_sbrk_r>
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	d00a      	beq.n	8005454 <sbrk_aligned+0x34>
 800543e:	1cc4      	adds	r4, r0, #3
 8005440:	f024 0403 	bic.w	r4, r4, #3
 8005444:	42a0      	cmp	r0, r4
 8005446:	d007      	beq.n	8005458 <sbrk_aligned+0x38>
 8005448:	1a21      	subs	r1, r4, r0
 800544a:	4628      	mov	r0, r5
 800544c:	f000 fcac 	bl	8005da8 <_sbrk_r>
 8005450:	3001      	adds	r0, #1
 8005452:	d101      	bne.n	8005458 <sbrk_aligned+0x38>
 8005454:	f04f 34ff 	mov.w	r4, #4294967295
 8005458:	4620      	mov	r0, r4
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	20000304 	.word	0x20000304

08005460 <_malloc_r>:
 8005460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005464:	1ccd      	adds	r5, r1, #3
 8005466:	f025 0503 	bic.w	r5, r5, #3
 800546a:	3508      	adds	r5, #8
 800546c:	2d0c      	cmp	r5, #12
 800546e:	bf38      	it	cc
 8005470:	250c      	movcc	r5, #12
 8005472:	2d00      	cmp	r5, #0
 8005474:	4607      	mov	r7, r0
 8005476:	db01      	blt.n	800547c <_malloc_r+0x1c>
 8005478:	42a9      	cmp	r1, r5
 800547a:	d905      	bls.n	8005488 <_malloc_r+0x28>
 800547c:	230c      	movs	r3, #12
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	2600      	movs	r6, #0
 8005482:	4630      	mov	r0, r6
 8005484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800555c <_malloc_r+0xfc>
 800548c:	f000 f868 	bl	8005560 <__malloc_lock>
 8005490:	f8d8 3000 	ldr.w	r3, [r8]
 8005494:	461c      	mov	r4, r3
 8005496:	bb5c      	cbnz	r4, 80054f0 <_malloc_r+0x90>
 8005498:	4629      	mov	r1, r5
 800549a:	4638      	mov	r0, r7
 800549c:	f7ff ffc0 	bl	8005420 <sbrk_aligned>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	4604      	mov	r4, r0
 80054a4:	d155      	bne.n	8005552 <_malloc_r+0xf2>
 80054a6:	f8d8 4000 	ldr.w	r4, [r8]
 80054aa:	4626      	mov	r6, r4
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	d145      	bne.n	800553c <_malloc_r+0xdc>
 80054b0:	2c00      	cmp	r4, #0
 80054b2:	d048      	beq.n	8005546 <_malloc_r+0xe6>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	4631      	mov	r1, r6
 80054b8:	4638      	mov	r0, r7
 80054ba:	eb04 0903 	add.w	r9, r4, r3
 80054be:	f000 fc73 	bl	8005da8 <_sbrk_r>
 80054c2:	4581      	cmp	r9, r0
 80054c4:	d13f      	bne.n	8005546 <_malloc_r+0xe6>
 80054c6:	6821      	ldr	r1, [r4, #0]
 80054c8:	1a6d      	subs	r5, r5, r1
 80054ca:	4629      	mov	r1, r5
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ffa7 	bl	8005420 <sbrk_aligned>
 80054d2:	3001      	adds	r0, #1
 80054d4:	d037      	beq.n	8005546 <_malloc_r+0xe6>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	442b      	add	r3, r5
 80054da:	6023      	str	r3, [r4, #0]
 80054dc:	f8d8 3000 	ldr.w	r3, [r8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d038      	beq.n	8005556 <_malloc_r+0xf6>
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	42a2      	cmp	r2, r4
 80054e8:	d12b      	bne.n	8005542 <_malloc_r+0xe2>
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	e00f      	b.n	8005510 <_malloc_r+0xb0>
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	1b52      	subs	r2, r2, r5
 80054f4:	d41f      	bmi.n	8005536 <_malloc_r+0xd6>
 80054f6:	2a0b      	cmp	r2, #11
 80054f8:	d917      	bls.n	800552a <_malloc_r+0xca>
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	6025      	str	r5, [r4, #0]
 8005500:	bf18      	it	ne
 8005502:	6059      	strne	r1, [r3, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	bf08      	it	eq
 8005508:	f8c8 1000 	streq.w	r1, [r8]
 800550c:	5162      	str	r2, [r4, r5]
 800550e:	604b      	str	r3, [r1, #4]
 8005510:	4638      	mov	r0, r7
 8005512:	f104 060b 	add.w	r6, r4, #11
 8005516:	f000 f829 	bl	800556c <__malloc_unlock>
 800551a:	f026 0607 	bic.w	r6, r6, #7
 800551e:	1d23      	adds	r3, r4, #4
 8005520:	1af2      	subs	r2, r6, r3
 8005522:	d0ae      	beq.n	8005482 <_malloc_r+0x22>
 8005524:	1b9b      	subs	r3, r3, r6
 8005526:	50a3      	str	r3, [r4, r2]
 8005528:	e7ab      	b.n	8005482 <_malloc_r+0x22>
 800552a:	42a3      	cmp	r3, r4
 800552c:	6862      	ldr	r2, [r4, #4]
 800552e:	d1dd      	bne.n	80054ec <_malloc_r+0x8c>
 8005530:	f8c8 2000 	str.w	r2, [r8]
 8005534:	e7ec      	b.n	8005510 <_malloc_r+0xb0>
 8005536:	4623      	mov	r3, r4
 8005538:	6864      	ldr	r4, [r4, #4]
 800553a:	e7ac      	b.n	8005496 <_malloc_r+0x36>
 800553c:	4634      	mov	r4, r6
 800553e:	6876      	ldr	r6, [r6, #4]
 8005540:	e7b4      	b.n	80054ac <_malloc_r+0x4c>
 8005542:	4613      	mov	r3, r2
 8005544:	e7cc      	b.n	80054e0 <_malloc_r+0x80>
 8005546:	230c      	movs	r3, #12
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4638      	mov	r0, r7
 800554c:	f000 f80e 	bl	800556c <__malloc_unlock>
 8005550:	e797      	b.n	8005482 <_malloc_r+0x22>
 8005552:	6025      	str	r5, [r4, #0]
 8005554:	e7dc      	b.n	8005510 <_malloc_r+0xb0>
 8005556:	605b      	str	r3, [r3, #4]
 8005558:	deff      	udf	#255	; 0xff
 800555a:	bf00      	nop
 800555c:	20000300 	.word	0x20000300

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_lock+0x8>)
 8005562:	f7ff bf0e 	b.w	8005382 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	200002fc 	.word	0x200002fc

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_unlock+0x8>)
 800556e:	f7ff bf09 	b.w	8005384 <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	200002fc 	.word	0x200002fc

08005578 <__sfputc_r>:
 8005578:	6893      	ldr	r3, [r2, #8]
 800557a:	3b01      	subs	r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	b410      	push	{r4}
 8005580:	6093      	str	r3, [r2, #8]
 8005582:	da08      	bge.n	8005596 <__sfputc_r+0x1e>
 8005584:	6994      	ldr	r4, [r2, #24]
 8005586:	42a3      	cmp	r3, r4
 8005588:	db01      	blt.n	800558e <__sfputc_r+0x16>
 800558a:	290a      	cmp	r1, #10
 800558c:	d103      	bne.n	8005596 <__sfputc_r+0x1e>
 800558e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005592:	f000 bb73 	b.w	8005c7c <__swbuf_r>
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	1c58      	adds	r0, r3, #1
 800559a:	6010      	str	r0, [r2, #0]
 800559c:	7019      	strb	r1, [r3, #0]
 800559e:	4608      	mov	r0, r1
 80055a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <__sfputs_r>:
 80055a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a8:	4606      	mov	r6, r0
 80055aa:	460f      	mov	r7, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	18d5      	adds	r5, r2, r3
 80055b0:	42ac      	cmp	r4, r5
 80055b2:	d101      	bne.n	80055b8 <__sfputs_r+0x12>
 80055b4:	2000      	movs	r0, #0
 80055b6:	e007      	b.n	80055c8 <__sfputs_r+0x22>
 80055b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055bc:	463a      	mov	r2, r7
 80055be:	4630      	mov	r0, r6
 80055c0:	f7ff ffda 	bl	8005578 <__sfputc_r>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d1f3      	bne.n	80055b0 <__sfputs_r+0xa>
 80055c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080055cc <_vfiprintf_r>:
 80055cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	460d      	mov	r5, r1
 80055d2:	b09d      	sub	sp, #116	; 0x74
 80055d4:	4614      	mov	r4, r2
 80055d6:	4698      	mov	r8, r3
 80055d8:	4606      	mov	r6, r0
 80055da:	b118      	cbz	r0, 80055e4 <_vfiprintf_r+0x18>
 80055dc:	6a03      	ldr	r3, [r0, #32]
 80055de:	b90b      	cbnz	r3, 80055e4 <_vfiprintf_r+0x18>
 80055e0:	f7ff fdca 	bl	8005178 <__sinit>
 80055e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055e6:	07d9      	lsls	r1, r3, #31
 80055e8:	d405      	bmi.n	80055f6 <_vfiprintf_r+0x2a>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	059a      	lsls	r2, r3, #22
 80055ee:	d402      	bmi.n	80055f6 <_vfiprintf_r+0x2a>
 80055f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055f2:	f7ff fec6 	bl	8005382 <__retarget_lock_acquire_recursive>
 80055f6:	89ab      	ldrh	r3, [r5, #12]
 80055f8:	071b      	lsls	r3, r3, #28
 80055fa:	d501      	bpl.n	8005600 <_vfiprintf_r+0x34>
 80055fc:	692b      	ldr	r3, [r5, #16]
 80055fe:	b99b      	cbnz	r3, 8005628 <_vfiprintf_r+0x5c>
 8005600:	4629      	mov	r1, r5
 8005602:	4630      	mov	r0, r6
 8005604:	f000 fb78 	bl	8005cf8 <__swsetup_r>
 8005608:	b170      	cbz	r0, 8005628 <_vfiprintf_r+0x5c>
 800560a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800560c:	07dc      	lsls	r4, r3, #31
 800560e:	d504      	bpl.n	800561a <_vfiprintf_r+0x4e>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	b01d      	add	sp, #116	; 0x74
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	89ab      	ldrh	r3, [r5, #12]
 800561c:	0598      	lsls	r0, r3, #22
 800561e:	d4f7      	bmi.n	8005610 <_vfiprintf_r+0x44>
 8005620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005622:	f7ff feaf 	bl	8005384 <__retarget_lock_release_recursive>
 8005626:	e7f3      	b.n	8005610 <_vfiprintf_r+0x44>
 8005628:	2300      	movs	r3, #0
 800562a:	9309      	str	r3, [sp, #36]	; 0x24
 800562c:	2320      	movs	r3, #32
 800562e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005632:	f8cd 800c 	str.w	r8, [sp, #12]
 8005636:	2330      	movs	r3, #48	; 0x30
 8005638:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80057ec <_vfiprintf_r+0x220>
 800563c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005640:	f04f 0901 	mov.w	r9, #1
 8005644:	4623      	mov	r3, r4
 8005646:	469a      	mov	sl, r3
 8005648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564c:	b10a      	cbz	r2, 8005652 <_vfiprintf_r+0x86>
 800564e:	2a25      	cmp	r2, #37	; 0x25
 8005650:	d1f9      	bne.n	8005646 <_vfiprintf_r+0x7a>
 8005652:	ebba 0b04 	subs.w	fp, sl, r4
 8005656:	d00b      	beq.n	8005670 <_vfiprintf_r+0xa4>
 8005658:	465b      	mov	r3, fp
 800565a:	4622      	mov	r2, r4
 800565c:	4629      	mov	r1, r5
 800565e:	4630      	mov	r0, r6
 8005660:	f7ff ffa1 	bl	80055a6 <__sfputs_r>
 8005664:	3001      	adds	r0, #1
 8005666:	f000 80a9 	beq.w	80057bc <_vfiprintf_r+0x1f0>
 800566a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566c:	445a      	add	r2, fp
 800566e:	9209      	str	r2, [sp, #36]	; 0x24
 8005670:	f89a 3000 	ldrb.w	r3, [sl]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a1 	beq.w	80057bc <_vfiprintf_r+0x1f0>
 800567a:	2300      	movs	r3, #0
 800567c:	f04f 32ff 	mov.w	r2, #4294967295
 8005680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005684:	f10a 0a01 	add.w	sl, sl, #1
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	9307      	str	r3, [sp, #28]
 800568c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005690:	931a      	str	r3, [sp, #104]	; 0x68
 8005692:	4654      	mov	r4, sl
 8005694:	2205      	movs	r2, #5
 8005696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569a:	4854      	ldr	r0, [pc, #336]	; (80057ec <_vfiprintf_r+0x220>)
 800569c:	f7fa fda8 	bl	80001f0 <memchr>
 80056a0:	9a04      	ldr	r2, [sp, #16]
 80056a2:	b9d8      	cbnz	r0, 80056dc <_vfiprintf_r+0x110>
 80056a4:	06d1      	lsls	r1, r2, #27
 80056a6:	bf44      	itt	mi
 80056a8:	2320      	movmi	r3, #32
 80056aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ae:	0713      	lsls	r3, r2, #28
 80056b0:	bf44      	itt	mi
 80056b2:	232b      	movmi	r3, #43	; 0x2b
 80056b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b8:	f89a 3000 	ldrb.w	r3, [sl]
 80056bc:	2b2a      	cmp	r3, #42	; 0x2a
 80056be:	d015      	beq.n	80056ec <_vfiprintf_r+0x120>
 80056c0:	9a07      	ldr	r2, [sp, #28]
 80056c2:	4654      	mov	r4, sl
 80056c4:	2000      	movs	r0, #0
 80056c6:	f04f 0c0a 	mov.w	ip, #10
 80056ca:	4621      	mov	r1, r4
 80056cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056d0:	3b30      	subs	r3, #48	; 0x30
 80056d2:	2b09      	cmp	r3, #9
 80056d4:	d94d      	bls.n	8005772 <_vfiprintf_r+0x1a6>
 80056d6:	b1b0      	cbz	r0, 8005706 <_vfiprintf_r+0x13a>
 80056d8:	9207      	str	r2, [sp, #28]
 80056da:	e014      	b.n	8005706 <_vfiprintf_r+0x13a>
 80056dc:	eba0 0308 	sub.w	r3, r0, r8
 80056e0:	fa09 f303 	lsl.w	r3, r9, r3
 80056e4:	4313      	orrs	r3, r2
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	46a2      	mov	sl, r4
 80056ea:	e7d2      	b.n	8005692 <_vfiprintf_r+0xc6>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	1d19      	adds	r1, r3, #4
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	9103      	str	r1, [sp, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bfbb      	ittet	lt
 80056f8:	425b      	neglt	r3, r3
 80056fa:	f042 0202 	orrlt.w	r2, r2, #2
 80056fe:	9307      	strge	r3, [sp, #28]
 8005700:	9307      	strlt	r3, [sp, #28]
 8005702:	bfb8      	it	lt
 8005704:	9204      	strlt	r2, [sp, #16]
 8005706:	7823      	ldrb	r3, [r4, #0]
 8005708:	2b2e      	cmp	r3, #46	; 0x2e
 800570a:	d10c      	bne.n	8005726 <_vfiprintf_r+0x15a>
 800570c:	7863      	ldrb	r3, [r4, #1]
 800570e:	2b2a      	cmp	r3, #42	; 0x2a
 8005710:	d134      	bne.n	800577c <_vfiprintf_r+0x1b0>
 8005712:	9b03      	ldr	r3, [sp, #12]
 8005714:	1d1a      	adds	r2, r3, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	9203      	str	r2, [sp, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	bfb8      	it	lt
 800571e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005722:	3402      	adds	r4, #2
 8005724:	9305      	str	r3, [sp, #20]
 8005726:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80057fc <_vfiprintf_r+0x230>
 800572a:	7821      	ldrb	r1, [r4, #0]
 800572c:	2203      	movs	r2, #3
 800572e:	4650      	mov	r0, sl
 8005730:	f7fa fd5e 	bl	80001f0 <memchr>
 8005734:	b138      	cbz	r0, 8005746 <_vfiprintf_r+0x17a>
 8005736:	9b04      	ldr	r3, [sp, #16]
 8005738:	eba0 000a 	sub.w	r0, r0, sl
 800573c:	2240      	movs	r2, #64	; 0x40
 800573e:	4082      	lsls	r2, r0
 8005740:	4313      	orrs	r3, r2
 8005742:	3401      	adds	r4, #1
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574a:	4829      	ldr	r0, [pc, #164]	; (80057f0 <_vfiprintf_r+0x224>)
 800574c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005750:	2206      	movs	r2, #6
 8005752:	f7fa fd4d 	bl	80001f0 <memchr>
 8005756:	2800      	cmp	r0, #0
 8005758:	d03f      	beq.n	80057da <_vfiprintf_r+0x20e>
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <_vfiprintf_r+0x228>)
 800575c:	bb1b      	cbnz	r3, 80057a6 <_vfiprintf_r+0x1da>
 800575e:	9b03      	ldr	r3, [sp, #12]
 8005760:	3307      	adds	r3, #7
 8005762:	f023 0307 	bic.w	r3, r3, #7
 8005766:	3308      	adds	r3, #8
 8005768:	9303      	str	r3, [sp, #12]
 800576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576c:	443b      	add	r3, r7
 800576e:	9309      	str	r3, [sp, #36]	; 0x24
 8005770:	e768      	b.n	8005644 <_vfiprintf_r+0x78>
 8005772:	fb0c 3202 	mla	r2, ip, r2, r3
 8005776:	460c      	mov	r4, r1
 8005778:	2001      	movs	r0, #1
 800577a:	e7a6      	b.n	80056ca <_vfiprintf_r+0xfe>
 800577c:	2300      	movs	r3, #0
 800577e:	3401      	adds	r4, #1
 8005780:	9305      	str	r3, [sp, #20]
 8005782:	4619      	mov	r1, r3
 8005784:	f04f 0c0a 	mov.w	ip, #10
 8005788:	4620      	mov	r0, r4
 800578a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578e:	3a30      	subs	r2, #48	; 0x30
 8005790:	2a09      	cmp	r2, #9
 8005792:	d903      	bls.n	800579c <_vfiprintf_r+0x1d0>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0c6      	beq.n	8005726 <_vfiprintf_r+0x15a>
 8005798:	9105      	str	r1, [sp, #20]
 800579a:	e7c4      	b.n	8005726 <_vfiprintf_r+0x15a>
 800579c:	fb0c 2101 	mla	r1, ip, r1, r2
 80057a0:	4604      	mov	r4, r0
 80057a2:	2301      	movs	r3, #1
 80057a4:	e7f0      	b.n	8005788 <_vfiprintf_r+0x1bc>
 80057a6:	ab03      	add	r3, sp, #12
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	462a      	mov	r2, r5
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <_vfiprintf_r+0x22c>)
 80057ae:	a904      	add	r1, sp, #16
 80057b0:	4630      	mov	r0, r6
 80057b2:	f3af 8000 	nop.w
 80057b6:	4607      	mov	r7, r0
 80057b8:	1c78      	adds	r0, r7, #1
 80057ba:	d1d6      	bne.n	800576a <_vfiprintf_r+0x19e>
 80057bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057be:	07d9      	lsls	r1, r3, #31
 80057c0:	d405      	bmi.n	80057ce <_vfiprintf_r+0x202>
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	059a      	lsls	r2, r3, #22
 80057c6:	d402      	bmi.n	80057ce <_vfiprintf_r+0x202>
 80057c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ca:	f7ff fddb 	bl	8005384 <__retarget_lock_release_recursive>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	065b      	lsls	r3, r3, #25
 80057d2:	f53f af1d 	bmi.w	8005610 <_vfiprintf_r+0x44>
 80057d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d8:	e71c      	b.n	8005614 <_vfiprintf_r+0x48>
 80057da:	ab03      	add	r3, sp, #12
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	462a      	mov	r2, r5
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <_vfiprintf_r+0x22c>)
 80057e2:	a904      	add	r1, sp, #16
 80057e4:	4630      	mov	r0, r6
 80057e6:	f000 f879 	bl	80058dc <_printf_i>
 80057ea:	e7e4      	b.n	80057b6 <_vfiprintf_r+0x1ea>
 80057ec:	08006d9c 	.word	0x08006d9c
 80057f0:	08006da6 	.word	0x08006da6
 80057f4:	00000000 	.word	0x00000000
 80057f8:	080055a7 	.word	0x080055a7
 80057fc:	08006da2 	.word	0x08006da2

08005800 <_printf_common>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	4616      	mov	r6, r2
 8005806:	4699      	mov	r9, r3
 8005808:	688a      	ldr	r2, [r1, #8]
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005810:	4293      	cmp	r3, r2
 8005812:	bfb8      	it	lt
 8005814:	4613      	movlt	r3, r2
 8005816:	6033      	str	r3, [r6, #0]
 8005818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800581c:	4607      	mov	r7, r0
 800581e:	460c      	mov	r4, r1
 8005820:	b10a      	cbz	r2, 8005826 <_printf_common+0x26>
 8005822:	3301      	adds	r3, #1
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	0699      	lsls	r1, r3, #26
 800582a:	bf42      	ittt	mi
 800582c:	6833      	ldrmi	r3, [r6, #0]
 800582e:	3302      	addmi	r3, #2
 8005830:	6033      	strmi	r3, [r6, #0]
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	f015 0506 	ands.w	r5, r5, #6
 8005838:	d106      	bne.n	8005848 <_printf_common+0x48>
 800583a:	f104 0a19 	add.w	sl, r4, #25
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ab      	cmp	r3, r5
 8005846:	dc26      	bgt.n	8005896 <_printf_common+0x96>
 8005848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800584c:	1e13      	subs	r3, r2, #0
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	bf18      	it	ne
 8005852:	2301      	movne	r3, #1
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d42b      	bmi.n	80058b0 <_printf_common+0xb0>
 8005858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800585c:	4649      	mov	r1, r9
 800585e:	4638      	mov	r0, r7
 8005860:	47c0      	blx	r8
 8005862:	3001      	adds	r0, #1
 8005864:	d01e      	beq.n	80058a4 <_printf_common+0xa4>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf02      	ittt	eq
 8005872:	68e5      	ldreq	r5, [r4, #12]
 8005874:	6833      	ldreq	r3, [r6, #0]
 8005876:	1aed      	subeq	r5, r5, r3
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	bf0c      	ite	eq
 800587c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005880:	2500      	movne	r5, #0
 8005882:	4293      	cmp	r3, r2
 8005884:	bfc4      	itt	gt
 8005886:	1a9b      	subgt	r3, r3, r2
 8005888:	18ed      	addgt	r5, r5, r3
 800588a:	2600      	movs	r6, #0
 800588c:	341a      	adds	r4, #26
 800588e:	42b5      	cmp	r5, r6
 8005890:	d11a      	bne.n	80058c8 <_printf_common+0xc8>
 8005892:	2000      	movs	r0, #0
 8005894:	e008      	b.n	80058a8 <_printf_common+0xa8>
 8005896:	2301      	movs	r3, #1
 8005898:	4652      	mov	r2, sl
 800589a:	4649      	mov	r1, r9
 800589c:	4638      	mov	r0, r7
 800589e:	47c0      	blx	r8
 80058a0:	3001      	adds	r0, #1
 80058a2:	d103      	bne.n	80058ac <_printf_common+0xac>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7c6      	b.n	800583e <_printf_common+0x3e>
 80058b0:	18e1      	adds	r1, r4, r3
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	2030      	movs	r0, #48	; 0x30
 80058b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ba:	4422      	add	r2, r4
 80058bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058c4:	3302      	adds	r3, #2
 80058c6:	e7c7      	b.n	8005858 <_printf_common+0x58>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4622      	mov	r2, r4
 80058cc:	4649      	mov	r1, r9
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c0      	blx	r8
 80058d2:	3001      	adds	r0, #1
 80058d4:	d0e6      	beq.n	80058a4 <_printf_common+0xa4>
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7d9      	b.n	800588e <_printf_common+0x8e>
	...

080058dc <_printf_i>:
 80058dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	7e0f      	ldrb	r7, [r1, #24]
 80058e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058e4:	2f78      	cmp	r7, #120	; 0x78
 80058e6:	4691      	mov	r9, r2
 80058e8:	4680      	mov	r8, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	469a      	mov	sl, r3
 80058ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058f2:	d807      	bhi.n	8005904 <_printf_i+0x28>
 80058f4:	2f62      	cmp	r7, #98	; 0x62
 80058f6:	d80a      	bhi.n	800590e <_printf_i+0x32>
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	f000 80d4 	beq.w	8005aa6 <_printf_i+0x1ca>
 80058fe:	2f58      	cmp	r7, #88	; 0x58
 8005900:	f000 80c0 	beq.w	8005a84 <_printf_i+0x1a8>
 8005904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800590c:	e03a      	b.n	8005984 <_printf_i+0xa8>
 800590e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005912:	2b15      	cmp	r3, #21
 8005914:	d8f6      	bhi.n	8005904 <_printf_i+0x28>
 8005916:	a101      	add	r1, pc, #4	; (adr r1, 800591c <_printf_i+0x40>)
 8005918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800591c:	08005975 	.word	0x08005975
 8005920:	08005989 	.word	0x08005989
 8005924:	08005905 	.word	0x08005905
 8005928:	08005905 	.word	0x08005905
 800592c:	08005905 	.word	0x08005905
 8005930:	08005905 	.word	0x08005905
 8005934:	08005989 	.word	0x08005989
 8005938:	08005905 	.word	0x08005905
 800593c:	08005905 	.word	0x08005905
 8005940:	08005905 	.word	0x08005905
 8005944:	08005905 	.word	0x08005905
 8005948:	08005a8d 	.word	0x08005a8d
 800594c:	080059b5 	.word	0x080059b5
 8005950:	08005a47 	.word	0x08005a47
 8005954:	08005905 	.word	0x08005905
 8005958:	08005905 	.word	0x08005905
 800595c:	08005aaf 	.word	0x08005aaf
 8005960:	08005905 	.word	0x08005905
 8005964:	080059b5 	.word	0x080059b5
 8005968:	08005905 	.word	0x08005905
 800596c:	08005905 	.word	0x08005905
 8005970:	08005a4f 	.word	0x08005a4f
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005984:	2301      	movs	r3, #1
 8005986:	e09f      	b.n	8005ac8 <_printf_i+0x1ec>
 8005988:	6820      	ldr	r0, [r4, #0]
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	0607      	lsls	r7, r0, #24
 800598e:	f103 0104 	add.w	r1, r3, #4
 8005992:	6029      	str	r1, [r5, #0]
 8005994:	d501      	bpl.n	800599a <_printf_i+0xbe>
 8005996:	681e      	ldr	r6, [r3, #0]
 8005998:	e003      	b.n	80059a2 <_printf_i+0xc6>
 800599a:	0646      	lsls	r6, r0, #25
 800599c:	d5fb      	bpl.n	8005996 <_printf_i+0xba>
 800599e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80059a2:	2e00      	cmp	r6, #0
 80059a4:	da03      	bge.n	80059ae <_printf_i+0xd2>
 80059a6:	232d      	movs	r3, #45	; 0x2d
 80059a8:	4276      	negs	r6, r6
 80059aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ae:	485a      	ldr	r0, [pc, #360]	; (8005b18 <_printf_i+0x23c>)
 80059b0:	230a      	movs	r3, #10
 80059b2:	e012      	b.n	80059da <_printf_i+0xfe>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	6820      	ldr	r0, [r4, #0]
 80059b8:	1d19      	adds	r1, r3, #4
 80059ba:	6029      	str	r1, [r5, #0]
 80059bc:	0605      	lsls	r5, r0, #24
 80059be:	d501      	bpl.n	80059c4 <_printf_i+0xe8>
 80059c0:	681e      	ldr	r6, [r3, #0]
 80059c2:	e002      	b.n	80059ca <_printf_i+0xee>
 80059c4:	0641      	lsls	r1, r0, #25
 80059c6:	d5fb      	bpl.n	80059c0 <_printf_i+0xe4>
 80059c8:	881e      	ldrh	r6, [r3, #0]
 80059ca:	4853      	ldr	r0, [pc, #332]	; (8005b18 <_printf_i+0x23c>)
 80059cc:	2f6f      	cmp	r7, #111	; 0x6f
 80059ce:	bf0c      	ite	eq
 80059d0:	2308      	moveq	r3, #8
 80059d2:	230a      	movne	r3, #10
 80059d4:	2100      	movs	r1, #0
 80059d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059da:	6865      	ldr	r5, [r4, #4]
 80059dc:	60a5      	str	r5, [r4, #8]
 80059de:	2d00      	cmp	r5, #0
 80059e0:	bfa2      	ittt	ge
 80059e2:	6821      	ldrge	r1, [r4, #0]
 80059e4:	f021 0104 	bicge.w	r1, r1, #4
 80059e8:	6021      	strge	r1, [r4, #0]
 80059ea:	b90e      	cbnz	r6, 80059f0 <_printf_i+0x114>
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d04b      	beq.n	8005a88 <_printf_i+0x1ac>
 80059f0:	4615      	mov	r5, r2
 80059f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059f6:	fb03 6711 	mls	r7, r3, r1, r6
 80059fa:	5dc7      	ldrb	r7, [r0, r7]
 80059fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a00:	4637      	mov	r7, r6
 8005a02:	42bb      	cmp	r3, r7
 8005a04:	460e      	mov	r6, r1
 8005a06:	d9f4      	bls.n	80059f2 <_printf_i+0x116>
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d10b      	bne.n	8005a24 <_printf_i+0x148>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	07de      	lsls	r6, r3, #31
 8005a10:	d508      	bpl.n	8005a24 <_printf_i+0x148>
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	6861      	ldr	r1, [r4, #4]
 8005a16:	4299      	cmp	r1, r3
 8005a18:	bfde      	ittt	le
 8005a1a:	2330      	movle	r3, #48	; 0x30
 8005a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a24:	1b52      	subs	r2, r2, r5
 8005a26:	6122      	str	r2, [r4, #16]
 8005a28:	f8cd a000 	str.w	sl, [sp]
 8005a2c:	464b      	mov	r3, r9
 8005a2e:	aa03      	add	r2, sp, #12
 8005a30:	4621      	mov	r1, r4
 8005a32:	4640      	mov	r0, r8
 8005a34:	f7ff fee4 	bl	8005800 <_printf_common>
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d14a      	bne.n	8005ad2 <_printf_i+0x1f6>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	b004      	add	sp, #16
 8005a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f043 0320 	orr.w	r3, r3, #32
 8005a4c:	6023      	str	r3, [r4, #0]
 8005a4e:	4833      	ldr	r0, [pc, #204]	; (8005b1c <_printf_i+0x240>)
 8005a50:	2778      	movs	r7, #120	; 0x78
 8005a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	6829      	ldr	r1, [r5, #0]
 8005a5a:	061f      	lsls	r7, r3, #24
 8005a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a60:	d402      	bmi.n	8005a68 <_printf_i+0x18c>
 8005a62:	065f      	lsls	r7, r3, #25
 8005a64:	bf48      	it	mi
 8005a66:	b2b6      	uxthmi	r6, r6
 8005a68:	07df      	lsls	r7, r3, #31
 8005a6a:	bf48      	it	mi
 8005a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a70:	6029      	str	r1, [r5, #0]
 8005a72:	bf48      	it	mi
 8005a74:	6023      	strmi	r3, [r4, #0]
 8005a76:	b91e      	cbnz	r6, 8005a80 <_printf_i+0x1a4>
 8005a78:	6823      	ldr	r3, [r4, #0]
 8005a7a:	f023 0320 	bic.w	r3, r3, #32
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	2310      	movs	r3, #16
 8005a82:	e7a7      	b.n	80059d4 <_printf_i+0xf8>
 8005a84:	4824      	ldr	r0, [pc, #144]	; (8005b18 <_printf_i+0x23c>)
 8005a86:	e7e4      	b.n	8005a52 <_printf_i+0x176>
 8005a88:	4615      	mov	r5, r2
 8005a8a:	e7bd      	b.n	8005a08 <_printf_i+0x12c>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	6826      	ldr	r6, [r4, #0]
 8005a90:	6961      	ldr	r1, [r4, #20]
 8005a92:	1d18      	adds	r0, r3, #4
 8005a94:	6028      	str	r0, [r5, #0]
 8005a96:	0635      	lsls	r5, r6, #24
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	d501      	bpl.n	8005aa0 <_printf_i+0x1c4>
 8005a9c:	6019      	str	r1, [r3, #0]
 8005a9e:	e002      	b.n	8005aa6 <_printf_i+0x1ca>
 8005aa0:	0670      	lsls	r0, r6, #25
 8005aa2:	d5fb      	bpl.n	8005a9c <_printf_i+0x1c0>
 8005aa4:	8019      	strh	r1, [r3, #0]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6123      	str	r3, [r4, #16]
 8005aaa:	4615      	mov	r5, r2
 8005aac:	e7bc      	b.n	8005a28 <_printf_i+0x14c>
 8005aae:	682b      	ldr	r3, [r5, #0]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	681d      	ldr	r5, [r3, #0]
 8005ab6:	6862      	ldr	r2, [r4, #4]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7fa fb98 	bl	80001f0 <memchr>
 8005ac0:	b108      	cbz	r0, 8005ac6 <_printf_i+0x1ea>
 8005ac2:	1b40      	subs	r0, r0, r5
 8005ac4:	6060      	str	r0, [r4, #4]
 8005ac6:	6863      	ldr	r3, [r4, #4]
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	2300      	movs	r3, #0
 8005acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad0:	e7aa      	b.n	8005a28 <_printf_i+0x14c>
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	462a      	mov	r2, r5
 8005ad6:	4649      	mov	r1, r9
 8005ad8:	4640      	mov	r0, r8
 8005ada:	47d0      	blx	sl
 8005adc:	3001      	adds	r0, #1
 8005ade:	d0ad      	beq.n	8005a3c <_printf_i+0x160>
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	079b      	lsls	r3, r3, #30
 8005ae4:	d413      	bmi.n	8005b0e <_printf_i+0x232>
 8005ae6:	68e0      	ldr	r0, [r4, #12]
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	4298      	cmp	r0, r3
 8005aec:	bfb8      	it	lt
 8005aee:	4618      	movlt	r0, r3
 8005af0:	e7a6      	b.n	8005a40 <_printf_i+0x164>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4632      	mov	r2, r6
 8005af6:	4649      	mov	r1, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	47d0      	blx	sl
 8005afc:	3001      	adds	r0, #1
 8005afe:	d09d      	beq.n	8005a3c <_printf_i+0x160>
 8005b00:	3501      	adds	r5, #1
 8005b02:	68e3      	ldr	r3, [r4, #12]
 8005b04:	9903      	ldr	r1, [sp, #12]
 8005b06:	1a5b      	subs	r3, r3, r1
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	dcf2      	bgt.n	8005af2 <_printf_i+0x216>
 8005b0c:	e7eb      	b.n	8005ae6 <_printf_i+0x20a>
 8005b0e:	2500      	movs	r5, #0
 8005b10:	f104 0619 	add.w	r6, r4, #25
 8005b14:	e7f5      	b.n	8005b02 <_printf_i+0x226>
 8005b16:	bf00      	nop
 8005b18:	08006dad 	.word	0x08006dad
 8005b1c:	08006dbe 	.word	0x08006dbe

08005b20 <__sflush_r>:
 8005b20:	898a      	ldrh	r2, [r1, #12]
 8005b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b26:	4605      	mov	r5, r0
 8005b28:	0710      	lsls	r0, r2, #28
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	d458      	bmi.n	8005be0 <__sflush_r+0xc0>
 8005b2e:	684b      	ldr	r3, [r1, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dc05      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dc02      	bgt.n	8005b40 <__sflush_r+0x20>
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d0f9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005b46:	2300      	movs	r3, #0
 8005b48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b4c:	682f      	ldr	r7, [r5, #0]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	602b      	str	r3, [r5, #0]
 8005b52:	d032      	beq.n	8005bba <__sflush_r+0x9a>
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	075a      	lsls	r2, r3, #29
 8005b5a:	d505      	bpl.n	8005b68 <__sflush_r+0x48>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	1ac0      	subs	r0, r0, r3
 8005b60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b62:	b10b      	cbz	r3, 8005b68 <__sflush_r+0x48>
 8005b64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b66:	1ac0      	subs	r0, r0, r3
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b6e:	6a21      	ldr	r1, [r4, #32]
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b0      	blx	r6
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	d106      	bne.n	8005b88 <__sflush_r+0x68>
 8005b7a:	6829      	ldr	r1, [r5, #0]
 8005b7c:	291d      	cmp	r1, #29
 8005b7e:	d82b      	bhi.n	8005bd8 <__sflush_r+0xb8>
 8005b80:	4a29      	ldr	r2, [pc, #164]	; (8005c28 <__sflush_r+0x108>)
 8005b82:	410a      	asrs	r2, r1
 8005b84:	07d6      	lsls	r6, r2, #31
 8005b86:	d427      	bmi.n	8005bd8 <__sflush_r+0xb8>
 8005b88:	2200      	movs	r2, #0
 8005b8a:	6062      	str	r2, [r4, #4]
 8005b8c:	04d9      	lsls	r1, r3, #19
 8005b8e:	6922      	ldr	r2, [r4, #16]
 8005b90:	6022      	str	r2, [r4, #0]
 8005b92:	d504      	bpl.n	8005b9e <__sflush_r+0x7e>
 8005b94:	1c42      	adds	r2, r0, #1
 8005b96:	d101      	bne.n	8005b9c <__sflush_r+0x7c>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b903      	cbnz	r3, 8005b9e <__sflush_r+0x7e>
 8005b9c:	6560      	str	r0, [r4, #84]	; 0x54
 8005b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ba0:	602f      	str	r7, [r5, #0]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d0c9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005ba6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005baa:	4299      	cmp	r1, r3
 8005bac:	d002      	beq.n	8005bb4 <__sflush_r+0x94>
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f7ff fbea 	bl	8005388 <_free_r>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bb8:	e7c0      	b.n	8005b3c <__sflush_r+0x1c>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	47b0      	blx	r6
 8005bc0:	1c41      	adds	r1, r0, #1
 8005bc2:	d1c8      	bne.n	8005b56 <__sflush_r+0x36>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0c5      	beq.n	8005b56 <__sflush_r+0x36>
 8005bca:	2b1d      	cmp	r3, #29
 8005bcc:	d001      	beq.n	8005bd2 <__sflush_r+0xb2>
 8005bce:	2b16      	cmp	r3, #22
 8005bd0:	d101      	bne.n	8005bd6 <__sflush_r+0xb6>
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	e7b1      	b.n	8005b3a <__sflush_r+0x1a>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	e7ad      	b.n	8005b3c <__sflush_r+0x1c>
 8005be0:	690f      	ldr	r7, [r1, #16]
 8005be2:	2f00      	cmp	r7, #0
 8005be4:	d0a9      	beq.n	8005b3a <__sflush_r+0x1a>
 8005be6:	0793      	lsls	r3, r2, #30
 8005be8:	680e      	ldr	r6, [r1, #0]
 8005bea:	bf08      	it	eq
 8005bec:	694b      	ldreq	r3, [r1, #20]
 8005bee:	600f      	str	r7, [r1, #0]
 8005bf0:	bf18      	it	ne
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	eba6 0807 	sub.w	r8, r6, r7
 8005bf8:	608b      	str	r3, [r1, #8]
 8005bfa:	f1b8 0f00 	cmp.w	r8, #0
 8005bfe:	dd9c      	ble.n	8005b3a <__sflush_r+0x1a>
 8005c00:	6a21      	ldr	r1, [r4, #32]
 8005c02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c04:	4643      	mov	r3, r8
 8005c06:	463a      	mov	r2, r7
 8005c08:	4628      	mov	r0, r5
 8005c0a:	47b0      	blx	r6
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	dc06      	bgt.n	8005c1e <__sflush_r+0xfe>
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c16:	81a3      	strh	r3, [r4, #12]
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	e78e      	b.n	8005b3c <__sflush_r+0x1c>
 8005c1e:	4407      	add	r7, r0
 8005c20:	eba8 0800 	sub.w	r8, r8, r0
 8005c24:	e7e9      	b.n	8005bfa <__sflush_r+0xda>
 8005c26:	bf00      	nop
 8005c28:	dfbffffe 	.word	0xdfbffffe

08005c2c <_fflush_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	4605      	mov	r5, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b913      	cbnz	r3, 8005c3c <_fflush_r+0x10>
 8005c36:	2500      	movs	r5, #0
 8005c38:	4628      	mov	r0, r5
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	b118      	cbz	r0, 8005c46 <_fflush_r+0x1a>
 8005c3e:	6a03      	ldr	r3, [r0, #32]
 8005c40:	b90b      	cbnz	r3, 8005c46 <_fflush_r+0x1a>
 8005c42:	f7ff fa99 	bl	8005178 <__sinit>
 8005c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f3      	beq.n	8005c36 <_fflush_r+0xa>
 8005c4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c50:	07d0      	lsls	r0, r2, #31
 8005c52:	d404      	bmi.n	8005c5e <_fflush_r+0x32>
 8005c54:	0599      	lsls	r1, r3, #22
 8005c56:	d402      	bmi.n	8005c5e <_fflush_r+0x32>
 8005c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c5a:	f7ff fb92 	bl	8005382 <__retarget_lock_acquire_recursive>
 8005c5e:	4628      	mov	r0, r5
 8005c60:	4621      	mov	r1, r4
 8005c62:	f7ff ff5d 	bl	8005b20 <__sflush_r>
 8005c66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c68:	07da      	lsls	r2, r3, #31
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	d4e4      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	059b      	lsls	r3, r3, #22
 8005c72:	d4e1      	bmi.n	8005c38 <_fflush_r+0xc>
 8005c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c76:	f7ff fb85 	bl	8005384 <__retarget_lock_release_recursive>
 8005c7a:	e7dd      	b.n	8005c38 <_fflush_r+0xc>

08005c7c <__swbuf_r>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	460e      	mov	r6, r1
 8005c80:	4614      	mov	r4, r2
 8005c82:	4605      	mov	r5, r0
 8005c84:	b118      	cbz	r0, 8005c8e <__swbuf_r+0x12>
 8005c86:	6a03      	ldr	r3, [r0, #32]
 8005c88:	b90b      	cbnz	r3, 8005c8e <__swbuf_r+0x12>
 8005c8a:	f7ff fa75 	bl	8005178 <__sinit>
 8005c8e:	69a3      	ldr	r3, [r4, #24]
 8005c90:	60a3      	str	r3, [r4, #8]
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	071a      	lsls	r2, r3, #28
 8005c96:	d525      	bpl.n	8005ce4 <__swbuf_r+0x68>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	b31b      	cbz	r3, 8005ce4 <__swbuf_r+0x68>
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	1a98      	subs	r0, r3, r2
 8005ca2:	6963      	ldr	r3, [r4, #20]
 8005ca4:	b2f6      	uxtb	r6, r6
 8005ca6:	4283      	cmp	r3, r0
 8005ca8:	4637      	mov	r7, r6
 8005caa:	dc04      	bgt.n	8005cb6 <__swbuf_r+0x3a>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7ff ffbc 	bl	8005c2c <_fflush_r>
 8005cb4:	b9e0      	cbnz	r0, 8005cf0 <__swbuf_r+0x74>
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	60a3      	str	r3, [r4, #8]
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	6022      	str	r2, [r4, #0]
 8005cc2:	701e      	strb	r6, [r3, #0]
 8005cc4:	6962      	ldr	r2, [r4, #20]
 8005cc6:	1c43      	adds	r3, r0, #1
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d004      	beq.n	8005cd6 <__swbuf_r+0x5a>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	07db      	lsls	r3, r3, #31
 8005cd0:	d506      	bpl.n	8005ce0 <__swbuf_r+0x64>
 8005cd2:	2e0a      	cmp	r6, #10
 8005cd4:	d104      	bne.n	8005ce0 <__swbuf_r+0x64>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f7ff ffa7 	bl	8005c2c <_fflush_r>
 8005cde:	b938      	cbnz	r0, 8005cf0 <__swbuf_r+0x74>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f000 f806 	bl	8005cf8 <__swsetup_r>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d0d5      	beq.n	8005c9c <__swbuf_r+0x20>
 8005cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8005cf4:	e7f4      	b.n	8005ce0 <__swbuf_r+0x64>
	...

08005cf8 <__swsetup_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4b2a      	ldr	r3, [pc, #168]	; (8005da4 <__swsetup_r+0xac>)
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	460c      	mov	r4, r1
 8005d02:	b118      	cbz	r0, 8005d0c <__swsetup_r+0x14>
 8005d04:	6a03      	ldr	r3, [r0, #32]
 8005d06:	b90b      	cbnz	r3, 8005d0c <__swsetup_r+0x14>
 8005d08:	f7ff fa36 	bl	8005178 <__sinit>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d12:	0718      	lsls	r0, r3, #28
 8005d14:	d422      	bmi.n	8005d5c <__swsetup_r+0x64>
 8005d16:	06d9      	lsls	r1, r3, #27
 8005d18:	d407      	bmi.n	8005d2a <__swsetup_r+0x32>
 8005d1a:	2309      	movs	r3, #9
 8005d1c:	602b      	str	r3, [r5, #0]
 8005d1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d22:	81a3      	strh	r3, [r4, #12]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	e034      	b.n	8005d94 <__swsetup_r+0x9c>
 8005d2a:	0758      	lsls	r0, r3, #29
 8005d2c:	d512      	bpl.n	8005d54 <__swsetup_r+0x5c>
 8005d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d30:	b141      	cbz	r1, 8005d44 <__swsetup_r+0x4c>
 8005d32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d36:	4299      	cmp	r1, r3
 8005d38:	d002      	beq.n	8005d40 <__swsetup_r+0x48>
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f7ff fb24 	bl	8005388 <_free_r>
 8005d40:	2300      	movs	r3, #0
 8005d42:	6363      	str	r3, [r4, #52]	; 0x34
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d4a:	81a3      	strh	r3, [r4, #12]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	6063      	str	r3, [r4, #4]
 8005d50:	6923      	ldr	r3, [r4, #16]
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f043 0308 	orr.w	r3, r3, #8
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	b94b      	cbnz	r3, 8005d74 <__swsetup_r+0x7c>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6a:	d003      	beq.n	8005d74 <__swsetup_r+0x7c>
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 f850 	bl	8005e14 <__smakebuf_r>
 8005d74:	89a0      	ldrh	r0, [r4, #12]
 8005d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d7a:	f010 0301 	ands.w	r3, r0, #1
 8005d7e:	d00a      	beq.n	8005d96 <__swsetup_r+0x9e>
 8005d80:	2300      	movs	r3, #0
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	6963      	ldr	r3, [r4, #20]
 8005d86:	425b      	negs	r3, r3
 8005d88:	61a3      	str	r3, [r4, #24]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b943      	cbnz	r3, 8005da0 <__swsetup_r+0xa8>
 8005d8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d92:	d1c4      	bne.n	8005d1e <__swsetup_r+0x26>
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	0781      	lsls	r1, r0, #30
 8005d98:	bf58      	it	pl
 8005d9a:	6963      	ldrpl	r3, [r4, #20]
 8005d9c:	60a3      	str	r3, [r4, #8]
 8005d9e:	e7f4      	b.n	8005d8a <__swsetup_r+0x92>
 8005da0:	2000      	movs	r0, #0
 8005da2:	e7f7      	b.n	8005d94 <__swsetup_r+0x9c>
 8005da4:	20000064 	.word	0x20000064

08005da8 <_sbrk_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4d06      	ldr	r5, [pc, #24]	; (8005dc4 <_sbrk_r+0x1c>)
 8005dac:	2300      	movs	r3, #0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	602b      	str	r3, [r5, #0]
 8005db4:	f7fb fa64 	bl	8001280 <_sbrk>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_sbrk_r+0x1a>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_sbrk_r+0x1a>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	200002f8 	.word	0x200002f8

08005dc8 <__swhatbuf_r>:
 8005dc8:	b570      	push	{r4, r5, r6, lr}
 8005dca:	460c      	mov	r4, r1
 8005dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dd0:	2900      	cmp	r1, #0
 8005dd2:	b096      	sub	sp, #88	; 0x58
 8005dd4:	4615      	mov	r5, r2
 8005dd6:	461e      	mov	r6, r3
 8005dd8:	da0d      	bge.n	8005df6 <__swhatbuf_r+0x2e>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005de0:	f04f 0100 	mov.w	r1, #0
 8005de4:	bf0c      	ite	eq
 8005de6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005dea:	2340      	movne	r3, #64	; 0x40
 8005dec:	2000      	movs	r0, #0
 8005dee:	6031      	str	r1, [r6, #0]
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	b016      	add	sp, #88	; 0x58
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	466a      	mov	r2, sp
 8005df8:	f000 f848 	bl	8005e8c <_fstat_r>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	dbec      	blt.n	8005dda <__swhatbuf_r+0x12>
 8005e00:	9901      	ldr	r1, [sp, #4]
 8005e02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e0a:	4259      	negs	r1, r3
 8005e0c:	4159      	adcs	r1, r3
 8005e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e12:	e7eb      	b.n	8005dec <__swhatbuf_r+0x24>

08005e14 <__smakebuf_r>:
 8005e14:	898b      	ldrh	r3, [r1, #12]
 8005e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e18:	079d      	lsls	r5, r3, #30
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	d507      	bpl.n	8005e30 <__smakebuf_r+0x1c>
 8005e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	6163      	str	r3, [r4, #20]
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd70      	pop	{r4, r5, r6, pc}
 8005e30:	ab01      	add	r3, sp, #4
 8005e32:	466a      	mov	r2, sp
 8005e34:	f7ff ffc8 	bl	8005dc8 <__swhatbuf_r>
 8005e38:	9900      	ldr	r1, [sp, #0]
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7ff fb0f 	bl	8005460 <_malloc_r>
 8005e42:	b948      	cbnz	r0, 8005e58 <__smakebuf_r+0x44>
 8005e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e48:	059a      	lsls	r2, r3, #22
 8005e4a:	d4ef      	bmi.n	8005e2c <__smakebuf_r+0x18>
 8005e4c:	f023 0303 	bic.w	r3, r3, #3
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	e7e3      	b.n	8005e20 <__smakebuf_r+0xc>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	6163      	str	r3, [r4, #20]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	6120      	str	r0, [r4, #16]
 8005e6a:	b15b      	cbz	r3, 8005e84 <__smakebuf_r+0x70>
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f81d 	bl	8005eb0 <_isatty_r>
 8005e76:	b128      	cbz	r0, 8005e84 <__smakebuf_r+0x70>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	431d      	orrs	r5, r3
 8005e88:	81a5      	strh	r5, [r4, #12]
 8005e8a:	e7cf      	b.n	8005e2c <__smakebuf_r+0x18>

08005e8c <_fstat_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d07      	ldr	r5, [pc, #28]	; (8005eac <_fstat_r+0x20>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	602b      	str	r3, [r5, #0]
 8005e9a:	f7fb f9c8 	bl	800122e <_fstat>
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d102      	bne.n	8005ea8 <_fstat_r+0x1c>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	b103      	cbz	r3, 8005ea8 <_fstat_r+0x1c>
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	bf00      	nop
 8005eac:	200002f8 	.word	0x200002f8

08005eb0 <_isatty_r>:
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	4d06      	ldr	r5, [pc, #24]	; (8005ecc <_isatty_r+0x1c>)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	4608      	mov	r0, r1
 8005eba:	602b      	str	r3, [r5, #0]
 8005ebc:	f7fb f9c7 	bl	800124e <_isatty>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_isatty_r+0x1a>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_isatty_r+0x1a>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	200002f8 	.word	0x200002f8

08005ed0 <pow>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	ed2d 8b02 	vpush	{d8}
 8005ed6:	eeb0 8a40 	vmov.f32	s16, s0
 8005eda:	eef0 8a60 	vmov.f32	s17, s1
 8005ede:	ec55 4b11 	vmov	r4, r5, d1
 8005ee2:	f000 f871 	bl	8005fc8 <__ieee754_pow>
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	462b      	mov	r3, r5
 8005eea:	4620      	mov	r0, r4
 8005eec:	4629      	mov	r1, r5
 8005eee:	ec57 6b10 	vmov	r6, r7, d0
 8005ef2:	f7fa fe23 	bl	8000b3c <__aeabi_dcmpun>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d13b      	bne.n	8005f72 <pow+0xa2>
 8005efa:	ec51 0b18 	vmov	r0, r1, d8
 8005efe:	2200      	movs	r2, #0
 8005f00:	2300      	movs	r3, #0
 8005f02:	f7fa fde9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f06:	b1b8      	cbz	r0, 8005f38 <pow+0x68>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f7fa fde2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d146      	bne.n	8005fa6 <pow+0xd6>
 8005f18:	ec45 4b10 	vmov	d0, r4, r5
 8005f1c:	f000 f848 	bl	8005fb0 <finite>
 8005f20:	b338      	cbz	r0, 8005f72 <pow+0xa2>
 8005f22:	2200      	movs	r2, #0
 8005f24:	2300      	movs	r3, #0
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa fddf 	bl	8000aec <__aeabi_dcmplt>
 8005f2e:	b300      	cbz	r0, 8005f72 <pow+0xa2>
 8005f30:	f7ff f9fc 	bl	800532c <__errno>
 8005f34:	2322      	movs	r3, #34	; 0x22
 8005f36:	e01b      	b.n	8005f70 <pow+0xa0>
 8005f38:	ec47 6b10 	vmov	d0, r6, r7
 8005f3c:	f000 f838 	bl	8005fb0 <finite>
 8005f40:	b9e0      	cbnz	r0, 8005f7c <pow+0xac>
 8005f42:	eeb0 0a48 	vmov.f32	s0, s16
 8005f46:	eef0 0a68 	vmov.f32	s1, s17
 8005f4a:	f000 f831 	bl	8005fb0 <finite>
 8005f4e:	b1a8      	cbz	r0, 8005f7c <pow+0xac>
 8005f50:	ec45 4b10 	vmov	d0, r4, r5
 8005f54:	f000 f82c 	bl	8005fb0 <finite>
 8005f58:	b180      	cbz	r0, 8005f7c <pow+0xac>
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7fa fdeb 	bl	8000b3c <__aeabi_dcmpun>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d0e2      	beq.n	8005f30 <pow+0x60>
 8005f6a:	f7ff f9df 	bl	800532c <__errno>
 8005f6e:	2321      	movs	r3, #33	; 0x21
 8005f70:	6003      	str	r3, [r0, #0]
 8005f72:	ecbd 8b02 	vpop	{d8}
 8005f76:	ec47 6b10 	vmov	d0, r6, r7
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4630      	mov	r0, r6
 8005f82:	4639      	mov	r1, r7
 8005f84:	f7fa fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d0f2      	beq.n	8005f72 <pow+0xa2>
 8005f8c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f90:	eef0 0a68 	vmov.f32	s1, s17
 8005f94:	f000 f80c 	bl	8005fb0 <finite>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d0ea      	beq.n	8005f72 <pow+0xa2>
 8005f9c:	ec45 4b10 	vmov	d0, r4, r5
 8005fa0:	f000 f806 	bl	8005fb0 <finite>
 8005fa4:	e7c3      	b.n	8005f2e <pow+0x5e>
 8005fa6:	4f01      	ldr	r7, [pc, #4]	; (8005fac <pow+0xdc>)
 8005fa8:	2600      	movs	r6, #0
 8005faa:	e7e2      	b.n	8005f72 <pow+0xa2>
 8005fac:	3ff00000 	.word	0x3ff00000

08005fb0 <finite>:
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	ed8d 0b00 	vstr	d0, [sp]
 8005fb6:	9801      	ldr	r0, [sp, #4]
 8005fb8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005fbc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005fc0:	0fc0      	lsrs	r0, r0, #31
 8005fc2:	b002      	add	sp, #8
 8005fc4:	4770      	bx	lr
	...

08005fc8 <__ieee754_pow>:
 8005fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	ed2d 8b06 	vpush	{d8-d10}
 8005fd0:	b089      	sub	sp, #36	; 0x24
 8005fd2:	ed8d 1b00 	vstr	d1, [sp]
 8005fd6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005fda:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005fde:	ea58 0102 	orrs.w	r1, r8, r2
 8005fe2:	ec57 6b10 	vmov	r6, r7, d0
 8005fe6:	d115      	bne.n	8006014 <__ieee754_pow+0x4c>
 8005fe8:	19b3      	adds	r3, r6, r6
 8005fea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005fee:	4152      	adcs	r2, r2
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	4b89      	ldr	r3, [pc, #548]	; (8006218 <__ieee754_pow+0x250>)
 8005ff4:	4193      	sbcs	r3, r2
 8005ff6:	f080 84d1 	bcs.w	800699c <__ieee754_pow+0x9d4>
 8005ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa f94b 	bl	800029c <__adddf3>
 8006006:	ec41 0b10 	vmov	d0, r0, r1
 800600a:	b009      	add	sp, #36	; 0x24
 800600c:	ecbd 8b06 	vpop	{d8-d10}
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	4b81      	ldr	r3, [pc, #516]	; (800621c <__ieee754_pow+0x254>)
 8006016:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800601a:	429c      	cmp	r4, r3
 800601c:	ee10 aa10 	vmov	sl, s0
 8006020:	463d      	mov	r5, r7
 8006022:	dc06      	bgt.n	8006032 <__ieee754_pow+0x6a>
 8006024:	d101      	bne.n	800602a <__ieee754_pow+0x62>
 8006026:	2e00      	cmp	r6, #0
 8006028:	d1e7      	bne.n	8005ffa <__ieee754_pow+0x32>
 800602a:	4598      	cmp	r8, r3
 800602c:	dc01      	bgt.n	8006032 <__ieee754_pow+0x6a>
 800602e:	d10f      	bne.n	8006050 <__ieee754_pow+0x88>
 8006030:	b172      	cbz	r2, 8006050 <__ieee754_pow+0x88>
 8006032:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006036:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800603a:	ea55 050a 	orrs.w	r5, r5, sl
 800603e:	d1dc      	bne.n	8005ffa <__ieee754_pow+0x32>
 8006040:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006044:	18db      	adds	r3, r3, r3
 8006046:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800604a:	4152      	adcs	r2, r2
 800604c:	429d      	cmp	r5, r3
 800604e:	e7d0      	b.n	8005ff2 <__ieee754_pow+0x2a>
 8006050:	2d00      	cmp	r5, #0
 8006052:	da3b      	bge.n	80060cc <__ieee754_pow+0x104>
 8006054:	4b72      	ldr	r3, [pc, #456]	; (8006220 <__ieee754_pow+0x258>)
 8006056:	4598      	cmp	r8, r3
 8006058:	dc51      	bgt.n	80060fe <__ieee754_pow+0x136>
 800605a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800605e:	4598      	cmp	r8, r3
 8006060:	f340 84ab 	ble.w	80069ba <__ieee754_pow+0x9f2>
 8006064:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006068:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800606c:	2b14      	cmp	r3, #20
 800606e:	dd0f      	ble.n	8006090 <__ieee754_pow+0xc8>
 8006070:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006074:	fa22 f103 	lsr.w	r1, r2, r3
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	4293      	cmp	r3, r2
 800607e:	f040 849c 	bne.w	80069ba <__ieee754_pow+0x9f2>
 8006082:	f001 0101 	and.w	r1, r1, #1
 8006086:	f1c1 0302 	rsb	r3, r1, #2
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	b182      	cbz	r2, 80060b0 <__ieee754_pow+0xe8>
 800608e:	e05f      	b.n	8006150 <__ieee754_pow+0x188>
 8006090:	2a00      	cmp	r2, #0
 8006092:	d15b      	bne.n	800614c <__ieee754_pow+0x184>
 8006094:	f1c3 0314 	rsb	r3, r3, #20
 8006098:	fa48 f103 	asr.w	r1, r8, r3
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	4543      	cmp	r3, r8
 80060a2:	f040 8487 	bne.w	80069b4 <__ieee754_pow+0x9ec>
 80060a6:	f001 0101 	and.w	r1, r1, #1
 80060aa:	f1c1 0302 	rsb	r3, r1, #2
 80060ae:	9304      	str	r3, [sp, #16]
 80060b0:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <__ieee754_pow+0x25c>)
 80060b2:	4598      	cmp	r8, r3
 80060b4:	d132      	bne.n	800611c <__ieee754_pow+0x154>
 80060b6:	f1b9 0f00 	cmp.w	r9, #0
 80060ba:	f280 8477 	bge.w	80069ac <__ieee754_pow+0x9e4>
 80060be:	4959      	ldr	r1, [pc, #356]	; (8006224 <__ieee754_pow+0x25c>)
 80060c0:	4632      	mov	r2, r6
 80060c2:	463b      	mov	r3, r7
 80060c4:	2000      	movs	r0, #0
 80060c6:	f7fa fbc9 	bl	800085c <__aeabi_ddiv>
 80060ca:	e79c      	b.n	8006006 <__ieee754_pow+0x3e>
 80060cc:	2300      	movs	r3, #0
 80060ce:	9304      	str	r3, [sp, #16]
 80060d0:	2a00      	cmp	r2, #0
 80060d2:	d13d      	bne.n	8006150 <__ieee754_pow+0x188>
 80060d4:	4b51      	ldr	r3, [pc, #324]	; (800621c <__ieee754_pow+0x254>)
 80060d6:	4598      	cmp	r8, r3
 80060d8:	d1ea      	bne.n	80060b0 <__ieee754_pow+0xe8>
 80060da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80060de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80060e2:	ea53 030a 	orrs.w	r3, r3, sl
 80060e6:	f000 8459 	beq.w	800699c <__ieee754_pow+0x9d4>
 80060ea:	4b4f      	ldr	r3, [pc, #316]	; (8006228 <__ieee754_pow+0x260>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	dd08      	ble.n	8006102 <__ieee754_pow+0x13a>
 80060f0:	f1b9 0f00 	cmp.w	r9, #0
 80060f4:	f2c0 8456 	blt.w	80069a4 <__ieee754_pow+0x9dc>
 80060f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060fc:	e783      	b.n	8006006 <__ieee754_pow+0x3e>
 80060fe:	2302      	movs	r3, #2
 8006100:	e7e5      	b.n	80060ce <__ieee754_pow+0x106>
 8006102:	f1b9 0f00 	cmp.w	r9, #0
 8006106:	f04f 0000 	mov.w	r0, #0
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	f6bf af7a 	bge.w	8006006 <__ieee754_pow+0x3e>
 8006112:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006116:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800611a:	e774      	b.n	8006006 <__ieee754_pow+0x3e>
 800611c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006120:	d106      	bne.n	8006130 <__ieee754_pow+0x168>
 8006122:	4632      	mov	r2, r6
 8006124:	463b      	mov	r3, r7
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fa6d 	bl	8000608 <__aeabi_dmul>
 800612e:	e76a      	b.n	8006006 <__ieee754_pow+0x3e>
 8006130:	4b3e      	ldr	r3, [pc, #248]	; (800622c <__ieee754_pow+0x264>)
 8006132:	4599      	cmp	r9, r3
 8006134:	d10c      	bne.n	8006150 <__ieee754_pow+0x188>
 8006136:	2d00      	cmp	r5, #0
 8006138:	db0a      	blt.n	8006150 <__ieee754_pow+0x188>
 800613a:	ec47 6b10 	vmov	d0, r6, r7
 800613e:	b009      	add	sp, #36	; 0x24
 8006140:	ecbd 8b06 	vpop	{d8-d10}
 8006144:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006148:	f000 bd20 	b.w	8006b8c <__ieee754_sqrt>
 800614c:	2300      	movs	r3, #0
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	ec47 6b10 	vmov	d0, r6, r7
 8006154:	f000 fc62 	bl	8006a1c <fabs>
 8006158:	ec51 0b10 	vmov	r0, r1, d0
 800615c:	f1ba 0f00 	cmp.w	sl, #0
 8006160:	d129      	bne.n	80061b6 <__ieee754_pow+0x1ee>
 8006162:	b124      	cbz	r4, 800616e <__ieee754_pow+0x1a6>
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <__ieee754_pow+0x25c>)
 8006166:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800616a:	429a      	cmp	r2, r3
 800616c:	d123      	bne.n	80061b6 <__ieee754_pow+0x1ee>
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	da05      	bge.n	8006180 <__ieee754_pow+0x1b8>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	2000      	movs	r0, #0
 800617a:	492a      	ldr	r1, [pc, #168]	; (8006224 <__ieee754_pow+0x25c>)
 800617c:	f7fa fb6e 	bl	800085c <__aeabi_ddiv>
 8006180:	2d00      	cmp	r5, #0
 8006182:	f6bf af40 	bge.w	8006006 <__ieee754_pow+0x3e>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800618c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006190:	431c      	orrs	r4, r3
 8006192:	d108      	bne.n	80061a6 <__ieee754_pow+0x1de>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	f7fa f87c 	bl	8000298 <__aeabi_dsub>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e78f      	b.n	80060c6 <__ieee754_pow+0xfe>
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	f47f af2c 	bne.w	8006006 <__ieee754_pow+0x3e>
 80061ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061b2:	4619      	mov	r1, r3
 80061b4:	e727      	b.n	8006006 <__ieee754_pow+0x3e>
 80061b6:	0feb      	lsrs	r3, r5, #31
 80061b8:	3b01      	subs	r3, #1
 80061ba:	9306      	str	r3, [sp, #24]
 80061bc:	9a06      	ldr	r2, [sp, #24]
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	d102      	bne.n	80061ca <__ieee754_pow+0x202>
 80061c4:	4632      	mov	r2, r6
 80061c6:	463b      	mov	r3, r7
 80061c8:	e7e6      	b.n	8006198 <__ieee754_pow+0x1d0>
 80061ca:	4b19      	ldr	r3, [pc, #100]	; (8006230 <__ieee754_pow+0x268>)
 80061cc:	4598      	cmp	r8, r3
 80061ce:	f340 80fb 	ble.w	80063c8 <__ieee754_pow+0x400>
 80061d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80061d6:	4598      	cmp	r8, r3
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <__ieee754_pow+0x260>)
 80061da:	dd0c      	ble.n	80061f6 <__ieee754_pow+0x22e>
 80061dc:	429c      	cmp	r4, r3
 80061de:	dc0f      	bgt.n	8006200 <__ieee754_pow+0x238>
 80061e0:	f1b9 0f00 	cmp.w	r9, #0
 80061e4:	da0f      	bge.n	8006206 <__ieee754_pow+0x23e>
 80061e6:	2000      	movs	r0, #0
 80061e8:	b009      	add	sp, #36	; 0x24
 80061ea:	ecbd 8b06 	vpop	{d8-d10}
 80061ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f2:	f000 bcc2 	b.w	8006b7a <__math_oflow>
 80061f6:	429c      	cmp	r4, r3
 80061f8:	dbf2      	blt.n	80061e0 <__ieee754_pow+0x218>
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <__ieee754_pow+0x25c>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	dd19      	ble.n	8006234 <__ieee754_pow+0x26c>
 8006200:	f1b9 0f00 	cmp.w	r9, #0
 8006204:	dcef      	bgt.n	80061e6 <__ieee754_pow+0x21e>
 8006206:	2000      	movs	r0, #0
 8006208:	b009      	add	sp, #36	; 0x24
 800620a:	ecbd 8b06 	vpop	{d8-d10}
 800620e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006212:	f000 bca9 	b.w	8006b68 <__math_uflow>
 8006216:	bf00      	nop
 8006218:	fff00000 	.word	0xfff00000
 800621c:	7ff00000 	.word	0x7ff00000
 8006220:	433fffff 	.word	0x433fffff
 8006224:	3ff00000 	.word	0x3ff00000
 8006228:	3fefffff 	.word	0x3fefffff
 800622c:	3fe00000 	.word	0x3fe00000
 8006230:	41e00000 	.word	0x41e00000
 8006234:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <__ieee754_pow+0x3f0>)
 8006236:	2200      	movs	r2, #0
 8006238:	f7fa f82e 	bl	8000298 <__aeabi_dsub>
 800623c:	a354      	add	r3, pc, #336	; (adr r3, 8006390 <__ieee754_pow+0x3c8>)
 800623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006242:	4604      	mov	r4, r0
 8006244:	460d      	mov	r5, r1
 8006246:	f7fa f9df 	bl	8000608 <__aeabi_dmul>
 800624a:	a353      	add	r3, pc, #332	; (adr r3, 8006398 <__ieee754_pow+0x3d0>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	4606      	mov	r6, r0
 8006252:	460f      	mov	r7, r1
 8006254:	4620      	mov	r0, r4
 8006256:	4629      	mov	r1, r5
 8006258:	f7fa f9d6 	bl	8000608 <__aeabi_dmul>
 800625c:	4b57      	ldr	r3, [pc, #348]	; (80063bc <__ieee754_pow+0x3f4>)
 800625e:	4682      	mov	sl, r0
 8006260:	468b      	mov	fp, r1
 8006262:	2200      	movs	r2, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa f9ce 	bl	8000608 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	a14b      	add	r1, pc, #300	; (adr r1, 80063a0 <__ieee754_pow+0x3d8>)
 8006272:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006276:	f7fa f80f 	bl	8000298 <__aeabi_dsub>
 800627a:	4622      	mov	r2, r4
 800627c:	462b      	mov	r3, r5
 800627e:	f7fa f9c3 	bl	8000608 <__aeabi_dmul>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	2000      	movs	r0, #0
 8006288:	494d      	ldr	r1, [pc, #308]	; (80063c0 <__ieee754_pow+0x3f8>)
 800628a:	f7fa f805 	bl	8000298 <__aeabi_dsub>
 800628e:	4622      	mov	r2, r4
 8006290:	4680      	mov	r8, r0
 8006292:	4689      	mov	r9, r1
 8006294:	462b      	mov	r3, r5
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f7fa f9b5 	bl	8000608 <__aeabi_dmul>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4640      	mov	r0, r8
 80062a4:	4649      	mov	r1, r9
 80062a6:	f7fa f9af 	bl	8000608 <__aeabi_dmul>
 80062aa:	a33f      	add	r3, pc, #252	; (adr r3, 80063a8 <__ieee754_pow+0x3e0>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f9aa 	bl	8000608 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4650      	mov	r0, sl
 80062ba:	4659      	mov	r1, fp
 80062bc:	f7f9 ffec 	bl	8000298 <__aeabi_dsub>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4680      	mov	r8, r0
 80062c6:	4689      	mov	r9, r1
 80062c8:	4630      	mov	r0, r6
 80062ca:	4639      	mov	r1, r7
 80062cc:	f7f9 ffe6 	bl	800029c <__adddf3>
 80062d0:	2000      	movs	r0, #0
 80062d2:	4632      	mov	r2, r6
 80062d4:	463b      	mov	r3, r7
 80062d6:	4604      	mov	r4, r0
 80062d8:	460d      	mov	r5, r1
 80062da:	f7f9 ffdd 	bl	8000298 <__aeabi_dsub>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7f9 ffd7 	bl	8000298 <__aeabi_dsub>
 80062ea:	9b04      	ldr	r3, [sp, #16]
 80062ec:	9a06      	ldr	r2, [sp, #24]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4682      	mov	sl, r0
 80062f4:	468b      	mov	fp, r1
 80062f6:	f040 81e7 	bne.w	80066c8 <__ieee754_pow+0x700>
 80062fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80063b0 <__ieee754_pow+0x3e8>
 80062fe:	eeb0 8a47 	vmov.f32	s16, s14
 8006302:	eef0 8a67 	vmov.f32	s17, s15
 8006306:	e9dd 6700 	ldrd	r6, r7, [sp]
 800630a:	2600      	movs	r6, #0
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006314:	f7f9 ffc0 	bl	8000298 <__aeabi_dsub>
 8006318:	4622      	mov	r2, r4
 800631a:	462b      	mov	r3, r5
 800631c:	f7fa f974 	bl	8000608 <__aeabi_dmul>
 8006320:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	4650      	mov	r0, sl
 800632a:	4659      	mov	r1, fp
 800632c:	f7fa f96c 	bl	8000608 <__aeabi_dmul>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7f9 ffb0 	bl	800029c <__adddf3>
 800633c:	4632      	mov	r2, r6
 800633e:	463b      	mov	r3, r7
 8006340:	4680      	mov	r8, r0
 8006342:	4689      	mov	r9, r1
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7fa f95e 	bl	8000608 <__aeabi_dmul>
 800634c:	460b      	mov	r3, r1
 800634e:	4604      	mov	r4, r0
 8006350:	460d      	mov	r5, r1
 8006352:	4602      	mov	r2, r0
 8006354:	4649      	mov	r1, r9
 8006356:	4640      	mov	r0, r8
 8006358:	f7f9 ffa0 	bl	800029c <__adddf3>
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <__ieee754_pow+0x3fc>)
 800635e:	4299      	cmp	r1, r3
 8006360:	ec45 4b19 	vmov	d9, r4, r5
 8006364:	4606      	mov	r6, r0
 8006366:	460f      	mov	r7, r1
 8006368:	468b      	mov	fp, r1
 800636a:	f340 82f0 	ble.w	800694e <__ieee754_pow+0x986>
 800636e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006372:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006376:	4303      	orrs	r3, r0
 8006378:	f000 81e4 	beq.w	8006744 <__ieee754_pow+0x77c>
 800637c:	ec51 0b18 	vmov	r0, r1, d8
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	f7fa fbb2 	bl	8000aec <__aeabi_dcmplt>
 8006388:	3800      	subs	r0, #0
 800638a:	bf18      	it	ne
 800638c:	2001      	movne	r0, #1
 800638e:	e72b      	b.n	80061e8 <__ieee754_pow+0x220>
 8006390:	60000000 	.word	0x60000000
 8006394:	3ff71547 	.word	0x3ff71547
 8006398:	f85ddf44 	.word	0xf85ddf44
 800639c:	3e54ae0b 	.word	0x3e54ae0b
 80063a0:	55555555 	.word	0x55555555
 80063a4:	3fd55555 	.word	0x3fd55555
 80063a8:	652b82fe 	.word	0x652b82fe
 80063ac:	3ff71547 	.word	0x3ff71547
 80063b0:	00000000 	.word	0x00000000
 80063b4:	bff00000 	.word	0xbff00000
 80063b8:	3ff00000 	.word	0x3ff00000
 80063bc:	3fd00000 	.word	0x3fd00000
 80063c0:	3fe00000 	.word	0x3fe00000
 80063c4:	408fffff 	.word	0x408fffff
 80063c8:	4bd5      	ldr	r3, [pc, #852]	; (8006720 <__ieee754_pow+0x758>)
 80063ca:	402b      	ands	r3, r5
 80063cc:	2200      	movs	r2, #0
 80063ce:	b92b      	cbnz	r3, 80063dc <__ieee754_pow+0x414>
 80063d0:	4bd4      	ldr	r3, [pc, #848]	; (8006724 <__ieee754_pow+0x75c>)
 80063d2:	f7fa f919 	bl	8000608 <__aeabi_dmul>
 80063d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80063da:	460c      	mov	r4, r1
 80063dc:	1523      	asrs	r3, r4, #20
 80063de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80063e2:	4413      	add	r3, r2
 80063e4:	9305      	str	r3, [sp, #20]
 80063e6:	4bd0      	ldr	r3, [pc, #832]	; (8006728 <__ieee754_pow+0x760>)
 80063e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80063f0:	429c      	cmp	r4, r3
 80063f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80063f6:	dd08      	ble.n	800640a <__ieee754_pow+0x442>
 80063f8:	4bcc      	ldr	r3, [pc, #816]	; (800672c <__ieee754_pow+0x764>)
 80063fa:	429c      	cmp	r4, r3
 80063fc:	f340 8162 	ble.w	80066c4 <__ieee754_pow+0x6fc>
 8006400:	9b05      	ldr	r3, [sp, #20]
 8006402:	3301      	adds	r3, #1
 8006404:	9305      	str	r3, [sp, #20]
 8006406:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800640a:	2400      	movs	r4, #0
 800640c:	00e3      	lsls	r3, r4, #3
 800640e:	9307      	str	r3, [sp, #28]
 8006410:	4bc7      	ldr	r3, [pc, #796]	; (8006730 <__ieee754_pow+0x768>)
 8006412:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006416:	ed93 7b00 	vldr	d7, [r3]
 800641a:	4629      	mov	r1, r5
 800641c:	ec53 2b17 	vmov	r2, r3, d7
 8006420:	eeb0 9a47 	vmov.f32	s18, s14
 8006424:	eef0 9a67 	vmov.f32	s19, s15
 8006428:	4682      	mov	sl, r0
 800642a:	f7f9 ff35 	bl	8000298 <__aeabi_dsub>
 800642e:	4652      	mov	r2, sl
 8006430:	4606      	mov	r6, r0
 8006432:	460f      	mov	r7, r1
 8006434:	462b      	mov	r3, r5
 8006436:	ec51 0b19 	vmov	r0, r1, d9
 800643a:	f7f9 ff2f 	bl	800029c <__adddf3>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	2000      	movs	r0, #0
 8006444:	49bb      	ldr	r1, [pc, #748]	; (8006734 <__ieee754_pow+0x76c>)
 8006446:	f7fa fa09 	bl	800085c <__aeabi_ddiv>
 800644a:	ec41 0b1a 	vmov	d10, r0, r1
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4630      	mov	r0, r6
 8006454:	4639      	mov	r1, r7
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	2300      	movs	r3, #0
 800645c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006460:	9302      	str	r3, [sp, #8]
 8006462:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006466:	46ab      	mov	fp, r5
 8006468:	106d      	asrs	r5, r5, #1
 800646a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800646e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006472:	ec41 0b18 	vmov	d8, r0, r1
 8006476:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800647a:	2200      	movs	r2, #0
 800647c:	4640      	mov	r0, r8
 800647e:	4649      	mov	r1, r9
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	f7fa f8c0 	bl	8000608 <__aeabi_dmul>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4630      	mov	r0, r6
 800648e:	4639      	mov	r1, r7
 8006490:	f7f9 ff02 	bl	8000298 <__aeabi_dsub>
 8006494:	ec53 2b19 	vmov	r2, r3, d9
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	4620      	mov	r0, r4
 800649e:	4629      	mov	r1, r5
 80064a0:	f7f9 fefa 	bl	8000298 <__aeabi_dsub>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4650      	mov	r0, sl
 80064aa:	4659      	mov	r1, fp
 80064ac:	f7f9 fef4 	bl	8000298 <__aeabi_dsub>
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	f7fa f8a8 	bl	8000608 <__aeabi_dmul>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7f9 feea 	bl	8000298 <__aeabi_dsub>
 80064c4:	ec53 2b1a 	vmov	r2, r3, d10
 80064c8:	f7fa f89e 	bl	8000608 <__aeabi_dmul>
 80064cc:	ec53 2b18 	vmov	r2, r3, d8
 80064d0:	ec41 0b19 	vmov	d9, r0, r1
 80064d4:	ec51 0b18 	vmov	r0, r1, d8
 80064d8:	f7fa f896 	bl	8000608 <__aeabi_dmul>
 80064dc:	a37c      	add	r3, pc, #496	; (adr r3, 80066d0 <__ieee754_pow+0x708>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	f7fa f88f 	bl	8000608 <__aeabi_dmul>
 80064ea:	a37b      	add	r3, pc, #492	; (adr r3, 80066d8 <__ieee754_pow+0x710>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7f9 fed4 	bl	800029c <__adddf3>
 80064f4:	4622      	mov	r2, r4
 80064f6:	462b      	mov	r3, r5
 80064f8:	f7fa f886 	bl	8000608 <__aeabi_dmul>
 80064fc:	a378      	add	r3, pc, #480	; (adr r3, 80066e0 <__ieee754_pow+0x718>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7f9 fecb 	bl	800029c <__adddf3>
 8006506:	4622      	mov	r2, r4
 8006508:	462b      	mov	r3, r5
 800650a:	f7fa f87d 	bl	8000608 <__aeabi_dmul>
 800650e:	a376      	add	r3, pc, #472	; (adr r3, 80066e8 <__ieee754_pow+0x720>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	f7f9 fec2 	bl	800029c <__adddf3>
 8006518:	4622      	mov	r2, r4
 800651a:	462b      	mov	r3, r5
 800651c:	f7fa f874 	bl	8000608 <__aeabi_dmul>
 8006520:	a373      	add	r3, pc, #460	; (adr r3, 80066f0 <__ieee754_pow+0x728>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	f7f9 feb9 	bl	800029c <__adddf3>
 800652a:	4622      	mov	r2, r4
 800652c:	462b      	mov	r3, r5
 800652e:	f7fa f86b 	bl	8000608 <__aeabi_dmul>
 8006532:	a371      	add	r3, pc, #452	; (adr r3, 80066f8 <__ieee754_pow+0x730>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	f7f9 feb0 	bl	800029c <__adddf3>
 800653c:	4622      	mov	r2, r4
 800653e:	4606      	mov	r6, r0
 8006540:	460f      	mov	r7, r1
 8006542:	462b      	mov	r3, r5
 8006544:	4620      	mov	r0, r4
 8006546:	4629      	mov	r1, r5
 8006548:	f7fa f85e 	bl	8000608 <__aeabi_dmul>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa f858 	bl	8000608 <__aeabi_dmul>
 8006558:	4642      	mov	r2, r8
 800655a:	4604      	mov	r4, r0
 800655c:	460d      	mov	r5, r1
 800655e:	464b      	mov	r3, r9
 8006560:	ec51 0b18 	vmov	r0, r1, d8
 8006564:	f7f9 fe9a 	bl	800029c <__adddf3>
 8006568:	ec53 2b19 	vmov	r2, r3, d9
 800656c:	f7fa f84c 	bl	8000608 <__aeabi_dmul>
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	f7f9 fe92 	bl	800029c <__adddf3>
 8006578:	4642      	mov	r2, r8
 800657a:	4682      	mov	sl, r0
 800657c:	468b      	mov	fp, r1
 800657e:	464b      	mov	r3, r9
 8006580:	4640      	mov	r0, r8
 8006582:	4649      	mov	r1, r9
 8006584:	f7fa f840 	bl	8000608 <__aeabi_dmul>
 8006588:	4b6b      	ldr	r3, [pc, #428]	; (8006738 <__ieee754_pow+0x770>)
 800658a:	2200      	movs	r2, #0
 800658c:	4606      	mov	r6, r0
 800658e:	460f      	mov	r7, r1
 8006590:	f7f9 fe84 	bl	800029c <__adddf3>
 8006594:	4652      	mov	r2, sl
 8006596:	465b      	mov	r3, fp
 8006598:	f7f9 fe80 	bl	800029c <__adddf3>
 800659c:	2000      	movs	r0, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	460d      	mov	r5, r1
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4640      	mov	r0, r8
 80065a8:	4649      	mov	r1, r9
 80065aa:	f7fa f82d 	bl	8000608 <__aeabi_dmul>
 80065ae:	4b62      	ldr	r3, [pc, #392]	; (8006738 <__ieee754_pow+0x770>)
 80065b0:	4680      	mov	r8, r0
 80065b2:	4689      	mov	r9, r1
 80065b4:	2200      	movs	r2, #0
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7f9 fe6d 	bl	8000298 <__aeabi_dsub>
 80065be:	4632      	mov	r2, r6
 80065c0:	463b      	mov	r3, r7
 80065c2:	f7f9 fe69 	bl	8000298 <__aeabi_dsub>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4650      	mov	r0, sl
 80065cc:	4659      	mov	r1, fp
 80065ce:	f7f9 fe63 	bl	8000298 <__aeabi_dsub>
 80065d2:	ec53 2b18 	vmov	r2, r3, d8
 80065d6:	f7fa f817 	bl	8000608 <__aeabi_dmul>
 80065da:	4622      	mov	r2, r4
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	462b      	mov	r3, r5
 80065e2:	ec51 0b19 	vmov	r0, r1, d9
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4630      	mov	r0, r6
 80065f0:	4639      	mov	r1, r7
 80065f2:	f7f9 fe53 	bl	800029c <__adddf3>
 80065f6:	4606      	mov	r6, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4640      	mov	r0, r8
 8006600:	4649      	mov	r1, r9
 8006602:	f7f9 fe4b 	bl	800029c <__adddf3>
 8006606:	a33e      	add	r3, pc, #248	; (adr r3, 8006700 <__ieee754_pow+0x738>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	2000      	movs	r0, #0
 800660e:	4604      	mov	r4, r0
 8006610:	460d      	mov	r5, r1
 8006612:	f7f9 fff9 	bl	8000608 <__aeabi_dmul>
 8006616:	4642      	mov	r2, r8
 8006618:	ec41 0b18 	vmov	d8, r0, r1
 800661c:	464b      	mov	r3, r9
 800661e:	4620      	mov	r0, r4
 8006620:	4629      	mov	r1, r5
 8006622:	f7f9 fe39 	bl	8000298 <__aeabi_dsub>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7f9 fe33 	bl	8000298 <__aeabi_dsub>
 8006632:	a335      	add	r3, pc, #212	; (adr r3, 8006708 <__ieee754_pow+0x740>)
 8006634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006638:	f7f9 ffe6 	bl	8000608 <__aeabi_dmul>
 800663c:	a334      	add	r3, pc, #208	; (adr r3, 8006710 <__ieee754_pow+0x748>)
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	4606      	mov	r6, r0
 8006644:	460f      	mov	r7, r1
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7f9 ffdd 	bl	8000608 <__aeabi_dmul>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4630      	mov	r0, r6
 8006654:	4639      	mov	r1, r7
 8006656:	f7f9 fe21 	bl	800029c <__adddf3>
 800665a:	9a07      	ldr	r2, [sp, #28]
 800665c:	4b37      	ldr	r3, [pc, #220]	; (800673c <__ieee754_pow+0x774>)
 800665e:	4413      	add	r3, r2
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f7f9 fe1a 	bl	800029c <__adddf3>
 8006668:	4682      	mov	sl, r0
 800666a:	9805      	ldr	r0, [sp, #20]
 800666c:	468b      	mov	fp, r1
 800666e:	f7f9 ff61 	bl	8000534 <__aeabi_i2d>
 8006672:	9a07      	ldr	r2, [sp, #28]
 8006674:	4b32      	ldr	r3, [pc, #200]	; (8006740 <__ieee754_pow+0x778>)
 8006676:	4413      	add	r3, r2
 8006678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	4652      	mov	r2, sl
 8006682:	465b      	mov	r3, fp
 8006684:	ec51 0b18 	vmov	r0, r1, d8
 8006688:	f7f9 fe08 	bl	800029c <__adddf3>
 800668c:	4642      	mov	r2, r8
 800668e:	464b      	mov	r3, r9
 8006690:	f7f9 fe04 	bl	800029c <__adddf3>
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	f7f9 fe00 	bl	800029c <__adddf3>
 800669c:	2000      	movs	r0, #0
 800669e:	4632      	mov	r2, r6
 80066a0:	463b      	mov	r3, r7
 80066a2:	4604      	mov	r4, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	f7f9 fdf7 	bl	8000298 <__aeabi_dsub>
 80066aa:	4642      	mov	r2, r8
 80066ac:	464b      	mov	r3, r9
 80066ae:	f7f9 fdf3 	bl	8000298 <__aeabi_dsub>
 80066b2:	ec53 2b18 	vmov	r2, r3, d8
 80066b6:	f7f9 fdef 	bl	8000298 <__aeabi_dsub>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4650      	mov	r0, sl
 80066c0:	4659      	mov	r1, fp
 80066c2:	e610      	b.n	80062e6 <__ieee754_pow+0x31e>
 80066c4:	2401      	movs	r4, #1
 80066c6:	e6a1      	b.n	800640c <__ieee754_pow+0x444>
 80066c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006718 <__ieee754_pow+0x750>
 80066cc:	e617      	b.n	80062fe <__ieee754_pow+0x336>
 80066ce:	bf00      	nop
 80066d0:	4a454eef 	.word	0x4a454eef
 80066d4:	3fca7e28 	.word	0x3fca7e28
 80066d8:	93c9db65 	.word	0x93c9db65
 80066dc:	3fcd864a 	.word	0x3fcd864a
 80066e0:	a91d4101 	.word	0xa91d4101
 80066e4:	3fd17460 	.word	0x3fd17460
 80066e8:	518f264d 	.word	0x518f264d
 80066ec:	3fd55555 	.word	0x3fd55555
 80066f0:	db6fabff 	.word	0xdb6fabff
 80066f4:	3fdb6db6 	.word	0x3fdb6db6
 80066f8:	33333303 	.word	0x33333303
 80066fc:	3fe33333 	.word	0x3fe33333
 8006700:	e0000000 	.word	0xe0000000
 8006704:	3feec709 	.word	0x3feec709
 8006708:	dc3a03fd 	.word	0xdc3a03fd
 800670c:	3feec709 	.word	0x3feec709
 8006710:	145b01f5 	.word	0x145b01f5
 8006714:	be3e2fe0 	.word	0xbe3e2fe0
 8006718:	00000000 	.word	0x00000000
 800671c:	3ff00000 	.word	0x3ff00000
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	43400000 	.word	0x43400000
 8006728:	0003988e 	.word	0x0003988e
 800672c:	000bb679 	.word	0x000bb679
 8006730:	08006dd0 	.word	0x08006dd0
 8006734:	3ff00000 	.word	0x3ff00000
 8006738:	40080000 	.word	0x40080000
 800673c:	08006df0 	.word	0x08006df0
 8006740:	08006de0 	.word	0x08006de0
 8006744:	a3b3      	add	r3, pc, #716	; (adr r3, 8006a14 <__ieee754_pow+0xa4c>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	4640      	mov	r0, r8
 800674c:	4649      	mov	r1, r9
 800674e:	f7f9 fda5 	bl	800029c <__adddf3>
 8006752:	4622      	mov	r2, r4
 8006754:	ec41 0b1a 	vmov	d10, r0, r1
 8006758:	462b      	mov	r3, r5
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 fd9b 	bl	8000298 <__aeabi_dsub>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	ec51 0b1a 	vmov	r0, r1, d10
 800676a:	f7fa f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800676e:	2800      	cmp	r0, #0
 8006770:	f47f ae04 	bne.w	800637c <__ieee754_pow+0x3b4>
 8006774:	4aa2      	ldr	r2, [pc, #648]	; (8006a00 <__ieee754_pow+0xa38>)
 8006776:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800677a:	4293      	cmp	r3, r2
 800677c:	f340 8107 	ble.w	800698e <__ieee754_pow+0x9c6>
 8006780:	151b      	asrs	r3, r3, #20
 8006782:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006786:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800678a:	fa4a fa03 	asr.w	sl, sl, r3
 800678e:	44da      	add	sl, fp
 8006790:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006794:	489b      	ldr	r0, [pc, #620]	; (8006a04 <__ieee754_pow+0xa3c>)
 8006796:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800679a:	4108      	asrs	r0, r1
 800679c:	ea00 030a 	and.w	r3, r0, sl
 80067a0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80067a4:	f1c1 0114 	rsb	r1, r1, #20
 80067a8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80067ac:	fa4a fa01 	asr.w	sl, sl, r1
 80067b0:	f1bb 0f00 	cmp.w	fp, #0
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	4620      	mov	r0, r4
 80067ba:	4629      	mov	r1, r5
 80067bc:	bfb8      	it	lt
 80067be:	f1ca 0a00 	rsblt	sl, sl, #0
 80067c2:	f7f9 fd69 	bl	8000298 <__aeabi_dsub>
 80067c6:	ec41 0b19 	vmov	d9, r0, r1
 80067ca:	4642      	mov	r2, r8
 80067cc:	464b      	mov	r3, r9
 80067ce:	ec51 0b19 	vmov	r0, r1, d9
 80067d2:	f7f9 fd63 	bl	800029c <__adddf3>
 80067d6:	a37a      	add	r3, pc, #488	; (adr r3, 80069c0 <__ieee754_pow+0x9f8>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	2000      	movs	r0, #0
 80067de:	4604      	mov	r4, r0
 80067e0:	460d      	mov	r5, r1
 80067e2:	f7f9 ff11 	bl	8000608 <__aeabi_dmul>
 80067e6:	ec53 2b19 	vmov	r2, r3, d9
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 fd51 	bl	8000298 <__aeabi_dsub>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 fd4b 	bl	8000298 <__aeabi_dsub>
 8006802:	a371      	add	r3, pc, #452	; (adr r3, 80069c8 <__ieee754_pow+0xa00>)
 8006804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006808:	f7f9 fefe 	bl	8000608 <__aeabi_dmul>
 800680c:	a370      	add	r3, pc, #448	; (adr r3, 80069d0 <__ieee754_pow+0xa08>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	4680      	mov	r8, r0
 8006814:	4689      	mov	r9, r1
 8006816:	4620      	mov	r0, r4
 8006818:	4629      	mov	r1, r5
 800681a:	f7f9 fef5 	bl	8000608 <__aeabi_dmul>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4640      	mov	r0, r8
 8006824:	4649      	mov	r1, r9
 8006826:	f7f9 fd39 	bl	800029c <__adddf3>
 800682a:	4604      	mov	r4, r0
 800682c:	460d      	mov	r5, r1
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4630      	mov	r0, r6
 8006834:	4639      	mov	r1, r7
 8006836:	f7f9 fd31 	bl	800029c <__adddf3>
 800683a:	4632      	mov	r2, r6
 800683c:	463b      	mov	r3, r7
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	f7f9 fd29 	bl	8000298 <__aeabi_dsub>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4620      	mov	r0, r4
 800684c:	4629      	mov	r1, r5
 800684e:	f7f9 fd23 	bl	8000298 <__aeabi_dsub>
 8006852:	4642      	mov	r2, r8
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	464b      	mov	r3, r9
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fed3 	bl	8000608 <__aeabi_dmul>
 8006862:	a35d      	add	r3, pc, #372	; (adr r3, 80069d8 <__ieee754_pow+0xa10>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	4604      	mov	r4, r0
 800686a:	460d      	mov	r5, r1
 800686c:	f7f9 fecc 	bl	8000608 <__aeabi_dmul>
 8006870:	a35b      	add	r3, pc, #364	; (adr r3, 80069e0 <__ieee754_pow+0xa18>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 fd0f 	bl	8000298 <__aeabi_dsub>
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	f7f9 fec3 	bl	8000608 <__aeabi_dmul>
 8006882:	a359      	add	r3, pc, #356	; (adr r3, 80069e8 <__ieee754_pow+0xa20>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f7f9 fd08 	bl	800029c <__adddf3>
 800688c:	4622      	mov	r2, r4
 800688e:	462b      	mov	r3, r5
 8006890:	f7f9 feba 	bl	8000608 <__aeabi_dmul>
 8006894:	a356      	add	r3, pc, #344	; (adr r3, 80069f0 <__ieee754_pow+0xa28>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fcfd 	bl	8000298 <__aeabi_dsub>
 800689e:	4622      	mov	r2, r4
 80068a0:	462b      	mov	r3, r5
 80068a2:	f7f9 feb1 	bl	8000608 <__aeabi_dmul>
 80068a6:	a354      	add	r3, pc, #336	; (adr r3, 80069f8 <__ieee754_pow+0xa30>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fcf6 	bl	800029c <__adddf3>
 80068b0:	4622      	mov	r2, r4
 80068b2:	462b      	mov	r3, r5
 80068b4:	f7f9 fea8 	bl	8000608 <__aeabi_dmul>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4640      	mov	r0, r8
 80068be:	4649      	mov	r1, r9
 80068c0:	f7f9 fcea 	bl	8000298 <__aeabi_dsub>
 80068c4:	4604      	mov	r4, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7f9 fe9a 	bl	8000608 <__aeabi_dmul>
 80068d4:	2200      	movs	r2, #0
 80068d6:	ec41 0b19 	vmov	d9, r0, r1
 80068da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7f9 fcd9 	bl	8000298 <__aeabi_dsub>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	ec51 0b19 	vmov	r0, r1, d9
 80068ee:	f7f9 ffb5 	bl	800085c <__aeabi_ddiv>
 80068f2:	4632      	mov	r2, r6
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	463b      	mov	r3, r7
 80068fa:	4640      	mov	r0, r8
 80068fc:	4649      	mov	r1, r9
 80068fe:	f7f9 fe83 	bl	8000608 <__aeabi_dmul>
 8006902:	4632      	mov	r2, r6
 8006904:	463b      	mov	r3, r7
 8006906:	f7f9 fcc9 	bl	800029c <__adddf3>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7f9 fcc1 	bl	8000298 <__aeabi_dsub>
 8006916:	4642      	mov	r2, r8
 8006918:	464b      	mov	r3, r9
 800691a:	f7f9 fcbd 	bl	8000298 <__aeabi_dsub>
 800691e:	460b      	mov	r3, r1
 8006920:	4602      	mov	r2, r0
 8006922:	4939      	ldr	r1, [pc, #228]	; (8006a08 <__ieee754_pow+0xa40>)
 8006924:	2000      	movs	r0, #0
 8006926:	f7f9 fcb7 	bl	8000298 <__aeabi_dsub>
 800692a:	ec41 0b10 	vmov	d0, r0, r1
 800692e:	ee10 3a90 	vmov	r3, s1
 8006932:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	da2b      	bge.n	8006994 <__ieee754_pow+0x9cc>
 800693c:	4650      	mov	r0, sl
 800693e:	f000 f877 	bl	8006a30 <scalbn>
 8006942:	ec51 0b10 	vmov	r0, r1, d0
 8006946:	ec53 2b18 	vmov	r2, r3, d8
 800694a:	f7ff bbee 	b.w	800612a <__ieee754_pow+0x162>
 800694e:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <__ieee754_pow+0xa44>)
 8006950:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006954:	429e      	cmp	r6, r3
 8006956:	f77f af0d 	ble.w	8006774 <__ieee754_pow+0x7ac>
 800695a:	4b2d      	ldr	r3, [pc, #180]	; (8006a10 <__ieee754_pow+0xa48>)
 800695c:	440b      	add	r3, r1
 800695e:	4303      	orrs	r3, r0
 8006960:	d009      	beq.n	8006976 <__ieee754_pow+0x9ae>
 8006962:	ec51 0b18 	vmov	r0, r1, d8
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	f7fa f8bf 	bl	8000aec <__aeabi_dcmplt>
 800696e:	3800      	subs	r0, #0
 8006970:	bf18      	it	ne
 8006972:	2001      	movne	r0, #1
 8006974:	e448      	b.n	8006208 <__ieee754_pow+0x240>
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	f7f9 fc8d 	bl	8000298 <__aeabi_dsub>
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	f7fa f8c7 	bl	8000b14 <__aeabi_dcmpge>
 8006986:	2800      	cmp	r0, #0
 8006988:	f43f aef4 	beq.w	8006774 <__ieee754_pow+0x7ac>
 800698c:	e7e9      	b.n	8006962 <__ieee754_pow+0x99a>
 800698e:	f04f 0a00 	mov.w	sl, #0
 8006992:	e71a      	b.n	80067ca <__ieee754_pow+0x802>
 8006994:	ec51 0b10 	vmov	r0, r1, d0
 8006998:	4619      	mov	r1, r3
 800699a:	e7d4      	b.n	8006946 <__ieee754_pow+0x97e>
 800699c:	491a      	ldr	r1, [pc, #104]	; (8006a08 <__ieee754_pow+0xa40>)
 800699e:	2000      	movs	r0, #0
 80069a0:	f7ff bb31 	b.w	8006006 <__ieee754_pow+0x3e>
 80069a4:	2000      	movs	r0, #0
 80069a6:	2100      	movs	r1, #0
 80069a8:	f7ff bb2d 	b.w	8006006 <__ieee754_pow+0x3e>
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7ff bb29 	b.w	8006006 <__ieee754_pow+0x3e>
 80069b4:	9204      	str	r2, [sp, #16]
 80069b6:	f7ff bb7b 	b.w	80060b0 <__ieee754_pow+0xe8>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f7ff bb65 	b.w	800608a <__ieee754_pow+0xc2>
 80069c0:	00000000 	.word	0x00000000
 80069c4:	3fe62e43 	.word	0x3fe62e43
 80069c8:	fefa39ef 	.word	0xfefa39ef
 80069cc:	3fe62e42 	.word	0x3fe62e42
 80069d0:	0ca86c39 	.word	0x0ca86c39
 80069d4:	be205c61 	.word	0xbe205c61
 80069d8:	72bea4d0 	.word	0x72bea4d0
 80069dc:	3e663769 	.word	0x3e663769
 80069e0:	c5d26bf1 	.word	0xc5d26bf1
 80069e4:	3ebbbd41 	.word	0x3ebbbd41
 80069e8:	af25de2c 	.word	0xaf25de2c
 80069ec:	3f11566a 	.word	0x3f11566a
 80069f0:	16bebd93 	.word	0x16bebd93
 80069f4:	3f66c16c 	.word	0x3f66c16c
 80069f8:	5555553e 	.word	0x5555553e
 80069fc:	3fc55555 	.word	0x3fc55555
 8006a00:	3fe00000 	.word	0x3fe00000
 8006a04:	fff00000 	.word	0xfff00000
 8006a08:	3ff00000 	.word	0x3ff00000
 8006a0c:	4090cbff 	.word	0x4090cbff
 8006a10:	3f6f3400 	.word	0x3f6f3400
 8006a14:	652b82fe 	.word	0x652b82fe
 8006a18:	3c971547 	.word	0x3c971547

08006a1c <fabs>:
 8006a1c:	ec51 0b10 	vmov	r0, r1, d0
 8006a20:	ee10 2a10 	vmov	r2, s0
 8006a24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a28:	ec43 2b10 	vmov	d0, r2, r3
 8006a2c:	4770      	bx	lr
	...

08006a30 <scalbn>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	ec55 4b10 	vmov	r4, r5, d0
 8006a36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	462b      	mov	r3, r5
 8006a3e:	b999      	cbnz	r1, 8006a68 <scalbn+0x38>
 8006a40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a44:	4323      	orrs	r3, r4
 8006a46:	d03f      	beq.n	8006ac8 <scalbn+0x98>
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <scalbn+0xf0>)
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	ee10 0a10 	vmov	r0, s0
 8006a50:	2200      	movs	r2, #0
 8006a52:	f7f9 fdd9 	bl	8000608 <__aeabi_dmul>
 8006a56:	4b33      	ldr	r3, [pc, #204]	; (8006b24 <scalbn+0xf4>)
 8006a58:	429e      	cmp	r6, r3
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	da10      	bge.n	8006a82 <scalbn+0x52>
 8006a60:	a327      	add	r3, pc, #156	; (adr r3, 8006b00 <scalbn+0xd0>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	e01f      	b.n	8006aa8 <scalbn+0x78>
 8006a68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006a6c:	4291      	cmp	r1, r2
 8006a6e:	d10c      	bne.n	8006a8a <scalbn+0x5a>
 8006a70:	ee10 2a10 	vmov	r2, s0
 8006a74:	4620      	mov	r0, r4
 8006a76:	4629      	mov	r1, r5
 8006a78:	f7f9 fc10 	bl	800029c <__adddf3>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	460d      	mov	r5, r1
 8006a80:	e022      	b.n	8006ac8 <scalbn+0x98>
 8006a82:	460b      	mov	r3, r1
 8006a84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006a88:	3936      	subs	r1, #54	; 0x36
 8006a8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006a8e:	4296      	cmp	r6, r2
 8006a90:	dd0d      	ble.n	8006aae <scalbn+0x7e>
 8006a92:	2d00      	cmp	r5, #0
 8006a94:	a11c      	add	r1, pc, #112	; (adr r1, 8006b08 <scalbn+0xd8>)
 8006a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a9a:	da02      	bge.n	8006aa2 <scalbn+0x72>
 8006a9c:	a11c      	add	r1, pc, #112	; (adr r1, 8006b10 <scalbn+0xe0>)
 8006a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa2:	a319      	add	r3, pc, #100	; (adr r3, 8006b08 <scalbn+0xd8>)
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	f7f9 fdae 	bl	8000608 <__aeabi_dmul>
 8006aac:	e7e6      	b.n	8006a7c <scalbn+0x4c>
 8006aae:	1872      	adds	r2, r6, r1
 8006ab0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ab4:	428a      	cmp	r2, r1
 8006ab6:	dcec      	bgt.n	8006a92 <scalbn+0x62>
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	dd08      	ble.n	8006ace <scalbn+0x9e>
 8006abc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ac0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ac4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ac8:	ec45 4b10 	vmov	d0, r4, r5
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ad2:	da08      	bge.n	8006ae6 <scalbn+0xb6>
 8006ad4:	2d00      	cmp	r5, #0
 8006ad6:	a10a      	add	r1, pc, #40	; (adr r1, 8006b00 <scalbn+0xd0>)
 8006ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006adc:	dac0      	bge.n	8006a60 <scalbn+0x30>
 8006ade:	a10e      	add	r1, pc, #56	; (adr r1, 8006b18 <scalbn+0xe8>)
 8006ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae4:	e7bc      	b.n	8006a60 <scalbn+0x30>
 8006ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006aea:	3236      	adds	r2, #54	; 0x36
 8006aec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006af0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006af4:	4620      	mov	r0, r4
 8006af6:	4b0c      	ldr	r3, [pc, #48]	; (8006b28 <scalbn+0xf8>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	e7d5      	b.n	8006aa8 <scalbn+0x78>
 8006afc:	f3af 8000 	nop.w
 8006b00:	c2f8f359 	.word	0xc2f8f359
 8006b04:	01a56e1f 	.word	0x01a56e1f
 8006b08:	8800759c 	.word	0x8800759c
 8006b0c:	7e37e43c 	.word	0x7e37e43c
 8006b10:	8800759c 	.word	0x8800759c
 8006b14:	fe37e43c 	.word	0xfe37e43c
 8006b18:	c2f8f359 	.word	0xc2f8f359
 8006b1c:	81a56e1f 	.word	0x81a56e1f
 8006b20:	43500000 	.word	0x43500000
 8006b24:	ffff3cb0 	.word	0xffff3cb0
 8006b28:	3c900000 	.word	0x3c900000

08006b2c <with_errno>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460d      	mov	r5, r1
 8006b32:	4616      	mov	r6, r2
 8006b34:	f7fe fbfa 	bl	800532c <__errno>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	6006      	str	r6, [r0, #0]
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}

08006b40 <xflow>:
 8006b40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b42:	4614      	mov	r4, r2
 8006b44:	461d      	mov	r5, r3
 8006b46:	b108      	cbz	r0, 8006b4c <xflow+0xc>
 8006b48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	e9cd 2300 	strd	r2, r3, [sp]
 8006b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fd56 	bl	8000608 <__aeabi_dmul>
 8006b5c:	2222      	movs	r2, #34	; 0x22
 8006b5e:	b003      	add	sp, #12
 8006b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b64:	f7ff bfe2 	b.w	8006b2c <with_errno>

08006b68 <__math_uflow>:
 8006b68:	b508      	push	{r3, lr}
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b70:	f7ff ffe6 	bl	8006b40 <xflow>
 8006b74:	ec41 0b10 	vmov	d0, r0, r1
 8006b78:	bd08      	pop	{r3, pc}

08006b7a <__math_oflow>:
 8006b7a:	b508      	push	{r3, lr}
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006b82:	f7ff ffdd 	bl	8006b40 <xflow>
 8006b86:	ec41 0b10 	vmov	d0, r0, r1
 8006b8a:	bd08      	pop	{r3, pc}

08006b8c <__ieee754_sqrt>:
 8006b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	ec55 4b10 	vmov	r4, r5, d0
 8006b94:	4e67      	ldr	r6, [pc, #412]	; (8006d34 <__ieee754_sqrt+0x1a8>)
 8006b96:	43ae      	bics	r6, r5
 8006b98:	ee10 0a10 	vmov	r0, s0
 8006b9c:	ee10 2a10 	vmov	r2, s0
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	d10d      	bne.n	8006bc2 <__ieee754_sqrt+0x36>
 8006ba6:	f7f9 fd2f 	bl	8000608 <__aeabi_dmul>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4620      	mov	r0, r4
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	f7f9 fb73 	bl	800029c <__adddf3>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	460d      	mov	r5, r1
 8006bba:	ec45 4b10 	vmov	d0, r4, r5
 8006bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	2d00      	cmp	r5, #0
 8006bc4:	dc0b      	bgt.n	8006bde <__ieee754_sqrt+0x52>
 8006bc6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bca:	4326      	orrs	r6, r4
 8006bcc:	d0f5      	beq.n	8006bba <__ieee754_sqrt+0x2e>
 8006bce:	b135      	cbz	r5, 8006bde <__ieee754_sqrt+0x52>
 8006bd0:	f7f9 fb62 	bl	8000298 <__aeabi_dsub>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	f7f9 fe40 	bl	800085c <__aeabi_ddiv>
 8006bdc:	e7eb      	b.n	8006bb6 <__ieee754_sqrt+0x2a>
 8006bde:	1509      	asrs	r1, r1, #20
 8006be0:	f000 808d 	beq.w	8006cfe <__ieee754_sqrt+0x172>
 8006be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006bec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf0:	07c9      	lsls	r1, r1, #31
 8006bf2:	bf5c      	itt	pl
 8006bf4:	005b      	lslpl	r3, r3, #1
 8006bf6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006bfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bfe:	bf58      	it	pl
 8006c00:	0052      	lslpl	r2, r2, #1
 8006c02:	2500      	movs	r5, #0
 8006c04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006c08:	1076      	asrs	r6, r6, #1
 8006c0a:	0052      	lsls	r2, r2, #1
 8006c0c:	f04f 0e16 	mov.w	lr, #22
 8006c10:	46ac      	mov	ip, r5
 8006c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c16:	eb0c 0001 	add.w	r0, ip, r1
 8006c1a:	4298      	cmp	r0, r3
 8006c1c:	bfde      	ittt	le
 8006c1e:	1a1b      	suble	r3, r3, r0
 8006c20:	eb00 0c01 	addle.w	ip, r0, r1
 8006c24:	186d      	addle	r5, r5, r1
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	f1be 0e01 	subs.w	lr, lr, #1
 8006c2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006c30:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006c34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006c38:	d1ed      	bne.n	8006c16 <__ieee754_sqrt+0x8a>
 8006c3a:	4674      	mov	r4, lr
 8006c3c:	2720      	movs	r7, #32
 8006c3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c42:	4563      	cmp	r3, ip
 8006c44:	eb01 000e 	add.w	r0, r1, lr
 8006c48:	dc02      	bgt.n	8006c50 <__ieee754_sqrt+0xc4>
 8006c4a:	d113      	bne.n	8006c74 <__ieee754_sqrt+0xe8>
 8006c4c:	4290      	cmp	r0, r2
 8006c4e:	d811      	bhi.n	8006c74 <__ieee754_sqrt+0xe8>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	eb00 0e01 	add.w	lr, r0, r1
 8006c56:	da57      	bge.n	8006d08 <__ieee754_sqrt+0x17c>
 8006c58:	f1be 0f00 	cmp.w	lr, #0
 8006c5c:	db54      	blt.n	8006d08 <__ieee754_sqrt+0x17c>
 8006c5e:	f10c 0801 	add.w	r8, ip, #1
 8006c62:	eba3 030c 	sub.w	r3, r3, ip
 8006c66:	4290      	cmp	r0, r2
 8006c68:	bf88      	it	hi
 8006c6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c6e:	1a12      	subs	r2, r2, r0
 8006c70:	440c      	add	r4, r1
 8006c72:	46c4      	mov	ip, r8
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	3f01      	subs	r7, #1
 8006c78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006c7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006c80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006c84:	d1dd      	bne.n	8006c42 <__ieee754_sqrt+0xb6>
 8006c86:	4313      	orrs	r3, r2
 8006c88:	d01b      	beq.n	8006cc2 <__ieee754_sqrt+0x136>
 8006c8a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006d38 <__ieee754_sqrt+0x1ac>
 8006c8e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006d3c <__ieee754_sqrt+0x1b0>
 8006c92:	e9da 0100 	ldrd	r0, r1, [sl]
 8006c96:	e9db 2300 	ldrd	r2, r3, [fp]
 8006c9a:	f7f9 fafd 	bl	8000298 <__aeabi_dsub>
 8006c9e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4640      	mov	r0, r8
 8006ca8:	4649      	mov	r1, r9
 8006caa:	f7f9 ff29 	bl	8000b00 <__aeabi_dcmple>
 8006cae:	b140      	cbz	r0, 8006cc2 <__ieee754_sqrt+0x136>
 8006cb0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006cb4:	e9da 0100 	ldrd	r0, r1, [sl]
 8006cb8:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cbc:	d126      	bne.n	8006d0c <__ieee754_sqrt+0x180>
 8006cbe:	3501      	adds	r5, #1
 8006cc0:	463c      	mov	r4, r7
 8006cc2:	106a      	asrs	r2, r5, #1
 8006cc4:	0863      	lsrs	r3, r4, #1
 8006cc6:	07e9      	lsls	r1, r5, #31
 8006cc8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006ccc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006cd0:	bf48      	it	mi
 8006cd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006cd6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006cda:	461c      	mov	r4, r3
 8006cdc:	e76d      	b.n	8006bba <__ieee754_sqrt+0x2e>
 8006cde:	0ad3      	lsrs	r3, r2, #11
 8006ce0:	3815      	subs	r0, #21
 8006ce2:	0552      	lsls	r2, r2, #21
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0fa      	beq.n	8006cde <__ieee754_sqrt+0x152>
 8006ce8:	02dc      	lsls	r4, r3, #11
 8006cea:	d50a      	bpl.n	8006d02 <__ieee754_sqrt+0x176>
 8006cec:	f1c1 0420 	rsb	r4, r1, #32
 8006cf0:	fa22 f404 	lsr.w	r4, r2, r4
 8006cf4:	1e4d      	subs	r5, r1, #1
 8006cf6:	408a      	lsls	r2, r1
 8006cf8:	4323      	orrs	r3, r4
 8006cfa:	1b41      	subs	r1, r0, r5
 8006cfc:	e772      	b.n	8006be4 <__ieee754_sqrt+0x58>
 8006cfe:	4608      	mov	r0, r1
 8006d00:	e7f0      	b.n	8006ce4 <__ieee754_sqrt+0x158>
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	3101      	adds	r1, #1
 8006d06:	e7ef      	b.n	8006ce8 <__ieee754_sqrt+0x15c>
 8006d08:	46e0      	mov	r8, ip
 8006d0a:	e7aa      	b.n	8006c62 <__ieee754_sqrt+0xd6>
 8006d0c:	f7f9 fac6 	bl	800029c <__adddf3>
 8006d10:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fee6 	bl	8000aec <__aeabi_dcmplt>
 8006d20:	b120      	cbz	r0, 8006d2c <__ieee754_sqrt+0x1a0>
 8006d22:	1ca0      	adds	r0, r4, #2
 8006d24:	bf08      	it	eq
 8006d26:	3501      	addeq	r5, #1
 8006d28:	3402      	adds	r4, #2
 8006d2a:	e7ca      	b.n	8006cc2 <__ieee754_sqrt+0x136>
 8006d2c:	3401      	adds	r4, #1
 8006d2e:	f024 0401 	bic.w	r4, r4, #1
 8006d32:	e7c6      	b.n	8006cc2 <__ieee754_sqrt+0x136>
 8006d34:	7ff00000 	.word	0x7ff00000
 8006d38:	20000068 	.word	0x20000068
 8006d3c:	20000070 	.word	0x20000070

08006d40 <_init>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr

08006d4c <_fini>:
 8006d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4e:	bf00      	nop
 8006d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d52:	bc08      	pop	{r3}
 8006d54:	469e      	mov	lr, r3
 8006d56:	4770      	bx	lr
