
LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005e38  08005e38  00015e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec0  08005ec0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec8  08005ec8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005ed0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000240  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009611  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ce2  00000000  00000000  000296fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008b0  00000000  00000000  0002b3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000671  00000000  00000000  0002bc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021c80  00000000  00000000  0002c301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a5fc  00000000  00000000  0004df81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6b00  00000000  00000000  0005857d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e30  00000000  00000000  0011f080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00121eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e20 	.word	0x08005e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005e20 	.word	0x08005e20

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <LORA_begin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LORA_begin() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	lora = (LORA_HandleTypeDef*) &rfm95w;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <LORA_begin+0x78>)
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <LORA_begin+0x7c>)
 8000efc:	601a      	str	r2, [r3, #0]

	rfm95w.resetPort = RESET_GPIO_Port;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <LORA_begin+0x7c>)
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <LORA_begin+0x80>)
 8000f02:	639a      	str	r2, [r3, #56]	; 0x38
	rfm95w.resetPin = RESET_Pin;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <LORA_begin+0x7c>)
 8000f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0a:	859a      	strh	r2, [r3, #44]	; 0x2c
	rfm95w.nssPort = NSS_GPIO_Port;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <LORA_begin+0x7c>)
 8000f0e:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <LORA_begin+0x80>)
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c
	rfm95w.nssPin = NSS_Pin;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <LORA_begin+0x7c>)
 8000f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f18:	85da      	strh	r2, [r3, #46]	; 0x2e
	rfm95w.dio1Port = DIO1_GPIO_Port;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <LORA_begin+0x7c>)
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <LORA_begin+0x84>)
 8000f1e:	645a      	str	r2, [r3, #68]	; 0x44
	rfm95w.dio1 = DIO1_Pin;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <LORA_begin+0x7c>)
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	865a      	strh	r2, [r3, #50]	; 0x32
	rfm95w.hspi = &hspi2;
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <LORA_begin+0x7c>)
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <LORA_begin+0x88>)
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28

	rfm95w.parent.init = (loraInit) &RFM95_init;
 8000f2c:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <LORA_begin+0x7c>)
 8000f2e:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <LORA_begin+0x8c>)
 8000f30:	60da      	str	r2, [r3, #12]
	rfm95w.parent.transmit = (loraTransmit) &RFM95_transmit;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <LORA_begin+0x7c>)
 8000f34:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <LORA_begin+0x90>)
 8000f36:	611a      	str	r2, [r3, #16]
	rfm95w.parent.receive = (loraReceive) &RFM95_receiveContinuous;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <LORA_begin+0x7c>)
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <LORA_begin+0x94>)
 8000f3c:	615a      	str	r2, [r3, #20]
	rfm95w.parent.startReceiveIT =
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <LORA_begin+0x7c>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <LORA_begin+0x98>)
 8000f42:	619a      	str	r2, [r3, #24]
			(loraStartReceiveOnIRQ) &RFM95_startReceiveIT;
	rfm95w.parent.receiveIT = (loraReceiveOnIRQ) &RFM95_receiveIT;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <LORA_begin+0x7c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <LORA_begin+0x9c>)
 8000f48:	61da      	str	r2, [r3, #28]


	if (LORA_init(lora) == THT_OK) {
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <LORA_begin+0x78>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 f9e8 	bl	8003324 <LORA_init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d103      	bne.n	8000f62 <LORA_begin+0x6e>
		printf("LORA OK");
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <LORA_begin+0xa0>)
 8000f5c:	f003 f9b0 	bl	80042c0 <iprintf>
	} else {
		printf("LORA ERROR");
	}
}
 8000f60:	e002      	b.n	8000f68 <LORA_begin+0x74>
		printf("LORA ERROR");
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <LORA_begin+0xa4>)
 8000f64:	f003 f9ac 	bl	80042c0 <iprintf>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000013c 	.word	0x2000013c
 8000f70:	200000ec 	.word	0x200000ec
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	20000094 	.word	0x20000094
 8000f80:	080040a1 	.word	0x080040a1
 8000f84:	08003a49 	.word	0x08003a49
 8000f88:	08003d6f 	.word	0x08003d6f
 8000f8c:	08003ba1 	.word	0x08003ba1
 8000f90:	08003c71 	.word	0x08003c71
 8000f94:	08005e38 	.word	0x08005e38
 8000f98:	08005e40 	.word	0x08005e40

08000f9c <CTL_CRC8XOR>:

uint8_t CTL_CRC8XOR(const uint8_t *array, size_t size) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	uint8_t value = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < size; i++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	e009      	b.n	8000fc4 <CTL_CRC8XOR+0x28>
		value ^= array[i];
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	4053      	eors	r3, r2
 8000fbc:	73fb      	strb	r3, [r7, #15]
	for (size_t i = 0; i < size; i++) {
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d3f1      	bcc.n	8000fb0 <CTL_CRC8XOR+0x14>
	}
	return value;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <loraHandle>:

void loraHandle() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
	enum {
		LORA_RESPONSE_SIZE = 4
	};
	uint8_t msgResLoRa[LORA_RESPONSE_SIZE] = { 0 };
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
	uint8_t messLora[4] = { 4,5,6,7 };
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <loraHandle+0x9c>)
 8000fe8:	607b      	str	r3, [r7, #4]
//
//	for (size_t i = 0; i < CFG_MASTER_ID_SIZE - 1; i++) {
//		master[i] = *(volatile uint8_t*) (CFG_EEPROM_MASTER_ID + i);
//	}

	messLora[0] = CTL_CRC8XOR((uint8_t*) id, strlen(id));
 8000fea:	4824      	ldr	r0, [pc, #144]	; (800107c <loraHandle+0xa0>)
 8000fec:	f7ff f8f0 	bl	80001d0 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4821      	ldr	r0, [pc, #132]	; (800107c <loraHandle+0xa0>)
 8000ff6:	f7ff ffd1 	bl	8000f9c <CTL_CRC8XOR>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	713b      	strb	r3, [r7, #4]
	messLora[1] = CTL_CRC8XOR((uint8_t*) master, strlen(master));
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <loraHandle+0xa4>)
 8001000:	f7ff f8e6 	bl	80001d0 <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	481d      	ldr	r0, [pc, #116]	; (8001080 <loraHandle+0xa4>)
 800100a:	f7ff ffc7 	bl	8000f9c <CTL_CRC8XOR>
 800100e:	4603      	mov	r3, r0
 8001010:	717b      	strb	r3, [r7, #5]
	messLora[2] = 0x01;
 8001012:	2301      	movs	r3, #1
 8001014:	71bb      	strb	r3, [r7, #6]
	messLora[3] = CTL_CRC8XOR(messLora, 3);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2103      	movs	r1, #3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ffbe 	bl	8000f9c <CTL_CRC8XOR>
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]

	LORA_receiveIT(lora, messLora,4);
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <loraHandle+0xa8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1d39      	adds	r1, r7, #4
 800102a:	2204      	movs	r2, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f002 f98b 	bl	8003348 <LORA_receiveIT>
	uint16_t timeStap = HAL_GetTick();
 8001032:	f000 fb67 	bl	8001704 <HAL_GetTick>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]
	while (HAL_GetTick() - timeStap < 60000) {
 800103a:	e00f      	b.n	800105c <loraHandle+0x80>
		if (irqLoRaFlag) {
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <loraHandle+0xac>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <loraHandle+0x80>
			irqLoRaFlag = 0;
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <loraHandle+0xac>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
			LORA_receiveIT(lora, msgResLoRa, LORA_RESPONSE_SIZE);
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <loraHandle+0xa8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f107 0108 	add.w	r1, r7, #8
 8001052:	2204      	movs	r2, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f977 	bl	8003348 <LORA_receiveIT>
//			if (msgResLoRa[0] == messLora[0] && msgResLoRa[1] == messLora[1]
//					&& msgResLoRa[3] == messLora[3]) {
//				LORA_transmit(lora, messLora, 4, 1000);
//			}
			break;
 800105a:	e009      	b.n	8001070 <loraHandle+0x94>
	while (HAL_GetTick() - timeStap < 60000) {
 800105c:	f000 fb52 	bl	8001704 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800106a:	4293      	cmp	r3, r2
 800106c:	d9e6      	bls.n	800103c <loraHandle+0x60>
		}
	}
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	07060504 	.word	0x07060504
 800107c:	20000144 	.word	0x20000144
 8001080:	20000154 	.word	0x20000154
 8001084:	2000013c 	.word	0x2000013c
 8001088:	20000140 	.word	0x20000140

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001090:	f000 fad2 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001094:	f000 f80a 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001098:	f000 f89c 	bl	80011d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800109c:	f000 f864 	bl	8001168 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LORA_begin();
 80010a0:	f7ff ff28 	bl	8000ef4 <LORA_begin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loraHandle();
 80010a4:	f7ff ff9a 	bl	8000fdc <loraHandle>
 80010a8:	e7fc      	b.n	80010a4 <main+0x18>
	...

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	2230      	movs	r2, #48	; 0x30
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 f955 	bl	800436a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <SystemClock_Config+0xb4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a21      	ldr	r2, [pc, #132]	; (8001160 <SystemClock_Config+0xb4>)
 80010da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <SystemClock_Config+0xb4>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SystemClock_Config+0xb8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1b      	ldr	r2, [pc, #108]	; (8001164 <SystemClock_Config+0xb8>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <SystemClock_Config+0xb8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001110:	2310      	movs	r3, #16
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fe23 	bl	8001d68 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001128:	f000 f8ec 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f886 	bl	8002258 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001152:	f000 f8d7 	bl	8001304 <Error_Handler>
  }
}
 8001156:	bf00      	nop
 8001158:	3750      	adds	r7, #80	; 0x50
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_SPI2_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <MX_SPI2_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_SPI2_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_SPI2_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_SPI2_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_SPI2_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_SPI2_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_SPI2_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_SPI2_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_SPI2_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_SPI2_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI2_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_SPI2_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_SPI2_Init+0x64>)
 80011ba:	f001 f9f9 	bl	80025b0 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 f89e 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000094 	.word	0x20000094
 80011d0:	40003800 	.word	0x40003800

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <MX_GPIO_Init+0xfc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a37      	ldr	r2, [pc, #220]	; (80012d0 <MX_GPIO_Init+0xfc>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <MX_GPIO_Init+0xfc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <MX_GPIO_Init+0xfc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <MX_GPIO_Init+0xfc>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_GPIO_Init+0xfc>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001260:	481c      	ldr	r0, [pc, #112]	; (80012d4 <MX_GPIO_Init+0x100>)
 8001262:	f000 fd4f 	bl	8001d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin;
 8001266:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4815      	ldr	r0, [pc, #84]	; (80012d4 <MX_GPIO_Init+0x100>)
 8001280:	f000 fba4 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001288:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <MX_GPIO_Init+0x104>)
 800129a:	f000 fb97 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4809      	ldr	r0, [pc, #36]	; (80012d8 <MX_GPIO_Init+0x104>)
 80012b2:	f000 fb8b 	bl	80019cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2017      	movs	r0, #23
 80012bc:	f000 fb2d 	bl	800191a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012c0:	2017      	movs	r0, #23
 80012c2:	f000 fb46 	bl	8001952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40020800 	.word	0x40020800

080012dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	    	/* Wake up MCU from stop mode by any EXTI line */
	    	if (GPIO_Pin == DIO1_Pin) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2b40      	cmp	r3, #64	; 0x40
 80012ea:	d102      	bne.n	80012f2 <HAL_GPIO_EXTI_Callback+0x16>
	    		/* Set flag to read LoRa message */
	    		irqLoRaFlag = 1;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_GPIO_EXTI_Callback+0x24>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
	    	}
	    }
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000140 	.word	0x20000140

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_SPI_MspInit+0x94>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_SPI_MspInit+0x98>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013cc:	2305      	movs	r3, #5
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <HAL_SPI_MspInit+0x9c>)
 80013d8:	f000 faf8 	bl	80019cc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2024      	movs	r0, #36	; 0x24
 80013e2:	f000 fa9a 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013e6:	2024      	movs	r0, #36	; 0x24
 80013e8:	f000 fab3 	bl	8001952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40003800 	.word	0x40003800
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144c:	f000 f946 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}

08001454 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8001458:	2040      	movs	r0, #64	; 0x40
 800145a:	f000 fc6d 	bl	8001d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <SPI2_IRQHandler+0x10>)
 800146a:	f001 fd19 	bl	8002ea0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000094 	.word	0x20000094

08001478 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
  }

  return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
  }
  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	605a      	str	r2, [r3, #4]
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f002 ff40 	bl	8004408 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20020000 	.word	0x20020000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	20000164 	.word	0x20000164
 80015bc:	200002b8 	.word	0x200002b8

080015c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ea:	490e      	ldr	r1, [pc, #56]	; (8001624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001600:	4c0b      	ldr	r4, [pc, #44]	; (8001630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160e:	f7ff ffd7 	bl	80015c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001612:	f002 feff 	bl	8004414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001616:	f7ff fd39 	bl	800108c <main>
  bx  lr    
 800161a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800161c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001628:	08005ed0 	.word	0x08005ed0
  ldr r2, =_sbss
 800162c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001630:	200002b8 	.word	0x200002b8

08001634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <HAL_Init+0x40>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_Init+0x40>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_Init+0x40>)
 800164e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001652:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x40>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f94f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fe50 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023c00 	.word	0x40023c00

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f967 	bl	800196e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f92f 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008
 8001700:	20000168 	.word	0x20000168

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000168 	.word	0x20000168

0800171c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff ffee 	bl	8001704 <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001734:	d005      	beq.n	8001742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_Delay+0x44>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4413      	add	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001742:	bf00      	nop
 8001744:	f7ff ffde 	bl	8001704 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d8f7      	bhi.n	8001744 <HAL_Delay+0x28>
  {
  }
}
 8001754:	bf00      	nop
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000008 	.word	0x20000008

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff8e 	bl	8001858 <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5d 	bl	8001804 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d004      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e00c      	b.n	80019be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2205      	movs	r2, #5
 80019a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e16b      	b.n	8001cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 815a 	bne.w	8001cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80b4 	beq.w	8001cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a5f      	ldr	r2, [pc, #380]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a5b      	ldr	r2, [pc, #364]	; (8001cdc <HAL_GPIO_Init+0x310>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x314>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d02b      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <HAL_GPIO_Init+0x318>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d025      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x31c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01f      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x320>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d019      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x216>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x212>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x20a>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x310>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae90 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	041a      	lsls	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	619a      	str	r2, [r3, #24]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fac0 	bl	80012dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e267      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d075      	beq.n	8001e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d00c      	beq.n	8001dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d92:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d112      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9e:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001daa:	d10b      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	4b7e      	ldr	r3, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d05b      	beq.n	8001e70 <HAL_RCC_OscConfig+0x108>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d157      	bne.n	8001e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e242      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x74>
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a75      	ldr	r2, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xb0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x98>
 8001de6:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6d      	ldr	r3, [pc, #436]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6c      	ldr	r2, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xb0>
 8001e00:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a68      	ldr	r2, [pc, #416]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a65      	ldr	r2, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fc70 	bl	8001704 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fc6c 	bl	8001704 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e207      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xc0>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff fc5c 	bl	8001704 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff fc58 	bl	8001704 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1f3      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0xe8>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x152>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1c7      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4937      	ldr	r1, [pc, #220]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e03a      	b.n	8001f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_RCC_OscConfig+0x244>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff fc11 	bl	8001704 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fc0d 	bl	8001704 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1a8      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4925      	ldr	r1, [pc, #148]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <HAL_RCC_OscConfig+0x244>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7ff fbf0 	bl	8001704 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff fbec 	bl	8001704 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e187      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d036      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_RCC_OscConfig+0x248>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff fbd0 	bl	8001704 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff fbcc 	bl	8001704 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e167      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x200>
 8001f86:	e01b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_OscConfig+0x248>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fbb9 	bl	8001704 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	e00e      	b.n	8001fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fbb5 	bl	8001704 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d907      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e150      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	42470000 	.word	0x42470000
 8001fb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1ea      	bne.n	8001f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8097 	beq.w	80020fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10f      	bne.n	8001ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a7c      	ldr	r2, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b7a      	ldr	r3, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	4b77      	ldr	r3, [pc, #476]	; (80021dc <HAL_RCC_OscConfig+0x474>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d118      	bne.n	800203c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200a:	4b74      	ldr	r3, [pc, #464]	; (80021dc <HAL_RCC_OscConfig+0x474>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a73      	ldr	r2, [pc, #460]	; (80021dc <HAL_RCC_OscConfig+0x474>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb75 	bl	8001704 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7ff fb71 	bl	8001704 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e10c      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x474>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x2ea>
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6713      	str	r3, [r2, #112]	; 0x70
 8002050:	e01c      	b.n	800208c <HAL_RCC_OscConfig+0x324>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b05      	cmp	r3, #5
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x30c>
 800205a:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	4a5e      	ldr	r2, [pc, #376]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6713      	str	r3, [r2, #112]	; 0x70
 8002066:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	4a5b      	ldr	r2, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6713      	str	r3, [r2, #112]	; 0x70
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0x324>
 8002074:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	; 0x70
 8002080:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 0304 	bic.w	r3, r3, #4
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff fb36 	bl	8001704 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff fb32 	bl	8001704 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0cb      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0ee      	beq.n	800209c <HAL_RCC_OscConfig+0x334>
 80020be:	e014      	b.n	80020ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff fb20 	bl	8001704 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c6:	e00a      	b.n	80020de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7ff fb1c 	bl	8001704 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e0b5      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020de:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ee      	bne.n	80020c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f0:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a38      	ldr	r2, [pc, #224]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80a1 	beq.w	8002248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002106:	4b34      	ldr	r3, [pc, #208]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d05c      	beq.n	80021cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d141      	bne.n	800219e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_OscConfig+0x478>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff faf0 	bl	8001704 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff faec 	bl	8001704 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e087      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	4b27      	ldr	r3, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	041b      	lsls	r3, r3, #16
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	491b      	ldr	r1, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x478>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff fac5 	bl	8001704 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7ff fac1 	bl	8001704 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e05c      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x416>
 800219c:	e054      	b.n	8002248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_RCC_OscConfig+0x478>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff faae 	bl	8001704 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff faaa 	bl	8001704 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e045      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_OscConfig+0x470>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x444>
 80021ca:	e03d      	b.n	8002248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e038      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_OscConfig+0x4ec>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d028      	beq.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d121      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d11a      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221c:	4293      	cmp	r3, r2
 800221e:	d111      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	085b      	lsrs	r3, r3, #1
 800222c:	3b01      	subs	r3, #1
 800222e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0cc      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b68      	ldr	r3, [pc, #416]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d90c      	bls.n	8002294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b65      	ldr	r3, [pc, #404]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b63      	ldr	r3, [pc, #396]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0b8      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d020      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	494d      	ldr	r1, [pc, #308]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d044      	beq.n	8002378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b47      	ldr	r3, [pc, #284]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d119      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e07f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002312:	2b03      	cmp	r3, #3
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e067      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b37      	ldr	r3, [pc, #220]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4934      	ldr	r1, [pc, #208]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002348:	f7ff f9dc 	bl	8001704 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff f9d8 	bl	8001704 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e04f      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d20c      	bcs.n	80023a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e032      	b.n	8002406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4916      	ldr	r1, [pc, #88]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	490e      	ldr	r1, [pc, #56]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023de:	f000 f821 	bl	8002424 <HAL_RCC_GetSysClockFreq>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	490a      	ldr	r1, [pc, #40]	; (8002418 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
 80023f2:	fa22 f303 	lsr.w	r3, r2, r3
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff f93c 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023c00 	.word	0x40023c00
 8002414:	40023800 	.word	0x40023800
 8002418:	08005e4c 	.word	0x08005e4c
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004

08002424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002428:	b090      	sub	sp, #64	; 0x40
 800242a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002434:	2300      	movs	r3, #0
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243c:	4b59      	ldr	r3, [pc, #356]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d00d      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x40>
 8002448:	2b08      	cmp	r3, #8
 800244a:	f200 80a1 	bhi.w	8002590 <HAL_RCC_GetSysClockFreq+0x16c>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x34>
 8002452:	2b04      	cmp	r3, #4
 8002454:	d003      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x3a>
 8002456:	e09b      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800245c:	e09b      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002462:	e098      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246e:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d028      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	2200      	movs	r2, #0
 8002482:	623b      	str	r3, [r7, #32]
 8002484:	627a      	str	r2, [r7, #36]	; 0x24
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800248c:	2100      	movs	r1, #0
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002490:	fb03 f201 	mul.w	r2, r3, r1
 8002494:	2300      	movs	r3, #0
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	4413      	add	r3, r2
 800249c:	4a43      	ldr	r2, [pc, #268]	; (80025ac <HAL_RCC_GetSysClockFreq+0x188>)
 800249e:	fba0 1202 	umull	r1, r2, r0, r2
 80024a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a4:	460a      	mov	r2, r1
 80024a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80024a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024aa:	4413      	add	r3, r2
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	2200      	movs	r2, #0
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024be:	f7fe fb9b 	bl	8000bf8 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4613      	mov	r3, r2
 80024c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ca:	e053      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	2200      	movs	r2, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	617a      	str	r2, [r7, #20]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024de:	f04f 0b00 	mov.w	fp, #0
 80024e2:	4652      	mov	r2, sl
 80024e4:	465b      	mov	r3, fp
 80024e6:	f04f 0000 	mov.w	r0, #0
 80024ea:	f04f 0100 	mov.w	r1, #0
 80024ee:	0159      	lsls	r1, r3, #5
 80024f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024f4:	0150      	lsls	r0, r2, #5
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ebb2 080a 	subs.w	r8, r2, sl
 80024fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800250e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002512:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002516:	ebb2 0408 	subs.w	r4, r2, r8
 800251a:	eb63 0509 	sbc.w	r5, r3, r9
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	00eb      	lsls	r3, r5, #3
 8002528:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252c:	00e2      	lsls	r2, r4, #3
 800252e:	4614      	mov	r4, r2
 8002530:	461d      	mov	r5, r3
 8002532:	eb14 030a 	adds.w	r3, r4, sl
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	eb45 030b 	adc.w	r3, r5, fp
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800254a:	4629      	mov	r1, r5
 800254c:	028b      	lsls	r3, r1, #10
 800254e:	4621      	mov	r1, r4
 8002550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002554:	4621      	mov	r1, r4
 8002556:	028a      	lsls	r2, r1, #10
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	2200      	movs	r2, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	60fa      	str	r2, [r7, #12]
 8002564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002568:	f7fe fb46 	bl	8000bf8 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4613      	mov	r3, r2
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	3301      	adds	r3, #1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002584:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002598:	4618      	mov	r0, r3
 800259a:	3740      	adds	r7, #64	; 0x40
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	00f42400 	.word	0x00f42400
 80025ac:	017d7840 	.word	0x017d7840

080025b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07b      	b.n	80026ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d108      	bne.n	80025dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025d2:	d009      	beq.n	80025e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
 80025da:	e005      	b.n	80025e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe feac 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800261e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	ea42 0103 	orr.w	r1, r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0104 	and.w	r1, r3, #4
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0210 	and.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b088      	sub	sp, #32
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_SPI_Transmit+0x22>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e126      	b.n	8002932 <HAL_SPI_Transmit+0x270>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ec:	f7ff f80a 	bl	8001704 <HAL_GetTick>
 80026f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d002      	beq.n	8002708 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002706:	e10b      	b.n	8002920 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_SPI_Transmit+0x52>
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002718:	e102      	b.n	8002920 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	88fa      	ldrh	r2, [r7, #6]
 8002738:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002760:	d10f      	bne.n	8002782 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002770:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002780:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d007      	beq.n	80027a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800279e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a8:	d14b      	bne.n	8002842 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_SPI_Transmit+0xf6>
 80027b2:	8afb      	ldrh	r3, [r7, #22]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d13e      	bne.n	8002836 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	1c9a      	adds	r2, r3, #2
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027dc:	e02b      	b.n	8002836 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d112      	bne.n	8002812 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002810:	e011      	b.n	8002836 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002812:	f7fe ff77 	bl	8001704 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d803      	bhi.n	800282a <HAL_SPI_Transmit+0x168>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d102      	bne.n	8002830 <HAL_SPI_Transmit+0x16e>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002834:	e074      	b.n	8002920 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ce      	bne.n	80027de <HAL_SPI_Transmit+0x11c>
 8002840:	e04c      	b.n	80028dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_SPI_Transmit+0x18e>
 800284a:	8afb      	ldrh	r3, [r7, #22]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d140      	bne.n	80028d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002876:	e02c      	b.n	80028d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d113      	bne.n	80028ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80028ac:	e011      	b.n	80028d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ae:	f7fe ff29 	bl	8001704 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d803      	bhi.n	80028c6 <HAL_SPI_Transmit+0x204>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d102      	bne.n	80028cc <HAL_SPI_Transmit+0x20a>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028d0:	e026      	b.n	8002920 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1cd      	bne.n	8002878 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fcdd 	bl	80032a0 <SPI_EndRxTxTransaction>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e000      	b.n	8002920 <HAL_SPI_Transmit+0x25e>
  }

error:
 800291e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002930:	7ffb      	ldrb	r3, [r7, #31]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b088      	sub	sp, #32
 800293e:	af02      	add	r7, sp, #8
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002956:	d112      	bne.n	800297e <HAL_SPI_Receive+0x44>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10e      	bne.n	800297e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2204      	movs	r2, #4
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4613      	mov	r3, r2
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 f8f1 	bl	8002b5c <HAL_SPI_TransmitReceive>
 800297a:	4603      	mov	r3, r0
 800297c:	e0ea      	b.n	8002b54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_SPI_Receive+0x52>
 8002988:	2302      	movs	r3, #2
 800298a:	e0e3      	b.n	8002b54 <HAL_SPI_Receive+0x21a>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002994:	f7fe feb6 	bl	8001704 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d002      	beq.n	80029ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029a6:	2302      	movs	r3, #2
 80029a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029aa:	e0ca      	b.n	8002b42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_SPI_Receive+0x7e>
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029bc:	e0c1      	b.n	8002b42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2204      	movs	r2, #4
 80029c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a04:	d10f      	bne.n	8002a26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d007      	beq.n	8002a44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d162      	bne.n	8002b12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a4c:	e02e      	b.n	8002aac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d115      	bne.n	8002a88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f103 020c 	add.w	r2, r3, #12
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a86:	e011      	b.n	8002aac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a88:	f7fe fe3c 	bl	8001704 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d803      	bhi.n	8002aa0 <HAL_SPI_Receive+0x166>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9e:	d102      	bne.n	8002aa6 <HAL_SPI_Receive+0x16c>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002aaa:	e04a      	b.n	8002b42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1cb      	bne.n	8002a4e <HAL_SPI_Receive+0x114>
 8002ab6:	e031      	b.n	8002b1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d113      	bne.n	8002aee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	b292      	uxth	r2, r2
 8002ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aec:	e011      	b.n	8002b12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aee:	f7fe fe09 	bl	8001704 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d803      	bhi.n	8002b06 <HAL_SPI_Receive+0x1cc>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_Receive+0x1d2>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b10:	e017      	b.n	8002b42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1cd      	bne.n	8002ab8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fb57 	bl	80031d4 <SPI_EndRxTransaction>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
 8002b3e:	e000      	b.n	8002b42 <HAL_SPI_Receive+0x208>
  }

error :
 8002b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x26>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e18a      	b.n	8002e98 <HAL_SPI_TransmitReceive+0x33c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b8a:	f7fe fdbb 	bl	8001704 <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ba4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d00f      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x70>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb2:	d107      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x68>
 8002bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d003      	beq.n	8002bcc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bca:	e15b      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x82>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_SPI_TransmitReceive+0x82>
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002be4:	e14e      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d003      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2205      	movs	r2, #5
 8002bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d007      	beq.n	8002c4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c56:	d178      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x10a>
 8002c60:	8b7b      	ldrh	r3, [r7, #26]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d166      	bne.n	8002d34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	1c9a      	adds	r2, r3, #2
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8a:	e053      	b.n	8002d34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d11b      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x176>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d016      	beq.n	8002cd2 <HAL_SPI_TransmitReceive+0x176>
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d113      	bne.n	8002cd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	1c9a      	adds	r2, r3, #2
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d119      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x1b8>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d014      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	b292      	uxth	r2, r2
 8002cf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d10:	2301      	movs	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d14:	f7fe fcf6 	bl	8001704 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d807      	bhi.n	8002d34 <HAL_SPI_TransmitReceive+0x1d8>
 8002d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d003      	beq.n	8002d34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d32:	e0a7      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1a6      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x130>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1a1      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x130>
 8002d48:	e07c      	b.n	8002e44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x1fc>
 8002d52:	8b7b      	ldrh	r3, [r7, #26]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d16b      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	330c      	adds	r3, #12
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7e:	e057      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x26c>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <HAL_SPI_TransmitReceive+0x26c>
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d114      	bne.n	8002dc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	7812      	ldrb	r2, [r2, #0]
 8002daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d119      	bne.n	8002e0a <HAL_SPI_TransmitReceive+0x2ae>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d014      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	1c5a      	adds	r2, r3, #1
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e06:	2301      	movs	r3, #1
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e0a:	f7fe fc7b 	bl	8001704 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d803      	bhi.n	8002e22 <HAL_SPI_TransmitReceive+0x2c6>
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d102      	bne.n	8002e28 <HAL_SPI_TransmitReceive+0x2cc>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e2e:	e029      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1a2      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x224>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d19d      	bne.n	8002d80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fa29 	bl	80032a0 <SPI_EndRxTxTransaction>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e60:	e010      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10b      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	e000      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d004      	beq.n	8002ee0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
    return;
 8002ede:	e0ce      	b.n	800307e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_SPI_IRQHandler+0x5e>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
    return;
 8002efc:	e0bf      	b.n	800307e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_SPI_IRQHandler+0x7e>
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80b0 	beq.w	800307e <HAL_SPI_IRQHandler+0x1de>
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80aa 	beq.w	800307e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d023      	beq.n	8002f7c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d011      	beq.n	8002f64 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f44:	f043 0204 	orr.w	r2, r3, #4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	e00b      	b.n	8002f7c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
        return;
 8002f7a:	e080      	b.n	800307e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d014      	beq.n	8002fb0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d04f      	beq.n	800307c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_SPI_IRQHandler+0x168>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d034      	beq.n	8003072 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0203 	bic.w	r2, r2, #3
 8003016:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d011      	beq.n	8003044 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003024:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_SPI_IRQHandler+0x1e4>)
 8003026:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fcaa 	bl	8001986 <HAL_DMA_Abort_IT>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	4a0c      	ldr	r2, [pc, #48]	; (8003084 <HAL_SPI_IRQHandler+0x1e4>)
 8003052:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fc94 	bl	8001986 <HAL_DMA_Abort_IT>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003070:	e003      	b.n	800307a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f808 	bl	8003088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003078:	e000      	b.n	800307c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800307a:	bf00      	nop
    return;
 800307c:	bf00      	nop
  }
}
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	0800309d 	.word	0x0800309d

08003088 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f7ff ffe6 	bl	8003088 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030d4:	f7fe fb16 	bl	8001704 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030e4:	f7fe fb0e 	bl	8001704 <HAL_GetTick>
 80030e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	0d1b      	lsrs	r3, r3, #20
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030fa:	e054      	b.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d050      	beq.n	80031a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003104:	f7fe fafe 	bl	8001704 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	429a      	cmp	r2, r3
 8003112:	d902      	bls.n	800311a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d13d      	bne.n	8003196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003132:	d111      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313c:	d004      	beq.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003146:	d107      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003160:	d10f      	bne.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e017      	b.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d19b      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3720      	adds	r7, #32
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000000 	.word	0x20000000

080031d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031e8:	d111      	bne.n	800320e <SPI_EndRxTransaction+0x3a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f2:	d004      	beq.n	80031fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fc:	d107      	bne.n	800320e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003216:	d12a      	bne.n	800326e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003220:	d012      	beq.n	8003248 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f7ff ff49 	bl	80030c4 <SPI_WaitFlagStateUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02d      	beq.n	8003294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e026      	b.n	8003296 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2200      	movs	r2, #0
 8003250:	2101      	movs	r1, #1
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f7ff ff36 	bl	80030c4 <SPI_WaitFlagStateUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d01a      	beq.n	8003294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e013      	b.n	8003296 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	2101      	movs	r1, #1
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7ff ff23 	bl	80030c4 <SPI_WaitFlagStateUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e000      	b.n	8003296 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <SPI_EndRxTxTransaction+0x7c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <SPI_EndRxTxTransaction+0x80>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0d5b      	lsrs	r3, r3, #21
 80032b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032bc:	fb02 f303 	mul.w	r3, r2, r3
 80032c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ca:	d112      	bne.n	80032f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fef4 	bl	80030c4 <SPI_WaitFlagStateUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f043 0220 	orr.w	r2, r3, #32
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e00f      	b.n	8003312 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d0f2      	beq.n	80032f2 <SPI_EndRxTxTransaction+0x52>
 800330c:	e000      	b.n	8003310 <SPI_EndRxTxTransaction+0x70>
        break;
 800330e:	bf00      	nop
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000000 	.word	0x20000000
 8003320:	165e9f81 	.word	0x165e9f81

08003324 <LORA_init>:

#include "lora.h"
#include "rfm95.h"

THT_StatusTypeDef LORA_init(LORA_HandleTypeDef *const me)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <LORA_init+0x12>
	{
		return THT_ERROR;
 8003332:	2302      	movs	r3, #2
 8003334:	e004      	b.n	8003340 <LORA_init+0x1c>
	}
	return (*me->init)(me);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	4798      	blx	r3
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <LORA_receiveIT>:

	return (*me->startReceiveIT)(me);
}

THT_StatusTypeDef LORA_receiveIT(LORA_HandleTypeDef *const me, uint8_t *pBuffer, uint16_t size)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <LORA_receiveIT+0x1a>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <LORA_receiveIT+0x1e>
	{
		return THT_ERROR;
 8003362:	2302      	movs	r3, #2
 8003364:	e006      	b.n	8003374 <LORA_receiveIT+0x2c>
	}

	return (*me->receiveIT)(me, pBuffer, size);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	4798      	blx	r3
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <RFM95_setNSSPin>:
 * @brief Set NSS pin - this enable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003392:	2201      	movs	r2, #1
 8003394:	4619      	mov	r1, r3
 8003396:	f7fe fcb5 	bl	8001d04 <HAL_GPIO_WritePin>
 800339a:	e000      	b.n	800339e <RFM95_setNSSPin+0x22>
		return;
 800339c:	bf00      	nop
}
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <RFM95_clearNSSPin>:
 * @brief Reset NSS pin - this disable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033ba:	2200      	movs	r2, #0
 80033bc:	4619      	mov	r1, r3
 80033be:	f7fe fca1 	bl	8001d04 <HAL_GPIO_WritePin>
 80033c2:	e000      	b.n	80033c6 <RFM95_clearNSSPin+0x22>
		return;
 80033c4:	bf00      	nop
}
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <RFM95_writeRegister>:
 * @param data [in] The data of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
											 uint8_t address, const uint8_t data)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	70fb      	strb	r3, [r7, #3]
 80033d8:	4613      	mov	r3, r2
 80033da:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <RFM95_writeRegister+0x1a>
	{
		return THT_ERROR;
 80033e2:	2302      	movs	r3, #2
 80033e4:	e021      	b.n	800342a <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffdc 	bl	80033a4 <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = {address | 0x80, data};
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	733b      	strb	r3, [r7, #12]
 80033f6:	78bb      	ldrb	r3, [r7, #2]
 80033f8:	737b      	strb	r3, [r7, #13]
	//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80033fe:	f107 010c 	add.w	r1, r7, #12
 8003402:	2364      	movs	r3, #100	; 0x64
 8003404:	2202      	movs	r2, #2
 8003406:	f7ff f95c 	bl	80026c2 <HAL_SPI_Transmit>
 800340a:	4603      	mov	r3, r0
 800340c:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte.*/
	RFM95_setNSSPin(me);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffb4 	bl	800337c <RFM95_setNSSPin>

	if (res == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <RFM95_writeRegister+0x52>
	{
		return THT_OK;
 800341a:	2301      	movs	r3, #1
 800341c:	e005      	b.n	800342a <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 800341e:	7bfb      	ldrb	r3, [r7, #15]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <RFM95_writeRegister+0x5c>
	{
		return THT_ERROR;
 8003424:	2302      	movs	r3, #2
 8003426:	e000      	b.n	800342a <RFM95_writeRegister+0x5e>
	}
	else
	{
		return THT_TIMEOUT;
 8003428:	2303      	movs	r3, #3
	}
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <RFM95_writeBurstRegister>:
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeBurstRegister(
	RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *pData,
	uint8_t size)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	460b      	mov	r3, r1
 8003440:	72fb      	strb	r3, [r7, #11]
 8003442:	4613      	mov	r3, r2
 8003444:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <RFM95_writeBurstRegister+0x1e>
	{
		return THT_ERROR;
 800344c:	2302      	movs	r3, #2
 800344e:	e041      	b.n	80034d4 <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 8003454:	7abb      	ldrb	r3, [r7, #10]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d109      	bne.n	800346e <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 800345a:	7af9      	ldrb	r1, [r7, #11]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ffb2 	bl	80033cc <RFM95_writeRegister>
 8003468:	4603      	mov	r3, r0
 800346a:	75fb      	strb	r3, [r7, #23]
 800346c:	e031      	b.n	80034d2 <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f7ff ff98 	bl	80033a4 <RFM95_clearNSSPin>

		address |= 0x80;
 8003474:	7afb      	ldrb	r3, [r7, #11]
 8003476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800347a:	b2db      	uxtb	r3, r3
 800347c:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003482:	f107 010b 	add.w	r1, r7, #11
 8003486:	2364      	movs	r3, #100	; 0x64
 8003488:	2201      	movs	r2, #1
 800348a:	f7ff f91a 	bl	80026c2 <HAL_SPI_Transmit>
 800348e:	4603      	mov	r3, r0
 8003490:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d119      	bne.n	80034cc <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e010      	b.n	80034c0 <RFM95_writeBurstRegister+0x8e>
			{
				//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100); // pdata++
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	1c4b      	adds	r3, r1, #1
 80034a6:	607b      	str	r3, [r7, #4]
 80034a8:	2364      	movs	r3, #100	; 0x64
 80034aa:	2201      	movs	r2, #1
 80034ac:	f7ff f909 	bl	80026c2 <HAL_SPI_Transmit>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 80034b4:	7dfb      	ldrb	r3, [r7, #23]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d107      	bne.n	80034ca <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	3301      	adds	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	7abb      	ldrb	r3, [r7, #10]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3ea      	bcc.n	800349e <RFM95_writeBurstRegister+0x6c>
 80034c8:	e000      	b.n	80034cc <RFM95_writeBurstRegister+0x9a>
				{
					break;
 80034ca:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff ff55 	bl	800337c <RFM95_setNSSPin>
	}

	return res;
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <RFM95_readRegister>:
 * @param address [in] Register address
 * @param value [out] A pointer to a variable store the value of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *value)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	460b      	mov	r3, r1
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <RFM95_readRegister+0x18>
	{
		return THT_ERROR;
 80034f0:	2302      	movs	r3, #2
 80034f2:	e025      	b.n	8003540 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff55 	bl	80033a4 <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003502:	f107 010b 	add.w	r1, r7, #11
 8003506:	2364      	movs	r3, #100	; 0x64
 8003508:	2201      	movs	r2, #1
 800350a:	f7ff f8da 	bl	80026c2 <HAL_SPI_Transmit>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003516:	2364      	movs	r3, #100	; 0x64
 8003518:	2201      	movs	r2, #1
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f7ff fa0d 	bl	800293a <HAL_SPI_Receive>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff29 	bl	800337c <RFM95_setNSSPin>
	//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <RFM95_readRegister+0x58>
	{
		return THT_OK;
 8003530:	2301      	movs	r3, #1
 8003532:	e005      	b.n	8003540 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <RFM95_readRegister+0x62>
	{
		return THT_ERROR;
 800353a:	2302      	movs	r3, #2
 800353c:	e000      	b.n	8003540 <RFM95_readRegister+0x64>
	}
	else
	{
		return THT_TIMEOUT;
 800353e:	2303      	movs	r3, #3
	}
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <RFM95_setHeaderMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param headerMode [in] Header mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me, const uint8_t headerMode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <RFM95_setHeaderMode+0x16>
	{
		return THT_ERROR;
 800355a:	2302      	movs	r3, #2
 800355c:	e024      	b.n	80035a8 <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 8003566:	f107 030d 	add.w	r3, r7, #13
 800356a:	461a      	mov	r2, r3
 800356c:	211d      	movs	r1, #29
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ffb4 	bl	80034dc <RFM95_readRegister>
 8003574:	4603      	mov	r3, r0
 8003576:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8003578:	7bbb      	ldrb	r3, [r7, #14]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <RFM95_setHeaderMode+0x3a>
	{
		return res;
 800357e:	7bbb      	ldrb	r3, [r7, #14]
 8003580:	e012      	b.n	80035a8 <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t)(headerMode | (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 8003582:	7b7b      	ldrb	r3, [r7, #13]
 8003584:	b25b      	sxtb	r3, r3
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	b25a      	sxtb	r2, r3
 800358c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003590:	4313      	orrs	r3, r2
 8003592:	b25b      	sxtb	r3, r3
 8003594:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	461a      	mov	r2, r3
 800359a:	211d      	movs	r1, #29
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff15 	bl	80033cc <RFM95_writeRegister>
 80035a2:	4603      	mov	r3, r0
 80035a4:	73bb      	strb	r3, [r7, #14]

	return res;
 80035a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <RFM95_setSpreadingFactor>:
	@arg RFLR_MODEMCONFIG2_SF_11
	@arg RFLR_MODEMCONFIG2_SF_12                      // Phải cấu hình thêm LowDataRate
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me, const uint8_t SF)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <RFM95_setSpreadingFactor+0x16>
	{
		return THT_ERROR;
 80035c2:	2302      	movs	r3, #2
 80035c4:	e0ac      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	me->parent.SF = SF >> 4u;
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80035d8:	f107 030d 	add.w	r3, r7, #13
 80035dc:	461a      	mov	r2, r3
 80035de:	211e      	movs	r1, #30
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff7b 	bl	80034dc <RFM95_readRegister>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 80035ea:	7bbb      	ldrb	r3, [r7, #14]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d001      	beq.n	80035f4 <RFM95_setSpreadingFactor+0x44>
	{
		return THT_ERROR;
 80035f0:	2302      	movs	r3, #2
 80035f2:	e095      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b60      	cmp	r3, #96	; 0x60
 80035f8:	d144      	bne.n	8003684 <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t)(RFLR_MODEMCONFIG2_SF_6 | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	b25b      	sxtb	r3, r3
 8003604:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003608:	b25b      	sxtb	r3, r3
 800360a:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	461a      	mov	r2, r3
 8003610:	211e      	movs	r1, #30
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff feda 	bl	80033cc <RFM95_writeRegister>
 8003618:	4603      	mov	r3, r0
 800361a:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 800361c:	7bbb      	ldrb	r3, [r7, #14]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d001      	beq.n	8003626 <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 8003622:	7bbb      	ldrb	r3, [r7, #14]
 8003624:	e07c      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8003626:	2101      	movs	r1, #1
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff ff8d 	bl	8003548 <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 800362e:	f107 030d 	add.w	r3, r7, #13
 8003632:	461a      	mov	r2, r3
 8003634:	2131      	movs	r1, #49	; 0x31
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff50 	bl	80034dc <RFM95_readRegister>
 800363c:	4603      	mov	r3, r0
 800363e:	73bb      	strb	r3, [r7, #14]
		if (res != THT_OK)
 8003640:	7bbb      	ldrb	r3, [r7, #14]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <RFM95_setSpreadingFactor+0x9a>
		{
			return THT_ERROR;
 8003646:	2302      	movs	r3, #2
 8003648:	e06a      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
		}

		wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF6 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 800364a:	7b7b      	ldrb	r3, [r7, #13]
 800364c:	b25b      	sxtb	r3, r3
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f043 0305 	orr.w	r3, r3, #5
 8003658:	b25b      	sxtb	r3, r3
 800365a:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	461a      	mov	r2, r3
 8003660:	2131      	movs	r1, #49	; 0x31
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff feb2 	bl	80033cc <RFM95_writeRegister>
 8003668:	4603      	mov	r3, r0
 800366a:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 800366c:	7bbb      	ldrb	r3, [r7, #14]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d001      	beq.n	8003676 <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	e054      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF6);
 8003676:	220c      	movs	r2, #12
 8003678:	2137      	movs	r1, #55	; 0x37
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fea6 	bl	80033cc <RFM95_writeRegister>
 8003680:	4603      	mov	r3, r0
 8003682:	e04d      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8003684:	f107 030d 	add.w	r3, r7, #13
 8003688:	461a      	mov	r2, r3
 800368a:	2131      	movs	r1, #49	; 0x31
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff25 	bl	80034dc <RFM95_readRegister>
 8003692:	4603      	mov	r3, r0
 8003694:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 8003696:	7bbb      	ldrb	r3, [r7, #14]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <RFM95_setSpreadingFactor+0xf0>
	{
		return THT_ERROR;
 800369c:	2302      	movs	r3, #2
 800369e:	e03f      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 80036a0:	7b7b      	ldrb	r3, [r7, #13]
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	f023 0307 	bic.w	r3, r3, #7
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	f043 0303 	orr.w	r3, r3, #3
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	461a      	mov	r2, r3
 80036b6:	2131      	movs	r1, #49	; 0x31
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fe87 	bl	80033cc <RFM95_writeRegister>
 80036be:	4603      	mov	r3, r0
 80036c0:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d001      	beq.n	80036cc <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	e029      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	/* 2. Write register address 0x37 to value 0x0A */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF7_TO_SF12);
 80036cc:	220a      	movs	r2, #10
 80036ce:	2137      	movs	r1, #55	; 0x37
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fe7b 	bl	80033cc <RFM95_writeRegister>
 80036d6:	4603      	mov	r3, r0
 80036d8:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80036da:	7bbb      	ldrb	r3, [r7, #14]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d001      	beq.n	80036e4 <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 80036e0:	7bbb      	ldrb	r3, [r7, #14]
 80036e2:	e01d      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */

	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t)(SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 80036e4:	7b7b      	ldrb	r3, [r7, #13]
 80036e6:	b25b      	sxtb	r3, r3
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	b25a      	sxtb	r2, r3
 80036ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	73fb      	strb	r3, [r7, #15]
	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	//	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	461a      	mov	r2, r3
 80036fc:	211e      	movs	r1, #30
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fe64 	bl	80033cc <RFM95_writeRegister>
 8003704:	4603      	mov	r3, r0
 8003706:	73bb      	strb	r3, [r7, #14]

	if (SF == RFLR_MODEMCONFIG2_SF_12 || SF == RFLR_MODEMCONFIG2_SF_11)
 8003708:	78fb      	ldrb	r3, [r7, #3]
 800370a:	2bc0      	cmp	r3, #192	; 0xc0
 800370c:	d002      	beq.n	8003714 <RFM95_setSpreadingFactor+0x164>
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	2bb0      	cmp	r3, #176	; 0xb0
 8003712:	d104      	bne.n	800371e <RFM95_setSpreadingFactor+0x16e>
	{
		return RFM95_lowDataRateOptimize(me);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f873 	bl	8003800 <RFM95_lowDataRateOptimize>
 800371a:	4603      	mov	r3, r0
 800371c:	e000      	b.n	8003720 <RFM95_setSpreadingFactor+0x170>
	}

	return res;
 800371e:	7bbb      	ldrb	r3, [r7, #14]
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <RFM95_setBandwidth>:
	@arg RFLR_MODEMCONFIG1_BW_250_KHZ 0x80
	@arg RFLR_MODEMCONFIG1_BW_500_KHZ 0x90
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <RFM95_setBandwidth+0x16>
	{
		return THT_ERROR;
 800373a:	2302      	movs	r3, #2
 800373c:	e027      	b.n	800378e <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	b2da      	uxtb	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 8003750:	f107 030d 	add.w	r3, r7, #13
 8003754:	461a      	mov	r2, r3
 8003756:	211d      	movs	r1, #29
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff febf 	bl	80034dc <RFM95_readRegister>
 800375e:	4603      	mov	r3, r0
 8003760:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8003762:	7bbb      	ldrb	r3, [r7, #14]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <RFM95_setBandwidth+0x44>
	{
		return THT_ERROR;
 8003768:	2302      	movs	r3, #2
 800376a:	e010      	b.n	800378e <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t)(BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 800376c:	7b7b      	ldrb	r3, [r7, #13]
 800376e:	b25b      	sxtb	r3, r3
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	b25a      	sxtb	r2, r3
 8003776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377a:	4313      	orrs	r3, r2
 800377c:	b25b      	sxtb	r3, r3
 800377e:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	461a      	mov	r2, r3
 8003784:	211d      	movs	r1, #29
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fe20 	bl	80033cc <RFM95_writeRegister>
 800378c:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <RFM95_setCRCMode>:
 *  @arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 * 	@arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setCRCMode(RFM95_HandleTypeDef *const me, uint8_t CRCMode)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <RFM95_setCRCMode+0x16>
	{
		return THT_ERROR;
 80037a8:	2302      	movs	r3, #2
 80037aa:	e022      	b.n	80037f2 <RFM95_setCRCMode+0x5c>
	}

	uint8_t rByte = 0;
 80037ac:	2300      	movs	r3, #0
 80037ae:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 80037b4:	f107 030d 	add.w	r3, r7, #13
 80037b8:	461a      	mov	r2, r3
 80037ba:	211e      	movs	r1, #30
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe8d 	bl	80034dc <RFM95_readRegister>
 80037c2:	4603      	mov	r3, r0
 80037c4:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80037c6:	7bbb      	ldrb	r3, [r7, #14]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <RFM95_setCRCMode+0x3a>
	{
		return THT_ERROR;
 80037cc:	2302      	movs	r3, #2
 80037ce:	e010      	b.n	80037f2 <RFM95_setCRCMode+0x5c>
	}

	wByte = (uint8_t)(CRCMode | (rByte & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK));
 80037d0:	7b7b      	ldrb	r3, [r7, #13]
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	b25a      	sxtb	r2, r3
 80037da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037de:	4313      	orrs	r3, r2
 80037e0:	b25b      	sxtb	r3, r3
 80037e2:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	461a      	mov	r2, r3
 80037e8:	211e      	movs	r1, #30
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fdee 	bl	80033cc <RFM95_writeRegister>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	0000      	movs	r0, r0
 80037fc:	0000      	movs	r0, r0
	...

08003800 <RFM95_lowDataRateOptimize>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_lowDataRateOptimize(RFM95_HandleTypeDef *const me)
{
 8003800:	b5b0      	push	{r4, r5, r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <RFM95_lowDataRateOptimize+0x12>
	{
		return THT_ERROR;
 800380e:	2302      	movs	r3, #2
 8003810:	e076      	b.n	8003900 <RFM95_lowDataRateOptimize+0x100>
	}
	uint32_t bandwidth = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
	switch (me->parent.BW)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	795b      	ldrb	r3, [r3, #5]
 800381a:	2b09      	cmp	r3, #9
 800381c:	d00c      	beq.n	8003838 <RFM95_lowDataRateOptimize+0x38>
 800381e:	2b09      	cmp	r3, #9
 8003820:	dc0d      	bgt.n	800383e <RFM95_lowDataRateOptimize+0x3e>
 8003822:	2b07      	cmp	r3, #7
 8003824:	d002      	beq.n	800382c <RFM95_lowDataRateOptimize+0x2c>
 8003826:	2b08      	cmp	r3, #8
 8003828:	d003      	beq.n	8003832 <RFM95_lowDataRateOptimize+0x32>
		break;
	case 9:
		bandwidth = 500000;
		break;
	default:
		break;
 800382a:	e008      	b.n	800383e <RFM95_lowDataRateOptimize+0x3e>
		bandwidth = 125000;
 800382c:	4b38      	ldr	r3, [pc, #224]	; (8003910 <RFM95_lowDataRateOptimize+0x110>)
 800382e:	617b      	str	r3, [r7, #20]
		break;
 8003830:	e006      	b.n	8003840 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 250000;
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <RFM95_lowDataRateOptimize+0x114>)
 8003834:	617b      	str	r3, [r7, #20]
		break;
 8003836:	e003      	b.n	8003840 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 500000;
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <RFM95_lowDataRateOptimize+0x118>)
 800383a:	617b      	str	r3, [r7, #20]
		break;
 800383c:	e000      	b.n	8003840 <RFM95_lowDataRateOptimize+0x40>
		break;
 800383e:	bf00      	nop
	}

	float Tsymbol = 1000.0 * pow(2, me->parent.SF) / bandwidth;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	791b      	ldrb	r3, [r3, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fc fe5d 	bl	8000504 <__aeabi_ui2d>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	ec43 2b11 	vmov	d1, r2, r3
 8003852:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8003908 <RFM95_lowDataRateOptimize+0x108>
 8003856:	f001 fba9 	bl	8004fac <pow>
 800385a:	ec51 0b10 	vmov	r0, r1, d0
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <RFM95_lowDataRateOptimize+0x11c>)
 8003864:	f7fc fec8 	bl	80005f8 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	6978      	ldr	r0, [r7, #20]
 8003872:	f7fc fe47 	bl	8000504 <__aeabi_ui2d>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4620      	mov	r0, r4
 800387c:	4629      	mov	r1, r5
 800387e:	f7fc ffe5 	bl	800084c <__aeabi_ddiv>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f7fd f965 	bl	8000b58 <__aeabi_d2f>
 800388e:	4603      	mov	r3, r0
 8003890:	60fb      	str	r3, [r7, #12]
	uint8_t isEnableLDO = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	74fb      	strb	r3, [r7, #19]

	if (Tsymbol > 16.0)
 8003896:	edd7 7a03 	vldr	s15, [r7, #12]
 800389a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800389e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	dd02      	ble.n	80038ae <RFM95_lowDataRateOptimize+0xae>
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON;
 80038a8:	2308      	movs	r3, #8
 80038aa:	74fb      	strb	r3, [r7, #19]
 80038ac:	e001      	b.n	80038b2 <RFM95_lowDataRateOptimize+0xb2>
	}
	else
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_OFF;
 80038ae:	2300      	movs	r3, #0
 80038b0:	74fb      	strb	r3, [r7, #19]
	}

	uint8_t rByte = 0;
 80038b2:	2300      	movs	r3, #0
 80038b4:	727b      	strb	r3, [r7, #9]
	uint8_t wByte = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	72fb      	strb	r3, [r7, #11]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
 80038ba:	f107 0309 	add.w	r3, r7, #9
 80038be:	461a      	mov	r2, r3
 80038c0:	2126      	movs	r1, #38	; 0x26
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe0a 	bl	80034dc <RFM95_readRegister>
 80038c8:	4603      	mov	r3, r0
 80038ca:	72bb      	strb	r3, [r7, #10]

	if (res != THT_OK)
 80038cc:	7abb      	ldrb	r3, [r7, #10]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <RFM95_lowDataRateOptimize+0xd6>
	{
		return THT_ERROR;
 80038d2:	2302      	movs	r3, #2
 80038d4:	e014      	b.n	8003900 <RFM95_lowDataRateOptimize+0x100>
	}

	wByte = (uint8_t)(isEnableLDO | (rByte & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK));
 80038d6:	7a7b      	ldrb	r3, [r7, #9]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f023 0308 	bic.w	r3, r3, #8
 80038de:	b25a      	sxtb	r2, r3
 80038e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	72fb      	strb	r3, [r7, #11]
	wByte = (uint8_t)(RFLR_MODEMCONFIG3_AGCAUTO_ON | wByte); // turn on AGC
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	72fb      	strb	r3, [r7, #11]
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	461a      	mov	r2, r3
 80038f6:	2126      	movs	r1, #38	; 0x26
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff fd67 	bl	80033cc <RFM95_writeRegister>
 80038fe:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bdb0      	pop	{r4, r5, r7, pc}
 8003908:	00000000 	.word	0x00000000
 800390c:	40000000 	.word	0x40000000
 8003910:	0001e848 	.word	0x0001e848
 8003914:	0003d090 	.word	0x0003d090
 8003918:	0007a120 	.word	0x0007a120
 800391c:	408f4000 	.word	0x408f4000

08003920 <RFM95_setLNA>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8003930:	f107 030d 	add.w	r3, r7, #13
 8003934:	461a      	mov	r2, r3
 8003936:	210c      	movs	r1, #12
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fdcf 	bl	80034dc <RFM95_readRegister>
 800393e:	4603      	mov	r3, r0
 8003940:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <RFM95_setLNA+0x2c>
	{
		return THT_ERROR;
 8003948:	2302      	movs	r3, #2
 800394a:	e00c      	b.n	8003966 <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t)(RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 800394c:	7b7b      	ldrb	r3, [r7, #13]
 800394e:	b25b      	sxtb	r3, r3
 8003950:	f043 0303 	orr.w	r3, r3, #3
 8003954:	b25b      	sxtb	r3, r3
 8003956:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	461a      	mov	r2, r3
 800395c:	210c      	movs	r1, #12
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fd34 	bl	80033cc <RFM95_writeRegister>
 8003964:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_LNA, wByte);
	//	return RFM95_readRegister(me, REG_LR_LNA, &rByte);
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <RFM95_setMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mode [in] Mode is combine of LORA, SLEEP, STANDBY, SYNTHESIZERTX, TRANSMITTER, RECEIVER, SYNTHESIZERRX
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, const uint8_t mode)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <RFM95_setMode+0x16>
	{
		return THT_ERROR;
 8003980:	2302      	movs	r3, #2
 8003982:	e022      	b.n	80039ca <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 800398c:	f107 030d 	add.w	r3, r7, #13
 8003990:	461a      	mov	r2, r3
 8003992:	2101      	movs	r1, #1
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fda1 	bl	80034dc <RFM95_readRegister>
 800399a:	4603      	mov	r3, r0
 800399c:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800399e:	7bbb      	ldrb	r3, [r7, #14]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d001      	beq.n	80039a8 <RFM95_setMode+0x3a>
	{
		return THT_ERROR;
 80039a4:	2302      	movs	r3, #2
 80039a6:	e010      	b.n	80039ca <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t)(mode | (rByte & 0x70));
 80039a8:	7b7b      	ldrb	r3, [r7, #13]
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b0:	b25a      	sxtb	r2, r3
 80039b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	461a      	mov	r2, r3
 80039c0:	2101      	movs	r1, #1
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fd02 	bl	80033cc <RFM95_writeRegister>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <RFM95_setFrequency>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param frequency frequency value, ex: 923
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me, uint32_t frequency)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	2900      	cmp	r1, #0
 80039e0:	d101      	bne.n	80039e6 <RFM95_setFrequency+0x14>
	{
		return THT_ERROR;
 80039e2:	2302      	movs	r3, #2
 80039e4:	e02c      	b.n	8003a40 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	6008      	str	r0, [r1, #0]
	uint64_t frf = (uint64_t)(frequency << 19u) / 32;
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	04c9      	lsls	r1, r1, #19
 80039f0:	0949      	lsrs	r1, r1, #5
 80039f2:	2000      	movs	r0, #0
 80039f4:	460a      	mov	r2, r1
 80039f6:	4603      	mov	r3, r0
 80039f8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 80039fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	0c02      	lsrs	r2, r0, #16
 8003a0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a0e:	0c0b      	lsrs	r3, r1, #16
 8003a10:	b2d3      	uxtb	r3, r2
 8003a12:	733b      	strb	r3, [r7, #12]
 8003a14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	0a02      	lsrs	r2, r0, #8
 8003a22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a26:	0a0b      	lsrs	r3, r1, #8
 8003a28:	b2d3      	uxtb	r3, r2
 8003a2a:	737b      	strb	r3, [r7, #13]
					   (uint8_t)(frf >> 0)};
 8003a2c:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 8003a2e:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8003a30:	f107 020c 	add.w	r2, r7, #12
 8003a34:	2303      	movs	r3, #3
 8003a36:	2106      	movs	r1, #6
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fcfa 	bl	8003432 <RFM95_writeBurstRegister>
 8003a3e:	4603      	mov	r3, r0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <RFM95_transmit>:
 * @param size [in] The size of buffer
 * @param timeout [in] The timeout to terminate transmit
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData, uint8_t size, uint32_t timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <RFM95_transmit+0x1c>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <RFM95_transmit+0x20>
	{
		return THT_ERROR;
 8003a64:	2302      	movs	r3, #2
 8003a66:	e097      	b.n	8003b98 <RFM95_transmit+0x150>
	}

	uint8_t rByte = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	74bb      	strb	r3, [r7, #18]

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8003a74:	f107 0312 	add.w	r3, r7, #18
 8003a78:	461a      	mov	r2, r3
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff fd2d 	bl	80034dc <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8003a82:	7cbb      	ldrb	r3, [r7, #18]
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	f023 0307 	bic.w	r3, r3, #7
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8003a94:	7efb      	ldrb	r3, [r7, #27]
 8003a96:	461a      	mov	r2, r3
 8003a98:	2101      	movs	r1, #1
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff fc96 	bl	80033cc <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d103      	bne.n	8003ab0 <RFM95_transmit+0x68>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff fd4c 	bl	8003548 <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 8003ab0:	f107 0313 	add.w	r3, r7, #19
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	210e      	movs	r1, #14
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fd0f 	bl	80034dc <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	210d      	movs	r1, #13
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff fc81 	bl	80033cc <RFM95_writeRegister>

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	461a      	mov	r2, r3
 8003ace:	2122      	movs	r1, #34	; 0x22
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff fc7b 	bl	80033cc <RFM95_writeRegister>
	uint8_t temp = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 8003ada:	f107 0311 	add.w	r3, r7, #17
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2122      	movs	r1, #34	; 0x22
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fcfa 	bl	80034dc <RFM95_readRegister>

	(void)temp;

	for (size_t i = 0; i < size; i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	e00b      	b.n	8003b06 <RFM95_transmit+0xbe>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	60ba      	str	r2, [r7, #8]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	2100      	movs	r1, #0
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fc66 	bl	80033cc <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	3301      	adds	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3ef      	bcc.n	8003aee <RFM95_transmit+0xa6>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 8003b0e:	2383      	movs	r3, #131	; 0x83
 8003b10:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8003b12:	7efb      	ldrb	r3, [r7, #27]
 8003b14:	461a      	mov	r2, r3
 8003b16:	2101      	movs	r1, #1
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f7ff fc57 	bl	80033cc <RFM95_writeRegister>

	HAL_Delay(1000);
 8003b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b22:	f7fd fdfb 	bl	800171c <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8003b26:	f7fd fded 	bl	8001704 <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8003b2c:	e02b      	b.n	8003b86 <RFM95_transmit+0x13e>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003b2e:	f107 0313 	add.w	r3, r7, #19
 8003b32:	461a      	mov	r2, r3
 8003b34:	2112      	movs	r1, #18
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f7ff fcd0 	bl	80034dc <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01f      	beq.n	8003b86 <RFM95_transmit+0x13e>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_TXDONE | (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
 8003b46:	2308      	movs	r3, #8
 8003b48:	76fb      	strb	r3, [r7, #27]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003b4a:	7efb      	ldrb	r3, [r7, #27]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2112      	movs	r1, #18
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f7ff fc3b 	bl	80033cc <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003b56:	f107 0313 	add.w	r3, r7, #19
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2112      	movs	r1, #18
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff fcbc 	bl	80034dc <RFM95_readRegister>

			wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8003b64:	7cbb      	ldrb	r3, [r7, #18]
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	f023 0307 	bic.w	r3, r3, #7
 8003b6c:	b25b      	sxtb	r3, r3
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	76fb      	strb	r3, [r7, #27]
			return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8003b76:	7efb      	ldrb	r3, [r7, #27]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fc25 	bl	80033cc <RFM95_writeRegister>
 8003b82:	4603      	mov	r3, r0
 8003b84:	e008      	b.n	8003b98 <RFM95_transmit+0x150>
	while (HAL_GetTick() - tickStart <= timeout)
 8003b86:	f7fd fdbd 	bl	8001704 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d2cb      	bcs.n	8003b2e <RFM95_transmit+0xe6>
		}
	}

	return THT_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <RFM95_startReceiveIT>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_startReceiveIT(RFM95_HandleTypeDef *const me)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <RFM95_startReceiveIT+0x12>
	{
		return THT_ERROR;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e05a      	b.n	8003c68 <RFM95_startReceiveIT+0xc8>
	}
	/* Mapping DIO0 to rxDone */
	RFM95_mappingDIO0(me, RFLR_DIOMAPPING1_DIO0_00);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa57 	bl	8004068 <RFM95_mappingDIO0>

	uint8_t rByte = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73bb      	strb	r3, [r7, #14]
	uint8_t wByte = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8003bc2:	f107 030e 	add.w	r3, r7, #14
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2131      	movs	r1, #49	; 0x31
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff fc86 	bl	80034dc <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	795b      	ldrb	r3, [r3, #5]
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	d104      	bne.n	8003be2 <RFM95_startReceiveIT+0x42>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8003bd8:	7bbb      	ldrb	r3, [r7, #14]
 8003bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e003      	b.n	8003bea <RFM95_startReceiveIT+0x4a>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8003be2:	7bbb      	ldrb	r3, [r7, #14]
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003be8:	73fb      	strb	r3, [r7, #15]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	461a      	mov	r2, r3
 8003bee:	2131      	movs	r1, #49	; 0x31
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff fbeb 	bl	80033cc <RFM95_writeRegister>

	switch (me->parent.BW)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	795b      	ldrb	r3, [r3, #5]
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	dc2a      	bgt.n	8003c54 <RFM95_startReceiveIT+0xb4>
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	da1d      	bge.n	8003c3e <RFM95_startReceiveIT+0x9e>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <RFM95_startReceiveIT+0x72>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db24      	blt.n	8003c54 <RFM95_startReceiveIT+0xb4>
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d821      	bhi.n	8003c54 <RFM95_startReceiveIT+0xb4>
 8003c10:	e00a      	b.n	8003c28 <RFM95_startReceiveIT+0x88>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8003c12:	2248      	movs	r2, #72	; 0x48
 8003c14:	2127      	movs	r1, #39	; 0x27
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fbd8 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	213f      	movs	r1, #63	; 0x3f
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fbd3 	bl	80033cc <RFM95_writeRegister>
		break;
 8003c26:	e016      	b.n	8003c56 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8003c28:	2244      	movs	r2, #68	; 0x44
 8003c2a:	2127      	movs	r1, #39	; 0x27
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fbcd 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003c32:	2200      	movs	r2, #0
 8003c34:	213f      	movs	r1, #63	; 0x3f
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fbc8 	bl	80033cc <RFM95_writeRegister>
		break;
 8003c3c:	e00b      	b.n	8003c56 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	2127      	movs	r1, #39	; 0x27
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fbc2 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	213f      	movs	r1, #63	; 0x3f
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fbbd 	bl	80033cc <RFM95_writeRegister>
		break;
 8003c52:	e000      	b.n	8003c56 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_500:
	default:
		break;
 8003c54:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8003c56:	2385      	movs	r3, #133	; 0x85
 8003c58:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2101      	movs	r1, #1
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fbb3 	bl	80033cc <RFM95_writeRegister>
 8003c66:	4603      	mov	r3, r0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <RFM95_receiveIT>:
 * @param pBuffer [out] A pointer to buffer used to store data
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveIT(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <RFM95_receiveIT+0x1a>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <RFM95_receiveIT+0x1e>
	{
		return THT_ERROR;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e06b      	b.n	8003d66 <RFM95_receiveIT+0xf6>
	}
	uint8_t rByte = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	74bb      	strb	r3, [r7, #18]
	uint8_t wByte = 0;
 8003c92:	2300      	movs	r3, #0
 8003c94:	74fb      	strb	r3, [r7, #19]

	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8003c96:	2181      	movs	r1, #129	; 0x81
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7ff fe68 	bl	800396e <RFM95_setMode>

	RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003c9e:	f107 0312 	add.w	r3, r7, #18
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	2112      	movs	r1, #18
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fc18 	bl	80034dc <RFM95_readRegister>

	if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8003cac:	7cbb      	ldrb	r3, [r7, #18]
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da08      	bge.n	8003cc6 <RFM95_receiveIT+0x56>
	{
		/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	2112      	movs	r1, #18
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fb84 	bl	80033cc <RFM95_writeRegister>
 8003cc4:	e04e      	b.n	8003d64 <RFM95_receiveIT+0xf4>
	}
	else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8003cc6:	7cbb      	ldrb	r3, [r7, #18]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d049      	beq.n	8003d64 <RFM95_receiveIT+0xf4>
	{
		/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2112      	movs	r1, #18
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff fb76 	bl	80033cc <RFM95_writeRegister>

		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003ce0:	f107 0312 	add.w	r3, r7, #18
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2112      	movs	r1, #18
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff fbf7 	bl	80034dc <RFM95_readRegister>

		/* Payload CRC not error - read data */
		if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8003cee:	7cbb      	ldrb	r3, [r7, #18]
 8003cf0:	f003 0320 	and.w	r3, r3, #32
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d12d      	bne.n	8003d54 <RFM95_receiveIT+0xe4>
		{
			/* Read first byte position of last packet */
			RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8003cf8:	f107 0312 	add.w	r3, r7, #18
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2110      	movs	r1, #16
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f7ff fbeb 	bl	80034dc <RFM95_readRegister>

			/* */
			RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8003d06:	7cbb      	ldrb	r3, [r7, #18]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	210d      	movs	r1, #13
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff fb5d 	bl	80033cc <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8003d12:	f107 0312 	add.w	r3, r7, #18
 8003d16:	461a      	mov	r2, r3
 8003d18:	2113      	movs	r1, #19
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff fbde 	bl	80034dc <RFM95_readRegister>
			/* May be use read burst or fifo read */

			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e00a      	b.n	8003d3c <RFM95_receiveIT+0xcc>
			{
				RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	60ba      	str	r2, [r7, #8]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2100      	movs	r1, #0
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f7ff fbd3 	bl	80034dc <RFM95_readRegister>
			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	7cbb      	ldrb	r3, [r7, #18]
 8003d3e:	79fa      	ldrb	r2, [r7, #7]
 8003d40:	4293      	cmp	r3, r2
 8003d42:	bf28      	it	cs
 8003d44:	4613      	movcs	r3, r2
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d3ea      	bcc.n	8003d26 <RFM95_receiveIT+0xb6>
			}

			return THT_OK;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e008      	b.n	8003d66 <RFM95_receiveIT+0xf6>
		}
		else
		{
			/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8003d54:	2320      	movs	r3, #32
 8003d56:	74fb      	strb	r3, [r7, #19]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003d58:	7cfb      	ldrb	r3, [r7, #19]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2112      	movs	r1, #18
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff fb34 	bl	80033cc <RFM95_writeRegister>
		}
	}

	return THT_ERROR;
 8003d64:	2302      	movs	r3, #2
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <RFM95_receiveContinuous>:
 * @param size [in] The size of the bufffer
 * @param timeout [in] Timeout
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveContinuous(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size, uint32_t timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <RFM95_receiveContinuous+0x1c>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <RFM95_receiveContinuous+0x20>
	{
		return THT_ERROR;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e0e7      	b.n	8003f5e <RFM95_receiveContinuous+0x1f0>
	}

	uint8_t rByte = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	77fb      	strb	r3, [r7, #31]
	uint8_t currentMode = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	74bb      	strb	r3, [r7, #18]

	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8003d9a:	f107 0312 	add.w	r3, r7, #18
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2101      	movs	r1, #1
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff fb9a 	bl	80034dc <RFM95_readRegister>

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8003da8:	f107 0313 	add.w	r3, r7, #19
 8003dac:	461a      	mov	r2, r3
 8003dae:	2131      	movs	r1, #49	; 0x31
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff fb93 	bl	80034dc <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	795b      	ldrb	r3, [r3, #5]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d104      	bne.n	8003dc8 <RFM95_receiveContinuous+0x5a>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8003dbe:	7cfb      	ldrb	r3, [r7, #19]
 8003dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e003      	b.n	8003dd0 <RFM95_receiveContinuous+0x62>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dce:	77fb      	strb	r3, [r7, #31]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8003dd0:	7ffb      	ldrb	r3, [r7, #31]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2131      	movs	r1, #49	; 0x31
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff faf8 	bl	80033cc <RFM95_writeRegister>

	switch (me->parent.BW)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	795b      	ldrb	r3, [r3, #5]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	dc2a      	bgt.n	8003e3a <RFM95_receiveContinuous+0xcc>
 8003de4:	2b06      	cmp	r3, #6
 8003de6:	da1d      	bge.n	8003e24 <RFM95_receiveContinuous+0xb6>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <RFM95_receiveContinuous+0x8a>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db24      	blt.n	8003e3a <RFM95_receiveContinuous+0xcc>
 8003df0:	3b01      	subs	r3, #1
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d821      	bhi.n	8003e3a <RFM95_receiveContinuous+0xcc>
 8003df6:	e00a      	b.n	8003e0e <RFM95_receiveContinuous+0xa0>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8003df8:	2248      	movs	r2, #72	; 0x48
 8003dfa:	2127      	movs	r1, #39	; 0x27
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff fae5 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003e02:	2200      	movs	r2, #0
 8003e04:	213f      	movs	r1, #63	; 0x3f
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fae0 	bl	80033cc <RFM95_writeRegister>
		break;
 8003e0c:	e016      	b.n	8003e3c <RFM95_receiveContinuous+0xce>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8003e0e:	2244      	movs	r2, #68	; 0x44
 8003e10:	2127      	movs	r1, #39	; 0x27
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff fada 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	213f      	movs	r1, #63	; 0x3f
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff fad5 	bl	80033cc <RFM95_writeRegister>
		break;
 8003e22:	e00b      	b.n	8003e3c <RFM95_receiveContinuous+0xce>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8003e24:	2240      	movs	r2, #64	; 0x40
 8003e26:	2127      	movs	r1, #39	; 0x27
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff facf 	bl	80033cc <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	213f      	movs	r1, #63	; 0x3f
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff faca 	bl	80033cc <RFM95_writeRegister>
		break;
 8003e38:	e000      	b.n	8003e3c <RFM95_receiveContinuous+0xce>
	case LORA_BW_500:
	default:
		break;
 8003e3a:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8003e3c:	2385      	movs	r3, #133	; 0x85
 8003e3e:	77fb      	strb	r3, [r7, #31]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	461a      	mov	r2, r3
 8003e44:	2101      	movs	r1, #1
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fac0 	bl	80033cc <RFM95_writeRegister>

	uint32_t tickStart = HAL_GetTick();
 8003e4c:	f7fd fc5a 	bl	8001704 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8003e52:	e07a      	b.n	8003f4a <RFM95_receiveContinuous+0x1dc>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003e54:	f107 0313 	add.w	r3, r7, #19
 8003e58:	461a      	mov	r2, r3
 8003e5a:	2112      	movs	r1, #18
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff fb3d 	bl	80034dc <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	da0e      	bge.n	8003e88 <RFM95_receiveContinuous+0x11a>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8003e6a:	7cbb      	ldrb	r3, [r7, #18]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	2101      	movs	r1, #1
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff faab 	bl	80033cc <RFM95_writeRegister>
			/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003e7a:	7ffb      	ldrb	r3, [r7, #31]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	2112      	movs	r1, #18
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff faa3 	bl	80033cc <RFM95_writeRegister>
 8003e86:	e060      	b.n	8003f4a <RFM95_receiveContinuous+0x1dc>
		}
		else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8003e88:	7cfb      	ldrb	r3, [r7, #19]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d05b      	beq.n	8003f4a <RFM95_receiveContinuous+0x1dc>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8003e92:	7cbb      	ldrb	r3, [r7, #18]
 8003e94:	461a      	mov	r2, r3
 8003e96:	2101      	movs	r1, #1
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fa97 	bl	80033cc <RFM95_writeRegister>

			/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8003e9e:	2340      	movs	r3, #64	; 0x40
 8003ea0:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2112      	movs	r1, #18
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff fa8f 	bl	80033cc <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8003eae:	f107 0313 	add.w	r3, r7, #19
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2112      	movs	r1, #18
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fb10 	bl	80034dc <RFM95_readRegister>

			/* Payload CRC not error - read data */
			if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d133      	bne.n	8003f2e <RFM95_receiveContinuous+0x1c0>
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8003ec6:	7cbb      	ldrb	r3, [r7, #18]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2101      	movs	r1, #1
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fa7d 	bl	80033cc <RFM95_writeRegister>

				/* Read first byte position of last packet */
				RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8003ed2:	f107 0313 	add.w	r3, r7, #19
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	2110      	movs	r1, #16
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fafe 	bl	80034dc <RFM95_readRegister>

				/* */
				RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	210d      	movs	r1, #13
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff fa70 	bl	80033cc <RFM95_writeRegister>

				RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8003eec:	f107 0313 	add.w	r3, r7, #19
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2113      	movs	r1, #19
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff faf1 	bl	80034dc <RFM95_readRegister>
				/* May be use read burst or fifo read */

				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	e00a      	b.n	8003f16 <RFM95_receiveContinuous+0x1a8>
				{
					RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	60ba      	str	r2, [r7, #8]
 8003f06:	461a      	mov	r2, r3
 8003f08:	2100      	movs	r1, #0
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fae6 	bl	80034dc <RFM95_readRegister>
				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	3301      	adds	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	79fa      	ldrb	r2, [r7, #7]
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	bf28      	it	cs
 8003f1e:	4613      	movcs	r3, r2
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d3ea      	bcc.n	8003f00 <RFM95_receiveContinuous+0x192>
				}

				return THT_OK;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e017      	b.n	8003f5e <RFM95_receiveContinuous+0x1f0>
			}
			else
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8003f2e:	7cbb      	ldrb	r3, [r7, #18]
 8003f30:	461a      	mov	r2, r3
 8003f32:	2101      	movs	r1, #1
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f7ff fa49 	bl	80033cc <RFM95_writeRegister>
				/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
				wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	77fb      	strb	r3, [r7, #31]
				RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	461a      	mov	r2, r3
 8003f42:	2112      	movs	r1, #18
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fa41 	bl	80033cc <RFM95_writeRegister>
	while (HAL_GetTick() - tickStart <= timeout)
 8003f4a:	f7fd fbdb 	bl	8001704 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	f4bf af7c 	bcs.w	8003e54 <RFM95_receiveContinuous+0xe6>
			}
		}
	}

	return THT_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <RFM95_reset>:
 * @note When module is power on, call this function to reset the module
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01f      	beq.n	8003fb4 <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f7fd fec0 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003f84:	2001      	movs	r0, #1
 8003f86:	f7fd fbc9 	bl	800171c <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f92:	2201      	movs	r2, #1
 8003f94:	4619      	mov	r1, r3
 8003f96:	f7fd feb5 	bl	8001d04 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003f9a:	200a      	movs	r0, #10
 8003f9c:	f7fd fbbe 	bl	800171c <HAL_Delay>

	uint8_t rByte = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2142      	movs	r1, #66	; 0x42
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff fa95 	bl	80034dc <RFM95_readRegister>
 8003fb2:	e000      	b.n	8003fb6 <RFM95_reset+0x50>
		return;
 8003fb4:	bf00      	nop

	if (rByte != 0x12)
	{
		//		while(1);
	}
}
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <RFM95_setRFPowerAmplifier>:
 *  @arg RFLR_PACONFIG_PASELECT_RFO
 * @param Pout Power value
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me, uint8_t paSelect, uint8_t Pout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <RFM95_setRFPowerAmplifier+0x1a>
	{
		return THT_ERROR;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e044      	b.n	8004060 <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST &&
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d11e      	bne.n	8004022 <RFM95_setRFPowerAmplifier+0x66>
 8003fe4:	78bb      	ldrb	r3, [r7, #2]
 8003fe6:	2b0e      	cmp	r3, #14
 8003fe8:	d91b      	bls.n	8004022 <RFM95_setRFPowerAmplifier+0x66>
		((Pout >= 15) && (Pout <= 20)))
 8003fea:	78bb      	ldrb	r3, [r7, #2]
 8003fec:	2b14      	cmp	r3, #20
 8003fee:	d818      	bhi.n	8004022 <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8003ff0:	78bb      	ldrb	r3, [r7, #2]
 8003ff2:	2b11      	cmp	r3, #17
 8003ff4:	d906      	bls.n	8004004 <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	214d      	movs	r1, #77	; 0x4d
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff f9e6 	bl	80033cc <RFM95_writeRegister>
			Pout = 17;
 8004000:	2311      	movs	r3, #17
 8004002:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8004004:	78bb      	ldrb	r3, [r7, #2]
 8004006:	3b02      	subs	r3, #2
 8004008:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | outputPower);
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	7bbb      	ldrb	r3, [r7, #14]
 800400e:	4313      	orrs	r3, r2
 8004010:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	461a      	mov	r2, r3
 8004016:	2109      	movs	r1, #9
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff f9d7 	bl	80033cc <RFM95_writeRegister>
 800401e:	4603      	mov	r3, r0
 8004020:	e01e      	b.n	8004060 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO &&
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11a      	bne.n	800405e <RFM95_setRFPowerAmplifier+0xa2>
 8004028:	78bb      	ldrb	r3, [r7, #2]
 800402a:	2b0e      	cmp	r3, #14
 800402c:	d817      	bhi.n	800405e <RFM95_setRFPowerAmplifier+0xa2>
			 ((Pout >= 0) && (Pout <= 14)))
	{
		uint8_t maxPower = 7; // chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 800402e:	2307      	movs	r3, #7
 8004030:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 8004032:	78bb      	ldrb	r3, [r7, #2]
 8004034:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | (maxPower << 4) | outputPower);
 8004036:	7b7b      	ldrb	r3, [r7, #13]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	b25a      	sxtb	r2, r3
 800403c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004040:	4313      	orrs	r3, r2
 8004042:	b25a      	sxtb	r2, r3
 8004044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004048:	4313      	orrs	r3, r2
 800404a:	b25b      	sxtb	r3, r3
 800404c:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	461a      	mov	r2, r3
 8004052:	2109      	movs	r1, #9
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff f9b9 	bl	80033cc <RFM95_writeRegister>
 800405a:	4603      	mov	r3, r0
 800405c:	e000      	b.n	8004060 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return THT_OK;
 800405e:	2301      	movs	r3, #1
	}
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <RFM95_mappingDIO0>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mappingMode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_mappingDIO0(RFM95_HandleTypeDef *const me, uint8_t mappingMode)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <RFM95_mappingDIO0+0x16>
	{
		return THT_ERROR;
 800407a:	2302      	movs	r3, #2
 800407c:	e00c      	b.n	8004098 <RFM95_mappingDIO0+0x30>
	}
	uint8_t wByte = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]

	wByte = (uint8_t)(mappingMode | RFLR_DIOMAPPING1_DIO0_MASK);
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8004088:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_DIOMAPPING1, wByte);
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	461a      	mov	r2, r3
 800408e:	2140      	movs	r1, #64	; 0x40
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff f99b 	bl	80033cc <RFM95_writeRegister>
 8004096:	4603      	mov	r3, r0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <RFM95_init>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_init(RFM95_HandleTypeDef *const me)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <RFM95_init+0x12>
	{
		return THT_ERROR;
 80040ae:	2302      	movs	r3, #2
 80040b0:	e02a      	b.n	8004108 <RFM95_init+0x68>
	}

	RFM95_powerOn(me);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f82c 	bl	8004110 <RFM95_powerOn>
	HAL_Delay(100);
 80040b8:	2064      	movs	r0, #100	; 0x64
 80040ba:	f7fd fb2f 	bl	800171c <HAL_Delay>
	RFM95_reset(me);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff51 	bl	8003f66 <RFM95_reset>
	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP | RFLR_OPMODE_FREQMODE_ACCESS_HF);
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fc51 	bl	800396e <RFM95_setMode>
	RFM95_setFrequency(me, 923);
 80040cc:	f240 319b 	movw	r1, #923	; 0x39b
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fc7e 	bl	80039d2 <RFM95_setFrequency>
	RFM95_setBandwidth(me, RFLR_MODEMCONFIG1_BW_125_KHZ);
 80040d6:	2170      	movs	r1, #112	; 0x70
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff fb25 	bl	8003728 <RFM95_setBandwidth>
	RFM95_setCRCMode(me, RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON);
 80040de:	2104      	movs	r1, #4
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fb58 	bl	8003796 <RFM95_setCRCMode>
	RFM95_setLNA(me);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fc1a 	bl	8003920 <RFM95_setLNA>
	RFM95_setSpreadingFactor(me, RFLR_MODEMCONFIG2_SF_10);
 80040ec:	21a0      	movs	r1, #160	; 0xa0
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fa5e 	bl	80035b0 <RFM95_setSpreadingFactor>
	RFM95_setRFPowerAmplifier(me, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 80040f4:	2214      	movs	r2, #20
 80040f6:	2180      	movs	r1, #128	; 0x80
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff5f 	bl	8003fbc <RFM95_setRFPowerAmplifier>

	return RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 80040fe:	2181      	movs	r1, #129	; 0x81
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fc34 	bl	800396e <RFM95_setMode>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <RFM95_powerOn>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_powerOn(RFM95_HandleTypeDef *const me)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <RFM95_powerOn+0x12>
	{
		return THT_ERROR;
 800411e:	2302      	movs	r3, #2
 8004120:	e008      	b.n	8004134 <RFM95_powerOn+0x24>
	}

	HAL_GPIO_WritePin(me->powerEnPort, me->powerEnPin, GPIO_PIN_RESET);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412a:	2200      	movs	r2, #0
 800412c:	4619      	mov	r1, r3
 800412e:	f7fd fde9 	bl	8001d04 <HAL_GPIO_WritePin>

	return THT_OK;
 8004132:	2301      	movs	r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <std>:
 800413c:	2300      	movs	r3, #0
 800413e:	b510      	push	{r4, lr}
 8004140:	4604      	mov	r4, r0
 8004142:	e9c0 3300 	strd	r3, r3, [r0]
 8004146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800414a:	6083      	str	r3, [r0, #8]
 800414c:	8181      	strh	r1, [r0, #12]
 800414e:	6643      	str	r3, [r0, #100]	; 0x64
 8004150:	81c2      	strh	r2, [r0, #14]
 8004152:	6183      	str	r3, [r0, #24]
 8004154:	4619      	mov	r1, r3
 8004156:	2208      	movs	r2, #8
 8004158:	305c      	adds	r0, #92	; 0x5c
 800415a:	f000 f906 	bl	800436a <memset>
 800415e:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <std+0x58>)
 8004160:	6263      	str	r3, [r4, #36]	; 0x24
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <std+0x5c>)
 8004164:	62a3      	str	r3, [r4, #40]	; 0x28
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <std+0x60>)
 8004168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800416a:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <std+0x64>)
 800416c:	6323      	str	r3, [r4, #48]	; 0x30
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <std+0x68>)
 8004170:	6224      	str	r4, [r4, #32]
 8004172:	429c      	cmp	r4, r3
 8004174:	d006      	beq.n	8004184 <std+0x48>
 8004176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800417a:	4294      	cmp	r4, r2
 800417c:	d002      	beq.n	8004184 <std+0x48>
 800417e:	33d0      	adds	r3, #208	; 0xd0
 8004180:	429c      	cmp	r4, r3
 8004182:	d105      	bne.n	8004190 <std+0x54>
 8004184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800418c:	f000 b966 	b.w	800445c <__retarget_lock_init_recursive>
 8004190:	bd10      	pop	{r4, pc}
 8004192:	bf00      	nop
 8004194:	080042e5 	.word	0x080042e5
 8004198:	08004307 	.word	0x08004307
 800419c:	0800433f 	.word	0x0800433f
 80041a0:	08004363 	.word	0x08004363
 80041a4:	2000016c 	.word	0x2000016c

080041a8 <stdio_exit_handler>:
 80041a8:	4a02      	ldr	r2, [pc, #8]	; (80041b4 <stdio_exit_handler+0xc>)
 80041aa:	4903      	ldr	r1, [pc, #12]	; (80041b8 <stdio_exit_handler+0x10>)
 80041ac:	4803      	ldr	r0, [pc, #12]	; (80041bc <stdio_exit_handler+0x14>)
 80041ae:	f000 b869 	b.w	8004284 <_fwalk_sglue>
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	08004d09 	.word	0x08004d09
 80041bc:	20000018 	.word	0x20000018

080041c0 <cleanup_stdio>:
 80041c0:	6841      	ldr	r1, [r0, #4]
 80041c2:	4b0c      	ldr	r3, [pc, #48]	; (80041f4 <cleanup_stdio+0x34>)
 80041c4:	4299      	cmp	r1, r3
 80041c6:	b510      	push	{r4, lr}
 80041c8:	4604      	mov	r4, r0
 80041ca:	d001      	beq.n	80041d0 <cleanup_stdio+0x10>
 80041cc:	f000 fd9c 	bl	8004d08 <_fflush_r>
 80041d0:	68a1      	ldr	r1, [r4, #8]
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <cleanup_stdio+0x38>)
 80041d4:	4299      	cmp	r1, r3
 80041d6:	d002      	beq.n	80041de <cleanup_stdio+0x1e>
 80041d8:	4620      	mov	r0, r4
 80041da:	f000 fd95 	bl	8004d08 <_fflush_r>
 80041de:	68e1      	ldr	r1, [r4, #12]
 80041e0:	4b06      	ldr	r3, [pc, #24]	; (80041fc <cleanup_stdio+0x3c>)
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d004      	beq.n	80041f0 <cleanup_stdio+0x30>
 80041e6:	4620      	mov	r0, r4
 80041e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ec:	f000 bd8c 	b.w	8004d08 <_fflush_r>
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	2000016c 	.word	0x2000016c
 80041f8:	200001d4 	.word	0x200001d4
 80041fc:	2000023c 	.word	0x2000023c

08004200 <global_stdio_init.part.0>:
 8004200:	b510      	push	{r4, lr}
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <global_stdio_init.part.0+0x30>)
 8004204:	4c0b      	ldr	r4, [pc, #44]	; (8004234 <global_stdio_init.part.0+0x34>)
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <global_stdio_init.part.0+0x38>)
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	4620      	mov	r0, r4
 800420c:	2200      	movs	r2, #0
 800420e:	2104      	movs	r1, #4
 8004210:	f7ff ff94 	bl	800413c <std>
 8004214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004218:	2201      	movs	r2, #1
 800421a:	2109      	movs	r1, #9
 800421c:	f7ff ff8e 	bl	800413c <std>
 8004220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004224:	2202      	movs	r2, #2
 8004226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422a:	2112      	movs	r1, #18
 800422c:	f7ff bf86 	b.w	800413c <std>
 8004230:	200002a4 	.word	0x200002a4
 8004234:	2000016c 	.word	0x2000016c
 8004238:	080041a9 	.word	0x080041a9

0800423c <__sfp_lock_acquire>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__sfp_lock_acquire+0x8>)
 800423e:	f000 b90e 	b.w	800445e <__retarget_lock_acquire_recursive>
 8004242:	bf00      	nop
 8004244:	200002ad 	.word	0x200002ad

08004248 <__sfp_lock_release>:
 8004248:	4801      	ldr	r0, [pc, #4]	; (8004250 <__sfp_lock_release+0x8>)
 800424a:	f000 b909 	b.w	8004460 <__retarget_lock_release_recursive>
 800424e:	bf00      	nop
 8004250:	200002ad 	.word	0x200002ad

08004254 <__sinit>:
 8004254:	b510      	push	{r4, lr}
 8004256:	4604      	mov	r4, r0
 8004258:	f7ff fff0 	bl	800423c <__sfp_lock_acquire>
 800425c:	6a23      	ldr	r3, [r4, #32]
 800425e:	b11b      	cbz	r3, 8004268 <__sinit+0x14>
 8004260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004264:	f7ff bff0 	b.w	8004248 <__sfp_lock_release>
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <__sinit+0x28>)
 800426a:	6223      	str	r3, [r4, #32]
 800426c:	4b04      	ldr	r3, [pc, #16]	; (8004280 <__sinit+0x2c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f5      	bne.n	8004260 <__sinit+0xc>
 8004274:	f7ff ffc4 	bl	8004200 <global_stdio_init.part.0>
 8004278:	e7f2      	b.n	8004260 <__sinit+0xc>
 800427a:	bf00      	nop
 800427c:	080041c1 	.word	0x080041c1
 8004280:	200002a4 	.word	0x200002a4

08004284 <_fwalk_sglue>:
 8004284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004288:	4607      	mov	r7, r0
 800428a:	4688      	mov	r8, r1
 800428c:	4614      	mov	r4, r2
 800428e:	2600      	movs	r6, #0
 8004290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004294:	f1b9 0901 	subs.w	r9, r9, #1
 8004298:	d505      	bpl.n	80042a6 <_fwalk_sglue+0x22>
 800429a:	6824      	ldr	r4, [r4, #0]
 800429c:	2c00      	cmp	r4, #0
 800429e:	d1f7      	bne.n	8004290 <_fwalk_sglue+0xc>
 80042a0:	4630      	mov	r0, r6
 80042a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a6:	89ab      	ldrh	r3, [r5, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d907      	bls.n	80042bc <_fwalk_sglue+0x38>
 80042ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042b0:	3301      	adds	r3, #1
 80042b2:	d003      	beq.n	80042bc <_fwalk_sglue+0x38>
 80042b4:	4629      	mov	r1, r5
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	4306      	orrs	r6, r0
 80042bc:	3568      	adds	r5, #104	; 0x68
 80042be:	e7e9      	b.n	8004294 <_fwalk_sglue+0x10>

080042c0 <iprintf>:
 80042c0:	b40f      	push	{r0, r1, r2, r3}
 80042c2:	b507      	push	{r0, r1, r2, lr}
 80042c4:	4906      	ldr	r1, [pc, #24]	; (80042e0 <iprintf+0x20>)
 80042c6:	ab04      	add	r3, sp, #16
 80042c8:	6808      	ldr	r0, [r1, #0]
 80042ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80042ce:	6881      	ldr	r1, [r0, #8]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	f000 f9e9 	bl	80046a8 <_vfiprintf_r>
 80042d6:	b003      	add	sp, #12
 80042d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80042dc:	b004      	add	sp, #16
 80042de:	4770      	bx	lr
 80042e0:	20000064 	.word	0x20000064

080042e4 <__sread>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	460c      	mov	r4, r1
 80042e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ec:	f000 f868 	bl	80043c0 <_read_r>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	bfab      	itete	ge
 80042f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80042f6:	89a3      	ldrhlt	r3, [r4, #12]
 80042f8:	181b      	addge	r3, r3, r0
 80042fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80042fe:	bfac      	ite	ge
 8004300:	6563      	strge	r3, [r4, #84]	; 0x54
 8004302:	81a3      	strhlt	r3, [r4, #12]
 8004304:	bd10      	pop	{r4, pc}

08004306 <__swrite>:
 8004306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430a:	461f      	mov	r7, r3
 800430c:	898b      	ldrh	r3, [r1, #12]
 800430e:	05db      	lsls	r3, r3, #23
 8004310:	4605      	mov	r5, r0
 8004312:	460c      	mov	r4, r1
 8004314:	4616      	mov	r6, r2
 8004316:	d505      	bpl.n	8004324 <__swrite+0x1e>
 8004318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431c:	2302      	movs	r3, #2
 800431e:	2200      	movs	r2, #0
 8004320:	f000 f83c 	bl	800439c <_lseek_r>
 8004324:	89a3      	ldrh	r3, [r4, #12]
 8004326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800432a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800432e:	81a3      	strh	r3, [r4, #12]
 8004330:	4632      	mov	r2, r6
 8004332:	463b      	mov	r3, r7
 8004334:	4628      	mov	r0, r5
 8004336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433a:	f000 b853 	b.w	80043e4 <_write_r>

0800433e <__sseek>:
 800433e:	b510      	push	{r4, lr}
 8004340:	460c      	mov	r4, r1
 8004342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004346:	f000 f829 	bl	800439c <_lseek_r>
 800434a:	1c43      	adds	r3, r0, #1
 800434c:	89a3      	ldrh	r3, [r4, #12]
 800434e:	bf15      	itete	ne
 8004350:	6560      	strne	r0, [r4, #84]	; 0x54
 8004352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800435a:	81a3      	strheq	r3, [r4, #12]
 800435c:	bf18      	it	ne
 800435e:	81a3      	strhne	r3, [r4, #12]
 8004360:	bd10      	pop	{r4, pc}

08004362 <__sclose>:
 8004362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004366:	f000 b809 	b.w	800437c <_close_r>

0800436a <memset>:
 800436a:	4402      	add	r2, r0
 800436c:	4603      	mov	r3, r0
 800436e:	4293      	cmp	r3, r2
 8004370:	d100      	bne.n	8004374 <memset+0xa>
 8004372:	4770      	bx	lr
 8004374:	f803 1b01 	strb.w	r1, [r3], #1
 8004378:	e7f9      	b.n	800436e <memset+0x4>
	...

0800437c <_close_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4d06      	ldr	r5, [pc, #24]	; (8004398 <_close_r+0x1c>)
 8004380:	2300      	movs	r3, #0
 8004382:	4604      	mov	r4, r0
 8004384:	4608      	mov	r0, r1
 8004386:	602b      	str	r3, [r5, #0]
 8004388:	f7fd f8af 	bl	80014ea <_close>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_close_r+0x1a>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_close_r+0x1a>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	200002a8 	.word	0x200002a8

0800439c <_lseek_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4d07      	ldr	r5, [pc, #28]	; (80043bc <_lseek_r+0x20>)
 80043a0:	4604      	mov	r4, r0
 80043a2:	4608      	mov	r0, r1
 80043a4:	4611      	mov	r1, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	602a      	str	r2, [r5, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f7fd f8c4 	bl	8001538 <_lseek>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_lseek_r+0x1e>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_lseek_r+0x1e>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	200002a8 	.word	0x200002a8

080043c0 <_read_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d07      	ldr	r5, [pc, #28]	; (80043e0 <_read_r+0x20>)
 80043c4:	4604      	mov	r4, r0
 80043c6:	4608      	mov	r0, r1
 80043c8:	4611      	mov	r1, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	602a      	str	r2, [r5, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f7fd f852 	bl	8001478 <_read>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_read_r+0x1e>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_read_r+0x1e>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	200002a8 	.word	0x200002a8

080043e4 <_write_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4d07      	ldr	r5, [pc, #28]	; (8004404 <_write_r+0x20>)
 80043e8:	4604      	mov	r4, r0
 80043ea:	4608      	mov	r0, r1
 80043ec:	4611      	mov	r1, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	602a      	str	r2, [r5, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fd f85d 	bl	80014b2 <_write>
 80043f8:	1c43      	adds	r3, r0, #1
 80043fa:	d102      	bne.n	8004402 <_write_r+0x1e>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b103      	cbz	r3, 8004402 <_write_r+0x1e>
 8004400:	6023      	str	r3, [r4, #0]
 8004402:	bd38      	pop	{r3, r4, r5, pc}
 8004404:	200002a8 	.word	0x200002a8

08004408 <__errno>:
 8004408:	4b01      	ldr	r3, [pc, #4]	; (8004410 <__errno+0x8>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000064 	.word	0x20000064

08004414 <__libc_init_array>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	4d0d      	ldr	r5, [pc, #52]	; (800444c <__libc_init_array+0x38>)
 8004418:	4c0d      	ldr	r4, [pc, #52]	; (8004450 <__libc_init_array+0x3c>)
 800441a:	1b64      	subs	r4, r4, r5
 800441c:	10a4      	asrs	r4, r4, #2
 800441e:	2600      	movs	r6, #0
 8004420:	42a6      	cmp	r6, r4
 8004422:	d109      	bne.n	8004438 <__libc_init_array+0x24>
 8004424:	4d0b      	ldr	r5, [pc, #44]	; (8004454 <__libc_init_array+0x40>)
 8004426:	4c0c      	ldr	r4, [pc, #48]	; (8004458 <__libc_init_array+0x44>)
 8004428:	f001 fcfa 	bl	8005e20 <_init>
 800442c:	1b64      	subs	r4, r4, r5
 800442e:	10a4      	asrs	r4, r4, #2
 8004430:	2600      	movs	r6, #0
 8004432:	42a6      	cmp	r6, r4
 8004434:	d105      	bne.n	8004442 <__libc_init_array+0x2e>
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	f855 3b04 	ldr.w	r3, [r5], #4
 800443c:	4798      	blx	r3
 800443e:	3601      	adds	r6, #1
 8004440:	e7ee      	b.n	8004420 <__libc_init_array+0xc>
 8004442:	f855 3b04 	ldr.w	r3, [r5], #4
 8004446:	4798      	blx	r3
 8004448:	3601      	adds	r6, #1
 800444a:	e7f2      	b.n	8004432 <__libc_init_array+0x1e>
 800444c:	08005ec8 	.word	0x08005ec8
 8004450:	08005ec8 	.word	0x08005ec8
 8004454:	08005ec8 	.word	0x08005ec8
 8004458:	08005ecc 	.word	0x08005ecc

0800445c <__retarget_lock_init_recursive>:
 800445c:	4770      	bx	lr

0800445e <__retarget_lock_acquire_recursive>:
 800445e:	4770      	bx	lr

08004460 <__retarget_lock_release_recursive>:
 8004460:	4770      	bx	lr
	...

08004464 <_free_r>:
 8004464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004466:	2900      	cmp	r1, #0
 8004468:	d044      	beq.n	80044f4 <_free_r+0x90>
 800446a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446e:	9001      	str	r0, [sp, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f1a1 0404 	sub.w	r4, r1, #4
 8004476:	bfb8      	it	lt
 8004478:	18e4      	addlt	r4, r4, r3
 800447a:	f000 f8df 	bl	800463c <__malloc_lock>
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <_free_r+0x94>)
 8004480:	9801      	ldr	r0, [sp, #4]
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	b933      	cbnz	r3, 8004494 <_free_r+0x30>
 8004486:	6063      	str	r3, [r4, #4]
 8004488:	6014      	str	r4, [r2, #0]
 800448a:	b003      	add	sp, #12
 800448c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004490:	f000 b8da 	b.w	8004648 <__malloc_unlock>
 8004494:	42a3      	cmp	r3, r4
 8004496:	d908      	bls.n	80044aa <_free_r+0x46>
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	1961      	adds	r1, r4, r5
 800449c:	428b      	cmp	r3, r1
 800449e:	bf01      	itttt	eq
 80044a0:	6819      	ldreq	r1, [r3, #0]
 80044a2:	685b      	ldreq	r3, [r3, #4]
 80044a4:	1949      	addeq	r1, r1, r5
 80044a6:	6021      	streq	r1, [r4, #0]
 80044a8:	e7ed      	b.n	8004486 <_free_r+0x22>
 80044aa:	461a      	mov	r2, r3
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b10b      	cbz	r3, 80044b4 <_free_r+0x50>
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d9fa      	bls.n	80044aa <_free_r+0x46>
 80044b4:	6811      	ldr	r1, [r2, #0]
 80044b6:	1855      	adds	r5, r2, r1
 80044b8:	42a5      	cmp	r5, r4
 80044ba:	d10b      	bne.n	80044d4 <_free_r+0x70>
 80044bc:	6824      	ldr	r4, [r4, #0]
 80044be:	4421      	add	r1, r4
 80044c0:	1854      	adds	r4, r2, r1
 80044c2:	42a3      	cmp	r3, r4
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	d1e0      	bne.n	800448a <_free_r+0x26>
 80044c8:	681c      	ldr	r4, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	6053      	str	r3, [r2, #4]
 80044ce:	440c      	add	r4, r1
 80044d0:	6014      	str	r4, [r2, #0]
 80044d2:	e7da      	b.n	800448a <_free_r+0x26>
 80044d4:	d902      	bls.n	80044dc <_free_r+0x78>
 80044d6:	230c      	movs	r3, #12
 80044d8:	6003      	str	r3, [r0, #0]
 80044da:	e7d6      	b.n	800448a <_free_r+0x26>
 80044dc:	6825      	ldr	r5, [r4, #0]
 80044de:	1961      	adds	r1, r4, r5
 80044e0:	428b      	cmp	r3, r1
 80044e2:	bf04      	itt	eq
 80044e4:	6819      	ldreq	r1, [r3, #0]
 80044e6:	685b      	ldreq	r3, [r3, #4]
 80044e8:	6063      	str	r3, [r4, #4]
 80044ea:	bf04      	itt	eq
 80044ec:	1949      	addeq	r1, r1, r5
 80044ee:	6021      	streq	r1, [r4, #0]
 80044f0:	6054      	str	r4, [r2, #4]
 80044f2:	e7ca      	b.n	800448a <_free_r+0x26>
 80044f4:	b003      	add	sp, #12
 80044f6:	bd30      	pop	{r4, r5, pc}
 80044f8:	200002b0 	.word	0x200002b0

080044fc <sbrk_aligned>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4e0e      	ldr	r6, [pc, #56]	; (8004538 <sbrk_aligned+0x3c>)
 8004500:	460c      	mov	r4, r1
 8004502:	6831      	ldr	r1, [r6, #0]
 8004504:	4605      	mov	r5, r0
 8004506:	b911      	cbnz	r1, 800450e <sbrk_aligned+0x12>
 8004508:	f000 fcbc 	bl	8004e84 <_sbrk_r>
 800450c:	6030      	str	r0, [r6, #0]
 800450e:	4621      	mov	r1, r4
 8004510:	4628      	mov	r0, r5
 8004512:	f000 fcb7 	bl	8004e84 <_sbrk_r>
 8004516:	1c43      	adds	r3, r0, #1
 8004518:	d00a      	beq.n	8004530 <sbrk_aligned+0x34>
 800451a:	1cc4      	adds	r4, r0, #3
 800451c:	f024 0403 	bic.w	r4, r4, #3
 8004520:	42a0      	cmp	r0, r4
 8004522:	d007      	beq.n	8004534 <sbrk_aligned+0x38>
 8004524:	1a21      	subs	r1, r4, r0
 8004526:	4628      	mov	r0, r5
 8004528:	f000 fcac 	bl	8004e84 <_sbrk_r>
 800452c:	3001      	adds	r0, #1
 800452e:	d101      	bne.n	8004534 <sbrk_aligned+0x38>
 8004530:	f04f 34ff 	mov.w	r4, #4294967295
 8004534:	4620      	mov	r0, r4
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	200002b4 	.word	0x200002b4

0800453c <_malloc_r>:
 800453c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004540:	1ccd      	adds	r5, r1, #3
 8004542:	f025 0503 	bic.w	r5, r5, #3
 8004546:	3508      	adds	r5, #8
 8004548:	2d0c      	cmp	r5, #12
 800454a:	bf38      	it	cc
 800454c:	250c      	movcc	r5, #12
 800454e:	2d00      	cmp	r5, #0
 8004550:	4607      	mov	r7, r0
 8004552:	db01      	blt.n	8004558 <_malloc_r+0x1c>
 8004554:	42a9      	cmp	r1, r5
 8004556:	d905      	bls.n	8004564 <_malloc_r+0x28>
 8004558:	230c      	movs	r3, #12
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	2600      	movs	r6, #0
 800455e:	4630      	mov	r0, r6
 8004560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004638 <_malloc_r+0xfc>
 8004568:	f000 f868 	bl	800463c <__malloc_lock>
 800456c:	f8d8 3000 	ldr.w	r3, [r8]
 8004570:	461c      	mov	r4, r3
 8004572:	bb5c      	cbnz	r4, 80045cc <_malloc_r+0x90>
 8004574:	4629      	mov	r1, r5
 8004576:	4638      	mov	r0, r7
 8004578:	f7ff ffc0 	bl	80044fc <sbrk_aligned>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	4604      	mov	r4, r0
 8004580:	d155      	bne.n	800462e <_malloc_r+0xf2>
 8004582:	f8d8 4000 	ldr.w	r4, [r8]
 8004586:	4626      	mov	r6, r4
 8004588:	2e00      	cmp	r6, #0
 800458a:	d145      	bne.n	8004618 <_malloc_r+0xdc>
 800458c:	2c00      	cmp	r4, #0
 800458e:	d048      	beq.n	8004622 <_malloc_r+0xe6>
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	4631      	mov	r1, r6
 8004594:	4638      	mov	r0, r7
 8004596:	eb04 0903 	add.w	r9, r4, r3
 800459a:	f000 fc73 	bl	8004e84 <_sbrk_r>
 800459e:	4581      	cmp	r9, r0
 80045a0:	d13f      	bne.n	8004622 <_malloc_r+0xe6>
 80045a2:	6821      	ldr	r1, [r4, #0]
 80045a4:	1a6d      	subs	r5, r5, r1
 80045a6:	4629      	mov	r1, r5
 80045a8:	4638      	mov	r0, r7
 80045aa:	f7ff ffa7 	bl	80044fc <sbrk_aligned>
 80045ae:	3001      	adds	r0, #1
 80045b0:	d037      	beq.n	8004622 <_malloc_r+0xe6>
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	442b      	add	r3, r5
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	f8d8 3000 	ldr.w	r3, [r8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d038      	beq.n	8004632 <_malloc_r+0xf6>
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	42a2      	cmp	r2, r4
 80045c4:	d12b      	bne.n	800461e <_malloc_r+0xe2>
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	e00f      	b.n	80045ec <_malloc_r+0xb0>
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	1b52      	subs	r2, r2, r5
 80045d0:	d41f      	bmi.n	8004612 <_malloc_r+0xd6>
 80045d2:	2a0b      	cmp	r2, #11
 80045d4:	d917      	bls.n	8004606 <_malloc_r+0xca>
 80045d6:	1961      	adds	r1, r4, r5
 80045d8:	42a3      	cmp	r3, r4
 80045da:	6025      	str	r5, [r4, #0]
 80045dc:	bf18      	it	ne
 80045de:	6059      	strne	r1, [r3, #4]
 80045e0:	6863      	ldr	r3, [r4, #4]
 80045e2:	bf08      	it	eq
 80045e4:	f8c8 1000 	streq.w	r1, [r8]
 80045e8:	5162      	str	r2, [r4, r5]
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	4638      	mov	r0, r7
 80045ee:	f104 060b 	add.w	r6, r4, #11
 80045f2:	f000 f829 	bl	8004648 <__malloc_unlock>
 80045f6:	f026 0607 	bic.w	r6, r6, #7
 80045fa:	1d23      	adds	r3, r4, #4
 80045fc:	1af2      	subs	r2, r6, r3
 80045fe:	d0ae      	beq.n	800455e <_malloc_r+0x22>
 8004600:	1b9b      	subs	r3, r3, r6
 8004602:	50a3      	str	r3, [r4, r2]
 8004604:	e7ab      	b.n	800455e <_malloc_r+0x22>
 8004606:	42a3      	cmp	r3, r4
 8004608:	6862      	ldr	r2, [r4, #4]
 800460a:	d1dd      	bne.n	80045c8 <_malloc_r+0x8c>
 800460c:	f8c8 2000 	str.w	r2, [r8]
 8004610:	e7ec      	b.n	80045ec <_malloc_r+0xb0>
 8004612:	4623      	mov	r3, r4
 8004614:	6864      	ldr	r4, [r4, #4]
 8004616:	e7ac      	b.n	8004572 <_malloc_r+0x36>
 8004618:	4634      	mov	r4, r6
 800461a:	6876      	ldr	r6, [r6, #4]
 800461c:	e7b4      	b.n	8004588 <_malloc_r+0x4c>
 800461e:	4613      	mov	r3, r2
 8004620:	e7cc      	b.n	80045bc <_malloc_r+0x80>
 8004622:	230c      	movs	r3, #12
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4638      	mov	r0, r7
 8004628:	f000 f80e 	bl	8004648 <__malloc_unlock>
 800462c:	e797      	b.n	800455e <_malloc_r+0x22>
 800462e:	6025      	str	r5, [r4, #0]
 8004630:	e7dc      	b.n	80045ec <_malloc_r+0xb0>
 8004632:	605b      	str	r3, [r3, #4]
 8004634:	deff      	udf	#255	; 0xff
 8004636:	bf00      	nop
 8004638:	200002b0 	.word	0x200002b0

0800463c <__malloc_lock>:
 800463c:	4801      	ldr	r0, [pc, #4]	; (8004644 <__malloc_lock+0x8>)
 800463e:	f7ff bf0e 	b.w	800445e <__retarget_lock_acquire_recursive>
 8004642:	bf00      	nop
 8004644:	200002ac 	.word	0x200002ac

08004648 <__malloc_unlock>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__malloc_unlock+0x8>)
 800464a:	f7ff bf09 	b.w	8004460 <__retarget_lock_release_recursive>
 800464e:	bf00      	nop
 8004650:	200002ac 	.word	0x200002ac

08004654 <__sfputc_r>:
 8004654:	6893      	ldr	r3, [r2, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	b410      	push	{r4}
 800465c:	6093      	str	r3, [r2, #8]
 800465e:	da08      	bge.n	8004672 <__sfputc_r+0x1e>
 8004660:	6994      	ldr	r4, [r2, #24]
 8004662:	42a3      	cmp	r3, r4
 8004664:	db01      	blt.n	800466a <__sfputc_r+0x16>
 8004666:	290a      	cmp	r1, #10
 8004668:	d103      	bne.n	8004672 <__sfputc_r+0x1e>
 800466a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466e:	f000 bb73 	b.w	8004d58 <__swbuf_r>
 8004672:	6813      	ldr	r3, [r2, #0]
 8004674:	1c58      	adds	r0, r3, #1
 8004676:	6010      	str	r0, [r2, #0]
 8004678:	7019      	strb	r1, [r3, #0]
 800467a:	4608      	mov	r0, r1
 800467c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004680:	4770      	bx	lr

08004682 <__sfputs_r>:
 8004682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004684:	4606      	mov	r6, r0
 8004686:	460f      	mov	r7, r1
 8004688:	4614      	mov	r4, r2
 800468a:	18d5      	adds	r5, r2, r3
 800468c:	42ac      	cmp	r4, r5
 800468e:	d101      	bne.n	8004694 <__sfputs_r+0x12>
 8004690:	2000      	movs	r0, #0
 8004692:	e007      	b.n	80046a4 <__sfputs_r+0x22>
 8004694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004698:	463a      	mov	r2, r7
 800469a:	4630      	mov	r0, r6
 800469c:	f7ff ffda 	bl	8004654 <__sfputc_r>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d1f3      	bne.n	800468c <__sfputs_r+0xa>
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a8 <_vfiprintf_r>:
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	460d      	mov	r5, r1
 80046ae:	b09d      	sub	sp, #116	; 0x74
 80046b0:	4614      	mov	r4, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	4606      	mov	r6, r0
 80046b6:	b118      	cbz	r0, 80046c0 <_vfiprintf_r+0x18>
 80046b8:	6a03      	ldr	r3, [r0, #32]
 80046ba:	b90b      	cbnz	r3, 80046c0 <_vfiprintf_r+0x18>
 80046bc:	f7ff fdca 	bl	8004254 <__sinit>
 80046c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046c2:	07d9      	lsls	r1, r3, #31
 80046c4:	d405      	bmi.n	80046d2 <_vfiprintf_r+0x2a>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	059a      	lsls	r2, r3, #22
 80046ca:	d402      	bmi.n	80046d2 <_vfiprintf_r+0x2a>
 80046cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ce:	f7ff fec6 	bl	800445e <__retarget_lock_acquire_recursive>
 80046d2:	89ab      	ldrh	r3, [r5, #12]
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	d501      	bpl.n	80046dc <_vfiprintf_r+0x34>
 80046d8:	692b      	ldr	r3, [r5, #16]
 80046da:	b99b      	cbnz	r3, 8004704 <_vfiprintf_r+0x5c>
 80046dc:	4629      	mov	r1, r5
 80046de:	4630      	mov	r0, r6
 80046e0:	f000 fb78 	bl	8004dd4 <__swsetup_r>
 80046e4:	b170      	cbz	r0, 8004704 <_vfiprintf_r+0x5c>
 80046e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e8:	07dc      	lsls	r4, r3, #31
 80046ea:	d504      	bpl.n	80046f6 <_vfiprintf_r+0x4e>
 80046ec:	f04f 30ff 	mov.w	r0, #4294967295
 80046f0:	b01d      	add	sp, #116	; 0x74
 80046f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	0598      	lsls	r0, r3, #22
 80046fa:	d4f7      	bmi.n	80046ec <_vfiprintf_r+0x44>
 80046fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046fe:	f7ff feaf 	bl	8004460 <__retarget_lock_release_recursive>
 8004702:	e7f3      	b.n	80046ec <_vfiprintf_r+0x44>
 8004704:	2300      	movs	r3, #0
 8004706:	9309      	str	r3, [sp, #36]	; 0x24
 8004708:	2320      	movs	r3, #32
 800470a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800470e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004712:	2330      	movs	r3, #48	; 0x30
 8004714:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80048c8 <_vfiprintf_r+0x220>
 8004718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471c:	f04f 0901 	mov.w	r9, #1
 8004720:	4623      	mov	r3, r4
 8004722:	469a      	mov	sl, r3
 8004724:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004728:	b10a      	cbz	r2, 800472e <_vfiprintf_r+0x86>
 800472a:	2a25      	cmp	r2, #37	; 0x25
 800472c:	d1f9      	bne.n	8004722 <_vfiprintf_r+0x7a>
 800472e:	ebba 0b04 	subs.w	fp, sl, r4
 8004732:	d00b      	beq.n	800474c <_vfiprintf_r+0xa4>
 8004734:	465b      	mov	r3, fp
 8004736:	4622      	mov	r2, r4
 8004738:	4629      	mov	r1, r5
 800473a:	4630      	mov	r0, r6
 800473c:	f7ff ffa1 	bl	8004682 <__sfputs_r>
 8004740:	3001      	adds	r0, #1
 8004742:	f000 80a9 	beq.w	8004898 <_vfiprintf_r+0x1f0>
 8004746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004748:	445a      	add	r2, fp
 800474a:	9209      	str	r2, [sp, #36]	; 0x24
 800474c:	f89a 3000 	ldrb.w	r3, [sl]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a1 	beq.w	8004898 <_vfiprintf_r+0x1f0>
 8004756:	2300      	movs	r3, #0
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004760:	f10a 0a01 	add.w	sl, sl, #1
 8004764:	9304      	str	r3, [sp, #16]
 8004766:	9307      	str	r3, [sp, #28]
 8004768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800476c:	931a      	str	r3, [sp, #104]	; 0x68
 800476e:	4654      	mov	r4, sl
 8004770:	2205      	movs	r2, #5
 8004772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004776:	4854      	ldr	r0, [pc, #336]	; (80048c8 <_vfiprintf_r+0x220>)
 8004778:	f7fb fd32 	bl	80001e0 <memchr>
 800477c:	9a04      	ldr	r2, [sp, #16]
 800477e:	b9d8      	cbnz	r0, 80047b8 <_vfiprintf_r+0x110>
 8004780:	06d1      	lsls	r1, r2, #27
 8004782:	bf44      	itt	mi
 8004784:	2320      	movmi	r3, #32
 8004786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800478a:	0713      	lsls	r3, r2, #28
 800478c:	bf44      	itt	mi
 800478e:	232b      	movmi	r3, #43	; 0x2b
 8004790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004794:	f89a 3000 	ldrb.w	r3, [sl]
 8004798:	2b2a      	cmp	r3, #42	; 0x2a
 800479a:	d015      	beq.n	80047c8 <_vfiprintf_r+0x120>
 800479c:	9a07      	ldr	r2, [sp, #28]
 800479e:	4654      	mov	r4, sl
 80047a0:	2000      	movs	r0, #0
 80047a2:	f04f 0c0a 	mov.w	ip, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047ac:	3b30      	subs	r3, #48	; 0x30
 80047ae:	2b09      	cmp	r3, #9
 80047b0:	d94d      	bls.n	800484e <_vfiprintf_r+0x1a6>
 80047b2:	b1b0      	cbz	r0, 80047e2 <_vfiprintf_r+0x13a>
 80047b4:	9207      	str	r2, [sp, #28]
 80047b6:	e014      	b.n	80047e2 <_vfiprintf_r+0x13a>
 80047b8:	eba0 0308 	sub.w	r3, r0, r8
 80047bc:	fa09 f303 	lsl.w	r3, r9, r3
 80047c0:	4313      	orrs	r3, r2
 80047c2:	9304      	str	r3, [sp, #16]
 80047c4:	46a2      	mov	sl, r4
 80047c6:	e7d2      	b.n	800476e <_vfiprintf_r+0xc6>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	1d19      	adds	r1, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	9103      	str	r1, [sp, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bfbb      	ittet	lt
 80047d4:	425b      	neglt	r3, r3
 80047d6:	f042 0202 	orrlt.w	r2, r2, #2
 80047da:	9307      	strge	r3, [sp, #28]
 80047dc:	9307      	strlt	r3, [sp, #28]
 80047de:	bfb8      	it	lt
 80047e0:	9204      	strlt	r2, [sp, #16]
 80047e2:	7823      	ldrb	r3, [r4, #0]
 80047e4:	2b2e      	cmp	r3, #46	; 0x2e
 80047e6:	d10c      	bne.n	8004802 <_vfiprintf_r+0x15a>
 80047e8:	7863      	ldrb	r3, [r4, #1]
 80047ea:	2b2a      	cmp	r3, #42	; 0x2a
 80047ec:	d134      	bne.n	8004858 <_vfiprintf_r+0x1b0>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	1d1a      	adds	r2, r3, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	9203      	str	r2, [sp, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfb8      	it	lt
 80047fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80047fe:	3402      	adds	r4, #2
 8004800:	9305      	str	r3, [sp, #20]
 8004802:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80048d8 <_vfiprintf_r+0x230>
 8004806:	7821      	ldrb	r1, [r4, #0]
 8004808:	2203      	movs	r2, #3
 800480a:	4650      	mov	r0, sl
 800480c:	f7fb fce8 	bl	80001e0 <memchr>
 8004810:	b138      	cbz	r0, 8004822 <_vfiprintf_r+0x17a>
 8004812:	9b04      	ldr	r3, [sp, #16]
 8004814:	eba0 000a 	sub.w	r0, r0, sl
 8004818:	2240      	movs	r2, #64	; 0x40
 800481a:	4082      	lsls	r2, r0
 800481c:	4313      	orrs	r3, r2
 800481e:	3401      	adds	r4, #1
 8004820:	9304      	str	r3, [sp, #16]
 8004822:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004826:	4829      	ldr	r0, [pc, #164]	; (80048cc <_vfiprintf_r+0x224>)
 8004828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800482c:	2206      	movs	r2, #6
 800482e:	f7fb fcd7 	bl	80001e0 <memchr>
 8004832:	2800      	cmp	r0, #0
 8004834:	d03f      	beq.n	80048b6 <_vfiprintf_r+0x20e>
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <_vfiprintf_r+0x228>)
 8004838:	bb1b      	cbnz	r3, 8004882 <_vfiprintf_r+0x1da>
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	3307      	adds	r3, #7
 800483e:	f023 0307 	bic.w	r3, r3, #7
 8004842:	3308      	adds	r3, #8
 8004844:	9303      	str	r3, [sp, #12]
 8004846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004848:	443b      	add	r3, r7
 800484a:	9309      	str	r3, [sp, #36]	; 0x24
 800484c:	e768      	b.n	8004720 <_vfiprintf_r+0x78>
 800484e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004852:	460c      	mov	r4, r1
 8004854:	2001      	movs	r0, #1
 8004856:	e7a6      	b.n	80047a6 <_vfiprintf_r+0xfe>
 8004858:	2300      	movs	r3, #0
 800485a:	3401      	adds	r4, #1
 800485c:	9305      	str	r3, [sp, #20]
 800485e:	4619      	mov	r1, r3
 8004860:	f04f 0c0a 	mov.w	ip, #10
 8004864:	4620      	mov	r0, r4
 8004866:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486a:	3a30      	subs	r2, #48	; 0x30
 800486c:	2a09      	cmp	r2, #9
 800486e:	d903      	bls.n	8004878 <_vfiprintf_r+0x1d0>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0c6      	beq.n	8004802 <_vfiprintf_r+0x15a>
 8004874:	9105      	str	r1, [sp, #20]
 8004876:	e7c4      	b.n	8004802 <_vfiprintf_r+0x15a>
 8004878:	fb0c 2101 	mla	r1, ip, r1, r2
 800487c:	4604      	mov	r4, r0
 800487e:	2301      	movs	r3, #1
 8004880:	e7f0      	b.n	8004864 <_vfiprintf_r+0x1bc>
 8004882:	ab03      	add	r3, sp, #12
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	462a      	mov	r2, r5
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <_vfiprintf_r+0x22c>)
 800488a:	a904      	add	r1, sp, #16
 800488c:	4630      	mov	r0, r6
 800488e:	f3af 8000 	nop.w
 8004892:	4607      	mov	r7, r0
 8004894:	1c78      	adds	r0, r7, #1
 8004896:	d1d6      	bne.n	8004846 <_vfiprintf_r+0x19e>
 8004898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800489a:	07d9      	lsls	r1, r3, #31
 800489c:	d405      	bmi.n	80048aa <_vfiprintf_r+0x202>
 800489e:	89ab      	ldrh	r3, [r5, #12]
 80048a0:	059a      	lsls	r2, r3, #22
 80048a2:	d402      	bmi.n	80048aa <_vfiprintf_r+0x202>
 80048a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048a6:	f7ff fddb 	bl	8004460 <__retarget_lock_release_recursive>
 80048aa:	89ab      	ldrh	r3, [r5, #12]
 80048ac:	065b      	lsls	r3, r3, #25
 80048ae:	f53f af1d 	bmi.w	80046ec <_vfiprintf_r+0x44>
 80048b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b4:	e71c      	b.n	80046f0 <_vfiprintf_r+0x48>
 80048b6:	ab03      	add	r3, sp, #12
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	462a      	mov	r2, r5
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <_vfiprintf_r+0x22c>)
 80048be:	a904      	add	r1, sp, #16
 80048c0:	4630      	mov	r0, r6
 80048c2:	f000 f879 	bl	80049b8 <_printf_i>
 80048c6:	e7e4      	b.n	8004892 <_vfiprintf_r+0x1ea>
 80048c8:	08005e5c 	.word	0x08005e5c
 80048cc:	08005e66 	.word	0x08005e66
 80048d0:	00000000 	.word	0x00000000
 80048d4:	08004683 	.word	0x08004683
 80048d8:	08005e62 	.word	0x08005e62

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4616      	mov	r6, r2
 80048e2:	4699      	mov	r9, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfb8      	it	lt
 80048f0:	4613      	movlt	r3, r2
 80048f2:	6033      	str	r3, [r6, #0]
 80048f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048f8:	4607      	mov	r7, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	b10a      	cbz	r2, 8004902 <_printf_common+0x26>
 80048fe:	3301      	adds	r3, #1
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	0699      	lsls	r1, r3, #26
 8004906:	bf42      	ittt	mi
 8004908:	6833      	ldrmi	r3, [r6, #0]
 800490a:	3302      	addmi	r3, #2
 800490c:	6033      	strmi	r3, [r6, #0]
 800490e:	6825      	ldr	r5, [r4, #0]
 8004910:	f015 0506 	ands.w	r5, r5, #6
 8004914:	d106      	bne.n	8004924 <_printf_common+0x48>
 8004916:	f104 0a19 	add.w	sl, r4, #25
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	6832      	ldr	r2, [r6, #0]
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	42ab      	cmp	r3, r5
 8004922:	dc26      	bgt.n	8004972 <_printf_common+0x96>
 8004924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004928:	1e13      	subs	r3, r2, #0
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	bf18      	it	ne
 800492e:	2301      	movne	r3, #1
 8004930:	0692      	lsls	r2, r2, #26
 8004932:	d42b      	bmi.n	800498c <_printf_common+0xb0>
 8004934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004938:	4649      	mov	r1, r9
 800493a:	4638      	mov	r0, r7
 800493c:	47c0      	blx	r8
 800493e:	3001      	adds	r0, #1
 8004940:	d01e      	beq.n	8004980 <_printf_common+0xa4>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	6922      	ldr	r2, [r4, #16]
 8004946:	f003 0306 	and.w	r3, r3, #6
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf02      	ittt	eq
 800494e:	68e5      	ldreq	r5, [r4, #12]
 8004950:	6833      	ldreq	r3, [r6, #0]
 8004952:	1aed      	subeq	r5, r5, r3
 8004954:	68a3      	ldr	r3, [r4, #8]
 8004956:	bf0c      	ite	eq
 8004958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800495c:	2500      	movne	r5, #0
 800495e:	4293      	cmp	r3, r2
 8004960:	bfc4      	itt	gt
 8004962:	1a9b      	subgt	r3, r3, r2
 8004964:	18ed      	addgt	r5, r5, r3
 8004966:	2600      	movs	r6, #0
 8004968:	341a      	adds	r4, #26
 800496a:	42b5      	cmp	r5, r6
 800496c:	d11a      	bne.n	80049a4 <_printf_common+0xc8>
 800496e:	2000      	movs	r0, #0
 8004970:	e008      	b.n	8004984 <_printf_common+0xa8>
 8004972:	2301      	movs	r3, #1
 8004974:	4652      	mov	r2, sl
 8004976:	4649      	mov	r1, r9
 8004978:	4638      	mov	r0, r7
 800497a:	47c0      	blx	r8
 800497c:	3001      	adds	r0, #1
 800497e:	d103      	bne.n	8004988 <_printf_common+0xac>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004988:	3501      	adds	r5, #1
 800498a:	e7c6      	b.n	800491a <_printf_common+0x3e>
 800498c:	18e1      	adds	r1, r4, r3
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	2030      	movs	r0, #48	; 0x30
 8004992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004996:	4422      	add	r2, r4
 8004998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800499c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a0:	3302      	adds	r3, #2
 80049a2:	e7c7      	b.n	8004934 <_printf_common+0x58>
 80049a4:	2301      	movs	r3, #1
 80049a6:	4622      	mov	r2, r4
 80049a8:	4649      	mov	r1, r9
 80049aa:	4638      	mov	r0, r7
 80049ac:	47c0      	blx	r8
 80049ae:	3001      	adds	r0, #1
 80049b0:	d0e6      	beq.n	8004980 <_printf_common+0xa4>
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7d9      	b.n	800496a <_printf_common+0x8e>
	...

080049b8 <_printf_i>:
 80049b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049bc:	7e0f      	ldrb	r7, [r1, #24]
 80049be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c0:	2f78      	cmp	r7, #120	; 0x78
 80049c2:	4691      	mov	r9, r2
 80049c4:	4680      	mov	r8, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	469a      	mov	sl, r3
 80049ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ce:	d807      	bhi.n	80049e0 <_printf_i+0x28>
 80049d0:	2f62      	cmp	r7, #98	; 0x62
 80049d2:	d80a      	bhi.n	80049ea <_printf_i+0x32>
 80049d4:	2f00      	cmp	r7, #0
 80049d6:	f000 80d4 	beq.w	8004b82 <_printf_i+0x1ca>
 80049da:	2f58      	cmp	r7, #88	; 0x58
 80049dc:	f000 80c0 	beq.w	8004b60 <_printf_i+0x1a8>
 80049e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049e8:	e03a      	b.n	8004a60 <_printf_i+0xa8>
 80049ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ee:	2b15      	cmp	r3, #21
 80049f0:	d8f6      	bhi.n	80049e0 <_printf_i+0x28>
 80049f2:	a101      	add	r1, pc, #4	; (adr r1, 80049f8 <_printf_i+0x40>)
 80049f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a65 	.word	0x08004a65
 8004a00:	080049e1 	.word	0x080049e1
 8004a04:	080049e1 	.word	0x080049e1
 8004a08:	080049e1 	.word	0x080049e1
 8004a0c:	080049e1 	.word	0x080049e1
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	080049e1 	.word	0x080049e1
 8004a18:	080049e1 	.word	0x080049e1
 8004a1c:	080049e1 	.word	0x080049e1
 8004a20:	080049e1 	.word	0x080049e1
 8004a24:	08004b69 	.word	0x08004b69
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004b23 	.word	0x08004b23
 8004a30:	080049e1 	.word	0x080049e1
 8004a34:	080049e1 	.word	0x080049e1
 8004a38:	08004b8b 	.word	0x08004b8b
 8004a3c:	080049e1 	.word	0x080049e1
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	080049e1 	.word	0x080049e1
 8004a48:	080049e1 	.word	0x080049e1
 8004a4c:	08004b2b 	.word	0x08004b2b
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	602a      	str	r2, [r5, #0]
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a60:	2301      	movs	r3, #1
 8004a62:	e09f      	b.n	8004ba4 <_printf_i+0x1ec>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	0607      	lsls	r7, r0, #24
 8004a6a:	f103 0104 	add.w	r1, r3, #4
 8004a6e:	6029      	str	r1, [r5, #0]
 8004a70:	d501      	bpl.n	8004a76 <_printf_i+0xbe>
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	e003      	b.n	8004a7e <_printf_i+0xc6>
 8004a76:	0646      	lsls	r6, r0, #25
 8004a78:	d5fb      	bpl.n	8004a72 <_printf_i+0xba>
 8004a7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	da03      	bge.n	8004a8a <_printf_i+0xd2>
 8004a82:	232d      	movs	r3, #45	; 0x2d
 8004a84:	4276      	negs	r6, r6
 8004a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8a:	485a      	ldr	r0, [pc, #360]	; (8004bf4 <_printf_i+0x23c>)
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	e012      	b.n	8004ab6 <_printf_i+0xfe>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	6820      	ldr	r0, [r4, #0]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	6029      	str	r1, [r5, #0]
 8004a98:	0605      	lsls	r5, r0, #24
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_i+0xe8>
 8004a9c:	681e      	ldr	r6, [r3, #0]
 8004a9e:	e002      	b.n	8004aa6 <_printf_i+0xee>
 8004aa0:	0641      	lsls	r1, r0, #25
 8004aa2:	d5fb      	bpl.n	8004a9c <_printf_i+0xe4>
 8004aa4:	881e      	ldrh	r6, [r3, #0]
 8004aa6:	4853      	ldr	r0, [pc, #332]	; (8004bf4 <_printf_i+0x23c>)
 8004aa8:	2f6f      	cmp	r7, #111	; 0x6f
 8004aaa:	bf0c      	ite	eq
 8004aac:	2308      	moveq	r3, #8
 8004aae:	230a      	movne	r3, #10
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ab6:	6865      	ldr	r5, [r4, #4]
 8004ab8:	60a5      	str	r5, [r4, #8]
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	bfa2      	ittt	ge
 8004abe:	6821      	ldrge	r1, [r4, #0]
 8004ac0:	f021 0104 	bicge.w	r1, r1, #4
 8004ac4:	6021      	strge	r1, [r4, #0]
 8004ac6:	b90e      	cbnz	r6, 8004acc <_printf_i+0x114>
 8004ac8:	2d00      	cmp	r5, #0
 8004aca:	d04b      	beq.n	8004b64 <_printf_i+0x1ac>
 8004acc:	4615      	mov	r5, r2
 8004ace:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ad2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ad6:	5dc7      	ldrb	r7, [r0, r7]
 8004ad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004adc:	4637      	mov	r7, r6
 8004ade:	42bb      	cmp	r3, r7
 8004ae0:	460e      	mov	r6, r1
 8004ae2:	d9f4      	bls.n	8004ace <_printf_i+0x116>
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d10b      	bne.n	8004b00 <_printf_i+0x148>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	07de      	lsls	r6, r3, #31
 8004aec:	d508      	bpl.n	8004b00 <_printf_i+0x148>
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	6861      	ldr	r1, [r4, #4]
 8004af2:	4299      	cmp	r1, r3
 8004af4:	bfde      	ittt	le
 8004af6:	2330      	movle	r3, #48	; 0x30
 8004af8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004afc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b00:	1b52      	subs	r2, r2, r5
 8004b02:	6122      	str	r2, [r4, #16]
 8004b04:	f8cd a000 	str.w	sl, [sp]
 8004b08:	464b      	mov	r3, r9
 8004b0a:	aa03      	add	r2, sp, #12
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4640      	mov	r0, r8
 8004b10:	f7ff fee4 	bl	80048dc <_printf_common>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d14a      	bne.n	8004bae <_printf_i+0x1f6>
 8004b18:	f04f 30ff 	mov.w	r0, #4294967295
 8004b1c:	b004      	add	sp, #16
 8004b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	f043 0320 	orr.w	r3, r3, #32
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	4833      	ldr	r0, [pc, #204]	; (8004bf8 <_printf_i+0x240>)
 8004b2c:	2778      	movs	r7, #120	; 0x78
 8004b2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	6829      	ldr	r1, [r5, #0]
 8004b36:	061f      	lsls	r7, r3, #24
 8004b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b3c:	d402      	bmi.n	8004b44 <_printf_i+0x18c>
 8004b3e:	065f      	lsls	r7, r3, #25
 8004b40:	bf48      	it	mi
 8004b42:	b2b6      	uxthmi	r6, r6
 8004b44:	07df      	lsls	r7, r3, #31
 8004b46:	bf48      	it	mi
 8004b48:	f043 0320 	orrmi.w	r3, r3, #32
 8004b4c:	6029      	str	r1, [r5, #0]
 8004b4e:	bf48      	it	mi
 8004b50:	6023      	strmi	r3, [r4, #0]
 8004b52:	b91e      	cbnz	r6, 8004b5c <_printf_i+0x1a4>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	f023 0320 	bic.w	r3, r3, #32
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	e7a7      	b.n	8004ab0 <_printf_i+0xf8>
 8004b60:	4824      	ldr	r0, [pc, #144]	; (8004bf4 <_printf_i+0x23c>)
 8004b62:	e7e4      	b.n	8004b2e <_printf_i+0x176>
 8004b64:	4615      	mov	r5, r2
 8004b66:	e7bd      	b.n	8004ae4 <_printf_i+0x12c>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	6826      	ldr	r6, [r4, #0]
 8004b6c:	6961      	ldr	r1, [r4, #20]
 8004b6e:	1d18      	adds	r0, r3, #4
 8004b70:	6028      	str	r0, [r5, #0]
 8004b72:	0635      	lsls	r5, r6, #24
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	d501      	bpl.n	8004b7c <_printf_i+0x1c4>
 8004b78:	6019      	str	r1, [r3, #0]
 8004b7a:	e002      	b.n	8004b82 <_printf_i+0x1ca>
 8004b7c:	0670      	lsls	r0, r6, #25
 8004b7e:	d5fb      	bpl.n	8004b78 <_printf_i+0x1c0>
 8004b80:	8019      	strh	r1, [r3, #0]
 8004b82:	2300      	movs	r3, #0
 8004b84:	6123      	str	r3, [r4, #16]
 8004b86:	4615      	mov	r5, r2
 8004b88:	e7bc      	b.n	8004b04 <_printf_i+0x14c>
 8004b8a:	682b      	ldr	r3, [r5, #0]
 8004b8c:	1d1a      	adds	r2, r3, #4
 8004b8e:	602a      	str	r2, [r5, #0]
 8004b90:	681d      	ldr	r5, [r3, #0]
 8004b92:	6862      	ldr	r2, [r4, #4]
 8004b94:	2100      	movs	r1, #0
 8004b96:	4628      	mov	r0, r5
 8004b98:	f7fb fb22 	bl	80001e0 <memchr>
 8004b9c:	b108      	cbz	r0, 8004ba2 <_printf_i+0x1ea>
 8004b9e:	1b40      	subs	r0, r0, r5
 8004ba0:	6060      	str	r0, [r4, #4]
 8004ba2:	6863      	ldr	r3, [r4, #4]
 8004ba4:	6123      	str	r3, [r4, #16]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bac:	e7aa      	b.n	8004b04 <_printf_i+0x14c>
 8004bae:	6923      	ldr	r3, [r4, #16]
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4640      	mov	r0, r8
 8004bb6:	47d0      	blx	sl
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d0ad      	beq.n	8004b18 <_printf_i+0x160>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	079b      	lsls	r3, r3, #30
 8004bc0:	d413      	bmi.n	8004bea <_printf_i+0x232>
 8004bc2:	68e0      	ldr	r0, [r4, #12]
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	bfb8      	it	lt
 8004bca:	4618      	movlt	r0, r3
 8004bcc:	e7a6      	b.n	8004b1c <_printf_i+0x164>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4632      	mov	r2, r6
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4640      	mov	r0, r8
 8004bd6:	47d0      	blx	sl
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d09d      	beq.n	8004b18 <_printf_i+0x160>
 8004bdc:	3501      	adds	r5, #1
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	9903      	ldr	r1, [sp, #12]
 8004be2:	1a5b      	subs	r3, r3, r1
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	dcf2      	bgt.n	8004bce <_printf_i+0x216>
 8004be8:	e7eb      	b.n	8004bc2 <_printf_i+0x20a>
 8004bea:	2500      	movs	r5, #0
 8004bec:	f104 0619 	add.w	r6, r4, #25
 8004bf0:	e7f5      	b.n	8004bde <_printf_i+0x226>
 8004bf2:	bf00      	nop
 8004bf4:	08005e6d 	.word	0x08005e6d
 8004bf8:	08005e7e 	.word	0x08005e7e

08004bfc <__sflush_r>:
 8004bfc:	898a      	ldrh	r2, [r1, #12]
 8004bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c02:	4605      	mov	r5, r0
 8004c04:	0710      	lsls	r0, r2, #28
 8004c06:	460c      	mov	r4, r1
 8004c08:	d458      	bmi.n	8004cbc <__sflush_r+0xc0>
 8004c0a:	684b      	ldr	r3, [r1, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dc05      	bgt.n	8004c1c <__sflush_r+0x20>
 8004c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dc02      	bgt.n	8004c1c <__sflush_r+0x20>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c1e:	2e00      	cmp	r6, #0
 8004c20:	d0f9      	beq.n	8004c16 <__sflush_r+0x1a>
 8004c22:	2300      	movs	r3, #0
 8004c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c28:	682f      	ldr	r7, [r5, #0]
 8004c2a:	6a21      	ldr	r1, [r4, #32]
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	d032      	beq.n	8004c96 <__sflush_r+0x9a>
 8004c30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	075a      	lsls	r2, r3, #29
 8004c36:	d505      	bpl.n	8004c44 <__sflush_r+0x48>
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	1ac0      	subs	r0, r0, r3
 8004c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c3e:	b10b      	cbz	r3, 8004c44 <__sflush_r+0x48>
 8004c40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c42:	1ac0      	subs	r0, r0, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	4602      	mov	r2, r0
 8004c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c4a:	6a21      	ldr	r1, [r4, #32]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b0      	blx	r6
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	d106      	bne.n	8004c64 <__sflush_r+0x68>
 8004c56:	6829      	ldr	r1, [r5, #0]
 8004c58:	291d      	cmp	r1, #29
 8004c5a:	d82b      	bhi.n	8004cb4 <__sflush_r+0xb8>
 8004c5c:	4a29      	ldr	r2, [pc, #164]	; (8004d04 <__sflush_r+0x108>)
 8004c5e:	410a      	asrs	r2, r1
 8004c60:	07d6      	lsls	r6, r2, #31
 8004c62:	d427      	bmi.n	8004cb4 <__sflush_r+0xb8>
 8004c64:	2200      	movs	r2, #0
 8004c66:	6062      	str	r2, [r4, #4]
 8004c68:	04d9      	lsls	r1, r3, #19
 8004c6a:	6922      	ldr	r2, [r4, #16]
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	d504      	bpl.n	8004c7a <__sflush_r+0x7e>
 8004c70:	1c42      	adds	r2, r0, #1
 8004c72:	d101      	bne.n	8004c78 <__sflush_r+0x7c>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b903      	cbnz	r3, 8004c7a <__sflush_r+0x7e>
 8004c78:	6560      	str	r0, [r4, #84]	; 0x54
 8004c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c7c:	602f      	str	r7, [r5, #0]
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	d0c9      	beq.n	8004c16 <__sflush_r+0x1a>
 8004c82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d002      	beq.n	8004c90 <__sflush_r+0x94>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7ff fbea 	bl	8004464 <_free_r>
 8004c90:	2000      	movs	r0, #0
 8004c92:	6360      	str	r0, [r4, #52]	; 0x34
 8004c94:	e7c0      	b.n	8004c18 <__sflush_r+0x1c>
 8004c96:	2301      	movs	r3, #1
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b0      	blx	r6
 8004c9c:	1c41      	adds	r1, r0, #1
 8004c9e:	d1c8      	bne.n	8004c32 <__sflush_r+0x36>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0c5      	beq.n	8004c32 <__sflush_r+0x36>
 8004ca6:	2b1d      	cmp	r3, #29
 8004ca8:	d001      	beq.n	8004cae <__sflush_r+0xb2>
 8004caa:	2b16      	cmp	r3, #22
 8004cac:	d101      	bne.n	8004cb2 <__sflush_r+0xb6>
 8004cae:	602f      	str	r7, [r5, #0]
 8004cb0:	e7b1      	b.n	8004c16 <__sflush_r+0x1a>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb8:	81a3      	strh	r3, [r4, #12]
 8004cba:	e7ad      	b.n	8004c18 <__sflush_r+0x1c>
 8004cbc:	690f      	ldr	r7, [r1, #16]
 8004cbe:	2f00      	cmp	r7, #0
 8004cc0:	d0a9      	beq.n	8004c16 <__sflush_r+0x1a>
 8004cc2:	0793      	lsls	r3, r2, #30
 8004cc4:	680e      	ldr	r6, [r1, #0]
 8004cc6:	bf08      	it	eq
 8004cc8:	694b      	ldreq	r3, [r1, #20]
 8004cca:	600f      	str	r7, [r1, #0]
 8004ccc:	bf18      	it	ne
 8004cce:	2300      	movne	r3, #0
 8004cd0:	eba6 0807 	sub.w	r8, r6, r7
 8004cd4:	608b      	str	r3, [r1, #8]
 8004cd6:	f1b8 0f00 	cmp.w	r8, #0
 8004cda:	dd9c      	ble.n	8004c16 <__sflush_r+0x1a>
 8004cdc:	6a21      	ldr	r1, [r4, #32]
 8004cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ce0:	4643      	mov	r3, r8
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b0      	blx	r6
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	dc06      	bgt.n	8004cfa <__sflush_r+0xfe>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e78e      	b.n	8004c18 <__sflush_r+0x1c>
 8004cfa:	4407      	add	r7, r0
 8004cfc:	eba8 0800 	sub.w	r8, r8, r0
 8004d00:	e7e9      	b.n	8004cd6 <__sflush_r+0xda>
 8004d02:	bf00      	nop
 8004d04:	dfbffffe 	.word	0xdfbffffe

08004d08 <_fflush_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	690b      	ldr	r3, [r1, #16]
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b913      	cbnz	r3, 8004d18 <_fflush_r+0x10>
 8004d12:	2500      	movs	r5, #0
 8004d14:	4628      	mov	r0, r5
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	b118      	cbz	r0, 8004d22 <_fflush_r+0x1a>
 8004d1a:	6a03      	ldr	r3, [r0, #32]
 8004d1c:	b90b      	cbnz	r3, 8004d22 <_fflush_r+0x1a>
 8004d1e:	f7ff fa99 	bl	8004254 <__sinit>
 8004d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f3      	beq.n	8004d12 <_fflush_r+0xa>
 8004d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d2c:	07d0      	lsls	r0, r2, #31
 8004d2e:	d404      	bmi.n	8004d3a <_fflush_r+0x32>
 8004d30:	0599      	lsls	r1, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_fflush_r+0x32>
 8004d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d36:	f7ff fb92 	bl	800445e <__retarget_lock_acquire_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f7ff ff5d 	bl	8004bfc <__sflush_r>
 8004d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d44:	07da      	lsls	r2, r3, #31
 8004d46:	4605      	mov	r5, r0
 8004d48:	d4e4      	bmi.n	8004d14 <_fflush_r+0xc>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	059b      	lsls	r3, r3, #22
 8004d4e:	d4e1      	bmi.n	8004d14 <_fflush_r+0xc>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f7ff fb85 	bl	8004460 <__retarget_lock_release_recursive>
 8004d56:	e7dd      	b.n	8004d14 <_fflush_r+0xc>

08004d58 <__swbuf_r>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	460e      	mov	r6, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	4605      	mov	r5, r0
 8004d60:	b118      	cbz	r0, 8004d6a <__swbuf_r+0x12>
 8004d62:	6a03      	ldr	r3, [r0, #32]
 8004d64:	b90b      	cbnz	r3, 8004d6a <__swbuf_r+0x12>
 8004d66:	f7ff fa75 	bl	8004254 <__sinit>
 8004d6a:	69a3      	ldr	r3, [r4, #24]
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	071a      	lsls	r2, r3, #28
 8004d72:	d525      	bpl.n	8004dc0 <__swbuf_r+0x68>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	b31b      	cbz	r3, 8004dc0 <__swbuf_r+0x68>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	6922      	ldr	r2, [r4, #16]
 8004d7c:	1a98      	subs	r0, r3, r2
 8004d7e:	6963      	ldr	r3, [r4, #20]
 8004d80:	b2f6      	uxtb	r6, r6
 8004d82:	4283      	cmp	r3, r0
 8004d84:	4637      	mov	r7, r6
 8004d86:	dc04      	bgt.n	8004d92 <__swbuf_r+0x3a>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f7ff ffbc 	bl	8004d08 <_fflush_r>
 8004d90:	b9e0      	cbnz	r0, 8004dcc <__swbuf_r+0x74>
 8004d92:	68a3      	ldr	r3, [r4, #8]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	60a3      	str	r3, [r4, #8]
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	6022      	str	r2, [r4, #0]
 8004d9e:	701e      	strb	r6, [r3, #0]
 8004da0:	6962      	ldr	r2, [r4, #20]
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d004      	beq.n	8004db2 <__swbuf_r+0x5a>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	07db      	lsls	r3, r3, #31
 8004dac:	d506      	bpl.n	8004dbc <__swbuf_r+0x64>
 8004dae:	2e0a      	cmp	r6, #10
 8004db0:	d104      	bne.n	8004dbc <__swbuf_r+0x64>
 8004db2:	4621      	mov	r1, r4
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7ff ffa7 	bl	8004d08 <_fflush_r>
 8004dba:	b938      	cbnz	r0, 8004dcc <__swbuf_r+0x74>
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f806 	bl	8004dd4 <__swsetup_r>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d0d5      	beq.n	8004d78 <__swbuf_r+0x20>
 8004dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8004dd0:	e7f4      	b.n	8004dbc <__swbuf_r+0x64>
	...

08004dd4 <__swsetup_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <__swsetup_r+0xac>)
 8004dd8:	4605      	mov	r5, r0
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	460c      	mov	r4, r1
 8004dde:	b118      	cbz	r0, 8004de8 <__swsetup_r+0x14>
 8004de0:	6a03      	ldr	r3, [r0, #32]
 8004de2:	b90b      	cbnz	r3, 8004de8 <__swsetup_r+0x14>
 8004de4:	f7ff fa36 	bl	8004254 <__sinit>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dee:	0718      	lsls	r0, r3, #28
 8004df0:	d422      	bmi.n	8004e38 <__swsetup_r+0x64>
 8004df2:	06d9      	lsls	r1, r3, #27
 8004df4:	d407      	bmi.n	8004e06 <__swsetup_r+0x32>
 8004df6:	2309      	movs	r3, #9
 8004df8:	602b      	str	r3, [r5, #0]
 8004dfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	e034      	b.n	8004e70 <__swsetup_r+0x9c>
 8004e06:	0758      	lsls	r0, r3, #29
 8004e08:	d512      	bpl.n	8004e30 <__swsetup_r+0x5c>
 8004e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e0c:	b141      	cbz	r1, 8004e20 <__swsetup_r+0x4c>
 8004e0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e12:	4299      	cmp	r1, r3
 8004e14:	d002      	beq.n	8004e1c <__swsetup_r+0x48>
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7ff fb24 	bl	8004464 <_free_r>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e26:	81a3      	strh	r3, [r4, #12]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6023      	str	r3, [r4, #0]
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f043 0308 	orr.w	r3, r3, #8
 8004e36:	81a3      	strh	r3, [r4, #12]
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	b94b      	cbnz	r3, 8004e50 <__swsetup_r+0x7c>
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e46:	d003      	beq.n	8004e50 <__swsetup_r+0x7c>
 8004e48:	4621      	mov	r1, r4
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 f850 	bl	8004ef0 <__smakebuf_r>
 8004e50:	89a0      	ldrh	r0, [r4, #12]
 8004e52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e56:	f010 0301 	ands.w	r3, r0, #1
 8004e5a:	d00a      	beq.n	8004e72 <__swsetup_r+0x9e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60a3      	str	r3, [r4, #8]
 8004e60:	6963      	ldr	r3, [r4, #20]
 8004e62:	425b      	negs	r3, r3
 8004e64:	61a3      	str	r3, [r4, #24]
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	b943      	cbnz	r3, 8004e7c <__swsetup_r+0xa8>
 8004e6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e6e:	d1c4      	bne.n	8004dfa <__swsetup_r+0x26>
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	0781      	lsls	r1, r0, #30
 8004e74:	bf58      	it	pl
 8004e76:	6963      	ldrpl	r3, [r4, #20]
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	e7f4      	b.n	8004e66 <__swsetup_r+0x92>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e7f7      	b.n	8004e70 <__swsetup_r+0x9c>
 8004e80:	20000064 	.word	0x20000064

08004e84 <_sbrk_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	; (8004ea0 <_sbrk_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fc fb60 	bl	8001554 <_sbrk>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_sbrk_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_sbrk_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200002a8 	.word	0x200002a8

08004ea4 <__swhatbuf_r>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	b096      	sub	sp, #88	; 0x58
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	461e      	mov	r6, r3
 8004eb4:	da0d      	bge.n	8004ed2 <__swhatbuf_r+0x2e>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	bf0c      	ite	eq
 8004ec2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004ec6:	2340      	movne	r3, #64	; 0x40
 8004ec8:	2000      	movs	r0, #0
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	b016      	add	sp, #88	; 0x58
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f000 f848 	bl	8004f68 <_fstat_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dbec      	blt.n	8004eb6 <__swhatbuf_r+0x12>
 8004edc:	9901      	ldr	r1, [sp, #4]
 8004ede:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004ee2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004ee6:	4259      	negs	r1, r3
 8004ee8:	4159      	adcs	r1, r3
 8004eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eee:	e7eb      	b.n	8004ec8 <__swhatbuf_r+0x24>

08004ef0 <__smakebuf_r>:
 8004ef0:	898b      	ldrh	r3, [r1, #12]
 8004ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ef4:	079d      	lsls	r5, r3, #30
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	d507      	bpl.n	8004f0c <__smakebuf_r+0x1c>
 8004efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	2301      	movs	r3, #1
 8004f06:	6163      	str	r3, [r4, #20]
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	ab01      	add	r3, sp, #4
 8004f0e:	466a      	mov	r2, sp
 8004f10:	f7ff ffc8 	bl	8004ea4 <__swhatbuf_r>
 8004f14:	9900      	ldr	r1, [sp, #0]
 8004f16:	4605      	mov	r5, r0
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff fb0f 	bl	800453c <_malloc_r>
 8004f1e:	b948      	cbnz	r0, 8004f34 <__smakebuf_r+0x44>
 8004f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f24:	059a      	lsls	r2, r3, #22
 8004f26:	d4ef      	bmi.n	8004f08 <__smakebuf_r+0x18>
 8004f28:	f023 0303 	bic.w	r3, r3, #3
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	e7e3      	b.n	8004efc <__smakebuf_r+0xc>
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	6020      	str	r0, [r4, #0]
 8004f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f3c:	81a3      	strh	r3, [r4, #12]
 8004f3e:	9b00      	ldr	r3, [sp, #0]
 8004f40:	6163      	str	r3, [r4, #20]
 8004f42:	9b01      	ldr	r3, [sp, #4]
 8004f44:	6120      	str	r0, [r4, #16]
 8004f46:	b15b      	cbz	r3, 8004f60 <__smakebuf_r+0x70>
 8004f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f81d 	bl	8004f8c <_isatty_r>
 8004f52:	b128      	cbz	r0, 8004f60 <__smakebuf_r+0x70>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	431d      	orrs	r5, r3
 8004f64:	81a5      	strh	r5, [r4, #12]
 8004f66:	e7cf      	b.n	8004f08 <__smakebuf_r+0x18>

08004f68 <_fstat_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	; (8004f88 <_fstat_r+0x20>)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	f7fc fac4 	bl	8001502 <_fstat>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d102      	bne.n	8004f84 <_fstat_r+0x1c>
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	b103      	cbz	r3, 8004f84 <_fstat_r+0x1c>
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	200002a8 	.word	0x200002a8

08004f8c <_isatty_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d06      	ldr	r5, [pc, #24]	; (8004fa8 <_isatty_r+0x1c>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	f7fc fac3 	bl	8001522 <_isatty>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_isatty_r+0x1a>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_isatty_r+0x1a>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	200002a8 	.word	0x200002a8

08004fac <pow>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	ed2d 8b02 	vpush	{d8}
 8004fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8004fb6:	eef0 8a60 	vmov.f32	s17, s1
 8004fba:	ec55 4b11 	vmov	r4, r5, d1
 8004fbe:	f000 f873 	bl	80050a8 <__ieee754_pow>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	ec57 6b10 	vmov	r6, r7, d0
 8004fce:	f7fb fdad 	bl	8000b2c <__aeabi_dcmpun>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d13b      	bne.n	800504e <pow+0xa2>
 8004fd6:	ec51 0b18 	vmov	r0, r1, d8
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f7fb fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fe2:	b1b8      	cbz	r0, 8005014 <pow+0x68>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d146      	bne.n	8005082 <pow+0xd6>
 8004ff4:	ec45 4b10 	vmov	d0, r4, r5
 8004ff8:	f000 f848 	bl	800508c <finite>
 8004ffc:	b338      	cbz	r0, 800504e <pow+0xa2>
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fd69 	bl	8000adc <__aeabi_dcmplt>
 800500a:	b300      	cbz	r0, 800504e <pow+0xa2>
 800500c:	f7ff f9fc 	bl	8004408 <__errno>
 8005010:	2322      	movs	r3, #34	; 0x22
 8005012:	e01b      	b.n	800504c <pow+0xa0>
 8005014:	ec47 6b10 	vmov	d0, r6, r7
 8005018:	f000 f838 	bl	800508c <finite>
 800501c:	b9e0      	cbnz	r0, 8005058 <pow+0xac>
 800501e:	eeb0 0a48 	vmov.f32	s0, s16
 8005022:	eef0 0a68 	vmov.f32	s1, s17
 8005026:	f000 f831 	bl	800508c <finite>
 800502a:	b1a8      	cbz	r0, 8005058 <pow+0xac>
 800502c:	ec45 4b10 	vmov	d0, r4, r5
 8005030:	f000 f82c 	bl	800508c <finite>
 8005034:	b180      	cbz	r0, 8005058 <pow+0xac>
 8005036:	4632      	mov	r2, r6
 8005038:	463b      	mov	r3, r7
 800503a:	4630      	mov	r0, r6
 800503c:	4639      	mov	r1, r7
 800503e:	f7fb fd75 	bl	8000b2c <__aeabi_dcmpun>
 8005042:	2800      	cmp	r0, #0
 8005044:	d0e2      	beq.n	800500c <pow+0x60>
 8005046:	f7ff f9df 	bl	8004408 <__errno>
 800504a:	2321      	movs	r3, #33	; 0x21
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	ecbd 8b02 	vpop	{d8}
 8005052:	ec47 6b10 	vmov	d0, r6, r7
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8005064:	2800      	cmp	r0, #0
 8005066:	d0f2      	beq.n	800504e <pow+0xa2>
 8005068:	eeb0 0a48 	vmov.f32	s0, s16
 800506c:	eef0 0a68 	vmov.f32	s1, s17
 8005070:	f000 f80c 	bl	800508c <finite>
 8005074:	2800      	cmp	r0, #0
 8005076:	d0ea      	beq.n	800504e <pow+0xa2>
 8005078:	ec45 4b10 	vmov	d0, r4, r5
 800507c:	f000 f806 	bl	800508c <finite>
 8005080:	e7c3      	b.n	800500a <pow+0x5e>
 8005082:	4f01      	ldr	r7, [pc, #4]	; (8005088 <pow+0xdc>)
 8005084:	2600      	movs	r6, #0
 8005086:	e7e2      	b.n	800504e <pow+0xa2>
 8005088:	3ff00000 	.word	0x3ff00000

0800508c <finite>:
 800508c:	b082      	sub	sp, #8
 800508e:	ed8d 0b00 	vstr	d0, [sp]
 8005092:	9801      	ldr	r0, [sp, #4]
 8005094:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005098:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800509c:	0fc0      	lsrs	r0, r0, #31
 800509e:	b002      	add	sp, #8
 80050a0:	4770      	bx	lr
 80050a2:	0000      	movs	r0, r0
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <__ieee754_pow>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	ed2d 8b06 	vpush	{d8-d10}
 80050b0:	b089      	sub	sp, #36	; 0x24
 80050b2:	ed8d 1b00 	vstr	d1, [sp]
 80050b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80050ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80050be:	ea58 0102 	orrs.w	r1, r8, r2
 80050c2:	ec57 6b10 	vmov	r6, r7, d0
 80050c6:	d115      	bne.n	80050f4 <__ieee754_pow+0x4c>
 80050c8:	19b3      	adds	r3, r6, r6
 80050ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80050ce:	4152      	adcs	r2, r2
 80050d0:	4299      	cmp	r1, r3
 80050d2:	4b89      	ldr	r3, [pc, #548]	; (80052f8 <__ieee754_pow+0x250>)
 80050d4:	4193      	sbcs	r3, r2
 80050d6:	f080 84d1 	bcs.w	8005a7c <__ieee754_pow+0x9d4>
 80050da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050de:	4630      	mov	r0, r6
 80050e0:	4639      	mov	r1, r7
 80050e2:	f7fb f8d3 	bl	800028c <__adddf3>
 80050e6:	ec41 0b10 	vmov	d0, r0, r1
 80050ea:	b009      	add	sp, #36	; 0x24
 80050ec:	ecbd 8b06 	vpop	{d8-d10}
 80050f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f4:	4b81      	ldr	r3, [pc, #516]	; (80052fc <__ieee754_pow+0x254>)
 80050f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80050fa:	429c      	cmp	r4, r3
 80050fc:	ee10 aa10 	vmov	sl, s0
 8005100:	463d      	mov	r5, r7
 8005102:	dc06      	bgt.n	8005112 <__ieee754_pow+0x6a>
 8005104:	d101      	bne.n	800510a <__ieee754_pow+0x62>
 8005106:	2e00      	cmp	r6, #0
 8005108:	d1e7      	bne.n	80050da <__ieee754_pow+0x32>
 800510a:	4598      	cmp	r8, r3
 800510c:	dc01      	bgt.n	8005112 <__ieee754_pow+0x6a>
 800510e:	d10f      	bne.n	8005130 <__ieee754_pow+0x88>
 8005110:	b172      	cbz	r2, 8005130 <__ieee754_pow+0x88>
 8005112:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005116:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800511a:	ea55 050a 	orrs.w	r5, r5, sl
 800511e:	d1dc      	bne.n	80050da <__ieee754_pow+0x32>
 8005120:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005124:	18db      	adds	r3, r3, r3
 8005126:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800512a:	4152      	adcs	r2, r2
 800512c:	429d      	cmp	r5, r3
 800512e:	e7d0      	b.n	80050d2 <__ieee754_pow+0x2a>
 8005130:	2d00      	cmp	r5, #0
 8005132:	da3b      	bge.n	80051ac <__ieee754_pow+0x104>
 8005134:	4b72      	ldr	r3, [pc, #456]	; (8005300 <__ieee754_pow+0x258>)
 8005136:	4598      	cmp	r8, r3
 8005138:	dc51      	bgt.n	80051de <__ieee754_pow+0x136>
 800513a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800513e:	4598      	cmp	r8, r3
 8005140:	f340 84ab 	ble.w	8005a9a <__ieee754_pow+0x9f2>
 8005144:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800514c:	2b14      	cmp	r3, #20
 800514e:	dd0f      	ble.n	8005170 <__ieee754_pow+0xc8>
 8005150:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005154:	fa22 f103 	lsr.w	r1, r2, r3
 8005158:	fa01 f303 	lsl.w	r3, r1, r3
 800515c:	4293      	cmp	r3, r2
 800515e:	f040 849c 	bne.w	8005a9a <__ieee754_pow+0x9f2>
 8005162:	f001 0101 	and.w	r1, r1, #1
 8005166:	f1c1 0302 	rsb	r3, r1, #2
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	b182      	cbz	r2, 8005190 <__ieee754_pow+0xe8>
 800516e:	e05f      	b.n	8005230 <__ieee754_pow+0x188>
 8005170:	2a00      	cmp	r2, #0
 8005172:	d15b      	bne.n	800522c <__ieee754_pow+0x184>
 8005174:	f1c3 0314 	rsb	r3, r3, #20
 8005178:	fa48 f103 	asr.w	r1, r8, r3
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	4543      	cmp	r3, r8
 8005182:	f040 8487 	bne.w	8005a94 <__ieee754_pow+0x9ec>
 8005186:	f001 0101 	and.w	r1, r1, #1
 800518a:	f1c1 0302 	rsb	r3, r1, #2
 800518e:	9304      	str	r3, [sp, #16]
 8005190:	4b5c      	ldr	r3, [pc, #368]	; (8005304 <__ieee754_pow+0x25c>)
 8005192:	4598      	cmp	r8, r3
 8005194:	d132      	bne.n	80051fc <__ieee754_pow+0x154>
 8005196:	f1b9 0f00 	cmp.w	r9, #0
 800519a:	f280 8477 	bge.w	8005a8c <__ieee754_pow+0x9e4>
 800519e:	4959      	ldr	r1, [pc, #356]	; (8005304 <__ieee754_pow+0x25c>)
 80051a0:	4632      	mov	r2, r6
 80051a2:	463b      	mov	r3, r7
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7fb fb51 	bl	800084c <__aeabi_ddiv>
 80051aa:	e79c      	b.n	80050e6 <__ieee754_pow+0x3e>
 80051ac:	2300      	movs	r3, #0
 80051ae:	9304      	str	r3, [sp, #16]
 80051b0:	2a00      	cmp	r2, #0
 80051b2:	d13d      	bne.n	8005230 <__ieee754_pow+0x188>
 80051b4:	4b51      	ldr	r3, [pc, #324]	; (80052fc <__ieee754_pow+0x254>)
 80051b6:	4598      	cmp	r8, r3
 80051b8:	d1ea      	bne.n	8005190 <__ieee754_pow+0xe8>
 80051ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80051be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80051c2:	ea53 030a 	orrs.w	r3, r3, sl
 80051c6:	f000 8459 	beq.w	8005a7c <__ieee754_pow+0x9d4>
 80051ca:	4b4f      	ldr	r3, [pc, #316]	; (8005308 <__ieee754_pow+0x260>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	dd08      	ble.n	80051e2 <__ieee754_pow+0x13a>
 80051d0:	f1b9 0f00 	cmp.w	r9, #0
 80051d4:	f2c0 8456 	blt.w	8005a84 <__ieee754_pow+0x9dc>
 80051d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051dc:	e783      	b.n	80050e6 <__ieee754_pow+0x3e>
 80051de:	2302      	movs	r3, #2
 80051e0:	e7e5      	b.n	80051ae <__ieee754_pow+0x106>
 80051e2:	f1b9 0f00 	cmp.w	r9, #0
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	f6bf af7a 	bge.w	80050e6 <__ieee754_pow+0x3e>
 80051f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80051f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051fa:	e774      	b.n	80050e6 <__ieee754_pow+0x3e>
 80051fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005200:	d106      	bne.n	8005210 <__ieee754_pow+0x168>
 8005202:	4632      	mov	r2, r6
 8005204:	463b      	mov	r3, r7
 8005206:	4630      	mov	r0, r6
 8005208:	4639      	mov	r1, r7
 800520a:	f7fb f9f5 	bl	80005f8 <__aeabi_dmul>
 800520e:	e76a      	b.n	80050e6 <__ieee754_pow+0x3e>
 8005210:	4b3e      	ldr	r3, [pc, #248]	; (800530c <__ieee754_pow+0x264>)
 8005212:	4599      	cmp	r9, r3
 8005214:	d10c      	bne.n	8005230 <__ieee754_pow+0x188>
 8005216:	2d00      	cmp	r5, #0
 8005218:	db0a      	blt.n	8005230 <__ieee754_pow+0x188>
 800521a:	ec47 6b10 	vmov	d0, r6, r7
 800521e:	b009      	add	sp, #36	; 0x24
 8005220:	ecbd 8b06 	vpop	{d8-d10}
 8005224:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	f000 bd20 	b.w	8005c6c <__ieee754_sqrt>
 800522c:	2300      	movs	r3, #0
 800522e:	9304      	str	r3, [sp, #16]
 8005230:	ec47 6b10 	vmov	d0, r6, r7
 8005234:	f000 fc62 	bl	8005afc <fabs>
 8005238:	ec51 0b10 	vmov	r0, r1, d0
 800523c:	f1ba 0f00 	cmp.w	sl, #0
 8005240:	d129      	bne.n	8005296 <__ieee754_pow+0x1ee>
 8005242:	b124      	cbz	r4, 800524e <__ieee754_pow+0x1a6>
 8005244:	4b2f      	ldr	r3, [pc, #188]	; (8005304 <__ieee754_pow+0x25c>)
 8005246:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800524a:	429a      	cmp	r2, r3
 800524c:	d123      	bne.n	8005296 <__ieee754_pow+0x1ee>
 800524e:	f1b9 0f00 	cmp.w	r9, #0
 8005252:	da05      	bge.n	8005260 <__ieee754_pow+0x1b8>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	2000      	movs	r0, #0
 800525a:	492a      	ldr	r1, [pc, #168]	; (8005304 <__ieee754_pow+0x25c>)
 800525c:	f7fb faf6 	bl	800084c <__aeabi_ddiv>
 8005260:	2d00      	cmp	r5, #0
 8005262:	f6bf af40 	bge.w	80050e6 <__ieee754_pow+0x3e>
 8005266:	9b04      	ldr	r3, [sp, #16]
 8005268:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800526c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005270:	431c      	orrs	r4, r3
 8005272:	d108      	bne.n	8005286 <__ieee754_pow+0x1de>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fb f804 	bl	8000288 <__aeabi_dsub>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	e78f      	b.n	80051a6 <__ieee754_pow+0xfe>
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	2b01      	cmp	r3, #1
 800528a:	f47f af2c 	bne.w	80050e6 <__ieee754_pow+0x3e>
 800528e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005292:	4619      	mov	r1, r3
 8005294:	e727      	b.n	80050e6 <__ieee754_pow+0x3e>
 8005296:	0feb      	lsrs	r3, r5, #31
 8005298:	3b01      	subs	r3, #1
 800529a:	9306      	str	r3, [sp, #24]
 800529c:	9a06      	ldr	r2, [sp, #24]
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d102      	bne.n	80052aa <__ieee754_pow+0x202>
 80052a4:	4632      	mov	r2, r6
 80052a6:	463b      	mov	r3, r7
 80052a8:	e7e6      	b.n	8005278 <__ieee754_pow+0x1d0>
 80052aa:	4b19      	ldr	r3, [pc, #100]	; (8005310 <__ieee754_pow+0x268>)
 80052ac:	4598      	cmp	r8, r3
 80052ae:	f340 80fb 	ble.w	80054a8 <__ieee754_pow+0x400>
 80052b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80052b6:	4598      	cmp	r8, r3
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <__ieee754_pow+0x260>)
 80052ba:	dd0c      	ble.n	80052d6 <__ieee754_pow+0x22e>
 80052bc:	429c      	cmp	r4, r3
 80052be:	dc0f      	bgt.n	80052e0 <__ieee754_pow+0x238>
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	da0f      	bge.n	80052e6 <__ieee754_pow+0x23e>
 80052c6:	2000      	movs	r0, #0
 80052c8:	b009      	add	sp, #36	; 0x24
 80052ca:	ecbd 8b06 	vpop	{d8-d10}
 80052ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d2:	f000 bcc2 	b.w	8005c5a <__math_oflow>
 80052d6:	429c      	cmp	r4, r3
 80052d8:	dbf2      	blt.n	80052c0 <__ieee754_pow+0x218>
 80052da:	4b0a      	ldr	r3, [pc, #40]	; (8005304 <__ieee754_pow+0x25c>)
 80052dc:	429c      	cmp	r4, r3
 80052de:	dd19      	ble.n	8005314 <__ieee754_pow+0x26c>
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	dcef      	bgt.n	80052c6 <__ieee754_pow+0x21e>
 80052e6:	2000      	movs	r0, #0
 80052e8:	b009      	add	sp, #36	; 0x24
 80052ea:	ecbd 8b06 	vpop	{d8-d10}
 80052ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f2:	f000 bca9 	b.w	8005c48 <__math_uflow>
 80052f6:	bf00      	nop
 80052f8:	fff00000 	.word	0xfff00000
 80052fc:	7ff00000 	.word	0x7ff00000
 8005300:	433fffff 	.word	0x433fffff
 8005304:	3ff00000 	.word	0x3ff00000
 8005308:	3fefffff 	.word	0x3fefffff
 800530c:	3fe00000 	.word	0x3fe00000
 8005310:	41e00000 	.word	0x41e00000
 8005314:	4b60      	ldr	r3, [pc, #384]	; (8005498 <__ieee754_pow+0x3f0>)
 8005316:	2200      	movs	r2, #0
 8005318:	f7fa ffb6 	bl	8000288 <__aeabi_dsub>
 800531c:	a354      	add	r3, pc, #336	; (adr r3, 8005470 <__ieee754_pow+0x3c8>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	f7fb f967 	bl	80005f8 <__aeabi_dmul>
 800532a:	a353      	add	r3, pc, #332	; (adr r3, 8005478 <__ieee754_pow+0x3d0>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	4606      	mov	r6, r0
 8005332:	460f      	mov	r7, r1
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fb f95e 	bl	80005f8 <__aeabi_dmul>
 800533c:	4b57      	ldr	r3, [pc, #348]	; (800549c <__ieee754_pow+0x3f4>)
 800533e:	4682      	mov	sl, r0
 8005340:	468b      	mov	fp, r1
 8005342:	2200      	movs	r2, #0
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fb f956 	bl	80005f8 <__aeabi_dmul>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	a14b      	add	r1, pc, #300	; (adr r1, 8005480 <__ieee754_pow+0x3d8>)
 8005352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005356:	f7fa ff97 	bl	8000288 <__aeabi_dsub>
 800535a:	4622      	mov	r2, r4
 800535c:	462b      	mov	r3, r5
 800535e:	f7fb f94b 	bl	80005f8 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	2000      	movs	r0, #0
 8005368:	494d      	ldr	r1, [pc, #308]	; (80054a0 <__ieee754_pow+0x3f8>)
 800536a:	f7fa ff8d 	bl	8000288 <__aeabi_dsub>
 800536e:	4622      	mov	r2, r4
 8005370:	4680      	mov	r8, r0
 8005372:	4689      	mov	r9, r1
 8005374:	462b      	mov	r3, r5
 8005376:	4620      	mov	r0, r4
 8005378:	4629      	mov	r1, r5
 800537a:	f7fb f93d 	bl	80005f8 <__aeabi_dmul>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f7fb f937 	bl	80005f8 <__aeabi_dmul>
 800538a:	a33f      	add	r3, pc, #252	; (adr r3, 8005488 <__ieee754_pow+0x3e0>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fb f932 	bl	80005f8 <__aeabi_dmul>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4650      	mov	r0, sl
 800539a:	4659      	mov	r1, fp
 800539c:	f7fa ff74 	bl	8000288 <__aeabi_dsub>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4680      	mov	r8, r0
 80053a6:	4689      	mov	r9, r1
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fa ff6e 	bl	800028c <__adddf3>
 80053b0:	2000      	movs	r0, #0
 80053b2:	4632      	mov	r2, r6
 80053b4:	463b      	mov	r3, r7
 80053b6:	4604      	mov	r4, r0
 80053b8:	460d      	mov	r5, r1
 80053ba:	f7fa ff65 	bl	8000288 <__aeabi_dsub>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa ff5f 	bl	8000288 <__aeabi_dsub>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	9a06      	ldr	r2, [sp, #24]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	4682      	mov	sl, r0
 80053d4:	468b      	mov	fp, r1
 80053d6:	f040 81e7 	bne.w	80057a8 <__ieee754_pow+0x700>
 80053da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005490 <__ieee754_pow+0x3e8>
 80053de:	eeb0 8a47 	vmov.f32	s16, s14
 80053e2:	eef0 8a67 	vmov.f32	s17, s15
 80053e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80053ea:	2600      	movs	r6, #0
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f4:	f7fa ff48 	bl	8000288 <__aeabi_dsub>
 80053f8:	4622      	mov	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	f7fb f8fc 	bl	80005f8 <__aeabi_dmul>
 8005400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005404:	4680      	mov	r8, r0
 8005406:	4689      	mov	r9, r1
 8005408:	4650      	mov	r0, sl
 800540a:	4659      	mov	r1, fp
 800540c:	f7fb f8f4 	bl	80005f8 <__aeabi_dmul>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fa ff38 	bl	800028c <__adddf3>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	4680      	mov	r8, r0
 8005422:	4689      	mov	r9, r1
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	460b      	mov	r3, r1
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4602      	mov	r2, r0
 8005434:	4649      	mov	r1, r9
 8005436:	4640      	mov	r0, r8
 8005438:	f7fa ff28 	bl	800028c <__adddf3>
 800543c:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <__ieee754_pow+0x3fc>)
 800543e:	4299      	cmp	r1, r3
 8005440:	ec45 4b19 	vmov	d9, r4, r5
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	468b      	mov	fp, r1
 800544a:	f340 82f0 	ble.w	8005a2e <__ieee754_pow+0x986>
 800544e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005452:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005456:	4303      	orrs	r3, r0
 8005458:	f000 81e4 	beq.w	8005824 <__ieee754_pow+0x77c>
 800545c:	ec51 0b18 	vmov	r0, r1, d8
 8005460:	2200      	movs	r2, #0
 8005462:	2300      	movs	r3, #0
 8005464:	f7fb fb3a 	bl	8000adc <__aeabi_dcmplt>
 8005468:	3800      	subs	r0, #0
 800546a:	bf18      	it	ne
 800546c:	2001      	movne	r0, #1
 800546e:	e72b      	b.n	80052c8 <__ieee754_pow+0x220>
 8005470:	60000000 	.word	0x60000000
 8005474:	3ff71547 	.word	0x3ff71547
 8005478:	f85ddf44 	.word	0xf85ddf44
 800547c:	3e54ae0b 	.word	0x3e54ae0b
 8005480:	55555555 	.word	0x55555555
 8005484:	3fd55555 	.word	0x3fd55555
 8005488:	652b82fe 	.word	0x652b82fe
 800548c:	3ff71547 	.word	0x3ff71547
 8005490:	00000000 	.word	0x00000000
 8005494:	bff00000 	.word	0xbff00000
 8005498:	3ff00000 	.word	0x3ff00000
 800549c:	3fd00000 	.word	0x3fd00000
 80054a0:	3fe00000 	.word	0x3fe00000
 80054a4:	408fffff 	.word	0x408fffff
 80054a8:	4bd5      	ldr	r3, [pc, #852]	; (8005800 <__ieee754_pow+0x758>)
 80054aa:	402b      	ands	r3, r5
 80054ac:	2200      	movs	r2, #0
 80054ae:	b92b      	cbnz	r3, 80054bc <__ieee754_pow+0x414>
 80054b0:	4bd4      	ldr	r3, [pc, #848]	; (8005804 <__ieee754_pow+0x75c>)
 80054b2:	f7fb f8a1 	bl	80005f8 <__aeabi_dmul>
 80054b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80054ba:	460c      	mov	r4, r1
 80054bc:	1523      	asrs	r3, r4, #20
 80054be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054c2:	4413      	add	r3, r2
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4bd0      	ldr	r3, [pc, #832]	; (8005808 <__ieee754_pow+0x760>)
 80054c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80054cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80054d0:	429c      	cmp	r4, r3
 80054d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80054d6:	dd08      	ble.n	80054ea <__ieee754_pow+0x442>
 80054d8:	4bcc      	ldr	r3, [pc, #816]	; (800580c <__ieee754_pow+0x764>)
 80054da:	429c      	cmp	r4, r3
 80054dc:	f340 8162 	ble.w	80057a4 <__ieee754_pow+0x6fc>
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	3301      	adds	r3, #1
 80054e4:	9305      	str	r3, [sp, #20]
 80054e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80054ea:	2400      	movs	r4, #0
 80054ec:	00e3      	lsls	r3, r4, #3
 80054ee:	9307      	str	r3, [sp, #28]
 80054f0:	4bc7      	ldr	r3, [pc, #796]	; (8005810 <__ieee754_pow+0x768>)
 80054f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054f6:	ed93 7b00 	vldr	d7, [r3]
 80054fa:	4629      	mov	r1, r5
 80054fc:	ec53 2b17 	vmov	r2, r3, d7
 8005500:	eeb0 9a47 	vmov.f32	s18, s14
 8005504:	eef0 9a67 	vmov.f32	s19, s15
 8005508:	4682      	mov	sl, r0
 800550a:	f7fa febd 	bl	8000288 <__aeabi_dsub>
 800550e:	4652      	mov	r2, sl
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	462b      	mov	r3, r5
 8005516:	ec51 0b19 	vmov	r0, r1, d9
 800551a:	f7fa feb7 	bl	800028c <__adddf3>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	2000      	movs	r0, #0
 8005524:	49bb      	ldr	r1, [pc, #748]	; (8005814 <__ieee754_pow+0x76c>)
 8005526:	f7fb f991 	bl	800084c <__aeabi_ddiv>
 800552a:	ec41 0b1a 	vmov	d10, r0, r1
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fb f85f 	bl	80005f8 <__aeabi_dmul>
 800553a:	2300      	movs	r3, #0
 800553c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005546:	46ab      	mov	fp, r5
 8005548:	106d      	asrs	r5, r5, #1
 800554a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800554e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005552:	ec41 0b18 	vmov	d8, r0, r1
 8005556:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800555a:	2200      	movs	r2, #0
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	4614      	mov	r4, r2
 8005562:	461d      	mov	r5, r3
 8005564:	f7fb f848 	bl	80005f8 <__aeabi_dmul>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4630      	mov	r0, r6
 800556e:	4639      	mov	r1, r7
 8005570:	f7fa fe8a 	bl	8000288 <__aeabi_dsub>
 8005574:	ec53 2b19 	vmov	r2, r3, d9
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	4620      	mov	r0, r4
 800557e:	4629      	mov	r1, r5
 8005580:	f7fa fe82 	bl	8000288 <__aeabi_dsub>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	f7fa fe7c 	bl	8000288 <__aeabi_dsub>
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	f7fb f830 	bl	80005f8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4630      	mov	r0, r6
 800559e:	4639      	mov	r1, r7
 80055a0:	f7fa fe72 	bl	8000288 <__aeabi_dsub>
 80055a4:	ec53 2b1a 	vmov	r2, r3, d10
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	ec53 2b18 	vmov	r2, r3, d8
 80055b0:	ec41 0b19 	vmov	d9, r0, r1
 80055b4:	ec51 0b18 	vmov	r0, r1, d8
 80055b8:	f7fb f81e 	bl	80005f8 <__aeabi_dmul>
 80055bc:	a37c      	add	r3, pc, #496	; (adr r3, 80057b0 <__ieee754_pow+0x708>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	f7fb f817 	bl	80005f8 <__aeabi_dmul>
 80055ca:	a37b      	add	r3, pc, #492	; (adr r3, 80057b8 <__ieee754_pow+0x710>)
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe5c 	bl	800028c <__adddf3>
 80055d4:	4622      	mov	r2, r4
 80055d6:	462b      	mov	r3, r5
 80055d8:	f7fb f80e 	bl	80005f8 <__aeabi_dmul>
 80055dc:	a378      	add	r3, pc, #480	; (adr r3, 80057c0 <__ieee754_pow+0x718>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa fe53 	bl	800028c <__adddf3>
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	f7fb f805 	bl	80005f8 <__aeabi_dmul>
 80055ee:	a376      	add	r3, pc, #472	; (adr r3, 80057c8 <__ieee754_pow+0x720>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fe4a 	bl	800028c <__adddf3>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa fffc 	bl	80005f8 <__aeabi_dmul>
 8005600:	a373      	add	r3, pc, #460	; (adr r3, 80057d0 <__ieee754_pow+0x728>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fe41 	bl	800028c <__adddf3>
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f7fa fff3 	bl	80005f8 <__aeabi_dmul>
 8005612:	a371      	add	r3, pc, #452	; (adr r3, 80057d8 <__ieee754_pow+0x730>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fe38 	bl	800028c <__adddf3>
 800561c:	4622      	mov	r2, r4
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	462b      	mov	r3, r5
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4630      	mov	r0, r6
 8005632:	4639      	mov	r1, r7
 8005634:	f7fa ffe0 	bl	80005f8 <__aeabi_dmul>
 8005638:	4642      	mov	r2, r8
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	464b      	mov	r3, r9
 8005640:	ec51 0b18 	vmov	r0, r1, d8
 8005644:	f7fa fe22 	bl	800028c <__adddf3>
 8005648:	ec53 2b19 	vmov	r2, r3, d9
 800564c:	f7fa ffd4 	bl	80005f8 <__aeabi_dmul>
 8005650:	4622      	mov	r2, r4
 8005652:	462b      	mov	r3, r5
 8005654:	f7fa fe1a 	bl	800028c <__adddf3>
 8005658:	4642      	mov	r2, r8
 800565a:	4682      	mov	sl, r0
 800565c:	468b      	mov	fp, r1
 800565e:	464b      	mov	r3, r9
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	f7fa ffc8 	bl	80005f8 <__aeabi_dmul>
 8005668:	4b6b      	ldr	r3, [pc, #428]	; (8005818 <__ieee754_pow+0x770>)
 800566a:	2200      	movs	r2, #0
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	f7fa fe0c 	bl	800028c <__adddf3>
 8005674:	4652      	mov	r2, sl
 8005676:	465b      	mov	r3, fp
 8005678:	f7fa fe08 	bl	800028c <__adddf3>
 800567c:	2000      	movs	r0, #0
 800567e:	4604      	mov	r4, r0
 8005680:	460d      	mov	r5, r1
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4640      	mov	r0, r8
 8005688:	4649      	mov	r1, r9
 800568a:	f7fa ffb5 	bl	80005f8 <__aeabi_dmul>
 800568e:	4b62      	ldr	r3, [pc, #392]	; (8005818 <__ieee754_pow+0x770>)
 8005690:	4680      	mov	r8, r0
 8005692:	4689      	mov	r9, r1
 8005694:	2200      	movs	r2, #0
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	f7fa fdf5 	bl	8000288 <__aeabi_dsub>
 800569e:	4632      	mov	r2, r6
 80056a0:	463b      	mov	r3, r7
 80056a2:	f7fa fdf1 	bl	8000288 <__aeabi_dsub>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4650      	mov	r0, sl
 80056ac:	4659      	mov	r1, fp
 80056ae:	f7fa fdeb 	bl	8000288 <__aeabi_dsub>
 80056b2:	ec53 2b18 	vmov	r2, r3, d8
 80056b6:	f7fa ff9f 	bl	80005f8 <__aeabi_dmul>
 80056ba:	4622      	mov	r2, r4
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	462b      	mov	r3, r5
 80056c2:	ec51 0b19 	vmov	r0, r1, d9
 80056c6:	f7fa ff97 	bl	80005f8 <__aeabi_dmul>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4630      	mov	r0, r6
 80056d0:	4639      	mov	r1, r7
 80056d2:	f7fa fddb 	bl	800028c <__adddf3>
 80056d6:	4606      	mov	r6, r0
 80056d8:	460f      	mov	r7, r1
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4640      	mov	r0, r8
 80056e0:	4649      	mov	r1, r9
 80056e2:	f7fa fdd3 	bl	800028c <__adddf3>
 80056e6:	a33e      	add	r3, pc, #248	; (adr r3, 80057e0 <__ieee754_pow+0x738>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	2000      	movs	r0, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
 80056f2:	f7fa ff81 	bl	80005f8 <__aeabi_dmul>
 80056f6:	4642      	mov	r2, r8
 80056f8:	ec41 0b18 	vmov	d8, r0, r1
 80056fc:	464b      	mov	r3, r9
 80056fe:	4620      	mov	r0, r4
 8005700:	4629      	mov	r1, r5
 8005702:	f7fa fdc1 	bl	8000288 <__aeabi_dsub>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fa fdbb 	bl	8000288 <__aeabi_dsub>
 8005712:	a335      	add	r3, pc, #212	; (adr r3, 80057e8 <__ieee754_pow+0x740>)
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f7fa ff6e 	bl	80005f8 <__aeabi_dmul>
 800571c:	a334      	add	r3, pc, #208	; (adr r3, 80057f0 <__ieee754_pow+0x748>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	4606      	mov	r6, r0
 8005724:	460f      	mov	r7, r1
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fa ff65 	bl	80005f8 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4630      	mov	r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	f7fa fda9 	bl	800028c <__adddf3>
 800573a:	9a07      	ldr	r2, [sp, #28]
 800573c:	4b37      	ldr	r3, [pc, #220]	; (800581c <__ieee754_pow+0x774>)
 800573e:	4413      	add	r3, r2
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fda2 	bl	800028c <__adddf3>
 8005748:	4682      	mov	sl, r0
 800574a:	9805      	ldr	r0, [sp, #20]
 800574c:	468b      	mov	fp, r1
 800574e:	f7fa fee9 	bl	8000524 <__aeabi_i2d>
 8005752:	9a07      	ldr	r2, [sp, #28]
 8005754:	4b32      	ldr	r3, [pc, #200]	; (8005820 <__ieee754_pow+0x778>)
 8005756:	4413      	add	r3, r2
 8005758:	e9d3 8900 	ldrd	r8, r9, [r3]
 800575c:	4606      	mov	r6, r0
 800575e:	460f      	mov	r7, r1
 8005760:	4652      	mov	r2, sl
 8005762:	465b      	mov	r3, fp
 8005764:	ec51 0b18 	vmov	r0, r1, d8
 8005768:	f7fa fd90 	bl	800028c <__adddf3>
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	f7fa fd8c 	bl	800028c <__adddf3>
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	f7fa fd88 	bl	800028c <__adddf3>
 800577c:	2000      	movs	r0, #0
 800577e:	4632      	mov	r2, r6
 8005780:	463b      	mov	r3, r7
 8005782:	4604      	mov	r4, r0
 8005784:	460d      	mov	r5, r1
 8005786:	f7fa fd7f 	bl	8000288 <__aeabi_dsub>
 800578a:	4642      	mov	r2, r8
 800578c:	464b      	mov	r3, r9
 800578e:	f7fa fd7b 	bl	8000288 <__aeabi_dsub>
 8005792:	ec53 2b18 	vmov	r2, r3, d8
 8005796:	f7fa fd77 	bl	8000288 <__aeabi_dsub>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4650      	mov	r0, sl
 80057a0:	4659      	mov	r1, fp
 80057a2:	e610      	b.n	80053c6 <__ieee754_pow+0x31e>
 80057a4:	2401      	movs	r4, #1
 80057a6:	e6a1      	b.n	80054ec <__ieee754_pow+0x444>
 80057a8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80057f8 <__ieee754_pow+0x750>
 80057ac:	e617      	b.n	80053de <__ieee754_pow+0x336>
 80057ae:	bf00      	nop
 80057b0:	4a454eef 	.word	0x4a454eef
 80057b4:	3fca7e28 	.word	0x3fca7e28
 80057b8:	93c9db65 	.word	0x93c9db65
 80057bc:	3fcd864a 	.word	0x3fcd864a
 80057c0:	a91d4101 	.word	0xa91d4101
 80057c4:	3fd17460 	.word	0x3fd17460
 80057c8:	518f264d 	.word	0x518f264d
 80057cc:	3fd55555 	.word	0x3fd55555
 80057d0:	db6fabff 	.word	0xdb6fabff
 80057d4:	3fdb6db6 	.word	0x3fdb6db6
 80057d8:	33333303 	.word	0x33333303
 80057dc:	3fe33333 	.word	0x3fe33333
 80057e0:	e0000000 	.word	0xe0000000
 80057e4:	3feec709 	.word	0x3feec709
 80057e8:	dc3a03fd 	.word	0xdc3a03fd
 80057ec:	3feec709 	.word	0x3feec709
 80057f0:	145b01f5 	.word	0x145b01f5
 80057f4:	be3e2fe0 	.word	0xbe3e2fe0
 80057f8:	00000000 	.word	0x00000000
 80057fc:	3ff00000 	.word	0x3ff00000
 8005800:	7ff00000 	.word	0x7ff00000
 8005804:	43400000 	.word	0x43400000
 8005808:	0003988e 	.word	0x0003988e
 800580c:	000bb679 	.word	0x000bb679
 8005810:	08005e90 	.word	0x08005e90
 8005814:	3ff00000 	.word	0x3ff00000
 8005818:	40080000 	.word	0x40080000
 800581c:	08005eb0 	.word	0x08005eb0
 8005820:	08005ea0 	.word	0x08005ea0
 8005824:	a3b3      	add	r3, pc, #716	; (adr r3, 8005af4 <__ieee754_pow+0xa4c>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	4640      	mov	r0, r8
 800582c:	4649      	mov	r1, r9
 800582e:	f7fa fd2d 	bl	800028c <__adddf3>
 8005832:	4622      	mov	r2, r4
 8005834:	ec41 0b1a 	vmov	d10, r0, r1
 8005838:	462b      	mov	r3, r5
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fa fd23 	bl	8000288 <__aeabi_dsub>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	ec51 0b1a 	vmov	r0, r1, d10
 800584a:	f7fb f965 	bl	8000b18 <__aeabi_dcmpgt>
 800584e:	2800      	cmp	r0, #0
 8005850:	f47f ae04 	bne.w	800545c <__ieee754_pow+0x3b4>
 8005854:	4aa2      	ldr	r2, [pc, #648]	; (8005ae0 <__ieee754_pow+0xa38>)
 8005856:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800585a:	4293      	cmp	r3, r2
 800585c:	f340 8107 	ble.w	8005a6e <__ieee754_pow+0x9c6>
 8005860:	151b      	asrs	r3, r3, #20
 8005862:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005866:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800586a:	fa4a fa03 	asr.w	sl, sl, r3
 800586e:	44da      	add	sl, fp
 8005870:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005874:	489b      	ldr	r0, [pc, #620]	; (8005ae4 <__ieee754_pow+0xa3c>)
 8005876:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800587a:	4108      	asrs	r0, r1
 800587c:	ea00 030a 	and.w	r3, r0, sl
 8005880:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005884:	f1c1 0114 	rsb	r1, r1, #20
 8005888:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800588c:	fa4a fa01 	asr.w	sl, sl, r1
 8005890:	f1bb 0f00 	cmp.w	fp, #0
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	4620      	mov	r0, r4
 800589a:	4629      	mov	r1, r5
 800589c:	bfb8      	it	lt
 800589e:	f1ca 0a00 	rsblt	sl, sl, #0
 80058a2:	f7fa fcf1 	bl	8000288 <__aeabi_dsub>
 80058a6:	ec41 0b19 	vmov	d9, r0, r1
 80058aa:	4642      	mov	r2, r8
 80058ac:	464b      	mov	r3, r9
 80058ae:	ec51 0b19 	vmov	r0, r1, d9
 80058b2:	f7fa fceb 	bl	800028c <__adddf3>
 80058b6:	a37a      	add	r3, pc, #488	; (adr r3, 8005aa0 <__ieee754_pow+0x9f8>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	2000      	movs	r0, #0
 80058be:	4604      	mov	r4, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	f7fa fe99 	bl	80005f8 <__aeabi_dmul>
 80058c6:	ec53 2b19 	vmov	r2, r3, d9
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fcd9 	bl	8000288 <__aeabi_dsub>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fcd3 	bl	8000288 <__aeabi_dsub>
 80058e2:	a371      	add	r3, pc, #452	; (adr r3, 8005aa8 <__ieee754_pow+0xa00>)
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f7fa fe86 	bl	80005f8 <__aeabi_dmul>
 80058ec:	a370      	add	r3, pc, #448	; (adr r3, 8005ab0 <__ieee754_pow+0xa08>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	4680      	mov	r8, r0
 80058f4:	4689      	mov	r9, r1
 80058f6:	4620      	mov	r0, r4
 80058f8:	4629      	mov	r1, r5
 80058fa:	f7fa fe7d 	bl	80005f8 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fa fcc1 	bl	800028c <__adddf3>
 800590a:	4604      	mov	r4, r0
 800590c:	460d      	mov	r5, r1
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4630      	mov	r0, r6
 8005914:	4639      	mov	r1, r7
 8005916:	f7fa fcb9 	bl	800028c <__adddf3>
 800591a:	4632      	mov	r2, r6
 800591c:	463b      	mov	r3, r7
 800591e:	4680      	mov	r8, r0
 8005920:	4689      	mov	r9, r1
 8005922:	f7fa fcb1 	bl	8000288 <__aeabi_dsub>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	4642      	mov	r2, r8
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	464b      	mov	r3, r9
 800593a:	4640      	mov	r0, r8
 800593c:	4649      	mov	r1, r9
 800593e:	f7fa fe5b 	bl	80005f8 <__aeabi_dmul>
 8005942:	a35d      	add	r3, pc, #372	; (adr r3, 8005ab8 <__ieee754_pow+0xa10>)
 8005944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005948:	4604      	mov	r4, r0
 800594a:	460d      	mov	r5, r1
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	a35b      	add	r3, pc, #364	; (adr r3, 8005ac0 <__ieee754_pow+0xa18>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	f7fa fc97 	bl	8000288 <__aeabi_dsub>
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	f7fa fe4b 	bl	80005f8 <__aeabi_dmul>
 8005962:	a359      	add	r3, pc, #356	; (adr r3, 8005ac8 <__ieee754_pow+0xa20>)
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f7fa fc90 	bl	800028c <__adddf3>
 800596c:	4622      	mov	r2, r4
 800596e:	462b      	mov	r3, r5
 8005970:	f7fa fe42 	bl	80005f8 <__aeabi_dmul>
 8005974:	a356      	add	r3, pc, #344	; (adr r3, 8005ad0 <__ieee754_pow+0xa28>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fc85 	bl	8000288 <__aeabi_dsub>
 800597e:	4622      	mov	r2, r4
 8005980:	462b      	mov	r3, r5
 8005982:	f7fa fe39 	bl	80005f8 <__aeabi_dmul>
 8005986:	a354      	add	r3, pc, #336	; (adr r3, 8005ad8 <__ieee754_pow+0xa30>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc7e 	bl	800028c <__adddf3>
 8005990:	4622      	mov	r2, r4
 8005992:	462b      	mov	r3, r5
 8005994:	f7fa fe30 	bl	80005f8 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4640      	mov	r0, r8
 800599e:	4649      	mov	r1, r9
 80059a0:	f7fa fc72 	bl	8000288 <__aeabi_dsub>
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4640      	mov	r0, r8
 80059ae:	4649      	mov	r1, r9
 80059b0:	f7fa fe22 	bl	80005f8 <__aeabi_dmul>
 80059b4:	2200      	movs	r2, #0
 80059b6:	ec41 0b19 	vmov	d9, r0, r1
 80059ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059be:	4620      	mov	r0, r4
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fc61 	bl	8000288 <__aeabi_dsub>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	ec51 0b19 	vmov	r0, r1, d9
 80059ce:	f7fa ff3d 	bl	800084c <__aeabi_ddiv>
 80059d2:	4632      	mov	r2, r6
 80059d4:	4604      	mov	r4, r0
 80059d6:	460d      	mov	r5, r1
 80059d8:	463b      	mov	r3, r7
 80059da:	4640      	mov	r0, r8
 80059dc:	4649      	mov	r1, r9
 80059de:	f7fa fe0b 	bl	80005f8 <__aeabi_dmul>
 80059e2:	4632      	mov	r2, r6
 80059e4:	463b      	mov	r3, r7
 80059e6:	f7fa fc51 	bl	800028c <__adddf3>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4620      	mov	r0, r4
 80059f0:	4629      	mov	r1, r5
 80059f2:	f7fa fc49 	bl	8000288 <__aeabi_dsub>
 80059f6:	4642      	mov	r2, r8
 80059f8:	464b      	mov	r3, r9
 80059fa:	f7fa fc45 	bl	8000288 <__aeabi_dsub>
 80059fe:	460b      	mov	r3, r1
 8005a00:	4602      	mov	r2, r0
 8005a02:	4939      	ldr	r1, [pc, #228]	; (8005ae8 <__ieee754_pow+0xa40>)
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fa fc3f 	bl	8000288 <__aeabi_dsub>
 8005a0a:	ec41 0b10 	vmov	d0, r0, r1
 8005a0e:	ee10 3a90 	vmov	r3, s1
 8005a12:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1a:	da2b      	bge.n	8005a74 <__ieee754_pow+0x9cc>
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	f000 f877 	bl	8005b10 <scalbn>
 8005a22:	ec51 0b10 	vmov	r0, r1, d0
 8005a26:	ec53 2b18 	vmov	r2, r3, d8
 8005a2a:	f7ff bbee 	b.w	800520a <__ieee754_pow+0x162>
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <__ieee754_pow+0xa44>)
 8005a30:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005a34:	429e      	cmp	r6, r3
 8005a36:	f77f af0d 	ble.w	8005854 <__ieee754_pow+0x7ac>
 8005a3a:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <__ieee754_pow+0xa48>)
 8005a3c:	440b      	add	r3, r1
 8005a3e:	4303      	orrs	r3, r0
 8005a40:	d009      	beq.n	8005a56 <__ieee754_pow+0x9ae>
 8005a42:	ec51 0b18 	vmov	r0, r1, d8
 8005a46:	2200      	movs	r2, #0
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f7fb f847 	bl	8000adc <__aeabi_dcmplt>
 8005a4e:	3800      	subs	r0, #0
 8005a50:	bf18      	it	ne
 8005a52:	2001      	movne	r0, #1
 8005a54:	e448      	b.n	80052e8 <__ieee754_pow+0x240>
 8005a56:	4622      	mov	r2, r4
 8005a58:	462b      	mov	r3, r5
 8005a5a:	f7fa fc15 	bl	8000288 <__aeabi_dsub>
 8005a5e:	4642      	mov	r2, r8
 8005a60:	464b      	mov	r3, r9
 8005a62:	f7fb f84f 	bl	8000b04 <__aeabi_dcmpge>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f43f aef4 	beq.w	8005854 <__ieee754_pow+0x7ac>
 8005a6c:	e7e9      	b.n	8005a42 <__ieee754_pow+0x99a>
 8005a6e:	f04f 0a00 	mov.w	sl, #0
 8005a72:	e71a      	b.n	80058aa <__ieee754_pow+0x802>
 8005a74:	ec51 0b10 	vmov	r0, r1, d0
 8005a78:	4619      	mov	r1, r3
 8005a7a:	e7d4      	b.n	8005a26 <__ieee754_pow+0x97e>
 8005a7c:	491a      	ldr	r1, [pc, #104]	; (8005ae8 <__ieee754_pow+0xa40>)
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7ff bb31 	b.w	80050e6 <__ieee754_pow+0x3e>
 8005a84:	2000      	movs	r0, #0
 8005a86:	2100      	movs	r1, #0
 8005a88:	f7ff bb2d 	b.w	80050e6 <__ieee754_pow+0x3e>
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7ff bb29 	b.w	80050e6 <__ieee754_pow+0x3e>
 8005a94:	9204      	str	r2, [sp, #16]
 8005a96:	f7ff bb7b 	b.w	8005190 <__ieee754_pow+0xe8>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f7ff bb65 	b.w	800516a <__ieee754_pow+0xc2>
 8005aa0:	00000000 	.word	0x00000000
 8005aa4:	3fe62e43 	.word	0x3fe62e43
 8005aa8:	fefa39ef 	.word	0xfefa39ef
 8005aac:	3fe62e42 	.word	0x3fe62e42
 8005ab0:	0ca86c39 	.word	0x0ca86c39
 8005ab4:	be205c61 	.word	0xbe205c61
 8005ab8:	72bea4d0 	.word	0x72bea4d0
 8005abc:	3e663769 	.word	0x3e663769
 8005ac0:	c5d26bf1 	.word	0xc5d26bf1
 8005ac4:	3ebbbd41 	.word	0x3ebbbd41
 8005ac8:	af25de2c 	.word	0xaf25de2c
 8005acc:	3f11566a 	.word	0x3f11566a
 8005ad0:	16bebd93 	.word	0x16bebd93
 8005ad4:	3f66c16c 	.word	0x3f66c16c
 8005ad8:	5555553e 	.word	0x5555553e
 8005adc:	3fc55555 	.word	0x3fc55555
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	fff00000 	.word	0xfff00000
 8005ae8:	3ff00000 	.word	0x3ff00000
 8005aec:	4090cbff 	.word	0x4090cbff
 8005af0:	3f6f3400 	.word	0x3f6f3400
 8005af4:	652b82fe 	.word	0x652b82fe
 8005af8:	3c971547 	.word	0x3c971547

08005afc <fabs>:
 8005afc:	ec51 0b10 	vmov	r0, r1, d0
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b08:	ec43 2b10 	vmov	d0, r2, r3
 8005b0c:	4770      	bx	lr
	...

08005b10 <scalbn>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	ec55 4b10 	vmov	r4, r5, d0
 8005b16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005b1a:	4606      	mov	r6, r0
 8005b1c:	462b      	mov	r3, r5
 8005b1e:	b999      	cbnz	r1, 8005b48 <scalbn+0x38>
 8005b20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b24:	4323      	orrs	r3, r4
 8005b26:	d03f      	beq.n	8005ba8 <scalbn+0x98>
 8005b28:	4b35      	ldr	r3, [pc, #212]	; (8005c00 <scalbn+0xf0>)
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	ee10 0a10 	vmov	r0, s0
 8005b30:	2200      	movs	r2, #0
 8005b32:	f7fa fd61 	bl	80005f8 <__aeabi_dmul>
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <scalbn+0xf4>)
 8005b38:	429e      	cmp	r6, r3
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	da10      	bge.n	8005b62 <scalbn+0x52>
 8005b40:	a327      	add	r3, pc, #156	; (adr r3, 8005be0 <scalbn+0xd0>)
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	e01f      	b.n	8005b88 <scalbn+0x78>
 8005b48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b4c:	4291      	cmp	r1, r2
 8005b4e:	d10c      	bne.n	8005b6a <scalbn+0x5a>
 8005b50:	ee10 2a10 	vmov	r2, s0
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fa fb98 	bl	800028c <__adddf3>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	e022      	b.n	8005ba8 <scalbn+0x98>
 8005b62:	460b      	mov	r3, r1
 8005b64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b68:	3936      	subs	r1, #54	; 0x36
 8005b6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005b6e:	4296      	cmp	r6, r2
 8005b70:	dd0d      	ble.n	8005b8e <scalbn+0x7e>
 8005b72:	2d00      	cmp	r5, #0
 8005b74:	a11c      	add	r1, pc, #112	; (adr r1, 8005be8 <scalbn+0xd8>)
 8005b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b7a:	da02      	bge.n	8005b82 <scalbn+0x72>
 8005b7c:	a11c      	add	r1, pc, #112	; (adr r1, 8005bf0 <scalbn+0xe0>)
 8005b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b82:	a319      	add	r3, pc, #100	; (adr r3, 8005be8 <scalbn+0xd8>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f7fa fd36 	bl	80005f8 <__aeabi_dmul>
 8005b8c:	e7e6      	b.n	8005b5c <scalbn+0x4c>
 8005b8e:	1872      	adds	r2, r6, r1
 8005b90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005b94:	428a      	cmp	r2, r1
 8005b96:	dcec      	bgt.n	8005b72 <scalbn+0x62>
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	dd08      	ble.n	8005bae <scalbn+0x9e>
 8005b9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ba0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ba4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ba8:	ec45 4b10 	vmov	d0, r4, r5
 8005bac:	bd70      	pop	{r4, r5, r6, pc}
 8005bae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005bb2:	da08      	bge.n	8005bc6 <scalbn+0xb6>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	a10a      	add	r1, pc, #40	; (adr r1, 8005be0 <scalbn+0xd0>)
 8005bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bbc:	dac0      	bge.n	8005b40 <scalbn+0x30>
 8005bbe:	a10e      	add	r1, pc, #56	; (adr r1, 8005bf8 <scalbn+0xe8>)
 8005bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bc4:	e7bc      	b.n	8005b40 <scalbn+0x30>
 8005bc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005bca:	3236      	adds	r2, #54	; 0x36
 8005bcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <scalbn+0xf8>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	e7d5      	b.n	8005b88 <scalbn+0x78>
 8005bdc:	f3af 8000 	nop.w
 8005be0:	c2f8f359 	.word	0xc2f8f359
 8005be4:	01a56e1f 	.word	0x01a56e1f
 8005be8:	8800759c 	.word	0x8800759c
 8005bec:	7e37e43c 	.word	0x7e37e43c
 8005bf0:	8800759c 	.word	0x8800759c
 8005bf4:	fe37e43c 	.word	0xfe37e43c
 8005bf8:	c2f8f359 	.word	0xc2f8f359
 8005bfc:	81a56e1f 	.word	0x81a56e1f
 8005c00:	43500000 	.word	0x43500000
 8005c04:	ffff3cb0 	.word	0xffff3cb0
 8005c08:	3c900000 	.word	0x3c900000

08005c0c <with_errno>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
 8005c12:	4616      	mov	r6, r2
 8005c14:	f7fe fbf8 	bl	8004408 <__errno>
 8005c18:	4629      	mov	r1, r5
 8005c1a:	6006      	str	r6, [r0, #0]
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}

08005c20 <xflow>:
 8005c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c22:	4614      	mov	r4, r2
 8005c24:	461d      	mov	r5, r3
 8005c26:	b108      	cbz	r0, 8005c2c <xflow+0xc>
 8005c28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c2c:	e9cd 2300 	strd	r2, r3, [sp]
 8005c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fcde 	bl	80005f8 <__aeabi_dmul>
 8005c3c:	2222      	movs	r2, #34	; 0x22
 8005c3e:	b003      	add	sp, #12
 8005c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c44:	f7ff bfe2 	b.w	8005c0c <with_errno>

08005c48 <__math_uflow>:
 8005c48:	b508      	push	{r3, lr}
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c50:	f7ff ffe6 	bl	8005c20 <xflow>
 8005c54:	ec41 0b10 	vmov	d0, r0, r1
 8005c58:	bd08      	pop	{r3, pc}

08005c5a <__math_oflow>:
 8005c5a:	b508      	push	{r3, lr}
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005c62:	f7ff ffdd 	bl	8005c20 <xflow>
 8005c66:	ec41 0b10 	vmov	d0, r0, r1
 8005c6a:	bd08      	pop	{r3, pc}

08005c6c <__ieee754_sqrt>:
 8005c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	ec55 4b10 	vmov	r4, r5, d0
 8005c74:	4e67      	ldr	r6, [pc, #412]	; (8005e14 <__ieee754_sqrt+0x1a8>)
 8005c76:	43ae      	bics	r6, r5
 8005c78:	ee10 0a10 	vmov	r0, s0
 8005c7c:	ee10 2a10 	vmov	r2, s0
 8005c80:	4629      	mov	r1, r5
 8005c82:	462b      	mov	r3, r5
 8005c84:	d10d      	bne.n	8005ca2 <__ieee754_sqrt+0x36>
 8005c86:	f7fa fcb7 	bl	80005f8 <__aeabi_dmul>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa fafb 	bl	800028c <__adddf3>
 8005c96:	4604      	mov	r4, r0
 8005c98:	460d      	mov	r5, r1
 8005c9a:	ec45 4b10 	vmov	d0, r4, r5
 8005c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca2:	2d00      	cmp	r5, #0
 8005ca4:	dc0b      	bgt.n	8005cbe <__ieee754_sqrt+0x52>
 8005ca6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005caa:	4326      	orrs	r6, r4
 8005cac:	d0f5      	beq.n	8005c9a <__ieee754_sqrt+0x2e>
 8005cae:	b135      	cbz	r5, 8005cbe <__ieee754_sqrt+0x52>
 8005cb0:	f7fa faea 	bl	8000288 <__aeabi_dsub>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	f7fa fdc8 	bl	800084c <__aeabi_ddiv>
 8005cbc:	e7eb      	b.n	8005c96 <__ieee754_sqrt+0x2a>
 8005cbe:	1509      	asrs	r1, r1, #20
 8005cc0:	f000 808d 	beq.w	8005dde <__ieee754_sqrt+0x172>
 8005cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cc8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8005ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cd0:	07c9      	lsls	r1, r1, #31
 8005cd2:	bf5c      	itt	pl
 8005cd4:	005b      	lslpl	r3, r3, #1
 8005cd6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8005cda:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005cde:	bf58      	it	pl
 8005ce0:	0052      	lslpl	r2, r2, #1
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005ce8:	1076      	asrs	r6, r6, #1
 8005cea:	0052      	lsls	r2, r2, #1
 8005cec:	f04f 0e16 	mov.w	lr, #22
 8005cf0:	46ac      	mov	ip, r5
 8005cf2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cf6:	eb0c 0001 	add.w	r0, ip, r1
 8005cfa:	4298      	cmp	r0, r3
 8005cfc:	bfde      	ittt	le
 8005cfe:	1a1b      	suble	r3, r3, r0
 8005d00:	eb00 0c01 	addle.w	ip, r0, r1
 8005d04:	186d      	addle	r5, r5, r1
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	f1be 0e01 	subs.w	lr, lr, #1
 8005d0c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005d10:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005d14:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005d18:	d1ed      	bne.n	8005cf6 <__ieee754_sqrt+0x8a>
 8005d1a:	4674      	mov	r4, lr
 8005d1c:	2720      	movs	r7, #32
 8005d1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005d22:	4563      	cmp	r3, ip
 8005d24:	eb01 000e 	add.w	r0, r1, lr
 8005d28:	dc02      	bgt.n	8005d30 <__ieee754_sqrt+0xc4>
 8005d2a:	d113      	bne.n	8005d54 <__ieee754_sqrt+0xe8>
 8005d2c:	4290      	cmp	r0, r2
 8005d2e:	d811      	bhi.n	8005d54 <__ieee754_sqrt+0xe8>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	eb00 0e01 	add.w	lr, r0, r1
 8005d36:	da57      	bge.n	8005de8 <__ieee754_sqrt+0x17c>
 8005d38:	f1be 0f00 	cmp.w	lr, #0
 8005d3c:	db54      	blt.n	8005de8 <__ieee754_sqrt+0x17c>
 8005d3e:	f10c 0801 	add.w	r8, ip, #1
 8005d42:	eba3 030c 	sub.w	r3, r3, ip
 8005d46:	4290      	cmp	r0, r2
 8005d48:	bf88      	it	hi
 8005d4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005d4e:	1a12      	subs	r2, r2, r0
 8005d50:	440c      	add	r4, r1
 8005d52:	46c4      	mov	ip, r8
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	3f01      	subs	r7, #1
 8005d58:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8005d5c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005d60:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005d64:	d1dd      	bne.n	8005d22 <__ieee754_sqrt+0xb6>
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d01b      	beq.n	8005da2 <__ieee754_sqrt+0x136>
 8005d6a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005e18 <__ieee754_sqrt+0x1ac>
 8005d6e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8005e1c <__ieee754_sqrt+0x1b0>
 8005d72:	e9da 0100 	ldrd	r0, r1, [sl]
 8005d76:	e9db 2300 	ldrd	r2, r3, [fp]
 8005d7a:	f7fa fa85 	bl	8000288 <__aeabi_dsub>
 8005d7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4640      	mov	r0, r8
 8005d88:	4649      	mov	r1, r9
 8005d8a:	f7fa feb1 	bl	8000af0 <__aeabi_dcmple>
 8005d8e:	b140      	cbz	r0, 8005da2 <__ieee754_sqrt+0x136>
 8005d90:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005d94:	e9da 0100 	ldrd	r0, r1, [sl]
 8005d98:	e9db 2300 	ldrd	r2, r3, [fp]
 8005d9c:	d126      	bne.n	8005dec <__ieee754_sqrt+0x180>
 8005d9e:	3501      	adds	r5, #1
 8005da0:	463c      	mov	r4, r7
 8005da2:	106a      	asrs	r2, r5, #1
 8005da4:	0863      	lsrs	r3, r4, #1
 8005da6:	07e9      	lsls	r1, r5, #31
 8005da8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005dac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005db0:	bf48      	it	mi
 8005db2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8005dba:	461c      	mov	r4, r3
 8005dbc:	e76d      	b.n	8005c9a <__ieee754_sqrt+0x2e>
 8005dbe:	0ad3      	lsrs	r3, r2, #11
 8005dc0:	3815      	subs	r0, #21
 8005dc2:	0552      	lsls	r2, r2, #21
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0fa      	beq.n	8005dbe <__ieee754_sqrt+0x152>
 8005dc8:	02dc      	lsls	r4, r3, #11
 8005dca:	d50a      	bpl.n	8005de2 <__ieee754_sqrt+0x176>
 8005dcc:	f1c1 0420 	rsb	r4, r1, #32
 8005dd0:	fa22 f404 	lsr.w	r4, r2, r4
 8005dd4:	1e4d      	subs	r5, r1, #1
 8005dd6:	408a      	lsls	r2, r1
 8005dd8:	4323      	orrs	r3, r4
 8005dda:	1b41      	subs	r1, r0, r5
 8005ddc:	e772      	b.n	8005cc4 <__ieee754_sqrt+0x58>
 8005dde:	4608      	mov	r0, r1
 8005de0:	e7f0      	b.n	8005dc4 <__ieee754_sqrt+0x158>
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	3101      	adds	r1, #1
 8005de6:	e7ef      	b.n	8005dc8 <__ieee754_sqrt+0x15c>
 8005de8:	46e0      	mov	r8, ip
 8005dea:	e7aa      	b.n	8005d42 <__ieee754_sqrt+0xd6>
 8005dec:	f7fa fa4e 	bl	800028c <__adddf3>
 8005df0:	e9da 8900 	ldrd	r8, r9, [sl]
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4640      	mov	r0, r8
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	f7fa fe6e 	bl	8000adc <__aeabi_dcmplt>
 8005e00:	b120      	cbz	r0, 8005e0c <__ieee754_sqrt+0x1a0>
 8005e02:	1ca0      	adds	r0, r4, #2
 8005e04:	bf08      	it	eq
 8005e06:	3501      	addeq	r5, #1
 8005e08:	3402      	adds	r4, #2
 8005e0a:	e7ca      	b.n	8005da2 <__ieee754_sqrt+0x136>
 8005e0c:	3401      	adds	r4, #1
 8005e0e:	f024 0401 	bic.w	r4, r4, #1
 8005e12:	e7c6      	b.n	8005da2 <__ieee754_sqrt+0x136>
 8005e14:	7ff00000 	.word	0x7ff00000
 8005e18:	20000068 	.word	0x20000068
 8005e1c:	20000070 	.word	0x20000070

08005e20 <_init>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr

08005e2c <_fini>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr
