
TUBU_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd0  0800d5c0  0800d5c0  0001d5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e290  0800e290  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e290  0800e290  0001e290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e298  0800e298  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e298  0800e298  0001e298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e29c  0800e29c  0001e29c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e2a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020210  2**0
                  CONTENTS
 10 .bss          00000c94  20000210  20000210  00020210  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ea4  20000ea4  00020210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014194  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000338b  00000000  00000000  00034417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001018  00000000  00000000  000377a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c31  00000000  00000000  000387c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024de6  00000000  00000000  000393f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015569  00000000  00000000  0005e1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1895  00000000  00000000  00073740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005778  00000000  00000000  00144fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5a8 	.word	0x0800d5a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800d5a8 	.word	0x0800d5a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Get_size>:
 */

#include "ducati.h"

bool Get_size(ducati_typeDef *me, uint16_t size)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
	me->size = size;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	887a      	ldrh	r2, [r7, #2]
 8000f54:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	HAL_UARTEx_ReceiveToIdle_DMA(me->huart, (uint8_t *)me->buffer, LEVEL_BUFFER_SIZE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3308      	adds	r3, #8
 8000f60:	2263      	movs	r2, #99	; 0x63
 8000f62:	4619      	mov	r1, r3
 8000f64:	f006 fff7 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
	return true;
 8000f68:	2301      	movs	r3, #1
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <calculateCRC>:

uint16_t calculateCRC(const uint8_t *data, uint8_t length)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f84:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < length; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	e022      	b.n	8000fd2 <calculateCRC+0x5e>
	{
		crc ^= data[i];
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	8afb      	ldrh	r3, [r7, #22]
 8000f98:	4053      	eors	r3, r2
 8000f9a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e011      	b.n	8000fc6 <calculateCRC+0x52>
		{
			if (crc & 0x0001)
 8000fa2:	8afb      	ldrh	r3, [r7, #22]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <calculateCRC+0x46>
			{
				crc = (crc >> 1) ^ 0xA001;
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	085b      	lsrs	r3, r3, #1
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <calculateCRC+0x74>)
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	82fb      	strh	r3, [r7, #22]
 8000fb8:	e002      	b.n	8000fc0 <calculateCRC+0x4c>
			}
			else
			{
				crc = crc >> 1;
 8000fba:	8afb      	ldrh	r3, [r7, #22]
 8000fbc:	085b      	lsrs	r3, r3, #1
 8000fbe:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	ddea      	ble.n	8000fa2 <calculateCRC+0x2e>
	for (int i = 0; i < length; i++)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbd8      	blt.n	8000f8c <calculateCRC+0x18>
			}
		}
	}
	return crc;
 8000fda:	8afb      	ldrh	r3, [r7, #22]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	ffffa001 	.word	0xffffa001

08000fec <ducatiSendCommand>:
 * @return The function `RS485SendCommand` returns a boolean value - `true` if the received packet's
 * CRC matches the calculated CRC, and `false` if the timeout is reached or the CRC does not match.
 */
bool ducatiSendCommand(ducati_typeDef *me, uint8_t command[],
					   uint8_t size, uint32_t timeout)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	71fb      	strb	r3, [r7, #7]

	HAL_UARTEx_ReceiveToIdle_DMA(me->huart, me->buffer, LEVEL_BUFFER_SIZE);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	2263      	movs	r2, #99	; 0x63
 8001006:	4619      	mov	r1, r3
 8001008:	f006 ffa5 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(me->dma, DMA_IT_HT);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0208 	bic.w	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
	bool answer = false;
 8001020:	2300      	movs	r3, #0
 8001022:	77fb      	strb	r3, [r7, #31]

	memset(me->buffer, '\0', LEVEL_BUFFER_SIZE);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	2263      	movs	r2, #99	; 0x63
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f009 fac3 	bl	800a5b8 <memset>
	HAL_UART_Transmit(me->huart, command, size, timeout);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	b29a      	uxth	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	f006 fef8 	bl	8007e32 <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 8001042:	f004 f955 	bl	80052f0 <HAL_GetTick>
 8001046:	61b8      	str	r0, [r7, #24]
	while (answer == false)
 8001048:	e03a      	b.n	80010c0 <ducatiSendCommand+0xd4>
	{
		if (HAL_GetTick() - tickStart >= timeout)
 800104a:	f004 f951 	bl	80052f0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d801      	bhi.n	800105e <ducatiSendCommand+0x72>
		{

			return false;
 800105a:	2300      	movs	r3, #0
 800105c:	e037      	b.n	80010ce <ducatiSendCommand+0xe2>
		}
		else
		{
			if (me->DucatiFlag == true)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8001064:	2b00      	cmp	r3, #0
 8001066:	d027      	beq.n	80010b8 <ducatiSendCommand+0xcc>
			{
				uint16_t packetCRC = ((uint16_t)me->buffer[me->size - 1] << 8) | (me->buffer[me->size - 2]);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800106e:	3b01      	subs	r3, #1
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8001080:	3b02      	subs	r3, #2
 8001082:	68f9      	ldr	r1, [r7, #12]
 8001084:	440b      	add	r3, r1
 8001086:	7a1b      	ldrb	r3, [r3, #8]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	82fb      	strh	r3, [r7, #22]

				if (calculateCRC((uint8_t *)me->buffer, me->size - 2) == packetCRC)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f103 0208 	add.w	r2, r3, #8
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800109c:	b2db      	uxtb	r3, r3
 800109e:	3b02      	subs	r3, #2
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	4610      	mov	r0, r2
 80010a6:	f7ff ff65 	bl	8000f74 <calculateCRC>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	8afb      	ldrh	r3, [r7, #22]
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d101      	bne.n	80010b8 <ducatiSendCommand+0xcc>
				{

					return true;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e00a      	b.n	80010ce <ducatiSendCommand+0xe2>
				}
			}
		}
		me->DucatiFlag = false;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	while (answer == false)
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	f083 0301 	eor.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1be      	bne.n	800104a <ducatiSendCommand+0x5e>
	}
	return false;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <getVol>:

float getVol(ducati_typeDef *me)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00};
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <getVol+0x64>)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	2106      	movs	r1, #6
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff3d 	bl	8000f74 <calculateCRC>
 80010fa:	4603      	mov	r3, r0
 80010fc:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001104:	8afb      	ldrh	r3, [r7, #22]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800110e:	f107 010c 	add.w	r1, r7, #12
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	2208      	movs	r2, #8
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff67 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7adb      	ldrb	r3, [r3, #11]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	7b12      	ldrb	r2, [r2, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001132:	eeb0 0a67 	vmov.f32	s0, s15
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	0800d5c0 	.word	0x0800d5c0

08001140 <getCosF>:

float getCosF(ducati_typeDef *me)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x01, 0x61, 0x00, 0x02, 0x00, 0x00};
 8001148:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <getCosF+0x64>)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001152:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2106      	movs	r1, #6
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff09 	bl	8000f74 <calculateCRC>
 8001162:	4603      	mov	r3, r0
 8001164:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001166:	8afb      	ldrh	r3, [r7, #22]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 800116c:	8afb      	ldrh	r3, [r7, #22]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b29b      	uxth	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 8001176:	f107 010c 	add.w	r1, r7, #12
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	2208      	movs	r2, #8
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff33 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7adb      	ldrb	r3, [r3, #11]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	7b12      	ldrb	r2, [r2, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800d5c8 	.word	0x0800d5c8

080011a8 <getCurrent>:

float getCurrent(ducati_typeDef *me)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x11, 0x00, 0x02, 0x00, 0x00};
 80011b0:	4a16      	ldr	r2, [pc, #88]	; (800120c <getCurrent+0x64>)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2106      	movs	r1, #6
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fed5 	bl	8000f74 <calculateCRC>
 80011ca:	4603      	mov	r3, r0
 80011cc:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 80011d4:	8afb      	ldrh	r3, [r7, #22]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80011de:	f107 010c 	add.w	r1, r7, #12
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	2208      	movs	r2, #8
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff feff 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7adb      	ldrb	r3, [r3, #11]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	7b12      	ldrb	r2, [r2, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0800d5d0 	.word	0x0800d5d0

08001210 <getFrequency>:

float getFrequency(ducati_typeDef *me)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00};
 8001218:	4a16      	ldr	r2, [pc, #88]	; (8001274 <getFrequency+0x64>)
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	2106      	movs	r1, #6
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fea1 	bl	8000f74 <calculateCRC>
 8001232:	4603      	mov	r3, r0
 8001234:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001236:	8afb      	ldrh	r3, [r7, #22]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 800123c:	8afb      	ldrh	r3, [r7, #22]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	2208      	movs	r2, #8
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fecb 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7adb      	ldrb	r3, [r3, #11]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	7b12      	ldrb	r2, [r2, #12]
 8001260:	4313      	orrs	r3, r2
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	0800d5d8 	.word	0x0800d5d8

08001278 <getAvQ>:

uint16_t getAvQ(ducati_typeDef *me)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x53, 0x00, 0x02, 0x00, 0x00};
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <getAvQ+0x64>)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2106      	movs	r1, #6
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe6d 	bl	8000f74 <calculateCRC>
 800129a:	4603      	mov	r3, r0
 800129c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800129e:	8afb      	ldrh	r3, [r7, #22]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 80012a4:	8afb      	ldrh	r3, [r7, #22]
 80012a6:	0a1b      	lsrs	r3, r3, #8
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80012ae:	f107 010c 	add.w	r1, r7, #12
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	2208      	movs	r2, #8
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fe97 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7adb      	ldrb	r3, [r3, #11]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29b      	uxth	r3, r3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800d5e0 	.word	0x0800d5e0

080012e0 <getAvP>:

uint16_t getAvP(ducati_typeDef *me)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x23, 0x00, 0x02, 0x00, 0x00};
 80012e8:	4a16      	ldr	r2, [pc, #88]	; (8001344 <getAvP+0x64>)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	2106      	movs	r1, #6
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe39 	bl	8000f74 <calculateCRC>
 8001302:	4603      	mov	r3, r0
 8001304:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001306:	8afb      	ldrh	r3, [r7, #22]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 800130c:	8afb      	ldrh	r3, [r7, #22]
 800130e:	0a1b      	lsrs	r3, r3, #8
 8001310:	b29b      	uxth	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	2208      	movs	r2, #8
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff fe63 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7adb      	ldrb	r3, [r3, #11]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	b29b      	uxth	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	0800d5e8 	.word	0x0800d5e8

08001348 <getActivePower>:

float getActivePower(ducati_typeDef *me)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00};
 8001350:	4a16      	ldr	r2, [pc, #88]	; (80013ac <getActivePower+0x64>)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2106      	movs	r1, #6
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe05 	bl	8000f74 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800136e:	8afb      	ldrh	r3, [r7, #22]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001374:	8afb      	ldrh	r3, [r7, #22]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800137e:	f107 010c 	add.w	r1, r7, #12
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	2208      	movs	r2, #8
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe2f 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7adb      	ldrb	r3, [r3, #11]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	7b12      	ldrb	r2, [r2, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	0800d5f0 	.word	0x0800d5f0

080013b0 <getReactivePower>:

float getReactivePower(ducati_typeDef *me)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x51, 0x00, 0x02, 0x00, 0x00};
 80013b8:	4a16      	ldr	r2, [pc, #88]	; (8001414 <getReactivePower+0x64>)
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2106      	movs	r1, #6
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fdd1 	bl	8000f74 <calculateCRC>
 80013d2:	4603      	mov	r3, r0
 80013d4:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80013d6:	8afb      	ldrh	r3, [r7, #22]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 80013dc:	8afb      	ldrh	r3, [r7, #22]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80013e6:	f107 010c 	add.w	r1, r7, #12
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	2208      	movs	r2, #8
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff fdfb 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7adb      	ldrb	r3, [r3, #11]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	7b12      	ldrb	r2, [r2, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	0800d5f8 	.word	0x0800d5f8

08001418 <getCoilStatus>:
//    StatusIn[6] = HAL_GPIO_ReadPin(harware[6]->GPIO_PORT, harware[6]->GPIO_PIN);
//    StatusIn[7] = HAL_GPIO_ReadPin(harware[7]->GPIO_PORT, harware[7]->GPIO_PIN);
//}

uint16_t getCoilStatus(ducati_typeDef *me)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00};
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <getCoilStatus+0x64>)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	e892 0003 	ldmia.w	r2, {r0, r1}
 800142a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2106      	movs	r1, #6
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fd9d 	bl	8000f74 <calculateCRC>
 800143a:	4603      	mov	r3, r0
 800143c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800143e:	8afb      	ldrh	r3, [r7, #22]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001444:	8afb      	ldrh	r3, [r7, #22]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800144e:	f107 010c 	add.w	r1, r7, #12
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	2208      	movs	r2, #8
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fdc7 	bl	8000fec <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	7adb      	ldrb	r3, [r3, #11]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	7b1b      	ldrb	r3, [r3, #12]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29b      	uxth	r3, r3
}
 8001472:	4618      	mov	r0, r3
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800d600 	.word	0x0800d600

08001480 <LORA_transmit>:
	}
	return (*me->init)(me);
}

THT_StatusTypeDef LORA_transmit(LORA_HandleTypeDef *const me, const uint8_t *pBuffer, uint16_t size, uint32_t timeout)
{
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	4613      	mov	r3, r2
 800148e:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <LORA_transmit+0x1c>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <LORA_transmit+0x20>
	{
		return THT_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e007      	b.n	80014b0 <LORA_transmit+0x30>
	}

	return (*me->transmit)(me, pBuffer, size, timeout);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691c      	ldr	r4, [r3, #16]
 80014a4:	88fa      	ldrh	r2, [r7, #6]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	47a0      	blx	r4
 80014ae:	4603      	mov	r3, r0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd90      	pop	{r4, r7, pc}

080014b8 <LORA_startReceiveIT>:

	return (*me->receive)(me, pBuffer, size, timeout);
}

THT_StatusTypeDef LORA_startReceiveIT(LORA_HandleTypeDef *const me)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <LORA_startReceiveIT+0x12>
	{
		return THT_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e004      	b.n	80014d4 <LORA_startReceiveIT+0x1c>
	}

	return (*me->startReceiveIT)(me);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
 80014d2:	4603      	mov	r3, r0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <LORA_receiveIT>:

THT_StatusTypeDef LORA_receiveIT(LORA_HandleTypeDef *const me, uint8_t *pBuffer, uint16_t size)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
	if (me == NULL || pBuffer == NULL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <LORA_receiveIT+0x1a>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <LORA_receiveIT+0x1e>
	{
		return THT_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e006      	b.n	8001508 <LORA_receiveIT+0x2c>
	}

	return (*me->receiveIT)(me, pBuffer, size);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	4798      	blx	r3
 8001506:	4603      	mov	r3, r0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <RFM95_setNSSPin>:
 * @brief Set NSS pin - this enable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_setNSSPin(RFM95_HandleTypeDef *const me)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <RFM95_setNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_SET);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001526:	2201      	movs	r2, #1
 8001528:	4619      	mov	r1, r3
 800152a:	f004 fdd9 	bl	80060e0 <HAL_GPIO_WritePin>
 800152e:	e000      	b.n	8001532 <RFM95_setNSSPin+0x22>
		return;
 8001530:	bf00      	nop
}
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <RFM95_clearNSSPin>:
 * @brief Reset NSS pin - this disable communication between RFM95 module and MCU
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
static inline void RFM95_clearNSSPin(RFM95_HandleTypeDef *const me)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <RFM95_clearNSSPin+0x20>
	{
		return;
	}
	HAL_GPIO_WritePin(me->nssPort, me->nssPin, GPIO_PIN_RESET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	f004 fdc5 	bl	80060e0 <HAL_GPIO_WritePin>
 8001556:	e000      	b.n	800155a <RFM95_clearNSSPin+0x22>
		return;
 8001558:	bf00      	nop
}
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <RFM95_writeRegister>:
 * @param data [in] The data of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeRegister(RFM95_HandleTypeDef *const me,
											 uint8_t address, const uint8_t data)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
 800156c:	4613      	mov	r3, r2
 800156e:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <RFM95_writeRegister+0x1a>
	{
		return THT_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e021      	b.n	80015be <RFM95_writeRegister+0x5e>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffdc 	bl	8001538 <RFM95_clearNSSPin>
	/* an address byte followed by a data byte is sent for a write access */
	uint8_t txBuffer[2] = {address | 0x80, data};
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001586:	b2db      	uxtb	r3, r3
 8001588:	733b      	strb	r3, [r7, #12]
 800158a:	78bb      	ldrb	r3, [r7, #2]
 800158c:	737b      	strb	r3, [r7, #13]
	//	printf("Write %X to address %x\n", txBuffer[1], txBuffer[0]);
	HAL_StatusTypeDef res = HAL_SPI_Transmit(me->hspi, txBuffer, 2, 100);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001592:	f107 010c 	add.w	r1, r7, #12
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	2202      	movs	r2, #2
 800159a:	f005 fedd 	bl	8007358 <HAL_SPI_Transmit>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
	/* The NSS pin goes high after the data byte.*/
	RFM95_setNSSPin(me);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb4 	bl	8001510 <RFM95_setNSSPin>

	if (res == HAL_OK)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <RFM95_writeRegister+0x52>
	{
		return THT_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e005      	b.n	80015be <RFM95_writeRegister+0x5e>
	}
	else if (res == HAL_ERROR)
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d101      	bne.n	80015bc <RFM95_writeRegister+0x5c>
	{
		return THT_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <RFM95_writeRegister+0x5e>
	}
	else
	{
		return THT_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
	}
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <RFM95_writeBurstRegister>:
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_writeBurstRegister(
	RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *pData,
	uint8_t size)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b086      	sub	sp, #24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	461a      	mov	r2, r3
 80015d2:	460b      	mov	r3, r1
 80015d4:	72fb      	strb	r3, [r7, #11]
 80015d6:	4613      	mov	r3, r2
 80015d8:	72bb      	strb	r3, [r7, #10]
	if (me == NULL)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <RFM95_writeBurstRegister+0x1e>
	{
		return THT_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e041      	b.n	8001668 <RFM95_writeBurstRegister+0xa2>
	}

	HAL_StatusTypeDef res = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]

	if (size == 1)
 80015e8:	7abb      	ldrb	r3, [r7, #10]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d109      	bne.n	8001602 <RFM95_writeBurstRegister+0x3c>
	{
		res = RFM95_writeRegister(me, address, *pData);
 80015ee:	7af9      	ldrb	r1, [r7, #11]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ffb2 	bl	8001560 <RFM95_writeRegister>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]
 8001600:	e031      	b.n	8001666 <RFM95_writeBurstRegister+0xa0>
	}
	else
	{
		RFM95_clearNSSPin(me);
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f7ff ff98 	bl	8001538 <RFM95_clearNSSPin>

		address |= 0x80;
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800160e:	b2db      	uxtb	r3, r3
 8001610:	72fb      	strb	r3, [r7, #11]

		res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001616:	f107 010b 	add.w	r1, r7, #11
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2201      	movs	r2, #1
 800161e:	f005 fe9b 	bl	8007358 <HAL_SPI_Transmit>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]
		if (res == HAL_OK)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d119      	bne.n	8001660 <RFM95_writeBurstRegister+0x9a>
		{
			for (size_t i = 0; i < size; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	e010      	b.n	8001654 <RFM95_writeBurstRegister+0x8e>
			{
				//				printf("Write %X to address %x\n", *pData, address);
				res = HAL_SPI_Transmit(me->hspi, pData++, 1, 100); // pdata++
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	1c4b      	adds	r3, r1, #1
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	2364      	movs	r3, #100	; 0x64
 800163e:	2201      	movs	r2, #1
 8001640:	f005 fe8a 	bl	8007358 <HAL_SPI_Transmit>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]

				if (res != HAL_OK)
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d107      	bne.n	800165e <RFM95_writeBurstRegister+0x98>
			for (size_t i = 0; i < size; i++)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	3301      	adds	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	7abb      	ldrb	r3, [r7, #10]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3ea      	bcc.n	8001632 <RFM95_writeBurstRegister+0x6c>
 800165c:	e000      	b.n	8001660 <RFM95_writeBurstRegister+0x9a>
				{
					break;
 800165e:	bf00      	nop
				}
			}
		}

		RFM95_setNSSPin(me);
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff ff55 	bl	8001510 <RFM95_setNSSPin>
	}

	return res;
 8001666:	7dfb      	ldrb	r3, [r7, #23]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <RFM95_readRegister>:
 * @param address [in] Register address
 * @param value [out] A pointer to a variable store the value of register
 * @return THT_StatusTypeDef
 */
static THT_StatusTypeDef RFM95_readRegister(RFM95_HandleTypeDef *const me, uint8_t address, uint8_t *value)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	460b      	mov	r3, r1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	72fb      	strb	r3, [r7, #11]
	if (me == NULL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <RFM95_readRegister+0x18>
	{
		return THT_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e025      	b.n	80016d4 <RFM95_readRegister+0x64>
	}

	/* The NSS pin goes low at the beginning of the frame */
	RFM95_clearNSSPin(me);
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff ff55 	bl	8001538 <RFM95_clearNSSPin>

	HAL_StatusTypeDef res = HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]

	/* an address byte is sent */
	res = HAL_SPI_Transmit(me->hspi, &address, 1, 100);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001696:	f107 010b 	add.w	r1, r7, #11
 800169a:	2364      	movs	r3, #100	; 0x64
 800169c:	2201      	movs	r2, #1
 800169e:	f005 fe5b 	bl	8007358 <HAL_SPI_Transmit>
 80016a2:	4603      	mov	r3, r0
 80016a4:	75fb      	strb	r3, [r7, #23]
	/* and a read byte is received for the read access. */
	res = HAL_SPI_Receive(me->hspi, value, 1, 100);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016aa:	2364      	movs	r3, #100	; 0x64
 80016ac:	2201      	movs	r2, #1
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f005 ff8e 	bl	80075d0 <HAL_SPI_Receive>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]

	/* The NSS pin goes high after the data byte. b*/
	RFM95_setNSSPin(me);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff ff29 	bl	8001510 <RFM95_setNSSPin>
	//	printf("Read address %x: %x\n ", address, *value);
	if (res == HAL_OK)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <RFM95_readRegister+0x58>
	{
		return THT_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e005      	b.n	80016d4 <RFM95_readRegister+0x64>
	}
	else if (res == HAL_ERROR)
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <RFM95_readRegister+0x62>
	{
		return THT_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <RFM95_readRegister+0x64>
	}
	else
	{
		return THT_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
	}
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <RFM95_setHeaderMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param headerMode [in] Header mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setHeaderMode(RFM95_HandleTypeDef *const me, const uint8_t headerMode)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <RFM95_setHeaderMode+0x16>
	{
		return THT_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e024      	b.n	800173c <RFM95_setHeaderMode+0x60>
	}

	uint8_t rByte = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 80016fa:	f107 030d 	add.w	r3, r7, #13
 80016fe:	461a      	mov	r2, r3
 8001700:	211d      	movs	r1, #29
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ffb4 	bl	8001670 <RFM95_readRegister>
 8001708:	4603      	mov	r3, r0
 800170a:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800170c:	7bbb      	ldrb	r3, [r7, #14]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <RFM95_setHeaderMode+0x3a>
	{
		return res;
 8001712:	7bbb      	ldrb	r3, [r7, #14]
 8001714:	e012      	b.n	800173c <RFM95_setHeaderMode+0x60>
	}

	/* Set the new value of REG_LR_MODEMCONFIG1 register */
	wByte = (uint8_t)(headerMode | (rByte & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK));
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	b25a      	sxtb	r2, r3
 8001720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001724:	4313      	orrs	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]

	/* Write new value to REG_LR_MODEMCONFIG2 register */
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	461a      	mov	r2, r3
 800172e:	211d      	movs	r1, #29
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff15 	bl	8001560 <RFM95_writeRegister>
 8001736:	4603      	mov	r3, r0
 8001738:	73bb      	strb	r3, [r7, #14]

	return res;
 800173a:	7bbb      	ldrb	r3, [r7, #14]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <RFM95_setSpreadingFactor>:
	@arg RFLR_MODEMCONFIG2_SF_11
	@arg RFLR_MODEMCONFIG2_SF_12                      // Phải cấu hình thêm LowDataRate
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setSpreadingFactor(RFM95_HandleTypeDef *const me, const uint8_t SF)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <RFM95_setSpreadingFactor+0x16>
	{
		return THT_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0ac      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	me->parent.SF = SF >> 4u;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	b2da      	uxtb	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	711a      	strb	r2, [r3, #4]

	uint8_t rByte = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 800176c:	f107 030d 	add.w	r3, r7, #13
 8001770:	461a      	mov	r2, r3
 8001772:	211e      	movs	r1, #30
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff7b 	bl	8001670 <RFM95_readRegister>
 800177a:	4603      	mov	r3, r0
 800177c:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 800177e:	7bbb      	ldrb	r3, [r7, #14]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <RFM95_setSpreadingFactor+0x44>
	{
		return THT_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e095      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	/* SF = 6 Is a special use case for the highest data rate transmission possible with the LoRa modem */
	if (SF == RFLR_MODEMCONFIG2_SF_6)
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	2b60      	cmp	r3, #96	; 0x60
 800178c:	d144      	bne.n	8001818 <RFM95_setSpreadingFactor+0xd4>
	{
		/* Set the new value of REG_LR_MODEMCONFIG2 register */
		wByte = (uint8_t)(RFLR_MODEMCONFIG2_SF_6 | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 800178e:	7b7b      	ldrb	r3, [r7, #13]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	b25b      	sxtb	r3, r3
 8001798:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800179c:	b25b      	sxtb	r3, r3
 800179e:	73fb      	strb	r3, [r7, #15]

		/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
		res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	461a      	mov	r2, r3
 80017a4:	211e      	movs	r1, #30
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff feda 	bl	8001560 <RFM95_writeRegister>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <RFM95_setSpreadingFactor+0x76>
		{
			return res;
 80017b6:	7bbb      	ldrb	r3, [r7, #14]
 80017b8:	e07c      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
		}

		/* 2. Set the header to implicit mode */
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 80017ba:	2101      	movs	r1, #1
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff8d 	bl	80016dc <RFM95_setHeaderMode>

		/* 3. Write bit 2-0 of register 0x31 to value "0b101" */
		res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 80017c2:	f107 030d 	add.w	r3, r7, #13
 80017c6:	461a      	mov	r2, r3
 80017c8:	2131      	movs	r1, #49	; 0x31
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff50 	bl	8001670 <RFM95_readRegister>
 80017d0:	4603      	mov	r3, r0
 80017d2:	73bb      	strb	r3, [r7, #14]
		if (res != THT_OK)
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <RFM95_setSpreadingFactor+0x9a>
		{
			return THT_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e06a      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
		}

		wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF6 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 80017de:	7b7b      	ldrb	r3, [r7, #13]
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f023 0307 	bic.w	r3, r3, #7
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	f043 0305 	orr.w	r3, r3, #5
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	73fb      	strb	r3, [r7, #15]

		res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	461a      	mov	r2, r3
 80017f4:	2131      	movs	r1, #49	; 0x31
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff feb2 	bl	8001560 <RFM95_writeRegister>
 80017fc:	4603      	mov	r3, r0
 80017fe:	73bb      	strb	r3, [r7, #14]

		if (res != THT_OK)
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <RFM95_setSpreadingFactor+0xc6>
		{
			return res;
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	e054      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
		}

		/* 4. Write register address 0x37 to value 0x0C */
		return RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF6);
 800180a:	220c      	movs	r2, #12
 800180c:	2137      	movs	r1, #55	; 0x37
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff fea6 	bl	8001560 <RFM95_writeRegister>
 8001814:	4603      	mov	r3, r0
 8001816:	e04d      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	/* else if SF != 6 following below */
	/* 1. Write bit 2-0 of register 0x31 to value "0b101" */
	res = RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8001818:	f107 030d 	add.w	r3, r7, #13
 800181c:	461a      	mov	r2, r3
 800181e:	2131      	movs	r1, #49	; 0x31
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff25 	bl	8001670 <RFM95_readRegister>
 8001826:	4603      	mov	r3, r0
 8001828:	73bb      	strb	r3, [r7, #14]
	if (res != THT_OK)
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <RFM95_setSpreadingFactor+0xf0>
	{
		return THT_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e03f      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	wByte = (uint8_t)(RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12 | (rByte & RFLR_DETECTIONOPTIMIZE_MASK));
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	f023 0307 	bic.w	r3, r3, #7
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f043 0303 	orr.w	r3, r3, #3
 8001842:	b25b      	sxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]

	res = RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	461a      	mov	r2, r3
 800184a:	2131      	movs	r1, #49	; 0x31
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fe87 	bl	8001560 <RFM95_writeRegister>
 8001852:	4603      	mov	r3, r0
 8001854:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <RFM95_setSpreadingFactor+0x11c>
	{
		return res;
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	e029      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	/* 2. Write register address 0x37 to value 0x0A */
	res = RFM95_writeRegister(me, REG_LR_DETECTIONTHRESHOLD, RFLR_DETECTIONTHRESH_SF7_TO_SF12);
 8001860:	220a      	movs	r2, #10
 8001862:	2137      	movs	r1, #55	; 0x37
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fe7b 	bl	8001560 <RFM95_writeRegister>
 800186a:	4603      	mov	r3, r0
 800186c:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800186e:	7bbb      	ldrb	r3, [r7, #14]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <RFM95_setSpreadingFactor+0x134>
	{
		return res;
 8001874:	7bbb      	ldrb	r3, [r7, #14]
 8001876:	e01d      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	/* 3. Write register REG_LR_MODEMCONFIG2 to config SF */

	/* Set the new value of REG_LR_MODEMCONFIG2 register */
	wByte = (uint8_t)(SF | (rByte & RFLR_MODEMCONFIG2_SF_MASK));
 8001878:	7b7b      	ldrb	r3, [r7, #13]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	b25a      	sxtb	r2, r3
 8001882:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001886:	4313      	orrs	r3, r2
 8001888:	b25b      	sxtb	r3, r3
 800188a:	73fb      	strb	r3, [r7, #15]
	/* 1. Write new value to REG_LR_MODEMCONFIG2 register */
	//	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
	res = RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	461a      	mov	r2, r3
 8001890:	211e      	movs	r1, #30
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fe64 	bl	8001560 <RFM95_writeRegister>
 8001898:	4603      	mov	r3, r0
 800189a:	73bb      	strb	r3, [r7, #14]

	if (SF == RFLR_MODEMCONFIG2_SF_12 || SF == RFLR_MODEMCONFIG2_SF_11)
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	2bc0      	cmp	r3, #192	; 0xc0
 80018a0:	d002      	beq.n	80018a8 <RFM95_setSpreadingFactor+0x164>
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2bb0      	cmp	r3, #176	; 0xb0
 80018a6:	d104      	bne.n	80018b2 <RFM95_setSpreadingFactor+0x16e>
	{
		return RFM95_lowDataRateOptimize(me);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f871 	bl	8001990 <RFM95_lowDataRateOptimize>
 80018ae:	4603      	mov	r3, r0
 80018b0:	e000      	b.n	80018b4 <RFM95_setSpreadingFactor+0x170>
	}

	return res;
 80018b2:	7bbb      	ldrb	r3, [r7, #14]
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <RFM95_setBandwidth>:
	@arg RFLR_MODEMCONFIG1_BW_250_KHZ 0x80
	@arg RFLR_MODEMCONFIG1_BW_500_KHZ 0x90
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setBandwidth(RFM95_HandleTypeDef *const me, uint8_t BW)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <RFM95_setBandwidth+0x16>
	{
		return THT_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e027      	b.n	8001922 <RFM95_setBandwidth+0x66>
	}

	me->parent.BW = BW >> 4u;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	715a      	strb	r2, [r3, #5]

	uint8_t rByte = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
 80018e4:	f107 030d 	add.w	r3, r7, #13
 80018e8:	461a      	mov	r2, r3
 80018ea:	211d      	movs	r1, #29
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff febf 	bl	8001670 <RFM95_readRegister>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <RFM95_setBandwidth+0x44>
	{
		return THT_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e010      	b.n	8001922 <RFM95_setBandwidth+0x66>
	}

	wByte = (uint8_t)(BW | (rByte & RFLR_MODEMCONFIG1_BW_MASK));
 8001900:	7b7b      	ldrb	r3, [r7, #13]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	f003 030f 	and.w	r3, r3, #15
 8001908:	b25a      	sxtb	r2, r3
 800190a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800190e:	4313      	orrs	r3, r2
 8001910:	b25b      	sxtb	r3, r3
 8001912:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	461a      	mov	r2, r3
 8001918:	211d      	movs	r1, #29
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe20 	bl	8001560 <RFM95_writeRegister>
 8001920:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG1, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG1, &rByte);
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <RFM95_setCRCMode>:
 *  @arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON
 * 	@arg RFLR_MODEMCONFIG2_RXPAYLOADCRC_OFF
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setCRCMode(RFM95_HandleTypeDef *const me, uint8_t CRCMode)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <RFM95_setCRCMode+0x16>
	{
		return THT_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e022      	b.n	8001986 <RFM95_setCRCMode+0x5c>
	}

	uint8_t rByte = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG2 register */
	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG2, &rByte);
 8001948:	f107 030d 	add.w	r3, r7, #13
 800194c:	461a      	mov	r2, r3
 800194e:	211e      	movs	r1, #30
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fe8d 	bl	8001670 <RFM95_readRegister>
 8001956:	4603      	mov	r3, r0
 8001958:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <RFM95_setCRCMode+0x3a>
	{
		return THT_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e010      	b.n	8001986 <RFM95_setCRCMode+0x5c>
	}

	wByte = (uint8_t)(CRCMode | (rByte & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK));
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	b25b      	sxtb	r3, r3
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	b25a      	sxtb	r2, r3
 800196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001972:	4313      	orrs	r3, r2
 8001974:	b25b      	sxtb	r3, r3
 8001976:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG2, wByte);
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	461a      	mov	r2, r3
 800197c:	211e      	movs	r1, #30
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fdee 	bl	8001560 <RFM95_writeRegister>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <RFM95_lowDataRateOptimize>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_lowDataRateOptimize(RFM95_HandleTypeDef *const me)
{
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <RFM95_lowDataRateOptimize+0x12>
	{
		return THT_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e076      	b.n	8001a90 <RFM95_lowDataRateOptimize+0x100>
	}
	uint32_t bandwidth = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
	switch (me->parent.BW)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	795b      	ldrb	r3, [r3, #5]
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	d00c      	beq.n	80019c8 <RFM95_lowDataRateOptimize+0x38>
 80019ae:	2b09      	cmp	r3, #9
 80019b0:	dc0d      	bgt.n	80019ce <RFM95_lowDataRateOptimize+0x3e>
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	d002      	beq.n	80019bc <RFM95_lowDataRateOptimize+0x2c>
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d003      	beq.n	80019c2 <RFM95_lowDataRateOptimize+0x32>
		break;
	case 9:
		bandwidth = 500000;
		break;
	default:
		break;
 80019ba:	e008      	b.n	80019ce <RFM95_lowDataRateOptimize+0x3e>
		bandwidth = 125000;
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <RFM95_lowDataRateOptimize+0x110>)
 80019be:	617b      	str	r3, [r7, #20]
		break;
 80019c0:	e006      	b.n	80019d0 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 250000;
 80019c2:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <RFM95_lowDataRateOptimize+0x114>)
 80019c4:	617b      	str	r3, [r7, #20]
		break;
 80019c6:	e003      	b.n	80019d0 <RFM95_lowDataRateOptimize+0x40>
		bandwidth = 500000;
 80019c8:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <RFM95_lowDataRateOptimize+0x118>)
 80019ca:	617b      	str	r3, [r7, #20]
		break;
 80019cc:	e000      	b.n	80019d0 <RFM95_lowDataRateOptimize+0x40>
		break;
 80019ce:	bf00      	nop
	}

	float Tsymbol = 1000.0 * pow(2, me->parent.SF) / bandwidth;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	791b      	ldrb	r3, [r3, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd95 	bl	8000504 <__aeabi_ui2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ec43 2b11 	vmov	d1, r2, r3
 80019e2:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8001a98 <RFM95_lowDataRateOptimize+0x108>
 80019e6:	f00a fea5 	bl	800c734 <pow>
 80019ea:	ec51 0b10 	vmov	r0, r1, d0
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <RFM95_lowDataRateOptimize+0x11c>)
 80019f4:	f7fe fe00 	bl	80005f8 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4614      	mov	r4, r2
 80019fe:	461d      	mov	r5, r3
 8001a00:	6978      	ldr	r0, [r7, #20]
 8001a02:	f7fe fd7f 	bl	8000504 <__aeabi_ui2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe ff1d 	bl	800084c <__aeabi_ddiv>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f8c5 	bl	8000ba8 <__aeabi_d2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60fb      	str	r3, [r7, #12]
	uint8_t isEnableLDO = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	74fb      	strb	r3, [r7, #19]

	if (Tsymbol > 16.0)
 8001a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a2a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a36:	dd02      	ble.n	8001a3e <RFM95_lowDataRateOptimize+0xae>
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	74fb      	strb	r3, [r7, #19]
 8001a3c:	e001      	b.n	8001a42 <RFM95_lowDataRateOptimize+0xb2>
	}
	else
	{
		isEnableLDO = RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_OFF;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	74fb      	strb	r3, [r7, #19]
	}

	uint8_t rByte = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	727b      	strb	r3, [r7, #9]
	uint8_t wByte = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	72fb      	strb	r3, [r7, #11]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
 8001a4a:	f107 0309 	add.w	r3, r7, #9
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2126      	movs	r1, #38	; 0x26
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff fe0c 	bl	8001670 <RFM95_readRegister>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	72bb      	strb	r3, [r7, #10]

	if (res != THT_OK)
 8001a5c:	7abb      	ldrb	r3, [r7, #10]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <RFM95_lowDataRateOptimize+0xd6>
	{
		return THT_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e014      	b.n	8001a90 <RFM95_lowDataRateOptimize+0x100>
	}

	wByte = (uint8_t)(isEnableLDO | (rByte & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK));
 8001a66:	7a7b      	ldrb	r3, [r7, #9]
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	f023 0308 	bic.w	r3, r3, #8
 8001a6e:	b25a      	sxtb	r2, r3
 8001a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	72fb      	strb	r3, [r7, #11]
	wByte = (uint8_t)(RFLR_MODEMCONFIG3_AGCAUTO_ON | wByte); // turn on AGC
 8001a7a:	7afb      	ldrb	r3, [r7, #11]
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	72fb      	strb	r3, [r7, #11]
	return RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
 8001a82:	7afb      	ldrb	r3, [r7, #11]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2126      	movs	r1, #38	; 0x26
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fd69 	bl	8001560 <RFM95_writeRegister>
 8001a8e:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_MODEMCONFIG3, wByte);
	//	return RFM95_readRegister(me, REG_LR_MODEMCONFIG3, &rByte);
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bdb0      	pop	{r4, r5, r7, pc}
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	40000000 	.word	0x40000000
 8001aa0:	0001e848 	.word	0x0001e848
 8001aa4:	0003d090 	.word	0x0003d090
 8001aa8:	0007a120 	.word	0x0007a120
 8001aac:	408f4000 	.word	0x408f4000

08001ab0 <RFM95_setLNA>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setLNA(RFM95_HandleTypeDef *const me)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint8_t rByte = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	res = RFM95_readRegister(me, REG_LR_LNA, &rByte);
 8001ac0:	f107 030d 	add.w	r3, r7, #13
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	210c      	movs	r1, #12
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fdd1 	bl	8001670 <RFM95_readRegister>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <RFM95_setLNA+0x2c>
	{
		return THT_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e00c      	b.n	8001af6 <RFM95_setLNA+0x46>
	}

	wByte = (uint8_t)(RFLR_LNA_BOOST_HF_ON | (rByte & RFLR_LNA_BOOST_HF_MASK));
 8001adc:	7b7b      	ldrb	r3, [r7, #13]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	f043 0303 	orr.w	r3, r3, #3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_LNA, wByte);
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	461a      	mov	r2, r3
 8001aec:	210c      	movs	r1, #12
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fd36 	bl	8001560 <RFM95_writeRegister>
 8001af4:	4603      	mov	r3, r0
	//	RFM95_writeRegister(me, REG_LR_LNA, wByte);
	//	return RFM95_readRegister(me, REG_LR_LNA, &rByte);
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <RFM95_setMode>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mode [in] Mode is combine of LORA, SLEEP, STANDBY, SYNTHESIZERTX, TRANSMITTER, RECEIVER, SYNTHESIZERRX
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setMode(RFM95_HandleTypeDef *const me, const uint8_t mode)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <RFM95_setMode+0x16>
	{
		return THT_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e022      	b.n	8001b5a <RFM95_setMode+0x5c>
	}

	uint8_t rByte = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	737b      	strb	r3, [r7, #13]
	uint8_t wByte = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef res;

	/* Read current value of REG_LR_MODEMCONFIG1 register */
	res = RFM95_readRegister(me, REG_LR_OPMODE, &rByte);
 8001b1c:	f107 030d 	add.w	r3, r7, #13
 8001b20:	461a      	mov	r2, r3
 8001b22:	2101      	movs	r1, #1
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fda3 	bl	8001670 <RFM95_readRegister>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	73bb      	strb	r3, [r7, #14]

	if (res != THT_OK)
 8001b2e:	7bbb      	ldrb	r3, [r7, #14]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <RFM95_setMode+0x3a>
	{
		return THT_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e010      	b.n	8001b5a <RFM95_setMode+0x5c>
	}

	wByte = (uint8_t)(mode | (rByte & 0x70));
 8001b38:	7b7b      	ldrb	r3, [r7, #13]
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2101      	movs	r1, #1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fd04 	bl	8001560 <RFM95_writeRegister>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <RFM95_setFrequency>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param frequency frequency value, ex: 923
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setFrequency(RFM95_HandleTypeDef *const me, uint32_t frequency)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
	if (me == NULL)
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	2900      	cmp	r1, #0
 8001b70:	d101      	bne.n	8001b76 <RFM95_setFrequency+0x14>
	{
		return THT_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e02c      	b.n	8001bd0 <RFM95_setFrequency+0x6e>
	}

	me->parent.freq = frequency;
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	6838      	ldr	r0, [r7, #0]
 8001b7a:	6008      	str	r0, [r1, #0]
	uint64_t frf = (uint64_t)(frequency << 19u) / 32;
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	04c9      	lsls	r1, r1, #19
 8001b80:	0949      	lsrs	r1, r1, #5
 8001b82:	2000      	movs	r0, #0
 8001b84:	460a      	mov	r2, r1
 8001b86:	4603      	mov	r3, r0
 8001b88:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 8001b8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	0c02      	lsrs	r2, r0, #16
 8001b9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001b9e:	0c0b      	lsrs	r3, r1, #16
 8001ba0:	b2d3      	uxtb	r3, r2
 8001ba2:	733b      	strb	r3, [r7, #12]
 8001ba4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	0a02      	lsrs	r2, r0, #8
 8001bb2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bb6:	0a0b      	lsrs	r3, r1, #8
 8001bb8:	b2d3      	uxtb	r3, r2
 8001bba:	737b      	strb	r3, [r7, #13]
					   (uint8_t)(frf >> 0)};
 8001bbc:	7c3b      	ldrb	r3, [r7, #16]
	uint8_t freq[3] = {(uint8_t)(frf >> 16), (uint8_t)(frf >> 8),
 8001bbe:	73bb      	strb	r3, [r7, #14]

	return RFM95_writeBurstRegister(me, REG_LR_FRFMSB, freq, 3);
 8001bc0:	f107 020c 	add.w	r2, r7, #12
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	2106      	movs	r1, #6
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fcfc 	bl	80015c6 <RFM95_writeBurstRegister>
 8001bce:	4603      	mov	r3, r0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <RFM95_transmit>:
 * @param size [in] The size of buffer
 * @param timeout [in] The timeout to terminate transmit
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_transmit(RFM95_HandleTypeDef *const me, uint8_t *pData, uint8_t size, uint32_t timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pData == NULL)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <RFM95_transmit+0x1c>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <RFM95_transmit+0x20>
	{
		return THT_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e097      	b.n	8001d28 <RFM95_transmit+0x150>
	}

	uint8_t rByte = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	76fb      	strb	r3, [r7, #27]
	uint8_t currentMode = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	74bb      	strb	r3, [r7, #18]

	/* 0. Tx init */
	/* Read current value of REG_LR_MODEMCONFIG1 register */
	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8001c04:	f107 0312 	add.w	r3, r7, #18
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fd2f 	bl	8001670 <RFM95_readRegister>

	/* 1. Static configuration registers can only be accessed in Sleep mode, Stand-by mode or FSTX mode. */
	wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8001c12:	7cbb      	ldrb	r3, [r7, #18]
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	f023 0307 	bic.w	r3, r3, #7
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001c24:	7efb      	ldrb	r3, [r7, #27]
 8001c26:	461a      	mov	r2, r3
 8001c28:	2101      	movs	r1, #1
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff fc98 	bl	8001560 <RFM95_writeRegister>

	if (me->parent.SF == RFLR_MODEMCONFIG2_SF_6 >> 4)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d103      	bne.n	8001c40 <RFM95_transmit+0x68>
	{
		RFM95_setHeaderMode(me, RFLR_MODEMCONFIG1_IMPLICITHEADER_ON);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f7ff fd4e 	bl	80016dc <RFM95_setHeaderMode>
	}

	/* 2. The LoRaTM FIFO can only be filled in Stand-by mode. */
	RFM95_readRegister(me, REG_LR_FIFOTXBASEADDR, &rByte);
 8001c40:	f107 0313 	add.w	r3, r7, #19
 8001c44:	461a      	mov	r2, r3
 8001c46:	210e      	movs	r1, #14
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fd11 	bl	8001670 <RFM95_readRegister>

	RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	461a      	mov	r2, r3
 8001c52:	210d      	movs	r1, #13
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fc83 	bl	8001560 <RFM95_writeRegister>

	RFM95_writeRegister(me, REG_LR_PAYLOADLENGTH, size);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2122      	movs	r1, #34	; 0x22
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fc7d 	bl	8001560 <RFM95_writeRegister>
	uint8_t temp = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	747b      	strb	r3, [r7, #17]
	RFM95_readRegister(me, REG_LR_PAYLOADLENGTH, &temp);
 8001c6a:	f107 0311 	add.w	r3, r7, #17
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2122      	movs	r1, #34	; 0x22
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f7ff fcfc 	bl	8001670 <RFM95_readRegister>

	(void)temp;

	for (size_t i = 0; i < size; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	e00b      	b.n	8001c96 <RFM95_transmit+0xbe>
	{
		RFM95_writeRegister(me, REG_LR_FIFO, *(pData++));
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f7ff fc68 	bl	8001560 <RFM95_writeRegister>
	for (size_t i = 0; i < size; i++)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d3ef      	bcc.n	8001c7e <RFM95_transmit+0xa6>
	}

	/* 3. Data transmission is initiated by sending TX mode request. */
	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_TRANSMITTER);
 8001c9e:	2383      	movs	r3, #131	; 0x83
 8001ca0:	76fb      	strb	r3, [r7, #27]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001ca2:	7efb      	ldrb	r3, [r7, #27]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fc59 	bl	8001560 <RFM95_writeRegister>

	HAL_Delay(1000);
 8001cae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb2:	f003 fb29 	bl	8005308 <HAL_Delay>
	/* 4. Upon completion the TxDone interrupt is issued and the radio returns to Stand-by mode. */
	uint32_t tickStart = HAL_GetTick();
 8001cb6:	f003 fb1b 	bl	80052f0 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8001cbc:	e02b      	b.n	8001d16 <RFM95_transmit+0x13e>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8001cbe:	f107 0313 	add.w	r3, r7, #19
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2112      	movs	r1, #18
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff fcd2 	bl	8001670 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_TXDONE) == RFLR_IRQFLAGS_TXDONE)
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01f      	beq.n	8001d16 <RFM95_transmit+0x13e>
		{
			/* Clear TX DONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_TXDONE | (rByte & RFLR_IRQFLAGS_TXDONE_MASK));
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	76fb      	strb	r3, [r7, #27]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8001cda:	7efb      	ldrb	r3, [r7, #27]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2112      	movs	r1, #18
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7ff fc3d 	bl	8001560 <RFM95_writeRegister>
			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8001ce6:	f107 0313 	add.w	r3, r7, #19
 8001cea:	461a      	mov	r2, r3
 8001cec:	2112      	movs	r1, #18
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fcbe 	bl	8001670 <RFM95_readRegister>

			wByte = (uint8_t)(RFLR_OPMODE_STANDBY | (currentMode & RFLR_OPMODE_MASK));
 8001cf4:	7cbb      	ldrb	r3, [r7, #18]
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	f023 0307 	bic.w	r3, r3, #7
 8001cfc:	b25b      	sxtb	r3, r3
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	76fb      	strb	r3, [r7, #27]
			return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001d06:	7efb      	ldrb	r3, [r7, #27]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff fc27 	bl	8001560 <RFM95_writeRegister>
 8001d12:	4603      	mov	r3, r0
 8001d14:	e008      	b.n	8001d28 <RFM95_transmit+0x150>
	while (HAL_GetTick() - tickStart <= timeout)
 8001d16:	f003 faeb 	bl	80052f0 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d2cb      	bcs.n	8001cbe <RFM95_transmit+0xe6>
		}
	}

	return THT_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <RFM95_startReceiveIT>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_startReceiveIT(RFM95_HandleTypeDef *const me)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <RFM95_startReceiveIT+0x12>
	{
		return THT_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e05a      	b.n	8001df8 <RFM95_startReceiveIT+0xc8>
	}
	/* Mapping DIO0 to rxDone */
	RFM95_mappingDIO0(me, RFLR_DIOMAPPING1_DIO0_00);
 8001d42:	2100      	movs	r1, #0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa8a 	bl	800225e <RFM95_mappingDIO0>

	uint8_t rByte = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73bb      	strb	r3, [r7, #14]
	uint8_t wByte = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8001d52:	f107 030e 	add.w	r3, r7, #14
 8001d56:	461a      	mov	r2, r3
 8001d58:	2131      	movs	r1, #49	; 0x31
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7ff fc88 	bl	8001670 <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	795b      	ldrb	r3, [r3, #5]
 8001d64:	2b09      	cmp	r3, #9
 8001d66:	d104      	bne.n	8001d72 <RFM95_startReceiveIT+0x42>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8001d68:	7bbb      	ldrb	r3, [r7, #14]
 8001d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e003      	b.n	8001d7a <RFM95_startReceiveIT+0x4a>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d78:	73fb      	strb	r3, [r7, #15]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2131      	movs	r1, #49	; 0x31
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fbed 	bl	8001560 <RFM95_writeRegister>

	switch (me->parent.BW)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	795b      	ldrb	r3, [r3, #5]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	dc2a      	bgt.n	8001de4 <RFM95_startReceiveIT+0xb4>
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	da1d      	bge.n	8001dce <RFM95_startReceiveIT+0x9e>
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d005      	beq.n	8001da2 <RFM95_startReceiveIT+0x72>
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db24      	blt.n	8001de4 <RFM95_startReceiveIT+0xb4>
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d821      	bhi.n	8001de4 <RFM95_startReceiveIT+0xb4>
 8001da0:	e00a      	b.n	8001db8 <RFM95_startReceiveIT+0x88>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8001da2:	2248      	movs	r2, #72	; 0x48
 8001da4:	2127      	movs	r1, #39	; 0x27
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fbda 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001dac:	2200      	movs	r2, #0
 8001dae:	213f      	movs	r1, #63	; 0x3f
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff fbd5 	bl	8001560 <RFM95_writeRegister>
		break;
 8001db6:	e016      	b.n	8001de6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8001db8:	2244      	movs	r2, #68	; 0x44
 8001dba:	2127      	movs	r1, #39	; 0x27
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fbcf 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	213f      	movs	r1, #63	; 0x3f
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fbca 	bl	8001560 <RFM95_writeRegister>
		break;
 8001dcc:	e00b      	b.n	8001de6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	2127      	movs	r1, #39	; 0x27
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fbc4 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	213f      	movs	r1, #63	; 0x3f
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fbbf 	bl	8001560 <RFM95_writeRegister>
		break;
 8001de2:	e000      	b.n	8001de6 <RFM95_startReceiveIT+0xb6>
	case LORA_BW_500:
	default:
		break;
 8001de4:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8001de6:	2385      	movs	r3, #133	; 0x85
 8001de8:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	461a      	mov	r2, r3
 8001dee:	2101      	movs	r1, #1
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff fbb5 	bl	8001560 <RFM95_writeRegister>
 8001df6:	4603      	mov	r3, r0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <RFM95_receiveIT>:
 * @param pBuffer [out] A pointer to buffer used to store data
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveIT(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <RFM95_receiveIT+0x1a>
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <RFM95_receiveIT+0x1e>
	{
		return THT_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <RFM95_receiveIT+0xf6>
	}
	uint8_t rByte = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	74bb      	strb	r3, [r7, #18]
	uint8_t wByte = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	74fb      	strb	r3, [r7, #19]

	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 8001e26:	2181      	movs	r1, #129	; 0x81
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fe68 	bl	8001afe <RFM95_setMode>

	RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8001e2e:	f107 0312 	add.w	r3, r7, #18
 8001e32:	461a      	mov	r2, r3
 8001e34:	2112      	movs	r1, #18
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fc1a 	bl	8001670 <RFM95_readRegister>

	if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8001e3c:	7cbb      	ldrb	r3, [r7, #18]
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da08      	bge.n	8001e56 <RFM95_receiveIT+0x56>
	{
		/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2112      	movs	r1, #18
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fb86 	bl	8001560 <RFM95_writeRegister>
 8001e54:	e04e      	b.n	8001ef4 <RFM95_receiveIT+0xf4>
	}
	else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8001e56:	7cbb      	ldrb	r3, [r7, #18]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d049      	beq.n	8001ef4 <RFM95_receiveIT+0xf4>
	{
		/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
		wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 8001e60:	2340      	movs	r3, #64	; 0x40
 8001e62:	74fb      	strb	r3, [r7, #19]
		RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	461a      	mov	r2, r3
 8001e68:	2112      	movs	r1, #18
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fb78 	bl	8001560 <RFM95_writeRegister>

		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8001e70:	f107 0312 	add.w	r3, r7, #18
 8001e74:	461a      	mov	r2, r3
 8001e76:	2112      	movs	r1, #18
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fbf9 	bl	8001670 <RFM95_readRegister>

		/* Payload CRC not error - read data */
		if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 8001e7e:	7cbb      	ldrb	r3, [r7, #18]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d12d      	bne.n	8001ee4 <RFM95_receiveIT+0xe4>
		{
			/* Read first byte position of last packet */
			RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8001e88:	f107 0312 	add.w	r3, r7, #18
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2110      	movs	r1, #16
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f7ff fbed 	bl	8001670 <RFM95_readRegister>

			/* */
			RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8001e96:	7cbb      	ldrb	r3, [r7, #18]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	210d      	movs	r1, #13
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f7ff fb5f 	bl	8001560 <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 8001ea2:	f107 0312 	add.w	r3, r7, #18
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2113      	movs	r1, #19
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7ff fbe0 	bl	8001670 <RFM95_readRegister>
			/* May be use read burst or fifo read */

			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e00a      	b.n	8001ecc <RFM95_receiveIT+0xcc>
			{
				RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	60ba      	str	r2, [r7, #8]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff fbd5 	bl	8001670 <RFM95_readRegister>
			for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	7cbb      	ldrb	r3, [r7, #18]
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf28      	it	cs
 8001ed4:	4613      	movcs	r3, r2
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d3ea      	bcc.n	8001eb6 <RFM95_receiveIT+0xb6>
			}

			return THT_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e008      	b.n	8001ef6 <RFM95_receiveIT+0xf6>
		}
		else
		{
			/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	74fb      	strb	r3, [r7, #19]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	461a      	mov	r2, r3
 8001eec:	2112      	movs	r1, #18
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f7ff fb36 	bl	8001560 <RFM95_writeRegister>
		}
	}

	return THT_ERROR;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <RFM95_receiveContinuous>:
 * @param size [in] The size of the bufffer
 * @param timeout [in] Timeout
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_receiveContinuous(RFM95_HandleTypeDef *const me, uint8_t pBuffer[], uint8_t size, uint32_t timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pBuffer == NULL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <RFM95_receiveContinuous+0x1c>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <RFM95_receiveContinuous+0x20>
	{
		return THT_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0e7      	b.n	80020ee <RFM95_receiveContinuous+0x1f0>
	}

	uint8_t rByte = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	74fb      	strb	r3, [r7, #19]
	uint8_t wByte = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	77fb      	strb	r3, [r7, #31]
	uint8_t currentMode = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	74bb      	strb	r3, [r7, #18]

	RFM95_readRegister(me, REG_LR_OPMODE, &currentMode);
 8001f2a:	f107 0312 	add.w	r3, r7, #18
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2101      	movs	r1, #1
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fb9c 	bl	8001670 <RFM95_readRegister>

	RFM95_readRegister(me, REG_LR_DETECTOPTIMIZE, &rByte);
 8001f38:	f107 0313 	add.w	r3, r7, #19
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2131      	movs	r1, #49	; 0x31
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff fb95 	bl	8001670 <RFM95_readRegister>

	if (me->parent.BW == LORA_BW_500)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	795b      	ldrb	r3, [r3, #5]
 8001f4a:	2b09      	cmp	r3, #9
 8001f4c:	d104      	bne.n	8001f58 <RFM95_receiveContinuous+0x5a>
	{
		wByte = (0x80 | (rByte & 0x7F));
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f54:	77fb      	strb	r3, [r7, #31]
 8001f56:	e003      	b.n	8001f60 <RFM95_receiveContinuous+0x62>
	}
	else
	{
		wByte = (0x00 | (rByte & 0x7F));
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f5e:	77fb      	strb	r3, [r7, #31]
	}

	RFM95_writeRegister(me, REG_LR_DETECTOPTIMIZE, wByte);
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	461a      	mov	r2, r3
 8001f64:	2131      	movs	r1, #49	; 0x31
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff fafa 	bl	8001560 <RFM95_writeRegister>

	switch (me->parent.BW)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	795b      	ldrb	r3, [r3, #5]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	dc2a      	bgt.n	8001fca <RFM95_receiveContinuous+0xcc>
 8001f74:	2b06      	cmp	r3, #6
 8001f76:	da1d      	bge.n	8001fb4 <RFM95_receiveContinuous+0xb6>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <RFM95_receiveContinuous+0x8a>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db24      	blt.n	8001fca <RFM95_receiveContinuous+0xcc>
 8001f80:	3b01      	subs	r3, #1
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d821      	bhi.n	8001fca <RFM95_receiveContinuous+0xcc>
 8001f86:	e00a      	b.n	8001f9e <RFM95_receiveContinuous+0xa0>
	{
	case LORA_BW_7D8:
		RFM95_writeRegister(me, 0x27, 0x48);
 8001f88:	2248      	movs	r2, #72	; 0x48
 8001f8a:	2127      	movs	r1, #39	; 0x27
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fae7 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001f92:	2200      	movs	r2, #0
 8001f94:	213f      	movs	r1, #63	; 0x3f
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff fae2 	bl	8001560 <RFM95_writeRegister>
		break;
 8001f9c:	e016      	b.n	8001fcc <RFM95_receiveContinuous+0xce>
	case LORA_BW_10D4:
	case LORA_BW_15D6:
	case LORA_BW_20D8:
	case LORA_BW_31D25:
	case LORA_BW_41D7:
		RFM95_writeRegister(me, 0x27, 0x44);
 8001f9e:	2244      	movs	r2, #68	; 0x44
 8001fa0:	2127      	movs	r1, #39	; 0x27
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff fadc 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	213f      	movs	r1, #63	; 0x3f
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7ff fad7 	bl	8001560 <RFM95_writeRegister>
		break;
 8001fb2:	e00b      	b.n	8001fcc <RFM95_receiveContinuous+0xce>
	case LORA_BW_62D5:
	case LORA_BW_125:
	case LORA_BW_250:
		RFM95_writeRegister(me, 0x27, 0x40);
 8001fb4:	2240      	movs	r2, #64	; 0x40
 8001fb6:	2127      	movs	r1, #39	; 0x27
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fad1 	bl	8001560 <RFM95_writeRegister>
		RFM95_writeRegister(me, 0x3F, 0x00);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	213f      	movs	r1, #63	; 0x3f
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff facc 	bl	8001560 <RFM95_writeRegister>
		break;
 8001fc8:	e000      	b.n	8001fcc <RFM95_receiveContinuous+0xce>
	case LORA_BW_500:
	default:
		break;
 8001fca:	bf00      	nop
	}

	wByte = (uint8_t)(RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_RECEIVER);
 8001fcc:	2385      	movs	r3, #133	; 0x85
 8001fce:	77fb      	strb	r3, [r7, #31]

	RFM95_writeRegister(me, REG_LR_OPMODE, wByte);
 8001fd0:	7ffb      	ldrb	r3, [r7, #31]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff fac2 	bl	8001560 <RFM95_writeRegister>

	uint32_t tickStart = HAL_GetTick();
 8001fdc:	f003 f988 	bl	80052f0 <HAL_GetTick>
 8001fe0:	6178      	str	r0, [r7, #20]

	while (HAL_GetTick() - tickStart <= timeout)
 8001fe2:	e07a      	b.n	80020da <RFM95_receiveContinuous+0x1dc>
	{
		RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 8001fe4:	f107 0313 	add.w	r3, r7, #19
 8001fe8:	461a      	mov	r2, r3
 8001fea:	2112      	movs	r1, #18
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff fb3f 	bl	8001670 <RFM95_readRegister>

		if ((rByte & RFLR_IRQFLAGS_RXTIMEOUT) == RFLR_IRQFLAGS_RXTIMEOUT)
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	b25b      	sxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	da0e      	bge.n	8002018 <RFM95_receiveContinuous+0x11a>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8001ffa:	7cbb      	ldrb	r3, [r7, #18]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2101      	movs	r1, #1
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7ff faad 	bl	8001560 <RFM95_writeRegister>
			/* Clear RFLR_IRQFLAGS_RXTIMEOUT flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXTIMEOUT | (rByte & RFLR_IRQFLAGS_RXTIMEOUT_MASK));
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 800200a:	7ffb      	ldrb	r3, [r7, #31]
 800200c:	461a      	mov	r2, r3
 800200e:	2112      	movs	r1, #18
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff faa5 	bl	8001560 <RFM95_writeRegister>
 8002016:	e060      	b.n	80020da <RFM95_receiveContinuous+0x1dc>
		}
		else if ((rByte & RFLR_IRQFLAGS_RXDONE) == RFLR_IRQFLAGS_RXDONE)
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d05b      	beq.n	80020da <RFM95_receiveContinuous+0x1dc>
		{
			RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8002022:	7cbb      	ldrb	r3, [r7, #18]
 8002024:	461a      	mov	r2, r3
 8002026:	2101      	movs	r1, #1
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff fa99 	bl	8001560 <RFM95_writeRegister>

			/* Clear RFLR_IRQFLAGS_RXDONE flag by write 1 */
			wByte = (uint8_t)(RFLR_IRQFLAGS_RXDONE | (rByte & RFLR_IRQFLAGS_RXDONE_MASK));
 800202e:	2340      	movs	r3, #64	; 0x40
 8002030:	77fb      	strb	r3, [r7, #31]
			RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	461a      	mov	r2, r3
 8002036:	2112      	movs	r1, #18
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fa91 	bl	8001560 <RFM95_writeRegister>

			RFM95_readRegister(me, REG_LR_IRQFLAGS, &rByte);
 800203e:	f107 0313 	add.w	r3, r7, #19
 8002042:	461a      	mov	r2, r3
 8002044:	2112      	movs	r1, #18
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fb12 	bl	8001670 <RFM95_readRegister>

			/* Payload CRC not error - read data */
			if ((rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR) != RFLR_IRQFLAGS_PAYLOADCRCERROR)
 800204c:	7cfb      	ldrb	r3, [r7, #19]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d133      	bne.n	80020be <RFM95_receiveContinuous+0x1c0>
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 8002056:	7cbb      	ldrb	r3, [r7, #18]
 8002058:	461a      	mov	r2, r3
 800205a:	2101      	movs	r1, #1
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fa7f 	bl	8001560 <RFM95_writeRegister>

				/* Read first byte position of last packet */
				RFM95_readRegister(me, REG_LR_FIFORXCURRENTADDR, &rByte);
 8002062:	f107 0313 	add.w	r3, r7, #19
 8002066:	461a      	mov	r2, r3
 8002068:	2110      	movs	r1, #16
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f7ff fb00 	bl	8001670 <RFM95_readRegister>

				/* */
				RFM95_writeRegister(me, REG_LR_FIFOADDRPTR, rByte);
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	461a      	mov	r2, r3
 8002074:	210d      	movs	r1, #13
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f7ff fa72 	bl	8001560 <RFM95_writeRegister>

				RFM95_readRegister(me, REG_LR_RXNBBYTES, &rByte);
 800207c:	f107 0313 	add.w	r3, r7, #19
 8002080:	461a      	mov	r2, r3
 8002082:	2113      	movs	r1, #19
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff faf3 	bl	8001670 <RFM95_readRegister>
				/* May be use read burst or fifo read */

				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e00a      	b.n	80020a6 <RFM95_receiveContinuous+0x1a8>
				{
					RFM95_readRegister(me, REG_LR_FIFO, pBuffer++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	461a      	mov	r2, r3
 8002098:	2100      	movs	r1, #0
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff fae8 	bl	8001670 <RFM95_readRegister>
				for (size_t i = 0; i < (rByte < size ? rByte : size); i++)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	4293      	cmp	r3, r2
 80020ac:	bf28      	it	cs
 80020ae:	4613      	movcs	r3, r2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d3ea      	bcc.n	8002090 <RFM95_receiveContinuous+0x192>
				}

				return THT_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e017      	b.n	80020ee <RFM95_receiveContinuous+0x1f0>
			}
			else
			{
				RFM95_writeRegister(me, REG_LR_OPMODE, currentMode);
 80020be:	7cbb      	ldrb	r3, [r7, #18]
 80020c0:	461a      	mov	r2, r3
 80020c2:	2101      	movs	r1, #1
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff fa4b 	bl	8001560 <RFM95_writeRegister>
				/* Clear RFLR_IRQFLAGS_PAYLOADCRCERROR flag by write 1 */
				wByte = (uint8_t)(RFLR_IRQFLAGS_PAYLOADCRCERROR | (rByte & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK));
 80020ca:	2320      	movs	r3, #32
 80020cc:	77fb      	strb	r3, [r7, #31]
				RFM95_writeRegister(me, REG_LR_IRQFLAGS, wByte);
 80020ce:	7ffb      	ldrb	r3, [r7, #31]
 80020d0:	461a      	mov	r2, r3
 80020d2:	2112      	movs	r1, #18
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff fa43 	bl	8001560 <RFM95_writeRegister>
	while (HAL_GetTick() - tickStart <= timeout)
 80020da:	f003 f909 	bl	80052f0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	f4bf af7c 	bcs.w	8001fe4 <RFM95_receiveContinuous+0xe6>
			}
		}
	}

	return THT_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <RFM95_reset>:
 * @note When module is power on, call this function to reset the module
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 */
void RFM95_reset(RFM95_HandleTypeDef *const me)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01f      	beq.n	8002144 <RFM95_reset+0x4e>
	{
		return;
	}

	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	f003 ffe6 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002114:	2001      	movs	r0, #1
 8002116:	f003 f8f7 	bl	8005308 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002122:	2201      	movs	r2, #1
 8002124:	4619      	mov	r1, r3
 8002126:	f003 ffdb 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800212a:	200a      	movs	r0, #10
 800212c:	f003 f8ec 	bl	8005308 <HAL_Delay>

	uint8_t rByte = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
	RFM95_readRegister(me, REG_LR_VERSION, &rByte);
 8002134:	f107 030f 	add.w	r3, r7, #15
 8002138:	461a      	mov	r2, r3
 800213a:	2142      	movs	r1, #66	; 0x42
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fa97 	bl	8001670 <RFM95_readRegister>
 8002142:	e000      	b.n	8002146 <RFM95_reset+0x50>
		return;
 8002144:	bf00      	nop

	if (rByte != 0x12)
	{
		//		while(1);
	}
}
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <RFM95_setRFPowerAmplifier>:
 *  @arg RFLR_PACONFIG_PASELECT_RFO
 * @param Pout Power value
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_setRFPowerAmplifier(RFM95_HandleTypeDef *const me, uint8_t paSelect, uint8_t Pout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
 8002158:	4613      	mov	r3, r2
 800215a:	70bb      	strb	r3, [r7, #2]
	if (me == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <RFM95_setRFPowerAmplifier+0x1a>
	{
		return THT_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e044      	b.n	80021f0 <RFM95_setRFPowerAmplifier+0xa4>
	}

	uint8_t wByte = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
	uint8_t outputPower = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	73bb      	strb	r3, [r7, #14]
	if (paSelect == RFLR_PACONFIG_PASELECT_PABOOST &&
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d11e      	bne.n	80021b2 <RFM95_setRFPowerAmplifier+0x66>
 8002174:	78bb      	ldrb	r3, [r7, #2]
 8002176:	2b0e      	cmp	r3, #14
 8002178:	d91b      	bls.n	80021b2 <RFM95_setRFPowerAmplifier+0x66>
		((Pout >= 15) && (Pout <= 20)))
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	2b14      	cmp	r3, #20
 800217e:	d818      	bhi.n	80021b2 <RFM95_setRFPowerAmplifier+0x66>
	{
		if (Pout > 17)
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	2b11      	cmp	r3, #17
 8002184:	d906      	bls.n	8002194 <RFM95_setRFPowerAmplifier+0x48>
		{
			RFM95_writeRegister(me, REG_LR_PADAC, RFLR_PADAC_20DBM_ON);
 8002186:	2207      	movs	r2, #7
 8002188:	214d      	movs	r1, #77	; 0x4d
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff f9e8 	bl	8001560 <RFM95_writeRegister>
			Pout = 17;
 8002190:	2311      	movs	r3, #17
 8002192:	70bb      	strb	r3, [r7, #2]
		}

		outputPower = Pout - 17 + 15;
 8002194:	78bb      	ldrb	r3, [r7, #2]
 8002196:	3b02      	subs	r3, #2
 8002198:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | outputPower);
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	4313      	orrs	r3, r2
 80021a0:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	461a      	mov	r2, r3
 80021a6:	2109      	movs	r1, #9
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff f9d9 	bl	8001560 <RFM95_writeRegister>
 80021ae:	4603      	mov	r3, r0
 80021b0:	e01e      	b.n	80021f0 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else if (paSelect == RFLR_PACONFIG_PASELECT_RFO &&
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11a      	bne.n	80021ee <RFM95_setRFPowerAmplifier+0xa2>
 80021b8:	78bb      	ldrb	r3, [r7, #2]
 80021ba:	2b0e      	cmp	r3, #14
 80021bc:	d817      	bhi.n	80021ee <RFM95_setRFPowerAmplifier+0xa2>
			 ((Pout >= 0) && (Pout <= 14)))
	{
		uint8_t maxPower = 7; // chọn 7 để số tròn, hoặc có thể là 2, giá trị mặc định là 4
 80021be:	2307      	movs	r3, #7
 80021c0:	737b      	strb	r3, [r7, #13]
		outputPower = Pout;
 80021c2:	78bb      	ldrb	r3, [r7, #2]
 80021c4:	73bb      	strb	r3, [r7, #14]
		wByte = (uint8_t)(paSelect | (maxPower << 4) | outputPower);
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	b25a      	sxtb	r2, r3
 80021cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021d8:	4313      	orrs	r3, r2
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	73fb      	strb	r3, [r7, #15]
		return RFM95_writeRegister(me, REG_LR_PACONFIG, wByte);
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	461a      	mov	r2, r3
 80021e2:	2109      	movs	r1, #9
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff f9bb 	bl	8001560 <RFM95_writeRegister>
 80021ea:	4603      	mov	r3, r0
 80021ec:	e000      	b.n	80021f0 <RFM95_setRFPowerAmplifier+0xa4>
	}
	else
	{
		return THT_OK;
 80021ee:	2300      	movs	r3, #0
	}
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <RFM95_getRSSI>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return int16_t
 */
int16_t RFM95_getRSSI(RFM95_HandleTypeDef *const me)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <RFM95_getRSSI+0x12>
	{
		return 0;
 8002206:	2300      	movs	r3, #0
 8002208:	e025      	b.n	8002256 <RFM95_getRSSI+0x5e>
	}

	uint8_t rByte = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
	THT_StatusTypeDef res;
	res = RFM95_readRegister(me, REG_LR_PKTRSSIVALUE, &rByte);
 800220e:	f107 030e 	add.w	r3, r7, #14
 8002212:	461a      	mov	r2, r3
 8002214:	211a      	movs	r1, #26
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fa2a 	bl	8001670 <RFM95_readRegister>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
		RF_UHF_BAND = 860,
		RF_RSSI_UHL_OFFSET = 157,
		RF_RSSI_UFL_OFFSET = 164,
	};

	if (THT_OK == res)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d116      	bne.n	8002254 <RFM95_getRSSI+0x5c>
	{
		if (me->parent.freq >= RF_UHF_BAND)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f5b3 7f57 	cmp.w	r3, #860	; 0x35c
 800222e:	d305      	bcc.n	800223c <RFM95_getRSSI+0x44>
		{
			return rByte - RF_RSSI_UHL_OFFSET;
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b9d      	subs	r3, #157	; 0x9d
 8002236:	b29b      	uxth	r3, r3
 8002238:	b21b      	sxth	r3, r3
 800223a:	e00c      	b.n	8002256 <RFM95_getRSSI+0x5e>
		}
		else if (me->parent.freq <= RF_ULF_BAND)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f240 220d 	movw	r2, #525	; 0x20d
 8002244:	4293      	cmp	r3, r2
 8002246:	d805      	bhi.n	8002254 <RFM95_getRSSI+0x5c>
		{
			return rByte - RF_RSSI_UFL_OFFSET;
 8002248:	7bbb      	ldrb	r3, [r7, #14]
 800224a:	b29b      	uxth	r3, r3
 800224c:	3ba4      	subs	r3, #164	; 0xa4
 800224e:	b29b      	uxth	r3, r3
 8002250:	b21b      	sxth	r3, r3
 8002252:	e000      	b.n	8002256 <RFM95_getRSSI+0x5e>
		}
	}

	return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <RFM95_mappingDIO0>:
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @param mappingMode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_mappingDIO0(RFM95_HandleTypeDef *const me, uint8_t mappingMode)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <RFM95_mappingDIO0+0x16>
	{
		return THT_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00c      	b.n	800228e <RFM95_mappingDIO0+0x30>
	}
	uint8_t wByte = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

	wByte = (uint8_t)(mappingMode | RFLR_DIOMAPPING1_DIO0_MASK);
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800227e:	73fb      	strb	r3, [r7, #15]

	return RFM95_writeRegister(me, REG_LR_DIOMAPPING1, wByte);
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	461a      	mov	r2, r3
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff f96a 	bl	8001560 <RFM95_writeRegister>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <RFM95_init>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_init(RFM95_HandleTypeDef *const me)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <RFM95_init+0x12>
	{
		return THT_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e02a      	b.n	80022fe <RFM95_init+0x68>
	}

	RFM95_powerOn(me);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f82c 	bl	8002306 <RFM95_powerOn>
	HAL_Delay(100);
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f003 f82a 	bl	8005308 <HAL_Delay>
	RFM95_reset(me);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff1e 	bl	80020f6 <RFM95_reset>
	RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_SLEEP | RFLR_OPMODE_FREQMODE_ACCESS_HF);
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fc1e 	bl	8001afe <RFM95_setMode>
	RFM95_setFrequency(me, 923);
 80022c2:	f240 319b 	movw	r1, #923	; 0x39b
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fc4b 	bl	8001b62 <RFM95_setFrequency>
	RFM95_setBandwidth(me, RFLR_MODEMCONFIG1_BW_125_KHZ);
 80022cc:	2170      	movs	r1, #112	; 0x70
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff faf4 	bl	80018bc <RFM95_setBandwidth>
	RFM95_setCRCMode(me, RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON);
 80022d4:	2104      	movs	r1, #4
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff fb27 	bl	800192a <RFM95_setCRCMode>
	RFM95_setLNA(me);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fbe7 	bl	8001ab0 <RFM95_setLNA>
	RFM95_setSpreadingFactor(me, RFLR_MODEMCONFIG2_SF_10);
 80022e2:	21a0      	movs	r1, #160	; 0xa0
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fa2d 	bl	8001744 <RFM95_setSpreadingFactor>
	RFM95_setRFPowerAmplifier(me, RFLR_PACONFIG_PASELECT_PABOOST, 20);
 80022ea:	2214      	movs	r2, #20
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff2c 	bl	800214c <RFM95_setRFPowerAmplifier>

	return RFM95_setMode(me, RFLR_OPMODE_LONGRANGEMODE_ON | RFLR_OPMODE_STANDBY);
 80022f4:	2181      	movs	r1, #129	; 0x81
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff fc01 	bl	8001afe <RFM95_setMode>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <RFM95_powerOn>:
 *
 * @param me [in] A pointer to RFM95_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef RFM95_powerOn(RFM95_HandleTypeDef *const me)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <RFM95_powerOn+0x12>
	{
		return THT_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e008      	b.n	800232a <RFM95_powerOn+0x24>
	}

	HAL_GPIO_WritePin(me->powerEnPort, me->powerEnPin, GPIO_PIN_RESET);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f003 fedc 	bl	80060e0 <HAL_GPIO_WritePin>

	return THT_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <SIM7600_sendATCommand>:
 * @param unexpect [in] The unexpected information string in response buffer.
 * @param timeout [in] The timeout to cancel function if no response or no information is matched.
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_sendATCommand(SIM7600_HandleTypeDef *const me, const char *command, const char *expect, const char *unexpect, uint32_t timeout)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
	if (me == NULL || command == NULL || expect == NULL || unexpect == NULL)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <SIM7600_sendATCommand+0x26>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <SIM7600_sendATCommand+0x26>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <SIM7600_sendATCommand+0x26>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <SIM7600_sendATCommand+0x2a>
	{
		return THT_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e084      	b.n	8002468 <SIM7600_sendATCommand+0x134>
	}

	THT_StatusTypeDef answer = THT_BUSY;
 800235e:	2302      	movs	r3, #2
 8002360:	77fb      	strb	r3, [r7, #31]

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002370:	4619      	mov	r1, r3
 8002372:	f005 fdf0 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
								 SIM_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f022 0208 	bic.w	r2, r2, #8
 800238c:	601a      	str	r2, [r3, #0]

	/* Clear buffer before receive new data */
	memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3308      	adds	r3, #8
 8002392:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f008 f90d 	bl	800a5b8 <memset>

	/* Sends command to SIM module: command + "\r\n" */
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)command, strlen(command),
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f8d3 42c0 	ldr.w	r4, [r3, #704]	; 0x2c0
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f7fd ff63 	bl	8000270 <strlen>
 80023aa:	4603      	mov	r3, r0
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4620      	mov	r0, r4
 80023b6:	f005 fd3c 	bl	8007e32 <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)"\r\n", 2, 1000);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80023c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c4:	2202      	movs	r2, #2
 80023c6:	492a      	ldr	r1, [pc, #168]	; (8002470 <SIM7600_sendATCommand+0x13c>)
 80023c8:	f005 fd33 	bl	8007e32 <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 80023cc:	f002 ff90 	bl	80052f0 <HAL_GetTick>
 80023d0:	61b8      	str	r0, [r7, #24]

	/* Wait to receive the response - if the response is empty, the timeout is occured */
	while (answer == THT_BUSY)
 80023d2:	e03f      	b.n	8002454 <SIM7600_sendATCommand+0x120>
	{
		const uint32_t timeElapsed = HAL_GetTick() - tickStart;
 80023d4:	f002 ff8c 	bl	80052f0 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]

		if (timeElapsed >= timeout)
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d317      	bcc.n	8002418 <SIM7600_sendATCommand+0xe4>
		{
			answer = THT_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	77fb      	strb	r3, [r7, #31]
			me->parent.timeoutCnt++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80023f2:	3301      	adds	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238

			/* Print the command and timeout counter */
			printf(command);
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f007 ff39 	bl	800a274 <iprintf>
			printf("\n");
 8002402:	200a      	movs	r0, #10
 8002404:	f007 ff48 	bl	800a298 <putchar>
			printf("Timeout: %u\n", me->parent.timeoutCnt);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 800240e:	4619      	mov	r1, r3
 8002410:	4818      	ldr	r0, [pc, #96]	; (8002474 <SIM7600_sendATCommand+0x140>)
 8002412:	f007 ff2f 	bl	800a274 <iprintf>
			break;
 8002416:	e020      	b.n	800245a <SIM7600_sendATCommand+0x126>
		}
		else
		{
			if (SIM_GET_FLAG(&me->parent, SIM_FLAG_RX))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d117      	bne.n	8002454 <SIM7600_sendATCommand+0x120>
			{
				if (strstr(me->parent.buffer, expect) != NULL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3308      	adds	r3, #8
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	f008 f8d9 	bl	800a5e2 <strstr>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <SIM7600_sendATCommand+0x108>
				{
					answer = THT_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	77fb      	strb	r3, [r7, #31]
					break;
 800243a:	e00e      	b.n	800245a <SIM7600_sendATCommand+0x126>
				}
				else if (strstr(me->parent.buffer, unexpect) != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3308      	adds	r3, #8
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f008 f8cd 	bl	800a5e2 <strstr>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <SIM7600_sendATCommand+0x120>
				{
					answer = THT_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	77fb      	strb	r3, [r7, #31]
					break;
 8002452:	e002      	b.n	800245a <SIM7600_sendATCommand+0x126>
	while (answer == THT_BUSY)
 8002454:	7ffb      	ldrb	r3, [r7, #31]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d0bc      	beq.n	80023d4 <SIM7600_sendATCommand+0xa0>
				}
			}
		}
	}

	SIM_CLR_FLAG(&me->parent, SIM_FLAG_RX);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 0201 	bic.w	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	601a      	str	r2, [r3, #0]
	/*	printf(me->parent.buffer); // Fatal Error: Không uncommment dòng này!
		 Khi thực hiện tính năng FOTA, dòng này nhận được dữ liệu từ module và in ra,
		 khi in ra thì nó k dừng lại mà sẽ in toàn bộ dữ liệu trong bộ nhớ của vi điều
		 khiển và treo
	*/
	return answer;
 8002466:	7ffb      	ldrb	r3, [r7, #31]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3724      	adds	r7, #36	; 0x24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}
 8002470:	0800d608 	.word	0x0800d608
 8002474:	0800d60c 	.word	0x0800d60c

08002478 <SIM7600_wakeup>:
 * @brief  Wake up module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_wakeup(SIM7600_HandleTypeDef *const me)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00d      	beq.n	80024a2 <SIM7600_wakeup+0x2a>
	{
		return;
	}
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_RESET); // DTR Low: Wakeup, DTR high: Sleep
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	f003 fe23 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 800249a:	2064      	movs	r0, #100	; 0x64
 800249c:	f002 ff34 	bl	8005308 <HAL_Delay>
 80024a0:	e000      	b.n	80024a4 <SIM7600_wakeup+0x2c>
		return;
 80024a2:	bf00      	nop
}
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <SIM7600_PWRKEY_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function `SIM7600_PWRKEY_ON` will return without
 * performing any actions.
 */
void SIM7600_PWRKEY_ON(SIM7600_HandleTypeDef *const me)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01c      	beq.n	80024f2 <SIM7600_PWRKEY_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_SET);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80024c4:	2201      	movs	r2, #1
 80024c6:	4619      	mov	r1, r3
 80024c8:	f003 fe0a 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 80024cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024d0:	f002 ff1a 	bl	8005308 <HAL_Delay>
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_RESET);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	f003 fdfc 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 80024e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024ec:	f002 ff0c 	bl	8005308 <HAL_Delay>
 80024f0:	e000      	b.n	80024f4 <SIM7600_PWRKEY_ON+0x4a>
		return;
 80024f2:	bf00      	nop
}
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <SIM7600_RESET_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function will return without performing any
 * actions.
 */
void SIM7600_RESET_ON(SIM7600_HandleTypeDef *const me)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01c      	beq.n	8002542 <SIM7600_RESET_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8002514:	2201      	movs	r2, #1
 8002516:	4619      	mov	r1, r3
 8002518:	f003 fde2 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(500UL);
 800251c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002520:	f002 fef2 	bl	8005308 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	f003 fdd4 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 8002538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253c:	f002 fee4 	bl	8005308 <HAL_Delay>
 8002540:	e000      	b.n	8002544 <SIM7600_RESET_ON+0x4a>
		return;
 8002542:	bf00      	nop
}
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <SIM7600_sleep>:
 * @brief  Put the module to sleep
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_sleep(SIM7600_HandleTypeDef *const me)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <SIM7600_sleep+0x3c>
	{
		return;
	}
	SIM7600_sendATCommand(me, "AT+CSCLK=1", SIM_URC_OK, SIM_URC_ERROR, 3000);
 800255a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <SIM7600_sleep+0x44>)
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <SIM7600_sleep+0x48>)
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <SIM7600_sleep+0x4c>)
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fee4 	bl	8002334 <SIM7600_sendATCommand>
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_SET);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8002578:	2201      	movs	r2, #1
 800257a:	4619      	mov	r1, r3
 800257c:	f003 fdb0 	bl	80060e0 <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 8002580:	2064      	movs	r0, #100	; 0x64
 8002582:	f002 fec1 	bl	8005308 <HAL_Delay>
 8002586:	e000      	b.n	800258a <SIM7600_sleep+0x3e>
		return;
 8002588:	bf00      	nop
}
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	0800d61c 	.word	0x0800d61c
 8002594:	0800d624 	.word	0x0800d624
 8002598:	0800d628 	.word	0x0800d628

0800259c <SIM7600_init>:
 * @brief  Initializes module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_init(SIM7600_HandleTypeDef *const me)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <SIM7600_init+0x12>
	{
		return THT_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0da      	b.n	8002764 <SIM7600_init+0x1c8>
	}

	me->huart->Instance = USART2;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025b4:	4a6d      	ldr	r2, [pc, #436]	; (800276c <SIM7600_init+0x1d0>)
 80025b6:	601a      	str	r2, [r3, #0]
	me->huart->Init.BaudRate = 115200;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025be:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c2:	605a      	str	r2, [r3, #4]
	me->huart->Init.WordLength = UART_WORDLENGTH_8B;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
	me->huart->Init.StopBits = UART_STOPBITS_1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
	me->huart->Init.Parity = UART_PARITY_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
	me->huart->Init.Mode = UART_MODE_TX_RX;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025e8:	220c      	movs	r2, #12
 80025ea:	615a      	str	r2, [r3, #20]
	me->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
	me->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(me->huart) != HAL_OK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fbc6 	bl	8007d98 <HAL_UART_Init>
	}

	/* Power on and reset module */
//	SIM7600_wakeup(me);
//	SIM7600_POWER_ON(me);
	SIM7600_RESET_ON(me);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff74 	bl	80024fa <SIM7600_RESET_ON>

	/* Enable receive data through UART port */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3308      	adds	r3, #8
 800261c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002620:	4619      	mov	r1, r3
 8002622:	f005 fc98 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0208 	bic.w	r2, r2, #8
 800263c:	601a      	str	r2, [r3, #0]

	/* Powerkey on */
	SIM7600_PWRKEY_ON(me);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff33 	bl	80024aa <SIM7600_PWRKEY_ON>

	for (size_t i = 0u; i < 60u; i++)
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e087      	b.n	800275a <SIM7600_init+0x1be>
	{
//		SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
		if (THT_OK == SIM7600_sendATCommand(me, "AT", SIM_URC_OK, SIM_URC_ERROR, 250))
 800264a:	23fa      	movs	r3, #250	; 0xfa
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4b48      	ldr	r3, [pc, #288]	; (8002770 <SIM7600_init+0x1d4>)
 8002650:	4a48      	ldr	r2, [pc, #288]	; (8002774 <SIM7600_init+0x1d8>)
 8002652:	4949      	ldr	r1, [pc, #292]	; (8002778 <SIM7600_init+0x1dc>)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fe6d 	bl	8002334 <SIM7600_sendATCommand>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d179      	bne.n	8002754 <SIM7600_init+0x1b8>
		{
			SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
 8002660:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4b42      	ldr	r3, [pc, #264]	; (8002770 <SIM7600_init+0x1d4>)
 8002668:	4a42      	ldr	r2, [pc, #264]	; (8002774 <SIM7600_init+0x1d8>)
 800266a:	4944      	ldr	r1, [pc, #272]	; (800277c <SIM7600_init+0x1e0>)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fe61 	bl	8002334 <SIM7600_sendATCommand>

			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 4000))
 8002672:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <SIM7600_init+0x1d4>)
 800267a:	4a3e      	ldr	r2, [pc, #248]	; (8002774 <SIM7600_init+0x1d8>)
 800267c:	4940      	ldr	r1, [pc, #256]	; (8002780 <SIM7600_init+0x1e4>)
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fe58 	bl	8002334 <SIM7600_sendATCommand>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d164      	bne.n	8002754 <SIM7600_init+0x1b8>
			{
				SIM7600_sendATCommand(me, "ATI", SIM_URC_OK, SIM_URC_ERROR, 500);
 800268a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <SIM7600_init+0x1d4>)
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <SIM7600_init+0x1d8>)
 8002694:	493b      	ldr	r1, [pc, #236]	; (8002784 <SIM7600_init+0x1e8>)
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe4c 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 4000);	//"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 800269c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	4b33      	ldr	r3, [pc, #204]	; (8002770 <SIM7600_init+0x1d4>)
 80026a4:	4a38      	ldr	r2, [pc, #224]	; (8002788 <SIM7600_init+0x1ec>)
 80026a6:	4939      	ldr	r1, [pc, #228]	; (800278c <SIM7600_init+0x1f0>)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fe43 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CGREG?", "+CGREG: 0,1", SIM_URC_ERROR, 4000); // "\r\n+CGREG: 0,1\r\n\r\nOK\r\n"
 80026ae:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <SIM7600_init+0x1d4>)
 80026b6:	4a36      	ldr	r2, [pc, #216]	; (8002790 <SIM7600_init+0x1f4>)
 80026b8:	4936      	ldr	r1, [pc, #216]	; (8002794 <SIM7600_init+0x1f8>)
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fe3a 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMP=39", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80026c0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <SIM7600_init+0x1d4>)
 80026c8:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <SIM7600_init+0x1d8>)
 80026ca:	4933      	ldr	r1, [pc, #204]	; (8002798 <SIM7600_init+0x1fc>)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fe31 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CTZU=0", SIM_URC_OK, SIM_URC_ERROR, 4000);					//"\r\nOK\r\n"
 80026d2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <SIM7600_init+0x1d4>)
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <SIM7600_init+0x1d8>)
 80026dc:	492f      	ldr	r1, [pc, #188]	; (800279c <SIM7600_init+0x200>)
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fe28 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);				//"\r\nOK\r\n"
 80026e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <SIM7600_init+0x1d4>)
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <SIM7600_init+0x1d8>)
 80026ee:	492c      	ldr	r1, [pc, #176]	; (80027a0 <SIM7600_init+0x204>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff fe1f 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 4000); //"\r\n+CPMS: 0,40,0,40,0,40\r\n\r\nOK\r\n"
 80026f6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <SIM7600_init+0x1d4>)
 80026fe:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <SIM7600_init+0x1d8>)
 8002700:	4928      	ldr	r1, [pc, #160]	; (80027a4 <SIM7600_init+0x208>)
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fe16 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGD=,4", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002708:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <SIM7600_init+0x1d4>)
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <SIM7600_init+0x1d8>)
 8002712:	4925      	ldr	r1, [pc, #148]	; (80027a8 <SIM7600_init+0x20c>)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fe0d 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800271a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <SIM7600_init+0x1d4>)
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <SIM7600_init+0x1d8>)
 8002724:	4921      	ldr	r1, [pc, #132]	; (80027ac <SIM7600_init+0x210>)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fe04 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMI=2,1,0,0,0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800272c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <SIM7600_init+0x1d4>)
 8002734:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <SIM7600_init+0x1d8>)
 8002736:	491e      	ldr	r1, [pc, #120]	; (80027b0 <SIM7600_init+0x214>)
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fdfb 	bl	8002334 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CFGRI=0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800273e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <SIM7600_init+0x1d4>)
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <SIM7600_init+0x1d8>)
 8002748:	491a      	ldr	r1, [pc, #104]	; (80027b4 <SIM7600_init+0x218>)
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff fdf2 	bl	8002334 <SIM7600_sendATCommand>

				return THT_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e007      	b.n	8002764 <SIM7600_init+0x1c8>
	for (size_t i = 0u; i < 60u; i++)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3301      	adds	r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b3b      	cmp	r3, #59	; 0x3b
 800275e:	f67f af74 	bls.w	800264a <SIM7600_init+0xae>
			}
		}
	}

	return THT_ERROR;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40004400 	.word	0x40004400
 8002770:	0800d61c 	.word	0x0800d61c
 8002774:	0800d624 	.word	0x0800d624
 8002778:	0800d634 	.word	0x0800d634
 800277c:	0800d638 	.word	0x0800d638
 8002780:	0800d640 	.word	0x0800d640
 8002784:	0800d64c 	.word	0x0800d64c
 8002788:	0800d650 	.word	0x0800d650
 800278c:	0800d65c 	.word	0x0800d65c
 8002790:	0800d668 	.word	0x0800d668
 8002794:	0800d674 	.word	0x0800d674
 8002798:	0800d680 	.word	0x0800d680
 800279c:	0800d68c 	.word	0x0800d68c
 80027a0:	0800d698 	.word	0x0800d698
 80027a4:	0800d6a8 	.word	0x0800d6a8
 80027a8:	0800d6c0 	.word	0x0800d6c0
 80027ac:	0800d6cc 	.word	0x0800d6cc
 80027b0:	0800d6d8 	.word	0x0800d6d8
 80027b4:	0800d6ec 	.word	0x0800d6ec

080027b8 <SIM7600_setFunction>:
 * 				@arg: SIM_MODE_RESET
 * 				@arg: SIM_MODE_OFFLINE
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_setFunction(SIM7600_HandleTypeDef *const me, uint8_t mode)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <SIM7600_setFunction+0x16>
	{
		return THT_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e018      	b.n	8002800 <SIM7600_setFunction+0x48>
	}

	char command[10] = {0};
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	809a      	strh	r2, [r3, #4]
	snprintf(command, sizeof(command), "AT+CFUN=%d", mode);
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f107 000c 	add.w	r0, r7, #12
 80027e2:	4a09      	ldr	r2, [pc, #36]	; (8002808 <SIM7600_setFunction+0x50>)
 80027e4:	210a      	movs	r1, #10
 80027e6:	f007 fdbb 	bl	800a360 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 9000);
 80027ea:	f107 010c 	add.w	r1, r7, #12
 80027ee:	f242 3328 	movw	r3, #9000	; 0x2328
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <SIM7600_setFunction+0x54>)
 80027f6:	4a06      	ldr	r2, [pc, #24]	; (8002810 <SIM7600_setFunction+0x58>)
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fd9b 	bl	8002334 <SIM7600_sendATCommand>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	0800d6f8 	.word	0x0800d6f8
 800280c:	0800d61c 	.word	0x0800d61c
 8002810:	0800d624 	.word	0x0800d624

08002814 <SIM7600_process>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_process(SIM7600_HandleTypeDef *const me)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d079      	beq.n	8002916 <SIM7600_process+0x102>
	{
		return;
	}

	/* If sim card is removed or not fit */
	if (SIM_GET_FLAG(&me->parent, SIM_FLAG_SRMV))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b10      	cmp	r3, #16
 800282c:	d160      	bne.n	80028f0 <SIM7600_process+0xdc>
	{
		printf("Simcard removed. Reconnect Simcard\n");
 800282e:	483c      	ldr	r0, [pc, #240]	; (8002920 <SIM7600_process+0x10c>)
 8002830:	f007 fd8e 	bl	800a350 <puts>
		SIM7600_wakeup(me);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fe1f 	bl	8002478 <SIM7600_wakeup>

		/* Minimize function of SIM */
		SIM7600_setFunction(me, SIM_MODE_MINIMUM);
 800283a:	2100      	movs	r1, #0
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ffbb 	bl	80027b8 <SIM7600_setFunction>
		HAL_Delay(1000UL);
 8002842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002846:	f002 fd5f 	bl	8005308 <HAL_Delay>

		/* Enable all functions of module to reconnect sim card if the sim card is plugged */
		if (THT_OK == SIM7600_setFunction(me, SIM_MODE_FULL))
 800284a:	2101      	movs	r1, #1
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffb3 	bl	80027b8 <SIM7600_setFunction>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <SIM7600_process+0x50>
		{
			SIM_CLR_FLAG(&me->parent, SIM_FLAG_SRMV);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0210 	bic.w	r2, r3, #16
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	601a      	str	r2, [r3, #0]
		}

		uint32_t tickStart = HAL_GetTick();
 8002864:	f002 fd44 	bl	80052f0 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

		char nwType[SIM_NWTYPE_SIZE] = {0};
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]

		while (HAL_GetTick() - tickStart < 15000u)
 800287a:	e02d      	b.n	80028d8 <SIM7600_process+0xc4>
		{
			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 1000) || THT_OK == SIM7600_getNetworkType(me, nwType, SIM_NWTYPE_SIZE))
 800287c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <SIM7600_process+0x110>)
 8002884:	4a28      	ldr	r2, [pc, #160]	; (8002928 <SIM7600_process+0x114>)
 8002886:	4929      	ldr	r1, [pc, #164]	; (800292c <SIM7600_process+0x118>)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fd53 	bl	8002334 <SIM7600_sendATCommand>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <SIM7600_process+0x94>
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2210      	movs	r2, #16
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fb63 	bl	8002f68 <SIM7600_getNetworkType>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d117      	bne.n	80028d8 <SIM7600_process+0xc4>
			{
				char *sPtr1 = strstr(nwType, "NO SERVICE");
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4920      	ldr	r1, [pc, #128]	; (8002930 <SIM7600_process+0x11c>)
 80028ae:	4618      	mov	r0, r3
 80028b0:	f007 fe97 	bl	800a5e2 <strstr>
 80028b4:	6238      	str	r0, [r7, #32]
				char *sPtr2 = strstr(nwType, "Unknown");
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	491e      	ldr	r1, [pc, #120]	; (8002934 <SIM7600_process+0x120>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f007 fe90 	bl	800a5e2 <strstr>
 80028c2:	61f8      	str	r0, [r7, #28]

				if (sPtr1 == NULL && sPtr2 == NULL)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <SIM7600_process+0xc4>
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d103      	bne.n	80028d8 <SIM7600_process+0xc4>
				{
					printf("Sim is connected\n\n");
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <SIM7600_process+0x124>)
 80028d2:	f007 fd3d 	bl	800a350 <puts>
					break; /* Break out of while loop */
 80028d6:	e008      	b.n	80028ea <SIM7600_process+0xd6>
		while (HAL_GetTick() - tickStart < 15000u)
 80028d8:	f002 fd0a 	bl	80052f0 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f643 2297 	movw	r2, #14999	; 0x3a97
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d9c8      	bls.n	800287c <SIM7600_process+0x68>
				}
			}
		}

		SIM7600_sleep(me);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fe2e 	bl	800254c <SIM7600_sleep>
	}

	/* If error in communition */
	if (me->parent.timeoutCnt >= 10u)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d90e      	bls.n	8002918 <SIM7600_process+0x104>
	{
		printf("Timeout over 10 times. Reset module SIM\n\n");
 80028fa:	4810      	ldr	r0, [pc, #64]	; (800293c <SIM7600_process+0x128>)
 80028fc:	f007 fd28 	bl	800a350 <puts>
		//		SIM7600_wakeup(me);
		//		SIM7600_RESET_ON(me);
		SIM7600_init(me);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe4b 	bl	800259c <SIM7600_init>
		SIM7600_sleep(me);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fe20 	bl	800254c <SIM7600_sleep>
		me->parent.timeoutCnt = 0u;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 8002914:	e000      	b.n	8002918 <SIM7600_process+0x104>
		return;
 8002916:	bf00      	nop
	}
}
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	0800d704 	.word	0x0800d704
 8002924:	0800d61c 	.word	0x0800d61c
 8002928:	0800d624 	.word	0x0800d624
 800292c:	0800d640 	.word	0x0800d640
 8002930:	0800d728 	.word	0x0800d728
 8002934:	0800d734 	.word	0x0800d734
 8002938:	0800d73c 	.word	0x0800d73c
 800293c:	0800d750 	.word	0x0800d750

08002940 <SIM7600_checkEvent>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_checkEvent(SIM7600_HandleTypeDef *const me, uint16_t size)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d05d      	beq.n	8002a0e <SIM7600_checkEvent+0xce>
	{
		return;
	}

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3308      	adds	r3, #8
 800295c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8002960:	4619      	mov	r1, r3
 8002962:	f005 faf8 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]

	SIM_SET_FLAG(&me->parent, SIM_FLAG_RX);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]

	if (strstr(me->parent.buffer, SIM_URC_SMS) != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3308      	adds	r3, #8
 800298e:	4922      	ldr	r1, [pc, #136]	; (8002a18 <SIM7600_checkEvent+0xd8>)
 8002990:	4618      	mov	r0, r3
 8002992:	f007 fe26 	bl	800a5e2 <strstr>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01d      	beq.n	80029d8 <SIM7600_checkEvent+0x98>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SMS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]

		char *sPtr = strstr(me->parent.buffer, "\"SM\",");
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3308      	adds	r3, #8
 80029ac:	491b      	ldr	r1, [pc, #108]	; (8002a1c <SIM7600_checkEvent+0xdc>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f007 fe17 	bl	800a5e2 <strstr>
 80029b4:	60f8      	str	r0, [r7, #12]

		if (sPtr != NULL && size >= 5u)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d029      	beq.n	8002a10 <SIM7600_checkEvent+0xd0>
 80029bc:	887b      	ldrh	r3, [r7, #2]
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d926      	bls.n	8002a10 <SIM7600_checkEvent+0xd0>
		{
			me->smsPos = atoi(sPtr + 5u);// xxx: size?
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3305      	adds	r3, #5
 80029c6:	4618      	mov	r0, r3
 80029c8:	f006 fe98 	bl	80096fc <atoi>
 80029cc:	4603      	mov	r3, r0
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80029d6:	e01b      	b.n	8002a10 <SIM7600_checkEvent+0xd0>
	}
	// else if (strstr(me->parent.buffer, SIM_URC_AUDIO_STOP) != NULL)
	// {
	// 	SIM_SET_FLAG(&me->parent, SIM_FLAG_AUDIO_STOP);
	// }
	else if (strstr(me->parent.buffer, SIM_URC_SIMCARD_UNPLUGIN) != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3308      	adds	r3, #8
 80029dc:	4910      	ldr	r1, [pc, #64]	; (8002a20 <SIM7600_checkEvent+0xe0>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f007 fdff 	bl	800a5e2 <strstr>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d012      	beq.n	8002a10 <SIM7600_checkEvent+0xd0>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SRMV);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
		memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3308      	adds	r3, #8
 80029fa:	f44f 720c 	mov.w	r2, #560	; 0x230
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f007 fdd9 	bl	800a5b8 <memset>
		printf("Sim removed!\n\n");
 8002a06:	4807      	ldr	r0, [pc, #28]	; (8002a24 <SIM7600_checkEvent+0xe4>)
 8002a08:	f007 fca2 	bl	800a350 <puts>
 8002a0c:	e000      	b.n	8002a10 <SIM7600_checkEvent+0xd0>
		return;
 8002a0e:	bf00      	nop
	}
}
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	0800d77c 	.word	0x0800d77c
 8002a1c:	0800d78c 	.word	0x0800d78c
 8002a20:	0800d794 	.word	0x0800d794
 8002a24:	0800d7ac 	.word	0x0800d7ac

08002a28 <SIM7600_readSMS>:
 * @param pSMS [out] Pointer to SMS data structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readSMS(SIM7600_HandleTypeDef *const me, const uint8_t order,
								  SIM_SMSTypeDef *pSMS)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	460b      	mov	r3, r1
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	72fb      	strb	r3, [r7, #11]
	if (me == NULL || pSMS == NULL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <SIM7600_readSMS+0x1a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <SIM7600_readSMS+0x1e>
	{
		return THT_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e064      	b.n	8002b10 <SIM7600_readSMS+0xe8>
	enum Enum
	{
		COMMAND_SIZE = 15
	};

	char command[COMMAND_SIZE] = {0};
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	f8c3 2007 	str.w	r2, [r3, #7]

	/* Clear the buffer */
	memset(pSMS->phone, '\0', SIM_PHONE_SIZE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	220d      	movs	r2, #13
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f007 fdaa 	bl	800a5b8 <memset>
	memset(pSMS->time, '\0', SIM_TIME_SIZE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	330d      	adds	r3, #13
 8002a68:	2216      	movs	r2, #22
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 fda3 	bl	800a5b8 <memset>
	memset(pSMS->content, '\0', SIM_SMS_SIZE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3323      	adds	r3, #35	; 0x23
 8002a76:	22a0      	movs	r2, #160	; 0xa0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f007 fd9c 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+CMGRD=%u", order);
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f107 0010 	add.w	r0, r7, #16
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <SIM7600_readSMS+0xf0>)
 8002a88:	210f      	movs	r1, #15
 8002a8a:	f007 fc69 	bl	800a360 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002a8e:	f107 0110 	add.w	r1, r7, #16
 8002a92:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <SIM7600_readSMS+0xf4>)
 8002a9a:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <SIM7600_readSMS+0xf8>)
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fc49 	bl	8002334 <SIM7600_sendATCommand>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (THT_OK == status)
 8002aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12d      	bne.n	8002b0c <SIM7600_readSMS+0xe4>
	{
		/* Copy the phonenumber, time and and content of SMS */
		char *sPtr = strstr(me->parent.buffer, "\",\"");
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	491b      	ldr	r1, [pc, #108]	; (8002b24 <SIM7600_readSMS+0xfc>)
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f007 fd93 	bl	800a5e2 <strstr>
 8002abc:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 4, pSMS->phone, SIM_PHONE_SIZE, "\"");
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	1d18      	adds	r0, r3, #4
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <SIM7600_readSMS+0x100>)
 8002ac6:	220d      	movs	r2, #13
 8002ac8:	f006 fdae 	bl	8009628 <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, ",\"2");
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <SIM7600_readSMS+0x104>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f007 fd85 	bl	800a5e2 <strstr>
 8002ad8:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 2, pSMS->time, SIM_TIME_SIZE, "\"");
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	1c98      	adds	r0, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f103 010d 	add.w	r1, r3, #13
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <SIM7600_readSMS+0x100>)
 8002ae6:	2216      	movs	r2, #22
 8002ae8:	f006 fd9e 	bl	8009628 <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, "\"\r\n");
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3308      	adds	r3, #8
 8002af0:	490f      	ldr	r1, [pc, #60]	; (8002b30 <SIM7600_readSMS+0x108>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f007 fd75 	bl	800a5e2 <strstr>
 8002af8:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 3, pSMS->content, SIM_SMS_SIZE, "\r");
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	1cd8      	adds	r0, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <SIM7600_readSMS+0x10c>)
 8002b06:	22a0      	movs	r2, #160	; 0xa0
 8002b08:	f006 fd8e 	bl	8009628 <THT_copyStringUntilToken>
	}

	return status;
 8002b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	0800d7bc 	.word	0x0800d7bc
 8002b1c:	0800d61c 	.word	0x0800d61c
 8002b20:	0800d624 	.word	0x0800d624
 8002b24:	0800d7c8 	.word	0x0800d7c8
 8002b28:	0800d7cc 	.word	0x0800d7cc
 8002b2c:	0800d7d0 	.word	0x0800d7d0
 8002b30:	0800d7d4 	.word	0x0800d7d4
 8002b34:	0800d7d8 	.word	0x0800d7d8

08002b38 <SIM7600_sendSMS>:
 * @param msgSize [in] the length of the SMS content
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendSMS(SIM7600_HandleTypeDef *const me, const char *pPhone, const char *pMsg,
								  uint8_t phoneSize, uint16_t msgSize)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b0c9      	sub	sp, #292	; 0x124
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8002b42:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8002b46:	6020      	str	r0, [r4, #0]
 8002b48:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8002b4c:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8002b50:	6001      	str	r1, [r0, #0]
 8002b52:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8002b56:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8002b5a:	600a      	str	r2, [r1, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b62:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8002b66:	701a      	strb	r2, [r3, #0]
	if (me == NULL || pPhone == NULL || pMsg == NULL ||
 8002b68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <SIM7600_sendSMS+0x70>
 8002b76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b7a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d011      	beq.n	8002ba8 <SIM7600_sendSMS+0x70>
 8002b84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <SIM7600_sendSMS+0x70>
 8002b92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b96:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b0d      	cmp	r3, #13
 8002b9e:	d803      	bhi.n	8002ba8 <SIM7600_sendSMS+0x70>
		phoneSize > SIM_PHONE_SIZE || msgSize == 0)
 8002ba0:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <SIM7600_sendSMS+0x74>
	{
		return THT_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0ec      	b.n	8002d86 <SIM7600_sendSMS+0x24e>
		MAX_SMS_LENGTH = 160u,
		MAX_SMS_SEGMENT_LENGTH = 146u,
		CTRL_Z_CHARACTER = 0x1A
	};

	char command[COMMAND_SIZE] = {0};
 8002bac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	22f6      	movs	r2, #246	; 0xf6
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f007 fcfa 	bl	800a5b8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002bc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bc8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8002bcc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <SIM7600_sendSMS+0x258>)
 8002bd4:	4a6f      	ldr	r2, [pc, #444]	; (8002d94 <SIM7600_sendSMS+0x25c>)
 8002bd6:	4970      	ldr	r1, [pc, #448]	; (8002d98 <SIM7600_sendSMS+0x260>)
 8002bd8:	6800      	ldr	r0, [r0, #0]
 8002bda:	f7ff fbab 	bl	8002334 <SIM7600_sendATCommand>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Send SMS */
	if (msgSize < MAX_SMS_LENGTH)
 8002be4:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8002be8:	2b9f      	cmp	r3, #159	; 0x9f
 8002bea:	d83f      	bhi.n	8002c6c <SIM7600_sendSMS+0x134>
	{
		snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", pPhone);
 8002bec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002bf4:	f107 0014 	add.w	r0, r7, #20
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a68      	ldr	r2, [pc, #416]	; (8002d9c <SIM7600_sendSMS+0x264>)
 8002bfc:	21fa      	movs	r1, #250	; 0xfa
 8002bfe:	f007 fbaf 	bl	800a360 <sniprintf>

		status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 8002c02:	f107 0114 	add.w	r1, r7, #20
 8002c06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c0a:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8002c0e:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <SIM7600_sendSMS+0x258>)
 8002c16:	4a62      	ldr	r2, [pc, #392]	; (8002da0 <SIM7600_sendSMS+0x268>)
 8002c18:	6800      	ldr	r0, [r0, #0]
 8002c1a:	f7ff fb8b 	bl	8002334 <SIM7600_sendATCommand>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (THT_OK == status)
 8002c24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 80aa 	bne.w	8002d82 <SIM7600_sendSMS+0x24a>
		{
			snprintf(command, sizeof(command), "%s%c", pMsg, CTRL_Z_CHARACTER);
 8002c2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c36:	f107 0014 	add.w	r0, r7, #20
 8002c3a:	221a      	movs	r2, #26
 8002c3c:	9200      	str	r2, [sp, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a58      	ldr	r2, [pc, #352]	; (8002da4 <SIM7600_sendSMS+0x26c>)
 8002c42:	21fa      	movs	r1, #250	; 0xfa
 8002c44:	f007 fb8c 	bl	800a360 <sniprintf>
			status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002c48:	f107 0114 	add.w	r1, r7, #20
 8002c4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002c50:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8002c54:	f242 7310 	movw	r3, #10000	; 0x2710
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <SIM7600_sendSMS+0x258>)
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <SIM7600_sendSMS+0x25c>)
 8002c5e:	6800      	ldr	r0, [r0, #0]
 8002c60:	f7ff fb68 	bl	8002334 <SIM7600_sendATCommand>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8002c6a:	e08a      	b.n	8002d82 <SIM7600_sendSMS+0x24a>
		}
	}
	/* Send long SMS */
	else
	{
		uint8_t smsSegmentSize = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		uint8_t totalSms = (msgSize / MAX_SMS_SEGMENT_LENGTH) + 1;
 8002c72:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8002c76:	085b      	lsrs	r3, r3, #1
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <SIM7600_sendSMS+0x270>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		/* Split and send SMS messages one by one */
		for (size_t seg = 1; seg <= totalSms; seg++)
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002c90:	e071      	b.n	8002d76 <SIM7600_sendSMS+0x23e>
		{
			if (msgSize < MAX_SMS_SEGMENT_LENGTH)
 8002c92:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8002c96:	2b91      	cmp	r3, #145	; 0x91
 8002c98:	d804      	bhi.n	8002ca4 <SIM7600_sendSMS+0x16c>
			{
				smsSegmentSize = msgSize;
 8002c9a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8002c9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002ca2:	e002      	b.n	8002caa <SIM7600_sendSMS+0x172>
			}
			else
			{
				smsSegmentSize = MAX_SMS_SEGMENT_LENGTH;
 8002ca4:	2392      	movs	r3, #146	; 0x92
 8002ca6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			}

			snprintf(command, sizeof(command), "AT+CMGSEX=\"%s\",190,%u,%u",
 8002caa:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8002cae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cb6:	f107 0014 	add.w	r0, r7, #20
 8002cba:	9201      	str	r2, [sp, #4]
 8002cbc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002cc0:	9200      	str	r2, [sp, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a39      	ldr	r2, [pc, #228]	; (8002dac <SIM7600_sendSMS+0x274>)
 8002cc6:	21fa      	movs	r1, #250	; 0xfa
 8002cc8:	f007 fb4a 	bl	800a360 <sniprintf>
					 pPhone, seg, totalSms);

			status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 8002ccc:	f107 0114 	add.w	r1, r7, #20
 8002cd0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002cd4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8002cd8:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <SIM7600_sendSMS+0x258>)
 8002ce0:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <SIM7600_sendSMS+0x268>)
 8002ce2:	6800      	ldr	r0, [r0, #0]
 8002ce4:	f7ff fb26 	bl	8002334 <SIM7600_sendATCommand>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

			if (THT_OK == status)
 8002cee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13a      	bne.n	8002d6c <SIM7600_sendSMS+0x234>
			{
				memset(command, '\0', sizeof(command));
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	22fa      	movs	r2, #250	; 0xfa
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f007 fc5a 	bl	800a5b8 <memset>
				memcpy(command, pMsg + (seg - 1) * MAX_SMS_SEGMENT_LENGTH,
 8002d04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d08:	2292      	movs	r2, #146	; 0x92
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	3b92      	subs	r3, #146	; 0x92
 8002d10:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002d14:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	18d1      	adds	r1, r2, r3
 8002d1c:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8002d20:	f107 0314 	add.w	r3, r7, #20
 8002d24:	4618      	mov	r0, r3
 8002d26:	f007 fcea 	bl	800a6fe <memcpy>
					   smsSegmentSize);
				command[smsSegmentSize] = CTRL_Z_CHARACTER;
 8002d2a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002d2e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002d32:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002d36:	211a      	movs	r1, #26
 8002d38:	54d1      	strb	r1, [r2, r3]
				status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002d3a:	f107 0114 	add.w	r1, r7, #20
 8002d3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d42:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8002d46:	f242 7310 	movw	r3, #10000	; 0x2710
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <SIM7600_sendSMS+0x258>)
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <SIM7600_sendSMS+0x25c>)
 8002d50:	6800      	ldr	r0, [r0, #0]
 8002d52:	f7ff faef 	bl	8002334 <SIM7600_sendATCommand>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				msgSize -= smsSegmentSize;
 8002d5c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
		for (size_t seg = 1; seg <= totalSms; seg++)
 8002d6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d70:	3301      	adds	r3, #1
 8002d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002d76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002d7a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d987      	bls.n	8002c92 <SIM7600_sendSMS+0x15a>
			}
		}
	}

	return status;
 8002d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd90      	pop	{r4, r7, pc}
 8002d90:	0800d61c 	.word	0x0800d61c
 8002d94:	0800d624 	.word	0x0800d624
 8002d98:	0800d6cc 	.word	0x0800d6cc
 8002d9c:	0800d7dc 	.word	0x0800d7dc
 8002da0:	0800d7ec 	.word	0x0800d7ec
 8002da4:	0800d7f0 	.word	0x0800d7f0
 8002da8:	e070381d 	.word	0xe070381d
 8002dac:	0800d7f8 	.word	0x0800d7f8

08002db0 <SIM7600_getSMSCounter>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getSMSCounter(SIM7600_HandleTypeDef *const me)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <SIM7600_getSMSCounter+0x12>
	{
		return THT_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e032      	b.n	8002e28 <SIM7600_getSMSCounter+0x78>
	}

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002dc2:	f242 7310 	movw	r3, #10000	; 0x2710
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <SIM7600_getSMSCounter+0x80>)
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <SIM7600_getSMSCounter+0x84>)
 8002dcc:	491a      	ldr	r1, [pc, #104]	; (8002e38 <SIM7600_getSMSCounter+0x88>)
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fab0 	bl	8002334 <SIM7600_sendATCommand>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

	if (THT_OK == status)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d123      	bne.n	8002e26 <SIM7600_getSMSCounter+0x76>
	{
		char *sPtr = strstr(me->parent.buffer, ": ");
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3308      	adds	r3, #8
 8002de2:	4916      	ldr	r1, [pc, #88]	; (8002e3c <SIM7600_getSMSCounter+0x8c>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 fbfc 	bl	800a5e2 <strstr>
 8002dea:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <SIM7600_getSMSCounter+0x56>
		{
			me->smsCnt = atoi(sPtr + 2);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3302      	adds	r3, #2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f006 fc80 	bl	80096fc <atoi>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	b25a      	sxtb	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
		}

		if (me->smsCnt > me->smsPos)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f993 22c9 	ldrsb.w	r2, [r3, #713]	; 0x2c9
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8002e12:	429a      	cmp	r2, r3
 8002e14:	dd03      	ble.n	8002e1e <SIM7600_getSMSCounter+0x6e>
		{
			return me->smsCnt;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f993 32c9 	ldrsb.w	r3, [r3, #713]	; 0x2c9
 8002e1c:	e004      	b.n	8002e28 <SIM7600_getSMSCounter+0x78>
		}
		else
		{
			return me->smsPos;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8002e24:	e000      	b.n	8002e28 <SIM7600_getSMSCounter+0x78>
		}
	}

	return 0u;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	0800d61c 	.word	0x0800d61c
 8002e34:	0800d624 	.word	0x0800d624
 8002e38:	0800d6a8 	.word	0x0800d6a8
 8002e3c:	0800d814 	.word	0x0800d814

08002e40 <SIM7600_callUSSD>:
 * @param response [out] a buffer to store the response of the USSD request
 * @param size [in]
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_callUSSD(SIM7600_HandleTypeDef *const me, const char *ussd, char response[], const uint16_t size)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	; 0x48
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	807b      	strh	r3, [r7, #2]
	if (me == NULL || ussd == NULL)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <SIM7600_callUSSD+0x1a>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <SIM7600_callUSSD+0x1e>
	{
		return THT_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e039      	b.n	8002ed2 <SIM7600_callUSSD+0x92>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f007 fba4 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+CUSD=1,\"%s\",15", ussd);
 8002e70:	f107 0010 	add.w	r0, r7, #16
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a19      	ldr	r2, [pc, #100]	; (8002edc <SIM7600_callUSSD+0x9c>)
 8002e78:	2128      	movs	r1, #40	; 0x28
 8002e7a:	f007 fa71 	bl	800a360 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, ",15", SIM_URC_ERROR, 15000);
 8002e7e:	f107 0110 	add.w	r1, r7, #16
 8002e82:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <SIM7600_callUSSD+0xa0>)
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <SIM7600_callUSSD+0xa4>)
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fa51 	bl	8002334 <SIM7600_sendATCommand>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (THT_OK == status)
 8002e98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <SIM7600_callUSSD+0x8e>
	{
		char *sPtr = strstr(me->parent.buffer, ",\"");
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	4910      	ldr	r1, [pc, #64]	; (8002ee8 <SIM7600_callUSSD+0xa8>)
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f007 fb9b 	bl	800a5e2 <strstr>
 8002eac:	63b8      	str	r0, [r7, #56]	; 0x38

		THT_copyStringUntilToken(sPtr + 1, response, size, NULL);
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	1c58      	adds	r0, r3, #1
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	f006 fbb6 	bl	8009628 <THT_copyStringUntilToken>
		SIM7600_sendATCommand(me, "AT+CUSD=2,\"\",15", SIM_URC_OK, SIM_URC_ERROR, 15000);
 8002ebc:	f643 2398 	movw	r3, #15000	; 0x3a98
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <SIM7600_callUSSD+0xa0>)
 8002ec4:	4a09      	ldr	r2, [pc, #36]	; (8002eec <SIM7600_callUSSD+0xac>)
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <SIM7600_callUSSD+0xb0>)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fa33 	bl	8002334 <SIM7600_sendATCommand>
	}
	return status;
 8002ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3740      	adds	r7, #64	; 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	0800d818 	.word	0x0800d818
 8002ee0:	0800d61c 	.word	0x0800d61c
 8002ee4:	0800d82c 	.word	0x0800d82c
 8002ee8:	0800d830 	.word	0x0800d830
 8002eec:	0800d624 	.word	0x0800d624
 8002ef0:	0800d834 	.word	0x0800d834

08002ef4 <SIM7600_getRSSI>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getRSSI(SIM7600_HandleTypeDef *const me)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <SIM7600_getRSSI+0x12>
	{
		return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e025      	b.n	8002f52 <SIM7600_getRSSI+0x5e>
	}

	int8_t rssi = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CSQ", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002f0a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <SIM7600_getRSSI+0x68>)
 8002f12:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <SIM7600_getRSSI+0x6c>)
 8002f14:	4913      	ldr	r1, [pc, #76]	; (8002f64 <SIM7600_getRSSI+0x70>)
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fa0c 	bl	8002334 <SIM7600_sendATCommand>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <SIM7600_getRSSI+0x5a>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	2120      	movs	r1, #32
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f007 fb4b 	bl	800a5c8 <strchr>
 8002f32:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <SIM7600_getRSSI+0x5a>
		{
			rssi = (2u * atoi(sPtr)) - 113u;
 8002f3a:	68b8      	ldr	r0, [r7, #8]
 8002f3c:	f006 fbde 	bl	80096fc <atoi>
 8002f40:	4603      	mov	r3, r0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3b71      	subs	r3, #113	; 0x71
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rssi;
 8002f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	0800d61c 	.word	0x0800d61c
 8002f60:	0800d624 	.word	0x0800d624
 8002f64:	0800d844 	.word	0x0800d844

08002f68 <SIM7600_getNetworkType>:
 * @param pNwtype [out] A buffer to store the string network type
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getNetworkType(SIM7600_HandleTypeDef *const me, char pNwtype[], const uint8_t size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pNwtype == NULL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <SIM7600_getNetworkType+0x1a>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <SIM7600_getNetworkType+0x1e>
	{
		return THT_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e061      	b.n	800304a <SIM7600_getNetworkType+0xe2>
	}

	memset(pNwtype, '\0', size);
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	68b8      	ldr	r0, [r7, #8]
 8002f8e:	f007 fb13 	bl	800a5b8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002f92:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <SIM7600_getNetworkType+0xec>)
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <SIM7600_getNetworkType+0xf0>)
 8002f9c:	492f      	ldr	r1, [pc, #188]	; (800305c <SIM7600_getNetworkType+0xf4>)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff f9c8 	bl	8002334 <SIM7600_sendATCommand>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]

	if (THT_OK == status)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d146      	bne.n	800303c <SIM7600_getNetworkType+0xd4>
	{
		if (strstr(me->parent.buffer, "LTE") != NULL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	492b      	ldr	r1, [pc, #172]	; (8003060 <SIM7600_getNetworkType+0xf8>)
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f007 fb14 	bl	800a5e2 <strstr>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <SIM7600_getNetworkType+0x66>
		{
			snprintf(pNwtype, size, "LTE");
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	4a27      	ldr	r2, [pc, #156]	; (8003060 <SIM7600_getNetworkType+0xf8>)
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68b8      	ldr	r0, [r7, #8]
 8002fc8:	f007 f9ca 	bl	800a360 <sniprintf>
 8002fcc:	e03c      	b.n	8003048 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "WCDMA") != NULL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	4924      	ldr	r1, [pc, #144]	; (8003064 <SIM7600_getNetworkType+0xfc>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f007 fb04 	bl	800a5e2 <strstr>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <SIM7600_getNetworkType+0x86>
		{
			snprintf(pNwtype, size, "WCDMA");
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	4a20      	ldr	r2, [pc, #128]	; (8003064 <SIM7600_getNetworkType+0xfc>)
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	68b8      	ldr	r0, [r7, #8]
 8002fe8:	f007 f9ba 	bl	800a360 <sniprintf>
 8002fec:	e02c      	b.n	8003048 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "GSM") != NULL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	491d      	ldr	r1, [pc, #116]	; (8003068 <SIM7600_getNetworkType+0x100>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f007 faf4 	bl	800a5e2 <strstr>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d006      	beq.n	800300e <SIM7600_getNetworkType+0xa6>
		{
			snprintf(pNwtype, size, "GSM");
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <SIM7600_getNetworkType+0x100>)
 8003004:	4619      	mov	r1, r3
 8003006:	68b8      	ldr	r0, [r7, #8]
 8003008:	f007 f9aa 	bl	800a360 <sniprintf>
 800300c:	e01c      	b.n	8003048 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "NO SERVICE") != NULL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3308      	adds	r3, #8
 8003012:	4916      	ldr	r1, [pc, #88]	; (800306c <SIM7600_getNetworkType+0x104>)
 8003014:	4618      	mov	r0, r3
 8003016:	f007 fae4 	bl	800a5e2 <strstr>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <SIM7600_getNetworkType+0xc6>
		{
			snprintf(pNwtype, size, "NO SERVICE");
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <SIM7600_getNetworkType+0x104>)
 8003024:	4619      	mov	r1, r3
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f007 f99a 	bl	800a360 <sniprintf>
 800302c:	e00c      	b.n	8003048 <SIM7600_getNetworkType+0xe0>
		}
		else
		{
			snprintf(pNwtype, size, "Unknown");
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <SIM7600_getNetworkType+0x108>)
 8003032:	4619      	mov	r1, r3
 8003034:	68b8      	ldr	r0, [r7, #8]
 8003036:	f007 f993 	bl	800a360 <sniprintf>
 800303a:	e005      	b.n	8003048 <SIM7600_getNetworkType+0xe0>
		}
	}
	else
	{
		snprintf(pNwtype, size, "Unknown");
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <SIM7600_getNetworkType+0x108>)
 8003040:	4619      	mov	r1, r3
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	f007 f98c 	bl	800a360 <sniprintf>
	}

	return status;
 8003048:	7dfb      	ldrb	r3, [r7, #23]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0800d61c 	.word	0x0800d61c
 8003058:	0800d624 	.word	0x0800d624
 800305c:	0800d84c 	.word	0x0800d84c
 8003060:	0800d858 	.word	0x0800d858
 8003064:	0800d85c 	.word	0x0800d85c
 8003068:	0800d864 	.word	0x0800d864
 800306c:	0800d728 	.word	0x0800d728
 8003070:	0800d734 	.word	0x0800d734

08003074 <SIM7600_getTemperature>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getTemperature(SIM7600_HandleTypeDef *const me)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <SIM7600_getTemperature+0x12>
	{
		return THT_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e022      	b.n	80030cc <SIM7600_getTemperature+0x58>
	}

	int8_t temperature = 0.0f;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMUTEMP", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800308a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <SIM7600_getTemperature+0x60>)
 8003092:	4a11      	ldr	r2, [pc, #68]	; (80030d8 <SIM7600_getTemperature+0x64>)
 8003094:	4911      	ldr	r1, [pc, #68]	; (80030dc <SIM7600_getTemperature+0x68>)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff f94c 	bl	8002334 <SIM7600_sendATCommand>
 800309c:	4603      	mov	r3, r0
 800309e:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 80030a0:	7bbb      	ldrb	r3, [r7, #14]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <SIM7600_getTemperature+0x54>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3308      	adds	r3, #8
 80030aa:	2120      	movs	r1, #32
 80030ac:	4618      	mov	r0, r3
 80030ae:	f007 fa8b 	bl	800a5c8 <strchr>
 80030b2:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <SIM7600_getTemperature+0x54>
		{
			temperature = atoi(sPtr + 1);
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f006 fb1c 	bl	80096fc <atoi>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
		}
	}

	return temperature;
 80030c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	0800d61c 	.word	0x0800d61c
 80030d8:	0800d624 	.word	0x0800d624
 80030dc:	0800d868 	.word	0x0800d868

080030e0 <SIM7600_getSimPhone>:
 * @param pPhone [out] A buffer to store the phone number
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getSimPhone(SIM7600_HandleTypeDef *const me, char pPhone[], const uint8_t size)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b0b0      	sub	sp, #192	; 0xc0
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pPhone == NULL || size < SIM_PHONE_SIZE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <SIM7600_getSimPhone+0x20>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <SIM7600_getSimPhone+0x20>
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d801      	bhi.n	8003104 <SIM7600_getSimPhone+0x24>
	{
		return THT_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d1      	b.n	80032a8 <SIM7600_getSimPhone+0x1c8>
	enum Enum
	{
		USSD_BUFFER_SIZE = 150
	};

	memset(pPhone, '\0', size);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	461a      	mov	r2, r3
 8003108:	2100      	movs	r1, #0
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f007 fa54 	bl	800a5b8 <memset>

	uint8_t counter = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	char ussdResponse[USSD_BUFFER_SIZE] = {0};
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	2292      	movs	r2, #146	; 0x92
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f007 fa48 	bl	800a5b8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+COPS?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8003128:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4b60      	ldr	r3, [pc, #384]	; (80032b0 <SIM7600_getSimPhone+0x1d0>)
 8003130:	4a60      	ldr	r2, [pc, #384]	; (80032b4 <SIM7600_getSimPhone+0x1d4>)
 8003132:	4961      	ldr	r1, [pc, #388]	; (80032b8 <SIM7600_getSimPhone+0x1d8>)
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff f8fd 	bl	8002334 <SIM7600_sendATCommand>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

	if (THT_OK == status)
 8003140:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 80ad 	bne.w	80032a4 <SIM7600_getSimPhone+0x1c4>
	{
		/* "\r\n+COPS: 0,0,\"Viettel Viettel\",7\r\n\r\nOK\r\n" */
		do
		{
			/* Check if sim is Viettel Operator */
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3308      	adds	r3, #8
 800314e:	495b      	ldr	r1, [pc, #364]	; (80032bc <SIM7600_getSimPhone+0x1dc>)
 8003150:	4618      	mov	r0, r3
 8003152:	f007 fa46 	bl	800a5e2 <strstr>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <SIM7600_getSimPhone+0x8e>
				strstr(me->parent.buffer, "VIETTEL") != NULL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3308      	adds	r3, #8
 8003160:	4957      	ldr	r1, [pc, #348]	; (80032c0 <SIM7600_getSimPhone+0x1e0>)
 8003162:	4618      	mov	r0, r3
 8003164:	f007 fa3d 	bl	800a5e2 <strstr>
 8003168:	4603      	mov	r3, r0
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800316a:	2b00      	cmp	r3, #0
 800316c:	d025      	beq.n	80031ba <SIM7600_getSimPhone+0xda>
			{
				status = SIM7600_callUSSD(me, "*098#", ussdResponse, sizeof(ussdResponse));
 800316e:	f107 0210 	add.w	r2, r7, #16
 8003172:	2396      	movs	r3, #150	; 0x96
 8003174:	4953      	ldr	r1, [pc, #332]	; (80032c4 <SIM7600_getSimPhone+0x1e4>)
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff fe62 	bl	8002e40 <SIM7600_callUSSD>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 8003182:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003186:	2b00      	cmp	r3, #0
 8003188:	d17e      	bne.n	8003288 <SIM7600_getSimPhone+0x1a8>
				{
					/* "Moi 01699741245 chon: */
					memcpy(pPhone, "84", 2);
 800318a:	2202      	movs	r2, #2
 800318c:	494e      	ldr	r1, [pc, #312]	; (80032c8 <SIM7600_getSimPhone+0x1e8>)
 800318e:	68b8      	ldr	r0, [r7, #8]
 8003190:	f007 fab5 	bl	800a6fe <memcpy>

					char *sPtr = strstr(ussdResponse, " ");
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	2120      	movs	r1, #32
 800319a:	4618      	mov	r0, r3
 800319c:	f007 fa14 	bl	800a5c8 <strchr>
 80031a0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
					THT_copyStringUntilToken(sPtr + 2, pPhone + 2, size, " ");
 80031a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031a8:	1c98      	adds	r0, r3, #2
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1c99      	adds	r1, r3, #2
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	4b46      	ldr	r3, [pc, #280]	; (80032cc <SIM7600_getSimPhone+0x1ec>)
 80031b4:	f006 fa38 	bl	8009628 <THT_copyStringUntilToken>
				if (THT_OK == status)
 80031b8:	e066      	b.n	8003288 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Vina Operator */
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3308      	adds	r3, #8
 80031be:	4944      	ldr	r1, [pc, #272]	; (80032d0 <SIM7600_getSimPhone+0x1f0>)
 80031c0:	4618      	mov	r0, r3
 80031c2:	f007 fa0e 	bl	800a5e2 <strstr>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d108      	bne.n	80031de <SIM7600_getSimPhone+0xfe>
					 strstr(me->parent.buffer, "VINA") != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3308      	adds	r3, #8
 80031d0:	4940      	ldr	r1, [pc, #256]	; (80032d4 <SIM7600_getSimPhone+0x1f4>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f007 fa05 	bl	800a5e2 <strstr>
 80031d8:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d024      	beq.n	8003228 <SIM7600_getSimPhone+0x148>
			{
				status = SIM7600_callUSSD(me, "*110#", ussdResponse, sizeof(ussdResponse));
 80031de:	f107 0210 	add.w	r2, r7, #16
 80031e2:	2396      	movs	r3, #150	; 0x96
 80031e4:	493c      	ldr	r1, [pc, #240]	; (80032d8 <SIM7600_getSimPhone+0x1f8>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f7ff fe2a 	bl	8002e40 <SIM7600_callUSSD>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 80031f2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d146      	bne.n	8003288 <SIM7600_getSimPhone+0x1a8>
				{
					/* "TB (VINACARD):914486786 */
					memcpy(pPhone, "84", 2);
 80031fa:	2202      	movs	r2, #2
 80031fc:	4932      	ldr	r1, [pc, #200]	; (80032c8 <SIM7600_getSimPhone+0x1e8>)
 80031fe:	68b8      	ldr	r0, [r7, #8]
 8003200:	f007 fa7d 	bl	800a6fe <memcpy>
					char *sPtr = strstr(ussdResponse, ":");
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	213a      	movs	r1, #58	; 0x3a
 800320a:	4618      	mov	r0, r3
 800320c:	f007 f9dc 	bl	800a5c8 <strchr>
 8003210:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
					THT_copyStringUntilToken(sPtr, pPhone + 2, size, "\r");
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	1c99      	adds	r1, r3, #2
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b2f      	ldr	r3, [pc, #188]	; (80032dc <SIM7600_getSimPhone+0x1fc>)
 800321e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003222:	f006 fa01 	bl	8009628 <THT_copyStringUntilToken>
				if (THT_OK == status)
 8003226:	e02f      	b.n	8003288 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Mobifone Operator */
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3308      	adds	r3, #8
 800322c:	492c      	ldr	r1, [pc, #176]	; (80032e0 <SIM7600_getSimPhone+0x200>)
 800322e:	4618      	mov	r0, r3
 8003230:	f007 f9d7 	bl	800a5e2 <strstr>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d108      	bne.n	800324c <SIM7600_getSimPhone+0x16c>
					 strstr(me->parent.buffer, "Mobiphone") != NULL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3308      	adds	r3, #8
 800323e:	4929      	ldr	r1, [pc, #164]	; (80032e4 <SIM7600_getSimPhone+0x204>)
 8003240:	4618      	mov	r0, r3
 8003242:	f007 f9ce 	bl	800a5e2 <strstr>
 8003246:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01d      	beq.n	8003288 <SIM7600_getSimPhone+0x1a8>
			{
				status = SIM7600_callUSSD(me, "*0#", ussdResponse, sizeof(ussdResponse));
 800324c:	f107 0210 	add.w	r2, r7, #16
 8003250:	2396      	movs	r3, #150	; 0x96
 8003252:	4925      	ldr	r1, [pc, #148]	; (80032e8 <SIM7600_getSimPhone+0x208>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff fdf3 	bl	8002e40 <SIM7600_callUSSD>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 8003260:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10f      	bne.n	8003288 <SIM7600_getSimPhone+0x1a8>
				{
					/* "84914486786" */
					char *sPtr = strstr(ussdResponse, "84");
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	4916      	ldr	r1, [pc, #88]	; (80032c8 <SIM7600_getSimPhone+0x1e8>)
 800326e:	4618      	mov	r0, r3
 8003270:	f007 f9b7 	bl	800a5e2 <strstr>
 8003274:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					THT_copyStringUntilToken(sPtr, pPhone, size, "\r");
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <SIM7600_getSimPhone+0x1fc>)
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8003284:	f006 f9d0 	bl	8009628 <THT_copyStringUntilToken>
				}
			}
			counter++;
 8003288:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800328c:	3301      	adds	r3, #1
 800328e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		} while (counter < 3 && pPhone[0] == 0);
 8003292:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8003296:	2b02      	cmp	r3, #2
 8003298:	d804      	bhi.n	80032a4 <SIM7600_getSimPhone+0x1c4>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f43f af53 	beq.w	800314a <SIM7600_getSimPhone+0x6a>
	}

	return status;
 80032a4:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	37b8      	adds	r7, #184	; 0xb8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	0800d61c 	.word	0x0800d61c
 80032b4:	0800d624 	.word	0x0800d624
 80032b8:	0800d874 	.word	0x0800d874
 80032bc:	0800d880 	.word	0x0800d880
 80032c0:	0800d888 	.word	0x0800d888
 80032c4:	0800d890 	.word	0x0800d890
 80032c8:	0800d898 	.word	0x0800d898
 80032cc:	0800d89c 	.word	0x0800d89c
 80032d0:	0800d8a0 	.word	0x0800d8a0
 80032d4:	0800d8a8 	.word	0x0800d8a8
 80032d8:	0800d8b0 	.word	0x0800d8b0
 80032dc:	0800d7d8 	.word	0x0800d7d8
 80032e0:	0800d8b8 	.word	0x0800d8b8
 80032e4:	0800d8c0 	.word	0x0800d8c0
 80032e8:	0800d8cc 	.word	0x0800d8cc

080032ec <SIM7600_getIMEI>:
 * @param pIMEI [out] A buffer store the SIM IMEI string
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getIMEI(SIM7600_HandleTypeDef *const me, char pIMEI[], const uint8_t size)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pIMEI == NULL || size < SIM_IMEI_SIZE)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <SIM7600_getIMEI+0x20>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <SIM7600_getIMEI+0x20>
 8003306:	79fb      	ldrb	r3, [r7, #7]
 8003308:	2b0f      	cmp	r3, #15
 800330a:	d801      	bhi.n	8003310 <SIM7600_getIMEI+0x24>
	{
		return THT_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e02f      	b.n	8003370 <SIM7600_getIMEI+0x84>
	}

	memset(pIMEI, '\0', size);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	461a      	mov	r2, r3
 8003314:	2100      	movs	r1, #0
 8003316:	68b8      	ldr	r0, [r7, #8]
 8003318:	f007 f94e 	bl	800a5b8 <memset>

	uint8_t counter = 0;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
	THT_StatusTypeDef status;

	do
	{
		status = SIM7600_sendATCommand(me, "AT+SIMEI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8003320:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <SIM7600_getIMEI+0x8c>)
 8003328:	4a14      	ldr	r2, [pc, #80]	; (800337c <SIM7600_getIMEI+0x90>)
 800332a:	4915      	ldr	r1, [pc, #84]	; (8003380 <SIM7600_getIMEI+0x94>)
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff f801 	bl	8002334 <SIM7600_sendATCommand>
 8003332:	4603      	mov	r3, r0
 8003334:	75bb      	strb	r3, [r7, #22]

		if (THT_OK == status)
 8003336:	7dbb      	ldrb	r3, [r7, #22]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <SIM7600_getIMEI+0x6e>
		{
			char *sPtr = strstr(me->parent.buffer, " ");
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3308      	adds	r3, #8
 8003340:	2120      	movs	r1, #32
 8003342:	4618      	mov	r0, r3
 8003344:	f007 f940 	bl	800a5c8 <strchr>
 8003348:	6138      	str	r0, [r7, #16]
			THT_copyStringUntilToken(sPtr + 1, pIMEI, size, "\r");
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1c58      	adds	r0, r3, #1
 800334e:	79fb      	ldrb	r3, [r7, #7]
 8003350:	b29a      	uxth	r2, r3
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <SIM7600_getIMEI+0x98>)
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	f006 f967 	bl	8009628 <THT_copyStringUntilToken>
		}
		counter++;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	3301      	adds	r3, #1
 800335e:	75fb      	strb	r3, [r7, #23]
	} while (pIMEI[0] == 0 && counter < 3);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <SIM7600_getIMEI+0x82>
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d9d8      	bls.n	8003320 <SIM7600_getIMEI+0x34>

	return status;
 800336e:	7dbb      	ldrb	r3, [r7, #22]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	0800d61c 	.word	0x0800d61c
 800337c:	0800d624 	.word	0x0800d624
 8003380:	0800d8d0 	.word	0x0800d8d0
 8003384:	0800d7d8 	.word	0x0800d7d8

08003388 <SIM7600_getLocalTime>:
 * @param pTime [out] A buffer store the time string
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getLocalTime(SIM7600_HandleTypeDef *const me, char pTime[], const uint8_t size)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size < SIM_TIME_SIZE)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <SIM7600_getLocalTime+0x20>
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <SIM7600_getLocalTime+0x20>
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b15      	cmp	r3, #21
 80033a6:	d801      	bhi.n	80033ac <SIM7600_getLocalTime+0x24>
	{
		return THT_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e03e      	b.n	800342a <SIM7600_getLocalTime+0xa2>
	}

	uint8_t counter = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]

	memset(pTime, '\0', size);
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	461a      	mov	r2, r3
 80033b4:	2100      	movs	r1, #0
 80033b6:	68b8      	ldr	r0, [r7, #8]
 80033b8:	f007 f8fe 	bl	800a5b8 <memset>

	THT_StatusTypeDef status;
	do
	{
		status = SIM7600_sendATCommand(me, "AT+CCLK?", "+28", SIM_URC_ERROR, 3000);
 80033bc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <SIM7600_getLocalTime+0xac>)
 80033c4:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <SIM7600_getLocalTime+0xb0>)
 80033c6:	491d      	ldr	r1, [pc, #116]	; (800343c <SIM7600_getLocalTime+0xb4>)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7fe ffb3 	bl	8002334 <SIM7600_sendATCommand>
 80033ce:	4603      	mov	r3, r0
 80033d0:	75bb      	strb	r3, [r7, #22]

		if (status == THT_OK)
 80033d2:	7dbb      	ldrb	r3, [r7, #22]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d117      	bne.n	8003408 <SIM7600_getLocalTime+0x80>
		{
			if (strstr(me->parent.buffer, "80/0") == NULL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3308      	adds	r3, #8
 80033dc:	4918      	ldr	r1, [pc, #96]	; (8003440 <SIM7600_getLocalTime+0xb8>)
 80033de:	4618      	mov	r0, r3
 80033e0:	f007 f8ff 	bl	800a5e2 <strstr>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <SIM7600_getLocalTime+0x80>
			{
				char *sPtr = strstr(me->parent.buffer, "\"");
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3308      	adds	r3, #8
 80033ee:	2122      	movs	r1, #34	; 0x22
 80033f0:	4618      	mov	r0, r3
 80033f2:	f007 f8e9 	bl	800a5c8 <strchr>
 80033f6:	6138      	str	r0, [r7, #16]
				THT_copyStringUntilToken(sPtr + 1, pTime, size, "\"");
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1c58      	adds	r0, r3, #1
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b10      	ldr	r3, [pc, #64]	; (8003444 <SIM7600_getLocalTime+0xbc>)
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	f006 f910 	bl	8009628 <THT_copyStringUntilToken>
			}
		}
		counter++;
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	3301      	adds	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
	} while (counter < 3 && pTime[0] == 0);
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d803      	bhi.n	800341c <SIM7600_getLocalTime+0x94>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0cf      	beq.n	80033bc <SIM7600_getLocalTime+0x34>

	if (pTime[0] == 0)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <SIM7600_getLocalTime+0xa0>
		status = THT_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	75bb      	strb	r3, [r7, #22]

	return status;
 8003428:	7dbb      	ldrb	r3, [r7, #22]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	0800d61c 	.word	0x0800d61c
 8003438:	0800d8dc 	.word	0x0800d8dc
 800343c:	0800d8e0 	.word	0x0800d8e0
 8003440:	0800d8ec 	.word	0x0800d8ec
 8003444:	0800d7cc 	.word	0x0800d7cc

08003448 <SIM7600_getFileSize>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return uint32_t
 */
uint32_t SIM7600_getFileSize(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b0a0      	sub	sp, #128	; 0x80
 800344c:	af02      	add	r7, sp, #8
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <SIM7600_getFileSize+0x16>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <SIM7600_getFileSize+0x1a>
	{
		return 0;
 800345e:	2300      	movs	r3, #0
 8003460:	e042      	b.n	80034e8 <SIM7600_getFileSize+0xa0>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	f107 0310 	add.w	r3, r7, #16
 800346a:	2260      	movs	r2, #96	; 0x60
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f007 f8a2 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+FSATTRI=%s", pFilename);
 8003474:	f107 000c 	add.w	r0, r7, #12
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <SIM7600_getFileSize+0xa8>)
 800347c:	2164      	movs	r1, #100	; 0x64
 800347e:	f006 ff6f 	bl	800a360 <sniprintf>

	SIM7600_sendATCommand(me, "AT+FSCD=F:", SIM_URC_OK, SIM_URC_ERROR, 3000);
 8003482:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <SIM7600_getFileSize+0xac>)
 800348a:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <SIM7600_getFileSize+0xb0>)
 800348c:	491b      	ldr	r1, [pc, #108]	; (80034fc <SIM7600_getFileSize+0xb4>)
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe ff50 	bl	8002334 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+FSLS=2", SIM_URC_OK, SIM_URC_ERROR, 3000);
 8003494:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <SIM7600_getFileSize+0xac>)
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <SIM7600_getFileSize+0xb0>)
 800349e:	4918      	ldr	r1, [pc, #96]	; (8003500 <SIM7600_getFileSize+0xb8>)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fe ff47 	bl	8002334 <SIM7600_sendATCommand>

	if (SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000) == THT_OK)
 80034a6:	f107 010c 	add.w	r1, r7, #12
 80034aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <SIM7600_getFileSize+0xac>)
 80034b2:	4a11      	ldr	r2, [pc, #68]	; (80034f8 <SIM7600_getFileSize+0xb0>)
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe ff3d 	bl	8002334 <SIM7600_sendATCommand>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d112      	bne.n	80034e6 <SIM7600_getFileSize+0x9e>
	{
		char *sPtr = strstr(me->parent.buffer, "+FSATTRI: ");
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3308      	adds	r3, #8
 80034c4:	490f      	ldr	r1, [pc, #60]	; (8003504 <SIM7600_getFileSize+0xbc>)
 80034c6:	4618      	mov	r0, r3
 80034c8:	f007 f88b 	bl	800a5e2 <strstr>
 80034cc:	6778      	str	r0, [r7, #116]	; 0x74

		if (sPtr != NULL)
 80034ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <SIM7600_getFileSize+0x9e>
		{
			uint32_t filesize = atol(sPtr + 10);
 80034d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d6:	330a      	adds	r3, #10
 80034d8:	4618      	mov	r0, r3
 80034da:	f006 f913 	bl	8009704 <atol>
 80034de:	4603      	mov	r3, r0
 80034e0:	673b      	str	r3, [r7, #112]	; 0x70
			return filesize;
 80034e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e4:	e000      	b.n	80034e8 <SIM7600_getFileSize+0xa0>
		}
	}

	return 0u;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3778      	adds	r7, #120	; 0x78
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	0800d8f4 	.word	0x0800d8f4
 80034f4:	0800d61c 	.word	0x0800d61c
 80034f8:	0800d624 	.word	0x0800d624
 80034fc:	0800d904 	.word	0x0800d904
 8003500:	0800d910 	.word	0x0800d910
 8003504:	0800d91c 	.word	0x0800d91c

08003508 <SIM7600_deleteFile>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_deleteFile(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b09e      	sub	sp, #120	; 0x78
 800350c:	af02      	add	r7, sp, #8
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <SIM7600_deleteFile+0x16>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <SIM7600_deleteFile+0x1a>
	{
		return 0u;
 800351e:	2300      	movs	r3, #0
 8003520:	e01a      	b.n	8003558 <SIM7600_deleteFile+0x50>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	2260      	movs	r2, #96	; 0x60
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f007 f842 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+FSDEL=\"/%s\"", pFilename);
 8003534:	f107 000c 	add.w	r0, r7, #12
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <SIM7600_deleteFile+0x58>)
 800353c:	2164      	movs	r1, #100	; 0x64
 800353e:	f006 ff0f 	bl	800a360 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000);
 8003542:	f107 010c 	add.w	r1, r7, #12
 8003546:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <SIM7600_deleteFile+0x5c>)
 800354e:	4a06      	ldr	r2, [pc, #24]	; (8003568 <SIM7600_deleteFile+0x60>)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7fe feef 	bl	8002334 <SIM7600_sendATCommand>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3770      	adds	r7, #112	; 0x70
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	0800d928 	.word	0x0800d928
 8003564:	0800d61c 	.word	0x0800d61c
 8003568:	0800d624 	.word	0x0800d624

0800356c <SIM7600_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeAuto(SIM7600_HandleTypeDef *const me)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <SIM7600_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e05c      	b.n	8003638 <SIM7600_setLocalTimeAuto+0xcc>
	}

	uint8_t counter = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status;

	SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 5000); //"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 8003582:	f241 3388 	movw	r3, #5000	; 0x1388
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 800358a:	4a2e      	ldr	r2, [pc, #184]	; (8003644 <SIM7600_setLocalTimeAuto+0xd8>)
 800358c:	492e      	ldr	r1, [pc, #184]	; (8003648 <SIM7600_setLocalTimeAuto+0xdc>)
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7fe fed0 	bl	8002334 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8003594:	f241 3388 	movw	r3, #5000	; 0x1388
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4b29      	ldr	r3, [pc, #164]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <SIM7600_setLocalTimeAuto+0xe0>)
 800359e:	492c      	ldr	r1, [pc, #176]	; (8003650 <SIM7600_setLocalTimeAuto+0xe4>)
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fe fec7 	bl	8002334 <SIM7600_sendATCommand>

	do
	{
		switch (counter)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d01e      	beq.n	80035ea <SIM7600_setLocalTimeAuto+0x7e>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	dc28      	bgt.n	8003602 <SIM7600_setLocalTimeAuto+0x96>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <SIM7600_setLocalTimeAuto+0x4e>
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d00c      	beq.n	80035d2 <SIM7600_setLocalTimeAuto+0x66>
 80035b8:	e023      	b.n	8003602 <SIM7600_setLocalTimeAuto+0x96>
		{
		case 0:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"time1.google.com\",28", SIM_URC_OK, SIM_URC_ERROR, 5000); //"\r\nOK\r\n"
 80035ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 80035c2:	4a22      	ldr	r2, [pc, #136]	; (800364c <SIM7600_setLocalTimeAuto+0xe0>)
 80035c4:	4923      	ldr	r1, [pc, #140]	; (8003654 <SIM7600_setLocalTimeAuto+0xe8>)
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe feb4 	bl	8002334 <SIM7600_sendATCommand>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73bb      	strb	r3, [r7, #14]
			break;
 80035d0:	e01a      	b.n	8003608 <SIM7600_setLocalTimeAuto+0x9c>
		case 1:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.vn.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 80035d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 80035da:	4a1c      	ldr	r2, [pc, #112]	; (800364c <SIM7600_setLocalTimeAuto+0xe0>)
 80035dc:	491e      	ldr	r1, [pc, #120]	; (8003658 <SIM7600_setLocalTimeAuto+0xec>)
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7fe fea8 	bl	8002334 <SIM7600_sendATCommand>
 80035e4:	4603      	mov	r3, r0
 80035e6:	73bb      	strb	r3, [r7, #14]
			break;
 80035e8:	e00e      	b.n	8003608 <SIM7600_setLocalTimeAuto+0x9c>
		case 2:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.asia.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 80035ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <SIM7600_setLocalTimeAuto+0xe0>)
 80035f4:	4919      	ldr	r1, [pc, #100]	; (800365c <SIM7600_setLocalTimeAuto+0xf0>)
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe fe9c 	bl	8002334 <SIM7600_sendATCommand>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73bb      	strb	r3, [r7, #14]
			break;
 8003600:	e002      	b.n	8003608 <SIM7600_setLocalTimeAuto+0x9c>
		default:
			status = THT_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73bb      	strb	r3, [r7, #14]
			break;
 8003606:	bf00      	nop
		}
		counter++;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	3301      	adds	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
	} while (THT_OK != status && counter < 3U);
 800360e:	7bbb      	ldrb	r3, [r7, #14]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <SIM7600_setLocalTimeAuto+0xae>
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d9c5      	bls.n	80035a6 <SIM7600_setLocalTimeAuto+0x3a>

	if (THT_OK == status)
 800361a:	7bbb      	ldrb	r3, [r7, #14]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <SIM7600_setLocalTimeAuto+0xca>
	{
		status = SIM7600_sendATCommand(me, "AT+CNTP", "+CNTP: 0", SIM_URC_ERROR, 4000); //"\r\n+CNTP: 0\r\n"
 8003620:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <SIM7600_setLocalTimeAuto+0xd4>)
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <SIM7600_setLocalTimeAuto+0xf4>)
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <SIM7600_setLocalTimeAuto+0xf8>)
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe fe81 	bl	8002334 <SIM7600_sendATCommand>
 8003632:	4603      	mov	r3, r0
 8003634:	73bb      	strb	r3, [r7, #14]
	}

	return status;
 8003636:	7bbb      	ldrb	r3, [r7, #14]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	0800d61c 	.word	0x0800d61c
 8003644:	0800d650 	.word	0x0800d650
 8003648:	0800d65c 	.word	0x0800d65c
 800364c:	0800d624 	.word	0x0800d624
 8003650:	0800d84c 	.word	0x0800d84c
 8003654:	0800d938 	.word	0x0800d938
 8003658:	0800d958 	.word	0x0800d958
 800365c:	0800d978 	.word	0x0800d978
 8003660:	0800d99c 	.word	0x0800d99c
 8003664:	0800d9a8 	.word	0x0800d9a8

08003668 <SIM7600_setLocalTimeManual>:
 * @param pTime [in] A pointer to the timestring
 * @param size [in] The length of the string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeManual(SIM7600_HandleTypeDef *const me, const char *pTime, const uint8_t size)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b090      	sub	sp, #64	; 0x40
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size > SIM_TIME_SIZE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <SIM7600_setLocalTimeManual+0x20>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <SIM7600_setLocalTimeManual+0x20>
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b16      	cmp	r3, #22
 8003686:	d901      	bls.n	800368c <SIM7600_setLocalTimeManual+0x24>
	{
		return THT_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e01a      	b.n	80036c2 <SIM7600_setLocalTimeManual+0x5a>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2224      	movs	r2, #36	; 0x24
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f006 ff8d 	bl	800a5b8 <memset>
	snprintf(command, sizeof(command), "AT+CCLK=\"%s\"", pTime);
 800369e:	f107 0010 	add.w	r0, r7, #16
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <SIM7600_setLocalTimeManual+0x64>)
 80036a6:	2128      	movs	r1, #40	; 0x28
 80036a8:	f006 fe5a 	bl	800a360 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 80036ac:	f107 0110 	add.w	r1, r7, #16
 80036b0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <SIM7600_setLocalTimeManual+0x68>)
 80036b8:	4a06      	ldr	r2, [pc, #24]	; (80036d4 <SIM7600_setLocalTimeManual+0x6c>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7fe fe3a 	bl	8002334 <SIM7600_sendATCommand>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3738      	adds	r7, #56	; 0x38
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	0800d9b0 	.word	0x0800d9b0
 80036d0:	0800d61c 	.word	0x0800d61c
 80036d4:	0800d624 	.word	0x0800d624

080036d8 <SIM7600_selectPhonebookMem>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_selectPhonebookMem(SIM7600_HandleTypeDef *const me)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af02      	add	r7, sp, #8
 80036de:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <SIM7600_selectPhonebookMem+0x12>
	{
		return THT_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e009      	b.n	80036fe <SIM7600_selectPhonebookMem+0x26>
	}

	return SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80036ea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SIM7600_selectPhonebookMem+0x30>)
 80036f2:	4a06      	ldr	r2, [pc, #24]	; (800370c <SIM7600_selectPhonebookMem+0x34>)
 80036f4:	4906      	ldr	r1, [pc, #24]	; (8003710 <SIM7600_selectPhonebookMem+0x38>)
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fe1c 	bl	8002334 <SIM7600_sendATCommand>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	0800d61c 	.word	0x0800d61c
 800370c:	0800d624 	.word	0x0800d624
 8003710:	0800d698 	.word	0x0800d698

08003714 <SIM7600_savePhonebook>:
 * @param pPhone [in] A pointer to the phonenumber string
 * @param phoneSize [in] The length of the phonenumber
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_savePhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, const char *pPhone, const uint8_t phoneSize)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b0a0      	sub	sp, #128	; 0x80
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	460b      	mov	r3, r1
 8003722:	72fb      	strb	r3, [r7, #11]
 8003724:	4613      	mov	r3, r2
 8003726:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL || phoneSize > SIM_PHONE_SIZE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <SIM7600_savePhonebook+0x26>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <SIM7600_savePhonebook+0x26>
 8003734:	7abb      	ldrb	r3, [r7, #10]
 8003736:	2b0d      	cmp	r3, #13
 8003738:	d901      	bls.n	800373e <SIM7600_savePhonebook+0x2a>
	{
		return THT_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e01f      	b.n	800377e <SIM7600_savePhonebook+0x6a>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	f107 0318 	add.w	r3, r7, #24
 8003746:	2260      	movs	r2, #96	; 0x60
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f006 ff34 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+CPBW=%d,\"%s\",129,\"%s\"", order,
 8003750:	7afa      	ldrb	r2, [r7, #11]
 8003752:	f107 0014 	add.w	r0, r7, #20
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	4613      	mov	r3, r2
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <SIM7600_savePhonebook+0x74>)
 8003762:	2164      	movs	r1, #100	; 0x64
 8003764:	f006 fdfc 	bl	800a360 <sniprintf>
			 pPhone, pPhone);
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8003768:	f107 0114 	add.w	r1, r7, #20
 800376c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <SIM7600_savePhonebook+0x78>)
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <SIM7600_savePhonebook+0x7c>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7fe fddc 	bl	8002334 <SIM7600_sendATCommand>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3778      	adds	r7, #120	; 0x78
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	0800d9c0 	.word	0x0800d9c0
 800378c:	0800d61c 	.word	0x0800d61c
 8003790:	0800d624 	.word	0x0800d624

08003794 <SIM7600_readPhonebook>:
 * @param pPhone [out] A buffer to store the phonenumber store at order
 * @param phoneSize [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readPhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, char pPhone[], const uint8_t phoneSize)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b0a2      	sub	sp, #136	; 0x88
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	72fb      	strb	r3, [r7, #11]
 80037a4:	4613      	mov	r3, r2
 80037a6:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <SIM7600_readPhonebook+0x20>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <SIM7600_readPhonebook+0x24>
	{
		return THT_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e031      	b.n	800381c <SIM7600_readPhonebook+0x88>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f107 0318 	add.w	r3, r7, #24
 80037c0:	2260      	movs	r2, #96	; 0x60
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f006 fef7 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+CPBR=%d", order);
 80037ca:	7afb      	ldrb	r3, [r7, #11]
 80037cc:	f107 0014 	add.w	r0, r7, #20
 80037d0:	4a14      	ldr	r2, [pc, #80]	; (8003824 <SIM7600_readPhonebook+0x90>)
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	f006 fdc4 	bl	800a360 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 80037d8:	f107 0114 	add.w	r1, r7, #20
 80037dc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	4b11      	ldr	r3, [pc, #68]	; (8003828 <SIM7600_readPhonebook+0x94>)
 80037e4:	4a11      	ldr	r2, [pc, #68]	; (800382c <SIM7600_readPhonebook+0x98>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7fe fda4 	bl	8002334 <SIM7600_sendATCommand>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (THT_OK == status)
 80037f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <SIM7600_readPhonebook+0x84>
	{
		char *sPtr = strstr(me->parent.buffer, "\"");
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3308      	adds	r3, #8
 80037fe:	2122      	movs	r1, #34	; 0x22
 8003800:	4618      	mov	r0, r3
 8003802:	f006 fee1 	bl	800a5c8 <strchr>
 8003806:	67b8      	str	r0, [r7, #120]	; 0x78

		THT_copyStringUntilToken(sPtr + 1, pPhone, phoneSize, "\"");
 8003808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380a:	1c58      	adds	r0, r3, #1
 800380c:	7abb      	ldrb	r3, [r7, #10]
 800380e:	b29a      	uxth	r2, r3
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <SIM7600_readPhonebook+0x9c>)
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	f005 ff08 	bl	8009628 <THT_copyStringUntilToken>
	}

	return status;
 8003818:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800381c:	4618      	mov	r0, r3
 800381e:	3780      	adds	r7, #128	; 0x80
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	0800d9dc 	.word	0x0800d9dc
 8003828:	0800d61c 	.word	0x0800d61c
 800382c:	0800d624 	.word	0x0800d624
 8003830:	0800d7cc 	.word	0x0800d7cc

08003834 <SIM7600_findPhonebook>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pPhone [in] Hint, it is the phonenumber want to find
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_findPhonebook(SIM7600_HandleTypeDef *const me, const char *pPhone)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af02      	add	r7, sp, #8
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPhone == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <SIM7600_findPhonebook+0x16>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <SIM7600_findPhonebook+0x1a>
	{
		return THT_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e01a      	b.n	8003884 <SIM7600_findPhonebook+0x50>

	enum Enum
	{
		COMMAND_SIZE = 35
	};
	char command[COMMAND_SIZE] = {0};
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	f107 0310 	add.w	r3, r7, #16
 8003856:	221f      	movs	r2, #31
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f006 feac 	bl	800a5b8 <memset>

	snprintf(command, sizeof(command), "AT+CPBF=\"%s\"", pPhone);
 8003860:	f107 000c 	add.w	r0, r7, #12
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <SIM7600_findPhonebook+0x58>)
 8003868:	2123      	movs	r1, #35	; 0x23
 800386a:	f006 fd79 	bl	800a360 <sniprintf>

	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800386e:	f107 010c 	add.w	r1, r7, #12
 8003872:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SIM7600_findPhonebook+0x5c>)
 800387a:	4a06      	ldr	r2, [pc, #24]	; (8003894 <SIM7600_findPhonebook+0x60>)
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fe fd59 	bl	8002334 <SIM7600_sendATCommand>
 8003882:	4603      	mov	r3, r0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3730      	adds	r7, #48	; 0x30
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	0800d9e8 	.word	0x0800d9e8
 8003890:	0800d61c 	.word	0x0800d61c
 8003894:	0800d624 	.word	0x0800d624

08003898 <SIM7600_sendHTTP>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pHTTP [in] A pointer to SIM_HTTPTypeDef
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendHTTP(SIM7600_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800389e:	af02      	add	r7, sp, #8
 80038a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038a8:	6018      	str	r0, [r3, #0]
 80038aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ae:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038b2:	6019      	str	r1, [r3, #0]
	if (me == NULL || pHTTP == NULL)
 80038b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <SIM7600_sendHTTP+0x38>
 80038c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <SIM7600_sendHTTP+0x3c>
	{
		return THT_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e210      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
	}

	memset(pHTTP->response, '\0', SIM_HTTP_RESPONSE_SIZE);
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 80038e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f006 fe65 	bl	800a5b8 <memset>
	pHTTP->errorcode = 0;
 80038ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 80038fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	3304      	adds	r3, #4
 800390c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f006 fe50 	bl	800a5b8 <memset>

	THT_StatusTypeDef status;

	/* Disconnect the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8003918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391c:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003920:	f241 3388 	movw	r3, #5000	; 0x1388
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4bce      	ldr	r3, [pc, #824]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003928:	4ace      	ldr	r2, [pc, #824]	; (8003c64 <SIM7600_sendHTTP+0x3cc>)
 800392a:	49cf      	ldr	r1, [pc, #828]	; (8003c68 <SIM7600_sendHTTP+0x3d0>)
 800392c:	6800      	ldr	r0, [r0, #0]
 800392e:	f7fe fd01 	bl	8002334 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8003932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003936:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 800393a:	f241 3388 	movw	r3, #5000	; 0x1388
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	4bc7      	ldr	r3, [pc, #796]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003942:	4ac8      	ldr	r2, [pc, #800]	; (8003c64 <SIM7600_sendHTTP+0x3cc>)
 8003944:	49c9      	ldr	r1, [pc, #804]	; (8003c6c <SIM7600_sendHTTP+0x3d4>)
 8003946:	6800      	ldr	r0, [r0, #0]
 8003948:	f7fe fcf4 	bl	8002334 <SIM7600_sendATCommand>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	if (THT_OK != status)
 8003952:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <SIM7600_sendHTTP+0xc8>
	{
		return status;
 800395a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800395e:	e1ca      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
	}

	/* Insert URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pHTTP->url);
 8003960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003964:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3301      	adds	r3, #1
 800396c:	f107 000c 	add.w	r0, r7, #12
 8003970:	4abf      	ldr	r2, [pc, #764]	; (8003c70 <SIM7600_sendHTTP+0x3d8>)
 8003972:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003976:	f006 fcf3 	bl	800a360 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 800397a:	f107 010c 	add.w	r1, r7, #12
 800397e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003982:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003986:	f241 3388 	movw	r3, #5000	; 0x1388
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4bb4      	ldr	r3, [pc, #720]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 800398e:	4ab5      	ldr	r2, [pc, #724]	; (8003c64 <SIM7600_sendHTTP+0x3cc>)
 8003990:	6800      	ldr	r0, [r0, #0]
 8003992:	f7fe fccf 	bl	8002334 <SIM7600_sendATCommand>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 800399c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <SIM7600_sendHTTP+0x112>
	{
		return status;
 80039a4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80039a8:	e1a5      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
	}

	/* Check the method is POST ? */
	if (pHTTP->method == SIM_HTTP_POST)
 80039aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ae:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d17d      	bne.n	8003ab6 <SIM7600_sendHTTP+0x21e>
	{
		/* Insert the content type */
		memset(command, '\0', sizeof(command));
 80039ba:	f107 030c 	add.w	r3, r7, #12
 80039be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039c2:	2100      	movs	r1, #0
 80039c4:	4618      	mov	r0, r3
 80039c6:	f006 fdf7 	bl	800a5b8 <memset>
		snprintf(command, sizeof(command), "AT+HTTPPARA=\"CONTENT\",\"%s\"", pHTTP->type);
 80039ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ce:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	33c9      	adds	r3, #201	; 0xc9
 80039d6:	f107 000c 	add.w	r0, r7, #12
 80039da:	4aa6      	ldr	r2, [pc, #664]	; (8003c74 <SIM7600_sendHTTP+0x3dc>)
 80039dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80039e0:	f006 fcbe 	bl	800a360 <sniprintf>
		status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 80039e4:	f107 010c 	add.w	r1, r7, #12
 80039e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ec:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 80039f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4b9a      	ldr	r3, [pc, #616]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 80039f8:	4a9a      	ldr	r2, [pc, #616]	; (8003c64 <SIM7600_sendHTTP+0x3cc>)
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f7fe fc9a 	bl	8002334 <SIM7600_sendATCommand>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8003a06:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <SIM7600_sendHTTP+0x17c>
		{
			return status;
 8003a0e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003a12:	e170      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
		}

		/* Insert the data */
		memset(command, '\0', sizeof(command));
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f006 fdca 	bl	800a5b8 <memset>
		snprintf(command, sizeof(command), "AT+HTTPDATA=%d,%d", strlen(pHTTP->data), 5000);
 8003a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a28:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	33dd      	adds	r3, #221	; 0xdd
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fc1d 	bl	8000270 <strlen>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f107 000c 	add.w	r0, r7, #12
 8003a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	4a8d      	ldr	r2, [pc, #564]	; (8003c78 <SIM7600_sendHTTP+0x3e0>)
 8003a44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a48:	f006 fc8a 	bl	800a360 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "DOWNLOAD", SIM_URC_ERROR, 5000);
 8003a4c:	f107 010c 	add.w	r1, r7, #12
 8003a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a54:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003a58:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4b80      	ldr	r3, [pc, #512]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003a60:	4a86      	ldr	r2, [pc, #536]	; (8003c7c <SIM7600_sendHTTP+0x3e4>)
 8003a62:	6800      	ldr	r0, [r0, #0]
 8003a64:	f7fe fc66 	bl	8002334 <SIM7600_sendATCommand>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8003a6e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <SIM7600_sendHTTP+0x1e4>
		{
			return status;
 8003a76:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003a7a:	e13c      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
		}

		status = SIM7600_sendATCommand(me, pHTTP->data, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8003a7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a80:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 8003a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a8e:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4b71      	ldr	r3, [pc, #452]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003a9a:	4a72      	ldr	r2, [pc, #456]	; (8003c64 <SIM7600_sendHTTP+0x3cc>)
 8003a9c:	6800      	ldr	r0, [r0, #0]
 8003a9e:	f7fe fc49 	bl	8002334 <SIM7600_sendATCommand>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8003aa8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <SIM7600_sendHTTP+0x21e>
		{
			return status;
 8003ab0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003ab4:	e11f      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
		}
	}

	/* Send the request */
	memset(command, '\0', sizeof(command));
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f006 fd79 	bl	800a5b8 <memset>
	snprintf(command, sizeof(command), "AT+HTTPACTION=%d", pHTTP->method);
 8003ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aca:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f107 000c 	add.w	r0, r7, #12
 8003ad6:	4a6a      	ldr	r2, [pc, #424]	; (8003c80 <SIM7600_sendHTTP+0x3e8>)
 8003ad8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003adc:	f006 fc40 	bl	800a360 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTPACTION:", SIM_URC_ERROR, 5000);
 8003ae0:	f107 010c 	add.w	r1, r7, #12
 8003ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae8:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003aec:	f241 3388 	movw	r3, #5000	; 0x1388
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003af4:	4a63      	ldr	r2, [pc, #396]	; (8003c84 <SIM7600_sendHTTP+0x3ec>)
 8003af6:	6800      	ldr	r0, [r0, #0]
 8003af8:	f7fe fc1c 	bl	8002334 <SIM7600_sendATCommand>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8003b02:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <SIM7600_sendHTTP+0x278>
	{
		return status;
 8003b0a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003b0e:	e0f2      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
	}
	HAL_Delay(100);
 8003b10:	2064      	movs	r0, #100	; 0x64
 8003b12:	f001 fbf9 	bl	8005308 <HAL_Delay>

	/* Get the status of request */
	char *sPtr = strstr(me->parent.buffer, ",");
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	212c      	movs	r1, #44	; 0x2c
 8003b24:	4618      	mov	r0, r3
 8003b26:	f006 fd4f 	bl	800a5c8 <strchr>
 8003b2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

	if (sPtr != NULL)
 8003b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <SIM7600_sendHTTP+0x2bc>
	{
		pHTTP->errorcode = atoi(sPtr + 1);
 8003b36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f005 fddd 	bl	80096fc <atoi>
 8003b42:	4603      	mov	r3, r0
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
	}

	sPtr = strstr(sPtr + 1, ",");
 8003b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b58:	3301      	adds	r3, #1
 8003b5a:	212c      	movs	r1, #44	; 0x2c
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f006 fd33 	bl	800a5c8 <strchr>
 8003b62:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
	if (sPtr != NULL)
 8003b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00e      	beq.n	8003b8c <SIM7600_sendHTTP+0x2f4>
	{
		pHTTP->datalen = atol(sPtr + 1);
 8003b6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b72:	3301      	adds	r3, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f005 fdc5 	bl	8009704 <atol>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b82:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	}

	if (pHTTP->datalen != 0)
 8003b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b90:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 808e 	beq.w	8003cbc <SIM7600_sendHTTP+0x424>
	{
		memset(command, '\0', sizeof(command));
 8003ba0:	f107 030c 	add.w	r3, r7, #12
 8003ba4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f006 fd04 	bl	800a5b8 <memset>

		/* Read the response */
		snprintf(command, sizeof(command), "AT+HTTPREAD=0,%ld", pHTTP->datalen);
 8003bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8003bbe:	f107 000c 	add.w	r0, r7, #12
 8003bc2:	4a31      	ldr	r2, [pc, #196]	; (8003c88 <SIM7600_sendHTTP+0x3f0>)
 8003bc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003bc8:	f006 fbca 	bl	800a360 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "\r\n+HTTPREAD:", SIM_URC_ERROR, 5000);
 8003bcc:	f107 010c 	add.w	r1, r7, #12
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003bd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <SIM7600_sendHTTP+0x3c8>)
 8003be0:	4a2a      	ldr	r2, [pc, #168]	; (8003c8c <SIM7600_sendHTTP+0x3f4>)
 8003be2:	6800      	ldr	r0, [r0, #0]
 8003be4:	f7fe fba6 	bl	8002334 <SIM7600_sendATCommand>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK == status)
 8003bee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d162      	bne.n	8003cbc <SIM7600_sendHTTP+0x424>
		{
			HAL_Delay(100);
 8003bf6:	2064      	movs	r0, #100	; 0x64
 8003bf8:	f001 fb86 	bl	8005308 <HAL_Delay>
			sPtr = strstr(me->parent.buffer, "\r\n{");
 8003bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3308      	adds	r3, #8
 8003c08:	4921      	ldr	r1, [pc, #132]	; (8003c90 <SIM7600_sendHTTP+0x3f8>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f006 fce9 	bl	800a5e2 <strstr>
 8003c10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			if (sPtr != NULL)
 8003c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d04f      	beq.n	8003cbc <SIM7600_sendHTTP+0x424>
			{
				if (pHTTP->datalen > sizeof(pHTTP->response))
 8003c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c20:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8003c2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c2e:	d931      	bls.n	8003c94 <SIM7600_sendHTTP+0x3fc>
				{
					memcpy(pHTTP->response, sPtr + 2, sizeof(pHTTP->response));
 8003c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c34:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 8003c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c42:	3302      	adds	r3, #2
 8003c44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f006 fd58 	bl	800a6fe <memcpy>
					pHTTP->response[SIM_HTTP_RESPONSE_SIZE - 1] = '\0';
 8003c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c52:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 24c4 	strb.w	r2, [r3, #1220]	; 0x4c4
 8003c5e:	e02d      	b.n	8003cbc <SIM7600_sendHTTP+0x424>
 8003c60:	0800d61c 	.word	0x0800d61c
 8003c64:	0800d624 	.word	0x0800d624
 8003c68:	0800d9f8 	.word	0x0800d9f8
 8003c6c:	0800da04 	.word	0x0800da04
 8003c70:	0800da10 	.word	0x0800da10
 8003c74:	0800da28 	.word	0x0800da28
 8003c78:	0800da44 	.word	0x0800da44
 8003c7c:	0800da58 	.word	0x0800da58
 8003c80:	0800da64 	.word	0x0800da64
 8003c84:	0800da78 	.word	0x0800da78
 8003c88:	0800da88 	.word	0x0800da88
 8003c8c:	0800da9c 	.word	0x0800da9c
 8003c90:	0800daac 	.word	0x0800daac
				}
				else
				{
					memcpy(pHTTP->response, sPtr + 2, pHTTP->datalen);
 8003c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c98:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 8003ca2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ca6:	1c99      	adds	r1, r3, #2
 8003ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cac:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f006 fd21 	bl	800a6fe <memcpy>
			}
		}
	}

	/* Terminal the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8003cbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc0:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8003cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	4b0d      	ldr	r3, [pc, #52]	; (8003d00 <SIM7600_sendHTTP+0x468>)
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <SIM7600_sendHTTP+0x46c>)
 8003cce:	490e      	ldr	r1, [pc, #56]	; (8003d08 <SIM7600_sendHTTP+0x470>)
 8003cd0:	6800      	ldr	r0, [r0, #0]
 8003cd2:	f7fe fb2f 	bl	8002334 <SIM7600_sendATCommand>

	if (pHTTP->errorcode == 200 || status == THT_OK)
 8003cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cda:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8003ce4:	2bc8      	cmp	r3, #200	; 0xc8
 8003ce6:	d003      	beq.n	8003cf0 <SIM7600_sendHTTP+0x458>
 8003ce8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <SIM7600_sendHTTP+0x45c>
	{
		return THT_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <SIM7600_sendHTTP+0x45e>
	}
	else
	{
		return THT_ERROR;
 8003cf4:	2301      	movs	r3, #1
	}
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	0800d61c 	.word	0x0800d61c
 8003d04:	0800d624 	.word	0x0800d624
 8003d08:	0800d9f8 	.word	0x0800d9f8

08003d0c <SIM7600_getFileHTTP>:
 * @param pUrl [in] A pointer to URL string
 * @param pFilename [in] A pointer to the filename want to be save
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getFileHTTP(SIM7600_HandleTypeDef *const me, const char *pUrl, const char *pFilename)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8003d12:	af02      	add	r7, sp, #8
 8003d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d1c:	6018      	str	r0, [r3, #0]
 8003d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d22:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003d26:	6019      	str	r1, [r3, #0]
 8003d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d30:	601a      	str	r2, [r3, #0]
	if (me == NULL || pUrl == NULL || pFilename == NULL)
 8003d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <SIM7600_getFileHTTP+0x50>
 8003d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d44:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <SIM7600_getFileHTTP+0x50>
 8003d4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <SIM7600_getFileHTTP+0x54>
	{
		return THT_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e09e      	b.n	8003e9e <SIM7600_getFileHTTP+0x192>
	}

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f006 fc1f 	bl	800a5b8 <memset>

	THT_StatusTypeDef status;

	/* Terminate the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8003d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7e:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003d82:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003d8a:	4a48      	ldr	r2, [pc, #288]	; (8003eac <SIM7600_getFileHTTP+0x1a0>)
 8003d8c:	4948      	ldr	r1, [pc, #288]	; (8003eb0 <SIM7600_getFileHTTP+0x1a4>)
 8003d8e:	6800      	ldr	r0, [r0, #0]
 8003d90:	f7fe fad0 	bl	8002334 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8003d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d98:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003d9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003da4:	4a41      	ldr	r2, [pc, #260]	; (8003eac <SIM7600_getFileHTTP+0x1a0>)
 8003da6:	4943      	ldr	r1, [pc, #268]	; (8003eb4 <SIM7600_getFileHTTP+0x1a8>)
 8003da8:	6800      	ldr	r0, [r0, #0]
 8003daa:	f7fe fac3 	bl	8002334 <SIM7600_sendATCommand>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8003db4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <SIM7600_getFileHTTP+0xb6>
	{
		return status;
 8003dbc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003dc0:	e06d      	b.n	8003e9e <SIM7600_getFileHTTP+0x192>
	}

	/* Insert the URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pUrl);
 8003dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003dca:	f107 0010 	add.w	r0, r7, #16
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a39      	ldr	r2, [pc, #228]	; (8003eb8 <SIM7600_getFileHTTP+0x1ac>)
 8003dd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003dd6:	f006 fac3 	bl	800a360 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8003dda:	f107 0110 	add.w	r1, r7, #16
 8003dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de2:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003de6:	f242 7310 	movw	r3, #10000	; 0x2710
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003dee:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <SIM7600_getFileHTTP+0x1a0>)
 8003df0:	6800      	ldr	r0, [r0, #0]
 8003df2:	f7fe fa9f 	bl	8002334 <SIM7600_sendATCommand>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8003dfc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <SIM7600_getFileHTTP+0xfe>
	{
		return status;
 8003e04:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e08:	e049      	b.n	8003e9e <SIM7600_getFileHTTP+0x192>
	}

	/* Use GET method to get file */
	status = SIM7600_sendATCommand(me, "AT+HTTPACTION=0", "+HTTPACTION:", SIM_URC_ERROR, 10000);
 8003e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e0e:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003e12:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4b23      	ldr	r3, [pc, #140]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003e1a:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <SIM7600_getFileHTTP+0x1b0>)
 8003e1c:	4928      	ldr	r1, [pc, #160]	; (8003ec0 <SIM7600_getFileHTTP+0x1b4>)
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	f7fe fa88 	bl	8002334 <SIM7600_sendATCommand>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8003e2a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <SIM7600_getFileHTTP+0x12c>
	{
		return status;
 8003e32:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e36:	e032      	b.n	8003e9e <SIM7600_getFileHTTP+0x192>
	}

	/* Save file */
	memset(command, '\0', sizeof(command));
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f006 fbb8 	bl	800a5b8 <memset>
	snprintf(command, sizeof(command), "AT+HTTPREADFILE=\"%s\"", pFilename);
 8003e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e50:	f107 0010 	add.w	r0, r7, #16
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1b      	ldr	r2, [pc, #108]	; (8003ec4 <SIM7600_getFileHTTP+0x1b8>)
 8003e58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003e5c:	f006 fa80 	bl	800a360 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTP_PEER_CLOSED", SIM_URC_ERROR, 20000);
 8003e60:	f107 0110 	add.w	r1, r7, #16
 8003e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e68:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003e6c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <SIM7600_getFileHTTP+0x1bc>)
 8003e76:	6800      	ldr	r0, [r0, #0]
 8003e78:	f7fe fa5c 	bl	8002334 <SIM7600_sendATCommand>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	/* Terminate the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8003e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e86:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8003e8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <SIM7600_getFileHTTP+0x19c>)
 8003e92:	4a06      	ldr	r2, [pc, #24]	; (8003eac <SIM7600_getFileHTTP+0x1a0>)
 8003e94:	4906      	ldr	r1, [pc, #24]	; (8003eb0 <SIM7600_getFileHTTP+0x1a4>)
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	f7fe fa4c 	bl	8002334 <SIM7600_sendATCommand>

	return THT_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	0800d61c 	.word	0x0800d61c
 8003eac:	0800d624 	.word	0x0800d624
 8003eb0:	0800d9f8 	.word	0x0800d9f8
 8003eb4:	0800da04 	.word	0x0800da04
 8003eb8:	0800da10 	.word	0x0800da10
 8003ebc:	0800da78 	.word	0x0800da78
 8003ec0:	0800dab0 	.word	0x0800dab0
 8003ec4:	0800dac0 	.word	0x0800dac0
 8003ec8:	0800dad8 	.word	0x0800dad8

08003ecc <HAL_UARTEx_RxEventCallback>:
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_UART4_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <HAL_UARTEx_RxEventCallback+0x68>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d117      	bne.n	8003f12 <HAL_UARTEx_RxEventCallback+0x46>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, ducati.buffer, LEVEL_BUFFER_SIZE);
 8003ee2:	2263      	movs	r2, #99	; 0x63
 8003ee4:	4914      	ldr	r1, [pc, #80]	; (8003f38 <HAL_UARTEx_RxEventCallback+0x6c>)
 8003ee6:	4815      	ldr	r0, [pc, #84]	; (8003f3c <HAL_UARTEx_RxEventCallback+0x70>)
 8003ee8:	f004 f835 	bl	8007f56 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(ducati.dma, DMA_IT_HT);
 8003eec:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_UARTEx_RxEventCallback+0x74>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_UARTEx_RxEventCallback+0x74>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
		ducati.DucatiFlag = true;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <HAL_UARTEx_RxEventCallback+0x74>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		Get_size(&ducati, Size);
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	480c      	ldr	r0, [pc, #48]	; (8003f40 <HAL_UARTEx_RxEventCallback+0x74>)
 8003f0e:	f7fd f819 	bl	8000f44 <Get_size>

	}
	if (huart->Instance == USART2) {
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <HAL_UARTEx_RxEventCallback+0x78>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d106      	bne.n	8003f2a <HAL_UARTEx_RxEventCallback+0x5e>
		SIM_checkEvent(simPtr, Size);
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <HAL_UARTEx_RxEventCallback+0x7c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f005 fafb 	bl	8009520 <SIM_checkEvent>
	}
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40004800 	.word	0x40004800
 8003f38:	20000490 	.word	0x20000490
 8003f3c:	20000384 	.word	0x20000384
 8003f40:	20000488 	.word	0x20000488
 8003f44:	40004400 	.word	0x40004400
 8003f48:	20000500 	.word	0x20000500

08003f4c <ducati_Init>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ducati_Init(void) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
	ducati.dma = &hdma_usart3_rx;
 8003f50:	4b05      	ldr	r3, [pc, #20]	; (8003f68 <ducati_Init+0x1c>)
 8003f52:	4a06      	ldr	r2, [pc, #24]	; (8003f6c <ducati_Init+0x20>)
 8003f54:	605a      	str	r2, [r3, #4]
	ducati.huart = &huart3;
 8003f56:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <ducati_Init+0x1c>)
 8003f58:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <ducati_Init+0x24>)
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000488 	.word	0x20000488
 8003f6c:	20000428 	.word	0x20000428
 8003f70:	20000384 	.word	0x20000384

08003f74 <CONTACTOR_READ>:

void CONTACTOR_READ()
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  IN[0] = HAL_GPIO_ReadPin(DETECT1_GPIO_Port, DETECT1_Pin);
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4818      	ldr	r0, [pc, #96]	; (8003fdc <CONTACTOR_READ+0x68>)
 8003f7c:	f002 f898 	bl	80060b0 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	4b14      	ldr	r3, [pc, #80]	; (8003fe0 <CONTACTOR_READ+0x6c>)
 8003f8e:	701a      	strb	r2, [r3, #0]
  IN[1] = HAL_GPIO_ReadPin(DETECT2_GPIO_Port, DETECT2_Pin);
 8003f90:	2102      	movs	r1, #2
 8003f92:	4812      	ldr	r0, [pc, #72]	; (8003fdc <CONTACTOR_READ+0x68>)
 8003f94:	f002 f88c 	bl	80060b0 <HAL_GPIO_ReadPin>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <CONTACTOR_READ+0x6c>)
 8003fa6:	705a      	strb	r2, [r3, #1]
  IN[2] = HAL_GPIO_ReadPin(DETECT3_GPIO_Port, DETECT3_Pin);
 8003fa8:	2104      	movs	r1, #4
 8003faa:	480c      	ldr	r0, [pc, #48]	; (8003fdc <CONTACTOR_READ+0x68>)
 8003fac:	f002 f880 	bl	80060b0 <HAL_GPIO_ReadPin>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <CONTACTOR_READ+0x6c>)
 8003fbe:	709a      	strb	r2, [r3, #2]
  IN[3] = HAL_GPIO_ReadPin(DETECT4_GPIO_Port, DETECT4_Pin);
 8003fc0:	2108      	movs	r1, #8
 8003fc2:	4806      	ldr	r0, [pc, #24]	; (8003fdc <CONTACTOR_READ+0x68>)
 8003fc4:	f002 f874 	bl	80060b0 <HAL_GPIO_ReadPin>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <CONTACTOR_READ+0x6c>)
 8003fd6:	70da      	strb	r2, [r3, #3]
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	200004f8 	.word	0x200004f8

08003fe4 <SIM_Init>:

void SIM_Init(void) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b09a      	sub	sp, #104	; 0x68
 8003fe8:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin,
//			GPIO_PIN_SET); // Bat PWR len
//	HAL_GPIO_WritePin(SIM7600_RESET_GPIO_Port, SIM7600_RESET_Pin, GPIO_PIN_RESET);
	printf("%s\n", __FUNCTION__);
 8003fea:	486a      	ldr	r0, [pc, #424]	; (8004194 <SIM_Init+0x1b0>)
 8003fec:	f006 f9b0 	bl	800a350 <puts>
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static SIM7600_HandleTypeDef sim7600 = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	simPtr = (SIM_HandleTypeDef*) &sim7600;
 8003ff0:	4b69      	ldr	r3, [pc, #420]	; (8004198 <SIM_Init+0x1b4>)
 8003ff2:	4a6a      	ldr	r2, [pc, #424]	; (800419c <SIM_Init+0x1b8>)
 8003ff4:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	sim7600.hdma = &hdma_usart2_rx;
 8003ff6:	4b69      	ldr	r3, [pc, #420]	; (800419c <SIM_Init+0x1b8>)
 8003ff8:	4a69      	ldr	r2, [pc, #420]	; (80041a0 <SIM_Init+0x1bc>)
 8003ffa:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	sim7600.huart = &huart2;
 8003ffe:	4b67      	ldr	r3, [pc, #412]	; (800419c <SIM_Init+0x1b8>)
 8004000:	4a68      	ldr	r2, [pc, #416]	; (80041a4 <SIM_Init+0x1c0>)
 8004002:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	sim7600.smsCnt = 0;
 8004006:	4b65      	ldr	r3, [pc, #404]	; (800419c <SIM_Init+0x1b8>)
 8004008:	2200      	movs	r2, #0
 800400a:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
	sim7600.smsPos = 0;
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <SIM_Init+0x1b8>)
 8004010:	2200      	movs	r2, #0
 8004012:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
	sim7600.pwrkeyPin = SIM7600_PWRKEY_Pin;
 8004016:	4b61      	ldr	r3, [pc, #388]	; (800419c <SIM_Init+0x1b8>)
 8004018:	2201      	movs	r2, #1
 800401a:	f8a3 22ae 	strh.w	r2, [r3, #686]	; 0x2ae
	sim7600.pwrkeyPort = SIM7600_PWRKEY_GPIO_Port;
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <SIM_Init+0x1b8>)
 8004020:	4a61      	ldr	r2, [pc, #388]	; (80041a8 <SIM_Init+0x1c4>)
 8004022:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
    sim7600.resetPort = SIM7600_RESET_GPIO_Port;
 8004026:	4b5d      	ldr	r3, [pc, #372]	; (800419c <SIM_Init+0x1b8>)
 8004028:	4a5f      	ldr	r2, [pc, #380]	; (80041a8 <SIM_Init+0x1c4>)
 800402a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    sim7600.resetPin = SIM7600_RESET_Pin;
 800402e:	4b5b      	ldr	r3, [pc, #364]	; (800419c <SIM_Init+0x1b8>)
 8004030:	2210      	movs	r2, #16
 8004032:	f8a3 22aa 	strh.w	r2, [r3, #682]	; 0x2aa
//    sim7600.sleepPort = SIM7600_DTR_GPIO_Port;
//    sim7600.sleepPin = SIM7600_DTR_Pin;
//    sim7600.powerEnPort = SIM7600_PWREN_GPIO_Port;
//    sim7600.powerEnPin = SIM7600_PWREN_Pin;
	sim7600.parent.CSR = 0;
 8004036:	4b59      	ldr	r3, [pc, #356]	; (800419c <SIM_Init+0x1b8>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

	sim7600.parent.simSendATCommand = (simSendATCommand) &SIM7600_sendATCommand;
 800403c:	4b57      	ldr	r3, [pc, #348]	; (800419c <SIM_Init+0x1b8>)
 800403e:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <SIM_Init+0x1c8>)
 8004040:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	sim7600.parent.simWakeup = (simWakeup) &SIM7600_wakeup;
 8004044:	4b55      	ldr	r3, [pc, #340]	; (800419c <SIM_Init+0x1b8>)
 8004046:	4a5a      	ldr	r2, [pc, #360]	; (80041b0 <SIM_Init+0x1cc>)
 8004048:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	sim7600.parent.simSleep = (simSleep) &SIM7600_sleep;
 800404c:	4b53      	ldr	r3, [pc, #332]	; (800419c <SIM_Init+0x1b8>)
 800404e:	4a59      	ldr	r2, [pc, #356]	; (80041b4 <SIM_Init+0x1d0>)
 8004050:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	sim7600.parent.simInit = (simInit) &SIM7600_init;
 8004054:	4b51      	ldr	r3, [pc, #324]	; (800419c <SIM_Init+0x1b8>)
 8004056:	4a58      	ldr	r2, [pc, #352]	; (80041b8 <SIM_Init+0x1d4>)
 8004058:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	sim7600.parent.simSetFunction = (simSetFunction) &SIM7600_setFunction;
 800405c:	4b4f      	ldr	r3, [pc, #316]	; (800419c <SIM_Init+0x1b8>)
 800405e:	4a57      	ldr	r2, [pc, #348]	; (80041bc <SIM_Init+0x1d8>)
 8004060:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	sim7600.parent.simProcess = (simProcess) &SIM7600_process;
 8004064:	4b4d      	ldr	r3, [pc, #308]	; (800419c <SIM_Init+0x1b8>)
 8004066:	4a56      	ldr	r2, [pc, #344]	; (80041c0 <SIM_Init+0x1dc>)
 8004068:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	sim7600.parent.simCheckEvent = (simCheckEvent) &SIM7600_checkEvent;
 800406c:	4b4b      	ldr	r3, [pc, #300]	; (800419c <SIM_Init+0x1b8>)
 800406e:	4a55      	ldr	r2, [pc, #340]	; (80041c4 <SIM_Init+0x1e0>)
 8004070:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	sim7600.parent.simReadSMS = (simReadSMS) &SIM7600_readSMS;
 8004074:	4b49      	ldr	r3, [pc, #292]	; (800419c <SIM_Init+0x1b8>)
 8004076:	4a54      	ldr	r2, [pc, #336]	; (80041c8 <SIM_Init+0x1e4>)
 8004078:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	sim7600.parent.simSendSMS = (simSendSMS) &SIM7600_sendSMS;
 800407c:	4b47      	ldr	r3, [pc, #284]	; (800419c <SIM_Init+0x1b8>)
 800407e:	4a53      	ldr	r2, [pc, #332]	; (80041cc <SIM_Init+0x1e8>)
 8004080:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	sim7600.parent.simGetSMSCounter = (simGetSMSCounter) &SIM7600_getSMSCounter;
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <SIM_Init+0x1b8>)
 8004086:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <SIM_Init+0x1ec>)
 8004088:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	sim7600.parent.simCallUSSD = (simCallUSSD) &SIM7600_callUSSD;
 800408c:	4b43      	ldr	r3, [pc, #268]	; (800419c <SIM_Init+0x1b8>)
 800408e:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <SIM_Init+0x1f0>)
 8004090:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	sim7600.parent.simGetRSSI = (simGetRSSI) &SIM7600_getRSSI;
 8004094:	4b41      	ldr	r3, [pc, #260]	; (800419c <SIM_Init+0x1b8>)
 8004096:	4a50      	ldr	r2, [pc, #320]	; (80041d8 <SIM_Init+0x1f4>)
 8004098:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	sim7600.parent.simGetTemperature =
 800409c:	4b3f      	ldr	r3, [pc, #252]	; (800419c <SIM_Init+0x1b8>)
 800409e:	4a4f      	ldr	r2, [pc, #316]	; (80041dc <SIM_Init+0x1f8>)
 80040a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
			(simGetTemperature) &SIM7600_getTemperature;
	sim7600.parent.simGetNwtype = (simGetNwtype) &SIM7600_getNetworkType;
 80040a4:	4b3d      	ldr	r3, [pc, #244]	; (800419c <SIM_Init+0x1b8>)
 80040a6:	4a4e      	ldr	r2, [pc, #312]	; (80041e0 <SIM_Init+0x1fc>)
 80040a8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	sim7600.parent.simGetSimPhone = (simGetSimPhone) &SIM7600_getSimPhone;
 80040ac:	4b3b      	ldr	r3, [pc, #236]	; (800419c <SIM_Init+0x1b8>)
 80040ae:	4a4d      	ldr	r2, [pc, #308]	; (80041e4 <SIM_Init+0x200>)
 80040b0:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	sim7600.parent.simGetIMEI = (simGetIMEI) &SIM7600_getIMEI;
 80040b4:	4b39      	ldr	r3, [pc, #228]	; (800419c <SIM_Init+0x1b8>)
 80040b6:	4a4c      	ldr	r2, [pc, #304]	; (80041e8 <SIM_Init+0x204>)
 80040b8:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	sim7600.parent.simGetLocalTime = (simGetLocalTime) &SIM7600_getLocalTime;
 80040bc:	4b37      	ldr	r3, [pc, #220]	; (800419c <SIM_Init+0x1b8>)
 80040be:	4a4b      	ldr	r2, [pc, #300]	; (80041ec <SIM_Init+0x208>)
 80040c0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	sim7600.parent.simGetFileSize = (simGetFileSize) &SIM7600_getFileSize;
 80040c4:	4b35      	ldr	r3, [pc, #212]	; (800419c <SIM_Init+0x1b8>)
 80040c6:	4a4a      	ldr	r2, [pc, #296]	; (80041f0 <SIM_Init+0x20c>)
 80040c8:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	sim7600.parent.simDeleteFile = (simDeleteFile) &SIM7600_deleteFile;
 80040cc:	4b33      	ldr	r3, [pc, #204]	; (800419c <SIM_Init+0x1b8>)
 80040ce:	4a49      	ldr	r2, [pc, #292]	; (80041f4 <SIM_Init+0x210>)
 80040d0:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	sim7600.parent.simSetLocalTimeAuto =
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <SIM_Init+0x1b8>)
 80040d6:	4a48      	ldr	r2, [pc, #288]	; (80041f8 <SIM_Init+0x214>)
 80040d8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			(simSetLocalTimeAuto) &SIM7600_setLocalTimeAuto;
	sim7600.parent.simSetLocalTimeManual =
 80040dc:	4b2f      	ldr	r3, [pc, #188]	; (800419c <SIM_Init+0x1b8>)
 80040de:	4a47      	ldr	r2, [pc, #284]	; (80041fc <SIM_Init+0x218>)
 80040e0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			(simSetLocalTimeManual) &SIM7600_setLocalTimeManual;
	sim7600.parent.simSelectPhonebookMem =
 80040e4:	4b2d      	ldr	r3, [pc, #180]	; (800419c <SIM_Init+0x1b8>)
 80040e6:	4a46      	ldr	r2, [pc, #280]	; (8004200 <SIM_Init+0x21c>)
 80040e8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
			(simSelectPhonebookMem) &SIM7600_selectPhonebookMem;
	sim7600.parent.simSavePhonebook = (simSavePhonebook) &SIM7600_savePhonebook;
 80040ec:	4b2b      	ldr	r3, [pc, #172]	; (800419c <SIM_Init+0x1b8>)
 80040ee:	4a45      	ldr	r2, [pc, #276]	; (8004204 <SIM_Init+0x220>)
 80040f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	sim7600.parent.simReadPhonebook = (simReadPhonebook) &SIM7600_readPhonebook;
 80040f4:	4b29      	ldr	r3, [pc, #164]	; (800419c <SIM_Init+0x1b8>)
 80040f6:	4a44      	ldr	r2, [pc, #272]	; (8004208 <SIM_Init+0x224>)
 80040f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	sim7600.parent.simFindPhonebook = (simFindPhonebook) &SIM7600_findPhonebook;
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <SIM_Init+0x1b8>)
 80040fe:	4a43      	ldr	r2, [pc, #268]	; (800420c <SIM_Init+0x228>)
 8004100:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	sim7600.parent.simSendHTTP = (simSendHTTP) &SIM7600_sendHTTP;
 8004104:	4b25      	ldr	r3, [pc, #148]	; (800419c <SIM_Init+0x1b8>)
 8004106:	4a42      	ldr	r2, [pc, #264]	; (8004210 <SIM_Init+0x22c>)
 8004108:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	sim7600.parent.simGetFileHTTP = (simGetFileHTTP) &SIM7600_getFileHTTP;
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <SIM_Init+0x1b8>)
 800410e:	4a41      	ldr	r2, [pc, #260]	; (8004214 <SIM_Init+0x230>)
 8004110:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	/* Khởi tạo module SIM */
	if (THT_OK != SIM_init(simPtr)) {
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <SIM_Init+0x1b4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f005 f9d7 	bl	80094cc <SIM_init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <SIM_Init+0x156>
		printf("Sim init fail\n");
 8004124:	483c      	ldr	r0, [pc, #240]	; (8004218 <SIM_Init+0x234>)
 8004126:	f006 f913 	bl	800a350 <puts>
		HAL_UART_Transmit(&huart4, "SIM START ERROR: \n",
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	2213      	movs	r2, #19
 8004130:	493a      	ldr	r1, [pc, #232]	; (800421c <SIM_Init+0x238>)
 8004132:	483b      	ldr	r0, [pc, #236]	; (8004220 <SIM_Init+0x23c>)
 8004134:	f003 fe7d 	bl	8007e32 <HAL_UART_Transmit>
		SIM_getLocalTime(simPtr, pTime, 22);
		SIM_getData(simPtr,
				SIM_DR_IMEI | SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_SIMPHONE
						| SIM_DR_TEMP, &simData);
	}
}
 8004138:	e028      	b.n	800418c <SIM_Init+0x1a8>
		HAL_UART_Transmit(&huart4, "SIM START OK: \n",
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	2210      	movs	r2, #16
 8004140:	4938      	ldr	r1, [pc, #224]	; (8004224 <SIM_Init+0x240>)
 8004142:	4837      	ldr	r0, [pc, #220]	; (8004220 <SIM_Init+0x23c>)
 8004144:	f003 fe75 	bl	8007e32 <HAL_UART_Transmit>
		char pTime[100] = { };
 8004148:	2300      	movs	r3, #0
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	2260      	movs	r2, #96	; 0x60
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f006 fa2f 	bl	800a5b8 <memset>
		SIM_setFunction(simPtr, SIM_MODE_FULL);
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <SIM_Init+0x1b4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f005 f9c6 	bl	80094f2 <SIM_setFunction>
		SIM_setLocalTimeAuto(simPtr);
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <SIM_Init+0x1b4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f005 fa08 	bl	8009580 <SIM_setLocalTimeAuto>
		SIM_getLocalTime(simPtr, pTime, 22);
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <SIM_Init+0x1b4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1d39      	adds	r1, r7, #4
 8004176:	2216      	movs	r2, #22
 8004178:	4618      	mov	r0, r3
 800417a:	f005 f9e6 	bl	800954a <SIM_getLocalTime>
		SIM_getData(simPtr,
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <SIM_Init+0x1b4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a29      	ldr	r2, [pc, #164]	; (8004228 <SIM_Init+0x244>)
 8004184:	212f      	movs	r1, #47	; 0x2f
 8004186:	4618      	mov	r0, r3
 8004188:	f005 f93c 	bl	8009404 <SIM_getData>
}
 800418c:	bf00      	nop
 800418e:	3768      	adds	r7, #104	; 0x68
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	0800dec0 	.word	0x0800dec0
 8004198:	20000500 	.word	0x20000500
 800419c:	20000a70 	.word	0x20000a70
 80041a0:	200003c8 	.word	0x200003c8
 80041a4:	20000340 	.word	0x20000340
 80041a8:	40020000 	.word	0x40020000
 80041ac:	08002335 	.word	0x08002335
 80041b0:	08002479 	.word	0x08002479
 80041b4:	0800254d 	.word	0x0800254d
 80041b8:	0800259d 	.word	0x0800259d
 80041bc:	080027b9 	.word	0x080027b9
 80041c0:	08002815 	.word	0x08002815
 80041c4:	08002941 	.word	0x08002941
 80041c8:	08002a29 	.word	0x08002a29
 80041cc:	08002b39 	.word	0x08002b39
 80041d0:	08002db1 	.word	0x08002db1
 80041d4:	08002e41 	.word	0x08002e41
 80041d8:	08002ef5 	.word	0x08002ef5
 80041dc:	08003075 	.word	0x08003075
 80041e0:	08002f69 	.word	0x08002f69
 80041e4:	080030e1 	.word	0x080030e1
 80041e8:	080032ed 	.word	0x080032ed
 80041ec:	08003389 	.word	0x08003389
 80041f0:	08003449 	.word	0x08003449
 80041f4:	08003509 	.word	0x08003509
 80041f8:	0800356d 	.word	0x0800356d
 80041fc:	08003669 	.word	0x08003669
 8004200:	080036d9 	.word	0x080036d9
 8004204:	08003715 	.word	0x08003715
 8004208:	08003795 	.word	0x08003795
 800420c:	08003835 	.word	0x08003835
 8004210:	08003899 	.word	0x08003899
 8004214:	08003d0d 	.word	0x08003d0d
 8004218:	0800daec 	.word	0x0800daec
 800421c:	0800dafc 	.word	0x0800dafc
 8004220:	200002fc 	.word	0x200002fc
 8004224:	0800db10 	.word	0x0800db10
 8004228:	200009d0 	.word	0x200009d0

0800422c <LORA_begin>:
	CFG_setDeviceMaster(cfgID, "0982586021", strlen("0982586021"));

	CFG_writeEEPROM(cfgID);
}

void LORA_begin() {
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
	lora = (LORA_HandleTypeDef*) &rfm95w;
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <LORA_begin+0x68>)
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <LORA_begin+0x6c>)
 8004234:	601a      	str	r2, [r3, #0]

	rfm95w.resetPort = RFM95_RS_GPIO_Port;
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <LORA_begin+0x6c>)
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <LORA_begin+0x70>)
 800423a:	635a      	str	r2, [r3, #52]	; 0x34
	rfm95w.resetPin = RFM95_RS_Pin;
 800423c:	4b16      	ldr	r3, [pc, #88]	; (8004298 <LORA_begin+0x6c>)
 800423e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
	rfm95w.nssPort = RFM95_NSS_GPIO_Port;
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <LORA_begin+0x6c>)
 8004246:	4a15      	ldr	r2, [pc, #84]	; (800429c <LORA_begin+0x70>)
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
	rfm95w.nssPin = RFM95_NSS_Pin;
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <LORA_begin+0x6c>)
 800424c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
	rfm95w.dio0Port = RFM95_DIO0_GPIO_Port;
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <LORA_begin+0x6c>)
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <LORA_begin+0x74>)
 8004256:	63da      	str	r2, [r3, #60]	; 0x3c
	rfm95w.dio0 = RFM95_DIO0_Pin;
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <LORA_begin+0x6c>)
 800425a:	2220      	movs	r2, #32
 800425c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rfm95w.hspi = &hspi2;
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <LORA_begin+0x6c>)
 8004260:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <LORA_begin+0x78>)
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

	rfm95w.parent.init = (loraInit) &RFM95_init;
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <LORA_begin+0x6c>)
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <LORA_begin+0x7c>)
 8004268:	60da      	str	r2, [r3, #12]
	rfm95w.parent.transmit = (loraTransmit) &RFM95_transmit;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <LORA_begin+0x6c>)
 800426c:	4a0f      	ldr	r2, [pc, #60]	; (80042ac <LORA_begin+0x80>)
 800426e:	611a      	str	r2, [r3, #16]
	rfm95w.parent.receive = (loraReceive) &RFM95_receiveContinuous;
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <LORA_begin+0x6c>)
 8004272:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <LORA_begin+0x84>)
 8004274:	615a      	str	r2, [r3, #20]
	rfm95w.parent.startReceiveIT =
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <LORA_begin+0x6c>)
 8004278:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <LORA_begin+0x88>)
 800427a:	619a      	str	r2, [r3, #24]
			(loraStartReceiveOnIRQ) &RFM95_startReceiveIT;
	rfm95w.parent.receiveIT = (loraReceiveOnIRQ) &RFM95_receiveIT;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <LORA_begin+0x6c>)
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <LORA_begin+0x8c>)
 8004280:	61da      	str	r2, [r3, #28]

	rfm95w.parent.getRSSI = (loraGetRSSI) &RFM95_getRSSI;
 8004282:	4b05      	ldr	r3, [pc, #20]	; (8004298 <LORA_begin+0x6c>)
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <LORA_begin+0x90>)
 8004286:	621a      	str	r2, [r3, #32]

}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000a64 	.word	0x20000a64
 8004298:	20000a18 	.word	0x20000a18
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40020800 	.word	0x40020800
 80042a4:	200002a4 	.word	0x200002a4
 80042a8:	08002297 	.word	0x08002297
 80042ac:	08001bd9 	.word	0x08001bd9
 80042b0:	08001eff 	.word	0x08001eff
 80042b4:	08001d31 	.word	0x08001d31
 80042b8:	08001e01 	.word	0x08001e01
 80042bc:	080021f9 	.word	0x080021f9

080042c0 <loraHandle>:
	for (size_t i = 0; i < size; i++) {
		value ^= array[i];
	}
	return value;
}
void loraHandle() {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80042c6:	af00      	add	r7, sp, #0

	uint8_t msgResLoRa[LORA_RESPONSE_SIZE] = { 0 };
 80042c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	22fc      	movs	r2, #252	; 0xfc
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f006 f96c 	bl	800a5b8 <memset>
	uint8_t messLora[LORA_REQUEST_SIZE] = { 0 };
 80042e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	3304      	adds	r3, #4
 80042ee:	22fc      	movs	r2, #252	; 0xfc
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f006 f960 	bl	800a5b8 <memset>


	LORA_startReceiveIT(lora);
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <loraHandle+0xd4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fd f8db 	bl	80014b8 <LORA_startReceiveIT>
	uint16_t timeStap = HAL_GetTick();
 8004302:	f000 fff5 	bl	80052f0 <HAL_GetTick>
 8004306:	4603      	mov	r3, r0
 8004308:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	while (HAL_GetTick() - timeStap < 60000) {
 800430c:	e031      	b.n	8004372 <loraHandle+0xb2>
		if (irqLoRaFlag) {
 800430e:	4b22      	ldr	r3, [pc, #136]	; (8004398 <loraHandle+0xd8>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d02d      	beq.n	8004372 <loraHandle+0xb2>
			irqLoRaFlag = 0;
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <loraHandle+0xd8>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
			LORA_receiveIT(lora, msgResLoRa, LORA_RESPONSE_SIZE);
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <loraHandle+0xd4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8004324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd f8d7 	bl	80014dc <LORA_receiveIT>
			if (msgResLoRa[0] == messLora[0] && msgResLoRa[1] == messLora[1]) {
 800432e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004332:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800433c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d120      	bne.n	8004388 <loraHandle+0xc8>
 8004346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800434a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800434e:	785a      	ldrb	r2, [r3, #1]
 8004350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004354:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	429a      	cmp	r2, r3
 800435c:	d114      	bne.n	8004388 <loraHandle+0xc8>
				LORA_transmit(lora, messLora, LORA_REQUEST_SIZE, 1000);
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <loraHandle+0xd4>)
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	1d39      	adds	r1, r7, #4
 8004364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436c:	f7fd f888 	bl	8001480 <LORA_transmit>
			}
			break;
 8004370:	e00a      	b.n	8004388 <loraHandle+0xc8>
	while (HAL_GetTick() - timeStap < 60000) {
 8004372:	f000 ffbd 	bl	80052f0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004382:	4293      	cmp	r3, r2
 8004384:	d9c3      	bls.n	800430e <loraHandle+0x4e>
		}
	}
}
 8004386:	e000      	b.n	800438a <loraHandle+0xca>
			break;
 8004388:	bf00      	nop
}
 800438a:	bf00      	nop
 800438c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000a64 	.word	0x20000a64
 8004398:	20000a6e 	.word	0x20000a6e

0800439c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	b099      	sub	sp, #100	; 0x64
 80043a2:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043a4:	f000 ff3e 	bl	8005224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043a8:	f000 f8fc 	bl	80045a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043ac:	f000 fb04 	bl	80049b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80043b0:	f000 fada 	bl	8004968 <MX_DMA_Init>
  MX_SPI1_Init();
 80043b4:	f000 f9ee 	bl	8004794 <MX_SPI1_Init>
  MX_SPI2_Init();
 80043b8:	f000 fa22 	bl	8004800 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80043bc:	f000 fa80 	bl	80048c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80043c0:	f000 faa8 	bl	8004914 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80043c4:	f004 ff1c 	bl	8009200 <MX_FATFS_Init>
  MX_RTC_Init();
 80043c8:	f000 f958 	bl	800467c <MX_RTC_Init>
  MX_UART4_Init();
 80043cc:	f000 fa4e 	bl	800486c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	ducati_Init();
 80043d0:	f7ff fdbc 	bl	8003f4c <ducati_Init>
  CONTACTOR_READ();
 80043d4:	f7ff fdce 	bl	8003f74 <CONTACTOR_READ>
	LORA_begin() ;
 80043d8:	f7ff ff28 	bl	800422c <LORA_begin>
	SIM_Init();
 80043dc:	f7ff fe02 	bl	8003fe4 <SIM_Init>
	HTTP_init(&http,
 80043e0:	2301      	movs	r3, #1
 80043e2:	223d      	movs	r2, #61	; 0x3d
 80043e4:	495f      	ldr	r1, [pc, #380]	; (8004564 <main+0x1c8>)
 80043e6:	4860      	ldr	r0, [pc, #384]	; (8004568 <main+0x1cc>)
 80043e8:	f004 ffd0 	bl	800938c <HTTP_init>
			"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json",
			strlen(
					"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json"),
			HTTP_URL_URI_RESULT);
	sprintf(http.data,
 80043ec:	4b5f      	ldr	r3, [pc, #380]	; (800456c <main+0x1d0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc f8a9 	bl	8000548 <__aeabi_f2d>
 80043f6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <main+0x1d4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f8a2 	bl	8000548 <__aeabi_f2d>
 8004404:	4604      	mov	r4, r0
 8004406:	460d      	mov	r5, r1
 8004408:	4b5a      	ldr	r3, [pc, #360]	; (8004574 <main+0x1d8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f89b 	bl	8000548 <__aeabi_f2d>
 8004412:	4680      	mov	r8, r0
 8004414:	4689      	mov	r9, r1
 8004416:	4b58      	ldr	r3, [pc, #352]	; (8004578 <main+0x1dc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc f894 	bl	8000548 <__aeabi_f2d>
 8004420:	4682      	mov	sl, r0
 8004422:	468b      	mov	fp, r1
 8004424:	4b55      	ldr	r3, [pc, #340]	; (800457c <main+0x1e0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fc f88d 	bl	8000548 <__aeabi_f2d>
 800442e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004432:	4b53      	ldr	r3, [pc, #332]	; (8004580 <main+0x1e4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f886 	bl	8000548 <__aeabi_f2d>
 800443c:	4b51      	ldr	r3, [pc, #324]	; (8004584 <main+0x1e8>)
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b51      	ldr	r3, [pc, #324]	; (8004588 <main+0x1ec>)
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	60bb      	str	r3, [r7, #8]
	    ",\"CTT2\":\"%u\""
	    ",\"CTT3\":\"%u\""
	    ",\"CTT4\":\"%u\"}",
		CosF, Voltage, Current, Frequency,
		ActivePower, ReactivePower, AvP, AvQ,
	    (IN[0] ^ 0x01),(IN[1] ^ 0x01),(IN[2] ^ 0x01),(IN[3] ^ 0x01));
 8004448:	4b50      	ldr	r3, [pc, #320]	; (800458c <main+0x1f0>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f083 0301 	eor.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
	sprintf(http.data,
 8004452:	607b      	str	r3, [r7, #4]
	    (IN[0] ^ 0x01),(IN[1] ^ 0x01),(IN[2] ^ 0x01),(IN[3] ^ 0x01));
 8004454:	4b4d      	ldr	r3, [pc, #308]	; (800458c <main+0x1f0>)
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
	sprintf(http.data,
 800445e:	461e      	mov	r6, r3
	    (IN[0] ^ 0x01),(IN[1] ^ 0x01),(IN[2] ^ 0x01),(IN[3] ^ 0x01));
 8004460:	4b4a      	ldr	r3, [pc, #296]	; (800458c <main+0x1f0>)
 8004462:	789b      	ldrb	r3, [r3, #2]
 8004464:	f083 0301 	eor.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
	sprintf(http.data,
 800446a:	461a      	mov	r2, r3
	    (IN[0] ^ 0x01),(IN[1] ^ 0x01),(IN[2] ^ 0x01),(IN[3] ^ 0x01));
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <main+0x1f0>)
 800446e:	78db      	ldrb	r3, [r3, #3]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
	sprintf(http.data,
 8004476:	930f      	str	r3, [sp, #60]	; 0x3c
 8004478:	920e      	str	r2, [sp, #56]	; 0x38
 800447a:	960d      	str	r6, [sp, #52]	; 0x34
 800447c:	687e      	ldr	r6, [r7, #4]
 800447e:	960c      	str	r6, [sp, #48]	; 0x30
 8004480:	68be      	ldr	r6, [r7, #8]
 8004482:	960b      	str	r6, [sp, #44]	; 0x2c
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	930a      	str	r3, [sp, #40]	; 0x28
 8004488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800448c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004490:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004494:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004498:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800449c:	e9cd 4500 	strd	r4, r5, [sp]
 80044a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044a4:	493a      	ldr	r1, [pc, #232]	; (8004590 <main+0x1f4>)
 80044a6:	483b      	ldr	r0, [pc, #236]	; (8004594 <main+0x1f8>)
 80044a8:	f005 ff8e 	bl	800a3c8 <siprintf>

	 SIM_sendHTTP(simPtr, &http);
 80044ac:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <main+0x1fc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	492d      	ldr	r1, [pc, #180]	; (8004568 <main+0x1cc>)
 80044b2:	4618      	mov	r0, r3
 80044b4:	f005 f878 	bl	80095a8 <SIM_sendHTTP>
   
  if (SIM_sendHTTP(simPtr, &http) == THT_ERROR)
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <main+0x1fc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	492a      	ldr	r1, [pc, #168]	; (8004568 <main+0x1cc>)
 80044be:	4618      	mov	r0, r3
 80044c0:	f005 f872 	bl	80095a8 <SIM_sendHTTP>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <main+0x132>
  {
      loraHandle();
 80044ca:	f7ff fef9 	bl	80042c0 <loraHandle>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Voltage = getVol(&ducati);
 80044ce:	4833      	ldr	r0, [pc, #204]	; (800459c <main+0x200>)
 80044d0:	f7fc fe02 	bl	80010d8 <getVol>
 80044d4:	eef0 7a40 	vmov.f32	s15, s0
 80044d8:	4b25      	ldr	r3, [pc, #148]	; (8004570 <main+0x1d4>)
 80044da:	edc3 7a00 	vstr	s15, [r3]
		CosF = getCosF(&ducati);
 80044de:	482f      	ldr	r0, [pc, #188]	; (800459c <main+0x200>)
 80044e0:	f7fc fe2e 	bl	8001140 <getCosF>
 80044e4:	eef0 7a40 	vmov.f32	s15, s0
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <main+0x1d0>)
 80044ea:	edc3 7a00 	vstr	s15, [r3]
		Current = getCurrent(&ducati);
 80044ee:	482b      	ldr	r0, [pc, #172]	; (800459c <main+0x200>)
 80044f0:	f7fc fe5a 	bl	80011a8 <getCurrent>
 80044f4:	eef0 7a40 	vmov.f32	s15, s0
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <main+0x1d8>)
 80044fa:	edc3 7a00 	vstr	s15, [r3]
		Frequency = getFrequency(&ducati);
 80044fe:	4827      	ldr	r0, [pc, #156]	; (800459c <main+0x200>)
 8004500:	f7fc fe86 	bl	8001210 <getFrequency>
 8004504:	eef0 7a40 	vmov.f32	s15, s0
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <main+0x1dc>)
 800450a:	edc3 7a00 	vstr	s15, [r3]

		AvQ = getAvQ(&ducati);
 800450e:	4823      	ldr	r0, [pc, #140]	; (800459c <main+0x200>)
 8004510:	f7fc feb2 	bl	8001278 <getAvQ>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <main+0x1ec>)
 800451a:	801a      	strh	r2, [r3, #0]
		AvP = getAvP(&ducati);
 800451c:	481f      	ldr	r0, [pc, #124]	; (800459c <main+0x200>)
 800451e:	f7fc fedf 	bl	80012e0 <getAvP>
 8004522:	4603      	mov	r3, r0
 8004524:	461a      	mov	r2, r3
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <main+0x1e8>)
 8004528:	801a      	strh	r2, [r3, #0]
		ActivePower = getActivePower(&ducati);
 800452a:	481c      	ldr	r0, [pc, #112]	; (800459c <main+0x200>)
 800452c:	f7fc ff0c 	bl	8001348 <getActivePower>
 8004530:	eef0 7a40 	vmov.f32	s15, s0
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <main+0x1e0>)
 8004536:	edc3 7a00 	vstr	s15, [r3]
		ReactivePower = getReactivePower(&ducati);
 800453a:	4818      	ldr	r0, [pc, #96]	; (800459c <main+0x200>)
 800453c:	f7fc ff38 	bl	80013b0 <getReactivePower>
 8004540:	eef0 7a40 	vmov.f32	s15, s0
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <main+0x1e4>)
 8004546:	edc3 7a00 	vstr	s15, [r3]
		CoilStatus = getCoilStatus(&ducati);
 800454a:	4814      	ldr	r0, [pc, #80]	; (800459c <main+0x200>)
 800454c:	f7fc ff64 	bl	8001418 <getCoilStatus>
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <main+0x204>)
 8004556:	801a      	strh	r2, [r3, #0]
		HAL_Delay(1000);
 8004558:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800455c:	f000 fed4 	bl	8005308 <HAL_Delay>
		Voltage = getVol(&ducati);
 8004560:	e7b5      	b.n	80044ce <main+0x132>
 8004562:	bf00      	nop
 8004564:	0800db38 	.word	0x0800db38
 8004568:	20000504 	.word	0x20000504
 800456c:	20000000 	.word	0x20000000
 8004570:	20000008 	.word	0x20000008
 8004574:	20000004 	.word	0x20000004
 8004578:	20000014 	.word	0x20000014
 800457c:	2000000c 	.word	0x2000000c
 8004580:	20000010 	.word	0x20000010
 8004584:	20000a68 	.word	0x20000a68
 8004588:	20000a6a 	.word	0x20000a6a
 800458c:	200004f8 	.word	0x200004f8
 8004590:	0800db78 	.word	0x0800db78
 8004594:	200005e1 	.word	0x200005e1
 8004598:	20000500 	.word	0x20000500
 800459c:	20000488 	.word	0x20000488
 80045a0:	20000a6c 	.word	0x20000a6c

080045a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b094      	sub	sp, #80	; 0x50
 80045a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045aa:	f107 0320 	add.w	r3, r7, #32
 80045ae:	2230      	movs	r2, #48	; 0x30
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f006 f800 	bl	800a5b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	4b29      	ldr	r3, [pc, #164]	; (8004674 <SystemClock_Config+0xd0>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	4a28      	ldr	r2, [pc, #160]	; (8004674 <SystemClock_Config+0xd0>)
 80045d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d6:	6413      	str	r3, [r2, #64]	; 0x40
 80045d8:	4b26      	ldr	r3, [pc, #152]	; (8004674 <SystemClock_Config+0xd0>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <SystemClock_Config+0xd4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <SystemClock_Config+0xd4>)
 80045ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b20      	ldr	r3, [pc, #128]	; (8004678 <SystemClock_Config+0xd4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004600:	2309      	movs	r3, #9
 8004602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800460a:	2301      	movs	r3, #1
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800460e:	2302      	movs	r3, #2
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004618:	2319      	movs	r3, #25
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800461c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004622:	2302      	movs	r3, #2
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004626:	2304      	movs	r3, #4
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800462a:	f107 0320 	add.w	r3, r7, #32
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fd70 	bl	8006114 <HAL_RCC_OscConfig>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800463a:	f000 fa6f 	bl	8004b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800463e:	230f      	movs	r3, #15
 8004640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004642:	2302      	movs	r3, #2
 8004644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800464a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800464e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	2105      	movs	r1, #5
 800465c:	4618      	mov	r0, r3
 800465e:	f001 ffd1 	bl	8006604 <HAL_RCC_ClockConfig>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004668:	f000 fa58 	bl	8004b1c <Error_Handler>
  }
}
 800466c:	bf00      	nop
 800466e:	3750      	adds	r7, #80	; 0x50
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40023800 	.word	0x40023800
 8004678:	40007000 	.word	0x40007000

0800467c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b090      	sub	sp, #64	; 0x40
 8004680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	605a      	str	r2, [r3, #4]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004692:	2300      	movs	r3, #0
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004696:	463b      	mov	r3, r7
 8004698:	2228      	movs	r2, #40	; 0x28
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f005 ff8b 	bl	800a5b8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80046a2:	4b3a      	ldr	r3, [pc, #232]	; (800478c <MX_RTC_Init+0x110>)
 80046a4:	4a3a      	ldr	r2, [pc, #232]	; (8004790 <MX_RTC_Init+0x114>)
 80046a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <MX_RTC_Init+0x110>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80046ae:	4b37      	ldr	r3, [pc, #220]	; (800478c <MX_RTC_Init+0x110>)
 80046b0:	227f      	movs	r2, #127	; 0x7f
 80046b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <MX_RTC_Init+0x110>)
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046ba:	4b34      	ldr	r3, [pc, #208]	; (800478c <MX_RTC_Init+0x110>)
 80046bc:	2200      	movs	r2, #0
 80046be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <MX_RTC_Init+0x110>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046c6:	4b31      	ldr	r3, [pc, #196]	; (800478c <MX_RTC_Init+0x110>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046cc:	482f      	ldr	r0, [pc, #188]	; (800478c <MX_RTC_Init+0x110>)
 80046ce:	f002 fa5b 	bl	8006b88 <HAL_RTC_Init>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80046d8:	f000 fa20 	bl	8004b1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 80046dc:	2309      	movs	r3, #9
 80046de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046fa:	2201      	movs	r2, #1
 80046fc:	4619      	mov	r1, r3
 80046fe:	4823      	ldr	r0, [pc, #140]	; (800478c <MX_RTC_Init+0x110>)
 8004700:	f002 fab8 	bl	8006c74 <HAL_RTC_SetTime>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800470a:	f000 fa07 	bl	8004b1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800470e:	2304      	movs	r3, #4
 8004710:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_MARCH;
 8004714:	2303      	movs	r3, #3
 8004716:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 800471a:	2328      	movs	r3, #40	; 0x28
 800471c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8004720:	2300      	movs	r3, #0
 8004722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472a:	2201      	movs	r2, #1
 800472c:	4619      	mov	r1, r3
 800472e:	4817      	ldr	r0, [pc, #92]	; (800478c <MX_RTC_Init+0x110>)
 8004730:	f002 fb3a 	bl	8006da8 <HAL_RTC_SetDate>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800473a:	f000 f9ef 	bl	8004b1c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x9;
 800473e:	2309      	movs	r3, #9
 8004740:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8004742:	2300      	movs	r3, #0
 8004744:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8004746:	2301      	movs	r3, #1
 8004748:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800474a:	2300      	movs	r3, #0
 800474c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800476e:	463b      	mov	r3, r7
 8004770:	2201      	movs	r2, #1
 8004772:	4619      	mov	r1, r3
 8004774:	4805      	ldr	r0, [pc, #20]	; (800478c <MX_RTC_Init+0x110>)
 8004776:	f002 fb9b 	bl	8006eb0 <HAL_RTC_SetAlarm>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004780:	f000 f9cc 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004784:	bf00      	nop
 8004786:	3740      	adds	r7, #64	; 0x40
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000022c 	.word	0x2000022c
 8004790:	40002800 	.word	0x40002800

08004794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004798:	4b17      	ldr	r3, [pc, #92]	; (80047f8 <MX_SPI1_Init+0x64>)
 800479a:	4a18      	ldr	r2, [pc, #96]	; (80047fc <MX_SPI1_Init+0x68>)
 800479c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800479e:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80047a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047ac:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047be:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047c8:	2210      	movs	r2, #16
 80047ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047da:	2200      	movs	r2, #0
 80047dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047e0:	220a      	movs	r2, #10
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047e4:	4804      	ldr	r0, [pc, #16]	; (80047f8 <MX_SPI1_Init+0x64>)
 80047e6:	f002 fd2e 	bl	8007246 <HAL_SPI_Init>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80047f0:	f000 f994 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	2000024c 	.word	0x2000024c
 80047fc:	40013000 	.word	0x40013000

08004800 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004804:	4b17      	ldr	r3, [pc, #92]	; (8004864 <MX_SPI2_Init+0x64>)
 8004806:	4a18      	ldr	r2, [pc, #96]	; (8004868 <MX_SPI2_Init+0x68>)
 8004808:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800480a:	4b16      	ldr	r3, [pc, #88]	; (8004864 <MX_SPI2_Init+0x64>)
 800480c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004810:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <MX_SPI2_Init+0x64>)
 8004814:	2200      	movs	r2, #0
 8004816:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <MX_SPI2_Init+0x64>)
 800481a:	2200      	movs	r2, #0
 800481c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <MX_SPI2_Init+0x64>)
 8004820:	2200      	movs	r2, #0
 8004822:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004824:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <MX_SPI2_Init+0x64>)
 8004826:	2200      	movs	r2, #0
 8004828:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <MX_SPI2_Init+0x64>)
 800482c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004830:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <MX_SPI2_Init+0x64>)
 8004834:	2200      	movs	r2, #0
 8004836:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <MX_SPI2_Init+0x64>)
 800483a:	2200      	movs	r2, #0
 800483c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <MX_SPI2_Init+0x64>)
 8004840:	2200      	movs	r2, #0
 8004842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004844:	4b07      	ldr	r3, [pc, #28]	; (8004864 <MX_SPI2_Init+0x64>)
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800484a:	4b06      	ldr	r3, [pc, #24]	; (8004864 <MX_SPI2_Init+0x64>)
 800484c:	220a      	movs	r2, #10
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004850:	4804      	ldr	r0, [pc, #16]	; (8004864 <MX_SPI2_Init+0x64>)
 8004852:	f002 fcf8 	bl	8007246 <HAL_SPI_Init>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800485c:	f000 f95e 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004860:	bf00      	nop
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200002a4 	.word	0x200002a4
 8004868:	40003800 	.word	0x40003800

0800486c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004872:	4a12      	ldr	r2, [pc, #72]	; (80048bc <MX_UART4_Init+0x50>)
 8004874:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800487c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800487e:	4b0e      	ldr	r3, [pc, #56]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004880:	2200      	movs	r2, #0
 8004882:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004886:	2200      	movs	r2, #0
 8004888:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <MX_UART4_Init+0x4c>)
 800488c:	2200      	movs	r2, #0
 800488e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004892:	220c      	movs	r2, #12
 8004894:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <MX_UART4_Init+0x4c>)
 8004898:	2200      	movs	r2, #0
 800489a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <MX_UART4_Init+0x4c>)
 800489e:	2200      	movs	r2, #0
 80048a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80048a2:	4805      	ldr	r0, [pc, #20]	; (80048b8 <MX_UART4_Init+0x4c>)
 80048a4:	f003 fa78 	bl	8007d98 <HAL_UART_Init>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80048ae:	f000 f935 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048b2:	bf00      	nop
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200002fc 	.word	0x200002fc
 80048bc:	40004c00 	.word	0x40004c00

080048c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048c6:	4a12      	ldr	r2, [pc, #72]	; (8004910 <MX_USART2_UART_Init+0x50>)
 80048c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048e6:	220c      	movs	r2, #12
 80048e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048f6:	4805      	ldr	r0, [pc, #20]	; (800490c <MX_USART2_UART_Init+0x4c>)
 80048f8:	f003 fa4e 	bl	8007d98 <HAL_UART_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004902:	f000 f90b 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000340 	.word	0x20000340
 8004910:	40004400 	.word	0x40004400

08004914 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <MX_USART3_UART_Init+0x50>)
 800491c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 8004920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004926:	4b0e      	ldr	r3, [pc, #56]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 800492e:	2200      	movs	r2, #0
 8004930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004932:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 800493a:	220c      	movs	r2, #12
 800493c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800494a:	4805      	ldr	r0, [pc, #20]	; (8004960 <MX_USART3_UART_Init+0x4c>)
 800494c:	f003 fa24 	bl	8007d98 <HAL_UART_Init>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004956:	f000 f8e1 	bl	8004b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20000384 	.word	0x20000384
 8004964:	40004800 	.word	0x40004800

08004968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <MX_DMA_Init+0x4c>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <MX_DMA_Init+0x4c>)
 8004978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <MX_DMA_Init+0x4c>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	2100      	movs	r1, #0
 800498e:	200c      	movs	r0, #12
 8004990:	f000 fdb9 	bl	8005506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004994:	200c      	movs	r0, #12
 8004996:	f000 fdd2 	bl	800553e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	2010      	movs	r0, #16
 80049a0:	f000 fdb1 	bl	8005506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80049a4:	2010      	movs	r0, #16
 80049a6:	f000 fdca 	bl	800553e <HAL_NVIC_EnableIRQ>

}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049be:	f107 0314 	add.w	r3, r7, #20
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	4b4e      	ldr	r3, [pc, #312]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	4a4d      	ldr	r2, [pc, #308]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	6313      	str	r3, [r2, #48]	; 0x30
 80049de:	4b4b      	ldr	r3, [pc, #300]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a46      	ldr	r2, [pc, #280]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <MX_GPIO_Init+0x154>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a3f      	ldr	r2, [pc, #252]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a38      	ldr	r2, [pc, #224]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b36      	ldr	r3, [pc, #216]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a31      	ldr	r2, [pc, #196]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a48:	f043 0308 	orr.w	r3, r3, #8
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <MX_GPIO_Init+0x154>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SIM7600_PWRKEY_Pin|SIM7600_RESET_Pin, GPIO_PIN_RESET);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2111      	movs	r1, #17
 8004a5e:	482c      	ldr	r0, [pc, #176]	; (8004b10 <MX_GPIO_Init+0x158>)
 8004a60:	f001 fb3e 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_CS_Pin|RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO2_Pin, GPIO_PIN_RESET);
 8004a64:	2200      	movs	r2, #0
 8004a66:	21f0      	movs	r1, #240	; 0xf0
 8004a68:	482a      	ldr	r0, [pc, #168]	; (8004b14 <MX_GPIO_Init+0x15c>)
 8004a6a:	f001 fb39 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RFM95_RS_Pin|RFM95_NSS_Pin|LED4_Pin|LED3_Pin
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f240 5155 	movw	r1, #1365	; 0x555
 8004a74:	4828      	ldr	r0, [pc, #160]	; (8004b18 <MX_GPIO_Init+0x160>)
 8004a76:	f001 fb33 	bl	80060e0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DETECT1_Pin DETECT2_Pin DETECT3_Pin DETECT4_Pin */
  GPIO_InitStruct.Pin = DETECT1_Pin|DETECT2_Pin|DETECT3_Pin|DETECT4_Pin;
 8004a7a:	230f      	movs	r3, #15
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4821      	ldr	r0, [pc, #132]	; (8004b14 <MX_GPIO_Init+0x15c>)
 8004a8e:	f001 f973 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM7600_PWRKEY_Pin */
  GPIO_InitStruct.Pin = SIM7600_PWRKEY_Pin;
 8004a92:	2301      	movs	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a96:	2301      	movs	r3, #1
 8004a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIM7600_PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8004aa2:	f107 0314 	add.w	r3, r7, #20
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4819      	ldr	r0, [pc, #100]	; (8004b10 <MX_GPIO_Init+0x158>)
 8004aaa:	f001 f965 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM7600_RESET_Pin */
  GPIO_InitStruct.Pin = SIM7600_RESET_Pin;
 8004aae:	2310      	movs	r3, #16
 8004ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aba:	2300      	movs	r3, #0
 8004abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SIM7600_RESET_GPIO_Port, &GPIO_InitStruct);
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4812      	ldr	r0, [pc, #72]	; (8004b10 <MX_GPIO_Init+0x158>)
 8004ac6:	f001 f957 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO2_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|RFM95_DIO0_Pin|RFM95_DIO1_Pin|RFM95_DIO2_Pin;
 8004aca:	23f0      	movs	r3, #240	; 0xf0
 8004acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	4619      	mov	r1, r3
 8004ae0:	480c      	ldr	r0, [pc, #48]	; (8004b14 <MX_GPIO_Init+0x15c>)
 8004ae2:	f001 f949 	bl	8005d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_RS_Pin RFM95_NSS_Pin LED4_Pin LED3_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = RFM95_RS_Pin|RFM95_NSS_Pin|LED4_Pin|LED3_Pin
 8004ae6:	f240 5355 	movw	r3, #1365	; 0x555
 8004aea:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af4:	2300      	movs	r3, #0
 8004af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4619      	mov	r1, r3
 8004afe:	4806      	ldr	r0, [pc, #24]	; (8004b18 <MX_GPIO_Init+0x160>)
 8004b00:	f001 f93a 	bl	8005d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b04:	bf00      	nop
 8004b06:	3728      	adds	r7, #40	; 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40020000 	.word	0x40020000
 8004b14:	40020800 	.word	0x40020800
 8004b18:	40020c00 	.word	0x40020c00

08004b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b20:	b672      	cpsid	i
}
 8004b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004b24:	e7fe      	b.n	8004b24 <Error_Handler+0x8>
	...

08004b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2e:	2300      	movs	r3, #0
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	4a0f      	ldr	r2, [pc, #60]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	603b      	str	r3, [r7, #0]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b58:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_MspInit+0x4c>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800

08004b78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <HAL_RTC_MspInit+0x4c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d111      	bne.n	8004bbc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 ff0c 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004bb2:	f7ff ffb3 	bl	8004b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_RTC_MspInit+0x50>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40002800 	.word	0x40002800
 8004bc8:	42470e3c 	.word	0x42470e3c

08004bcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08c      	sub	sp, #48	; 0x30
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <HAL_SPI_MspInit+0xe8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d12c      	bne.n	8004c48 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	4a29      	ldr	r2, [pc, #164]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1a:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004c26:	23e0      	movs	r3, #224	; 0xe0
 8004c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c32:	2303      	movs	r3, #3
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c36:	2305      	movs	r3, #5
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	f107 031c 	add.w	r3, r7, #28
 8004c3e:	4619      	mov	r1, r3
 8004c40:	481e      	ldr	r0, [pc, #120]	; (8004cbc <HAL_SPI_MspInit+0xf0>)
 8004c42:	f001 f899 	bl	8005d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c46:	e031      	b.n	8004cac <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <HAL_SPI_MspInit+0xf4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d12c      	bne.n	8004cac <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	613b      	str	r3, [r7, #16]
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <HAL_SPI_MspInit+0xec>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM95_SCK_Pin|RFM95_MISO_Pin|RFM95_MOSI_Pin;
 8004c8a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c90:	2302      	movs	r3, #2
 8004c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c9c:	2305      	movs	r3, #5
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca0:	f107 031c 	add.w	r3, r7, #28
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4807      	ldr	r0, [pc, #28]	; (8004cc4 <HAL_SPI_MspInit+0xf8>)
 8004ca8:	f001 f866 	bl	8005d78 <HAL_GPIO_Init>
}
 8004cac:	bf00      	nop
 8004cae:	3730      	adds	r7, #48	; 0x30
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40013000 	.word	0x40013000
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40020000 	.word	0x40020000
 8004cc0:	40003800 	.word	0x40003800
 8004cc4:	40020400 	.word	0x40020400

08004cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a95      	ldr	r2, [pc, #596]	; (8004f3c <HAL_UART_MspInit+0x274>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d153      	bne.n	8004d92 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	4b94      	ldr	r3, [pc, #592]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a93      	ldr	r2, [pc, #588]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfa:	4b91      	ldr	r3, [pc, #580]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d02:	623b      	str	r3, [r7, #32]
 8004d04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	4b8d      	ldr	r3, [pc, #564]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a8c      	ldr	r2, [pc, #560]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b8a      	ldr	r3, [pc, #552]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	4b86      	ldr	r3, [pc, #536]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a85      	ldr	r2, [pc, #532]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d2c:	f043 0304 	orr.w	r3, r3, #4
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b83      	ldr	r3, [pc, #524]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d3e:	2302      	movs	r3, #2
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d4e:	2308      	movs	r3, #8
 8004d50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d56:	4619      	mov	r1, r3
 8004d58:	487a      	ldr	r0, [pc, #488]	; (8004f44 <HAL_UART_MspInit+0x27c>)
 8004d5a:	f001 f80d 	bl	8005d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004d70:	2308      	movs	r3, #8
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4873      	ldr	r0, [pc, #460]	; (8004f48 <HAL_UART_MspInit+0x280>)
 8004d7c:	f000 fffc 	bl	8005d78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d80:	2200      	movs	r2, #0
 8004d82:	2100      	movs	r1, #0
 8004d84:	2034      	movs	r0, #52	; 0x34
 8004d86:	f000 fbbe 	bl	8005506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004d8a:	2034      	movs	r0, #52	; 0x34
 8004d8c:	f000 fbd7 	bl	800553e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d90:	e0cf      	b.n	8004f32 <HAL_UART_MspInit+0x26a>
  else if(huart->Instance==USART2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a6d      	ldr	r2, [pc, #436]	; (8004f4c <HAL_UART_MspInit+0x284>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d162      	bne.n	8004e62 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	4a66      	ldr	r2, [pc, #408]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004daa:	6413      	str	r3, [r2, #64]	; 0x40
 8004dac:	4b64      	ldr	r3, [pc, #400]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	4b60      	ldr	r3, [pc, #384]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	4a5f      	ldr	r2, [pc, #380]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc8:	4b5d      	ldr	r3, [pc, #372]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de0:	2303      	movs	r3, #3
 8004de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004de4:	2307      	movs	r3, #7
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dec:	4619      	mov	r1, r3
 8004dee:	4855      	ldr	r0, [pc, #340]	; (8004f44 <HAL_UART_MspInit+0x27c>)
 8004df0:	f000 ffc2 	bl	8005d78 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004df4:	4b56      	ldr	r3, [pc, #344]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004df6:	4a57      	ldr	r2, [pc, #348]	; (8004f54 <HAL_UART_MspInit+0x28c>)
 8004df8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e02:	4b53      	ldr	r3, [pc, #332]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e08:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e0e:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e1c:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e22:	4b4b      	ldr	r3, [pc, #300]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e28:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e2e:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e34:	4846      	ldr	r0, [pc, #280]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e36:	f000 fb9d 	bl	8005574 <HAL_DMA_Init>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004e40:	f7ff fe6c 	bl	8004b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a42      	ldr	r2, [pc, #264]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
 8004e4a:	4a41      	ldr	r2, [pc, #260]	; (8004f50 <HAL_UART_MspInit+0x288>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	2026      	movs	r0, #38	; 0x26
 8004e56:	f000 fb56 	bl	8005506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004e5a:	2026      	movs	r0, #38	; 0x26
 8004e5c:	f000 fb6f 	bl	800553e <HAL_NVIC_EnableIRQ>
}
 8004e60:	e067      	b.n	8004f32 <HAL_UART_MspInit+0x26a>
  else if(huart->Instance==USART3)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a3c      	ldr	r2, [pc, #240]	; (8004f58 <HAL_UART_MspInit+0x290>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d162      	bne.n	8004f32 <HAL_UART_MspInit+0x26a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	4a32      	ldr	r2, [pc, #200]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7c:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e88:	2300      	movs	r3, #0
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	4b2c      	ldr	r3, [pc, #176]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e92:	f043 0302 	orr.w	r3, r3, #2
 8004e96:	6313      	str	r3, [r2, #48]	; 0x30
 8004e98:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_UART_MspInit+0x278>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8004ea4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4826      	ldr	r0, [pc, #152]	; (8004f5c <HAL_UART_MspInit+0x294>)
 8004ec2:	f000 ff59 	bl	8005d78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004ec6:	4b26      	ldr	r3, [pc, #152]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ec8:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <HAL_UART_MspInit+0x29c>)
 8004eca:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ed2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ed4:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ee6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004efa:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004f06:	4816      	ldr	r0, [pc, #88]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004f08:	f000 fb34 	bl	8005574 <HAL_DMA_Init>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8004f12:	f7ff fe03 	bl	8004b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f1c:	4a10      	ldr	r2, [pc, #64]	; (8004f60 <HAL_UART_MspInit+0x298>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2027      	movs	r0, #39	; 0x27
 8004f28:	f000 faed 	bl	8005506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004f2c:	2027      	movs	r0, #39	; 0x27
 8004f2e:	f000 fb06 	bl	800553e <HAL_NVIC_EnableIRQ>
}
 8004f32:	bf00      	nop
 8004f34:	3738      	adds	r7, #56	; 0x38
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40004c00 	.word	0x40004c00
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40020000 	.word	0x40020000
 8004f48:	40020800 	.word	0x40020800
 8004f4c:	40004400 	.word	0x40004400
 8004f50:	200003c8 	.word	0x200003c8
 8004f54:	40026088 	.word	0x40026088
 8004f58:	40004800 	.word	0x40004800
 8004f5c:	40020400 	.word	0x40020400
 8004f60:	20000428 	.word	0x20000428
 8004f64:	40026028 	.word	0x40026028

08004f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f6c:	e7fe      	b.n	8004f6c <NMI_Handler+0x4>

08004f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f72:	e7fe      	b.n	8004f72 <HardFault_Handler+0x4>

08004f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f78:	e7fe      	b.n	8004f78 <MemManage_Handler+0x4>

08004f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f7e:	e7fe      	b.n	8004f7e <BusFault_Handler+0x4>

08004f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f84:	e7fe      	b.n	8004f84 <UsageFault_Handler+0x4>

08004f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fb4:	f000 f988 	bl	80052c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fb8:	bf00      	nop
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004fc0:	4802      	ldr	r0, [pc, #8]	; (8004fcc <DMA1_Stream1_IRQHandler+0x10>)
 8004fc2:	f000 fc6f 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000428 	.word	0x20000428

08004fd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004fd4:	4802      	ldr	r0, [pc, #8]	; (8004fe0 <DMA1_Stream5_IRQHandler+0x10>)
 8004fd6:	f000 fc65 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200003c8 	.word	0x200003c8

08004fe4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004fe8:	4802      	ldr	r0, [pc, #8]	; (8004ff4 <USART2_IRQHandler+0x10>)
 8004fea:	f003 f819 	bl	8008020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000340 	.word	0x20000340

08004ff8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ffc:	4802      	ldr	r0, [pc, #8]	; (8005008 <USART3_IRQHandler+0x10>)
 8004ffe:	f003 f80f 	bl	8008020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20000384 	.word	0x20000384

0800500c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005010:	4802      	ldr	r0, [pc, #8]	; (800501c <UART4_IRQHandler+0x10>)
 8005012:	f003 f805 	bl	8008020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005016:	bf00      	nop
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	200002fc 	.word	0x200002fc

08005020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  return 1;
 8005024:	2301      	movs	r3, #1
}
 8005026:	4618      	mov	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <_kill>:

int _kill(int pid, int sig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800503a:	f005 fb33 	bl	800a6a4 <__errno>
 800503e:	4603      	mov	r3, r0
 8005040:	2216      	movs	r2, #22
 8005042:	601a      	str	r2, [r3, #0]
  return -1;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_exit>:

void _exit (int status)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005058:	f04f 31ff 	mov.w	r1, #4294967295
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ffe7 	bl	8005030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005062:	e7fe      	b.n	8005062 <_exit+0x12>

08005064 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e00a      	b.n	800508c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005076:	f3af 8000 	nop.w
 800507a:	4601      	mov	r1, r0
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	60ba      	str	r2, [r7, #8]
 8005082:	b2ca      	uxtb	r2, r1
 8005084:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3301      	adds	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	dbf0      	blt.n	8005076 <_read+0x12>
  }

  return len;
 8005094:	687b      	ldr	r3, [r7, #4]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e009      	b.n	80050c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	60ba      	str	r2, [r7, #8]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dbf1      	blt.n	80050b0 <_write+0x12>
  }
  return len;
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_close>:

int _close(int file)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80050de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050fe:	605a      	str	r2, [r3, #4]
  return 0;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <_isatty>:

int _isatty(int file)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005116:	2301      	movs	r3, #1
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
	...

08005140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <_sbrk+0x5c>)
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <_sbrk+0x60>)
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <_sbrk+0x64>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d102      	bne.n	8005162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <_sbrk+0x64>)
 800515e:	4a12      	ldr	r2, [pc, #72]	; (80051a8 <_sbrk+0x68>)
 8005160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <_sbrk+0x64>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4413      	add	r3, r2
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d207      	bcs.n	8005180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005170:	f005 fa98 	bl	800a6a4 <__errno>
 8005174:	4603      	mov	r3, r0
 8005176:	220c      	movs	r2, #12
 8005178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	e009      	b.n	8005194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <_sbrk+0x64>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <_sbrk+0x64>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <_sbrk+0x64>)
 8005190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20020000 	.word	0x20020000
 80051a0:	00000400 	.word	0x00000400
 80051a4:	20000d3c 	.word	0x20000d3c
 80051a8:	20000ea8 	.word	0x20000ea8

080051ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051b0:	4b06      	ldr	r3, [pc, #24]	; (80051cc <SystemInit+0x20>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <SystemInit+0x20>)
 80051b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <Reset_Handler>:
 80051d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005208 <LoopFillZerobss+0x12>
 80051d4:	480d      	ldr	r0, [pc, #52]	; (800520c <LoopFillZerobss+0x16>)
 80051d6:	490e      	ldr	r1, [pc, #56]	; (8005210 <LoopFillZerobss+0x1a>)
 80051d8:	4a0e      	ldr	r2, [pc, #56]	; (8005214 <LoopFillZerobss+0x1e>)
 80051da:	2300      	movs	r3, #0
 80051dc:	e002      	b.n	80051e4 <LoopCopyDataInit>

080051de <CopyDataInit>:
 80051de:	58d4      	ldr	r4, [r2, r3]
 80051e0:	50c4      	str	r4, [r0, r3]
 80051e2:	3304      	adds	r3, #4

080051e4 <LoopCopyDataInit>:
 80051e4:	18c4      	adds	r4, r0, r3
 80051e6:	428c      	cmp	r4, r1
 80051e8:	d3f9      	bcc.n	80051de <CopyDataInit>
 80051ea:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <LoopFillZerobss+0x22>)
 80051ec:	4c0b      	ldr	r4, [pc, #44]	; (800521c <LoopFillZerobss+0x26>)
 80051ee:	2300      	movs	r3, #0
 80051f0:	e001      	b.n	80051f6 <LoopFillZerobss>

080051f2 <FillZerobss>:
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	3204      	adds	r2, #4

080051f6 <LoopFillZerobss>:
 80051f6:	42a2      	cmp	r2, r4
 80051f8:	d3fb      	bcc.n	80051f2 <FillZerobss>
 80051fa:	f7ff ffd7 	bl	80051ac <SystemInit>
 80051fe:	f005 fa57 	bl	800a6b0 <__libc_init_array>
 8005202:	f7ff f8cb 	bl	800439c <main>
 8005206:	4770      	bx	lr
 8005208:	20020000 	.word	0x20020000
 800520c:	20000000 	.word	0x20000000
 8005210:	20000210 	.word	0x20000210
 8005214:	0800e2a0 	.word	0x0800e2a0
 8005218:	20000210 	.word	0x20000210
 800521c:	20000ea4 	.word	0x20000ea4

08005220 <ADC_IRQHandler>:
 8005220:	e7fe      	b.n	8005220 <ADC_IRQHandler>
	...

08005224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005228:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <HAL_Init+0x40>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <HAL_Init+0x40>)
 800522e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_Init+0x40>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <HAL_Init+0x40>)
 800523a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800523e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005240:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_Init+0x40>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a07      	ldr	r2, [pc, #28]	; (8005264 <HAL_Init+0x40>)
 8005246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800524c:	2003      	movs	r0, #3
 800524e:	f000 f94f 	bl	80054f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005252:	200f      	movs	r0, #15
 8005254:	f000 f808 	bl	8005268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005258:	f7ff fc66 	bl	8004b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023c00 	.word	0x40023c00

08005268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005270:	4b12      	ldr	r3, [pc, #72]	; (80052bc <HAL_InitTick+0x54>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <HAL_InitTick+0x58>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	4619      	mov	r1, r3
 800527a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800527e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f967 	bl	800555a <HAL_SYSTICK_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e00e      	b.n	80052b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b0f      	cmp	r3, #15
 800529a:	d80a      	bhi.n	80052b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800529c:	2200      	movs	r2, #0
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	f04f 30ff 	mov.w	r0, #4294967295
 80052a4:	f000 f92f 	bl	8005506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80052a8:	4a06      	ldr	r2, [pc, #24]	; (80052c4 <HAL_InitTick+0x5c>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20000018 	.word	0x20000018
 80052c0:	20000020 	.word	0x20000020
 80052c4:	2000001c 	.word	0x2000001c

080052c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <HAL_IncTick+0x20>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_IncTick+0x24>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4413      	add	r3, r2
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <HAL_IncTick+0x24>)
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000020 	.word	0x20000020
 80052ec:	20000d40 	.word	0x20000d40

080052f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return uwTick;
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <HAL_GetTick+0x14>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000d40 	.word	0x20000d40

08005308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005310:	f7ff ffee 	bl	80052f0 <HAL_GetTick>
 8005314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d005      	beq.n	800532e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005322:	4b0a      	ldr	r3, [pc, #40]	; (800534c <HAL_Delay+0x44>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800532e:	bf00      	nop
 8005330:	f7ff ffde 	bl	80052f0 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	429a      	cmp	r2, r3
 800533e:	d8f7      	bhi.n	8005330 <HAL_Delay+0x28>
  {
  }
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000020 	.word	0x20000020

08005350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005360:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <__NVIC_SetPriorityGrouping+0x44>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800536c:	4013      	ands	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800537c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005382:	4a04      	ldr	r2, [pc, #16]	; (8005394 <__NVIC_SetPriorityGrouping+0x44>)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	60d3      	str	r3, [r2, #12]
}
 8005388:	bf00      	nop
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	e000ed00 	.word	0xe000ed00

08005398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800539c:	4b04      	ldr	r3, [pc, #16]	; (80053b0 <__NVIC_GetPriorityGrouping+0x18>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	f003 0307 	and.w	r3, r3, #7
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	db0b      	blt.n	80053de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	f003 021f 	and.w	r2, r3, #31
 80053cc:	4907      	ldr	r1, [pc, #28]	; (80053ec <__NVIC_EnableIRQ+0x38>)
 80053ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	2001      	movs	r0, #1
 80053d6:	fa00 f202 	lsl.w	r2, r0, r2
 80053da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000e100 	.word	0xe000e100

080053f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005400:	2b00      	cmp	r3, #0
 8005402:	db0a      	blt.n	800541a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	490c      	ldr	r1, [pc, #48]	; (800543c <__NVIC_SetPriority+0x4c>)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	0112      	lsls	r2, r2, #4
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	440b      	add	r3, r1
 8005414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005418:	e00a      	b.n	8005430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	b2da      	uxtb	r2, r3
 800541e:	4908      	ldr	r1, [pc, #32]	; (8005440 <__NVIC_SetPriority+0x50>)
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	f003 030f 	and.w	r3, r3, #15
 8005426:	3b04      	subs	r3, #4
 8005428:	0112      	lsls	r2, r2, #4
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	440b      	add	r3, r1
 800542e:	761a      	strb	r2, [r3, #24]
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	e000e100 	.word	0xe000e100
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005444:	b480      	push	{r7}
 8005446:	b089      	sub	sp, #36	; 0x24
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f1c3 0307 	rsb	r3, r3, #7
 800545e:	2b04      	cmp	r3, #4
 8005460:	bf28      	it	cs
 8005462:	2304      	movcs	r3, #4
 8005464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3304      	adds	r3, #4
 800546a:	2b06      	cmp	r3, #6
 800546c:	d902      	bls.n	8005474 <NVIC_EncodePriority+0x30>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3b03      	subs	r3, #3
 8005472:	e000      	b.n	8005476 <NVIC_EncodePriority+0x32>
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005478:	f04f 32ff 	mov.w	r2, #4294967295
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	43da      	mvns	r2, r3
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	401a      	ands	r2, r3
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800548c:	f04f 31ff 	mov.w	r1, #4294967295
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	fa01 f303 	lsl.w	r3, r1, r3
 8005496:	43d9      	mvns	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800549c:	4313      	orrs	r3, r2
         );
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3724      	adds	r7, #36	; 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
	...

080054ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054bc:	d301      	bcc.n	80054c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054be:	2301      	movs	r3, #1
 80054c0:	e00f      	b.n	80054e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054c2:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <SysTick_Config+0x40>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054ca:	210f      	movs	r1, #15
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	f7ff ff8e 	bl	80053f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SysTick_Config+0x40>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054da:	4b04      	ldr	r3, [pc, #16]	; (80054ec <SysTick_Config+0x40>)
 80054dc:	2207      	movs	r2, #7
 80054de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	e000e010 	.word	0xe000e010

080054f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff29 	bl	8005350 <__NVIC_SetPriorityGrouping>
}
 80054fe:	bf00      	nop
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005518:	f7ff ff3e 	bl	8005398 <__NVIC_GetPriorityGrouping>
 800551c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	6978      	ldr	r0, [r7, #20]
 8005524:	f7ff ff8e 	bl	8005444 <NVIC_EncodePriority>
 8005528:	4602      	mov	r2, r0
 800552a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff ff5d 	bl	80053f0 <__NVIC_SetPriority>
}
 8005536:	bf00      	nop
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	4603      	mov	r3, r0
 8005546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff31 	bl	80053b4 <__NVIC_EnableIRQ>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ffa2 	bl	80054ac <SysTick_Config>
 8005568:	4603      	mov	r3, r0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7ff feb6 	bl	80052f0 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e099      	b.n	80056c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b0:	e00f      	b.n	80055d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b2:	f7ff fe9d 	bl	80052f0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d908      	bls.n	80055d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e078      	b.n	80056c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e8      	bne.n	80055b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <HAL_DMA_Init+0x158>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b04      	cmp	r3, #4
 800562a:	d107      	bne.n	800563c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4313      	orrs	r3, r2
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b04      	cmp	r3, #4
 8005664:	d117      	bne.n	8005696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb01 	bl	8005c80 <DMA_CheckFifoParam>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005692:	2301      	movs	r3, #1
 8005694:	e016      	b.n	80056c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fab8 	bl	8005c14 <DMA_CalcBaseAndBitshift>
 80056a4:	4603      	mov	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	223f      	movs	r2, #63	; 0x3f
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	f010803f 	.word	0xf010803f

080056d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_DMA_Start_IT+0x26>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e040      	b.n	8005778 <HAL_DMA_Start_IT+0xa8>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d12f      	bne.n	800576a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fa4a 	bl	8005bb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	223f      	movs	r2, #63	; 0x3f
 800572a:	409a      	lsls	r2, r3
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0216 	orr.w	r2, r2, #22
 800573e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0208 	orr.w	r2, r2, #8
 8005756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e005      	b.n	8005776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005772:	2302      	movs	r3, #2
 8005774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800578e:	f7ff fdaf 	bl	80052f0 <HAL_GetTick>
 8005792:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d008      	beq.n	80057b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e052      	b.n	8005858 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0216 	bic.w	r2, r2, #22
 80057c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <HAL_DMA_Abort+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0208 	bic.w	r2, r2, #8
 80057f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005802:	e013      	b.n	800582c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005804:	f7ff fd74 	bl	80052f0 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b05      	cmp	r3, #5
 8005810:	d90c      	bls.n	800582c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e015      	b.n	8005858 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e4      	bne.n	8005804 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	223f      	movs	r2, #63	; 0x3f
 8005840:	409a      	lsls	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d004      	beq.n	800587e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e00c      	b.n	8005898 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2205      	movs	r2, #5
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058b0:	4b8e      	ldr	r3, [pc, #568]	; (8005aec <HAL_DMA_IRQHandler+0x248>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a8e      	ldr	r2, [pc, #568]	; (8005af0 <HAL_DMA_IRQHandler+0x24c>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a9b      	lsrs	r3, r3, #10
 80058bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	2208      	movs	r2, #8
 80058d0:	409a      	lsls	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01a      	beq.n	8005910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	2208      	movs	r2, #8
 80058fe:	409a      	lsls	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f043 0201 	orr.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	2201      	movs	r2, #1
 8005934:	409a      	lsls	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f043 0202 	orr.w	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	2204      	movs	r2, #4
 800594c:	409a      	lsls	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d012      	beq.n	800597c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005968:	2204      	movs	r2, #4
 800596a:	409a      	lsls	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	2210      	movs	r2, #16
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d043      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d03c      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2210      	movs	r2, #16
 80059a0:	409a      	lsls	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d024      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	e01f      	b.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	e016      	b.n	8005a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0208 	bic.w	r2, r2, #8
 8005a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a18:	2220      	movs	r2, #32
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 808f 	beq.w	8005b44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8087 	beq.w	8005b44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d136      	bne.n	8005abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0216 	bic.w	r2, r2, #22
 8005a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_DMA_IRQHandler+0x1da>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0208 	bic.w	r2, r2, #8
 8005a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	223f      	movs	r2, #63	; 0x3f
 8005a94:	409a      	lsls	r2, r3
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d07e      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
        }
        return;
 8005aba:	e079      	b.n	8005bb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d031      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
 8005ae8:	e02c      	b.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
 8005aea:	bf00      	nop
 8005aec:	20000018 	.word	0x20000018
 8005af0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d023      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	e01e      	b.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10f      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0210 	bic.w	r2, r2, #16
 8005b22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d032      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d307      	bcc.n	8005b8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f2      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x2cc>
 8005b8a:	e000      	b.n	8005b8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
 8005bae:	e000      	b.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bb0:	bf00      	nop
    }
  }
}
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d108      	bne.n	8005bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005bf6:	e007      	b.n	8005c08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	3b10      	subs	r3, #16
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <DMA_CalcBaseAndBitshift+0x64>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <DMA_CalcBaseAndBitshift+0x68>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d909      	bls.n	8005c56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c4a:	f023 0303 	bic.w	r3, r3, #3
 8005c4e:	1d1a      	adds	r2, r3, #4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	659a      	str	r2, [r3, #88]	; 0x58
 8005c54:	e007      	b.n	8005c66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	aaaaaaab 	.word	0xaaaaaaab
 8005c7c:	0800dee4 	.word	0x0800dee4

08005c80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11f      	bne.n	8005cda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d856      	bhi.n	8005d4e <DMA_CheckFifoParam+0xce>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <DMA_CheckFifoParam+0x28>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cb9 	.word	0x08005cb9
 8005cac:	08005ccb 	.word	0x08005ccb
 8005cb0:	08005cb9 	.word	0x08005cb9
 8005cb4:	08005d4f 	.word	0x08005d4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d046      	beq.n	8005d52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cc8:	e043      	b.n	8005d52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd2:	d140      	bne.n	8005d56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cd8:	e03d      	b.n	8005d56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d121      	bne.n	8005d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d837      	bhi.n	8005d5a <DMA_CheckFifoParam+0xda>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <DMA_CheckFifoParam+0x70>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d07 	.word	0x08005d07
 8005cf8:	08005d01 	.word	0x08005d01
 8005cfc:	08005d19 	.word	0x08005d19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
      break;
 8005d04:	e030      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d025      	beq.n	8005d5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d16:	e022      	b.n	8005d5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d20:	d11f      	bne.n	8005d62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d26:	e01c      	b.n	8005d62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d903      	bls.n	8005d36 <DMA_CheckFifoParam+0xb6>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d003      	beq.n	8005d3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d34:	e018      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3a:	e015      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e00b      	b.n	8005d66 <DMA_CheckFifoParam+0xe6>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e00a      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;
 8005d52:	bf00      	nop
 8005d54:	e008      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;
 8005d56:	bf00      	nop
 8005d58:	e006      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;
 8005d5a:	bf00      	nop
 8005d5c:	e004      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;
 8005d5e:	bf00      	nop
 8005d60:	e002      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
      break;
 8005d66:	bf00      	nop
    }
  } 
  
  return status; 
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	; 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e16b      	b.n	800606c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d94:	2201      	movs	r2, #1
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4013      	ands	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	f040 815a 	bne.w	8006066 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d005      	beq.n	8005dca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d130      	bne.n	8005e2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e00:	2201      	movs	r2, #1
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 0201 	and.w	r2, r3, #1
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d017      	beq.n	8005e68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	2203      	movs	r2, #3
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	43db      	mvns	r3, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d123      	bne.n	8005ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	08da      	lsrs	r2, r3, #3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3208      	adds	r2, #8
 8005e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	220f      	movs	r2, #15
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691a      	ldr	r2, [r3, #16]
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0307 	and.w	r3, r3, #7
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	08da      	lsrs	r2, r3, #3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3208      	adds	r2, #8
 8005eb6:	69b9      	ldr	r1, [r7, #24]
 8005eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f003 0203 	and.w	r2, r3, #3
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80b4 	beq.w	8006066 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	4b60      	ldr	r3, [pc, #384]	; (8006084 <HAL_GPIO_Init+0x30c>)
 8005f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f06:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_GPIO_Init+0x30c>)
 8005f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005f0e:	4b5d      	ldr	r3, [pc, #372]	; (8006084 <HAL_GPIO_Init+0x30c>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f1a:	4a5b      	ldr	r2, [pc, #364]	; (8006088 <HAL_GPIO_Init+0x310>)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	3302      	adds	r3, #2
 8005f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	220f      	movs	r2, #15
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a52      	ldr	r2, [pc, #328]	; (800608c <HAL_GPIO_Init+0x314>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d02b      	beq.n	8005f9e <HAL_GPIO_Init+0x226>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a51      	ldr	r2, [pc, #324]	; (8006090 <HAL_GPIO_Init+0x318>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d025      	beq.n	8005f9a <HAL_GPIO_Init+0x222>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a50      	ldr	r2, [pc, #320]	; (8006094 <HAL_GPIO_Init+0x31c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d01f      	beq.n	8005f96 <HAL_GPIO_Init+0x21e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a4f      	ldr	r2, [pc, #316]	; (8006098 <HAL_GPIO_Init+0x320>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d019      	beq.n	8005f92 <HAL_GPIO_Init+0x21a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a4e      	ldr	r2, [pc, #312]	; (800609c <HAL_GPIO_Init+0x324>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d013      	beq.n	8005f8e <HAL_GPIO_Init+0x216>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a4d      	ldr	r2, [pc, #308]	; (80060a0 <HAL_GPIO_Init+0x328>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00d      	beq.n	8005f8a <HAL_GPIO_Init+0x212>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a4c      	ldr	r2, [pc, #304]	; (80060a4 <HAL_GPIO_Init+0x32c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d007      	beq.n	8005f86 <HAL_GPIO_Init+0x20e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a4b      	ldr	r2, [pc, #300]	; (80060a8 <HAL_GPIO_Init+0x330>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d101      	bne.n	8005f82 <HAL_GPIO_Init+0x20a>
 8005f7e:	2307      	movs	r3, #7
 8005f80:	e00e      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f82:	2308      	movs	r3, #8
 8005f84:	e00c      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f86:	2306      	movs	r3, #6
 8005f88:	e00a      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f8a:	2305      	movs	r3, #5
 8005f8c:	e008      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f8e:	2304      	movs	r3, #4
 8005f90:	e006      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f92:	2303      	movs	r3, #3
 8005f94:	e004      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e002      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_GPIO_Init+0x228>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	f002 0203 	and.w	r2, r2, #3
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fb0:	4935      	ldr	r1, [pc, #212]	; (8006088 <HAL_GPIO_Init+0x310>)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fbe:	4b3b      	ldr	r3, [pc, #236]	; (80060ac <HAL_GPIO_Init+0x334>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005fe2:	4a32      	ldr	r2, [pc, #200]	; (80060ac <HAL_GPIO_Init+0x334>)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005fe8:	4b30      	ldr	r3, [pc, #192]	; (80060ac <HAL_GPIO_Init+0x334>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800600c:	4a27      	ldr	r2, [pc, #156]	; (80060ac <HAL_GPIO_Init+0x334>)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006012:	4b26      	ldr	r3, [pc, #152]	; (80060ac <HAL_GPIO_Init+0x334>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_GPIO_Init+0x334>)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800603c:	4b1b      	ldr	r3, [pc, #108]	; (80060ac <HAL_GPIO_Init+0x334>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006060:	4a12      	ldr	r2, [pc, #72]	; (80060ac <HAL_GPIO_Init+0x334>)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	f67f ae90 	bls.w	8005d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3724      	adds	r7, #36	; 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	40013800 	.word	0x40013800
 800608c:	40020000 	.word	0x40020000
 8006090:	40020400 	.word	0x40020400
 8006094:	40020800 	.word	0x40020800
 8006098:	40020c00 	.word	0x40020c00
 800609c:	40021000 	.word	0x40021000
 80060a0:	40021400 	.word	0x40021400
 80060a4:	40021800 	.word	0x40021800
 80060a8:	40021c00 	.word	0x40021c00
 80060ac:	40013c00 	.word	0x40013c00

080060b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	887b      	ldrh	r3, [r7, #2]
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
 80060cc:	e001      	b.n	80060d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e267      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d075      	beq.n	800621e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006132:	4b88      	ldr	r3, [pc, #544]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 030c 	and.w	r3, r3, #12
 800613a:	2b04      	cmp	r3, #4
 800613c:	d00c      	beq.n	8006158 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800613e:	4b85      	ldr	r3, [pc, #532]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006146:	2b08      	cmp	r3, #8
 8006148:	d112      	bne.n	8006170 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800614a:	4b82      	ldr	r3, [pc, #520]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006152:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006156:	d10b      	bne.n	8006170 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006158:	4b7e      	ldr	r3, [pc, #504]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d05b      	beq.n	800621c <HAL_RCC_OscConfig+0x108>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d157      	bne.n	800621c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e242      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006178:	d106      	bne.n	8006188 <HAL_RCC_OscConfig+0x74>
 800617a:	4b76      	ldr	r3, [pc, #472]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a75      	ldr	r2, [pc, #468]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006184:	6013      	str	r3, [r2, #0]
 8006186:	e01d      	b.n	80061c4 <HAL_RCC_OscConfig+0xb0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006190:	d10c      	bne.n	80061ac <HAL_RCC_OscConfig+0x98>
 8006192:	4b70      	ldr	r3, [pc, #448]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a6f      	ldr	r2, [pc, #444]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	4b6d      	ldr	r3, [pc, #436]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a6c      	ldr	r2, [pc, #432]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e00b      	b.n	80061c4 <HAL_RCC_OscConfig+0xb0>
 80061ac:	4b69      	ldr	r3, [pc, #420]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a68      	ldr	r2, [pc, #416]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	4b66      	ldr	r3, [pc, #408]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a65      	ldr	r2, [pc, #404]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061cc:	f7ff f890 	bl	80052f0 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061d4:	f7ff f88c 	bl	80052f0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b64      	cmp	r3, #100	; 0x64
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e207      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061e6:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0xc0>
 80061f2:	e014      	b.n	800621e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f7ff f87c 	bl	80052f0 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061fc:	f7ff f878 	bl	80052f0 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e1f3      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800620e:	4b51      	ldr	r3, [pc, #324]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0xe8>
 800621a:	e000      	b.n	800621e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d063      	beq.n	80062f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006236:	4b47      	ldr	r3, [pc, #284]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800623e:	2b08      	cmp	r3, #8
 8006240:	d11c      	bne.n	800627c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006242:	4b44      	ldr	r3, [pc, #272]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d116      	bne.n	800627c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800624e:	4b41      	ldr	r3, [pc, #260]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d005      	beq.n	8006266 <HAL_RCC_OscConfig+0x152>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d001      	beq.n	8006266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e1c7      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4937      	ldr	r1, [pc, #220]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800627a:	e03a      	b.n	80062f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d020      	beq.n	80062c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006284:	4b34      	ldr	r3, [pc, #208]	; (8006358 <HAL_RCC_OscConfig+0x244>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628a:	f7ff f831 	bl	80052f0 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006292:	f7ff f82d 	bl	80052f0 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b02      	cmp	r3, #2
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e1a8      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a4:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d0f0      	beq.n	8006292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b0:	4b28      	ldr	r3, [pc, #160]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4925      	ldr	r1, [pc, #148]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]
 80062c4:	e015      	b.n	80062f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <HAL_RCC_OscConfig+0x244>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7ff f810 	bl	80052f0 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062d4:	f7ff f80c 	bl	80052f0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e187      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062e6:	4b1b      	ldr	r3, [pc, #108]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0308 	and.w	r3, r3, #8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d036      	beq.n	800636c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <HAL_RCC_OscConfig+0x248>)
 8006308:	2201      	movs	r2, #1
 800630a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fe fff0 	bl	80052f0 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006314:	f7fe ffec 	bl	80052f0 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e167      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_OscConfig+0x240>)
 8006328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x200>
 8006332:	e01b      	b.n	800636c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <HAL_RCC_OscConfig+0x248>)
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800633a:	f7fe ffd9 	bl	80052f0 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006340:	e00e      	b.n	8006360 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006342:	f7fe ffd5 	bl	80052f0 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d907      	bls.n	8006360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e150      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
 8006354:	40023800 	.word	0x40023800
 8006358:	42470000 	.word	0x42470000
 800635c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006360:	4b88      	ldr	r3, [pc, #544]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1ea      	bne.n	8006342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8097 	beq.w	80064a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800637e:	4b81      	ldr	r3, [pc, #516]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
 800638e:	4b7d      	ldr	r3, [pc, #500]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	4a7c      	ldr	r2, [pc, #496]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006398:	6413      	str	r3, [r2, #64]	; 0x40
 800639a:	4b7a      	ldr	r3, [pc, #488]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a2:	60bb      	str	r3, [r7, #8]
 80063a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063a6:	2301      	movs	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063aa:	4b77      	ldr	r3, [pc, #476]	; (8006588 <HAL_RCC_OscConfig+0x474>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d118      	bne.n	80063e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063b6:	4b74      	ldr	r3, [pc, #464]	; (8006588 <HAL_RCC_OscConfig+0x474>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a73      	ldr	r2, [pc, #460]	; (8006588 <HAL_RCC_OscConfig+0x474>)
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063c2:	f7fe ff95 	bl	80052f0 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ca:	f7fe ff91 	bl	80052f0 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e10c      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063dc:	4b6a      	ldr	r3, [pc, #424]	; (8006588 <HAL_RCC_OscConfig+0x474>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0f0      	beq.n	80063ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d106      	bne.n	80063fe <HAL_RCC_OscConfig+0x2ea>
 80063f0:	4b64      	ldr	r3, [pc, #400]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 80063f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f4:	4a63      	ldr	r2, [pc, #396]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 80063f6:	f043 0301 	orr.w	r3, r3, #1
 80063fa:	6713      	str	r3, [r2, #112]	; 0x70
 80063fc:	e01c      	b.n	8006438 <HAL_RCC_OscConfig+0x324>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b05      	cmp	r3, #5
 8006404:	d10c      	bne.n	8006420 <HAL_RCC_OscConfig+0x30c>
 8006406:	4b5f      	ldr	r3, [pc, #380]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a5e      	ldr	r2, [pc, #376]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800640c:	f043 0304 	orr.w	r3, r3, #4
 8006410:	6713      	str	r3, [r2, #112]	; 0x70
 8006412:	4b5c      	ldr	r3, [pc, #368]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006416:	4a5b      	ldr	r2, [pc, #364]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006418:	f043 0301 	orr.w	r3, r3, #1
 800641c:	6713      	str	r3, [r2, #112]	; 0x70
 800641e:	e00b      	b.n	8006438 <HAL_RCC_OscConfig+0x324>
 8006420:	4b58      	ldr	r3, [pc, #352]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	4a57      	ldr	r2, [pc, #348]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006426:	f023 0301 	bic.w	r3, r3, #1
 800642a:	6713      	str	r3, [r2, #112]	; 0x70
 800642c:	4b55      	ldr	r3, [pc, #340]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	4a54      	ldr	r2, [pc, #336]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006432:	f023 0304 	bic.w	r3, r3, #4
 8006436:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d015      	beq.n	800646c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006440:	f7fe ff56 	bl	80052f0 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006446:	e00a      	b.n	800645e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006448:	f7fe ff52 	bl	80052f0 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	f241 3288 	movw	r2, #5000	; 0x1388
 8006456:	4293      	cmp	r3, r2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e0cb      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645e:	4b49      	ldr	r3, [pc, #292]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0ee      	beq.n	8006448 <HAL_RCC_OscConfig+0x334>
 800646a:	e014      	b.n	8006496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646c:	f7fe ff40 	bl	80052f0 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006472:	e00a      	b.n	800648a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006474:	f7fe ff3c 	bl	80052f0 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e0b5      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800648a:	4b3e      	ldr	r3, [pc, #248]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800648c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ee      	bne.n	8006474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006496:	7dfb      	ldrb	r3, [r7, #23]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d105      	bne.n	80064a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800649c:	4b39      	ldr	r3, [pc, #228]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800649e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a0:	4a38      	ldr	r2, [pc, #224]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 80064a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80a1 	beq.w	80065f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064b2:	4b34      	ldr	r3, [pc, #208]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 030c 	and.w	r3, r3, #12
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d05c      	beq.n	8006578 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d141      	bne.n	800654a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c6:	4b31      	ldr	r3, [pc, #196]	; (800658c <HAL_RCC_OscConfig+0x478>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064cc:	f7fe ff10 	bl	80052f0 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d4:	f7fe ff0c 	bl	80052f0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e087      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e6:	4b27      	ldr	r3, [pc, #156]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f0      	bne.n	80064d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006500:	019b      	lsls	r3, r3, #6
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	3b01      	subs	r3, #1
 800650c:	041b      	lsls	r3, r3, #16
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	491b      	ldr	r1, [pc, #108]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 8006518:	4313      	orrs	r3, r2
 800651a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800651c:	4b1b      	ldr	r3, [pc, #108]	; (800658c <HAL_RCC_OscConfig+0x478>)
 800651e:	2201      	movs	r2, #1
 8006520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006522:	f7fe fee5 	bl	80052f0 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652a:	f7fe fee1 	bl	80052f0 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e05c      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653c:	4b11      	ldr	r3, [pc, #68]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0f0      	beq.n	800652a <HAL_RCC_OscConfig+0x416>
 8006548:	e054      	b.n	80065f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <HAL_RCC_OscConfig+0x478>)
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006550:	f7fe fece 	bl	80052f0 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006558:	f7fe feca 	bl	80052f0 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e045      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800656a:	4b06      	ldr	r3, [pc, #24]	; (8006584 <HAL_RCC_OscConfig+0x470>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f0      	bne.n	8006558 <HAL_RCC_OscConfig+0x444>
 8006576:	e03d      	b.n	80065f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d107      	bne.n	8006590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e038      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
 8006584:	40023800 	.word	0x40023800
 8006588:	40007000 	.word	0x40007000
 800658c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006590:	4b1b      	ldr	r3, [pc, #108]	; (8006600 <HAL_RCC_OscConfig+0x4ec>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d028      	beq.n	80065f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d121      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d11a      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065c0:	4013      	ands	r3, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d111      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	085b      	lsrs	r3, r3, #1
 80065d8:	3b01      	subs	r3, #1
 80065da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d107      	bne.n	80065f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d001      	beq.n	80065f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800

08006604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e0cc      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006618:	4b68      	ldr	r3, [pc, #416]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	683a      	ldr	r2, [r7, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d90c      	bls.n	8006640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006626:	4b65      	ldr	r3, [pc, #404]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800662e:	4b63      	ldr	r3, [pc, #396]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d001      	beq.n	8006640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e0b8      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d020      	beq.n	800668e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006658:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a58      	ldr	r2, [pc, #352]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006662:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006670:	4b53      	ldr	r3, [pc, #332]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a52      	ldr	r2, [pc, #328]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800667a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800667c:	4b50      	ldr	r3, [pc, #320]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	494d      	ldr	r1, [pc, #308]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	4313      	orrs	r3, r2
 800668c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d044      	beq.n	8006724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d107      	bne.n	80066b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a2:	4b47      	ldr	r3, [pc, #284]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d119      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e07f      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d003      	beq.n	80066c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d107      	bne.n	80066d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c2:	4b3f      	ldr	r3, [pc, #252]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d109      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e06f      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d2:	4b3b      	ldr	r3, [pc, #236]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e067      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066e2:	4b37      	ldr	r3, [pc, #220]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f023 0203 	bic.w	r2, r3, #3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4934      	ldr	r1, [pc, #208]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066f4:	f7fe fdfc 	bl	80052f0 <HAL_GetTick>
 80066f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066fa:	e00a      	b.n	8006712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066fc:	f7fe fdf8 	bl	80052f0 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	f241 3288 	movw	r2, #5000	; 0x1388
 800670a:	4293      	cmp	r3, r2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e04f      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006712:	4b2b      	ldr	r3, [pc, #172]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 020c 	and.w	r2, r3, #12
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	429a      	cmp	r2, r3
 8006722:	d1eb      	bne.n	80066fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006724:	4b25      	ldr	r3, [pc, #148]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	429a      	cmp	r2, r3
 8006730:	d20c      	bcs.n	800674c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006732:	4b22      	ldr	r3, [pc, #136]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800673a:	4b20      	ldr	r3, [pc, #128]	; (80067bc <HAL_RCC_ClockConfig+0x1b8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0307 	and.w	r3, r3, #7
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e032      	b.n	80067b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006758:	4b19      	ldr	r3, [pc, #100]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4916      	ldr	r1, [pc, #88]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006776:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	00db      	lsls	r3, r3, #3
 8006784:	490e      	ldr	r1, [pc, #56]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	4313      	orrs	r3, r2
 8006788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800678a:	f000 f821 	bl	80067d0 <HAL_RCC_GetSysClockFreq>
 800678e:	4602      	mov	r2, r0
 8006790:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	490a      	ldr	r1, [pc, #40]	; (80067c4 <HAL_RCC_ClockConfig+0x1c0>)
 800679c:	5ccb      	ldrb	r3, [r1, r3]
 800679e:	fa22 f303 	lsr.w	r3, r2, r3
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067a6:	4b09      	ldr	r3, [pc, #36]	; (80067cc <HAL_RCC_ClockConfig+0x1c8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fd5c 	bl	8005268 <HAL_InitTick>

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40023c00 	.word	0x40023c00
 80067c0:	40023800 	.word	0x40023800
 80067c4:	0800decc 	.word	0x0800decc
 80067c8:	20000018 	.word	0x20000018
 80067cc:	2000001c 	.word	0x2000001c

080067d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d4:	b090      	sub	sp, #64	; 0x40
 80067d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	637b      	str	r3, [r7, #52]	; 0x34
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e0:	2300      	movs	r3, #0
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067e8:	4b59      	ldr	r3, [pc, #356]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	d00d      	beq.n	8006810 <HAL_RCC_GetSysClockFreq+0x40>
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	f200 80a1 	bhi.w	800693c <HAL_RCC_GetSysClockFreq+0x16c>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x34>
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d003      	beq.n	800680a <HAL_RCC_GetSysClockFreq+0x3a>
 8006802:	e09b      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_GetSysClockFreq+0x184>)
 8006806:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006808:	e09b      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800680a:	4b53      	ldr	r3, [pc, #332]	; (8006958 <HAL_RCC_GetSysClockFreq+0x188>)
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800680e:	e098      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006810:	4b4f      	ldr	r3, [pc, #316]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006818:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800681a:	4b4d      	ldr	r3, [pc, #308]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d028      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006826:	4b4a      	ldr	r3, [pc, #296]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	099b      	lsrs	r3, r3, #6
 800682c:	2200      	movs	r2, #0
 800682e:	623b      	str	r3, [r7, #32]
 8006830:	627a      	str	r2, [r7, #36]	; 0x24
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006838:	2100      	movs	r1, #0
 800683a:	4b47      	ldr	r3, [pc, #284]	; (8006958 <HAL_RCC_GetSysClockFreq+0x188>)
 800683c:	fb03 f201 	mul.w	r2, r3, r1
 8006840:	2300      	movs	r3, #0
 8006842:	fb00 f303 	mul.w	r3, r0, r3
 8006846:	4413      	add	r3, r2
 8006848:	4a43      	ldr	r2, [pc, #268]	; (8006958 <HAL_RCC_GetSysClockFreq+0x188>)
 800684a:	fba0 1202 	umull	r1, r2, r0, r2
 800684e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006850:	460a      	mov	r2, r1
 8006852:	62ba      	str	r2, [r7, #40]	; 0x28
 8006854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006856:	4413      	add	r3, r2
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	2200      	movs	r2, #0
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	61fa      	str	r2, [r7, #28]
 8006862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800686a:	f7fa f9ed 	bl	8000c48 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4613      	mov	r3, r2
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006876:	e053      	b.n	8006920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006878:	4b35      	ldr	r3, [pc, #212]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	099b      	lsrs	r3, r3, #6
 800687e:	2200      	movs	r2, #0
 8006880:	613b      	str	r3, [r7, #16]
 8006882:	617a      	str	r2, [r7, #20]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800688a:	f04f 0b00 	mov.w	fp, #0
 800688e:	4652      	mov	r2, sl
 8006890:	465b      	mov	r3, fp
 8006892:	f04f 0000 	mov.w	r0, #0
 8006896:	f04f 0100 	mov.w	r1, #0
 800689a:	0159      	lsls	r1, r3, #5
 800689c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a0:	0150      	lsls	r0, r2, #5
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	ebb2 080a 	subs.w	r8, r2, sl
 80068aa:	eb63 090b 	sbc.w	r9, r3, fp
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068c2:	ebb2 0408 	subs.w	r4, r2, r8
 80068c6:	eb63 0509 	sbc.w	r5, r3, r9
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	00eb      	lsls	r3, r5, #3
 80068d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068d8:	00e2      	lsls	r2, r4, #3
 80068da:	4614      	mov	r4, r2
 80068dc:	461d      	mov	r5, r3
 80068de:	eb14 030a 	adds.w	r3, r4, sl
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	eb45 030b 	adc.w	r3, r5, fp
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068f6:	4629      	mov	r1, r5
 80068f8:	028b      	lsls	r3, r1, #10
 80068fa:	4621      	mov	r1, r4
 80068fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006900:	4621      	mov	r1, r4
 8006902:	028a      	lsls	r2, r1, #10
 8006904:	4610      	mov	r0, r2
 8006906:	4619      	mov	r1, r3
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	2200      	movs	r2, #0
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	60fa      	str	r2, [r7, #12]
 8006910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006914:	f7fa f998 	bl	8000c48 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4613      	mov	r3, r2
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCC_GetSysClockFreq+0x180>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	0c1b      	lsrs	r3, r3, #16
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	3301      	adds	r3, #1
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	fbb2 f3f3 	udiv	r3, r2, r3
 8006938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800693a:	e002      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCC_GetSysClockFreq+0x184>)
 800693e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006944:	4618      	mov	r0, r3
 8006946:	3740      	adds	r7, #64	; 0x40
 8006948:	46bd      	mov	sp, r7
 800694a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800694e:	bf00      	nop
 8006950:	40023800 	.word	0x40023800
 8006954:	00f42400 	.word	0x00f42400
 8006958:	017d7840 	.word	0x017d7840

0800695c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006960:	4b03      	ldr	r3, [pc, #12]	; (8006970 <HAL_RCC_GetHCLKFreq+0x14>)
 8006962:	681b      	ldr	r3, [r3, #0]
}
 8006964:	4618      	mov	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000018 	.word	0x20000018

08006974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006978:	f7ff fff0 	bl	800695c <HAL_RCC_GetHCLKFreq>
 800697c:	4602      	mov	r2, r0
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	0a9b      	lsrs	r3, r3, #10
 8006984:	f003 0307 	and.w	r3, r3, #7
 8006988:	4903      	ldr	r1, [pc, #12]	; (8006998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800698a:	5ccb      	ldrb	r3, [r1, r3]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006990:	4618      	mov	r0, r3
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40023800 	.word	0x40023800
 8006998:	0800dedc 	.word	0x0800dedc

0800699c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069a0:	f7ff ffdc 	bl	800695c <HAL_RCC_GetHCLKFreq>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	0b5b      	lsrs	r3, r3, #13
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	4903      	ldr	r1, [pc, #12]	; (80069c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069b2:	5ccb      	ldrb	r3, [r1, r3]
 80069b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40023800 	.word	0x40023800
 80069c0:	0800dedc 	.word	0x0800dedc

080069c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d035      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069ec:	4b62      	ldr	r3, [pc, #392]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f2:	f7fe fc7d 	bl	80052f0 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069f8:	e008      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069fa:	f7fe fc79 	bl	80052f0 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0b0      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a0c:	4b5b      	ldr	r3, [pc, #364]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1f0      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	019a      	lsls	r2, r3, #6
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	071b      	lsls	r3, r3, #28
 8006a24:	4955      	ldr	r1, [pc, #340]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a2c:	4b52      	ldr	r3, [pc, #328]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a32:	f7fe fc5d 	bl	80052f0 <HAL_GetTick>
 8006a36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a38:	e008      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a3a:	f7fe fc59 	bl	80052f0 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e090      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a4c:	4b4b      	ldr	r3, [pc, #300]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0f0      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8083 	beq.w	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	4b44      	ldr	r3, [pc, #272]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a43      	ldr	r2, [pc, #268]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
 8006a76:	4b41      	ldr	r3, [pc, #260]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a82:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3e      	ldr	r2, [pc, #248]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a8e:	f7fe fc2f 	bl	80052f0 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a96:	f7fe fc2b 	bl	80052f0 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e062      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006aa8:	4b35      	ldr	r3, [pc, #212]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ab4:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006abc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d02f      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d028      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ad2:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ada:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006adc:	4b29      	ldr	r3, [pc, #164]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae2:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ae8:	4a24      	ldr	r2, [pc, #144]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006aee:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d114      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006afa:	f7fe fbf9 	bl	80052f0 <HAL_GetTick>
 8006afe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b00:	e00a      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b02:	f7fe fbf5 	bl	80052f0 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e02a      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b18:	4b18      	ldr	r3, [pc, #96]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0ee      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b30:	d10d      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b32:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b46:	490d      	ldr	r1, [pc, #52]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	608b      	str	r3, [r1, #8]
 8006b4c:	e005      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b58:	6093      	str	r3, [r2, #8]
 8006b5a:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b66:	4905      	ldr	r1, [pc, #20]	; (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	42470068 	.word	0x42470068
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40007000 	.word	0x40007000
 8006b84:	42470e40 	.word	0x42470e40

08006b88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e066      	b.n	8006c6c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	7f5b      	ldrb	r3, [r3, #29]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fd ffe2 	bl	8004b78 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	22ca      	movs	r2, #202	; 0xca
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2253      	movs	r2, #83	; 0x53
 8006bc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fac2 	bl	8007154 <RTC_EnterInitMode>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12c      	bne.n	8006c34 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bec:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6899      	ldr	r1, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68d2      	ldr	r2, [r2, #12]
 8006c14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	6919      	ldr	r1, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	041a      	lsls	r2, r3, #16
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fac9 	bl	80071c2 <RTC_ExitInitMode>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d113      	bne.n	8006c62 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699a      	ldr	r2, [r3, #24]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	7f1b      	ldrb	r3, [r3, #28]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_RTC_SetTime+0x1c>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e087      	b.n	8006da0 <HAL_RTC_SetTime+0x12c>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d126      	bne.n	8006cf0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 faa6 	bl	800720c <RTC_ByteToBcd2>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	785b      	ldrb	r3, [r3, #1]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fa9f 	bl	800720c <RTC_ByteToBcd2>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006cd2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	789b      	ldrb	r3, [r3, #2]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fa97 	bl	800720c <RTC_ByteToBcd2>
 8006cde:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ce0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	78db      	ldrb	r3, [r3, #3]
 8006ce8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e018      	b.n	8006d22 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2200      	movs	r2, #0
 8006d02:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d10:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006d16:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ca      	movs	r2, #202	; 0xca
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2253      	movs	r2, #83	; 0x53
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fa0e 	bl	8007154 <RTC_EnterInitMode>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006d3c:	7cfb      	ldrb	r3, [r7, #19]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d120      	bne.n	8006d84 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6899      	ldr	r1, [r3, #8]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fa21 	bl	80071c2 <RTC_ExitInitMode>
 8006d80:	4603      	mov	r3, r0
 8006d82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006d84:	7cfb      	ldrb	r3, [r7, #19]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	771a      	strb	r2, [r3, #28]

  return status;
 8006d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd90      	pop	{r4, r7, pc}

08006da8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006da8:	b590      	push	{r4, r7, lr}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	7f1b      	ldrb	r3, [r3, #28]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RTC_SetDate+0x1c>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e071      	b.n	8006ea8 <HAL_RTC_SetDate+0x100>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10e      	bne.n	8006df4 <HAL_RTC_SetDate+0x4c>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	f023 0310 	bic.w	r3, r3, #16
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	330a      	adds	r3, #10
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11c      	bne.n	8006e34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	78db      	ldrb	r3, [r3, #3]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fa04 	bl	800720c <RTC_ByteToBcd2>
 8006e04:	4603      	mov	r3, r0
 8006e06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f9fd 	bl	800720c <RTC_ByteToBcd2>
 8006e12:	4603      	mov	r3, r0
 8006e14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	789b      	ldrb	r3, [r3, #2]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f9f5 	bl	800720c <RTC_ByteToBcd2>
 8006e22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e00e      	b.n	8006e52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	78db      	ldrb	r3, [r3, #3]
 8006e38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	785b      	ldrb	r3, [r3, #1]
 8006e3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e40:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006e46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	22ca      	movs	r2, #202	; 0xca
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2253      	movs	r2, #83	; 0x53
 8006e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f976 	bl	8007154 <RTC_EnterInitMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006e6c:	7cfb      	ldrb	r3, [r7, #19]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10c      	bne.n	8006e8c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f99d 	bl	80071c2 <RTC_ExitInitMode>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	771a      	strb	r2, [r3, #28]

  return status;
 8006ea6:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}

08006eb0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7f1b      	ldrb	r3, [r3, #28]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d101      	bne.n	8006ed4 <HAL_RTC_SetAlarm+0x24>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e113      	b.n	80070fc <HAL_RTC_SetAlarm+0x24c>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2202      	movs	r2, #2
 8006ede:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d137      	bne.n	8006f56 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f984 	bl	800720c <RTC_ByteToBcd2>
 8006f04:	4603      	mov	r3, r0
 8006f06:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f97d 	bl	800720c <RTC_ByteToBcd2>
 8006f12:	4603      	mov	r3, r0
 8006f14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f16:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	789b      	ldrb	r3, [r3, #2]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 f975 	bl	800720c <RTC_ByteToBcd2>
 8006f22:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006f24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	78db      	ldrb	r3, [r3, #3]
 8006f2c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006f2e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f967 	bl	800720c <RTC_ByteToBcd2>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006f42:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006f4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006f50:	4313      	orrs	r3, r2
 8006f52:	61fb      	str	r3, [r7, #28]
 8006f54:	e023      	b.n	8006f9e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d102      	bne.n	8006f6a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006f76:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006f7c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	78db      	ldrb	r3, [r3, #3]
 8006f82:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006f84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f8c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006f8e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006f94:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	22ca      	movs	r2, #202	; 0xca
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2253      	movs	r2, #83	; 0x53
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc2:	d148      	bne.n	8007056 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689a      	ldr	r2, [r3, #8]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fe2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006ff4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff6:	f7fe f97b 	bl	80052f0 <HAL_GetTick>
 8006ffa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006ffc:	e013      	b.n	8007026 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ffe:	f7fe f977 	bl	80052f0 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800700c:	d90b      	bls.n	8007026 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	22ff      	movs	r2, #255	; 0xff
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2203      	movs	r2, #3
 800701a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e06a      	b.n	80070fc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0301 	and.w	r3, r3, #1
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0e4      	beq.n	8006ffe <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69fa      	ldr	r2, [r7, #28]
 800703a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689a      	ldr	r2, [r3, #8]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	e047      	b.n	80070e6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007064:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007074:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007086:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007088:	f7fe f932 	bl	80052f0 <HAL_GetTick>
 800708c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800708e:	e013      	b.n	80070b8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007090:	f7fe f92e 	bl	80052f0 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709e:	d90b      	bls.n	80070b8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2203      	movs	r2, #3
 80070ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e021      	b.n	80070fc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0e4      	beq.n	8007090 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	22ff      	movs	r2, #255	; 0xff
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2201      	movs	r2, #1
 80070f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3724      	adds	r7, #36	; 0x24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd90      	pop	{r4, r7, pc}

08007104 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800711e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007120:	f7fe f8e6 	bl	80052f0 <HAL_GetTick>
 8007124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007126:	e009      	b.n	800713c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007128:	f7fe f8e2 	bl	80052f0 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007136:	d901      	bls.n	800713c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e007      	b.n	800714c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ee      	beq.n	8007128 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d122      	bne.n	80071b8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007180:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007182:	f7fe f8b5 	bl	80052f0 <HAL_GetTick>
 8007186:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007188:	e00c      	b.n	80071a4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800718a:	f7fe f8b1 	bl	80052f0 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007198:	d904      	bls.n	80071a4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2204      	movs	r2, #4
 800719e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d102      	bne.n	80071b8 <RTC_EnterInitMode+0x64>
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d1e8      	bne.n	800718a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b084      	sub	sp, #16
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f003 0320 	and.w	r3, r3, #32
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff ff89 	bl	8007104 <HAL_RTC_WaitForSynchro>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2204      	movs	r2, #4
 80071fc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800721a:	e005      	b.n	8007228 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	3301      	adds	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	3b0a      	subs	r3, #10
 8007226:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b09      	cmp	r3, #9
 800722c:	d8f6      	bhi.n	800721c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	b2da      	uxtb	r2, r3
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	4313      	orrs	r3, r2
 8007238:	b2db      	uxtb	r3, r3
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e07b      	b.n	8007350 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d108      	bne.n	8007272 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007268:	d009      	beq.n	800727e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	61da      	str	r2, [r3, #28]
 8007270:	e005      	b.n	800727e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fd fc97 	bl	8004bcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	ea42 0103 	orr.w	r1, r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 0104 	and.w	r1, r3, #4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0210 	and.w	r2, r3, #16
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69da      	ldr	r2, [r3, #28]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800733e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_SPI_Transmit+0x22>
 8007376:	2302      	movs	r3, #2
 8007378:	e126      	b.n	80075c8 <HAL_SPI_Transmit+0x270>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007382:	f7fd ffb5 	bl	80052f0 <HAL_GetTick>
 8007386:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	d002      	beq.n	800739e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007398:	2302      	movs	r3, #2
 800739a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800739c:	e10b      	b.n	80075b6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_SPI_Transmit+0x52>
 80073a4:	88fb      	ldrh	r3, [r7, #6]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073ae:	e102      	b.n	80075b6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2203      	movs	r2, #3
 80073b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f6:	d10f      	bne.n	8007418 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007406:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007416:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d007      	beq.n	8007436 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007434:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743e:	d14b      	bne.n	80074d8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <HAL_SPI_Transmit+0xf6>
 8007448:	8afb      	ldrh	r3, [r7, #22]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d13e      	bne.n	80074cc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007452:	881a      	ldrh	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	1c9a      	adds	r2, r3, #2
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007468:	b29b      	uxth	r3, r3
 800746a:	3b01      	subs	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007472:	e02b      	b.n	80074cc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d112      	bne.n	80074a8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	881a      	ldrh	r2, [r3, #0]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	1c9a      	adds	r2, r3, #2
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80074a6:	e011      	b.n	80074cc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a8:	f7fd ff22 	bl	80052f0 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d803      	bhi.n	80074c0 <HAL_SPI_Transmit+0x168>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_Transmit+0x16e>
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074ca:	e074      	b.n	80075b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ce      	bne.n	8007474 <HAL_SPI_Transmit+0x11c>
 80074d6:	e04c      	b.n	8007572 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SPI_Transmit+0x18e>
 80074e0:	8afb      	ldrh	r3, [r7, #22]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d140      	bne.n	8007568 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	7812      	ldrb	r2, [r2, #0]
 80074f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800750c:	e02c      	b.n	8007568 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0302 	and.w	r3, r3, #2
 8007518:	2b02      	cmp	r3, #2
 800751a:	d113      	bne.n	8007544 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007538:	b29b      	uxth	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	86da      	strh	r2, [r3, #54]	; 0x36
 8007542:	e011      	b.n	8007568 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007544:	f7fd fed4 	bl	80052f0 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d803      	bhi.n	800755c <HAL_SPI_Transmit+0x204>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755a:	d102      	bne.n	8007562 <HAL_SPI_Transmit+0x20a>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007566:	e026      	b.n	80075b6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1cd      	bne.n	800750e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 fbcc 	bl	8007d14 <SPI_EndRxTxTransaction>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e000      	b.n	80075b6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80075b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ec:	d112      	bne.n	8007614 <HAL_SPI_Receive+0x44>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10e      	bne.n	8007614 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2204      	movs	r2, #4
 80075fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075fe:	88fa      	ldrh	r2, [r7, #6]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f8f1 	bl	80077f2 <HAL_SPI_TransmitReceive>
 8007610:	4603      	mov	r3, r0
 8007612:	e0ea      	b.n	80077ea <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_SPI_Receive+0x52>
 800761e:	2302      	movs	r3, #2
 8007620:	e0e3      	b.n	80077ea <HAL_SPI_Receive+0x21a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762a:	f7fd fe61 	bl	80052f0 <HAL_GetTick>
 800762e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d002      	beq.n	8007642 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800763c:	2302      	movs	r3, #2
 800763e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007640:	e0ca      	b.n	80077d8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <HAL_SPI_Receive+0x7e>
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007652:	e0c1      	b.n	80077d8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2204      	movs	r2, #4
 8007658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	88fa      	ldrh	r2, [r7, #6]
 800766c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	88fa      	ldrh	r2, [r7, #6]
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d10f      	bne.n	80076bc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	2b40      	cmp	r3, #64	; 0x40
 80076c8:	d007      	beq.n	80076da <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d162      	bne.n	80077a8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076e2:	e02e      	b.n	8007742 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d115      	bne.n	800771e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f103 020c 	add.w	r2, r3, #12
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800771c:	e011      	b.n	8007742 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800771e:	f7fd fde7 	bl	80052f0 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d803      	bhi.n	8007736 <HAL_SPI_Receive+0x166>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007734:	d102      	bne.n	800773c <HAL_SPI_Receive+0x16c>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007740:	e04a      	b.n	80077d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1cb      	bne.n	80076e4 <HAL_SPI_Receive+0x114>
 800774c:	e031      	b.n	80077b2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d113      	bne.n	8007784 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	b292      	uxth	r2, r2
 8007768:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	1c9a      	adds	r2, r3, #2
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007782:	e011      	b.n	80077a8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007784:	f7fd fdb4 	bl	80052f0 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d803      	bhi.n	800779c <HAL_SPI_Receive+0x1cc>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d102      	bne.n	80077a2 <HAL_SPI_Receive+0x1d2>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077a6:	e017      	b.n	80077d8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1cd      	bne.n	800774e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa46 	bl	8007c48 <SPI_EndRxTransaction>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d002      	beq.n	80077c8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75fb      	strb	r3, [r7, #23]
 80077d4:	e000      	b.n	80077d8 <HAL_SPI_Receive+0x208>
  }

error :
 80077d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b08c      	sub	sp, #48	; 0x30
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007800:	2301      	movs	r3, #1
 8007802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x26>
 8007814:	2302      	movs	r3, #2
 8007816:	e18a      	b.n	8007b2e <HAL_SPI_TransmitReceive+0x33c>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007820:	f7fd fd66 	bl	80052f0 <HAL_GetTick>
 8007824:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007836:	887b      	ldrh	r3, [r7, #2]
 8007838:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800783a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800783e:	2b01      	cmp	r3, #1
 8007840:	d00f      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x70>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007848:	d107      	bne.n	800785a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <HAL_SPI_TransmitReceive+0x68>
 8007852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007856:	2b04      	cmp	r3, #4
 8007858:	d003      	beq.n	8007862 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800785a:	2302      	movs	r3, #2
 800785c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007860:	e15b      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x82>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_SPI_TransmitReceive+0x82>
 800786e:	887b      	ldrh	r3, [r7, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800787a:	e14e      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b04      	cmp	r3, #4
 8007886:	d003      	beq.n	8007890 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2205      	movs	r2, #5
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	887a      	ldrh	r2, [r7, #2]
 80078a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	887a      	ldrh	r2, [r7, #2]
 80078a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	887a      	ldrh	r2, [r7, #2]
 80078b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	887a      	ldrh	r2, [r7, #2]
 80078b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d007      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ec:	d178      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x10a>
 80078f6:	8b7b      	ldrh	r3, [r7, #26]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d166      	bne.n	80079ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007920:	e053      	b.n	80079ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f003 0302 	and.w	r3, r3, #2
 800792c:	2b02      	cmp	r3, #2
 800792e:	d11b      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x176>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007934:	b29b      	uxth	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_SPI_TransmitReceive+0x176>
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d113      	bne.n	8007968 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	881a      	ldrh	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	1c9a      	adds	r2, r3, #2
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d119      	bne.n	80079aa <HAL_SPI_TransmitReceive+0x1b8>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d014      	beq.n	80079aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	b292      	uxth	r2, r2
 800798c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007992:	1c9a      	adds	r2, r3, #2
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a6:	2301      	movs	r3, #1
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079aa:	f7fd fca1 	bl	80052f0 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d807      	bhi.n	80079ca <HAL_SPI_TransmitReceive+0x1d8>
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d003      	beq.n	80079ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079c8:	e0a7      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1a6      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x130>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1a1      	bne.n	8007922 <HAL_SPI_TransmitReceive+0x130>
 80079de:	e07c      	b.n	8007ada <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_TransmitReceive+0x1fc>
 80079e8:	8b7b      	ldrh	r3, [r7, #26]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d16b      	bne.n	8007ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a14:	e057      	b.n	8007ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d11c      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x26c>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <HAL_SPI_TransmitReceive+0x26c>
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d114      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	7812      	ldrb	r2, [r2, #0]
 8007a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d119      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x2ae>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d014      	beq.n	8007aa0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aa0:	f7fd fc26 	bl	80052f0 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d803      	bhi.n	8007ab8 <HAL_SPI_TransmitReceive+0x2c6>
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d102      	bne.n	8007abe <HAL_SPI_TransmitReceive+0x2cc>
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d103      	bne.n	8007ac6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ac4:	e029      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1a2      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x224>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d19d      	bne.n	8007a16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f918 	bl	8007d14 <SPI_EndRxTxTransaction>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d006      	beq.n	8007af8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2220      	movs	r2, #32
 8007af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007af6:	e010      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10b      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b00:	2300      	movs	r3, #0
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	617b      	str	r3, [r7, #20]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	e000      	b.n	8007b1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3730      	adds	r7, #48	; 0x30
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b48:	f7fd fbd2 	bl	80052f0 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b50:	1a9b      	subs	r3, r3, r2
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4413      	add	r3, r2
 8007b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b58:	f7fd fbca 	bl	80052f0 <HAL_GetTick>
 8007b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b5e:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	015b      	lsls	r3, r3, #5
 8007b64:	0d1b      	lsrs	r3, r3, #20
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	fb02 f303 	mul.w	r3, r2, r3
 8007b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b6e:	e054      	b.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b76:	d050      	beq.n	8007c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b78:	f7fd fbba 	bl	80052f0 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d902      	bls.n	8007b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d13d      	bne.n	8007c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba6:	d111      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	d004      	beq.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bba:	d107      	bne.n	8007bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd4:	d10f      	bne.n	8007bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e017      	b.n	8007c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d19b      	bne.n	8007b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3720      	adds	r7, #32
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000018 	.word	0x20000018

08007c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c5c:	d111      	bne.n	8007c82 <SPI_EndRxTransaction+0x3a>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c66:	d004      	beq.n	8007c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d107      	bne.n	8007c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c8a:	d12a      	bne.n	8007ce2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c94:	d012      	beq.n	8007cbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2180      	movs	r1, #128	; 0x80
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff ff49 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02d      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb0:	f043 0220 	orr.w	r2, r3, #32
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e026      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff ff36 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01a      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	f043 0220 	orr.w	r2, r3, #32
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e013      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2101      	movs	r1, #1
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff ff23 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	f043 0220 	orr.w	r2, r3, #32
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e000      	b.n	8007d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
	...

08007d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af02      	add	r7, sp, #8
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d20:	4b1b      	ldr	r3, [pc, #108]	; (8007d90 <SPI_EndRxTxTransaction+0x7c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1b      	ldr	r2, [pc, #108]	; (8007d94 <SPI_EndRxTxTransaction+0x80>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	0d5b      	lsrs	r3, r3, #21
 8007d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007d30:	fb02 f303 	mul.w	r3, r2, r3
 8007d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d3e:	d112      	bne.n	8007d66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	2180      	movs	r1, #128	; 0x80
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff fef4 	bl	8007b38 <SPI_WaitFlagStateUntilTimeout>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d016      	beq.n	8007d84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5a:	f043 0220 	orr.w	r2, r3, #32
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e00f      	b.n	8007d86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7c:	2b80      	cmp	r3, #128	; 0x80
 8007d7e:	d0f2      	beq.n	8007d66 <SPI_EndRxTxTransaction+0x52>
 8007d80:	e000      	b.n	8007d84 <SPI_EndRxTxTransaction+0x70>
        break;
 8007d82:	bf00      	nop
  }

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000018 	.word	0x20000018
 8007d94:	165e9f81 	.word	0x165e9f81

08007d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e03f      	b.n	8007e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d106      	bne.n	8007dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7fc ff82 	bl	8004cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2224      	movs	r2, #36	; 0x24
 8007dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 ff9b 	bl	8008d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691a      	ldr	r2, [r3, #16]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b08a      	sub	sp, #40	; 0x28
 8007e36:	af02      	add	r7, sp, #8
 8007e38:	60f8      	str	r0, [r7, #12]
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	603b      	str	r3, [r7, #0]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	d17c      	bne.n	8007f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <HAL_UART_Transmit+0x2c>
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e075      	b.n	8007f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Transmit+0x3e>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e06e      	b.n	8007f4e <HAL_UART_Transmit+0x11c>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2221      	movs	r2, #33	; 0x21
 8007e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e86:	f7fd fa33 	bl	80052f0 <HAL_GetTick>
 8007e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	88fa      	ldrh	r2, [r7, #6]
 8007e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea0:	d108      	bne.n	8007eb4 <HAL_UART_Transmit+0x82>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d104      	bne.n	8007eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	e003      	b.n	8007ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ec4:	e02a      	b.n	8007f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2180      	movs	r1, #128	; 0x80
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fc53 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e036      	b.n	8007f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	461a      	mov	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	3302      	adds	r3, #2
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	e007      	b.n	8007f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	781a      	ldrb	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1cf      	bne.n	8007ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2140      	movs	r1, #64	; 0x40
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f000 fc23 	bl	800877c <UART_WaitOnFlagUntilTimeout>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e006      	b.n	8007f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e000      	b.n	8007f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f4c:	2302      	movs	r3, #2
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3720      	adds	r7, #32
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b08c      	sub	sp, #48	; 0x30
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	4613      	mov	r3, r2
 8007f62:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d152      	bne.n	8008016 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e04b      	b.n	8008018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e044      	b.n	8008018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 fc58 	bl	8008858 <UART_Start_Receive_DMA>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12c      	bne.n	8008010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d125      	bne.n	800800a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	613b      	str	r3, [r7, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	330c      	adds	r3, #12
 8007fda:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f043 0310 	orr.w	r3, r3, #16
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8007ff6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6a39      	ldr	r1, [r7, #32]
 8007ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	61fb      	str	r3, [r7, #28]
   return(result);
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e5      	bne.n	8007fd4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008008:	e002      	b.n	8008010 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008014:	e000      	b.n	8008018 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008016:	2302      	movs	r3, #2
  }
}
 8008018:	4618      	mov	r0, r3
 800801a:	3730      	adds	r7, #48	; 0x30
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b0ba      	sub	sp, #232	; 0xe8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800804c:	2300      	movs	r3, #0
 800804e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800805e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10f      	bne.n	8008086 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <HAL_UART_IRQHandler+0x66>
 8008072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fd8f 	bl	8008ba2 <UART_Receive_IT>
      return;
 8008084:	e256      	b.n	8008534 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80de 	beq.w	800824c <HAL_UART_IRQHandler+0x22c>
 8008090:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d106      	bne.n	80080aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800809c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 80d1 	beq.w	800824c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <HAL_UART_IRQHandler+0xae>
 80080b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f043 0201 	orr.w	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d2:	f003 0304 	and.w	r3, r3, #4
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00b      	beq.n	80080f2 <HAL_UART_IRQHandler+0xd2>
 80080da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f043 0202 	orr.w	r2, r3, #2
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <HAL_UART_IRQHandler+0xf6>
 80080fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f043 0204 	orr.w	r2, r3, #4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811a:	f003 0308 	and.w	r3, r3, #8
 800811e:	2b00      	cmp	r3, #0
 8008120:	d011      	beq.n	8008146 <HAL_UART_IRQHandler+0x126>
 8008122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008126:	f003 0320 	and.w	r3, r3, #32
 800812a:	2b00      	cmp	r3, #0
 800812c:	d105      	bne.n	800813a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800812e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	f043 0208 	orr.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 81ed 	beq.w	800852a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008154:	f003 0320 	and.w	r3, r3, #32
 8008158:	2b00      	cmp	r3, #0
 800815a:	d008      	beq.n	800816e <HAL_UART_IRQHandler+0x14e>
 800815c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d002      	beq.n	800816e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fd1a 	bl	8008ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <HAL_UART_IRQHandler+0x17a>
 8008192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d04f      	beq.n	800823a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc22 	bl	80089e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081aa:	2b40      	cmp	r3, #64	; 0x40
 80081ac:	d141      	bne.n	8008232 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	3314      	adds	r3, #20
 80081b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80081c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3314      	adds	r3, #20
 80081d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80081da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80081de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80081e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80081ea:	e841 2300 	strex	r3, r2, [r1]
 80081ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80081f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1d9      	bne.n	80081ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d013      	beq.n	800822a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	4a7d      	ldr	r2, [pc, #500]	; (80083fc <HAL_UART_IRQHandler+0x3dc>)
 8008208:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fb26 	bl	8005860 <HAL_DMA_Abort_IT>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d016      	beq.n	8008248 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008228:	e00e      	b.n	8008248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f9a4 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	e00a      	b.n	8008248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9a0 	bl	8008578 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008238:	e006      	b.n	8008248 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f99c 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008246:	e170      	b.n	800852a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008248:	bf00      	nop
    return;
 800824a:	e16e      	b.n	800852a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008250:	2b01      	cmp	r3, #1
 8008252:	f040 814a 	bne.w	80084ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8143 	beq.w	80084ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 813c 	beq.w	80084ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60bb      	str	r3, [r7, #8]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008292:	2b40      	cmp	r3, #64	; 0x40
 8008294:	f040 80b4 	bne.w	8008400 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 8140 	beq.w	800852e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082b6:	429a      	cmp	r2, r3
 80082b8:	f080 8139 	bcs.w	800852e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80082c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ce:	f000 8088 	beq.w	80083e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	330c      	adds	r3, #12
 80082d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80082fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800830a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1d9      	bne.n	80082d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3314      	adds	r3, #20
 8008324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800832e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008330:	f023 0301 	bic.w	r3, r3, #1
 8008334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3314      	adds	r3, #20
 800833e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008342:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008346:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008348:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800834a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800834e:	e841 2300 	strex	r3, r2, [r1]
 8008352:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1e1      	bne.n	800831e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3314      	adds	r3, #20
 8008360:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800836a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800836c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3314      	adds	r3, #20
 800837a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800837e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008380:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008384:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800838c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e3      	bne.n	800835a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	330c      	adds	r3, #12
 80083a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b2:	f023 0310 	bic.w	r3, r3, #16
 80083b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	330c      	adds	r3, #12
 80083c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80083c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80083c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e3      	bne.n	80083a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fd f9cf 	bl	8005780 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7fb fd6a 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083f8:	e099      	b.n	800852e <HAL_UART_IRQHandler+0x50e>
 80083fa:	bf00      	nop
 80083fc:	08008aab 	.word	0x08008aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008408:	b29b      	uxth	r3, r3
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 808b 	beq.w	8008532 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800841c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 8086 	beq.w	8008532 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800843c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800844a:	647a      	str	r2, [r7, #68]	; 0x44
 800844c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e3      	bne.n	8008426 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3314      	adds	r3, #20
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	623b      	str	r3, [r7, #32]
   return(result);
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3314      	adds	r3, #20
 800847e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008482:	633a      	str	r2, [r7, #48]	; 0x30
 8008484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e3      	bne.n	800845e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0310 	bic.w	r3, r3, #16
 80084ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	330c      	adds	r3, #12
 80084c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80084c8:	61fa      	str	r2, [r7, #28]
 80084ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	69b9      	ldr	r1, [r7, #24]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	e841 2300 	strex	r3, r2, [r1]
 80084d4:	617b      	str	r3, [r7, #20]
   return(result);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1e3      	bne.n	80084a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7fb fcf2 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084e8:	e023      	b.n	8008532 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <HAL_UART_IRQHandler+0x4ea>
 80084f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fae5 	bl	8008ad2 <UART_Transmit_IT>
    return;
 8008508:	e014      	b.n	8008534 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800850a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00e      	beq.n	8008534 <HAL_UART_IRQHandler+0x514>
 8008516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d008      	beq.n	8008534 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fb25 	bl	8008b72 <UART_EndTransmit_IT>
    return;
 8008528:	e004      	b.n	8008534 <HAL_UART_IRQHandler+0x514>
    return;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <HAL_UART_IRQHandler+0x514>
      return;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <HAL_UART_IRQHandler+0x514>
      return;
 8008532:	bf00      	nop
  }
}
 8008534:	37e8      	adds	r7, #232	; 0xe8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop

0800853c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b09c      	sub	sp, #112	; 0x70
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d172      	bne.n	800868e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80085a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085aa:	2200      	movs	r2, #0
 80085ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	330c      	adds	r3, #12
 80085b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80085c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80085d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e5      	bne.n	80085ae <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	667b      	str	r3, [r7, #100]	; 0x64
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3314      	adds	r3, #20
 8008600:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008602:	647a      	str	r2, [r7, #68]	; 0x44
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3314      	adds	r3, #20
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	623b      	str	r3, [r7, #32]
   return(result);
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3314      	adds	r3, #20
 8008634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008636:	633a      	str	r2, [r7, #48]	; 0x30
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800863c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e5      	bne.n	8008616 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	2220      	movs	r2, #32
 800864e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	2b01      	cmp	r3, #1
 8008658:	d119      	bne.n	800868e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800865a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	e853 3f00 	ldrex	r3, [r3]
 8008668:	60fb      	str	r3, [r7, #12]
   return(result);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f023 0310 	bic.w	r3, r3, #16
 8008670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330c      	adds	r3, #12
 8008678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800867a:	61fa      	str	r2, [r7, #28]
 800867c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	69b9      	ldr	r1, [r7, #24]
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	e841 2300 	strex	r3, r2, [r1]
 8008686:	617b      	str	r3, [r7, #20]
   return(result);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1e5      	bne.n	800865a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	2b01      	cmp	r3, #1
 8008694:	d106      	bne.n	80086a4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800869a:	4619      	mov	r1, r3
 800869c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800869e:	f7fb fc15 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a2:	e002      	b.n	80086aa <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80086a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086a6:	f7ff ff53 	bl	8008550 <HAL_UART_RxCpltCallback>
}
 80086aa:	bf00      	nop
 80086ac:	3770      	adds	r7, #112	; 0x70
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d108      	bne.n	80086da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4619      	mov	r1, r3
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7fb fbfa 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086d8:	e002      	b.n	80086e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff ff42 	bl	8008564 <HAL_UART_RxHalfCpltCallback>
}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	bf0c      	ite	eq
 8008708:	2301      	moveq	r3, #1
 800870a:	2300      	movne	r3, #0
 800870c:	b2db      	uxtb	r3, r3
 800870e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b21      	cmp	r3, #33	; 0x21
 800871a:	d108      	bne.n	800872e <UART_DMAError+0x46>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d005      	beq.n	800872e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2200      	movs	r2, #0
 8008726:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008728:	68b8      	ldr	r0, [r7, #8]
 800872a:	f000 f933 	bl	8008994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	bf0c      	ite	eq
 800873c:	2301      	moveq	r3, #1
 800873e:	2300      	movne	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b22      	cmp	r3, #34	; 0x22
 800874e:	d108      	bne.n	8008762 <UART_DMAError+0x7a>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800875c:	68b8      	ldr	r0, [r7, #8]
 800875e:	f000 f941 	bl	80089e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	f043 0210 	orr.w	r2, r3, #16
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800876e:	68b8      	ldr	r0, [r7, #8]
 8008770:	f7ff ff02 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b090      	sub	sp, #64	; 0x40
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	603b      	str	r3, [r7, #0]
 8008788:	4613      	mov	r3, r2
 800878a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878c:	e050      	b.n	8008830 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800878e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d04c      	beq.n	8008830 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008798:	2b00      	cmp	r3, #0
 800879a:	d007      	beq.n	80087ac <UART_WaitOnFlagUntilTimeout+0x30>
 800879c:	f7fc fda8 	bl	80052f0 <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d241      	bcs.n	8008830 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	330c      	adds	r3, #12
 80087b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80087c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80087cc:	637a      	str	r2, [r7, #52]	; 0x34
 80087ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3314      	adds	r3, #20
 80087e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	613b      	str	r3, [r7, #16]
   return(result);
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3314      	adds	r3, #20
 80087fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008800:	623a      	str	r2, [r7, #32]
 8008802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	69f9      	ldr	r1, [r7, #28]
 8008806:	6a3a      	ldr	r2, [r7, #32]
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	61bb      	str	r3, [r7, #24]
   return(result);
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2220      	movs	r2, #32
 8008820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e00f      	b.n	8008850 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	4013      	ands	r3, r2
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	429a      	cmp	r2, r3
 800883e:	bf0c      	ite	eq
 8008840:	2301      	moveq	r3, #1
 8008842:	2300      	movne	r3, #0
 8008844:	b2db      	uxtb	r3, r3
 8008846:	461a      	mov	r2, r3
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	429a      	cmp	r2, r3
 800884c:	d09f      	beq.n	800878e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3740      	adds	r7, #64	; 0x40
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b098      	sub	sp, #96	; 0x60
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	4613      	mov	r3, r2
 8008864:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	88fa      	ldrh	r2, [r7, #6]
 8008870:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2222      	movs	r2, #34	; 0x22
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	4a40      	ldr	r2, [pc, #256]	; (8008988 <UART_Start_Receive_DMA+0x130>)
 8008886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	4a3f      	ldr	r2, [pc, #252]	; (800898c <UART_Start_Receive_DMA+0x134>)
 800888e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	4a3e      	ldr	r2, [pc, #248]	; (8008990 <UART_Start_Receive_DMA+0x138>)
 8008896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889c:	2200      	movs	r2, #0
 800889e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80088a0:	f107 0308 	add.w	r3, r7, #8
 80088a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	f7fc ff0a 	bl	80056d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80088bc:	2300      	movs	r3, #0
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d019      	beq.n	8008916 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	330c      	adds	r3, #12
 80088e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	330c      	adds	r3, #12
 8008900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008902:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008904:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e5      	bne.n	80088e2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	657b      	str	r3, [r7, #84]	; 0x54
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3314      	adds	r3, #20
 8008934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008936:	63ba      	str	r2, [r7, #56]	; 0x38
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800893c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e5      	bne.n	8008916 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3314      	adds	r3, #20
 8008950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	617b      	str	r3, [r7, #20]
   return(result);
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008960:	653b      	str	r3, [r7, #80]	; 0x50
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3314      	adds	r3, #20
 8008968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800896a:	627a      	str	r2, [r7, #36]	; 0x24
 800896c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6a39      	ldr	r1, [r7, #32]
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	61fb      	str	r3, [r7, #28]
   return(result);
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3760      	adds	r7, #96	; 0x60
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	0800858d 	.word	0x0800858d
 800898c:	080086b3 	.word	0x080086b3
 8008990:	080086e9 	.word	0x080086e9

08008994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b089      	sub	sp, #36	; 0x24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80089b2:	61fb      	str	r3, [r7, #28]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	330c      	adds	r3, #12
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	61ba      	str	r2, [r7, #24]
 80089be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6979      	ldr	r1, [r7, #20]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e5      	bne.n	800899c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80089d8:	bf00      	nop
 80089da:	3724      	adds	r7, #36	; 0x24
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b095      	sub	sp, #84	; 0x54
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	330c      	adds	r3, #12
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a0c:	643a      	str	r2, [r7, #64]	; 0x40
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e5      	bne.n	80089ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3314      	adds	r3, #20
 8008a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	f023 0301 	bic.w	r3, r3, #1
 8008a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e5      	bne.n	8008a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d119      	bne.n	8008a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	330c      	adds	r3, #12
 8008a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f023 0310 	bic.w	r3, r3, #16
 8008a72:	647b      	str	r3, [r7, #68]	; 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a7c:	61ba      	str	r2, [r7, #24]
 8008a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6979      	ldr	r1, [r7, #20]
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	613b      	str	r3, [r7, #16]
   return(result);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a9e:	bf00      	nop
 8008aa0:	3754      	adds	r7, #84	; 0x54
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7ff fd57 	bl	8008578 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aca:	bf00      	nop
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b085      	sub	sp, #20
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b21      	cmp	r3, #33	; 0x21
 8008ae4:	d13e      	bne.n	8008b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aee:	d114      	bne.n	8008b1a <UART_Transmit_IT+0x48>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d110      	bne.n	8008b1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	1c9a      	adds	r2, r3, #2
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	621a      	str	r2, [r3, #32]
 8008b18:	e008      	b.n	8008b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	1c59      	adds	r1, r3, #1
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6211      	str	r1, [r2, #32]
 8008b24:	781a      	ldrb	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10f      	bne.n	8008b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68da      	ldr	r2, [r3, #12]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	e000      	b.n	8008b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b64:	2302      	movs	r3, #2
  }
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fcd2 	bl	800853c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b08c      	sub	sp, #48	; 0x30
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b22      	cmp	r3, #34	; 0x22
 8008bb4:	f040 80ab 	bne.w	8008d0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc0:	d117      	bne.n	8008bf2 <UART_Receive_IT+0x50>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d113      	bne.n	8008bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	1c9a      	adds	r2, r3, #2
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	629a      	str	r2, [r3, #40]	; 0x28
 8008bf0:	e026      	b.n	8008c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c04:	d007      	beq.n	8008c16 <UART_Receive_IT+0x74>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10a      	bne.n	8008c24 <UART_Receive_IT+0x82>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e008      	b.n	8008c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d15a      	bne.n	8008d0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f022 0220 	bic.w	r2, r2, #32
 8008c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695a      	ldr	r2, [r3, #20]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0201 	bic.w	r2, r2, #1
 8008c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d135      	bne.n	8008d00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	e853 3f00 	ldrex	r3, [r3]
 8008ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f023 0310 	bic.w	r3, r3, #16
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	623a      	str	r2, [r7, #32]
 8008cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	69f9      	ldr	r1, [r7, #28]
 8008cc0:	6a3a      	ldr	r2, [r7, #32]
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e5      	bne.n	8008c9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d10a      	bne.n	8008cf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7fb f8e7 	bl	8003ecc <HAL_UARTEx_RxEventCallback>
 8008cfe:	e002      	b.n	8008d06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fc25 	bl	8008550 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e002      	b.n	8008d10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	e000      	b.n	8008d10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
  }
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3730      	adds	r7, #48	; 0x30
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d1c:	b0c0      	sub	sp, #256	; 0x100
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d34:	68d9      	ldr	r1, [r3, #12]
 8008d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	ea40 0301 	orr.w	r3, r0, r1
 8008d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	431a      	orrs	r2, r3
 8008d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5c:	69db      	ldr	r3, [r3, #28]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d70:	f021 010c 	bic.w	r1, r1, #12
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d92:	6999      	ldr	r1, [r3, #24]
 8008d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	ea40 0301 	orr.w	r3, r0, r1
 8008d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	4b8f      	ldr	r3, [pc, #572]	; (8008fe4 <UART_SetConfig+0x2cc>)
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d005      	beq.n	8008db8 <UART_SetConfig+0xa0>
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b8d      	ldr	r3, [pc, #564]	; (8008fe8 <UART_SetConfig+0x2d0>)
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d104      	bne.n	8008dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008db8:	f7fd fdf0 	bl	800699c <HAL_RCC_GetPCLK2Freq>
 8008dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dc0:	e003      	b.n	8008dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dc2:	f7fd fdd7 	bl	8006974 <HAL_RCC_GetPCLK1Freq>
 8008dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd4:	f040 810c 	bne.w	8008ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008de2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008dea:	4622      	mov	r2, r4
 8008dec:	462b      	mov	r3, r5
 8008dee:	1891      	adds	r1, r2, r2
 8008df0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008df2:	415b      	adcs	r3, r3
 8008df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	eb12 0801 	adds.w	r8, r2, r1
 8008e00:	4629      	mov	r1, r5
 8008e02:	eb43 0901 	adc.w	r9, r3, r1
 8008e06:	f04f 0200 	mov.w	r2, #0
 8008e0a:	f04f 0300 	mov.w	r3, #0
 8008e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e1a:	4690      	mov	r8, r2
 8008e1c:	4699      	mov	r9, r3
 8008e1e:	4623      	mov	r3, r4
 8008e20:	eb18 0303 	adds.w	r3, r8, r3
 8008e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e28:	462b      	mov	r3, r5
 8008e2a:	eb49 0303 	adc.w	r3, r9, r3
 8008e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e46:	460b      	mov	r3, r1
 8008e48:	18db      	adds	r3, r3, r3
 8008e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	eb42 0303 	adc.w	r3, r2, r3
 8008e52:	657b      	str	r3, [r7, #84]	; 0x54
 8008e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e5c:	f7f7 fef4 	bl	8000c48 <__aeabi_uldivmod>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4b61      	ldr	r3, [pc, #388]	; (8008fec <UART_SetConfig+0x2d4>)
 8008e66:	fba3 2302 	umull	r2, r3, r3, r2
 8008e6a:	095b      	lsrs	r3, r3, #5
 8008e6c:	011c      	lsls	r4, r3, #4
 8008e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e80:	4642      	mov	r2, r8
 8008e82:	464b      	mov	r3, r9
 8008e84:	1891      	adds	r1, r2, r2
 8008e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e88:	415b      	adcs	r3, r3
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008e90:	4641      	mov	r1, r8
 8008e92:	eb12 0a01 	adds.w	sl, r2, r1
 8008e96:	4649      	mov	r1, r9
 8008e98:	eb43 0b01 	adc.w	fp, r3, r1
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	f04f 0300 	mov.w	r3, #0
 8008ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eb0:	4692      	mov	sl, r2
 8008eb2:	469b      	mov	fp, r3
 8008eb4:	4643      	mov	r3, r8
 8008eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8008eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ebe:	464b      	mov	r3, r9
 8008ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8008ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008edc:	460b      	mov	r3, r1
 8008ede:	18db      	adds	r3, r3, r3
 8008ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	eb42 0303 	adc.w	r3, r2, r3
 8008ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8008eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008ef2:	f7f7 fea9 	bl	8000c48 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4611      	mov	r1, r2
 8008efc:	4b3b      	ldr	r3, [pc, #236]	; (8008fec <UART_SetConfig+0x2d4>)
 8008efe:	fba3 2301 	umull	r2, r3, r3, r1
 8008f02:	095b      	lsrs	r3, r3, #5
 8008f04:	2264      	movs	r2, #100	; 0x64
 8008f06:	fb02 f303 	mul.w	r3, r2, r3
 8008f0a:	1acb      	subs	r3, r1, r3
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f12:	4b36      	ldr	r3, [pc, #216]	; (8008fec <UART_SetConfig+0x2d4>)
 8008f14:	fba3 2302 	umull	r2, r3, r3, r2
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f20:	441c      	add	r4, r3
 8008f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	1891      	adds	r1, r2, r2
 8008f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f3c:	415b      	adcs	r3, r3
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f44:	4641      	mov	r1, r8
 8008f46:	1851      	adds	r1, r2, r1
 8008f48:	6339      	str	r1, [r7, #48]	; 0x30
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	414b      	adcs	r3, r1
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	00cb      	lsls	r3, r1, #3
 8008f60:	4651      	mov	r1, sl
 8008f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f66:	4651      	mov	r1, sl
 8008f68:	00ca      	lsls	r2, r1, #3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4642      	mov	r2, r8
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f78:	464b      	mov	r3, r9
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	eb42 0303 	adc.w	r3, r2, r3
 8008f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f98:	460b      	mov	r3, r1
 8008f9a:	18db      	adds	r3, r3, r3
 8008f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	eb42 0303 	adc.w	r3, r2, r3
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008fae:	f7f7 fe4b 	bl	8000c48 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <UART_SetConfig+0x2d4>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	; 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	00db      	lsls	r3, r3, #3
 8008fc8:	3332      	adds	r3, #50	; 0x32
 8008fca:	4a08      	ldr	r2, [pc, #32]	; (8008fec <UART_SetConfig+0x2d4>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f003 0207 	and.w	r2, r3, #7
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4422      	add	r2, r4
 8008fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fe0:	e106      	b.n	80091f0 <UART_SetConfig+0x4d8>
 8008fe2:	bf00      	nop
 8008fe4:	40011000 	.word	0x40011000
 8008fe8:	40011400 	.word	0x40011400
 8008fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009002:	4642      	mov	r2, r8
 8009004:	464b      	mov	r3, r9
 8009006:	1891      	adds	r1, r2, r2
 8009008:	6239      	str	r1, [r7, #32]
 800900a:	415b      	adcs	r3, r3
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
 800900e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009012:	4641      	mov	r1, r8
 8009014:	1854      	adds	r4, r2, r1
 8009016:	4649      	mov	r1, r9
 8009018:	eb43 0501 	adc.w	r5, r3, r1
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	00eb      	lsls	r3, r5, #3
 8009026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800902a:	00e2      	lsls	r2, r4, #3
 800902c:	4614      	mov	r4, r2
 800902e:	461d      	mov	r5, r3
 8009030:	4643      	mov	r3, r8
 8009032:	18e3      	adds	r3, r4, r3
 8009034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009038:	464b      	mov	r3, r9
 800903a:	eb45 0303 	adc.w	r3, r5, r3
 800903e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800904e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800905e:	4629      	mov	r1, r5
 8009060:	008b      	lsls	r3, r1, #2
 8009062:	4621      	mov	r1, r4
 8009064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009068:	4621      	mov	r1, r4
 800906a:	008a      	lsls	r2, r1, #2
 800906c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009070:	f7f7 fdea 	bl	8000c48 <__aeabi_uldivmod>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4b60      	ldr	r3, [pc, #384]	; (80091fc <UART_SetConfig+0x4e4>)
 800907a:	fba3 2302 	umull	r2, r3, r3, r2
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	011c      	lsls	r4, r3, #4
 8009082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009086:	2200      	movs	r2, #0
 8009088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800908c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	1891      	adds	r1, r2, r2
 800909a:	61b9      	str	r1, [r7, #24]
 800909c:	415b      	adcs	r3, r3
 800909e:	61fb      	str	r3, [r7, #28]
 80090a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a4:	4641      	mov	r1, r8
 80090a6:	1851      	adds	r1, r2, r1
 80090a8:	6139      	str	r1, [r7, #16]
 80090aa:	4649      	mov	r1, r9
 80090ac:	414b      	adcs	r3, r1
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090bc:	4659      	mov	r1, fp
 80090be:	00cb      	lsls	r3, r1, #3
 80090c0:	4651      	mov	r1, sl
 80090c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090c6:	4651      	mov	r1, sl
 80090c8:	00ca      	lsls	r2, r1, #3
 80090ca:	4610      	mov	r0, r2
 80090cc:	4619      	mov	r1, r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	4642      	mov	r2, r8
 80090d2:	189b      	adds	r3, r3, r2
 80090d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090d8:	464b      	mov	r3, r9
 80090da:	460a      	mov	r2, r1
 80090dc:	eb42 0303 	adc.w	r3, r2, r3
 80090e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80090ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80090fc:	4649      	mov	r1, r9
 80090fe:	008b      	lsls	r3, r1, #2
 8009100:	4641      	mov	r1, r8
 8009102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009106:	4641      	mov	r1, r8
 8009108:	008a      	lsls	r2, r1, #2
 800910a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800910e:	f7f7 fd9b 	bl	8000c48 <__aeabi_uldivmod>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4611      	mov	r1, r2
 8009118:	4b38      	ldr	r3, [pc, #224]	; (80091fc <UART_SetConfig+0x4e4>)
 800911a:	fba3 2301 	umull	r2, r3, r3, r1
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	2264      	movs	r2, #100	; 0x64
 8009122:	fb02 f303 	mul.w	r3, r2, r3
 8009126:	1acb      	subs	r3, r1, r3
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	3332      	adds	r3, #50	; 0x32
 800912c:	4a33      	ldr	r2, [pc, #204]	; (80091fc <UART_SetConfig+0x4e4>)
 800912e:	fba2 2303 	umull	r2, r3, r2, r3
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009138:	441c      	add	r4, r3
 800913a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800913e:	2200      	movs	r2, #0
 8009140:	673b      	str	r3, [r7, #112]	; 0x70
 8009142:	677a      	str	r2, [r7, #116]	; 0x74
 8009144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	1891      	adds	r1, r2, r2
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	415b      	adcs	r3, r3
 8009152:	60fb      	str	r3, [r7, #12]
 8009154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009158:	4641      	mov	r1, r8
 800915a:	1851      	adds	r1, r2, r1
 800915c:	6039      	str	r1, [r7, #0]
 800915e:	4649      	mov	r1, r9
 8009160:	414b      	adcs	r3, r1
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009170:	4659      	mov	r1, fp
 8009172:	00cb      	lsls	r3, r1, #3
 8009174:	4651      	mov	r1, sl
 8009176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800917a:	4651      	mov	r1, sl
 800917c:	00ca      	lsls	r2, r1, #3
 800917e:	4610      	mov	r0, r2
 8009180:	4619      	mov	r1, r3
 8009182:	4603      	mov	r3, r0
 8009184:	4642      	mov	r2, r8
 8009186:	189b      	adds	r3, r3, r2
 8009188:	66bb      	str	r3, [r7, #104]	; 0x68
 800918a:	464b      	mov	r3, r9
 800918c:	460a      	mov	r2, r1
 800918e:	eb42 0303 	adc.w	r3, r2, r3
 8009192:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	663b      	str	r3, [r7, #96]	; 0x60
 800919e:	667a      	str	r2, [r7, #100]	; 0x64
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091ac:	4649      	mov	r1, r9
 80091ae:	008b      	lsls	r3, r1, #2
 80091b0:	4641      	mov	r1, r8
 80091b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b6:	4641      	mov	r1, r8
 80091b8:	008a      	lsls	r2, r1, #2
 80091ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091be:	f7f7 fd43 	bl	8000c48 <__aeabi_uldivmod>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4b0d      	ldr	r3, [pc, #52]	; (80091fc <UART_SetConfig+0x4e4>)
 80091c8:	fba3 1302 	umull	r1, r3, r3, r2
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	2164      	movs	r1, #100	; 0x64
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	3332      	adds	r3, #50	; 0x32
 80091da:	4a08      	ldr	r2, [pc, #32]	; (80091fc <UART_SetConfig+0x4e4>)
 80091dc:	fba2 2303 	umull	r2, r3, r2, r3
 80091e0:	095b      	lsrs	r3, r3, #5
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4422      	add	r2, r4
 80091ee:	609a      	str	r2, [r3, #8]
}
 80091f0:	bf00      	nop
 80091f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80091f6:	46bd      	mov	sp, r7
 80091f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091fc:	51eb851f 	.word	0x51eb851f

08009200 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009204:	4904      	ldr	r1, [pc, #16]	; (8009218 <MX_FATFS_Init+0x18>)
 8009206:	4805      	ldr	r0, [pc, #20]	; (800921c <MX_FATFS_Init+0x1c>)
 8009208:	f000 f8b0 	bl	800936c <FATFS_LinkDriver>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	4b03      	ldr	r3, [pc, #12]	; (8009220 <MX_FATFS_Init+0x20>)
 8009212:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009214:	bf00      	nop
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20000d48 	.word	0x20000d48
 800921c:	20000024 	.word	0x20000024
 8009220:	20000d44 	.word	0x20000d44

08009224 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <USER_initialize+0x24>)
 8009230:	2201      	movs	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <USER_initialize+0x24>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800923a:	4618      	mov	r0, r3
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	20000021 	.word	0x20000021

0800924c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009256:	4b06      	ldr	r3, [pc, #24]	; (8009270 <USER_status+0x24>)
 8009258:	2201      	movs	r2, #1
 800925a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <USER_status+0x24>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009262:	4618      	mov	r0, r3
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000021 	.word	0x20000021

08009274 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4603      	mov	r3, r0
 8009282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009284:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	4603      	mov	r3, r0
 80092a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80092a2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	4603      	mov	r3, r0
 80092b8:	603a      	str	r2, [r7, #0]
 80092ba:	71fb      	strb	r3, [r7, #7]
 80092bc:	460b      	mov	r3, r1
 80092be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	73fb      	strb	r3, [r7, #15]
    return res;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
	...

080092d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b087      	sub	sp, #28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80092ea:	4b1f      	ldr	r3, [pc, #124]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 80092ec:	7a5b      	ldrb	r3, [r3, #9]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d131      	bne.n	8009358 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80092f4:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 80092f6:	7a5b      	ldrb	r3, [r3, #9]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	4b1a      	ldr	r3, [pc, #104]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 80092fe:	2100      	movs	r1, #0
 8009300:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009302:	4b19      	ldr	r3, [pc, #100]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 8009304:	7a5b      	ldrb	r3, [r3, #9]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	4a17      	ldr	r2, [pc, #92]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	4413      	add	r3, r2
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 8009314:	7a5b      	ldrb	r3, [r3, #9]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 800931c:	4413      	add	r3, r2
 800931e:	79fa      	ldrb	r2, [r7, #7]
 8009320:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 8009324:	7a5b      	ldrb	r3, [r3, #9]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	b2d1      	uxtb	r1, r2
 800932c:	4a0e      	ldr	r2, [pc, #56]	; (8009368 <FATFS_LinkDriverEx+0x94>)
 800932e:	7251      	strb	r1, [r2, #9]
 8009330:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009332:	7dbb      	ldrb	r3, [r7, #22]
 8009334:	3330      	adds	r3, #48	; 0x30
 8009336:	b2da      	uxtb	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3301      	adds	r3, #1
 8009340:	223a      	movs	r2, #58	; 0x3a
 8009342:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	3302      	adds	r3, #2
 8009348:	222f      	movs	r2, #47	; 0x2f
 800934a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	3303      	adds	r3, #3
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009358:	7dfb      	ldrb	r3, [r7, #23]
}
 800935a:	4618      	mov	r0, r3
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	20000d4c 	.word	0x20000d4c

0800936c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009376:	2200      	movs	r2, #0
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff ffaa 	bl	80092d4 <FATFS_LinkDriverEx>
 8009380:	4603      	mov	r3, r0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <HTTP_init>:
 * @param URIType [out] URI
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef HTTP_init(SIM_HTTPTypeDef *const me, const char *pURL,
		uint8_t URLSize, uint8_t URIType)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	460b      	mov	r3, r1
 800939c:	71fb      	strb	r3, [r7, #7]
 800939e:	4613      	mov	r3, r2
 80093a0:	71bb      	strb	r3, [r7, #6]
	if (me == NULL || pURL == NULL)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HTTP_init+0x22>
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HTTP_init+0x26>
	{
		return THT_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e01f      	b.n	80093f2 <HTTP_init+0x66>
	}
	(void) URIType;

	memset(me->url, '\0', sizeof(me->url));
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	22c8      	movs	r2, #200	; 0xc8
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f8fc 	bl	800a5b8 <memset>
	memset(me->type, '\0', sizeof(me->type));
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	33c9      	adds	r3, #201	; 0xc9
 80093c4:	2214      	movs	r2, #20
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f8f5 	bl	800a5b8 <memset>
	snprintf(me->url, sizeof(me->url), "%s", pURL);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1c58      	adds	r0, r3, #1
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <HTTP_init+0x70>)
 80093d6:	21c8      	movs	r1, #200	; 0xc8
 80093d8:	f000 ffc2 	bl	800a360 <sniprintf>
	memcpy(me->type, HTTP_CONTENT_TYPE, strlen(HTTP_CONTENT_TYPE));
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	33c9      	adds	r3, #201	; 0xc9
 80093e0:	2210      	movs	r2, #16
 80093e2:	4907      	ldr	r1, [pc, #28]	; (8009400 <HTTP_init+0x74>)
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f98a 	bl	800a6fe <memcpy>
	me->method = SIM_HTTP_POST;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	0800dca0 	.word	0x0800dca0
 8009400:	0800dca4 	.word	0x0800dca4

08009404 <SIM_getData>:
 * 				@arg SIM_DR_IMEI
 * 				@arg SIM_DR_TIME
 * @param [out] pData a pointer to SIM data structure
 */
THT_StatusTypeDef SIM_getData(SIM_HandleTypeDef *const me, uint32_t data, SIM_DataTypeDef *pData)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <SIM_getData+0x16>
	{
		return THT_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e054      	b.n	80094c4 <SIM_getData+0xc0>
	}

	if ((data & SIM_DR_RSSI) == SIM_DR_RSSI)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <SIM_getData+0x34>
	{
		pData->rssi = (*me->simGetRSSI)(me);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	4798      	blx	r3
 800942e:	4603      	mov	r3, r0
 8009430:	b21a      	sxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if ((data & SIM_DR_NWTYPE) == SIM_DR_NWTYPE)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <SIM_getData+0x50>
	{
		(*me->simGetNwtype)(me, pData->network, sizeof(pData->network));
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	f102 0133 	add.w	r1, r2, #51	; 0x33
 800944e:	2210      	movs	r2, #16
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	4798      	blx	r3
	}
	if ((data & SIM_DR_SIMPHONE) == SIM_DR_SIMPHONE)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d006      	beq.n	800946c <SIM_getData+0x68>
	{
		(*me->simGetSimPhone)(me, pData->simPhone, sizeof(pData->simPhone));
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	220d      	movs	r2, #13
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	4798      	blx	r3
	}
	if ((data & SIM_DR_IMEI) == SIM_DR_IMEI)
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <SIM_getData+0x84>
	{
		(*me->simGetIMEI)(me, pData->imei, sizeof(pData->imei));
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8009482:	2210      	movs	r2, #16
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	4798      	blx	r3
	}
	if ((data & SIM_DR_TIME) == SIM_DR_TIME)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f003 0310 	and.w	r3, r3, #16
 800948e:	2b00      	cmp	r3, #0
 8009490:	d008      	beq.n	80094a4 <SIM_getData+0xa0>
	{
		(*me->simGetLocalTime)(me, pData->timezone, sizeof(pData->timezone));
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	f102 010d 	add.w	r1, r2, #13
 800949e:	2216      	movs	r2, #22
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	4798      	blx	r3
	}
	if ((data & SIM_DR_TEMP) == SIM_DR_TEMP)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f003 0320 	and.w	r3, r3, #32
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d009      	beq.n	80094c2 <SIM_getData+0xbe>
	{
		pData->temp = (*me->simGetTemperature)(me);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	4798      	blx	r3
 80094b8:	4603      	mov	r3, r0
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	return THT_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <SIM_init>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_init(SIM_HandleTypeDef *const me)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <SIM_init+0x12>
	{
		return THT_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e005      	b.n	80094ea <SIM_init+0x1e>
	}

	return (*me->simInit)(me);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	4798      	blx	r3
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <SIM_setFunction>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setFunction(SIM_HandleTypeDef *const me, uint8_t mode)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <SIM_setFunction+0x16>
	{
		return THT_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e007      	b.n	8009518 <SIM_setFunction+0x26>
	}

	return (*me->simSetFunction)(me, mode);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 800950e:	78fa      	ldrb	r2, [r7, #3]
 8009510:	4611      	mov	r1, r2
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <SIM_checkEvent>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param size
 */
void SIM_checkEvent(SIM_HandleTypeDef *const me, uint16_t size)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <SIM_checkEvent+0x22>
	{
		return;
	}

	(*me->simCheckEvent)(me, size);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8009538:	887a      	ldrh	r2, [r7, #2]
 800953a:	4611      	mov	r1, r2
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	4798      	blx	r3
 8009540:	e000      	b.n	8009544 <SIM_checkEvent+0x24>
		return;
 8009542:	bf00      	nop
}
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <SIM_getLocalTime>:
 * @param pTime
 * @param size
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_getLocalTime(SIM_HandleTypeDef *const me, char pTime[], uint8_t size)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	4613      	mov	r3, r2
 8009556:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d002      	beq.n	8009564 <SIM_getLocalTime+0x1a>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <SIM_getLocalTime+0x1e>
	{
		return THT_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e007      	b.n	8009578 <SIM_getLocalTime+0x2e>
	}

	return (*me->simGetLocalTime)(me, pTime, size);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800956e:	79fa      	ldrb	r2, [r7, #7]
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <SIM_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setLocalTimeAuto(SIM_HandleTypeDef *const me)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <SIM_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e005      	b.n	800959e <SIM_setLocalTimeAuto+0x1e>
	}

	return (*me->simSetLocalTimeAuto)(me);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
 800959c:	4603      	mov	r3, r0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <SIM_sendHTTP>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param pHTTP
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_sendHTTP(SIM_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
	if (me == NULL || pHTTP == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SIM_sendHTTP+0x16>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <SIM_sendHTTP+0x1a>
	{
		return THT_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e029      	b.n	8009616 <SIM_sendHTTP+0x6e>

	printf("HTTP request information:\n"
			"URL: %s\n"
			"Content Type: %s\n"
			"Method: %u\n"
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	1c59      	adds	r1, r3, #1
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
	printf("HTTP request information:\n"
 80095d0:	4618      	mov	r0, r3
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	33dd      	adds	r3, #221	; 0xdd
	printf("HTTP request information:\n"
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4603      	mov	r3, r0
 80095da:	4811      	ldr	r0, [pc, #68]	; (8009620 <SIM_sendHTTP+0x78>)
 80095dc:	f000 fe4a 	bl	800a274 <iprintf>

	THT_StatusTypeDef res = (*me->simSendHTTP)(me, pHTTP);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]

	printf("HTTP response information \n"
			"ErrorCode: %d\n"
			"Length: %lu\n"
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
	printf("HTTP response information \n"
 80095f6:	4619      	mov	r1, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
	printf("HTTP response information \n"
 8009604:	4807      	ldr	r0, [pc, #28]	; (8009624 <SIM_sendHTTP+0x7c>)
 8009606:	f000 fe35 	bl	800a274 <iprintf>

	if (THT_OK != res)
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <SIM_sendHTTP+0x6c>
	{
		return THT_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <SIM_sendHTTP+0x6e>
	}
	else
	{
		return THT_OK;
 8009614:	2300      	movs	r3, #0
	}
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	0800ddfc 	.word	0x0800ddfc
 8009624:	0800de48 	.word	0x0800de48

08009628 <THT_copyStringUntilToken>:
 * 			@Note: if substring length is less than size, it's copy
 * 			substring length bytes, else it's copy size bytes.
 * @retval None
 */
void THT_copyStringUntilToken(const char *src, char des[], uint16_t size, const char *token)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
	if (src == NULL || des == NULL || size == 0)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <THT_copyStringUntilToken+0x22>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <THT_copyStringUntilToken+0x22>
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <THT_copyStringUntilToken+0x28>
	{
		des = NULL;
 800964a:	2300      	movs	r3, #0
 800964c:	60bb      	str	r3, [r7, #8]
		return;
 800964e:	e052      	b.n	80096f6 <THT_copyStringUntilToken+0xce>
	}

	if (token == NULL)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d121      	bne.n	800969a <THT_copyStringUntilToken+0x72>
	{
		uint16_t srcSize = strlen(src);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7f6 fe0a 	bl	8000270 <strlen>
 800965c:	4603      	mov	r3, r0
 800965e:	827b      	strh	r3, [r7, #18]
		if (srcSize < size)
 8009660:	8a7a      	ldrh	r2, [r7, #18]
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	429a      	cmp	r2, r3
 8009666:	d20b      	bcs.n	8009680 <THT_copyStringUntilToken+0x58>
		{
			memcpy(des, src, srcSize);
 8009668:	8a7b      	ldrh	r3, [r7, #18]
 800966a:	461a      	mov	r2, r3
 800966c:	68f9      	ldr	r1, [r7, #12]
 800966e:	68b8      	ldr	r0, [r7, #8]
 8009670:	f001 f845 	bl	800a6fe <memcpy>
			des[srcSize] = '\0';
 8009674:	8a7b      	ldrh	r3, [r7, #18]
 8009676:	68ba      	ldr	r2, [r7, #8]
 8009678:	4413      	add	r3, r2
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
 800967e:	e03a      	b.n	80096f6 <THT_copyStringUntilToken+0xce>
		}
		else
		{
			memcpy(des, src, size);
 8009680:	88fb      	ldrh	r3, [r7, #6]
 8009682:	461a      	mov	r2, r3
 8009684:	68f9      	ldr	r1, [r7, #12]
 8009686:	68b8      	ldr	r0, [r7, #8]
 8009688:	f001 f839 	bl	800a6fe <memcpy>
			des[size - 1] = '\0';
 800968c:	88fb      	ldrh	r3, [r7, #6]
 800968e:	3b01      	subs	r3, #1
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	4413      	add	r3, r2
 8009694:	2200      	movs	r2, #0
 8009696:	701a      	strb	r2, [r3, #0]
 8009698:	e02d      	b.n	80096f6 <THT_copyStringUntilToken+0xce>
		}
	}
	else
	{
		char *sPtr = strstr(src, token);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 ffa0 	bl	800a5e2 <strstr>
 80096a2:	6178      	str	r0, [r7, #20]

		if (sPtr != NULL)
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d023      	beq.n	80096f2 <THT_copyStringUntilToken+0xca>
		{
			if (sPtr - src < size)
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	1ad2      	subs	r2, r2, r3
 80096b0:	88fb      	ldrh	r3, [r7, #6]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	da10      	bge.n	80096d8 <THT_copyStringUntilToken+0xb0>
			{
				memcpy(des, src, sPtr - src);
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	68f9      	ldr	r1, [r7, #12]
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f001 f81c 	bl	800a6fe <memcpy>
				des[sPtr - src] = '\0';
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
 80096d6:	e00e      	b.n	80096f6 <THT_copyStringUntilToken+0xce>
			}
			else
			{
				memcpy(des, src, size);
 80096d8:	88fb      	ldrh	r3, [r7, #6]
 80096da:	461a      	mov	r2, r3
 80096dc:	68f9      	ldr	r1, [r7, #12]
 80096de:	68b8      	ldr	r0, [r7, #8]
 80096e0:	f001 f80d 	bl	800a6fe <memcpy>
				des[size - 1] = '\0';
 80096e4:	88fb      	ldrh	r3, [r7, #6]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4413      	add	r3, r2
 80096ec:	2200      	movs	r2, #0
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	e001      	b.n	80096f6 <THT_copyStringUntilToken+0xce>
			}
		}
		else
		{
			des = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60bb      	str	r3, [r7, #8]
		}
	}
}
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <atoi>:
 80096fc:	220a      	movs	r2, #10
 80096fe:	2100      	movs	r1, #0
 8009700:	f000 b886 	b.w	8009810 <strtol>

08009704 <atol>:
 8009704:	220a      	movs	r2, #10
 8009706:	2100      	movs	r1, #0
 8009708:	f000 b882 	b.w	8009810 <strtol>

0800970c <_strtol_l.constprop.0>:
 800970c:	2b01      	cmp	r3, #1
 800970e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009712:	d001      	beq.n	8009718 <_strtol_l.constprop.0+0xc>
 8009714:	2b24      	cmp	r3, #36	; 0x24
 8009716:	d906      	bls.n	8009726 <_strtol_l.constprop.0+0x1a>
 8009718:	f000 ffc4 	bl	800a6a4 <__errno>
 800971c:	2316      	movs	r3, #22
 800971e:	6003      	str	r3, [r0, #0]
 8009720:	2000      	movs	r0, #0
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800980c <_strtol_l.constprop.0+0x100>
 800972a:	460d      	mov	r5, r1
 800972c:	462e      	mov	r6, r5
 800972e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009732:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009736:	f017 0708 	ands.w	r7, r7, #8
 800973a:	d1f7      	bne.n	800972c <_strtol_l.constprop.0+0x20>
 800973c:	2c2d      	cmp	r4, #45	; 0x2d
 800973e:	d132      	bne.n	80097a6 <_strtol_l.constprop.0+0x9a>
 8009740:	782c      	ldrb	r4, [r5, #0]
 8009742:	2701      	movs	r7, #1
 8009744:	1cb5      	adds	r5, r6, #2
 8009746:	2b00      	cmp	r3, #0
 8009748:	d05b      	beq.n	8009802 <_strtol_l.constprop.0+0xf6>
 800974a:	2b10      	cmp	r3, #16
 800974c:	d109      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 800974e:	2c30      	cmp	r4, #48	; 0x30
 8009750:	d107      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 8009752:	782c      	ldrb	r4, [r5, #0]
 8009754:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009758:	2c58      	cmp	r4, #88	; 0x58
 800975a:	d14d      	bne.n	80097f8 <_strtol_l.constprop.0+0xec>
 800975c:	786c      	ldrb	r4, [r5, #1]
 800975e:	2310      	movs	r3, #16
 8009760:	3502      	adds	r5, #2
 8009762:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009766:	f108 38ff 	add.w	r8, r8, #4294967295
 800976a:	f04f 0e00 	mov.w	lr, #0
 800976e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009772:	4676      	mov	r6, lr
 8009774:	fb03 8a19 	mls	sl, r3, r9, r8
 8009778:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800977c:	f1bc 0f09 	cmp.w	ip, #9
 8009780:	d816      	bhi.n	80097b0 <_strtol_l.constprop.0+0xa4>
 8009782:	4664      	mov	r4, ip
 8009784:	42a3      	cmp	r3, r4
 8009786:	dd24      	ble.n	80097d2 <_strtol_l.constprop.0+0xc6>
 8009788:	f1be 3fff 	cmp.w	lr, #4294967295
 800978c:	d008      	beq.n	80097a0 <_strtol_l.constprop.0+0x94>
 800978e:	45b1      	cmp	r9, r6
 8009790:	d31c      	bcc.n	80097cc <_strtol_l.constprop.0+0xc0>
 8009792:	d101      	bne.n	8009798 <_strtol_l.constprop.0+0x8c>
 8009794:	45a2      	cmp	sl, r4
 8009796:	db19      	blt.n	80097cc <_strtol_l.constprop.0+0xc0>
 8009798:	fb06 4603 	mla	r6, r6, r3, r4
 800979c:	f04f 0e01 	mov.w	lr, #1
 80097a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80097a4:	e7e8      	b.n	8009778 <_strtol_l.constprop.0+0x6c>
 80097a6:	2c2b      	cmp	r4, #43	; 0x2b
 80097a8:	bf04      	itt	eq
 80097aa:	782c      	ldrbeq	r4, [r5, #0]
 80097ac:	1cb5      	addeq	r5, r6, #2
 80097ae:	e7ca      	b.n	8009746 <_strtol_l.constprop.0+0x3a>
 80097b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80097b4:	f1bc 0f19 	cmp.w	ip, #25
 80097b8:	d801      	bhi.n	80097be <_strtol_l.constprop.0+0xb2>
 80097ba:	3c37      	subs	r4, #55	; 0x37
 80097bc:	e7e2      	b.n	8009784 <_strtol_l.constprop.0+0x78>
 80097be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80097c2:	f1bc 0f19 	cmp.w	ip, #25
 80097c6:	d804      	bhi.n	80097d2 <_strtol_l.constprop.0+0xc6>
 80097c8:	3c57      	subs	r4, #87	; 0x57
 80097ca:	e7db      	b.n	8009784 <_strtol_l.constprop.0+0x78>
 80097cc:	f04f 3eff 	mov.w	lr, #4294967295
 80097d0:	e7e6      	b.n	80097a0 <_strtol_l.constprop.0+0x94>
 80097d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80097d6:	d105      	bne.n	80097e4 <_strtol_l.constprop.0+0xd8>
 80097d8:	2322      	movs	r3, #34	; 0x22
 80097da:	6003      	str	r3, [r0, #0]
 80097dc:	4646      	mov	r6, r8
 80097de:	b942      	cbnz	r2, 80097f2 <_strtol_l.constprop.0+0xe6>
 80097e0:	4630      	mov	r0, r6
 80097e2:	e79e      	b.n	8009722 <_strtol_l.constprop.0+0x16>
 80097e4:	b107      	cbz	r7, 80097e8 <_strtol_l.constprop.0+0xdc>
 80097e6:	4276      	negs	r6, r6
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	d0f9      	beq.n	80097e0 <_strtol_l.constprop.0+0xd4>
 80097ec:	f1be 0f00 	cmp.w	lr, #0
 80097f0:	d000      	beq.n	80097f4 <_strtol_l.constprop.0+0xe8>
 80097f2:	1e69      	subs	r1, r5, #1
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	e7f3      	b.n	80097e0 <_strtol_l.constprop.0+0xd4>
 80097f8:	2430      	movs	r4, #48	; 0x30
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1b1      	bne.n	8009762 <_strtol_l.constprop.0+0x56>
 80097fe:	2308      	movs	r3, #8
 8009800:	e7af      	b.n	8009762 <_strtol_l.constprop.0+0x56>
 8009802:	2c30      	cmp	r4, #48	; 0x30
 8009804:	d0a5      	beq.n	8009752 <_strtol_l.constprop.0+0x46>
 8009806:	230a      	movs	r3, #10
 8009808:	e7ab      	b.n	8009762 <_strtol_l.constprop.0+0x56>
 800980a:	bf00      	nop
 800980c:	0800deed 	.word	0x0800deed

08009810 <strtol>:
 8009810:	4613      	mov	r3, r2
 8009812:	460a      	mov	r2, r1
 8009814:	4601      	mov	r1, r0
 8009816:	4802      	ldr	r0, [pc, #8]	; (8009820 <strtol+0x10>)
 8009818:	6800      	ldr	r0, [r0, #0]
 800981a:	f7ff bf77 	b.w	800970c <_strtol_l.constprop.0>
 800981e:	bf00      	nop
 8009820:	20000090 	.word	0x20000090

08009824 <__cvt>:
 8009824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	ec55 4b10 	vmov	r4, r5, d0
 800982c:	2d00      	cmp	r5, #0
 800982e:	460e      	mov	r6, r1
 8009830:	4619      	mov	r1, r3
 8009832:	462b      	mov	r3, r5
 8009834:	bfbb      	ittet	lt
 8009836:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800983a:	461d      	movlt	r5, r3
 800983c:	2300      	movge	r3, #0
 800983e:	232d      	movlt	r3, #45	; 0x2d
 8009840:	700b      	strb	r3, [r1, #0]
 8009842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009844:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009848:	4691      	mov	r9, r2
 800984a:	f023 0820 	bic.w	r8, r3, #32
 800984e:	bfbc      	itt	lt
 8009850:	4622      	movlt	r2, r4
 8009852:	4614      	movlt	r4, r2
 8009854:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009858:	d005      	beq.n	8009866 <__cvt+0x42>
 800985a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800985e:	d100      	bne.n	8009862 <__cvt+0x3e>
 8009860:	3601      	adds	r6, #1
 8009862:	2102      	movs	r1, #2
 8009864:	e000      	b.n	8009868 <__cvt+0x44>
 8009866:	2103      	movs	r1, #3
 8009868:	ab03      	add	r3, sp, #12
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	ab02      	add	r3, sp, #8
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	ec45 4b10 	vmov	d0, r4, r5
 8009874:	4653      	mov	r3, sl
 8009876:	4632      	mov	r2, r6
 8009878:	f000 ffda 	bl	800a830 <_dtoa_r>
 800987c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009880:	4607      	mov	r7, r0
 8009882:	d102      	bne.n	800988a <__cvt+0x66>
 8009884:	f019 0f01 	tst.w	r9, #1
 8009888:	d022      	beq.n	80098d0 <__cvt+0xac>
 800988a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800988e:	eb07 0906 	add.w	r9, r7, r6
 8009892:	d110      	bne.n	80098b6 <__cvt+0x92>
 8009894:	783b      	ldrb	r3, [r7, #0]
 8009896:	2b30      	cmp	r3, #48	; 0x30
 8009898:	d10a      	bne.n	80098b0 <__cvt+0x8c>
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a6:	b918      	cbnz	r0, 80098b0 <__cvt+0x8c>
 80098a8:	f1c6 0601 	rsb	r6, r6, #1
 80098ac:	f8ca 6000 	str.w	r6, [sl]
 80098b0:	f8da 3000 	ldr.w	r3, [sl]
 80098b4:	4499      	add	r9, r3
 80098b6:	2200      	movs	r2, #0
 80098b8:	2300      	movs	r3, #0
 80098ba:	4620      	mov	r0, r4
 80098bc:	4629      	mov	r1, r5
 80098be:	f7f7 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c2:	b108      	cbz	r0, 80098c8 <__cvt+0xa4>
 80098c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098c8:	2230      	movs	r2, #48	; 0x30
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	454b      	cmp	r3, r9
 80098ce:	d307      	bcc.n	80098e0 <__cvt+0xbc>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098d4:	1bdb      	subs	r3, r3, r7
 80098d6:	4638      	mov	r0, r7
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	b004      	add	sp, #16
 80098dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e0:	1c59      	adds	r1, r3, #1
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	e7f0      	b.n	80098ca <__cvt+0xa6>

080098e8 <__exponent>:
 80098e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ea:	4603      	mov	r3, r0
 80098ec:	2900      	cmp	r1, #0
 80098ee:	bfb8      	it	lt
 80098f0:	4249      	neglt	r1, r1
 80098f2:	f803 2b02 	strb.w	r2, [r3], #2
 80098f6:	bfb4      	ite	lt
 80098f8:	222d      	movlt	r2, #45	; 0x2d
 80098fa:	222b      	movge	r2, #43	; 0x2b
 80098fc:	2909      	cmp	r1, #9
 80098fe:	7042      	strb	r2, [r0, #1]
 8009900:	dd2a      	ble.n	8009958 <__exponent+0x70>
 8009902:	f10d 0207 	add.w	r2, sp, #7
 8009906:	4617      	mov	r7, r2
 8009908:	260a      	movs	r6, #10
 800990a:	4694      	mov	ip, r2
 800990c:	fb91 f5f6 	sdiv	r5, r1, r6
 8009910:	fb06 1415 	mls	r4, r6, r5, r1
 8009914:	3430      	adds	r4, #48	; 0x30
 8009916:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800991a:	460c      	mov	r4, r1
 800991c:	2c63      	cmp	r4, #99	; 0x63
 800991e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009922:	4629      	mov	r1, r5
 8009924:	dcf1      	bgt.n	800990a <__exponent+0x22>
 8009926:	3130      	adds	r1, #48	; 0x30
 8009928:	f1ac 0402 	sub.w	r4, ip, #2
 800992c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009930:	1c41      	adds	r1, r0, #1
 8009932:	4622      	mov	r2, r4
 8009934:	42ba      	cmp	r2, r7
 8009936:	d30a      	bcc.n	800994e <__exponent+0x66>
 8009938:	f10d 0209 	add.w	r2, sp, #9
 800993c:	eba2 020c 	sub.w	r2, r2, ip
 8009940:	42bc      	cmp	r4, r7
 8009942:	bf88      	it	hi
 8009944:	2200      	movhi	r2, #0
 8009946:	4413      	add	r3, r2
 8009948:	1a18      	subs	r0, r3, r0
 800994a:	b003      	add	sp, #12
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009952:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009956:	e7ed      	b.n	8009934 <__exponent+0x4c>
 8009958:	2330      	movs	r3, #48	; 0x30
 800995a:	3130      	adds	r1, #48	; 0x30
 800995c:	7083      	strb	r3, [r0, #2]
 800995e:	70c1      	strb	r1, [r0, #3]
 8009960:	1d03      	adds	r3, r0, #4
 8009962:	e7f1      	b.n	8009948 <__exponent+0x60>

08009964 <_printf_float>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	ed2d 8b02 	vpush	{d8}
 800996c:	b08d      	sub	sp, #52	; 0x34
 800996e:	460c      	mov	r4, r1
 8009970:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009974:	4616      	mov	r6, r2
 8009976:	461f      	mov	r7, r3
 8009978:	4605      	mov	r5, r0
 800997a:	f000 fe49 	bl	800a610 <_localeconv_r>
 800997e:	f8d0 a000 	ldr.w	sl, [r0]
 8009982:	4650      	mov	r0, sl
 8009984:	f7f6 fc74 	bl	8000270 <strlen>
 8009988:	2300      	movs	r3, #0
 800998a:	930a      	str	r3, [sp, #40]	; 0x28
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	9305      	str	r3, [sp, #20]
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009998:	3307      	adds	r3, #7
 800999a:	f023 0307 	bic.w	r3, r3, #7
 800999e:	f103 0208 	add.w	r2, r3, #8
 80099a2:	f8c8 2000 	str.w	r2, [r8]
 80099a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80099b4:	ee08 0a10 	vmov	s16, r0
 80099b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80099bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c0:	4b9e      	ldr	r3, [pc, #632]	; (8009c3c <_printf_float+0x2d8>)
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295
 80099c6:	f7f7 f8b1 	bl	8000b2c <__aeabi_dcmpun>
 80099ca:	bb88      	cbnz	r0, 8009a30 <_printf_float+0xcc>
 80099cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099d0:	4b9a      	ldr	r3, [pc, #616]	; (8009c3c <_printf_float+0x2d8>)
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295
 80099d6:	f7f7 f88b 	bl	8000af0 <__aeabi_dcmple>
 80099da:	bb48      	cbnz	r0, 8009a30 <_printf_float+0xcc>
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f7 f87a 	bl	8000adc <__aeabi_dcmplt>
 80099e8:	b110      	cbz	r0, 80099f0 <_printf_float+0x8c>
 80099ea:	232d      	movs	r3, #45	; 0x2d
 80099ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f0:	4a93      	ldr	r2, [pc, #588]	; (8009c40 <_printf_float+0x2dc>)
 80099f2:	4b94      	ldr	r3, [pc, #592]	; (8009c44 <_printf_float+0x2e0>)
 80099f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099f8:	bf94      	ite	ls
 80099fa:	4690      	movls	r8, r2
 80099fc:	4698      	movhi	r8, r3
 80099fe:	2303      	movs	r3, #3
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	9b05      	ldr	r3, [sp, #20]
 8009a04:	f023 0304 	bic.w	r3, r3, #4
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	f04f 0900 	mov.w	r9, #0
 8009a0e:	9700      	str	r7, [sp, #0]
 8009a10:	4633      	mov	r3, r6
 8009a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a14:	4621      	mov	r1, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 f9da 	bl	8009dd0 <_printf_common>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f040 8090 	bne.w	8009b42 <_printf_float+0x1de>
 8009a22:	f04f 30ff 	mov.w	r0, #4294967295
 8009a26:	b00d      	add	sp, #52	; 0x34
 8009a28:	ecbd 8b02 	vpop	{d8}
 8009a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a30:	4642      	mov	r2, r8
 8009a32:	464b      	mov	r3, r9
 8009a34:	4640      	mov	r0, r8
 8009a36:	4649      	mov	r1, r9
 8009a38:	f7f7 f878 	bl	8000b2c <__aeabi_dcmpun>
 8009a3c:	b140      	cbz	r0, 8009a50 <_printf_float+0xec>
 8009a3e:	464b      	mov	r3, r9
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	bfbc      	itt	lt
 8009a44:	232d      	movlt	r3, #45	; 0x2d
 8009a46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a4a:	4a7f      	ldr	r2, [pc, #508]	; (8009c48 <_printf_float+0x2e4>)
 8009a4c:	4b7f      	ldr	r3, [pc, #508]	; (8009c4c <_printf_float+0x2e8>)
 8009a4e:	e7d1      	b.n	80099f4 <_printf_float+0x90>
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a56:	9206      	str	r2, [sp, #24]
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	d13f      	bne.n	8009adc <_printf_float+0x178>
 8009a5c:	2306      	movs	r3, #6
 8009a5e:	6063      	str	r3, [r4, #4]
 8009a60:	9b05      	ldr	r3, [sp, #20]
 8009a62:	6861      	ldr	r1, [r4, #4]
 8009a64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9303      	str	r3, [sp, #12]
 8009a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a72:	ab09      	add	r3, sp, #36	; 0x24
 8009a74:	ec49 8b10 	vmov	d0, r8, r9
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	6022      	str	r2, [r4, #0]
 8009a7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a80:	4628      	mov	r0, r5
 8009a82:	f7ff fecf 	bl	8009824 <__cvt>
 8009a86:	9b06      	ldr	r3, [sp, #24]
 8009a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a8a:	2b47      	cmp	r3, #71	; 0x47
 8009a8c:	4680      	mov	r8, r0
 8009a8e:	d108      	bne.n	8009aa2 <_printf_float+0x13e>
 8009a90:	1cc8      	adds	r0, r1, #3
 8009a92:	db02      	blt.n	8009a9a <_printf_float+0x136>
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	4299      	cmp	r1, r3
 8009a98:	dd41      	ble.n	8009b1e <_printf_float+0x1ba>
 8009a9a:	f1ab 0302 	sub.w	r3, fp, #2
 8009a9e:	fa5f fb83 	uxtb.w	fp, r3
 8009aa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aa6:	d820      	bhi.n	8009aea <_printf_float+0x186>
 8009aa8:	3901      	subs	r1, #1
 8009aaa:	465a      	mov	r2, fp
 8009aac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8009ab2:	f7ff ff19 	bl	80098e8 <__exponent>
 8009ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab8:	1813      	adds	r3, r2, r0
 8009aba:	2a01      	cmp	r2, #1
 8009abc:	4681      	mov	r9, r0
 8009abe:	6123      	str	r3, [r4, #16]
 8009ac0:	dc02      	bgt.n	8009ac8 <_printf_float+0x164>
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	07d2      	lsls	r2, r2, #31
 8009ac6:	d501      	bpl.n	8009acc <_printf_float+0x168>
 8009ac8:	3301      	adds	r3, #1
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d09c      	beq.n	8009a0e <_printf_float+0xaa>
 8009ad4:	232d      	movs	r3, #45	; 0x2d
 8009ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ada:	e798      	b.n	8009a0e <_printf_float+0xaa>
 8009adc:	9a06      	ldr	r2, [sp, #24]
 8009ade:	2a47      	cmp	r2, #71	; 0x47
 8009ae0:	d1be      	bne.n	8009a60 <_printf_float+0xfc>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1bc      	bne.n	8009a60 <_printf_float+0xfc>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e7b9      	b.n	8009a5e <_printf_float+0xfa>
 8009aea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aee:	d118      	bne.n	8009b22 <_printf_float+0x1be>
 8009af0:	2900      	cmp	r1, #0
 8009af2:	6863      	ldr	r3, [r4, #4]
 8009af4:	dd0b      	ble.n	8009b0e <_printf_float+0x1aa>
 8009af6:	6121      	str	r1, [r4, #16]
 8009af8:	b913      	cbnz	r3, 8009b00 <_printf_float+0x19c>
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	07d0      	lsls	r0, r2, #31
 8009afe:	d502      	bpl.n	8009b06 <_printf_float+0x1a2>
 8009b00:	3301      	adds	r3, #1
 8009b02:	440b      	add	r3, r1
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b08:	f04f 0900 	mov.w	r9, #0
 8009b0c:	e7de      	b.n	8009acc <_printf_float+0x168>
 8009b0e:	b913      	cbnz	r3, 8009b16 <_printf_float+0x1b2>
 8009b10:	6822      	ldr	r2, [r4, #0]
 8009b12:	07d2      	lsls	r2, r2, #31
 8009b14:	d501      	bpl.n	8009b1a <_printf_float+0x1b6>
 8009b16:	3302      	adds	r3, #2
 8009b18:	e7f4      	b.n	8009b04 <_printf_float+0x1a0>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7f2      	b.n	8009b04 <_printf_float+0x1a0>
 8009b1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b24:	4299      	cmp	r1, r3
 8009b26:	db05      	blt.n	8009b34 <_printf_float+0x1d0>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	6121      	str	r1, [r4, #16]
 8009b2c:	07d8      	lsls	r0, r3, #31
 8009b2e:	d5ea      	bpl.n	8009b06 <_printf_float+0x1a2>
 8009b30:	1c4b      	adds	r3, r1, #1
 8009b32:	e7e7      	b.n	8009b04 <_printf_float+0x1a0>
 8009b34:	2900      	cmp	r1, #0
 8009b36:	bfd4      	ite	le
 8009b38:	f1c1 0202 	rsble	r2, r1, #2
 8009b3c:	2201      	movgt	r2, #1
 8009b3e:	4413      	add	r3, r2
 8009b40:	e7e0      	b.n	8009b04 <_printf_float+0x1a0>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	055a      	lsls	r2, r3, #21
 8009b46:	d407      	bmi.n	8009b58 <_printf_float+0x1f4>
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	4642      	mov	r2, r8
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	d12c      	bne.n	8009bb0 <_printf_float+0x24c>
 8009b56:	e764      	b.n	8009a22 <_printf_float+0xbe>
 8009b58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b5c:	f240 80e0 	bls.w	8009d20 <_printf_float+0x3bc>
 8009b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	f7f6 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	d034      	beq.n	8009bda <_printf_float+0x276>
 8009b70:	4a37      	ldr	r2, [pc, #220]	; (8009c50 <_printf_float+0x2ec>)
 8009b72:	2301      	movs	r3, #1
 8009b74:	4631      	mov	r1, r6
 8009b76:	4628      	mov	r0, r5
 8009b78:	47b8      	blx	r7
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	f43f af51 	beq.w	8009a22 <_printf_float+0xbe>
 8009b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b84:	429a      	cmp	r2, r3
 8009b86:	db02      	blt.n	8009b8e <_printf_float+0x22a>
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	07d8      	lsls	r0, r3, #31
 8009b8c:	d510      	bpl.n	8009bb0 <_printf_float+0x24c>
 8009b8e:	ee18 3a10 	vmov	r3, s16
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af41 	beq.w	8009a22 <_printf_float+0xbe>
 8009ba0:	f04f 0800 	mov.w	r8, #0
 8009ba4:	f104 091a 	add.w	r9, r4, #26
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009baa:	3b01      	subs	r3, #1
 8009bac:	4543      	cmp	r3, r8
 8009bae:	dc09      	bgt.n	8009bc4 <_printf_float+0x260>
 8009bb0:	6823      	ldr	r3, [r4, #0]
 8009bb2:	079b      	lsls	r3, r3, #30
 8009bb4:	f100 8107 	bmi.w	8009dc6 <_printf_float+0x462>
 8009bb8:	68e0      	ldr	r0, [r4, #12]
 8009bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bbc:	4298      	cmp	r0, r3
 8009bbe:	bfb8      	it	lt
 8009bc0:	4618      	movlt	r0, r3
 8009bc2:	e730      	b.n	8009a26 <_printf_float+0xc2>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	464a      	mov	r2, r9
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af27 	beq.w	8009a22 <_printf_float+0xbe>
 8009bd4:	f108 0801 	add.w	r8, r8, #1
 8009bd8:	e7e6      	b.n	8009ba8 <_printf_float+0x244>
 8009bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc39      	bgt.n	8009c54 <_printf_float+0x2f0>
 8009be0:	4a1b      	ldr	r2, [pc, #108]	; (8009c50 <_printf_float+0x2ec>)
 8009be2:	2301      	movs	r3, #1
 8009be4:	4631      	mov	r1, r6
 8009be6:	4628      	mov	r0, r5
 8009be8:	47b8      	blx	r7
 8009bea:	3001      	adds	r0, #1
 8009bec:	f43f af19 	beq.w	8009a22 <_printf_float+0xbe>
 8009bf0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	d102      	bne.n	8009bfe <_printf_float+0x29a>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	07d9      	lsls	r1, r3, #31
 8009bfc:	d5d8      	bpl.n	8009bb0 <_printf_float+0x24c>
 8009bfe:	ee18 3a10 	vmov	r3, s16
 8009c02:	4652      	mov	r2, sl
 8009c04:	4631      	mov	r1, r6
 8009c06:	4628      	mov	r0, r5
 8009c08:	47b8      	blx	r7
 8009c0a:	3001      	adds	r0, #1
 8009c0c:	f43f af09 	beq.w	8009a22 <_printf_float+0xbe>
 8009c10:	f04f 0900 	mov.w	r9, #0
 8009c14:	f104 0a1a 	add.w	sl, r4, #26
 8009c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1a:	425b      	negs	r3, r3
 8009c1c:	454b      	cmp	r3, r9
 8009c1e:	dc01      	bgt.n	8009c24 <_printf_float+0x2c0>
 8009c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c22:	e792      	b.n	8009b4a <_printf_float+0x1e6>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4652      	mov	r2, sl
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f aef7 	beq.w	8009a22 <_printf_float+0xbe>
 8009c34:	f109 0901 	add.w	r9, r9, #1
 8009c38:	e7ee      	b.n	8009c18 <_printf_float+0x2b4>
 8009c3a:	bf00      	nop
 8009c3c:	7fefffff 	.word	0x7fefffff
 8009c40:	0800dfed 	.word	0x0800dfed
 8009c44:	0800dff1 	.word	0x0800dff1
 8009c48:	0800dff5 	.word	0x0800dff5
 8009c4c:	0800dff9 	.word	0x0800dff9
 8009c50:	0800dffd 	.word	0x0800dffd
 8009c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	bfa8      	it	ge
 8009c5c:	461a      	movge	r2, r3
 8009c5e:	2a00      	cmp	r2, #0
 8009c60:	4691      	mov	r9, r2
 8009c62:	dc37      	bgt.n	8009cd4 <_printf_float+0x370>
 8009c64:	f04f 0b00 	mov.w	fp, #0
 8009c68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c6c:	f104 021a 	add.w	r2, r4, #26
 8009c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	eba3 0309 	sub.w	r3, r3, r9
 8009c78:	455b      	cmp	r3, fp
 8009c7a:	dc33      	bgt.n	8009ce4 <_printf_float+0x380>
 8009c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c80:	429a      	cmp	r2, r3
 8009c82:	db3b      	blt.n	8009cfc <_printf_float+0x398>
 8009c84:	6823      	ldr	r3, [r4, #0]
 8009c86:	07da      	lsls	r2, r3, #31
 8009c88:	d438      	bmi.n	8009cfc <_printf_float+0x398>
 8009c8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c8e:	eba2 0903 	sub.w	r9, r2, r3
 8009c92:	9b05      	ldr	r3, [sp, #20]
 8009c94:	1ad2      	subs	r2, r2, r3
 8009c96:	4591      	cmp	r9, r2
 8009c98:	bfa8      	it	ge
 8009c9a:	4691      	movge	r9, r2
 8009c9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ca0:	dc35      	bgt.n	8009d0e <_printf_float+0x3aa>
 8009ca2:	f04f 0800 	mov.w	r8, #0
 8009ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009caa:	f104 0a1a 	add.w	sl, r4, #26
 8009cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	eba3 0309 	sub.w	r3, r3, r9
 8009cb8:	4543      	cmp	r3, r8
 8009cba:	f77f af79 	ble.w	8009bb0 <_printf_float+0x24c>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f aeaa 	beq.w	8009a22 <_printf_float+0xbe>
 8009cce:	f108 0801 	add.w	r8, r8, #1
 8009cd2:	e7ec      	b.n	8009cae <_printf_float+0x34a>
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4642      	mov	r2, r8
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	d1c0      	bne.n	8009c64 <_printf_float+0x300>
 8009ce2:	e69e      	b.n	8009a22 <_printf_float+0xbe>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	9205      	str	r2, [sp, #20]
 8009cec:	47b8      	blx	r7
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f43f ae97 	beq.w	8009a22 <_printf_float+0xbe>
 8009cf4:	9a05      	ldr	r2, [sp, #20]
 8009cf6:	f10b 0b01 	add.w	fp, fp, #1
 8009cfa:	e7b9      	b.n	8009c70 <_printf_float+0x30c>
 8009cfc:	ee18 3a10 	vmov	r3, s16
 8009d00:	4652      	mov	r2, sl
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d1be      	bne.n	8009c8a <_printf_float+0x326>
 8009d0c:	e689      	b.n	8009a22 <_printf_float+0xbe>
 8009d0e:	9a05      	ldr	r2, [sp, #20]
 8009d10:	464b      	mov	r3, r9
 8009d12:	4442      	add	r2, r8
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d1c1      	bne.n	8009ca2 <_printf_float+0x33e>
 8009d1e:	e680      	b.n	8009a22 <_printf_float+0xbe>
 8009d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d22:	2a01      	cmp	r2, #1
 8009d24:	dc01      	bgt.n	8009d2a <_printf_float+0x3c6>
 8009d26:	07db      	lsls	r3, r3, #31
 8009d28:	d53a      	bpl.n	8009da0 <_printf_float+0x43c>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f ae74 	beq.w	8009a22 <_printf_float+0xbe>
 8009d3a:	ee18 3a10 	vmov	r3, s16
 8009d3e:	4652      	mov	r2, sl
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	f43f ae6b 	beq.w	8009a22 <_printf_float+0xbe>
 8009d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d58:	f7f6 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d5c:	b9d8      	cbnz	r0, 8009d96 <_printf_float+0x432>
 8009d5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d62:	f108 0201 	add.w	r2, r8, #1
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d10e      	bne.n	8009d8e <_printf_float+0x42a>
 8009d70:	e657      	b.n	8009a22 <_printf_float+0xbe>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4652      	mov	r2, sl
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f ae50 	beq.w	8009a22 <_printf_float+0xbe>
 8009d82:	f108 0801 	add.w	r8, r8, #1
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	4543      	cmp	r3, r8
 8009d8c:	dcf1      	bgt.n	8009d72 <_printf_float+0x40e>
 8009d8e:	464b      	mov	r3, r9
 8009d90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d94:	e6da      	b.n	8009b4c <_printf_float+0x1e8>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	f104 0a1a 	add.w	sl, r4, #26
 8009d9e:	e7f2      	b.n	8009d86 <_printf_float+0x422>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4642      	mov	r2, r8
 8009da4:	e7df      	b.n	8009d66 <_printf_float+0x402>
 8009da6:	2301      	movs	r3, #1
 8009da8:	464a      	mov	r2, r9
 8009daa:	4631      	mov	r1, r6
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f ae36 	beq.w	8009a22 <_printf_float+0xbe>
 8009db6:	f108 0801 	add.w	r8, r8, #1
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dbe:	1a5b      	subs	r3, r3, r1
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	dcf0      	bgt.n	8009da6 <_printf_float+0x442>
 8009dc4:	e6f8      	b.n	8009bb8 <_printf_float+0x254>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	f104 0919 	add.w	r9, r4, #25
 8009dce:	e7f4      	b.n	8009dba <_printf_float+0x456>

08009dd0 <_printf_common>:
 8009dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	4699      	mov	r9, r3
 8009dd8:	688a      	ldr	r2, [r1, #8]
 8009dda:	690b      	ldr	r3, [r1, #16]
 8009ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	bfb8      	it	lt
 8009de4:	4613      	movlt	r3, r2
 8009de6:	6033      	str	r3, [r6, #0]
 8009de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dec:	4607      	mov	r7, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	b10a      	cbz	r2, 8009df6 <_printf_common+0x26>
 8009df2:	3301      	adds	r3, #1
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	0699      	lsls	r1, r3, #26
 8009dfa:	bf42      	ittt	mi
 8009dfc:	6833      	ldrmi	r3, [r6, #0]
 8009dfe:	3302      	addmi	r3, #2
 8009e00:	6033      	strmi	r3, [r6, #0]
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	f015 0506 	ands.w	r5, r5, #6
 8009e08:	d106      	bne.n	8009e18 <_printf_common+0x48>
 8009e0a:	f104 0a19 	add.w	sl, r4, #25
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	6832      	ldr	r2, [r6, #0]
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dc26      	bgt.n	8009e66 <_printf_common+0x96>
 8009e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e1c:	1e13      	subs	r3, r2, #0
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	bf18      	it	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	0692      	lsls	r2, r2, #26
 8009e26:	d42b      	bmi.n	8009e80 <_printf_common+0xb0>
 8009e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c0      	blx	r8
 8009e32:	3001      	adds	r0, #1
 8009e34:	d01e      	beq.n	8009e74 <_printf_common+0xa4>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	6922      	ldr	r2, [r4, #16]
 8009e3a:	f003 0306 	and.w	r3, r3, #6
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	bf02      	ittt	eq
 8009e42:	68e5      	ldreq	r5, [r4, #12]
 8009e44:	6833      	ldreq	r3, [r6, #0]
 8009e46:	1aed      	subeq	r5, r5, r3
 8009e48:	68a3      	ldr	r3, [r4, #8]
 8009e4a:	bf0c      	ite	eq
 8009e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e50:	2500      	movne	r5, #0
 8009e52:	4293      	cmp	r3, r2
 8009e54:	bfc4      	itt	gt
 8009e56:	1a9b      	subgt	r3, r3, r2
 8009e58:	18ed      	addgt	r5, r5, r3
 8009e5a:	2600      	movs	r6, #0
 8009e5c:	341a      	adds	r4, #26
 8009e5e:	42b5      	cmp	r5, r6
 8009e60:	d11a      	bne.n	8009e98 <_printf_common+0xc8>
 8009e62:	2000      	movs	r0, #0
 8009e64:	e008      	b.n	8009e78 <_printf_common+0xa8>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4652      	mov	r2, sl
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	47c0      	blx	r8
 8009e70:	3001      	adds	r0, #1
 8009e72:	d103      	bne.n	8009e7c <_printf_common+0xac>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	e7c6      	b.n	8009e0e <_printf_common+0x3e>
 8009e80:	18e1      	adds	r1, r4, r3
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	2030      	movs	r0, #48	; 0x30
 8009e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e8a:	4422      	add	r2, r4
 8009e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e94:	3302      	adds	r3, #2
 8009e96:	e7c7      	b.n	8009e28 <_printf_common+0x58>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	47c0      	blx	r8
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d0e6      	beq.n	8009e74 <_printf_common+0xa4>
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	e7d9      	b.n	8009e5e <_printf_common+0x8e>
	...

08009eac <_printf_i>:
 8009eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	7e0f      	ldrb	r7, [r1, #24]
 8009eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009eb4:	2f78      	cmp	r7, #120	; 0x78
 8009eb6:	4691      	mov	r9, r2
 8009eb8:	4680      	mov	r8, r0
 8009eba:	460c      	mov	r4, r1
 8009ebc:	469a      	mov	sl, r3
 8009ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ec2:	d807      	bhi.n	8009ed4 <_printf_i+0x28>
 8009ec4:	2f62      	cmp	r7, #98	; 0x62
 8009ec6:	d80a      	bhi.n	8009ede <_printf_i+0x32>
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	f000 80d4 	beq.w	800a076 <_printf_i+0x1ca>
 8009ece:	2f58      	cmp	r7, #88	; 0x58
 8009ed0:	f000 80c0 	beq.w	800a054 <_printf_i+0x1a8>
 8009ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009edc:	e03a      	b.n	8009f54 <_printf_i+0xa8>
 8009ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ee2:	2b15      	cmp	r3, #21
 8009ee4:	d8f6      	bhi.n	8009ed4 <_printf_i+0x28>
 8009ee6:	a101      	add	r1, pc, #4	; (adr r1, 8009eec <_printf_i+0x40>)
 8009ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	08009f59 	.word	0x08009f59
 8009ef4:	08009ed5 	.word	0x08009ed5
 8009ef8:	08009ed5 	.word	0x08009ed5
 8009efc:	08009ed5 	.word	0x08009ed5
 8009f00:	08009ed5 	.word	0x08009ed5
 8009f04:	08009f59 	.word	0x08009f59
 8009f08:	08009ed5 	.word	0x08009ed5
 8009f0c:	08009ed5 	.word	0x08009ed5
 8009f10:	08009ed5 	.word	0x08009ed5
 8009f14:	08009ed5 	.word	0x08009ed5
 8009f18:	0800a05d 	.word	0x0800a05d
 8009f1c:	08009f85 	.word	0x08009f85
 8009f20:	0800a017 	.word	0x0800a017
 8009f24:	08009ed5 	.word	0x08009ed5
 8009f28:	08009ed5 	.word	0x08009ed5
 8009f2c:	0800a07f 	.word	0x0800a07f
 8009f30:	08009ed5 	.word	0x08009ed5
 8009f34:	08009f85 	.word	0x08009f85
 8009f38:	08009ed5 	.word	0x08009ed5
 8009f3c:	08009ed5 	.word	0x08009ed5
 8009f40:	0800a01f 	.word	0x0800a01f
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	602a      	str	r2, [r5, #0]
 8009f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f54:	2301      	movs	r3, #1
 8009f56:	e09f      	b.n	800a098 <_printf_i+0x1ec>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	682b      	ldr	r3, [r5, #0]
 8009f5c:	0607      	lsls	r7, r0, #24
 8009f5e:	f103 0104 	add.w	r1, r3, #4
 8009f62:	6029      	str	r1, [r5, #0]
 8009f64:	d501      	bpl.n	8009f6a <_printf_i+0xbe>
 8009f66:	681e      	ldr	r6, [r3, #0]
 8009f68:	e003      	b.n	8009f72 <_printf_i+0xc6>
 8009f6a:	0646      	lsls	r6, r0, #25
 8009f6c:	d5fb      	bpl.n	8009f66 <_printf_i+0xba>
 8009f6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	da03      	bge.n	8009f7e <_printf_i+0xd2>
 8009f76:	232d      	movs	r3, #45	; 0x2d
 8009f78:	4276      	negs	r6, r6
 8009f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f7e:	485a      	ldr	r0, [pc, #360]	; (800a0e8 <_printf_i+0x23c>)
 8009f80:	230a      	movs	r3, #10
 8009f82:	e012      	b.n	8009faa <_printf_i+0xfe>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	1d19      	adds	r1, r3, #4
 8009f8a:	6029      	str	r1, [r5, #0]
 8009f8c:	0605      	lsls	r5, r0, #24
 8009f8e:	d501      	bpl.n	8009f94 <_printf_i+0xe8>
 8009f90:	681e      	ldr	r6, [r3, #0]
 8009f92:	e002      	b.n	8009f9a <_printf_i+0xee>
 8009f94:	0641      	lsls	r1, r0, #25
 8009f96:	d5fb      	bpl.n	8009f90 <_printf_i+0xe4>
 8009f98:	881e      	ldrh	r6, [r3, #0]
 8009f9a:	4853      	ldr	r0, [pc, #332]	; (800a0e8 <_printf_i+0x23c>)
 8009f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f9e:	bf0c      	ite	eq
 8009fa0:	2308      	moveq	r3, #8
 8009fa2:	230a      	movne	r3, #10
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009faa:	6865      	ldr	r5, [r4, #4]
 8009fac:	60a5      	str	r5, [r4, #8]
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	bfa2      	ittt	ge
 8009fb2:	6821      	ldrge	r1, [r4, #0]
 8009fb4:	f021 0104 	bicge.w	r1, r1, #4
 8009fb8:	6021      	strge	r1, [r4, #0]
 8009fba:	b90e      	cbnz	r6, 8009fc0 <_printf_i+0x114>
 8009fbc:	2d00      	cmp	r5, #0
 8009fbe:	d04b      	beq.n	800a058 <_printf_i+0x1ac>
 8009fc0:	4615      	mov	r5, r2
 8009fc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fc6:	fb03 6711 	mls	r7, r3, r1, r6
 8009fca:	5dc7      	ldrb	r7, [r0, r7]
 8009fcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fd0:	4637      	mov	r7, r6
 8009fd2:	42bb      	cmp	r3, r7
 8009fd4:	460e      	mov	r6, r1
 8009fd6:	d9f4      	bls.n	8009fc2 <_printf_i+0x116>
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d10b      	bne.n	8009ff4 <_printf_i+0x148>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	07de      	lsls	r6, r3, #31
 8009fe0:	d508      	bpl.n	8009ff4 <_printf_i+0x148>
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	6861      	ldr	r1, [r4, #4]
 8009fe6:	4299      	cmp	r1, r3
 8009fe8:	bfde      	ittt	le
 8009fea:	2330      	movle	r3, #48	; 0x30
 8009fec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ff0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ff4:	1b52      	subs	r2, r2, r5
 8009ff6:	6122      	str	r2, [r4, #16]
 8009ff8:	f8cd a000 	str.w	sl, [sp]
 8009ffc:	464b      	mov	r3, r9
 8009ffe:	aa03      	add	r2, sp, #12
 800a000:	4621      	mov	r1, r4
 800a002:	4640      	mov	r0, r8
 800a004:	f7ff fee4 	bl	8009dd0 <_printf_common>
 800a008:	3001      	adds	r0, #1
 800a00a:	d14a      	bne.n	800a0a2 <_printf_i+0x1f6>
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	b004      	add	sp, #16
 800a012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	f043 0320 	orr.w	r3, r3, #32
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	4833      	ldr	r0, [pc, #204]	; (800a0ec <_printf_i+0x240>)
 800a020:	2778      	movs	r7, #120	; 0x78
 800a022:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	6829      	ldr	r1, [r5, #0]
 800a02a:	061f      	lsls	r7, r3, #24
 800a02c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a030:	d402      	bmi.n	800a038 <_printf_i+0x18c>
 800a032:	065f      	lsls	r7, r3, #25
 800a034:	bf48      	it	mi
 800a036:	b2b6      	uxthmi	r6, r6
 800a038:	07df      	lsls	r7, r3, #31
 800a03a:	bf48      	it	mi
 800a03c:	f043 0320 	orrmi.w	r3, r3, #32
 800a040:	6029      	str	r1, [r5, #0]
 800a042:	bf48      	it	mi
 800a044:	6023      	strmi	r3, [r4, #0]
 800a046:	b91e      	cbnz	r6, 800a050 <_printf_i+0x1a4>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	f023 0320 	bic.w	r3, r3, #32
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	2310      	movs	r3, #16
 800a052:	e7a7      	b.n	8009fa4 <_printf_i+0xf8>
 800a054:	4824      	ldr	r0, [pc, #144]	; (800a0e8 <_printf_i+0x23c>)
 800a056:	e7e4      	b.n	800a022 <_printf_i+0x176>
 800a058:	4615      	mov	r5, r2
 800a05a:	e7bd      	b.n	8009fd8 <_printf_i+0x12c>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	6826      	ldr	r6, [r4, #0]
 800a060:	6961      	ldr	r1, [r4, #20]
 800a062:	1d18      	adds	r0, r3, #4
 800a064:	6028      	str	r0, [r5, #0]
 800a066:	0635      	lsls	r5, r6, #24
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	d501      	bpl.n	800a070 <_printf_i+0x1c4>
 800a06c:	6019      	str	r1, [r3, #0]
 800a06e:	e002      	b.n	800a076 <_printf_i+0x1ca>
 800a070:	0670      	lsls	r0, r6, #25
 800a072:	d5fb      	bpl.n	800a06c <_printf_i+0x1c0>
 800a074:	8019      	strh	r1, [r3, #0]
 800a076:	2300      	movs	r3, #0
 800a078:	6123      	str	r3, [r4, #16]
 800a07a:	4615      	mov	r5, r2
 800a07c:	e7bc      	b.n	8009ff8 <_printf_i+0x14c>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	1d1a      	adds	r2, r3, #4
 800a082:	602a      	str	r2, [r5, #0]
 800a084:	681d      	ldr	r5, [r3, #0]
 800a086:	6862      	ldr	r2, [r4, #4]
 800a088:	2100      	movs	r1, #0
 800a08a:	4628      	mov	r0, r5
 800a08c:	f7f6 f8a0 	bl	80001d0 <memchr>
 800a090:	b108      	cbz	r0, 800a096 <_printf_i+0x1ea>
 800a092:	1b40      	subs	r0, r0, r5
 800a094:	6060      	str	r0, [r4, #4]
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	6123      	str	r3, [r4, #16]
 800a09a:	2300      	movs	r3, #0
 800a09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a0:	e7aa      	b.n	8009ff8 <_printf_i+0x14c>
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	4649      	mov	r1, r9
 800a0a8:	4640      	mov	r0, r8
 800a0aa:	47d0      	blx	sl
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	d0ad      	beq.n	800a00c <_printf_i+0x160>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	079b      	lsls	r3, r3, #30
 800a0b4:	d413      	bmi.n	800a0de <_printf_i+0x232>
 800a0b6:	68e0      	ldr	r0, [r4, #12]
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	4298      	cmp	r0, r3
 800a0bc:	bfb8      	it	lt
 800a0be:	4618      	movlt	r0, r3
 800a0c0:	e7a6      	b.n	800a010 <_printf_i+0x164>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4632      	mov	r2, r6
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	4640      	mov	r0, r8
 800a0ca:	47d0      	blx	sl
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d09d      	beq.n	800a00c <_printf_i+0x160>
 800a0d0:	3501      	adds	r5, #1
 800a0d2:	68e3      	ldr	r3, [r4, #12]
 800a0d4:	9903      	ldr	r1, [sp, #12]
 800a0d6:	1a5b      	subs	r3, r3, r1
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dcf2      	bgt.n	800a0c2 <_printf_i+0x216>
 800a0dc:	e7eb      	b.n	800a0b6 <_printf_i+0x20a>
 800a0de:	2500      	movs	r5, #0
 800a0e0:	f104 0619 	add.w	r6, r4, #25
 800a0e4:	e7f5      	b.n	800a0d2 <_printf_i+0x226>
 800a0e6:	bf00      	nop
 800a0e8:	0800dfff 	.word	0x0800dfff
 800a0ec:	0800e010 	.word	0x0800e010

0800a0f0 <std>:
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	e9c0 3300 	strd	r3, r3, [r0]
 800a0fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0fe:	6083      	str	r3, [r0, #8]
 800a100:	8181      	strh	r1, [r0, #12]
 800a102:	6643      	str	r3, [r0, #100]	; 0x64
 800a104:	81c2      	strh	r2, [r0, #14]
 800a106:	6183      	str	r3, [r0, #24]
 800a108:	4619      	mov	r1, r3
 800a10a:	2208      	movs	r2, #8
 800a10c:	305c      	adds	r0, #92	; 0x5c
 800a10e:	f000 fa53 	bl	800a5b8 <memset>
 800a112:	4b0d      	ldr	r3, [pc, #52]	; (800a148 <std+0x58>)
 800a114:	6263      	str	r3, [r4, #36]	; 0x24
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <std+0x5c>)
 800a118:	62a3      	str	r3, [r4, #40]	; 0x28
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <std+0x60>)
 800a11c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a11e:	4b0d      	ldr	r3, [pc, #52]	; (800a154 <std+0x64>)
 800a120:	6323      	str	r3, [r4, #48]	; 0x30
 800a122:	4b0d      	ldr	r3, [pc, #52]	; (800a158 <std+0x68>)
 800a124:	6224      	str	r4, [r4, #32]
 800a126:	429c      	cmp	r4, r3
 800a128:	d006      	beq.n	800a138 <std+0x48>
 800a12a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a12e:	4294      	cmp	r4, r2
 800a130:	d002      	beq.n	800a138 <std+0x48>
 800a132:	33d0      	adds	r3, #208	; 0xd0
 800a134:	429c      	cmp	r4, r3
 800a136:	d105      	bne.n	800a144 <std+0x54>
 800a138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a140:	f000 bada 	b.w	800a6f8 <__retarget_lock_init_recursive>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800a409 	.word	0x0800a409
 800a14c:	0800a42b 	.word	0x0800a42b
 800a150:	0800a463 	.word	0x0800a463
 800a154:	0800a487 	.word	0x0800a487
 800a158:	20000d58 	.word	0x20000d58

0800a15c <stdio_exit_handler>:
 800a15c:	4a02      	ldr	r2, [pc, #8]	; (800a168 <stdio_exit_handler+0xc>)
 800a15e:	4903      	ldr	r1, [pc, #12]	; (800a16c <stdio_exit_handler+0x10>)
 800a160:	4803      	ldr	r0, [pc, #12]	; (800a170 <stdio_exit_handler+0x14>)
 800a162:	f000 b869 	b.w	800a238 <_fwalk_sglue>
 800a166:	bf00      	nop
 800a168:	20000038 	.word	0x20000038
 800a16c:	0800c351 	.word	0x0800c351
 800a170:	20000044 	.word	0x20000044

0800a174 <cleanup_stdio>:
 800a174:	6841      	ldr	r1, [r0, #4]
 800a176:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <cleanup_stdio+0x34>)
 800a178:	4299      	cmp	r1, r3
 800a17a:	b510      	push	{r4, lr}
 800a17c:	4604      	mov	r4, r0
 800a17e:	d001      	beq.n	800a184 <cleanup_stdio+0x10>
 800a180:	f002 f8e6 	bl	800c350 <_fflush_r>
 800a184:	68a1      	ldr	r1, [r4, #8]
 800a186:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <cleanup_stdio+0x38>)
 800a188:	4299      	cmp	r1, r3
 800a18a:	d002      	beq.n	800a192 <cleanup_stdio+0x1e>
 800a18c:	4620      	mov	r0, r4
 800a18e:	f002 f8df 	bl	800c350 <_fflush_r>
 800a192:	68e1      	ldr	r1, [r4, #12]
 800a194:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <cleanup_stdio+0x3c>)
 800a196:	4299      	cmp	r1, r3
 800a198:	d004      	beq.n	800a1a4 <cleanup_stdio+0x30>
 800a19a:	4620      	mov	r0, r4
 800a19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a0:	f002 b8d6 	b.w	800c350 <_fflush_r>
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000d58 	.word	0x20000d58
 800a1ac:	20000dc0 	.word	0x20000dc0
 800a1b0:	20000e28 	.word	0x20000e28

0800a1b4 <global_stdio_init.part.0>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	; (800a1e4 <global_stdio_init.part.0+0x30>)
 800a1b8:	4c0b      	ldr	r4, [pc, #44]	; (800a1e8 <global_stdio_init.part.0+0x34>)
 800a1ba:	4a0c      	ldr	r2, [pc, #48]	; (800a1ec <global_stdio_init.part.0+0x38>)
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	2104      	movs	r1, #4
 800a1c4:	f7ff ff94 	bl	800a0f0 <std>
 800a1c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2109      	movs	r1, #9
 800a1d0:	f7ff ff8e 	bl	800a0f0 <std>
 800a1d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1d8:	2202      	movs	r2, #2
 800a1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1de:	2112      	movs	r1, #18
 800a1e0:	f7ff bf86 	b.w	800a0f0 <std>
 800a1e4:	20000e90 	.word	0x20000e90
 800a1e8:	20000d58 	.word	0x20000d58
 800a1ec:	0800a15d 	.word	0x0800a15d

0800a1f0 <__sfp_lock_acquire>:
 800a1f0:	4801      	ldr	r0, [pc, #4]	; (800a1f8 <__sfp_lock_acquire+0x8>)
 800a1f2:	f000 ba82 	b.w	800a6fa <__retarget_lock_acquire_recursive>
 800a1f6:	bf00      	nop
 800a1f8:	20000e99 	.word	0x20000e99

0800a1fc <__sfp_lock_release>:
 800a1fc:	4801      	ldr	r0, [pc, #4]	; (800a204 <__sfp_lock_release+0x8>)
 800a1fe:	f000 ba7d 	b.w	800a6fc <__retarget_lock_release_recursive>
 800a202:	bf00      	nop
 800a204:	20000e99 	.word	0x20000e99

0800a208 <__sinit>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	4604      	mov	r4, r0
 800a20c:	f7ff fff0 	bl	800a1f0 <__sfp_lock_acquire>
 800a210:	6a23      	ldr	r3, [r4, #32]
 800a212:	b11b      	cbz	r3, 800a21c <__sinit+0x14>
 800a214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a218:	f7ff bff0 	b.w	800a1fc <__sfp_lock_release>
 800a21c:	4b04      	ldr	r3, [pc, #16]	; (800a230 <__sinit+0x28>)
 800a21e:	6223      	str	r3, [r4, #32]
 800a220:	4b04      	ldr	r3, [pc, #16]	; (800a234 <__sinit+0x2c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1f5      	bne.n	800a214 <__sinit+0xc>
 800a228:	f7ff ffc4 	bl	800a1b4 <global_stdio_init.part.0>
 800a22c:	e7f2      	b.n	800a214 <__sinit+0xc>
 800a22e:	bf00      	nop
 800a230:	0800a175 	.word	0x0800a175
 800a234:	20000e90 	.word	0x20000e90

0800a238 <_fwalk_sglue>:
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	4607      	mov	r7, r0
 800a23e:	4688      	mov	r8, r1
 800a240:	4614      	mov	r4, r2
 800a242:	2600      	movs	r6, #0
 800a244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a248:	f1b9 0901 	subs.w	r9, r9, #1
 800a24c:	d505      	bpl.n	800a25a <_fwalk_sglue+0x22>
 800a24e:	6824      	ldr	r4, [r4, #0]
 800a250:	2c00      	cmp	r4, #0
 800a252:	d1f7      	bne.n	800a244 <_fwalk_sglue+0xc>
 800a254:	4630      	mov	r0, r6
 800a256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25a:	89ab      	ldrh	r3, [r5, #12]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d907      	bls.n	800a270 <_fwalk_sglue+0x38>
 800a260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a264:	3301      	adds	r3, #1
 800a266:	d003      	beq.n	800a270 <_fwalk_sglue+0x38>
 800a268:	4629      	mov	r1, r5
 800a26a:	4638      	mov	r0, r7
 800a26c:	47c0      	blx	r8
 800a26e:	4306      	orrs	r6, r0
 800a270:	3568      	adds	r5, #104	; 0x68
 800a272:	e7e9      	b.n	800a248 <_fwalk_sglue+0x10>

0800a274 <iprintf>:
 800a274:	b40f      	push	{r0, r1, r2, r3}
 800a276:	b507      	push	{r0, r1, r2, lr}
 800a278:	4906      	ldr	r1, [pc, #24]	; (800a294 <iprintf+0x20>)
 800a27a:	ab04      	add	r3, sp, #16
 800a27c:	6808      	ldr	r0, [r1, #0]
 800a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a282:	6881      	ldr	r1, [r0, #8]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	f001 fec3 	bl	800c010 <_vfiprintf_r>
 800a28a:	b003      	add	sp, #12
 800a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a290:	b004      	add	sp, #16
 800a292:	4770      	bx	lr
 800a294:	20000090 	.word	0x20000090

0800a298 <putchar>:
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <putchar+0xc>)
 800a29a:	4601      	mov	r1, r0
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	6882      	ldr	r2, [r0, #8]
 800a2a0:	f002 b8e0 	b.w	800c464 <_putc_r>
 800a2a4:	20000090 	.word	0x20000090

0800a2a8 <_puts_r>:
 800a2a8:	6a03      	ldr	r3, [r0, #32]
 800a2aa:	b570      	push	{r4, r5, r6, lr}
 800a2ac:	6884      	ldr	r4, [r0, #8]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	460e      	mov	r6, r1
 800a2b2:	b90b      	cbnz	r3, 800a2b8 <_puts_r+0x10>
 800a2b4:	f7ff ffa8 	bl	800a208 <__sinit>
 800a2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ba:	07db      	lsls	r3, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_puts_r+0x22>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	0598      	lsls	r0, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_puts_r+0x22>
 800a2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c6:	f000 fa18 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	0719      	lsls	r1, r3, #28
 800a2ce:	d513      	bpl.n	800a2f8 <_puts_r+0x50>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b18b      	cbz	r3, 800a2f8 <_puts_r+0x50>
 800a2d4:	3e01      	subs	r6, #1
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	b9e9      	cbnz	r1, 800a31e <_puts_r+0x76>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da2e      	bge.n	800a344 <_puts_r+0x9c>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	210a      	movs	r1, #10
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f8cf 	bl	800a48e <__swbuf_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d007      	beq.n	800a304 <_puts_r+0x5c>
 800a2f4:	250a      	movs	r5, #10
 800a2f6:	e007      	b.n	800a308 <_puts_r+0x60>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f904 	bl	800a508 <__swsetup_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	d0e7      	beq.n	800a2d4 <_puts_r+0x2c>
 800a304:	f04f 35ff 	mov.w	r5, #4294967295
 800a308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d405      	bmi.n	800a31a <_puts_r+0x72>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	059b      	lsls	r3, r3, #22
 800a312:	d402      	bmi.n	800a31a <_puts_r+0x72>
 800a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a316:	f000 f9f1 	bl	800a6fc <__retarget_lock_release_recursive>
 800a31a:	4628      	mov	r0, r5
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	2b00      	cmp	r3, #0
 800a320:	da04      	bge.n	800a32c <_puts_r+0x84>
 800a322:	69a2      	ldr	r2, [r4, #24]
 800a324:	429a      	cmp	r2, r3
 800a326:	dc06      	bgt.n	800a336 <_puts_r+0x8e>
 800a328:	290a      	cmp	r1, #10
 800a32a:	d004      	beq.n	800a336 <_puts_r+0x8e>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	7019      	strb	r1, [r3, #0]
 800a334:	e7cf      	b.n	800a2d6 <_puts_r+0x2e>
 800a336:	4622      	mov	r2, r4
 800a338:	4628      	mov	r0, r5
 800a33a:	f000 f8a8 	bl	800a48e <__swbuf_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	d1c9      	bne.n	800a2d6 <_puts_r+0x2e>
 800a342:	e7df      	b.n	800a304 <_puts_r+0x5c>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	250a      	movs	r5, #10
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6022      	str	r2, [r4, #0]
 800a34c:	701d      	strb	r5, [r3, #0]
 800a34e:	e7db      	b.n	800a308 <_puts_r+0x60>

0800a350 <puts>:
 800a350:	4b02      	ldr	r3, [pc, #8]	; (800a35c <puts+0xc>)
 800a352:	4601      	mov	r1, r0
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	f7ff bfa7 	b.w	800a2a8 <_puts_r>
 800a35a:	bf00      	nop
 800a35c:	20000090 	.word	0x20000090

0800a360 <sniprintf>:
 800a360:	b40c      	push	{r2, r3}
 800a362:	b530      	push	{r4, r5, lr}
 800a364:	4b17      	ldr	r3, [pc, #92]	; (800a3c4 <sniprintf+0x64>)
 800a366:	1e0c      	subs	r4, r1, #0
 800a368:	681d      	ldr	r5, [r3, #0]
 800a36a:	b09d      	sub	sp, #116	; 0x74
 800a36c:	da08      	bge.n	800a380 <sniprintf+0x20>
 800a36e:	238b      	movs	r3, #139	; 0x8b
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	f04f 30ff 	mov.w	r0, #4294967295
 800a376:	b01d      	add	sp, #116	; 0x74
 800a378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a37c:	b002      	add	sp, #8
 800a37e:	4770      	bx	lr
 800a380:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a384:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a388:	bf14      	ite	ne
 800a38a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a38e:	4623      	moveq	r3, r4
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	9307      	str	r3, [sp, #28]
 800a394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a398:	9002      	str	r0, [sp, #8]
 800a39a:	9006      	str	r0, [sp, #24]
 800a39c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3a2:	ab21      	add	r3, sp, #132	; 0x84
 800a3a4:	a902      	add	r1, sp, #8
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	9301      	str	r3, [sp, #4]
 800a3aa:	f001 fd09 	bl	800bdc0 <_svfiprintf_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	bfbc      	itt	lt
 800a3b2:	238b      	movlt	r3, #139	; 0x8b
 800a3b4:	602b      	strlt	r3, [r5, #0]
 800a3b6:	2c00      	cmp	r4, #0
 800a3b8:	d0dd      	beq.n	800a376 <sniprintf+0x16>
 800a3ba:	9b02      	ldr	r3, [sp, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	701a      	strb	r2, [r3, #0]
 800a3c0:	e7d9      	b.n	800a376 <sniprintf+0x16>
 800a3c2:	bf00      	nop
 800a3c4:	20000090 	.word	0x20000090

0800a3c8 <siprintf>:
 800a3c8:	b40e      	push	{r1, r2, r3}
 800a3ca:	b500      	push	{lr}
 800a3cc:	b09c      	sub	sp, #112	; 0x70
 800a3ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a3d0:	9002      	str	r0, [sp, #8]
 800a3d2:	9006      	str	r0, [sp, #24]
 800a3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3d8:	4809      	ldr	r0, [pc, #36]	; (800a400 <siprintf+0x38>)
 800a3da:	9107      	str	r1, [sp, #28]
 800a3dc:	9104      	str	r1, [sp, #16]
 800a3de:	4909      	ldr	r1, [pc, #36]	; (800a404 <siprintf+0x3c>)
 800a3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e4:	9105      	str	r1, [sp, #20]
 800a3e6:	6800      	ldr	r0, [r0, #0]
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	a902      	add	r1, sp, #8
 800a3ec:	f001 fce8 	bl	800bdc0 <_svfiprintf_r>
 800a3f0:	9b02      	ldr	r3, [sp, #8]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	b01c      	add	sp, #112	; 0x70
 800a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3fc:	b003      	add	sp, #12
 800a3fe:	4770      	bx	lr
 800a400:	20000090 	.word	0x20000090
 800a404:	ffff0208 	.word	0xffff0208

0800a408 <__sread>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	460c      	mov	r4, r1
 800a40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a410:	f000 f924 	bl	800a65c <_read_r>
 800a414:	2800      	cmp	r0, #0
 800a416:	bfab      	itete	ge
 800a418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a41a:	89a3      	ldrhlt	r3, [r4, #12]
 800a41c:	181b      	addge	r3, r3, r0
 800a41e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a422:	bfac      	ite	ge
 800a424:	6563      	strge	r3, [r4, #84]	; 0x54
 800a426:	81a3      	strhlt	r3, [r4, #12]
 800a428:	bd10      	pop	{r4, pc}

0800a42a <__swrite>:
 800a42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a42e:	461f      	mov	r7, r3
 800a430:	898b      	ldrh	r3, [r1, #12]
 800a432:	05db      	lsls	r3, r3, #23
 800a434:	4605      	mov	r5, r0
 800a436:	460c      	mov	r4, r1
 800a438:	4616      	mov	r6, r2
 800a43a:	d505      	bpl.n	800a448 <__swrite+0x1e>
 800a43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a440:	2302      	movs	r3, #2
 800a442:	2200      	movs	r2, #0
 800a444:	f000 f8f8 	bl	800a638 <_lseek_r>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a44e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	4632      	mov	r2, r6
 800a456:	463b      	mov	r3, r7
 800a458:	4628      	mov	r0, r5
 800a45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a45e:	f000 b90f 	b.w	800a680 <_write_r>

0800a462 <__sseek>:
 800a462:	b510      	push	{r4, lr}
 800a464:	460c      	mov	r4, r1
 800a466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a46a:	f000 f8e5 	bl	800a638 <_lseek_r>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	bf15      	itete	ne
 800a474:	6560      	strne	r0, [r4, #84]	; 0x54
 800a476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a47a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a47e:	81a3      	strheq	r3, [r4, #12]
 800a480:	bf18      	it	ne
 800a482:	81a3      	strhne	r3, [r4, #12]
 800a484:	bd10      	pop	{r4, pc}

0800a486 <__sclose>:
 800a486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48a:	f000 b8c5 	b.w	800a618 <_close_r>

0800a48e <__swbuf_r>:
 800a48e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a490:	460e      	mov	r6, r1
 800a492:	4614      	mov	r4, r2
 800a494:	4605      	mov	r5, r0
 800a496:	b118      	cbz	r0, 800a4a0 <__swbuf_r+0x12>
 800a498:	6a03      	ldr	r3, [r0, #32]
 800a49a:	b90b      	cbnz	r3, 800a4a0 <__swbuf_r+0x12>
 800a49c:	f7ff feb4 	bl	800a208 <__sinit>
 800a4a0:	69a3      	ldr	r3, [r4, #24]
 800a4a2:	60a3      	str	r3, [r4, #8]
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	071a      	lsls	r2, r3, #28
 800a4a8:	d525      	bpl.n	800a4f6 <__swbuf_r+0x68>
 800a4aa:	6923      	ldr	r3, [r4, #16]
 800a4ac:	b31b      	cbz	r3, 800a4f6 <__swbuf_r+0x68>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	6922      	ldr	r2, [r4, #16]
 800a4b2:	1a98      	subs	r0, r3, r2
 800a4b4:	6963      	ldr	r3, [r4, #20]
 800a4b6:	b2f6      	uxtb	r6, r6
 800a4b8:	4283      	cmp	r3, r0
 800a4ba:	4637      	mov	r7, r6
 800a4bc:	dc04      	bgt.n	800a4c8 <__swbuf_r+0x3a>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	f001 ff45 	bl	800c350 <_fflush_r>
 800a4c6:	b9e0      	cbnz	r0, 800a502 <__swbuf_r+0x74>
 800a4c8:	68a3      	ldr	r3, [r4, #8]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	60a3      	str	r3, [r4, #8]
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	1c5a      	adds	r2, r3, #1
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	701e      	strb	r6, [r3, #0]
 800a4d6:	6962      	ldr	r2, [r4, #20]
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d004      	beq.n	800a4e8 <__swbuf_r+0x5a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	07db      	lsls	r3, r3, #31
 800a4e2:	d506      	bpl.n	800a4f2 <__swbuf_r+0x64>
 800a4e4:	2e0a      	cmp	r6, #10
 800a4e6:	d104      	bne.n	800a4f2 <__swbuf_r+0x64>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f001 ff30 	bl	800c350 <_fflush_r>
 800a4f0:	b938      	cbnz	r0, 800a502 <__swbuf_r+0x74>
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f000 f805 	bl	800a508 <__swsetup_r>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d0d5      	beq.n	800a4ae <__swbuf_r+0x20>
 800a502:	f04f 37ff 	mov.w	r7, #4294967295
 800a506:	e7f4      	b.n	800a4f2 <__swbuf_r+0x64>

0800a508 <__swsetup_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <__swsetup_r+0xac>)
 800a50c:	4605      	mov	r5, r0
 800a50e:	6818      	ldr	r0, [r3, #0]
 800a510:	460c      	mov	r4, r1
 800a512:	b118      	cbz	r0, 800a51c <__swsetup_r+0x14>
 800a514:	6a03      	ldr	r3, [r0, #32]
 800a516:	b90b      	cbnz	r3, 800a51c <__swsetup_r+0x14>
 800a518:	f7ff fe76 	bl	800a208 <__sinit>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a522:	0718      	lsls	r0, r3, #28
 800a524:	d422      	bmi.n	800a56c <__swsetup_r+0x64>
 800a526:	06d9      	lsls	r1, r3, #27
 800a528:	d407      	bmi.n	800a53a <__swsetup_r+0x32>
 800a52a:	2309      	movs	r3, #9
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	e034      	b.n	800a5a4 <__swsetup_r+0x9c>
 800a53a:	0758      	lsls	r0, r3, #29
 800a53c:	d512      	bpl.n	800a564 <__swsetup_r+0x5c>
 800a53e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a540:	b141      	cbz	r1, 800a554 <__swsetup_r+0x4c>
 800a542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a546:	4299      	cmp	r1, r3
 800a548:	d002      	beq.n	800a550 <__swsetup_r+0x48>
 800a54a:	4628      	mov	r0, r5
 800a54c:	f000 ff62 	bl	800b414 <_free_r>
 800a550:	2300      	movs	r3, #0
 800a552:	6363      	str	r3, [r4, #52]	; 0x34
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a55a:	81a3      	strh	r3, [r4, #12]
 800a55c:	2300      	movs	r3, #0
 800a55e:	6063      	str	r3, [r4, #4]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f043 0308 	orr.w	r3, r3, #8
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	b94b      	cbnz	r3, 800a584 <__swsetup_r+0x7c>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a57a:	d003      	beq.n	800a584 <__swsetup_r+0x7c>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f001 ff34 	bl	800c3ec <__smakebuf_r>
 800a584:	89a0      	ldrh	r0, [r4, #12]
 800a586:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a58a:	f010 0301 	ands.w	r3, r0, #1
 800a58e:	d00a      	beq.n	800a5a6 <__swsetup_r+0x9e>
 800a590:	2300      	movs	r3, #0
 800a592:	60a3      	str	r3, [r4, #8]
 800a594:	6963      	ldr	r3, [r4, #20]
 800a596:	425b      	negs	r3, r3
 800a598:	61a3      	str	r3, [r4, #24]
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	b943      	cbnz	r3, 800a5b0 <__swsetup_r+0xa8>
 800a59e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5a2:	d1c4      	bne.n	800a52e <__swsetup_r+0x26>
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	0781      	lsls	r1, r0, #30
 800a5a8:	bf58      	it	pl
 800a5aa:	6963      	ldrpl	r3, [r4, #20]
 800a5ac:	60a3      	str	r3, [r4, #8]
 800a5ae:	e7f4      	b.n	800a59a <__swsetup_r+0x92>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7f7      	b.n	800a5a4 <__swsetup_r+0x9c>
 800a5b4:	20000090 	.word	0x20000090

0800a5b8 <memset>:
 800a5b8:	4402      	add	r2, r0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d100      	bne.n	800a5c2 <memset+0xa>
 800a5c0:	4770      	bx	lr
 800a5c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a5c6:	e7f9      	b.n	800a5bc <memset+0x4>

0800a5c8 <strchr>:
 800a5c8:	b2c9      	uxtb	r1, r1
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d0:	b11a      	cbz	r2, 800a5da <strchr+0x12>
 800a5d2:	428a      	cmp	r2, r1
 800a5d4:	d1f9      	bne.n	800a5ca <strchr+0x2>
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	4770      	bx	lr
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	bf18      	it	ne
 800a5de:	2300      	movne	r3, #0
 800a5e0:	e7f9      	b.n	800a5d6 <strchr+0xe>

0800a5e2 <strstr>:
 800a5e2:	780a      	ldrb	r2, [r1, #0]
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	b96a      	cbnz	r2, 800a604 <strstr+0x22>
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d109      	bne.n	800a602 <strstr+0x20>
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f6      	beq.n	800a5e8 <strstr+0x6>
 800a5fa:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a5fe:	429e      	cmp	r6, r3
 800a600:	d0f7      	beq.n	800a5f2 <strstr+0x10>
 800a602:	3001      	adds	r0, #1
 800a604:	7803      	ldrb	r3, [r0, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1ef      	bne.n	800a5ea <strstr+0x8>
 800a60a:	4618      	mov	r0, r3
 800a60c:	e7ec      	b.n	800a5e8 <strstr+0x6>
	...

0800a610 <_localeconv_r>:
 800a610:	4800      	ldr	r0, [pc, #0]	; (800a614 <_localeconv_r+0x4>)
 800a612:	4770      	bx	lr
 800a614:	20000184 	.word	0x20000184

0800a618 <_close_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	; (800a634 <_close_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7fa fd57 	bl	80050d6 <_close>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_close_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_close_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20000e94 	.word	0x20000e94

0800a638 <_lseek_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_lseek_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7fa fd6c 	bl	8005124 <_lseek>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_lseek_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_lseek_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20000e94 	.word	0x20000e94

0800a65c <_read_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d07      	ldr	r5, [pc, #28]	; (800a67c <_read_r+0x20>)
 800a660:	4604      	mov	r4, r0
 800a662:	4608      	mov	r0, r1
 800a664:	4611      	mov	r1, r2
 800a666:	2200      	movs	r2, #0
 800a668:	602a      	str	r2, [r5, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	f7fa fcfa 	bl	8005064 <_read>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_read_r+0x1e>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_read_r+0x1e>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20000e94 	.word	0x20000e94

0800a680 <_write_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d07      	ldr	r5, [pc, #28]	; (800a6a0 <_write_r+0x20>)
 800a684:	4604      	mov	r4, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7fa fd05 	bl	800509e <_write>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_write_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_write_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000e94 	.word	0x20000e94

0800a6a4 <__errno>:
 800a6a4:	4b01      	ldr	r3, [pc, #4]	; (800a6ac <__errno+0x8>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	20000090 	.word	0x20000090

0800a6b0 <__libc_init_array>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4d0d      	ldr	r5, [pc, #52]	; (800a6e8 <__libc_init_array+0x38>)
 800a6b4:	4c0d      	ldr	r4, [pc, #52]	; (800a6ec <__libc_init_array+0x3c>)
 800a6b6:	1b64      	subs	r4, r4, r5
 800a6b8:	10a4      	asrs	r4, r4, #2
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	42a6      	cmp	r6, r4
 800a6be:	d109      	bne.n	800a6d4 <__libc_init_array+0x24>
 800a6c0:	4d0b      	ldr	r5, [pc, #44]	; (800a6f0 <__libc_init_array+0x40>)
 800a6c2:	4c0c      	ldr	r4, [pc, #48]	; (800a6f4 <__libc_init_array+0x44>)
 800a6c4:	f002 ff70 	bl	800d5a8 <_init>
 800a6c8:	1b64      	subs	r4, r4, r5
 800a6ca:	10a4      	asrs	r4, r4, #2
 800a6cc:	2600      	movs	r6, #0
 800a6ce:	42a6      	cmp	r6, r4
 800a6d0:	d105      	bne.n	800a6de <__libc_init_array+0x2e>
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}
 800a6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d8:	4798      	blx	r3
 800a6da:	3601      	adds	r6, #1
 800a6dc:	e7ee      	b.n	800a6bc <__libc_init_array+0xc>
 800a6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e2:	4798      	blx	r3
 800a6e4:	3601      	adds	r6, #1
 800a6e6:	e7f2      	b.n	800a6ce <__libc_init_array+0x1e>
 800a6e8:	0800e298 	.word	0x0800e298
 800a6ec:	0800e298 	.word	0x0800e298
 800a6f0:	0800e298 	.word	0x0800e298
 800a6f4:	0800e29c 	.word	0x0800e29c

0800a6f8 <__retarget_lock_init_recursive>:
 800a6f8:	4770      	bx	lr

0800a6fa <__retarget_lock_acquire_recursive>:
 800a6fa:	4770      	bx	lr

0800a6fc <__retarget_lock_release_recursive>:
 800a6fc:	4770      	bx	lr

0800a6fe <memcpy>:
 800a6fe:	440a      	add	r2, r1
 800a700:	4291      	cmp	r1, r2
 800a702:	f100 33ff 	add.w	r3, r0, #4294967295
 800a706:	d100      	bne.n	800a70a <memcpy+0xc>
 800a708:	4770      	bx	lr
 800a70a:	b510      	push	{r4, lr}
 800a70c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a710:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a714:	4291      	cmp	r1, r2
 800a716:	d1f9      	bne.n	800a70c <memcpy+0xe>
 800a718:	bd10      	pop	{r4, pc}

0800a71a <quorem>:
 800a71a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71e:	6903      	ldr	r3, [r0, #16]
 800a720:	690c      	ldr	r4, [r1, #16]
 800a722:	42a3      	cmp	r3, r4
 800a724:	4607      	mov	r7, r0
 800a726:	db7e      	blt.n	800a826 <quorem+0x10c>
 800a728:	3c01      	subs	r4, #1
 800a72a:	f101 0814 	add.w	r8, r1, #20
 800a72e:	f100 0514 	add.w	r5, r0, #20
 800a732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a73c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a740:	3301      	adds	r3, #1
 800a742:	429a      	cmp	r2, r3
 800a744:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a748:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a74c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a750:	d331      	bcc.n	800a7b6 <quorem+0x9c>
 800a752:	f04f 0e00 	mov.w	lr, #0
 800a756:	4640      	mov	r0, r8
 800a758:	46ac      	mov	ip, r5
 800a75a:	46f2      	mov	sl, lr
 800a75c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a760:	b293      	uxth	r3, r2
 800a762:	fb06 e303 	mla	r3, r6, r3, lr
 800a766:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a76a:	0c1a      	lsrs	r2, r3, #16
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ebaa 0303 	sub.w	r3, sl, r3
 800a772:	f8dc a000 	ldr.w	sl, [ip]
 800a776:	fa13 f38a 	uxtah	r3, r3, sl
 800a77a:	fb06 220e 	mla	r2, r6, lr, r2
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	9b00      	ldr	r3, [sp, #0]
 800a782:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a786:	b292      	uxth	r2, r2
 800a788:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a78c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a790:	f8bd 3000 	ldrh.w	r3, [sp]
 800a794:	4581      	cmp	r9, r0
 800a796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a79a:	f84c 3b04 	str.w	r3, [ip], #4
 800a79e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7a2:	d2db      	bcs.n	800a75c <quorem+0x42>
 800a7a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7a8:	b92b      	cbnz	r3, 800a7b6 <quorem+0x9c>
 800a7aa:	9b01      	ldr	r3, [sp, #4]
 800a7ac:	3b04      	subs	r3, #4
 800a7ae:	429d      	cmp	r5, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	d32c      	bcc.n	800a80e <quorem+0xf4>
 800a7b4:	613c      	str	r4, [r7, #16]
 800a7b6:	4638      	mov	r0, r7
 800a7b8:	f001 f9a8 	bl	800bb0c <__mcmp>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	db22      	blt.n	800a806 <quorem+0xec>
 800a7c0:	3601      	adds	r6, #1
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7ca:	f8d1 c000 	ldr.w	ip, [r1]
 800a7ce:	b293      	uxth	r3, r2
 800a7d0:	1ac3      	subs	r3, r0, r3
 800a7d2:	0c12      	lsrs	r2, r2, #16
 800a7d4:	fa13 f38c 	uxtah	r3, r3, ip
 800a7d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a7dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7e6:	45c1      	cmp	r9, r8
 800a7e8:	f841 3b04 	str.w	r3, [r1], #4
 800a7ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7f0:	d2e9      	bcs.n	800a7c6 <quorem+0xac>
 800a7f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7fa:	b922      	cbnz	r2, 800a806 <quorem+0xec>
 800a7fc:	3b04      	subs	r3, #4
 800a7fe:	429d      	cmp	r5, r3
 800a800:	461a      	mov	r2, r3
 800a802:	d30a      	bcc.n	800a81a <quorem+0x100>
 800a804:	613c      	str	r4, [r7, #16]
 800a806:	4630      	mov	r0, r6
 800a808:	b003      	add	sp, #12
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	3b04      	subs	r3, #4
 800a812:	2a00      	cmp	r2, #0
 800a814:	d1ce      	bne.n	800a7b4 <quorem+0x9a>
 800a816:	3c01      	subs	r4, #1
 800a818:	e7c9      	b.n	800a7ae <quorem+0x94>
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	3b04      	subs	r3, #4
 800a81e:	2a00      	cmp	r2, #0
 800a820:	d1f0      	bne.n	800a804 <quorem+0xea>
 800a822:	3c01      	subs	r4, #1
 800a824:	e7eb      	b.n	800a7fe <quorem+0xe4>
 800a826:	2000      	movs	r0, #0
 800a828:	e7ee      	b.n	800a808 <quorem+0xee>
 800a82a:	0000      	movs	r0, r0
 800a82c:	0000      	movs	r0, r0
	...

0800a830 <_dtoa_r>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	ed2d 8b04 	vpush	{d8-d9}
 800a838:	69c5      	ldr	r5, [r0, #28]
 800a83a:	b093      	sub	sp, #76	; 0x4c
 800a83c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a840:	ec57 6b10 	vmov	r6, r7, d0
 800a844:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a848:	9107      	str	r1, [sp, #28]
 800a84a:	4604      	mov	r4, r0
 800a84c:	920a      	str	r2, [sp, #40]	; 0x28
 800a84e:	930d      	str	r3, [sp, #52]	; 0x34
 800a850:	b975      	cbnz	r5, 800a870 <_dtoa_r+0x40>
 800a852:	2010      	movs	r0, #16
 800a854:	f000 fe2a 	bl	800b4ac <malloc>
 800a858:	4602      	mov	r2, r0
 800a85a:	61e0      	str	r0, [r4, #28]
 800a85c:	b920      	cbnz	r0, 800a868 <_dtoa_r+0x38>
 800a85e:	4bae      	ldr	r3, [pc, #696]	; (800ab18 <_dtoa_r+0x2e8>)
 800a860:	21ef      	movs	r1, #239	; 0xef
 800a862:	48ae      	ldr	r0, [pc, #696]	; (800ab1c <_dtoa_r+0x2ec>)
 800a864:	f001 fe7e 	bl	800c564 <__assert_func>
 800a868:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a86c:	6005      	str	r5, [r0, #0]
 800a86e:	60c5      	str	r5, [r0, #12]
 800a870:	69e3      	ldr	r3, [r4, #28]
 800a872:	6819      	ldr	r1, [r3, #0]
 800a874:	b151      	cbz	r1, 800a88c <_dtoa_r+0x5c>
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	604a      	str	r2, [r1, #4]
 800a87a:	2301      	movs	r3, #1
 800a87c:	4093      	lsls	r3, r2
 800a87e:	608b      	str	r3, [r1, #8]
 800a880:	4620      	mov	r0, r4
 800a882:	f000 ff07 	bl	800b694 <_Bfree>
 800a886:	69e3      	ldr	r3, [r4, #28]
 800a888:	2200      	movs	r2, #0
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	1e3b      	subs	r3, r7, #0
 800a88e:	bfbb      	ittet	lt
 800a890:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a894:	9303      	strlt	r3, [sp, #12]
 800a896:	2300      	movge	r3, #0
 800a898:	2201      	movlt	r2, #1
 800a89a:	bfac      	ite	ge
 800a89c:	f8c8 3000 	strge.w	r3, [r8]
 800a8a0:	f8c8 2000 	strlt.w	r2, [r8]
 800a8a4:	4b9e      	ldr	r3, [pc, #632]	; (800ab20 <_dtoa_r+0x2f0>)
 800a8a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8aa:	ea33 0308 	bics.w	r3, r3, r8
 800a8ae:	d11b      	bne.n	800a8e8 <_dtoa_r+0xb8>
 800a8b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a8bc:	4333      	orrs	r3, r6
 800a8be:	f000 8593 	beq.w	800b3e8 <_dtoa_r+0xbb8>
 800a8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c4:	b963      	cbnz	r3, 800a8e0 <_dtoa_r+0xb0>
 800a8c6:	4b97      	ldr	r3, [pc, #604]	; (800ab24 <_dtoa_r+0x2f4>)
 800a8c8:	e027      	b.n	800a91a <_dtoa_r+0xea>
 800a8ca:	4b97      	ldr	r3, [pc, #604]	; (800ab28 <_dtoa_r+0x2f8>)
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	9800      	ldr	r0, [sp, #0]
 800a8d6:	b013      	add	sp, #76	; 0x4c
 800a8d8:	ecbd 8b04 	vpop	{d8-d9}
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	4b90      	ldr	r3, [pc, #576]	; (800ab24 <_dtoa_r+0x2f4>)
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	3303      	adds	r3, #3
 800a8e6:	e7f3      	b.n	800a8d0 <_dtoa_r+0xa0>
 800a8e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	ec51 0b17 	vmov	r0, r1, d7
 800a8f2:	eeb0 8a47 	vmov.f32	s16, s14
 800a8f6:	eef0 8a67 	vmov.f32	s17, s15
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f7f6 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a900:	4681      	mov	r9, r0
 800a902:	b160      	cbz	r0, 800a91e <_dtoa_r+0xee>
 800a904:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a906:	2301      	movs	r3, #1
 800a908:	6013      	str	r3, [r2, #0]
 800a90a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 8568 	beq.w	800b3e2 <_dtoa_r+0xbb2>
 800a912:	4b86      	ldr	r3, [pc, #536]	; (800ab2c <_dtoa_r+0x2fc>)
 800a914:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	3b01      	subs	r3, #1
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	e7da      	b.n	800a8d4 <_dtoa_r+0xa4>
 800a91e:	aa10      	add	r2, sp, #64	; 0x40
 800a920:	a911      	add	r1, sp, #68	; 0x44
 800a922:	4620      	mov	r0, r4
 800a924:	eeb0 0a48 	vmov.f32	s0, s16
 800a928:	eef0 0a68 	vmov.f32	s1, s17
 800a92c:	f001 f994 	bl	800bc58 <__d2b>
 800a930:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a934:	4682      	mov	sl, r0
 800a936:	2d00      	cmp	r5, #0
 800a938:	d07f      	beq.n	800aa3a <_dtoa_r+0x20a>
 800a93a:	ee18 3a90 	vmov	r3, s17
 800a93e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a942:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a946:	ec51 0b18 	vmov	r0, r1, d8
 800a94a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a952:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a956:	4619      	mov	r1, r3
 800a958:	2200      	movs	r2, #0
 800a95a:	4b75      	ldr	r3, [pc, #468]	; (800ab30 <_dtoa_r+0x300>)
 800a95c:	f7f5 fc94 	bl	8000288 <__aeabi_dsub>
 800a960:	a367      	add	r3, pc, #412	; (adr r3, 800ab00 <_dtoa_r+0x2d0>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fe47 	bl	80005f8 <__aeabi_dmul>
 800a96a:	a367      	add	r3, pc, #412	; (adr r3, 800ab08 <_dtoa_r+0x2d8>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	f7f5 fc8c 	bl	800028c <__adddf3>
 800a974:	4606      	mov	r6, r0
 800a976:	4628      	mov	r0, r5
 800a978:	460f      	mov	r7, r1
 800a97a:	f7f5 fdd3 	bl	8000524 <__aeabi_i2d>
 800a97e:	a364      	add	r3, pc, #400	; (adr r3, 800ab10 <_dtoa_r+0x2e0>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fe38 	bl	80005f8 <__aeabi_dmul>
 800a988:	4602      	mov	r2, r0
 800a98a:	460b      	mov	r3, r1
 800a98c:	4630      	mov	r0, r6
 800a98e:	4639      	mov	r1, r7
 800a990:	f7f5 fc7c 	bl	800028c <__adddf3>
 800a994:	4606      	mov	r6, r0
 800a996:	460f      	mov	r7, r1
 800a998:	f7f6 f8de 	bl	8000b58 <__aeabi_d2iz>
 800a99c:	2200      	movs	r2, #0
 800a99e:	4683      	mov	fp, r0
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f6 f899 	bl	8000adc <__aeabi_dcmplt>
 800a9aa:	b148      	cbz	r0, 800a9c0 <_dtoa_r+0x190>
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	f7f5 fdb9 	bl	8000524 <__aeabi_i2d>
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	f7f6 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ba:	b908      	cbnz	r0, 800a9c0 <_dtoa_r+0x190>
 800a9bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9c0:	f1bb 0f16 	cmp.w	fp, #22
 800a9c4:	d857      	bhi.n	800aa76 <_dtoa_r+0x246>
 800a9c6:	4b5b      	ldr	r3, [pc, #364]	; (800ab34 <_dtoa_r+0x304>)
 800a9c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	ec51 0b18 	vmov	r0, r1, d8
 800a9d4:	f7f6 f882 	bl	8000adc <__aeabi_dcmplt>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d04e      	beq.n	800aa7a <_dtoa_r+0x24a>
 800a9dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9e6:	1b5b      	subs	r3, r3, r5
 800a9e8:	1e5a      	subs	r2, r3, #1
 800a9ea:	bf45      	ittet	mi
 800a9ec:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9f0:	9305      	strmi	r3, [sp, #20]
 800a9f2:	2300      	movpl	r3, #0
 800a9f4:	2300      	movmi	r3, #0
 800a9f6:	9206      	str	r2, [sp, #24]
 800a9f8:	bf54      	ite	pl
 800a9fa:	9305      	strpl	r3, [sp, #20]
 800a9fc:	9306      	strmi	r3, [sp, #24]
 800a9fe:	f1bb 0f00 	cmp.w	fp, #0
 800aa02:	db3c      	blt.n	800aa7e <_dtoa_r+0x24e>
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aa0a:	445b      	add	r3, fp
 800aa0c:	9306      	str	r3, [sp, #24]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	9b07      	ldr	r3, [sp, #28]
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	d868      	bhi.n	800aaea <_dtoa_r+0x2ba>
 800aa18:	2b05      	cmp	r3, #5
 800aa1a:	bfc4      	itt	gt
 800aa1c:	3b04      	subgt	r3, #4
 800aa1e:	9307      	strgt	r3, [sp, #28]
 800aa20:	9b07      	ldr	r3, [sp, #28]
 800aa22:	f1a3 0302 	sub.w	r3, r3, #2
 800aa26:	bfcc      	ite	gt
 800aa28:	2500      	movgt	r5, #0
 800aa2a:	2501      	movle	r5, #1
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	f200 8085 	bhi.w	800ab3c <_dtoa_r+0x30c>
 800aa32:	e8df f003 	tbb	[pc, r3]
 800aa36:	3b2e      	.short	0x3b2e
 800aa38:	5839      	.short	0x5839
 800aa3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa3e:	441d      	add	r5, r3
 800aa40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa44:	2b20      	cmp	r3, #32
 800aa46:	bfc1      	itttt	gt
 800aa48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa4c:	fa08 f803 	lslgt.w	r8, r8, r3
 800aa50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aa54:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aa58:	bfd6      	itet	le
 800aa5a:	f1c3 0320 	rsble	r3, r3, #32
 800aa5e:	ea48 0003 	orrgt.w	r0, r8, r3
 800aa62:	fa06 f003 	lslle.w	r0, r6, r3
 800aa66:	f7f5 fd4d 	bl	8000504 <__aeabi_ui2d>
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aa70:	3d01      	subs	r5, #1
 800aa72:	920e      	str	r2, [sp, #56]	; 0x38
 800aa74:	e76f      	b.n	800a956 <_dtoa_r+0x126>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e7b3      	b.n	800a9e2 <_dtoa_r+0x1b2>
 800aa7a:	900c      	str	r0, [sp, #48]	; 0x30
 800aa7c:	e7b2      	b.n	800a9e4 <_dtoa_r+0x1b4>
 800aa7e:	9b05      	ldr	r3, [sp, #20]
 800aa80:	eba3 030b 	sub.w	r3, r3, fp
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f1cb 0300 	rsb	r3, fp, #0
 800aa8a:	9308      	str	r3, [sp, #32]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa90:	e7bf      	b.n	800aa12 <_dtoa_r+0x1e2>
 800aa92:	2300      	movs	r3, #0
 800aa94:	9309      	str	r3, [sp, #36]	; 0x24
 800aa96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc52      	bgt.n	800ab42 <_dtoa_r+0x312>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	920a      	str	r2, [sp, #40]	; 0x28
 800aaa6:	e00b      	b.n	800aac0 <_dtoa_r+0x290>
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e7f3      	b.n	800aa94 <_dtoa_r+0x264>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9309      	str	r3, [sp, #36]	; 0x24
 800aab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab2:	445b      	add	r3, fp
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	3301      	adds	r3, #1
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	9304      	str	r3, [sp, #16]
 800aabc:	bfb8      	it	lt
 800aabe:	2301      	movlt	r3, #1
 800aac0:	69e0      	ldr	r0, [r4, #28]
 800aac2:	2100      	movs	r1, #0
 800aac4:	2204      	movs	r2, #4
 800aac6:	f102 0614 	add.w	r6, r2, #20
 800aaca:	429e      	cmp	r6, r3
 800aacc:	d93d      	bls.n	800ab4a <_dtoa_r+0x31a>
 800aace:	6041      	str	r1, [r0, #4]
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fd9f 	bl	800b614 <_Balloc>
 800aad6:	9000      	str	r0, [sp, #0]
 800aad8:	2800      	cmp	r0, #0
 800aada:	d139      	bne.n	800ab50 <_dtoa_r+0x320>
 800aadc:	4b16      	ldr	r3, [pc, #88]	; (800ab38 <_dtoa_r+0x308>)
 800aade:	4602      	mov	r2, r0
 800aae0:	f240 11af 	movw	r1, #431	; 0x1af
 800aae4:	e6bd      	b.n	800a862 <_dtoa_r+0x32>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e7e1      	b.n	800aaae <_dtoa_r+0x27e>
 800aaea:	2501      	movs	r5, #1
 800aaec:	2300      	movs	r3, #0
 800aaee:	9307      	str	r3, [sp, #28]
 800aaf0:	9509      	str	r5, [sp, #36]	; 0x24
 800aaf2:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf6:	9301      	str	r3, [sp, #4]
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	2200      	movs	r2, #0
 800aafc:	2312      	movs	r3, #18
 800aafe:	e7d1      	b.n	800aaa4 <_dtoa_r+0x274>
 800ab00:	636f4361 	.word	0x636f4361
 800ab04:	3fd287a7 	.word	0x3fd287a7
 800ab08:	8b60c8b3 	.word	0x8b60c8b3
 800ab0c:	3fc68a28 	.word	0x3fc68a28
 800ab10:	509f79fb 	.word	0x509f79fb
 800ab14:	3fd34413 	.word	0x3fd34413
 800ab18:	0800e02e 	.word	0x0800e02e
 800ab1c:	0800e045 	.word	0x0800e045
 800ab20:	7ff00000 	.word	0x7ff00000
 800ab24:	0800e02a 	.word	0x0800e02a
 800ab28:	0800e021 	.word	0x0800e021
 800ab2c:	0800dffe 	.word	0x0800dffe
 800ab30:	3ff80000 	.word	0x3ff80000
 800ab34:	0800e130 	.word	0x0800e130
 800ab38:	0800e09d 	.word	0x0800e09d
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab40:	e7d7      	b.n	800aaf2 <_dtoa_r+0x2c2>
 800ab42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab44:	9301      	str	r3, [sp, #4]
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	e7ba      	b.n	800aac0 <_dtoa_r+0x290>
 800ab4a:	3101      	adds	r1, #1
 800ab4c:	0052      	lsls	r2, r2, #1
 800ab4e:	e7ba      	b.n	800aac6 <_dtoa_r+0x296>
 800ab50:	69e3      	ldr	r3, [r4, #28]
 800ab52:	9a00      	ldr	r2, [sp, #0]
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	2b0e      	cmp	r3, #14
 800ab5a:	f200 80a8 	bhi.w	800acae <_dtoa_r+0x47e>
 800ab5e:	2d00      	cmp	r5, #0
 800ab60:	f000 80a5 	beq.w	800acae <_dtoa_r+0x47e>
 800ab64:	f1bb 0f00 	cmp.w	fp, #0
 800ab68:	dd38      	ble.n	800abdc <_dtoa_r+0x3ac>
 800ab6a:	4bc0      	ldr	r3, [pc, #768]	; (800ae6c <_dtoa_r+0x63c>)
 800ab6c:	f00b 020f 	and.w	r2, fp, #15
 800ab70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab74:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab78:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ab7c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ab80:	d019      	beq.n	800abb6 <_dtoa_r+0x386>
 800ab82:	4bbb      	ldr	r3, [pc, #748]	; (800ae70 <_dtoa_r+0x640>)
 800ab84:	ec51 0b18 	vmov	r0, r1, d8
 800ab88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab8c:	f7f5 fe5e 	bl	800084c <__aeabi_ddiv>
 800ab90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab94:	f008 080f 	and.w	r8, r8, #15
 800ab98:	2503      	movs	r5, #3
 800ab9a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ae70 <_dtoa_r+0x640>
 800ab9e:	f1b8 0f00 	cmp.w	r8, #0
 800aba2:	d10a      	bne.n	800abba <_dtoa_r+0x38a>
 800aba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aba8:	4632      	mov	r2, r6
 800abaa:	463b      	mov	r3, r7
 800abac:	f7f5 fe4e 	bl	800084c <__aeabi_ddiv>
 800abb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb4:	e02b      	b.n	800ac0e <_dtoa_r+0x3de>
 800abb6:	2502      	movs	r5, #2
 800abb8:	e7ef      	b.n	800ab9a <_dtoa_r+0x36a>
 800abba:	f018 0f01 	tst.w	r8, #1
 800abbe:	d008      	beq.n	800abd2 <_dtoa_r+0x3a2>
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800abc8:	f7f5 fd16 	bl	80005f8 <__aeabi_dmul>
 800abcc:	3501      	adds	r5, #1
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abd6:	f109 0908 	add.w	r9, r9, #8
 800abda:	e7e0      	b.n	800ab9e <_dtoa_r+0x36e>
 800abdc:	f000 809f 	beq.w	800ad1e <_dtoa_r+0x4ee>
 800abe0:	f1cb 0600 	rsb	r6, fp, #0
 800abe4:	4ba1      	ldr	r3, [pc, #644]	; (800ae6c <_dtoa_r+0x63c>)
 800abe6:	4fa2      	ldr	r7, [pc, #648]	; (800ae70 <_dtoa_r+0x640>)
 800abe8:	f006 020f 	and.w	r2, r6, #15
 800abec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	ec51 0b18 	vmov	r0, r1, d8
 800abf8:	f7f5 fcfe 	bl	80005f8 <__aeabi_dmul>
 800abfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac00:	1136      	asrs	r6, r6, #4
 800ac02:	2300      	movs	r3, #0
 800ac04:	2502      	movs	r5, #2
 800ac06:	2e00      	cmp	r6, #0
 800ac08:	d17e      	bne.n	800ad08 <_dtoa_r+0x4d8>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d1d0      	bne.n	800abb0 <_dtoa_r+0x380>
 800ac0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac10:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 8084 	beq.w	800ad22 <_dtoa_r+0x4f2>
 800ac1a:	4b96      	ldr	r3, [pc, #600]	; (800ae74 <_dtoa_r+0x644>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 ff5b 	bl	8000adc <__aeabi_dcmplt>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d07b      	beq.n	800ad22 <_dtoa_r+0x4f2>
 800ac2a:	9b04      	ldr	r3, [sp, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d078      	beq.n	800ad22 <_dtoa_r+0x4f2>
 800ac30:	9b01      	ldr	r3, [sp, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	dd39      	ble.n	800acaa <_dtoa_r+0x47a>
 800ac36:	4b90      	ldr	r3, [pc, #576]	; (800ae78 <_dtoa_r+0x648>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	f7f5 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ac42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac46:	9e01      	ldr	r6, [sp, #4]
 800ac48:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ac52:	4628      	mov	r0, r5
 800ac54:	f7f5 fc66 	bl	8000524 <__aeabi_i2d>
 800ac58:	4642      	mov	r2, r8
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	f7f5 fccc 	bl	80005f8 <__aeabi_dmul>
 800ac60:	4b86      	ldr	r3, [pc, #536]	; (800ae7c <_dtoa_r+0x64c>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	f7f5 fb12 	bl	800028c <__adddf3>
 800ac68:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ac6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac70:	9303      	str	r3, [sp, #12]
 800ac72:	2e00      	cmp	r6, #0
 800ac74:	d158      	bne.n	800ad28 <_dtoa_r+0x4f8>
 800ac76:	4b82      	ldr	r3, [pc, #520]	; (800ae80 <_dtoa_r+0x650>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	f7f5 fb03 	bl	8000288 <__aeabi_dsub>
 800ac82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac86:	4680      	mov	r8, r0
 800ac88:	4689      	mov	r9, r1
 800ac8a:	f7f5 ff45 	bl	8000b18 <__aeabi_dcmpgt>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f040 8296 	bne.w	800b1c0 <_dtoa_r+0x990>
 800ac94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac98:	4640      	mov	r0, r8
 800ac9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	f040 8289 	bne.w	800b1bc <_dtoa_r+0x98c>
 800acaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f2c0 814e 	blt.w	800af52 <_dtoa_r+0x722>
 800acb6:	f1bb 0f0e 	cmp.w	fp, #14
 800acba:	f300 814a 	bgt.w	800af52 <_dtoa_r+0x722>
 800acbe:	4b6b      	ldr	r3, [pc, #428]	; (800ae6c <_dtoa_r+0x63c>)
 800acc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800acc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acca:	2b00      	cmp	r3, #0
 800accc:	f280 80dc 	bge.w	800ae88 <_dtoa_r+0x658>
 800acd0:	9b04      	ldr	r3, [sp, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f300 80d8 	bgt.w	800ae88 <_dtoa_r+0x658>
 800acd8:	f040 826f 	bne.w	800b1ba <_dtoa_r+0x98a>
 800acdc:	4b68      	ldr	r3, [pc, #416]	; (800ae80 <_dtoa_r+0x650>)
 800acde:	2200      	movs	r2, #0
 800ace0:	4640      	mov	r0, r8
 800ace2:	4649      	mov	r1, r9
 800ace4:	f7f5 fc88 	bl	80005f8 <__aeabi_dmul>
 800ace8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acec:	f7f5 ff0a 	bl	8000b04 <__aeabi_dcmpge>
 800acf0:	9e04      	ldr	r6, [sp, #16]
 800acf2:	4637      	mov	r7, r6
 800acf4:	2800      	cmp	r0, #0
 800acf6:	f040 8245 	bne.w	800b184 <_dtoa_r+0x954>
 800acfa:	9d00      	ldr	r5, [sp, #0]
 800acfc:	2331      	movs	r3, #49	; 0x31
 800acfe:	f805 3b01 	strb.w	r3, [r5], #1
 800ad02:	f10b 0b01 	add.w	fp, fp, #1
 800ad06:	e241      	b.n	800b18c <_dtoa_r+0x95c>
 800ad08:	07f2      	lsls	r2, r6, #31
 800ad0a:	d505      	bpl.n	800ad18 <_dtoa_r+0x4e8>
 800ad0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad10:	f7f5 fc72 	bl	80005f8 <__aeabi_dmul>
 800ad14:	3501      	adds	r5, #1
 800ad16:	2301      	movs	r3, #1
 800ad18:	1076      	asrs	r6, r6, #1
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	e773      	b.n	800ac06 <_dtoa_r+0x3d6>
 800ad1e:	2502      	movs	r5, #2
 800ad20:	e775      	b.n	800ac0e <_dtoa_r+0x3de>
 800ad22:	9e04      	ldr	r6, [sp, #16]
 800ad24:	465f      	mov	r7, fp
 800ad26:	e792      	b.n	800ac4e <_dtoa_r+0x41e>
 800ad28:	9900      	ldr	r1, [sp, #0]
 800ad2a:	4b50      	ldr	r3, [pc, #320]	; (800ae6c <_dtoa_r+0x63c>)
 800ad2c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad30:	4431      	add	r1, r6
 800ad32:	9102      	str	r1, [sp, #8]
 800ad34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad36:	eeb0 9a47 	vmov.f32	s18, s14
 800ad3a:	eef0 9a67 	vmov.f32	s19, s15
 800ad3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad46:	2900      	cmp	r1, #0
 800ad48:	d044      	beq.n	800add4 <_dtoa_r+0x5a4>
 800ad4a:	494e      	ldr	r1, [pc, #312]	; (800ae84 <_dtoa_r+0x654>)
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	f7f5 fd7d 	bl	800084c <__aeabi_ddiv>
 800ad52:	ec53 2b19 	vmov	r2, r3, d9
 800ad56:	f7f5 fa97 	bl	8000288 <__aeabi_dsub>
 800ad5a:	9d00      	ldr	r5, [sp, #0]
 800ad5c:	ec41 0b19 	vmov	d9, r0, r1
 800ad60:	4649      	mov	r1, r9
 800ad62:	4640      	mov	r0, r8
 800ad64:	f7f5 fef8 	bl	8000b58 <__aeabi_d2iz>
 800ad68:	4606      	mov	r6, r0
 800ad6a:	f7f5 fbdb 	bl	8000524 <__aeabi_i2d>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	3630      	adds	r6, #48	; 0x30
 800ad7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad80:	ec53 2b19 	vmov	r2, r3, d9
 800ad84:	4680      	mov	r8, r0
 800ad86:	4689      	mov	r9, r1
 800ad88:	f7f5 fea8 	bl	8000adc <__aeabi_dcmplt>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d164      	bne.n	800ae5a <_dtoa_r+0x62a>
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	4937      	ldr	r1, [pc, #220]	; (800ae74 <_dtoa_r+0x644>)
 800ad96:	2000      	movs	r0, #0
 800ad98:	f7f5 fa76 	bl	8000288 <__aeabi_dsub>
 800ad9c:	ec53 2b19 	vmov	r2, r3, d9
 800ada0:	f7f5 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f040 80b6 	bne.w	800af16 <_dtoa_r+0x6e6>
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	429d      	cmp	r5, r3
 800adae:	f43f af7c 	beq.w	800acaa <_dtoa_r+0x47a>
 800adb2:	4b31      	ldr	r3, [pc, #196]	; (800ae78 <_dtoa_r+0x648>)
 800adb4:	ec51 0b19 	vmov	r0, r1, d9
 800adb8:	2200      	movs	r2, #0
 800adba:	f7f5 fc1d 	bl	80005f8 <__aeabi_dmul>
 800adbe:	4b2e      	ldr	r3, [pc, #184]	; (800ae78 <_dtoa_r+0x648>)
 800adc0:	ec41 0b19 	vmov	d9, r0, r1
 800adc4:	2200      	movs	r2, #0
 800adc6:	4640      	mov	r0, r8
 800adc8:	4649      	mov	r1, r9
 800adca:	f7f5 fc15 	bl	80005f8 <__aeabi_dmul>
 800adce:	4680      	mov	r8, r0
 800add0:	4689      	mov	r9, r1
 800add2:	e7c5      	b.n	800ad60 <_dtoa_r+0x530>
 800add4:	ec51 0b17 	vmov	r0, r1, d7
 800add8:	f7f5 fc0e 	bl	80005f8 <__aeabi_dmul>
 800addc:	9b02      	ldr	r3, [sp, #8]
 800adde:	9d00      	ldr	r5, [sp, #0]
 800ade0:	930f      	str	r3, [sp, #60]	; 0x3c
 800ade2:	ec41 0b19 	vmov	d9, r0, r1
 800ade6:	4649      	mov	r1, r9
 800ade8:	4640      	mov	r0, r8
 800adea:	f7f5 feb5 	bl	8000b58 <__aeabi_d2iz>
 800adee:	4606      	mov	r6, r0
 800adf0:	f7f5 fb98 	bl	8000524 <__aeabi_i2d>
 800adf4:	3630      	adds	r6, #48	; 0x30
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 fa43 	bl	8000288 <__aeabi_dsub>
 800ae02:	f805 6b01 	strb.w	r6, [r5], #1
 800ae06:	9b02      	ldr	r3, [sp, #8]
 800ae08:	429d      	cmp	r5, r3
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	4689      	mov	r9, r1
 800ae0e:	f04f 0200 	mov.w	r2, #0
 800ae12:	d124      	bne.n	800ae5e <_dtoa_r+0x62e>
 800ae14:	4b1b      	ldr	r3, [pc, #108]	; (800ae84 <_dtoa_r+0x654>)
 800ae16:	ec51 0b19 	vmov	r0, r1, d9
 800ae1a:	f7f5 fa37 	bl	800028c <__adddf3>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	4640      	mov	r0, r8
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d173      	bne.n	800af16 <_dtoa_r+0x6e6>
 800ae2e:	ec53 2b19 	vmov	r2, r3, d9
 800ae32:	4914      	ldr	r1, [pc, #80]	; (800ae84 <_dtoa_r+0x654>)
 800ae34:	2000      	movs	r0, #0
 800ae36:	f7f5 fa27 	bl	8000288 <__aeabi_dsub>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	4640      	mov	r0, r8
 800ae40:	4649      	mov	r1, r9
 800ae42:	f7f5 fe4b 	bl	8000adc <__aeabi_dcmplt>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f af2f 	beq.w	800acaa <_dtoa_r+0x47a>
 800ae4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae4e:	1e6b      	subs	r3, r5, #1
 800ae50:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae56:	2b30      	cmp	r3, #48	; 0x30
 800ae58:	d0f8      	beq.n	800ae4c <_dtoa_r+0x61c>
 800ae5a:	46bb      	mov	fp, r7
 800ae5c:	e04a      	b.n	800aef4 <_dtoa_r+0x6c4>
 800ae5e:	4b06      	ldr	r3, [pc, #24]	; (800ae78 <_dtoa_r+0x648>)
 800ae60:	f7f5 fbca 	bl	80005f8 <__aeabi_dmul>
 800ae64:	4680      	mov	r8, r0
 800ae66:	4689      	mov	r9, r1
 800ae68:	e7bd      	b.n	800ade6 <_dtoa_r+0x5b6>
 800ae6a:	bf00      	nop
 800ae6c:	0800e130 	.word	0x0800e130
 800ae70:	0800e108 	.word	0x0800e108
 800ae74:	3ff00000 	.word	0x3ff00000
 800ae78:	40240000 	.word	0x40240000
 800ae7c:	401c0000 	.word	0x401c0000
 800ae80:	40140000 	.word	0x40140000
 800ae84:	3fe00000 	.word	0x3fe00000
 800ae88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae8c:	9d00      	ldr	r5, [sp, #0]
 800ae8e:	4642      	mov	r2, r8
 800ae90:	464b      	mov	r3, r9
 800ae92:	4630      	mov	r0, r6
 800ae94:	4639      	mov	r1, r7
 800ae96:	f7f5 fcd9 	bl	800084c <__aeabi_ddiv>
 800ae9a:	f7f5 fe5d 	bl	8000b58 <__aeabi_d2iz>
 800ae9e:	9001      	str	r0, [sp, #4]
 800aea0:	f7f5 fb40 	bl	8000524 <__aeabi_i2d>
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	f7f5 fba6 	bl	80005f8 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 f9e8 	bl	8000288 <__aeabi_dsub>
 800aeb8:	9e01      	ldr	r6, [sp, #4]
 800aeba:	9f04      	ldr	r7, [sp, #16]
 800aebc:	3630      	adds	r6, #48	; 0x30
 800aebe:	f805 6b01 	strb.w	r6, [r5], #1
 800aec2:	9e00      	ldr	r6, [sp, #0]
 800aec4:	1bae      	subs	r6, r5, r6
 800aec6:	42b7      	cmp	r7, r6
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	d134      	bne.n	800af38 <_dtoa_r+0x708>
 800aece:	f7f5 f9dd 	bl	800028c <__adddf3>
 800aed2:	4642      	mov	r2, r8
 800aed4:	464b      	mov	r3, r9
 800aed6:	4606      	mov	r6, r0
 800aed8:	460f      	mov	r7, r1
 800aeda:	f7f5 fe1d 	bl	8000b18 <__aeabi_dcmpgt>
 800aede:	b9c8      	cbnz	r0, 800af14 <_dtoa_r+0x6e4>
 800aee0:	4642      	mov	r2, r8
 800aee2:	464b      	mov	r3, r9
 800aee4:	4630      	mov	r0, r6
 800aee6:	4639      	mov	r1, r7
 800aee8:	f7f5 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeec:	b110      	cbz	r0, 800aef4 <_dtoa_r+0x6c4>
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	07db      	lsls	r3, r3, #31
 800aef2:	d40f      	bmi.n	800af14 <_dtoa_r+0x6e4>
 800aef4:	4651      	mov	r1, sl
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fbcc 	bl	800b694 <_Bfree>
 800aefc:	2300      	movs	r3, #0
 800aefe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af00:	702b      	strb	r3, [r5, #0]
 800af02:	f10b 0301 	add.w	r3, fp, #1
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f43f ace2 	beq.w	800a8d4 <_dtoa_r+0xa4>
 800af10:	601d      	str	r5, [r3, #0]
 800af12:	e4df      	b.n	800a8d4 <_dtoa_r+0xa4>
 800af14:	465f      	mov	r7, fp
 800af16:	462b      	mov	r3, r5
 800af18:	461d      	mov	r5, r3
 800af1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af1e:	2a39      	cmp	r2, #57	; 0x39
 800af20:	d106      	bne.n	800af30 <_dtoa_r+0x700>
 800af22:	9a00      	ldr	r2, [sp, #0]
 800af24:	429a      	cmp	r2, r3
 800af26:	d1f7      	bne.n	800af18 <_dtoa_r+0x6e8>
 800af28:	9900      	ldr	r1, [sp, #0]
 800af2a:	2230      	movs	r2, #48	; 0x30
 800af2c:	3701      	adds	r7, #1
 800af2e:	700a      	strb	r2, [r1, #0]
 800af30:	781a      	ldrb	r2, [r3, #0]
 800af32:	3201      	adds	r2, #1
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	e790      	b.n	800ae5a <_dtoa_r+0x62a>
 800af38:	4ba3      	ldr	r3, [pc, #652]	; (800b1c8 <_dtoa_r+0x998>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	f7f5 fb5c 	bl	80005f8 <__aeabi_dmul>
 800af40:	2200      	movs	r2, #0
 800af42:	2300      	movs	r3, #0
 800af44:	4606      	mov	r6, r0
 800af46:	460f      	mov	r7, r1
 800af48:	f7f5 fdbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d09e      	beq.n	800ae8e <_dtoa_r+0x65e>
 800af50:	e7d0      	b.n	800aef4 <_dtoa_r+0x6c4>
 800af52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af54:	2a00      	cmp	r2, #0
 800af56:	f000 80ca 	beq.w	800b0ee <_dtoa_r+0x8be>
 800af5a:	9a07      	ldr	r2, [sp, #28]
 800af5c:	2a01      	cmp	r2, #1
 800af5e:	f300 80ad 	bgt.w	800b0bc <_dtoa_r+0x88c>
 800af62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af64:	2a00      	cmp	r2, #0
 800af66:	f000 80a5 	beq.w	800b0b4 <_dtoa_r+0x884>
 800af6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af6e:	9e08      	ldr	r6, [sp, #32]
 800af70:	9d05      	ldr	r5, [sp, #20]
 800af72:	9a05      	ldr	r2, [sp, #20]
 800af74:	441a      	add	r2, r3
 800af76:	9205      	str	r2, [sp, #20]
 800af78:	9a06      	ldr	r2, [sp, #24]
 800af7a:	2101      	movs	r1, #1
 800af7c:	441a      	add	r2, r3
 800af7e:	4620      	mov	r0, r4
 800af80:	9206      	str	r2, [sp, #24]
 800af82:	f000 fc3d 	bl	800b800 <__i2b>
 800af86:	4607      	mov	r7, r0
 800af88:	b165      	cbz	r5, 800afa4 <_dtoa_r+0x774>
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	dd09      	ble.n	800afa4 <_dtoa_r+0x774>
 800af90:	42ab      	cmp	r3, r5
 800af92:	9a05      	ldr	r2, [sp, #20]
 800af94:	bfa8      	it	ge
 800af96:	462b      	movge	r3, r5
 800af98:	1ad2      	subs	r2, r2, r3
 800af9a:	9205      	str	r2, [sp, #20]
 800af9c:	9a06      	ldr	r2, [sp, #24]
 800af9e:	1aed      	subs	r5, r5, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	9306      	str	r3, [sp, #24]
 800afa4:	9b08      	ldr	r3, [sp, #32]
 800afa6:	b1f3      	cbz	r3, 800afe6 <_dtoa_r+0x7b6>
 800afa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 80a3 	beq.w	800b0f6 <_dtoa_r+0x8c6>
 800afb0:	2e00      	cmp	r6, #0
 800afb2:	dd10      	ble.n	800afd6 <_dtoa_r+0x7a6>
 800afb4:	4639      	mov	r1, r7
 800afb6:	4632      	mov	r2, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fce1 	bl	800b980 <__pow5mult>
 800afbe:	4652      	mov	r2, sl
 800afc0:	4601      	mov	r1, r0
 800afc2:	4607      	mov	r7, r0
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 fc31 	bl	800b82c <__multiply>
 800afca:	4651      	mov	r1, sl
 800afcc:	4680      	mov	r8, r0
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 fb60 	bl	800b694 <_Bfree>
 800afd4:	46c2      	mov	sl, r8
 800afd6:	9b08      	ldr	r3, [sp, #32]
 800afd8:	1b9a      	subs	r2, r3, r6
 800afda:	d004      	beq.n	800afe6 <_dtoa_r+0x7b6>
 800afdc:	4651      	mov	r1, sl
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 fcce 	bl	800b980 <__pow5mult>
 800afe4:	4682      	mov	sl, r0
 800afe6:	2101      	movs	r1, #1
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 fc09 	bl	800b800 <__i2b>
 800afee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	f340 8081 	ble.w	800b0fa <_dtoa_r+0x8ca>
 800aff8:	461a      	mov	r2, r3
 800affa:	4601      	mov	r1, r0
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fcbf 	bl	800b980 <__pow5mult>
 800b002:	9b07      	ldr	r3, [sp, #28]
 800b004:	2b01      	cmp	r3, #1
 800b006:	4606      	mov	r6, r0
 800b008:	dd7a      	ble.n	800b100 <_dtoa_r+0x8d0>
 800b00a:	f04f 0800 	mov.w	r8, #0
 800b00e:	6933      	ldr	r3, [r6, #16]
 800b010:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b014:	6918      	ldr	r0, [r3, #16]
 800b016:	f000 fba5 	bl	800b764 <__hi0bits>
 800b01a:	f1c0 0020 	rsb	r0, r0, #32
 800b01e:	9b06      	ldr	r3, [sp, #24]
 800b020:	4418      	add	r0, r3
 800b022:	f010 001f 	ands.w	r0, r0, #31
 800b026:	f000 8094 	beq.w	800b152 <_dtoa_r+0x922>
 800b02a:	f1c0 0320 	rsb	r3, r0, #32
 800b02e:	2b04      	cmp	r3, #4
 800b030:	f340 8085 	ble.w	800b13e <_dtoa_r+0x90e>
 800b034:	9b05      	ldr	r3, [sp, #20]
 800b036:	f1c0 001c 	rsb	r0, r0, #28
 800b03a:	4403      	add	r3, r0
 800b03c:	9305      	str	r3, [sp, #20]
 800b03e:	9b06      	ldr	r3, [sp, #24]
 800b040:	4403      	add	r3, r0
 800b042:	4405      	add	r5, r0
 800b044:	9306      	str	r3, [sp, #24]
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dd05      	ble.n	800b058 <_dtoa_r+0x828>
 800b04c:	4651      	mov	r1, sl
 800b04e:	461a      	mov	r2, r3
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fcef 	bl	800ba34 <__lshift>
 800b056:	4682      	mov	sl, r0
 800b058:	9b06      	ldr	r3, [sp, #24]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dd05      	ble.n	800b06a <_dtoa_r+0x83a>
 800b05e:	4631      	mov	r1, r6
 800b060:	461a      	mov	r2, r3
 800b062:	4620      	mov	r0, r4
 800b064:	f000 fce6 	bl	800ba34 <__lshift>
 800b068:	4606      	mov	r6, r0
 800b06a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d072      	beq.n	800b156 <_dtoa_r+0x926>
 800b070:	4631      	mov	r1, r6
 800b072:	4650      	mov	r0, sl
 800b074:	f000 fd4a 	bl	800bb0c <__mcmp>
 800b078:	2800      	cmp	r0, #0
 800b07a:	da6c      	bge.n	800b156 <_dtoa_r+0x926>
 800b07c:	2300      	movs	r3, #0
 800b07e:	4651      	mov	r1, sl
 800b080:	220a      	movs	r2, #10
 800b082:	4620      	mov	r0, r4
 800b084:	f000 fb28 	bl	800b6d8 <__multadd>
 800b088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b08e:	4682      	mov	sl, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 81b0 	beq.w	800b3f6 <_dtoa_r+0xbc6>
 800b096:	2300      	movs	r3, #0
 800b098:	4639      	mov	r1, r7
 800b09a:	220a      	movs	r2, #10
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 fb1b 	bl	800b6d8 <__multadd>
 800b0a2:	9b01      	ldr	r3, [sp, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	4607      	mov	r7, r0
 800b0a8:	f300 8096 	bgt.w	800b1d8 <_dtoa_r+0x9a8>
 800b0ac:	9b07      	ldr	r3, [sp, #28]
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	dc59      	bgt.n	800b166 <_dtoa_r+0x936>
 800b0b2:	e091      	b.n	800b1d8 <_dtoa_r+0x9a8>
 800b0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0ba:	e758      	b.n	800af6e <_dtoa_r+0x73e>
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	1e5e      	subs	r6, r3, #1
 800b0c0:	9b08      	ldr	r3, [sp, #32]
 800b0c2:	42b3      	cmp	r3, r6
 800b0c4:	bfbf      	itttt	lt
 800b0c6:	9b08      	ldrlt	r3, [sp, #32]
 800b0c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b0ca:	9608      	strlt	r6, [sp, #32]
 800b0cc:	1af3      	sublt	r3, r6, r3
 800b0ce:	bfb4      	ite	lt
 800b0d0:	18d2      	addlt	r2, r2, r3
 800b0d2:	1b9e      	subge	r6, r3, r6
 800b0d4:	9b04      	ldr	r3, [sp, #16]
 800b0d6:	bfbc      	itt	lt
 800b0d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b0da:	2600      	movlt	r6, #0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfb7      	itett	lt
 800b0e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b0e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b0e8:	1a9d      	sublt	r5, r3, r2
 800b0ea:	2300      	movlt	r3, #0
 800b0ec:	e741      	b.n	800af72 <_dtoa_r+0x742>
 800b0ee:	9e08      	ldr	r6, [sp, #32]
 800b0f0:	9d05      	ldr	r5, [sp, #20]
 800b0f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0f4:	e748      	b.n	800af88 <_dtoa_r+0x758>
 800b0f6:	9a08      	ldr	r2, [sp, #32]
 800b0f8:	e770      	b.n	800afdc <_dtoa_r+0x7ac>
 800b0fa:	9b07      	ldr	r3, [sp, #28]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	dc19      	bgt.n	800b134 <_dtoa_r+0x904>
 800b100:	9b02      	ldr	r3, [sp, #8]
 800b102:	b9bb      	cbnz	r3, 800b134 <_dtoa_r+0x904>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b10a:	b99b      	cbnz	r3, 800b134 <_dtoa_r+0x904>
 800b10c:	9b03      	ldr	r3, [sp, #12]
 800b10e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b112:	0d1b      	lsrs	r3, r3, #20
 800b114:	051b      	lsls	r3, r3, #20
 800b116:	b183      	cbz	r3, 800b13a <_dtoa_r+0x90a>
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	3301      	adds	r3, #1
 800b11c:	9305      	str	r3, [sp, #20]
 800b11e:	9b06      	ldr	r3, [sp, #24]
 800b120:	3301      	adds	r3, #1
 800b122:	9306      	str	r3, [sp, #24]
 800b124:	f04f 0801 	mov.w	r8, #1
 800b128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f47f af6f 	bne.w	800b00e <_dtoa_r+0x7de>
 800b130:	2001      	movs	r0, #1
 800b132:	e774      	b.n	800b01e <_dtoa_r+0x7ee>
 800b134:	f04f 0800 	mov.w	r8, #0
 800b138:	e7f6      	b.n	800b128 <_dtoa_r+0x8f8>
 800b13a:	4698      	mov	r8, r3
 800b13c:	e7f4      	b.n	800b128 <_dtoa_r+0x8f8>
 800b13e:	d082      	beq.n	800b046 <_dtoa_r+0x816>
 800b140:	9a05      	ldr	r2, [sp, #20]
 800b142:	331c      	adds	r3, #28
 800b144:	441a      	add	r2, r3
 800b146:	9205      	str	r2, [sp, #20]
 800b148:	9a06      	ldr	r2, [sp, #24]
 800b14a:	441a      	add	r2, r3
 800b14c:	441d      	add	r5, r3
 800b14e:	9206      	str	r2, [sp, #24]
 800b150:	e779      	b.n	800b046 <_dtoa_r+0x816>
 800b152:	4603      	mov	r3, r0
 800b154:	e7f4      	b.n	800b140 <_dtoa_r+0x910>
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dc37      	bgt.n	800b1cc <_dtoa_r+0x99c>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	2b02      	cmp	r3, #2
 800b160:	dd34      	ble.n	800b1cc <_dtoa_r+0x99c>
 800b162:	9b04      	ldr	r3, [sp, #16]
 800b164:	9301      	str	r3, [sp, #4]
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	b963      	cbnz	r3, 800b184 <_dtoa_r+0x954>
 800b16a:	4631      	mov	r1, r6
 800b16c:	2205      	movs	r2, #5
 800b16e:	4620      	mov	r0, r4
 800b170:	f000 fab2 	bl	800b6d8 <__multadd>
 800b174:	4601      	mov	r1, r0
 800b176:	4606      	mov	r6, r0
 800b178:	4650      	mov	r0, sl
 800b17a:	f000 fcc7 	bl	800bb0c <__mcmp>
 800b17e:	2800      	cmp	r0, #0
 800b180:	f73f adbb 	bgt.w	800acfa <_dtoa_r+0x4ca>
 800b184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b186:	9d00      	ldr	r5, [sp, #0]
 800b188:	ea6f 0b03 	mvn.w	fp, r3
 800b18c:	f04f 0800 	mov.w	r8, #0
 800b190:	4631      	mov	r1, r6
 800b192:	4620      	mov	r0, r4
 800b194:	f000 fa7e 	bl	800b694 <_Bfree>
 800b198:	2f00      	cmp	r7, #0
 800b19a:	f43f aeab 	beq.w	800aef4 <_dtoa_r+0x6c4>
 800b19e:	f1b8 0f00 	cmp.w	r8, #0
 800b1a2:	d005      	beq.n	800b1b0 <_dtoa_r+0x980>
 800b1a4:	45b8      	cmp	r8, r7
 800b1a6:	d003      	beq.n	800b1b0 <_dtoa_r+0x980>
 800b1a8:	4641      	mov	r1, r8
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fa72 	bl	800b694 <_Bfree>
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fa6e 	bl	800b694 <_Bfree>
 800b1b8:	e69c      	b.n	800aef4 <_dtoa_r+0x6c4>
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	4637      	mov	r7, r6
 800b1be:	e7e1      	b.n	800b184 <_dtoa_r+0x954>
 800b1c0:	46bb      	mov	fp, r7
 800b1c2:	4637      	mov	r7, r6
 800b1c4:	e599      	b.n	800acfa <_dtoa_r+0x4ca>
 800b1c6:	bf00      	nop
 800b1c8:	40240000 	.word	0x40240000
 800b1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80c8 	beq.w	800b364 <_dtoa_r+0xb34>
 800b1d4:	9b04      	ldr	r3, [sp, #16]
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	dd05      	ble.n	800b1e8 <_dtoa_r+0x9b8>
 800b1dc:	4639      	mov	r1, r7
 800b1de:	462a      	mov	r2, r5
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f000 fc27 	bl	800ba34 <__lshift>
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ec:	d05b      	beq.n	800b2a6 <_dtoa_r+0xa76>
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f000 fa0f 	bl	800b614 <_Balloc>
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	b928      	cbnz	r0, 800b206 <_dtoa_r+0x9d6>
 800b1fa:	4b83      	ldr	r3, [pc, #524]	; (800b408 <_dtoa_r+0xbd8>)
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b202:	f7ff bb2e 	b.w	800a862 <_dtoa_r+0x32>
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	3202      	adds	r2, #2
 800b20a:	0092      	lsls	r2, r2, #2
 800b20c:	f107 010c 	add.w	r1, r7, #12
 800b210:	300c      	adds	r0, #12
 800b212:	f7ff fa74 	bl	800a6fe <memcpy>
 800b216:	2201      	movs	r2, #1
 800b218:	4629      	mov	r1, r5
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fc0a 	bl	800ba34 <__lshift>
 800b220:	9b00      	ldr	r3, [sp, #0]
 800b222:	3301      	adds	r3, #1
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b22a:	4413      	add	r3, r2
 800b22c:	9308      	str	r3, [sp, #32]
 800b22e:	9b02      	ldr	r3, [sp, #8]
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	46b8      	mov	r8, r7
 800b236:	9306      	str	r3, [sp, #24]
 800b238:	4607      	mov	r7, r0
 800b23a:	9b04      	ldr	r3, [sp, #16]
 800b23c:	4631      	mov	r1, r6
 800b23e:	3b01      	subs	r3, #1
 800b240:	4650      	mov	r0, sl
 800b242:	9301      	str	r3, [sp, #4]
 800b244:	f7ff fa69 	bl	800a71a <quorem>
 800b248:	4641      	mov	r1, r8
 800b24a:	9002      	str	r0, [sp, #8]
 800b24c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b250:	4650      	mov	r0, sl
 800b252:	f000 fc5b 	bl	800bb0c <__mcmp>
 800b256:	463a      	mov	r2, r7
 800b258:	9005      	str	r0, [sp, #20]
 800b25a:	4631      	mov	r1, r6
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fc71 	bl	800bb44 <__mdiff>
 800b262:	68c2      	ldr	r2, [r0, #12]
 800b264:	4605      	mov	r5, r0
 800b266:	bb02      	cbnz	r2, 800b2aa <_dtoa_r+0xa7a>
 800b268:	4601      	mov	r1, r0
 800b26a:	4650      	mov	r0, sl
 800b26c:	f000 fc4e 	bl	800bb0c <__mcmp>
 800b270:	4602      	mov	r2, r0
 800b272:	4629      	mov	r1, r5
 800b274:	4620      	mov	r0, r4
 800b276:	9209      	str	r2, [sp, #36]	; 0x24
 800b278:	f000 fa0c 	bl	800b694 <_Bfree>
 800b27c:	9b07      	ldr	r3, [sp, #28]
 800b27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b280:	9d04      	ldr	r5, [sp, #16]
 800b282:	ea43 0102 	orr.w	r1, r3, r2
 800b286:	9b06      	ldr	r3, [sp, #24]
 800b288:	4319      	orrs	r1, r3
 800b28a:	d110      	bne.n	800b2ae <_dtoa_r+0xa7e>
 800b28c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b290:	d029      	beq.n	800b2e6 <_dtoa_r+0xab6>
 800b292:	9b05      	ldr	r3, [sp, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	dd02      	ble.n	800b29e <_dtoa_r+0xa6e>
 800b298:	9b02      	ldr	r3, [sp, #8]
 800b29a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	f883 9000 	strb.w	r9, [r3]
 800b2a4:	e774      	b.n	800b190 <_dtoa_r+0x960>
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	e7ba      	b.n	800b220 <_dtoa_r+0x9f0>
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	e7e1      	b.n	800b272 <_dtoa_r+0xa42>
 800b2ae:	9b05      	ldr	r3, [sp, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	db04      	blt.n	800b2be <_dtoa_r+0xa8e>
 800b2b4:	9907      	ldr	r1, [sp, #28]
 800b2b6:	430b      	orrs	r3, r1
 800b2b8:	9906      	ldr	r1, [sp, #24]
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	d120      	bne.n	800b300 <_dtoa_r+0xad0>
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	dded      	ble.n	800b29e <_dtoa_r+0xa6e>
 800b2c2:	4651      	mov	r1, sl
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 fbb4 	bl	800ba34 <__lshift>
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	f000 fc1c 	bl	800bb0c <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dc03      	bgt.n	800b2e0 <_dtoa_r+0xab0>
 800b2d8:	d1e1      	bne.n	800b29e <_dtoa_r+0xa6e>
 800b2da:	f019 0f01 	tst.w	r9, #1
 800b2de:	d0de      	beq.n	800b29e <_dtoa_r+0xa6e>
 800b2e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b2e4:	d1d8      	bne.n	800b298 <_dtoa_r+0xa68>
 800b2e6:	9a01      	ldr	r2, [sp, #4]
 800b2e8:	2339      	movs	r3, #57	; 0x39
 800b2ea:	7013      	strb	r3, [r2, #0]
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	461d      	mov	r5, r3
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b2f6:	2a39      	cmp	r2, #57	; 0x39
 800b2f8:	d06c      	beq.n	800b3d4 <_dtoa_r+0xba4>
 800b2fa:	3201      	adds	r2, #1
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	e747      	b.n	800b190 <_dtoa_r+0x960>
 800b300:	2a00      	cmp	r2, #0
 800b302:	dd07      	ble.n	800b314 <_dtoa_r+0xae4>
 800b304:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b308:	d0ed      	beq.n	800b2e6 <_dtoa_r+0xab6>
 800b30a:	9a01      	ldr	r2, [sp, #4]
 800b30c:	f109 0301 	add.w	r3, r9, #1
 800b310:	7013      	strb	r3, [r2, #0]
 800b312:	e73d      	b.n	800b190 <_dtoa_r+0x960>
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	9a08      	ldr	r2, [sp, #32]
 800b318:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d043      	beq.n	800b3a8 <_dtoa_r+0xb78>
 800b320:	4651      	mov	r1, sl
 800b322:	2300      	movs	r3, #0
 800b324:	220a      	movs	r2, #10
 800b326:	4620      	mov	r0, r4
 800b328:	f000 f9d6 	bl	800b6d8 <__multadd>
 800b32c:	45b8      	cmp	r8, r7
 800b32e:	4682      	mov	sl, r0
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	f04f 020a 	mov.w	r2, #10
 800b338:	4641      	mov	r1, r8
 800b33a:	4620      	mov	r0, r4
 800b33c:	d107      	bne.n	800b34e <_dtoa_r+0xb1e>
 800b33e:	f000 f9cb 	bl	800b6d8 <__multadd>
 800b342:	4680      	mov	r8, r0
 800b344:	4607      	mov	r7, r0
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	9304      	str	r3, [sp, #16]
 800b34c:	e775      	b.n	800b23a <_dtoa_r+0xa0a>
 800b34e:	f000 f9c3 	bl	800b6d8 <__multadd>
 800b352:	4639      	mov	r1, r7
 800b354:	4680      	mov	r8, r0
 800b356:	2300      	movs	r3, #0
 800b358:	220a      	movs	r2, #10
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 f9bc 	bl	800b6d8 <__multadd>
 800b360:	4607      	mov	r7, r0
 800b362:	e7f0      	b.n	800b346 <_dtoa_r+0xb16>
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	9d00      	ldr	r5, [sp, #0]
 800b36a:	4631      	mov	r1, r6
 800b36c:	4650      	mov	r0, sl
 800b36e:	f7ff f9d4 	bl	800a71a <quorem>
 800b372:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b376:	9b00      	ldr	r3, [sp, #0]
 800b378:	f805 9b01 	strb.w	r9, [r5], #1
 800b37c:	1aea      	subs	r2, r5, r3
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	4293      	cmp	r3, r2
 800b382:	dd07      	ble.n	800b394 <_dtoa_r+0xb64>
 800b384:	4651      	mov	r1, sl
 800b386:	2300      	movs	r3, #0
 800b388:	220a      	movs	r2, #10
 800b38a:	4620      	mov	r0, r4
 800b38c:	f000 f9a4 	bl	800b6d8 <__multadd>
 800b390:	4682      	mov	sl, r0
 800b392:	e7ea      	b.n	800b36a <_dtoa_r+0xb3a>
 800b394:	9b01      	ldr	r3, [sp, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	bfc8      	it	gt
 800b39a:	461d      	movgt	r5, r3
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	bfd8      	it	le
 800b3a0:	2501      	movle	r5, #1
 800b3a2:	441d      	add	r5, r3
 800b3a4:	f04f 0800 	mov.w	r8, #0
 800b3a8:	4651      	mov	r1, sl
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fb41 	bl	800ba34 <__lshift>
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4682      	mov	sl, r0
 800b3b6:	f000 fba9 	bl	800bb0c <__mcmp>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	dc96      	bgt.n	800b2ec <_dtoa_r+0xabc>
 800b3be:	d102      	bne.n	800b3c6 <_dtoa_r+0xb96>
 800b3c0:	f019 0f01 	tst.w	r9, #1
 800b3c4:	d192      	bne.n	800b2ec <_dtoa_r+0xabc>
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ce:	2a30      	cmp	r2, #48	; 0x30
 800b3d0:	d0fa      	beq.n	800b3c8 <_dtoa_r+0xb98>
 800b3d2:	e6dd      	b.n	800b190 <_dtoa_r+0x960>
 800b3d4:	9a00      	ldr	r2, [sp, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d189      	bne.n	800b2ee <_dtoa_r+0xabe>
 800b3da:	f10b 0b01 	add.w	fp, fp, #1
 800b3de:	2331      	movs	r3, #49	; 0x31
 800b3e0:	e796      	b.n	800b310 <_dtoa_r+0xae0>
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <_dtoa_r+0xbdc>)
 800b3e4:	f7ff ba99 	b.w	800a91a <_dtoa_r+0xea>
 800b3e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f47f aa6d 	bne.w	800a8ca <_dtoa_r+0x9a>
 800b3f0:	4b07      	ldr	r3, [pc, #28]	; (800b410 <_dtoa_r+0xbe0>)
 800b3f2:	f7ff ba92 	b.w	800a91a <_dtoa_r+0xea>
 800b3f6:	9b01      	ldr	r3, [sp, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	dcb5      	bgt.n	800b368 <_dtoa_r+0xb38>
 800b3fc:	9b07      	ldr	r3, [sp, #28]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	f73f aeb1 	bgt.w	800b166 <_dtoa_r+0x936>
 800b404:	e7b0      	b.n	800b368 <_dtoa_r+0xb38>
 800b406:	bf00      	nop
 800b408:	0800e09d 	.word	0x0800e09d
 800b40c:	0800dffd 	.word	0x0800dffd
 800b410:	0800e021 	.word	0x0800e021

0800b414 <_free_r>:
 800b414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b416:	2900      	cmp	r1, #0
 800b418:	d044      	beq.n	800b4a4 <_free_r+0x90>
 800b41a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41e:	9001      	str	r0, [sp, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	f1a1 0404 	sub.w	r4, r1, #4
 800b426:	bfb8      	it	lt
 800b428:	18e4      	addlt	r4, r4, r3
 800b42a:	f000 f8e7 	bl	800b5fc <__malloc_lock>
 800b42e:	4a1e      	ldr	r2, [pc, #120]	; (800b4a8 <_free_r+0x94>)
 800b430:	9801      	ldr	r0, [sp, #4]
 800b432:	6813      	ldr	r3, [r2, #0]
 800b434:	b933      	cbnz	r3, 800b444 <_free_r+0x30>
 800b436:	6063      	str	r3, [r4, #4]
 800b438:	6014      	str	r4, [r2, #0]
 800b43a:	b003      	add	sp, #12
 800b43c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b440:	f000 b8e2 	b.w	800b608 <__malloc_unlock>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d908      	bls.n	800b45a <_free_r+0x46>
 800b448:	6825      	ldr	r5, [r4, #0]
 800b44a:	1961      	adds	r1, r4, r5
 800b44c:	428b      	cmp	r3, r1
 800b44e:	bf01      	itttt	eq
 800b450:	6819      	ldreq	r1, [r3, #0]
 800b452:	685b      	ldreq	r3, [r3, #4]
 800b454:	1949      	addeq	r1, r1, r5
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	e7ed      	b.n	800b436 <_free_r+0x22>
 800b45a:	461a      	mov	r2, r3
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b10b      	cbz	r3, 800b464 <_free_r+0x50>
 800b460:	42a3      	cmp	r3, r4
 800b462:	d9fa      	bls.n	800b45a <_free_r+0x46>
 800b464:	6811      	ldr	r1, [r2, #0]
 800b466:	1855      	adds	r5, r2, r1
 800b468:	42a5      	cmp	r5, r4
 800b46a:	d10b      	bne.n	800b484 <_free_r+0x70>
 800b46c:	6824      	ldr	r4, [r4, #0]
 800b46e:	4421      	add	r1, r4
 800b470:	1854      	adds	r4, r2, r1
 800b472:	42a3      	cmp	r3, r4
 800b474:	6011      	str	r1, [r2, #0]
 800b476:	d1e0      	bne.n	800b43a <_free_r+0x26>
 800b478:	681c      	ldr	r4, [r3, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	6053      	str	r3, [r2, #4]
 800b47e:	440c      	add	r4, r1
 800b480:	6014      	str	r4, [r2, #0]
 800b482:	e7da      	b.n	800b43a <_free_r+0x26>
 800b484:	d902      	bls.n	800b48c <_free_r+0x78>
 800b486:	230c      	movs	r3, #12
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	e7d6      	b.n	800b43a <_free_r+0x26>
 800b48c:	6825      	ldr	r5, [r4, #0]
 800b48e:	1961      	adds	r1, r4, r5
 800b490:	428b      	cmp	r3, r1
 800b492:	bf04      	itt	eq
 800b494:	6819      	ldreq	r1, [r3, #0]
 800b496:	685b      	ldreq	r3, [r3, #4]
 800b498:	6063      	str	r3, [r4, #4]
 800b49a:	bf04      	itt	eq
 800b49c:	1949      	addeq	r1, r1, r5
 800b49e:	6021      	streq	r1, [r4, #0]
 800b4a0:	6054      	str	r4, [r2, #4]
 800b4a2:	e7ca      	b.n	800b43a <_free_r+0x26>
 800b4a4:	b003      	add	sp, #12
 800b4a6:	bd30      	pop	{r4, r5, pc}
 800b4a8:	20000e9c 	.word	0x20000e9c

0800b4ac <malloc>:
 800b4ac:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <malloc+0xc>)
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	6818      	ldr	r0, [r3, #0]
 800b4b2:	f000 b823 	b.w	800b4fc <_malloc_r>
 800b4b6:	bf00      	nop
 800b4b8:	20000090 	.word	0x20000090

0800b4bc <sbrk_aligned>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	4e0e      	ldr	r6, [pc, #56]	; (800b4f8 <sbrk_aligned+0x3c>)
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	6831      	ldr	r1, [r6, #0]
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	b911      	cbnz	r1, 800b4ce <sbrk_aligned+0x12>
 800b4c8:	f001 f83c 	bl	800c544 <_sbrk_r>
 800b4cc:	6030      	str	r0, [r6, #0]
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f001 f837 	bl	800c544 <_sbrk_r>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	d00a      	beq.n	800b4f0 <sbrk_aligned+0x34>
 800b4da:	1cc4      	adds	r4, r0, #3
 800b4dc:	f024 0403 	bic.w	r4, r4, #3
 800b4e0:	42a0      	cmp	r0, r4
 800b4e2:	d007      	beq.n	800b4f4 <sbrk_aligned+0x38>
 800b4e4:	1a21      	subs	r1, r4, r0
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f001 f82c 	bl	800c544 <_sbrk_r>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d101      	bne.n	800b4f4 <sbrk_aligned+0x38>
 800b4f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	bd70      	pop	{r4, r5, r6, pc}
 800b4f8:	20000ea0 	.word	0x20000ea0

0800b4fc <_malloc_r>:
 800b4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b500:	1ccd      	adds	r5, r1, #3
 800b502:	f025 0503 	bic.w	r5, r5, #3
 800b506:	3508      	adds	r5, #8
 800b508:	2d0c      	cmp	r5, #12
 800b50a:	bf38      	it	cc
 800b50c:	250c      	movcc	r5, #12
 800b50e:	2d00      	cmp	r5, #0
 800b510:	4607      	mov	r7, r0
 800b512:	db01      	blt.n	800b518 <_malloc_r+0x1c>
 800b514:	42a9      	cmp	r1, r5
 800b516:	d905      	bls.n	800b524 <_malloc_r+0x28>
 800b518:	230c      	movs	r3, #12
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	2600      	movs	r6, #0
 800b51e:	4630      	mov	r0, r6
 800b520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b524:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b5f8 <_malloc_r+0xfc>
 800b528:	f000 f868 	bl	800b5fc <__malloc_lock>
 800b52c:	f8d8 3000 	ldr.w	r3, [r8]
 800b530:	461c      	mov	r4, r3
 800b532:	bb5c      	cbnz	r4, 800b58c <_malloc_r+0x90>
 800b534:	4629      	mov	r1, r5
 800b536:	4638      	mov	r0, r7
 800b538:	f7ff ffc0 	bl	800b4bc <sbrk_aligned>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	4604      	mov	r4, r0
 800b540:	d155      	bne.n	800b5ee <_malloc_r+0xf2>
 800b542:	f8d8 4000 	ldr.w	r4, [r8]
 800b546:	4626      	mov	r6, r4
 800b548:	2e00      	cmp	r6, #0
 800b54a:	d145      	bne.n	800b5d8 <_malloc_r+0xdc>
 800b54c:	2c00      	cmp	r4, #0
 800b54e:	d048      	beq.n	800b5e2 <_malloc_r+0xe6>
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	4631      	mov	r1, r6
 800b554:	4638      	mov	r0, r7
 800b556:	eb04 0903 	add.w	r9, r4, r3
 800b55a:	f000 fff3 	bl	800c544 <_sbrk_r>
 800b55e:	4581      	cmp	r9, r0
 800b560:	d13f      	bne.n	800b5e2 <_malloc_r+0xe6>
 800b562:	6821      	ldr	r1, [r4, #0]
 800b564:	1a6d      	subs	r5, r5, r1
 800b566:	4629      	mov	r1, r5
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff ffa7 	bl	800b4bc <sbrk_aligned>
 800b56e:	3001      	adds	r0, #1
 800b570:	d037      	beq.n	800b5e2 <_malloc_r+0xe6>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	442b      	add	r3, r5
 800b576:	6023      	str	r3, [r4, #0]
 800b578:	f8d8 3000 	ldr.w	r3, [r8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d038      	beq.n	800b5f2 <_malloc_r+0xf6>
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	42a2      	cmp	r2, r4
 800b584:	d12b      	bne.n	800b5de <_malloc_r+0xe2>
 800b586:	2200      	movs	r2, #0
 800b588:	605a      	str	r2, [r3, #4]
 800b58a:	e00f      	b.n	800b5ac <_malloc_r+0xb0>
 800b58c:	6822      	ldr	r2, [r4, #0]
 800b58e:	1b52      	subs	r2, r2, r5
 800b590:	d41f      	bmi.n	800b5d2 <_malloc_r+0xd6>
 800b592:	2a0b      	cmp	r2, #11
 800b594:	d917      	bls.n	800b5c6 <_malloc_r+0xca>
 800b596:	1961      	adds	r1, r4, r5
 800b598:	42a3      	cmp	r3, r4
 800b59a:	6025      	str	r5, [r4, #0]
 800b59c:	bf18      	it	ne
 800b59e:	6059      	strne	r1, [r3, #4]
 800b5a0:	6863      	ldr	r3, [r4, #4]
 800b5a2:	bf08      	it	eq
 800b5a4:	f8c8 1000 	streq.w	r1, [r8]
 800b5a8:	5162      	str	r2, [r4, r5]
 800b5aa:	604b      	str	r3, [r1, #4]
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	f104 060b 	add.w	r6, r4, #11
 800b5b2:	f000 f829 	bl	800b608 <__malloc_unlock>
 800b5b6:	f026 0607 	bic.w	r6, r6, #7
 800b5ba:	1d23      	adds	r3, r4, #4
 800b5bc:	1af2      	subs	r2, r6, r3
 800b5be:	d0ae      	beq.n	800b51e <_malloc_r+0x22>
 800b5c0:	1b9b      	subs	r3, r3, r6
 800b5c2:	50a3      	str	r3, [r4, r2]
 800b5c4:	e7ab      	b.n	800b51e <_malloc_r+0x22>
 800b5c6:	42a3      	cmp	r3, r4
 800b5c8:	6862      	ldr	r2, [r4, #4]
 800b5ca:	d1dd      	bne.n	800b588 <_malloc_r+0x8c>
 800b5cc:	f8c8 2000 	str.w	r2, [r8]
 800b5d0:	e7ec      	b.n	800b5ac <_malloc_r+0xb0>
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	6864      	ldr	r4, [r4, #4]
 800b5d6:	e7ac      	b.n	800b532 <_malloc_r+0x36>
 800b5d8:	4634      	mov	r4, r6
 800b5da:	6876      	ldr	r6, [r6, #4]
 800b5dc:	e7b4      	b.n	800b548 <_malloc_r+0x4c>
 800b5de:	4613      	mov	r3, r2
 800b5e0:	e7cc      	b.n	800b57c <_malloc_r+0x80>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	603b      	str	r3, [r7, #0]
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f000 f80e 	bl	800b608 <__malloc_unlock>
 800b5ec:	e797      	b.n	800b51e <_malloc_r+0x22>
 800b5ee:	6025      	str	r5, [r4, #0]
 800b5f0:	e7dc      	b.n	800b5ac <_malloc_r+0xb0>
 800b5f2:	605b      	str	r3, [r3, #4]
 800b5f4:	deff      	udf	#255	; 0xff
 800b5f6:	bf00      	nop
 800b5f8:	20000e9c 	.word	0x20000e9c

0800b5fc <__malloc_lock>:
 800b5fc:	4801      	ldr	r0, [pc, #4]	; (800b604 <__malloc_lock+0x8>)
 800b5fe:	f7ff b87c 	b.w	800a6fa <__retarget_lock_acquire_recursive>
 800b602:	bf00      	nop
 800b604:	20000e98 	.word	0x20000e98

0800b608 <__malloc_unlock>:
 800b608:	4801      	ldr	r0, [pc, #4]	; (800b610 <__malloc_unlock+0x8>)
 800b60a:	f7ff b877 	b.w	800a6fc <__retarget_lock_release_recursive>
 800b60e:	bf00      	nop
 800b610:	20000e98 	.word	0x20000e98

0800b614 <_Balloc>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	69c6      	ldr	r6, [r0, #28]
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	b976      	cbnz	r6, 800b63c <_Balloc+0x28>
 800b61e:	2010      	movs	r0, #16
 800b620:	f7ff ff44 	bl	800b4ac <malloc>
 800b624:	4602      	mov	r2, r0
 800b626:	61e0      	str	r0, [r4, #28]
 800b628:	b920      	cbnz	r0, 800b634 <_Balloc+0x20>
 800b62a:	4b18      	ldr	r3, [pc, #96]	; (800b68c <_Balloc+0x78>)
 800b62c:	4818      	ldr	r0, [pc, #96]	; (800b690 <_Balloc+0x7c>)
 800b62e:	216b      	movs	r1, #107	; 0x6b
 800b630:	f000 ff98 	bl	800c564 <__assert_func>
 800b634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b638:	6006      	str	r6, [r0, #0]
 800b63a:	60c6      	str	r6, [r0, #12]
 800b63c:	69e6      	ldr	r6, [r4, #28]
 800b63e:	68f3      	ldr	r3, [r6, #12]
 800b640:	b183      	cbz	r3, 800b664 <_Balloc+0x50>
 800b642:	69e3      	ldr	r3, [r4, #28]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b64a:	b9b8      	cbnz	r0, 800b67c <_Balloc+0x68>
 800b64c:	2101      	movs	r1, #1
 800b64e:	fa01 f605 	lsl.w	r6, r1, r5
 800b652:	1d72      	adds	r2, r6, #5
 800b654:	0092      	lsls	r2, r2, #2
 800b656:	4620      	mov	r0, r4
 800b658:	f000 ffa2 	bl	800c5a0 <_calloc_r>
 800b65c:	b160      	cbz	r0, 800b678 <_Balloc+0x64>
 800b65e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b662:	e00e      	b.n	800b682 <_Balloc+0x6e>
 800b664:	2221      	movs	r2, #33	; 0x21
 800b666:	2104      	movs	r1, #4
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 ff99 	bl	800c5a0 <_calloc_r>
 800b66e:	69e3      	ldr	r3, [r4, #28]
 800b670:	60f0      	str	r0, [r6, #12]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e4      	bne.n	800b642 <_Balloc+0x2e>
 800b678:	2000      	movs	r0, #0
 800b67a:	bd70      	pop	{r4, r5, r6, pc}
 800b67c:	6802      	ldr	r2, [r0, #0]
 800b67e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b682:	2300      	movs	r3, #0
 800b684:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b688:	e7f7      	b.n	800b67a <_Balloc+0x66>
 800b68a:	bf00      	nop
 800b68c:	0800e02e 	.word	0x0800e02e
 800b690:	0800e0ae 	.word	0x0800e0ae

0800b694 <_Bfree>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	69c6      	ldr	r6, [r0, #28]
 800b698:	4605      	mov	r5, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	b976      	cbnz	r6, 800b6bc <_Bfree+0x28>
 800b69e:	2010      	movs	r0, #16
 800b6a0:	f7ff ff04 	bl	800b4ac <malloc>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	61e8      	str	r0, [r5, #28]
 800b6a8:	b920      	cbnz	r0, 800b6b4 <_Bfree+0x20>
 800b6aa:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <_Bfree+0x3c>)
 800b6ac:	4809      	ldr	r0, [pc, #36]	; (800b6d4 <_Bfree+0x40>)
 800b6ae:	218f      	movs	r1, #143	; 0x8f
 800b6b0:	f000 ff58 	bl	800c564 <__assert_func>
 800b6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6b8:	6006      	str	r6, [r0, #0]
 800b6ba:	60c6      	str	r6, [r0, #12]
 800b6bc:	b13c      	cbz	r4, 800b6ce <_Bfree+0x3a>
 800b6be:	69eb      	ldr	r3, [r5, #28]
 800b6c0:	6862      	ldr	r2, [r4, #4]
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6c8:	6021      	str	r1, [r4, #0]
 800b6ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	0800e02e 	.word	0x0800e02e
 800b6d4:	0800e0ae 	.word	0x0800e0ae

0800b6d8 <__multadd>:
 800b6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6dc:	690d      	ldr	r5, [r1, #16]
 800b6de:	4607      	mov	r7, r0
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	461e      	mov	r6, r3
 800b6e4:	f101 0c14 	add.w	ip, r1, #20
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b6ee:	b299      	uxth	r1, r3
 800b6f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b6f4:	0c1e      	lsrs	r6, r3, #16
 800b6f6:	0c0b      	lsrs	r3, r1, #16
 800b6f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b6fc:	b289      	uxth	r1, r1
 800b6fe:	3001      	adds	r0, #1
 800b700:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b704:	4285      	cmp	r5, r0
 800b706:	f84c 1b04 	str.w	r1, [ip], #4
 800b70a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b70e:	dcec      	bgt.n	800b6ea <__multadd+0x12>
 800b710:	b30e      	cbz	r6, 800b756 <__multadd+0x7e>
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	42ab      	cmp	r3, r5
 800b716:	dc19      	bgt.n	800b74c <__multadd+0x74>
 800b718:	6861      	ldr	r1, [r4, #4]
 800b71a:	4638      	mov	r0, r7
 800b71c:	3101      	adds	r1, #1
 800b71e:	f7ff ff79 	bl	800b614 <_Balloc>
 800b722:	4680      	mov	r8, r0
 800b724:	b928      	cbnz	r0, 800b732 <__multadd+0x5a>
 800b726:	4602      	mov	r2, r0
 800b728:	4b0c      	ldr	r3, [pc, #48]	; (800b75c <__multadd+0x84>)
 800b72a:	480d      	ldr	r0, [pc, #52]	; (800b760 <__multadd+0x88>)
 800b72c:	21ba      	movs	r1, #186	; 0xba
 800b72e:	f000 ff19 	bl	800c564 <__assert_func>
 800b732:	6922      	ldr	r2, [r4, #16]
 800b734:	3202      	adds	r2, #2
 800b736:	f104 010c 	add.w	r1, r4, #12
 800b73a:	0092      	lsls	r2, r2, #2
 800b73c:	300c      	adds	r0, #12
 800b73e:	f7fe ffde 	bl	800a6fe <memcpy>
 800b742:	4621      	mov	r1, r4
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff ffa5 	bl	800b694 <_Bfree>
 800b74a:	4644      	mov	r4, r8
 800b74c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b750:	3501      	adds	r5, #1
 800b752:	615e      	str	r6, [r3, #20]
 800b754:	6125      	str	r5, [r4, #16]
 800b756:	4620      	mov	r0, r4
 800b758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75c:	0800e09d 	.word	0x0800e09d
 800b760:	0800e0ae 	.word	0x0800e0ae

0800b764 <__hi0bits>:
 800b764:	0c03      	lsrs	r3, r0, #16
 800b766:	041b      	lsls	r3, r3, #16
 800b768:	b9d3      	cbnz	r3, 800b7a0 <__hi0bits+0x3c>
 800b76a:	0400      	lsls	r0, r0, #16
 800b76c:	2310      	movs	r3, #16
 800b76e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b772:	bf04      	itt	eq
 800b774:	0200      	lsleq	r0, r0, #8
 800b776:	3308      	addeq	r3, #8
 800b778:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b77c:	bf04      	itt	eq
 800b77e:	0100      	lsleq	r0, r0, #4
 800b780:	3304      	addeq	r3, #4
 800b782:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b786:	bf04      	itt	eq
 800b788:	0080      	lsleq	r0, r0, #2
 800b78a:	3302      	addeq	r3, #2
 800b78c:	2800      	cmp	r0, #0
 800b78e:	db05      	blt.n	800b79c <__hi0bits+0x38>
 800b790:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b794:	f103 0301 	add.w	r3, r3, #1
 800b798:	bf08      	it	eq
 800b79a:	2320      	moveq	r3, #32
 800b79c:	4618      	mov	r0, r3
 800b79e:	4770      	bx	lr
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	e7e4      	b.n	800b76e <__hi0bits+0xa>

0800b7a4 <__lo0bits>:
 800b7a4:	6803      	ldr	r3, [r0, #0]
 800b7a6:	f013 0207 	ands.w	r2, r3, #7
 800b7aa:	d00c      	beq.n	800b7c6 <__lo0bits+0x22>
 800b7ac:	07d9      	lsls	r1, r3, #31
 800b7ae:	d422      	bmi.n	800b7f6 <__lo0bits+0x52>
 800b7b0:	079a      	lsls	r2, r3, #30
 800b7b2:	bf49      	itett	mi
 800b7b4:	085b      	lsrmi	r3, r3, #1
 800b7b6:	089b      	lsrpl	r3, r3, #2
 800b7b8:	6003      	strmi	r3, [r0, #0]
 800b7ba:	2201      	movmi	r2, #1
 800b7bc:	bf5c      	itt	pl
 800b7be:	6003      	strpl	r3, [r0, #0]
 800b7c0:	2202      	movpl	r2, #2
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	4770      	bx	lr
 800b7c6:	b299      	uxth	r1, r3
 800b7c8:	b909      	cbnz	r1, 800b7ce <__lo0bits+0x2a>
 800b7ca:	0c1b      	lsrs	r3, r3, #16
 800b7cc:	2210      	movs	r2, #16
 800b7ce:	b2d9      	uxtb	r1, r3
 800b7d0:	b909      	cbnz	r1, 800b7d6 <__lo0bits+0x32>
 800b7d2:	3208      	adds	r2, #8
 800b7d4:	0a1b      	lsrs	r3, r3, #8
 800b7d6:	0719      	lsls	r1, r3, #28
 800b7d8:	bf04      	itt	eq
 800b7da:	091b      	lsreq	r3, r3, #4
 800b7dc:	3204      	addeq	r2, #4
 800b7de:	0799      	lsls	r1, r3, #30
 800b7e0:	bf04      	itt	eq
 800b7e2:	089b      	lsreq	r3, r3, #2
 800b7e4:	3202      	addeq	r2, #2
 800b7e6:	07d9      	lsls	r1, r3, #31
 800b7e8:	d403      	bmi.n	800b7f2 <__lo0bits+0x4e>
 800b7ea:	085b      	lsrs	r3, r3, #1
 800b7ec:	f102 0201 	add.w	r2, r2, #1
 800b7f0:	d003      	beq.n	800b7fa <__lo0bits+0x56>
 800b7f2:	6003      	str	r3, [r0, #0]
 800b7f4:	e7e5      	b.n	800b7c2 <__lo0bits+0x1e>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	e7e3      	b.n	800b7c2 <__lo0bits+0x1e>
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	e7e1      	b.n	800b7c2 <__lo0bits+0x1e>
	...

0800b800 <__i2b>:
 800b800:	b510      	push	{r4, lr}
 800b802:	460c      	mov	r4, r1
 800b804:	2101      	movs	r1, #1
 800b806:	f7ff ff05 	bl	800b614 <_Balloc>
 800b80a:	4602      	mov	r2, r0
 800b80c:	b928      	cbnz	r0, 800b81a <__i2b+0x1a>
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <__i2b+0x24>)
 800b810:	4805      	ldr	r0, [pc, #20]	; (800b828 <__i2b+0x28>)
 800b812:	f240 1145 	movw	r1, #325	; 0x145
 800b816:	f000 fea5 	bl	800c564 <__assert_func>
 800b81a:	2301      	movs	r3, #1
 800b81c:	6144      	str	r4, [r0, #20]
 800b81e:	6103      	str	r3, [r0, #16]
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	0800e09d 	.word	0x0800e09d
 800b828:	0800e0ae 	.word	0x0800e0ae

0800b82c <__multiply>:
 800b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b830:	4691      	mov	r9, r2
 800b832:	690a      	ldr	r2, [r1, #16]
 800b834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b838:	429a      	cmp	r2, r3
 800b83a:	bfb8      	it	lt
 800b83c:	460b      	movlt	r3, r1
 800b83e:	460c      	mov	r4, r1
 800b840:	bfbc      	itt	lt
 800b842:	464c      	movlt	r4, r9
 800b844:	4699      	movlt	r9, r3
 800b846:	6927      	ldr	r7, [r4, #16]
 800b848:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	6861      	ldr	r1, [r4, #4]
 800b850:	eb07 060a 	add.w	r6, r7, sl
 800b854:	42b3      	cmp	r3, r6
 800b856:	b085      	sub	sp, #20
 800b858:	bfb8      	it	lt
 800b85a:	3101      	addlt	r1, #1
 800b85c:	f7ff feda 	bl	800b614 <_Balloc>
 800b860:	b930      	cbnz	r0, 800b870 <__multiply+0x44>
 800b862:	4602      	mov	r2, r0
 800b864:	4b44      	ldr	r3, [pc, #272]	; (800b978 <__multiply+0x14c>)
 800b866:	4845      	ldr	r0, [pc, #276]	; (800b97c <__multiply+0x150>)
 800b868:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b86c:	f000 fe7a 	bl	800c564 <__assert_func>
 800b870:	f100 0514 	add.w	r5, r0, #20
 800b874:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b878:	462b      	mov	r3, r5
 800b87a:	2200      	movs	r2, #0
 800b87c:	4543      	cmp	r3, r8
 800b87e:	d321      	bcc.n	800b8c4 <__multiply+0x98>
 800b880:	f104 0314 	add.w	r3, r4, #20
 800b884:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b888:	f109 0314 	add.w	r3, r9, #20
 800b88c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b890:	9202      	str	r2, [sp, #8]
 800b892:	1b3a      	subs	r2, r7, r4
 800b894:	3a15      	subs	r2, #21
 800b896:	f022 0203 	bic.w	r2, r2, #3
 800b89a:	3204      	adds	r2, #4
 800b89c:	f104 0115 	add.w	r1, r4, #21
 800b8a0:	428f      	cmp	r7, r1
 800b8a2:	bf38      	it	cc
 800b8a4:	2204      	movcc	r2, #4
 800b8a6:	9201      	str	r2, [sp, #4]
 800b8a8:	9a02      	ldr	r2, [sp, #8]
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d80c      	bhi.n	800b8ca <__multiply+0x9e>
 800b8b0:	2e00      	cmp	r6, #0
 800b8b2:	dd03      	ble.n	800b8bc <__multiply+0x90>
 800b8b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d05b      	beq.n	800b974 <__multiply+0x148>
 800b8bc:	6106      	str	r6, [r0, #16]
 800b8be:	b005      	add	sp, #20
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c4:	f843 2b04 	str.w	r2, [r3], #4
 800b8c8:	e7d8      	b.n	800b87c <__multiply+0x50>
 800b8ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8ce:	f1ba 0f00 	cmp.w	sl, #0
 800b8d2:	d024      	beq.n	800b91e <__multiply+0xf2>
 800b8d4:	f104 0e14 	add.w	lr, r4, #20
 800b8d8:	46a9      	mov	r9, r5
 800b8da:	f04f 0c00 	mov.w	ip, #0
 800b8de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8e2:	f8d9 1000 	ldr.w	r1, [r9]
 800b8e6:	fa1f fb82 	uxth.w	fp, r2
 800b8ea:	b289      	uxth	r1, r1
 800b8ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8f4:	f8d9 2000 	ldr.w	r2, [r9]
 800b8f8:	4461      	add	r1, ip
 800b8fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800b902:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b906:	b289      	uxth	r1, r1
 800b908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b90c:	4577      	cmp	r7, lr
 800b90e:	f849 1b04 	str.w	r1, [r9], #4
 800b912:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b916:	d8e2      	bhi.n	800b8de <__multiply+0xb2>
 800b918:	9a01      	ldr	r2, [sp, #4]
 800b91a:	f845 c002 	str.w	ip, [r5, r2]
 800b91e:	9a03      	ldr	r2, [sp, #12]
 800b920:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b924:	3304      	adds	r3, #4
 800b926:	f1b9 0f00 	cmp.w	r9, #0
 800b92a:	d021      	beq.n	800b970 <__multiply+0x144>
 800b92c:	6829      	ldr	r1, [r5, #0]
 800b92e:	f104 0c14 	add.w	ip, r4, #20
 800b932:	46ae      	mov	lr, r5
 800b934:	f04f 0a00 	mov.w	sl, #0
 800b938:	f8bc b000 	ldrh.w	fp, [ip]
 800b93c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b940:	fb09 220b 	mla	r2, r9, fp, r2
 800b944:	4452      	add	r2, sl
 800b946:	b289      	uxth	r1, r1
 800b948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b94c:	f84e 1b04 	str.w	r1, [lr], #4
 800b950:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b954:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b958:	f8be 1000 	ldrh.w	r1, [lr]
 800b95c:	fb09 110a 	mla	r1, r9, sl, r1
 800b960:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b964:	4567      	cmp	r7, ip
 800b966:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b96a:	d8e5      	bhi.n	800b938 <__multiply+0x10c>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	50a9      	str	r1, [r5, r2]
 800b970:	3504      	adds	r5, #4
 800b972:	e799      	b.n	800b8a8 <__multiply+0x7c>
 800b974:	3e01      	subs	r6, #1
 800b976:	e79b      	b.n	800b8b0 <__multiply+0x84>
 800b978:	0800e09d 	.word	0x0800e09d
 800b97c:	0800e0ae 	.word	0x0800e0ae

0800b980 <__pow5mult>:
 800b980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b984:	4615      	mov	r5, r2
 800b986:	f012 0203 	ands.w	r2, r2, #3
 800b98a:	4606      	mov	r6, r0
 800b98c:	460f      	mov	r7, r1
 800b98e:	d007      	beq.n	800b9a0 <__pow5mult+0x20>
 800b990:	4c25      	ldr	r4, [pc, #148]	; (800ba28 <__pow5mult+0xa8>)
 800b992:	3a01      	subs	r2, #1
 800b994:	2300      	movs	r3, #0
 800b996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b99a:	f7ff fe9d 	bl	800b6d8 <__multadd>
 800b99e:	4607      	mov	r7, r0
 800b9a0:	10ad      	asrs	r5, r5, #2
 800b9a2:	d03d      	beq.n	800ba20 <__pow5mult+0xa0>
 800b9a4:	69f4      	ldr	r4, [r6, #28]
 800b9a6:	b97c      	cbnz	r4, 800b9c8 <__pow5mult+0x48>
 800b9a8:	2010      	movs	r0, #16
 800b9aa:	f7ff fd7f 	bl	800b4ac <malloc>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	61f0      	str	r0, [r6, #28]
 800b9b2:	b928      	cbnz	r0, 800b9c0 <__pow5mult+0x40>
 800b9b4:	4b1d      	ldr	r3, [pc, #116]	; (800ba2c <__pow5mult+0xac>)
 800b9b6:	481e      	ldr	r0, [pc, #120]	; (800ba30 <__pow5mult+0xb0>)
 800b9b8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b9bc:	f000 fdd2 	bl	800c564 <__assert_func>
 800b9c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9c4:	6004      	str	r4, [r0, #0]
 800b9c6:	60c4      	str	r4, [r0, #12]
 800b9c8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b9cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9d0:	b94c      	cbnz	r4, 800b9e6 <__pow5mult+0x66>
 800b9d2:	f240 2171 	movw	r1, #625	; 0x271
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f7ff ff12 	bl	800b800 <__i2b>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	f04f 0900 	mov.w	r9, #0
 800b9ea:	07eb      	lsls	r3, r5, #31
 800b9ec:	d50a      	bpl.n	800ba04 <__pow5mult+0x84>
 800b9ee:	4639      	mov	r1, r7
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f7ff ff1a 	bl	800b82c <__multiply>
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	4680      	mov	r8, r0
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f7ff fe49 	bl	800b694 <_Bfree>
 800ba02:	4647      	mov	r7, r8
 800ba04:	106d      	asrs	r5, r5, #1
 800ba06:	d00b      	beq.n	800ba20 <__pow5mult+0xa0>
 800ba08:	6820      	ldr	r0, [r4, #0]
 800ba0a:	b938      	cbnz	r0, 800ba1c <__pow5mult+0x9c>
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4621      	mov	r1, r4
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ff0b 	bl	800b82c <__multiply>
 800ba16:	6020      	str	r0, [r4, #0]
 800ba18:	f8c0 9000 	str.w	r9, [r0]
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	e7e4      	b.n	800b9ea <__pow5mult+0x6a>
 800ba20:	4638      	mov	r0, r7
 800ba22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba26:	bf00      	nop
 800ba28:	0800e1f8 	.word	0x0800e1f8
 800ba2c:	0800e02e 	.word	0x0800e02e
 800ba30:	0800e0ae 	.word	0x0800e0ae

0800ba34 <__lshift>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	460c      	mov	r4, r1
 800ba3a:	6849      	ldr	r1, [r1, #4]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba42:	68a3      	ldr	r3, [r4, #8]
 800ba44:	4607      	mov	r7, r0
 800ba46:	4691      	mov	r9, r2
 800ba48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba4c:	f108 0601 	add.w	r6, r8, #1
 800ba50:	42b3      	cmp	r3, r6
 800ba52:	db0b      	blt.n	800ba6c <__lshift+0x38>
 800ba54:	4638      	mov	r0, r7
 800ba56:	f7ff fddd 	bl	800b614 <_Balloc>
 800ba5a:	4605      	mov	r5, r0
 800ba5c:	b948      	cbnz	r0, 800ba72 <__lshift+0x3e>
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4b28      	ldr	r3, [pc, #160]	; (800bb04 <__lshift+0xd0>)
 800ba62:	4829      	ldr	r0, [pc, #164]	; (800bb08 <__lshift+0xd4>)
 800ba64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ba68:	f000 fd7c 	bl	800c564 <__assert_func>
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	e7ee      	b.n	800ba50 <__lshift+0x1c>
 800ba72:	2300      	movs	r3, #0
 800ba74:	f100 0114 	add.w	r1, r0, #20
 800ba78:	f100 0210 	add.w	r2, r0, #16
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	4553      	cmp	r3, sl
 800ba80:	db33      	blt.n	800baea <__lshift+0xb6>
 800ba82:	6920      	ldr	r0, [r4, #16]
 800ba84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba88:	f104 0314 	add.w	r3, r4, #20
 800ba8c:	f019 091f 	ands.w	r9, r9, #31
 800ba90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba98:	d02b      	beq.n	800baf2 <__lshift+0xbe>
 800ba9a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba9e:	468a      	mov	sl, r1
 800baa0:	2200      	movs	r2, #0
 800baa2:	6818      	ldr	r0, [r3, #0]
 800baa4:	fa00 f009 	lsl.w	r0, r0, r9
 800baa8:	4310      	orrs	r0, r2
 800baaa:	f84a 0b04 	str.w	r0, [sl], #4
 800baae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bab2:	459c      	cmp	ip, r3
 800bab4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bab8:	d8f3      	bhi.n	800baa2 <__lshift+0x6e>
 800baba:	ebac 0304 	sub.w	r3, ip, r4
 800babe:	3b15      	subs	r3, #21
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	3304      	adds	r3, #4
 800bac6:	f104 0015 	add.w	r0, r4, #21
 800baca:	4584      	cmp	ip, r0
 800bacc:	bf38      	it	cc
 800bace:	2304      	movcc	r3, #4
 800bad0:	50ca      	str	r2, [r1, r3]
 800bad2:	b10a      	cbz	r2, 800bad8 <__lshift+0xa4>
 800bad4:	f108 0602 	add.w	r6, r8, #2
 800bad8:	3e01      	subs	r6, #1
 800bada:	4638      	mov	r0, r7
 800badc:	612e      	str	r6, [r5, #16]
 800bade:	4621      	mov	r1, r4
 800bae0:	f7ff fdd8 	bl	800b694 <_Bfree>
 800bae4:	4628      	mov	r0, r5
 800bae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baea:	f842 0f04 	str.w	r0, [r2, #4]!
 800baee:	3301      	adds	r3, #1
 800baf0:	e7c5      	b.n	800ba7e <__lshift+0x4a>
 800baf2:	3904      	subs	r1, #4
 800baf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bafc:	459c      	cmp	ip, r3
 800bafe:	d8f9      	bhi.n	800baf4 <__lshift+0xc0>
 800bb00:	e7ea      	b.n	800bad8 <__lshift+0xa4>
 800bb02:	bf00      	nop
 800bb04:	0800e09d 	.word	0x0800e09d
 800bb08:	0800e0ae 	.word	0x0800e0ae

0800bb0c <__mcmp>:
 800bb0c:	b530      	push	{r4, r5, lr}
 800bb0e:	6902      	ldr	r2, [r0, #16]
 800bb10:	690c      	ldr	r4, [r1, #16]
 800bb12:	1b12      	subs	r2, r2, r4
 800bb14:	d10e      	bne.n	800bb34 <__mcmp+0x28>
 800bb16:	f100 0314 	add.w	r3, r0, #20
 800bb1a:	3114      	adds	r1, #20
 800bb1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb2c:	42a5      	cmp	r5, r4
 800bb2e:	d003      	beq.n	800bb38 <__mcmp+0x2c>
 800bb30:	d305      	bcc.n	800bb3e <__mcmp+0x32>
 800bb32:	2201      	movs	r2, #1
 800bb34:	4610      	mov	r0, r2
 800bb36:	bd30      	pop	{r4, r5, pc}
 800bb38:	4283      	cmp	r3, r0
 800bb3a:	d3f3      	bcc.n	800bb24 <__mcmp+0x18>
 800bb3c:	e7fa      	b.n	800bb34 <__mcmp+0x28>
 800bb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb42:	e7f7      	b.n	800bb34 <__mcmp+0x28>

0800bb44 <__mdiff>:
 800bb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	460c      	mov	r4, r1
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4690      	mov	r8, r2
 800bb52:	f7ff ffdb 	bl	800bb0c <__mcmp>
 800bb56:	1e05      	subs	r5, r0, #0
 800bb58:	d110      	bne.n	800bb7c <__mdiff+0x38>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff fd59 	bl	800b614 <_Balloc>
 800bb62:	b930      	cbnz	r0, 800bb72 <__mdiff+0x2e>
 800bb64:	4b3a      	ldr	r3, [pc, #232]	; (800bc50 <__mdiff+0x10c>)
 800bb66:	4602      	mov	r2, r0
 800bb68:	f240 2137 	movw	r1, #567	; 0x237
 800bb6c:	4839      	ldr	r0, [pc, #228]	; (800bc54 <__mdiff+0x110>)
 800bb6e:	f000 fcf9 	bl	800c564 <__assert_func>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	bfa4      	itt	ge
 800bb7e:	4643      	movge	r3, r8
 800bb80:	46a0      	movge	r8, r4
 800bb82:	4630      	mov	r0, r6
 800bb84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb88:	bfa6      	itte	ge
 800bb8a:	461c      	movge	r4, r3
 800bb8c:	2500      	movge	r5, #0
 800bb8e:	2501      	movlt	r5, #1
 800bb90:	f7ff fd40 	bl	800b614 <_Balloc>
 800bb94:	b920      	cbnz	r0, 800bba0 <__mdiff+0x5c>
 800bb96:	4b2e      	ldr	r3, [pc, #184]	; (800bc50 <__mdiff+0x10c>)
 800bb98:	4602      	mov	r2, r0
 800bb9a:	f240 2145 	movw	r1, #581	; 0x245
 800bb9e:	e7e5      	b.n	800bb6c <__mdiff+0x28>
 800bba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bba4:	6926      	ldr	r6, [r4, #16]
 800bba6:	60c5      	str	r5, [r0, #12]
 800bba8:	f104 0914 	add.w	r9, r4, #20
 800bbac:	f108 0514 	add.w	r5, r8, #20
 800bbb0:	f100 0e14 	add.w	lr, r0, #20
 800bbb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbbc:	f108 0210 	add.w	r2, r8, #16
 800bbc0:	46f2      	mov	sl, lr
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbcc:	fa11 f88b 	uxtah	r8, r1, fp
 800bbd0:	b299      	uxth	r1, r3
 800bbd2:	0c1b      	lsrs	r3, r3, #16
 800bbd4:	eba8 0801 	sub.w	r8, r8, r1
 800bbd8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbdc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bbe0:	fa1f f888 	uxth.w	r8, r8
 800bbe4:	1419      	asrs	r1, r3, #16
 800bbe6:	454e      	cmp	r6, r9
 800bbe8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bbec:	f84a 3b04 	str.w	r3, [sl], #4
 800bbf0:	d8e8      	bhi.n	800bbc4 <__mdiff+0x80>
 800bbf2:	1b33      	subs	r3, r6, r4
 800bbf4:	3b15      	subs	r3, #21
 800bbf6:	f023 0303 	bic.w	r3, r3, #3
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	3415      	adds	r4, #21
 800bbfe:	42a6      	cmp	r6, r4
 800bc00:	bf38      	it	cc
 800bc02:	2304      	movcc	r3, #4
 800bc04:	441d      	add	r5, r3
 800bc06:	4473      	add	r3, lr
 800bc08:	469e      	mov	lr, r3
 800bc0a:	462e      	mov	r6, r5
 800bc0c:	4566      	cmp	r6, ip
 800bc0e:	d30e      	bcc.n	800bc2e <__mdiff+0xea>
 800bc10:	f10c 0203 	add.w	r2, ip, #3
 800bc14:	1b52      	subs	r2, r2, r5
 800bc16:	f022 0203 	bic.w	r2, r2, #3
 800bc1a:	3d03      	subs	r5, #3
 800bc1c:	45ac      	cmp	ip, r5
 800bc1e:	bf38      	it	cc
 800bc20:	2200      	movcc	r2, #0
 800bc22:	4413      	add	r3, r2
 800bc24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc28:	b17a      	cbz	r2, 800bc4a <__mdiff+0x106>
 800bc2a:	6107      	str	r7, [r0, #16]
 800bc2c:	e7a4      	b.n	800bb78 <__mdiff+0x34>
 800bc2e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc32:	fa11 f288 	uxtah	r2, r1, r8
 800bc36:	1414      	asrs	r4, r2, #16
 800bc38:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc3c:	b292      	uxth	r2, r2
 800bc3e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc42:	f84e 2b04 	str.w	r2, [lr], #4
 800bc46:	1421      	asrs	r1, r4, #16
 800bc48:	e7e0      	b.n	800bc0c <__mdiff+0xc8>
 800bc4a:	3f01      	subs	r7, #1
 800bc4c:	e7ea      	b.n	800bc24 <__mdiff+0xe0>
 800bc4e:	bf00      	nop
 800bc50:	0800e09d 	.word	0x0800e09d
 800bc54:	0800e0ae 	.word	0x0800e0ae

0800bc58 <__d2b>:
 800bc58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc5c:	460f      	mov	r7, r1
 800bc5e:	2101      	movs	r1, #1
 800bc60:	ec59 8b10 	vmov	r8, r9, d0
 800bc64:	4616      	mov	r6, r2
 800bc66:	f7ff fcd5 	bl	800b614 <_Balloc>
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	b930      	cbnz	r0, 800bc7c <__d2b+0x24>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	4b24      	ldr	r3, [pc, #144]	; (800bd04 <__d2b+0xac>)
 800bc72:	4825      	ldr	r0, [pc, #148]	; (800bd08 <__d2b+0xb0>)
 800bc74:	f240 310f 	movw	r1, #783	; 0x30f
 800bc78:	f000 fc74 	bl	800c564 <__assert_func>
 800bc7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc84:	bb2d      	cbnz	r5, 800bcd2 <__d2b+0x7a>
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	f1b8 0300 	subs.w	r3, r8, #0
 800bc8c:	d026      	beq.n	800bcdc <__d2b+0x84>
 800bc8e:	4668      	mov	r0, sp
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	f7ff fd87 	bl	800b7a4 <__lo0bits>
 800bc96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc9a:	b1e8      	cbz	r0, 800bcd8 <__d2b+0x80>
 800bc9c:	f1c0 0320 	rsb	r3, r0, #32
 800bca0:	fa02 f303 	lsl.w	r3, r2, r3
 800bca4:	430b      	orrs	r3, r1
 800bca6:	40c2      	lsrs	r2, r0
 800bca8:	6163      	str	r3, [r4, #20]
 800bcaa:	9201      	str	r2, [sp, #4]
 800bcac:	9b01      	ldr	r3, [sp, #4]
 800bcae:	61a3      	str	r3, [r4, #24]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bf14      	ite	ne
 800bcb4:	2202      	movne	r2, #2
 800bcb6:	2201      	moveq	r2, #1
 800bcb8:	6122      	str	r2, [r4, #16]
 800bcba:	b1bd      	cbz	r5, 800bcec <__d2b+0x94>
 800bcbc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcc0:	4405      	add	r5, r0
 800bcc2:	603d      	str	r5, [r7, #0]
 800bcc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bcc8:	6030      	str	r0, [r6, #0]
 800bcca:	4620      	mov	r0, r4
 800bccc:	b003      	add	sp, #12
 800bcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcd6:	e7d6      	b.n	800bc86 <__d2b+0x2e>
 800bcd8:	6161      	str	r1, [r4, #20]
 800bcda:	e7e7      	b.n	800bcac <__d2b+0x54>
 800bcdc:	a801      	add	r0, sp, #4
 800bcde:	f7ff fd61 	bl	800b7a4 <__lo0bits>
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	6163      	str	r3, [r4, #20]
 800bce6:	3020      	adds	r0, #32
 800bce8:	2201      	movs	r2, #1
 800bcea:	e7e5      	b.n	800bcb8 <__d2b+0x60>
 800bcec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bcf4:	6038      	str	r0, [r7, #0]
 800bcf6:	6918      	ldr	r0, [r3, #16]
 800bcf8:	f7ff fd34 	bl	800b764 <__hi0bits>
 800bcfc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd00:	e7e2      	b.n	800bcc8 <__d2b+0x70>
 800bd02:	bf00      	nop
 800bd04:	0800e09d 	.word	0x0800e09d
 800bd08:	0800e0ae 	.word	0x0800e0ae

0800bd0c <__ssputs_r>:
 800bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	688e      	ldr	r6, [r1, #8]
 800bd12:	461f      	mov	r7, r3
 800bd14:	42be      	cmp	r6, r7
 800bd16:	680b      	ldr	r3, [r1, #0]
 800bd18:	4682      	mov	sl, r0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	4690      	mov	r8, r2
 800bd1e:	d82c      	bhi.n	800bd7a <__ssputs_r+0x6e>
 800bd20:	898a      	ldrh	r2, [r1, #12]
 800bd22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd26:	d026      	beq.n	800bd76 <__ssputs_r+0x6a>
 800bd28:	6965      	ldr	r5, [r4, #20]
 800bd2a:	6909      	ldr	r1, [r1, #16]
 800bd2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd30:	eba3 0901 	sub.w	r9, r3, r1
 800bd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd38:	1c7b      	adds	r3, r7, #1
 800bd3a:	444b      	add	r3, r9
 800bd3c:	106d      	asrs	r5, r5, #1
 800bd3e:	429d      	cmp	r5, r3
 800bd40:	bf38      	it	cc
 800bd42:	461d      	movcc	r5, r3
 800bd44:	0553      	lsls	r3, r2, #21
 800bd46:	d527      	bpl.n	800bd98 <__ssputs_r+0x8c>
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7ff fbd7 	bl	800b4fc <_malloc_r>
 800bd4e:	4606      	mov	r6, r0
 800bd50:	b360      	cbz	r0, 800bdac <__ssputs_r+0xa0>
 800bd52:	6921      	ldr	r1, [r4, #16]
 800bd54:	464a      	mov	r2, r9
 800bd56:	f7fe fcd2 	bl	800a6fe <memcpy>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd64:	81a3      	strh	r3, [r4, #12]
 800bd66:	6126      	str	r6, [r4, #16]
 800bd68:	6165      	str	r5, [r4, #20]
 800bd6a:	444e      	add	r6, r9
 800bd6c:	eba5 0509 	sub.w	r5, r5, r9
 800bd70:	6026      	str	r6, [r4, #0]
 800bd72:	60a5      	str	r5, [r4, #8]
 800bd74:	463e      	mov	r6, r7
 800bd76:	42be      	cmp	r6, r7
 800bd78:	d900      	bls.n	800bd7c <__ssputs_r+0x70>
 800bd7a:	463e      	mov	r6, r7
 800bd7c:	6820      	ldr	r0, [r4, #0]
 800bd7e:	4632      	mov	r2, r6
 800bd80:	4641      	mov	r1, r8
 800bd82:	f000 fba3 	bl	800c4cc <memmove>
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	1b9b      	subs	r3, r3, r6
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	4433      	add	r3, r6
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	2000      	movs	r0, #0
 800bd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd98:	462a      	mov	r2, r5
 800bd9a:	f000 fc29 	bl	800c5f0 <_realloc_r>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1e0      	bne.n	800bd66 <__ssputs_r+0x5a>
 800bda4:	6921      	ldr	r1, [r4, #16]
 800bda6:	4650      	mov	r0, sl
 800bda8:	f7ff fb34 	bl	800b414 <_free_r>
 800bdac:	230c      	movs	r3, #12
 800bdae:	f8ca 3000 	str.w	r3, [sl]
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e7e9      	b.n	800bd94 <__ssputs_r+0x88>

0800bdc0 <_svfiprintf_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	4698      	mov	r8, r3
 800bdc6:	898b      	ldrh	r3, [r1, #12]
 800bdc8:	061b      	lsls	r3, r3, #24
 800bdca:	b09d      	sub	sp, #116	; 0x74
 800bdcc:	4607      	mov	r7, r0
 800bdce:	460d      	mov	r5, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	d50e      	bpl.n	800bdf2 <_svfiprintf_r+0x32>
 800bdd4:	690b      	ldr	r3, [r1, #16]
 800bdd6:	b963      	cbnz	r3, 800bdf2 <_svfiprintf_r+0x32>
 800bdd8:	2140      	movs	r1, #64	; 0x40
 800bdda:	f7ff fb8f 	bl	800b4fc <_malloc_r>
 800bdde:	6028      	str	r0, [r5, #0]
 800bde0:	6128      	str	r0, [r5, #16]
 800bde2:	b920      	cbnz	r0, 800bdee <_svfiprintf_r+0x2e>
 800bde4:	230c      	movs	r3, #12
 800bde6:	603b      	str	r3, [r7, #0]
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdec:	e0d0      	b.n	800bf90 <_svfiprintf_r+0x1d0>
 800bdee:	2340      	movs	r3, #64	; 0x40
 800bdf0:	616b      	str	r3, [r5, #20]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf6:	2320      	movs	r3, #32
 800bdf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800be00:	2330      	movs	r3, #48	; 0x30
 800be02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bfa8 <_svfiprintf_r+0x1e8>
 800be06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be0a:	f04f 0901 	mov.w	r9, #1
 800be0e:	4623      	mov	r3, r4
 800be10:	469a      	mov	sl, r3
 800be12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be16:	b10a      	cbz	r2, 800be1c <_svfiprintf_r+0x5c>
 800be18:	2a25      	cmp	r2, #37	; 0x25
 800be1a:	d1f9      	bne.n	800be10 <_svfiprintf_r+0x50>
 800be1c:	ebba 0b04 	subs.w	fp, sl, r4
 800be20:	d00b      	beq.n	800be3a <_svfiprintf_r+0x7a>
 800be22:	465b      	mov	r3, fp
 800be24:	4622      	mov	r2, r4
 800be26:	4629      	mov	r1, r5
 800be28:	4638      	mov	r0, r7
 800be2a:	f7ff ff6f 	bl	800bd0c <__ssputs_r>
 800be2e:	3001      	adds	r0, #1
 800be30:	f000 80a9 	beq.w	800bf86 <_svfiprintf_r+0x1c6>
 800be34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be36:	445a      	add	r2, fp
 800be38:	9209      	str	r2, [sp, #36]	; 0x24
 800be3a:	f89a 3000 	ldrb.w	r3, [sl]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 80a1 	beq.w	800bf86 <_svfiprintf_r+0x1c6>
 800be44:	2300      	movs	r3, #0
 800be46:	f04f 32ff 	mov.w	r2, #4294967295
 800be4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be4e:	f10a 0a01 	add.w	sl, sl, #1
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	9307      	str	r3, [sp, #28]
 800be56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be5a:	931a      	str	r3, [sp, #104]	; 0x68
 800be5c:	4654      	mov	r4, sl
 800be5e:	2205      	movs	r2, #5
 800be60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be64:	4850      	ldr	r0, [pc, #320]	; (800bfa8 <_svfiprintf_r+0x1e8>)
 800be66:	f7f4 f9b3 	bl	80001d0 <memchr>
 800be6a:	9a04      	ldr	r2, [sp, #16]
 800be6c:	b9d8      	cbnz	r0, 800bea6 <_svfiprintf_r+0xe6>
 800be6e:	06d0      	lsls	r0, r2, #27
 800be70:	bf44      	itt	mi
 800be72:	2320      	movmi	r3, #32
 800be74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be78:	0711      	lsls	r1, r2, #28
 800be7a:	bf44      	itt	mi
 800be7c:	232b      	movmi	r3, #43	; 0x2b
 800be7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be82:	f89a 3000 	ldrb.w	r3, [sl]
 800be86:	2b2a      	cmp	r3, #42	; 0x2a
 800be88:	d015      	beq.n	800beb6 <_svfiprintf_r+0xf6>
 800be8a:	9a07      	ldr	r2, [sp, #28]
 800be8c:	4654      	mov	r4, sl
 800be8e:	2000      	movs	r0, #0
 800be90:	f04f 0c0a 	mov.w	ip, #10
 800be94:	4621      	mov	r1, r4
 800be96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9a:	3b30      	subs	r3, #48	; 0x30
 800be9c:	2b09      	cmp	r3, #9
 800be9e:	d94d      	bls.n	800bf3c <_svfiprintf_r+0x17c>
 800bea0:	b1b0      	cbz	r0, 800bed0 <_svfiprintf_r+0x110>
 800bea2:	9207      	str	r2, [sp, #28]
 800bea4:	e014      	b.n	800bed0 <_svfiprintf_r+0x110>
 800bea6:	eba0 0308 	sub.w	r3, r0, r8
 800beaa:	fa09 f303 	lsl.w	r3, r9, r3
 800beae:	4313      	orrs	r3, r2
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	46a2      	mov	sl, r4
 800beb4:	e7d2      	b.n	800be5c <_svfiprintf_r+0x9c>
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	1d19      	adds	r1, r3, #4
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	9103      	str	r1, [sp, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	bfbb      	ittet	lt
 800bec2:	425b      	neglt	r3, r3
 800bec4:	f042 0202 	orrlt.w	r2, r2, #2
 800bec8:	9307      	strge	r3, [sp, #28]
 800beca:	9307      	strlt	r3, [sp, #28]
 800becc:	bfb8      	it	lt
 800bece:	9204      	strlt	r2, [sp, #16]
 800bed0:	7823      	ldrb	r3, [r4, #0]
 800bed2:	2b2e      	cmp	r3, #46	; 0x2e
 800bed4:	d10c      	bne.n	800bef0 <_svfiprintf_r+0x130>
 800bed6:	7863      	ldrb	r3, [r4, #1]
 800bed8:	2b2a      	cmp	r3, #42	; 0x2a
 800beda:	d134      	bne.n	800bf46 <_svfiprintf_r+0x186>
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	1d1a      	adds	r2, r3, #4
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	9203      	str	r2, [sp, #12]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	bfb8      	it	lt
 800bee8:	f04f 33ff 	movlt.w	r3, #4294967295
 800beec:	3402      	adds	r4, #2
 800beee:	9305      	str	r3, [sp, #20]
 800bef0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bfb8 <_svfiprintf_r+0x1f8>
 800bef4:	7821      	ldrb	r1, [r4, #0]
 800bef6:	2203      	movs	r2, #3
 800bef8:	4650      	mov	r0, sl
 800befa:	f7f4 f969 	bl	80001d0 <memchr>
 800befe:	b138      	cbz	r0, 800bf10 <_svfiprintf_r+0x150>
 800bf00:	9b04      	ldr	r3, [sp, #16]
 800bf02:	eba0 000a 	sub.w	r0, r0, sl
 800bf06:	2240      	movs	r2, #64	; 0x40
 800bf08:	4082      	lsls	r2, r0
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	9304      	str	r3, [sp, #16]
 800bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf14:	4825      	ldr	r0, [pc, #148]	; (800bfac <_svfiprintf_r+0x1ec>)
 800bf16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf1a:	2206      	movs	r2, #6
 800bf1c:	f7f4 f958 	bl	80001d0 <memchr>
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d038      	beq.n	800bf96 <_svfiprintf_r+0x1d6>
 800bf24:	4b22      	ldr	r3, [pc, #136]	; (800bfb0 <_svfiprintf_r+0x1f0>)
 800bf26:	bb1b      	cbnz	r3, 800bf70 <_svfiprintf_r+0x1b0>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	3307      	adds	r3, #7
 800bf2c:	f023 0307 	bic.w	r3, r3, #7
 800bf30:	3308      	adds	r3, #8
 800bf32:	9303      	str	r3, [sp, #12]
 800bf34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf36:	4433      	add	r3, r6
 800bf38:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3a:	e768      	b.n	800be0e <_svfiprintf_r+0x4e>
 800bf3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf40:	460c      	mov	r4, r1
 800bf42:	2001      	movs	r0, #1
 800bf44:	e7a6      	b.n	800be94 <_svfiprintf_r+0xd4>
 800bf46:	2300      	movs	r3, #0
 800bf48:	3401      	adds	r4, #1
 800bf4a:	9305      	str	r3, [sp, #20]
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f04f 0c0a 	mov.w	ip, #10
 800bf52:	4620      	mov	r0, r4
 800bf54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf58:	3a30      	subs	r2, #48	; 0x30
 800bf5a:	2a09      	cmp	r2, #9
 800bf5c:	d903      	bls.n	800bf66 <_svfiprintf_r+0x1a6>
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d0c6      	beq.n	800bef0 <_svfiprintf_r+0x130>
 800bf62:	9105      	str	r1, [sp, #20]
 800bf64:	e7c4      	b.n	800bef0 <_svfiprintf_r+0x130>
 800bf66:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e7f0      	b.n	800bf52 <_svfiprintf_r+0x192>
 800bf70:	ab03      	add	r3, sp, #12
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	462a      	mov	r2, r5
 800bf76:	4b0f      	ldr	r3, [pc, #60]	; (800bfb4 <_svfiprintf_r+0x1f4>)
 800bf78:	a904      	add	r1, sp, #16
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f7fd fcf2 	bl	8009964 <_printf_float>
 800bf80:	1c42      	adds	r2, r0, #1
 800bf82:	4606      	mov	r6, r0
 800bf84:	d1d6      	bne.n	800bf34 <_svfiprintf_r+0x174>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	065b      	lsls	r3, r3, #25
 800bf8a:	f53f af2d 	bmi.w	800bde8 <_svfiprintf_r+0x28>
 800bf8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf90:	b01d      	add	sp, #116	; 0x74
 800bf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf96:	ab03      	add	r3, sp, #12
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	462a      	mov	r2, r5
 800bf9c:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <_svfiprintf_r+0x1f4>)
 800bf9e:	a904      	add	r1, sp, #16
 800bfa0:	4638      	mov	r0, r7
 800bfa2:	f7fd ff83 	bl	8009eac <_printf_i>
 800bfa6:	e7eb      	b.n	800bf80 <_svfiprintf_r+0x1c0>
 800bfa8:	0800e204 	.word	0x0800e204
 800bfac:	0800e20e 	.word	0x0800e20e
 800bfb0:	08009965 	.word	0x08009965
 800bfb4:	0800bd0d 	.word	0x0800bd0d
 800bfb8:	0800e20a 	.word	0x0800e20a

0800bfbc <__sfputc_r>:
 800bfbc:	6893      	ldr	r3, [r2, #8]
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	b410      	push	{r4}
 800bfc4:	6093      	str	r3, [r2, #8]
 800bfc6:	da08      	bge.n	800bfda <__sfputc_r+0x1e>
 800bfc8:	6994      	ldr	r4, [r2, #24]
 800bfca:	42a3      	cmp	r3, r4
 800bfcc:	db01      	blt.n	800bfd2 <__sfputc_r+0x16>
 800bfce:	290a      	cmp	r1, #10
 800bfd0:	d103      	bne.n	800bfda <__sfputc_r+0x1e>
 800bfd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfd6:	f7fe ba5a 	b.w	800a48e <__swbuf_r>
 800bfda:	6813      	ldr	r3, [r2, #0]
 800bfdc:	1c58      	adds	r0, r3, #1
 800bfde:	6010      	str	r0, [r2, #0]
 800bfe0:	7019      	strb	r1, [r3, #0]
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe8:	4770      	bx	lr

0800bfea <__sfputs_r>:
 800bfea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	4614      	mov	r4, r2
 800bff2:	18d5      	adds	r5, r2, r3
 800bff4:	42ac      	cmp	r4, r5
 800bff6:	d101      	bne.n	800bffc <__sfputs_r+0x12>
 800bff8:	2000      	movs	r0, #0
 800bffa:	e007      	b.n	800c00c <__sfputs_r+0x22>
 800bffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c000:	463a      	mov	r2, r7
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ffda 	bl	800bfbc <__sfputc_r>
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d1f3      	bne.n	800bff4 <__sfputs_r+0xa>
 800c00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c010 <_vfiprintf_r>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	460d      	mov	r5, r1
 800c016:	b09d      	sub	sp, #116	; 0x74
 800c018:	4614      	mov	r4, r2
 800c01a:	4698      	mov	r8, r3
 800c01c:	4606      	mov	r6, r0
 800c01e:	b118      	cbz	r0, 800c028 <_vfiprintf_r+0x18>
 800c020:	6a03      	ldr	r3, [r0, #32]
 800c022:	b90b      	cbnz	r3, 800c028 <_vfiprintf_r+0x18>
 800c024:	f7fe f8f0 	bl	800a208 <__sinit>
 800c028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c02a:	07d9      	lsls	r1, r3, #31
 800c02c:	d405      	bmi.n	800c03a <_vfiprintf_r+0x2a>
 800c02e:	89ab      	ldrh	r3, [r5, #12]
 800c030:	059a      	lsls	r2, r3, #22
 800c032:	d402      	bmi.n	800c03a <_vfiprintf_r+0x2a>
 800c034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c036:	f7fe fb60 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800c03a:	89ab      	ldrh	r3, [r5, #12]
 800c03c:	071b      	lsls	r3, r3, #28
 800c03e:	d501      	bpl.n	800c044 <_vfiprintf_r+0x34>
 800c040:	692b      	ldr	r3, [r5, #16]
 800c042:	b99b      	cbnz	r3, 800c06c <_vfiprintf_r+0x5c>
 800c044:	4629      	mov	r1, r5
 800c046:	4630      	mov	r0, r6
 800c048:	f7fe fa5e 	bl	800a508 <__swsetup_r>
 800c04c:	b170      	cbz	r0, 800c06c <_vfiprintf_r+0x5c>
 800c04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c050:	07dc      	lsls	r4, r3, #31
 800c052:	d504      	bpl.n	800c05e <_vfiprintf_r+0x4e>
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	b01d      	add	sp, #116	; 0x74
 800c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05e:	89ab      	ldrh	r3, [r5, #12]
 800c060:	0598      	lsls	r0, r3, #22
 800c062:	d4f7      	bmi.n	800c054 <_vfiprintf_r+0x44>
 800c064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c066:	f7fe fb49 	bl	800a6fc <__retarget_lock_release_recursive>
 800c06a:	e7f3      	b.n	800c054 <_vfiprintf_r+0x44>
 800c06c:	2300      	movs	r3, #0
 800c06e:	9309      	str	r3, [sp, #36]	; 0x24
 800c070:	2320      	movs	r3, #32
 800c072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c076:	f8cd 800c 	str.w	r8, [sp, #12]
 800c07a:	2330      	movs	r3, #48	; 0x30
 800c07c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c230 <_vfiprintf_r+0x220>
 800c080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c084:	f04f 0901 	mov.w	r9, #1
 800c088:	4623      	mov	r3, r4
 800c08a:	469a      	mov	sl, r3
 800c08c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c090:	b10a      	cbz	r2, 800c096 <_vfiprintf_r+0x86>
 800c092:	2a25      	cmp	r2, #37	; 0x25
 800c094:	d1f9      	bne.n	800c08a <_vfiprintf_r+0x7a>
 800c096:	ebba 0b04 	subs.w	fp, sl, r4
 800c09a:	d00b      	beq.n	800c0b4 <_vfiprintf_r+0xa4>
 800c09c:	465b      	mov	r3, fp
 800c09e:	4622      	mov	r2, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f7ff ffa1 	bl	800bfea <__sfputs_r>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	f000 80a9 	beq.w	800c200 <_vfiprintf_r+0x1f0>
 800c0ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0b0:	445a      	add	r2, fp
 800c0b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 80a1 	beq.w	800c200 <_vfiprintf_r+0x1f0>
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0c8:	f10a 0a01 	add.w	sl, sl, #1
 800c0cc:	9304      	str	r3, [sp, #16]
 800c0ce:	9307      	str	r3, [sp, #28]
 800c0d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0d4:	931a      	str	r3, [sp, #104]	; 0x68
 800c0d6:	4654      	mov	r4, sl
 800c0d8:	2205      	movs	r2, #5
 800c0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0de:	4854      	ldr	r0, [pc, #336]	; (800c230 <_vfiprintf_r+0x220>)
 800c0e0:	f7f4 f876 	bl	80001d0 <memchr>
 800c0e4:	9a04      	ldr	r2, [sp, #16]
 800c0e6:	b9d8      	cbnz	r0, 800c120 <_vfiprintf_r+0x110>
 800c0e8:	06d1      	lsls	r1, r2, #27
 800c0ea:	bf44      	itt	mi
 800c0ec:	2320      	movmi	r3, #32
 800c0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0f2:	0713      	lsls	r3, r2, #28
 800c0f4:	bf44      	itt	mi
 800c0f6:	232b      	movmi	r3, #43	; 0x2b
 800c0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c100:	2b2a      	cmp	r3, #42	; 0x2a
 800c102:	d015      	beq.n	800c130 <_vfiprintf_r+0x120>
 800c104:	9a07      	ldr	r2, [sp, #28]
 800c106:	4654      	mov	r4, sl
 800c108:	2000      	movs	r0, #0
 800c10a:	f04f 0c0a 	mov.w	ip, #10
 800c10e:	4621      	mov	r1, r4
 800c110:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c114:	3b30      	subs	r3, #48	; 0x30
 800c116:	2b09      	cmp	r3, #9
 800c118:	d94d      	bls.n	800c1b6 <_vfiprintf_r+0x1a6>
 800c11a:	b1b0      	cbz	r0, 800c14a <_vfiprintf_r+0x13a>
 800c11c:	9207      	str	r2, [sp, #28]
 800c11e:	e014      	b.n	800c14a <_vfiprintf_r+0x13a>
 800c120:	eba0 0308 	sub.w	r3, r0, r8
 800c124:	fa09 f303 	lsl.w	r3, r9, r3
 800c128:	4313      	orrs	r3, r2
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	46a2      	mov	sl, r4
 800c12e:	e7d2      	b.n	800c0d6 <_vfiprintf_r+0xc6>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	1d19      	adds	r1, r3, #4
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	9103      	str	r1, [sp, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bfbb      	ittet	lt
 800c13c:	425b      	neglt	r3, r3
 800c13e:	f042 0202 	orrlt.w	r2, r2, #2
 800c142:	9307      	strge	r3, [sp, #28]
 800c144:	9307      	strlt	r3, [sp, #28]
 800c146:	bfb8      	it	lt
 800c148:	9204      	strlt	r2, [sp, #16]
 800c14a:	7823      	ldrb	r3, [r4, #0]
 800c14c:	2b2e      	cmp	r3, #46	; 0x2e
 800c14e:	d10c      	bne.n	800c16a <_vfiprintf_r+0x15a>
 800c150:	7863      	ldrb	r3, [r4, #1]
 800c152:	2b2a      	cmp	r3, #42	; 0x2a
 800c154:	d134      	bne.n	800c1c0 <_vfiprintf_r+0x1b0>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	9203      	str	r2, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfb8      	it	lt
 800c162:	f04f 33ff 	movlt.w	r3, #4294967295
 800c166:	3402      	adds	r4, #2
 800c168:	9305      	str	r3, [sp, #20]
 800c16a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c240 <_vfiprintf_r+0x230>
 800c16e:	7821      	ldrb	r1, [r4, #0]
 800c170:	2203      	movs	r2, #3
 800c172:	4650      	mov	r0, sl
 800c174:	f7f4 f82c 	bl	80001d0 <memchr>
 800c178:	b138      	cbz	r0, 800c18a <_vfiprintf_r+0x17a>
 800c17a:	9b04      	ldr	r3, [sp, #16]
 800c17c:	eba0 000a 	sub.w	r0, r0, sl
 800c180:	2240      	movs	r2, #64	; 0x40
 800c182:	4082      	lsls	r2, r0
 800c184:	4313      	orrs	r3, r2
 800c186:	3401      	adds	r4, #1
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c18e:	4829      	ldr	r0, [pc, #164]	; (800c234 <_vfiprintf_r+0x224>)
 800c190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c194:	2206      	movs	r2, #6
 800c196:	f7f4 f81b 	bl	80001d0 <memchr>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d03f      	beq.n	800c21e <_vfiprintf_r+0x20e>
 800c19e:	4b26      	ldr	r3, [pc, #152]	; (800c238 <_vfiprintf_r+0x228>)
 800c1a0:	bb1b      	cbnz	r3, 800c1ea <_vfiprintf_r+0x1da>
 800c1a2:	9b03      	ldr	r3, [sp, #12]
 800c1a4:	3307      	adds	r3, #7
 800c1a6:	f023 0307 	bic.w	r3, r3, #7
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	9303      	str	r3, [sp, #12]
 800c1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b0:	443b      	add	r3, r7
 800c1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b4:	e768      	b.n	800c088 <_vfiprintf_r+0x78>
 800c1b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	2001      	movs	r0, #1
 800c1be:	e7a6      	b.n	800c10e <_vfiprintf_r+0xfe>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	3401      	adds	r4, #1
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	f04f 0c0a 	mov.w	ip, #10
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1d2:	3a30      	subs	r2, #48	; 0x30
 800c1d4:	2a09      	cmp	r2, #9
 800c1d6:	d903      	bls.n	800c1e0 <_vfiprintf_r+0x1d0>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0c6      	beq.n	800c16a <_vfiprintf_r+0x15a>
 800c1dc:	9105      	str	r1, [sp, #20]
 800c1de:	e7c4      	b.n	800c16a <_vfiprintf_r+0x15a>
 800c1e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e7f0      	b.n	800c1cc <_vfiprintf_r+0x1bc>
 800c1ea:	ab03      	add	r3, sp, #12
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	462a      	mov	r2, r5
 800c1f0:	4b12      	ldr	r3, [pc, #72]	; (800c23c <_vfiprintf_r+0x22c>)
 800c1f2:	a904      	add	r1, sp, #16
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	f7fd fbb5 	bl	8009964 <_printf_float>
 800c1fa:	4607      	mov	r7, r0
 800c1fc:	1c78      	adds	r0, r7, #1
 800c1fe:	d1d6      	bne.n	800c1ae <_vfiprintf_r+0x19e>
 800c200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c202:	07d9      	lsls	r1, r3, #31
 800c204:	d405      	bmi.n	800c212 <_vfiprintf_r+0x202>
 800c206:	89ab      	ldrh	r3, [r5, #12]
 800c208:	059a      	lsls	r2, r3, #22
 800c20a:	d402      	bmi.n	800c212 <_vfiprintf_r+0x202>
 800c20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c20e:	f7fe fa75 	bl	800a6fc <__retarget_lock_release_recursive>
 800c212:	89ab      	ldrh	r3, [r5, #12]
 800c214:	065b      	lsls	r3, r3, #25
 800c216:	f53f af1d 	bmi.w	800c054 <_vfiprintf_r+0x44>
 800c21a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c21c:	e71c      	b.n	800c058 <_vfiprintf_r+0x48>
 800c21e:	ab03      	add	r3, sp, #12
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	462a      	mov	r2, r5
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <_vfiprintf_r+0x22c>)
 800c226:	a904      	add	r1, sp, #16
 800c228:	4630      	mov	r0, r6
 800c22a:	f7fd fe3f 	bl	8009eac <_printf_i>
 800c22e:	e7e4      	b.n	800c1fa <_vfiprintf_r+0x1ea>
 800c230:	0800e204 	.word	0x0800e204
 800c234:	0800e20e 	.word	0x0800e20e
 800c238:	08009965 	.word	0x08009965
 800c23c:	0800bfeb 	.word	0x0800bfeb
 800c240:	0800e20a 	.word	0x0800e20a

0800c244 <__sflush_r>:
 800c244:	898a      	ldrh	r2, [r1, #12]
 800c246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c24a:	4605      	mov	r5, r0
 800c24c:	0710      	lsls	r0, r2, #28
 800c24e:	460c      	mov	r4, r1
 800c250:	d458      	bmi.n	800c304 <__sflush_r+0xc0>
 800c252:	684b      	ldr	r3, [r1, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dc05      	bgt.n	800c264 <__sflush_r+0x20>
 800c258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	dc02      	bgt.n	800c264 <__sflush_r+0x20>
 800c25e:	2000      	movs	r0, #0
 800c260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c266:	2e00      	cmp	r6, #0
 800c268:	d0f9      	beq.n	800c25e <__sflush_r+0x1a>
 800c26a:	2300      	movs	r3, #0
 800c26c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c270:	682f      	ldr	r7, [r5, #0]
 800c272:	6a21      	ldr	r1, [r4, #32]
 800c274:	602b      	str	r3, [r5, #0]
 800c276:	d032      	beq.n	800c2de <__sflush_r+0x9a>
 800c278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	075a      	lsls	r2, r3, #29
 800c27e:	d505      	bpl.n	800c28c <__sflush_r+0x48>
 800c280:	6863      	ldr	r3, [r4, #4]
 800c282:	1ac0      	subs	r0, r0, r3
 800c284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c286:	b10b      	cbz	r3, 800c28c <__sflush_r+0x48>
 800c288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c28a:	1ac0      	subs	r0, r0, r3
 800c28c:	2300      	movs	r3, #0
 800c28e:	4602      	mov	r2, r0
 800c290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c292:	6a21      	ldr	r1, [r4, #32]
 800c294:	4628      	mov	r0, r5
 800c296:	47b0      	blx	r6
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	d106      	bne.n	800c2ac <__sflush_r+0x68>
 800c29e:	6829      	ldr	r1, [r5, #0]
 800c2a0:	291d      	cmp	r1, #29
 800c2a2:	d82b      	bhi.n	800c2fc <__sflush_r+0xb8>
 800c2a4:	4a29      	ldr	r2, [pc, #164]	; (800c34c <__sflush_r+0x108>)
 800c2a6:	410a      	asrs	r2, r1
 800c2a8:	07d6      	lsls	r6, r2, #31
 800c2aa:	d427      	bmi.n	800c2fc <__sflush_r+0xb8>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	6062      	str	r2, [r4, #4]
 800c2b0:	04d9      	lsls	r1, r3, #19
 800c2b2:	6922      	ldr	r2, [r4, #16]
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	d504      	bpl.n	800c2c2 <__sflush_r+0x7e>
 800c2b8:	1c42      	adds	r2, r0, #1
 800c2ba:	d101      	bne.n	800c2c0 <__sflush_r+0x7c>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b903      	cbnz	r3, 800c2c2 <__sflush_r+0x7e>
 800c2c0:	6560      	str	r0, [r4, #84]	; 0x54
 800c2c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2c4:	602f      	str	r7, [r5, #0]
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d0c9      	beq.n	800c25e <__sflush_r+0x1a>
 800c2ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	d002      	beq.n	800c2d8 <__sflush_r+0x94>
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f7ff f89e 	bl	800b414 <_free_r>
 800c2d8:	2000      	movs	r0, #0
 800c2da:	6360      	str	r0, [r4, #52]	; 0x34
 800c2dc:	e7c0      	b.n	800c260 <__sflush_r+0x1c>
 800c2de:	2301      	movs	r3, #1
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b0      	blx	r6
 800c2e4:	1c41      	adds	r1, r0, #1
 800c2e6:	d1c8      	bne.n	800c27a <__sflush_r+0x36>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d0c5      	beq.n	800c27a <__sflush_r+0x36>
 800c2ee:	2b1d      	cmp	r3, #29
 800c2f0:	d001      	beq.n	800c2f6 <__sflush_r+0xb2>
 800c2f2:	2b16      	cmp	r3, #22
 800c2f4:	d101      	bne.n	800c2fa <__sflush_r+0xb6>
 800c2f6:	602f      	str	r7, [r5, #0]
 800c2f8:	e7b1      	b.n	800c25e <__sflush_r+0x1a>
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	e7ad      	b.n	800c260 <__sflush_r+0x1c>
 800c304:	690f      	ldr	r7, [r1, #16]
 800c306:	2f00      	cmp	r7, #0
 800c308:	d0a9      	beq.n	800c25e <__sflush_r+0x1a>
 800c30a:	0793      	lsls	r3, r2, #30
 800c30c:	680e      	ldr	r6, [r1, #0]
 800c30e:	bf08      	it	eq
 800c310:	694b      	ldreq	r3, [r1, #20]
 800c312:	600f      	str	r7, [r1, #0]
 800c314:	bf18      	it	ne
 800c316:	2300      	movne	r3, #0
 800c318:	eba6 0807 	sub.w	r8, r6, r7
 800c31c:	608b      	str	r3, [r1, #8]
 800c31e:	f1b8 0f00 	cmp.w	r8, #0
 800c322:	dd9c      	ble.n	800c25e <__sflush_r+0x1a>
 800c324:	6a21      	ldr	r1, [r4, #32]
 800c326:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c328:	4643      	mov	r3, r8
 800c32a:	463a      	mov	r2, r7
 800c32c:	4628      	mov	r0, r5
 800c32e:	47b0      	blx	r6
 800c330:	2800      	cmp	r0, #0
 800c332:	dc06      	bgt.n	800c342 <__sflush_r+0xfe>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c33a:	81a3      	strh	r3, [r4, #12]
 800c33c:	f04f 30ff 	mov.w	r0, #4294967295
 800c340:	e78e      	b.n	800c260 <__sflush_r+0x1c>
 800c342:	4407      	add	r7, r0
 800c344:	eba8 0800 	sub.w	r8, r8, r0
 800c348:	e7e9      	b.n	800c31e <__sflush_r+0xda>
 800c34a:	bf00      	nop
 800c34c:	dfbffffe 	.word	0xdfbffffe

0800c350 <_fflush_r>:
 800c350:	b538      	push	{r3, r4, r5, lr}
 800c352:	690b      	ldr	r3, [r1, #16]
 800c354:	4605      	mov	r5, r0
 800c356:	460c      	mov	r4, r1
 800c358:	b913      	cbnz	r3, 800c360 <_fflush_r+0x10>
 800c35a:	2500      	movs	r5, #0
 800c35c:	4628      	mov	r0, r5
 800c35e:	bd38      	pop	{r3, r4, r5, pc}
 800c360:	b118      	cbz	r0, 800c36a <_fflush_r+0x1a>
 800c362:	6a03      	ldr	r3, [r0, #32]
 800c364:	b90b      	cbnz	r3, 800c36a <_fflush_r+0x1a>
 800c366:	f7fd ff4f 	bl	800a208 <__sinit>
 800c36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0f3      	beq.n	800c35a <_fflush_r+0xa>
 800c372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c374:	07d0      	lsls	r0, r2, #31
 800c376:	d404      	bmi.n	800c382 <_fflush_r+0x32>
 800c378:	0599      	lsls	r1, r3, #22
 800c37a:	d402      	bmi.n	800c382 <_fflush_r+0x32>
 800c37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c37e:	f7fe f9bc 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800c382:	4628      	mov	r0, r5
 800c384:	4621      	mov	r1, r4
 800c386:	f7ff ff5d 	bl	800c244 <__sflush_r>
 800c38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c38c:	07da      	lsls	r2, r3, #31
 800c38e:	4605      	mov	r5, r0
 800c390:	d4e4      	bmi.n	800c35c <_fflush_r+0xc>
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	059b      	lsls	r3, r3, #22
 800c396:	d4e1      	bmi.n	800c35c <_fflush_r+0xc>
 800c398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39a:	f7fe f9af 	bl	800a6fc <__retarget_lock_release_recursive>
 800c39e:	e7dd      	b.n	800c35c <_fflush_r+0xc>

0800c3a0 <__swhatbuf_r>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	b096      	sub	sp, #88	; 0x58
 800c3ac:	4615      	mov	r5, r2
 800c3ae:	461e      	mov	r6, r3
 800c3b0:	da0d      	bge.n	800c3ce <__swhatbuf_r+0x2e>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3b8:	f04f 0100 	mov.w	r1, #0
 800c3bc:	bf0c      	ite	eq
 800c3be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3c2:	2340      	movne	r3, #64	; 0x40
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	6031      	str	r1, [r6, #0]
 800c3c8:	602b      	str	r3, [r5, #0]
 800c3ca:	b016      	add	sp, #88	; 0x58
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
 800c3ce:	466a      	mov	r2, sp
 800c3d0:	f000 f896 	bl	800c500 <_fstat_r>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	dbec      	blt.n	800c3b2 <__swhatbuf_r+0x12>
 800c3d8:	9901      	ldr	r1, [sp, #4]
 800c3da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c3de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c3e2:	4259      	negs	r1, r3
 800c3e4:	4159      	adcs	r1, r3
 800c3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ea:	e7eb      	b.n	800c3c4 <__swhatbuf_r+0x24>

0800c3ec <__smakebuf_r>:
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3f0:	079d      	lsls	r5, r3, #30
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	d507      	bpl.n	800c408 <__smakebuf_r+0x1c>
 800c3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	2301      	movs	r3, #1
 800c402:	6163      	str	r3, [r4, #20]
 800c404:	b002      	add	sp, #8
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	ab01      	add	r3, sp, #4
 800c40a:	466a      	mov	r2, sp
 800c40c:	f7ff ffc8 	bl	800c3a0 <__swhatbuf_r>
 800c410:	9900      	ldr	r1, [sp, #0]
 800c412:	4605      	mov	r5, r0
 800c414:	4630      	mov	r0, r6
 800c416:	f7ff f871 	bl	800b4fc <_malloc_r>
 800c41a:	b948      	cbnz	r0, 800c430 <__smakebuf_r+0x44>
 800c41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c420:	059a      	lsls	r2, r3, #22
 800c422:	d4ef      	bmi.n	800c404 <__smakebuf_r+0x18>
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	f043 0302 	orr.w	r3, r3, #2
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	e7e3      	b.n	800c3f8 <__smakebuf_r+0xc>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	9b00      	ldr	r3, [sp, #0]
 800c43c:	6163      	str	r3, [r4, #20]
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	6120      	str	r0, [r4, #16]
 800c442:	b15b      	cbz	r3, 800c45c <__smakebuf_r+0x70>
 800c444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c448:	4630      	mov	r0, r6
 800c44a:	f000 f86b 	bl	800c524 <_isatty_r>
 800c44e:	b128      	cbz	r0, 800c45c <__smakebuf_r+0x70>
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	f023 0303 	bic.w	r3, r3, #3
 800c456:	f043 0301 	orr.w	r3, r3, #1
 800c45a:	81a3      	strh	r3, [r4, #12]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	431d      	orrs	r5, r3
 800c460:	81a5      	strh	r5, [r4, #12]
 800c462:	e7cf      	b.n	800c404 <__smakebuf_r+0x18>

0800c464 <_putc_r>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	460d      	mov	r5, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	4606      	mov	r6, r0
 800c46c:	b118      	cbz	r0, 800c476 <_putc_r+0x12>
 800c46e:	6a03      	ldr	r3, [r0, #32]
 800c470:	b90b      	cbnz	r3, 800c476 <_putc_r+0x12>
 800c472:	f7fd fec9 	bl	800a208 <__sinit>
 800c476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c478:	07d8      	lsls	r0, r3, #31
 800c47a:	d405      	bmi.n	800c488 <_putc_r+0x24>
 800c47c:	89a3      	ldrh	r3, [r4, #12]
 800c47e:	0599      	lsls	r1, r3, #22
 800c480:	d402      	bmi.n	800c488 <_putc_r+0x24>
 800c482:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c484:	f7fe f939 	bl	800a6fa <__retarget_lock_acquire_recursive>
 800c488:	68a3      	ldr	r3, [r4, #8]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	60a3      	str	r3, [r4, #8]
 800c490:	da05      	bge.n	800c49e <_putc_r+0x3a>
 800c492:	69a2      	ldr	r2, [r4, #24]
 800c494:	4293      	cmp	r3, r2
 800c496:	db12      	blt.n	800c4be <_putc_r+0x5a>
 800c498:	b2eb      	uxtb	r3, r5
 800c49a:	2b0a      	cmp	r3, #10
 800c49c:	d00f      	beq.n	800c4be <_putc_r+0x5a>
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	6022      	str	r2, [r4, #0]
 800c4a4:	701d      	strb	r5, [r3, #0]
 800c4a6:	b2ed      	uxtb	r5, r5
 800c4a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4aa:	07da      	lsls	r2, r3, #31
 800c4ac:	d405      	bmi.n	800c4ba <_putc_r+0x56>
 800c4ae:	89a3      	ldrh	r3, [r4, #12]
 800c4b0:	059b      	lsls	r3, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_putc_r+0x56>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4b6:	f7fe f921 	bl	800a6fc <__retarget_lock_release_recursive>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
 800c4be:	4629      	mov	r1, r5
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7fd ffe3 	bl	800a48e <__swbuf_r>
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	e7ed      	b.n	800c4a8 <_putc_r+0x44>

0800c4cc <memmove>:
 800c4cc:	4288      	cmp	r0, r1
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	eb01 0402 	add.w	r4, r1, r2
 800c4d4:	d902      	bls.n	800c4dc <memmove+0x10>
 800c4d6:	4284      	cmp	r4, r0
 800c4d8:	4623      	mov	r3, r4
 800c4da:	d807      	bhi.n	800c4ec <memmove+0x20>
 800c4dc:	1e43      	subs	r3, r0, #1
 800c4de:	42a1      	cmp	r1, r4
 800c4e0:	d008      	beq.n	800c4f4 <memmove+0x28>
 800c4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ea:	e7f8      	b.n	800c4de <memmove+0x12>
 800c4ec:	4402      	add	r2, r0
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	428a      	cmp	r2, r1
 800c4f2:	d100      	bne.n	800c4f6 <memmove+0x2a>
 800c4f4:	bd10      	pop	{r4, pc}
 800c4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c4fe:	e7f7      	b.n	800c4f0 <memmove+0x24>

0800c500 <_fstat_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d07      	ldr	r5, [pc, #28]	; (800c520 <_fstat_r+0x20>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	4611      	mov	r1, r2
 800c50c:	602b      	str	r3, [r5, #0]
 800c50e:	f7f8 fdee 	bl	80050ee <_fstat>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d102      	bne.n	800c51c <_fstat_r+0x1c>
 800c516:	682b      	ldr	r3, [r5, #0]
 800c518:	b103      	cbz	r3, 800c51c <_fstat_r+0x1c>
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	bd38      	pop	{r3, r4, r5, pc}
 800c51e:	bf00      	nop
 800c520:	20000e94 	.word	0x20000e94

0800c524 <_isatty_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d06      	ldr	r5, [pc, #24]	; (800c540 <_isatty_r+0x1c>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	602b      	str	r3, [r5, #0]
 800c530:	f7f8 fded 	bl	800510e <_isatty>
 800c534:	1c43      	adds	r3, r0, #1
 800c536:	d102      	bne.n	800c53e <_isatty_r+0x1a>
 800c538:	682b      	ldr	r3, [r5, #0]
 800c53a:	b103      	cbz	r3, 800c53e <_isatty_r+0x1a>
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	bd38      	pop	{r3, r4, r5, pc}
 800c540:	20000e94 	.word	0x20000e94

0800c544 <_sbrk_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d06      	ldr	r5, [pc, #24]	; (800c560 <_sbrk_r+0x1c>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	f7f8 fdf6 	bl	8005140 <_sbrk>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_sbrk_r+0x1a>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_sbrk_r+0x1a>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	20000e94 	.word	0x20000e94

0800c564 <__assert_func>:
 800c564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c566:	4614      	mov	r4, r2
 800c568:	461a      	mov	r2, r3
 800c56a:	4b09      	ldr	r3, [pc, #36]	; (800c590 <__assert_func+0x2c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4605      	mov	r5, r0
 800c570:	68d8      	ldr	r0, [r3, #12]
 800c572:	b14c      	cbz	r4, 800c588 <__assert_func+0x24>
 800c574:	4b07      	ldr	r3, [pc, #28]	; (800c594 <__assert_func+0x30>)
 800c576:	9100      	str	r1, [sp, #0]
 800c578:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c57c:	4906      	ldr	r1, [pc, #24]	; (800c598 <__assert_func+0x34>)
 800c57e:	462b      	mov	r3, r5
 800c580:	f000 f872 	bl	800c668 <fiprintf>
 800c584:	f000 f882 	bl	800c68c <abort>
 800c588:	4b04      	ldr	r3, [pc, #16]	; (800c59c <__assert_func+0x38>)
 800c58a:	461c      	mov	r4, r3
 800c58c:	e7f3      	b.n	800c576 <__assert_func+0x12>
 800c58e:	bf00      	nop
 800c590:	20000090 	.word	0x20000090
 800c594:	0800e21f 	.word	0x0800e21f
 800c598:	0800e22c 	.word	0x0800e22c
 800c59c:	0800e25a 	.word	0x0800e25a

0800c5a0 <_calloc_r>:
 800c5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5a2:	fba1 2402 	umull	r2, r4, r1, r2
 800c5a6:	b94c      	cbnz	r4, 800c5bc <_calloc_r+0x1c>
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	9201      	str	r2, [sp, #4]
 800c5ac:	f7fe ffa6 	bl	800b4fc <_malloc_r>
 800c5b0:	9a01      	ldr	r2, [sp, #4]
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	b930      	cbnz	r0, 800c5c4 <_calloc_r+0x24>
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	b003      	add	sp, #12
 800c5ba:	bd30      	pop	{r4, r5, pc}
 800c5bc:	220c      	movs	r2, #12
 800c5be:	6002      	str	r2, [r0, #0]
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	e7f8      	b.n	800c5b6 <_calloc_r+0x16>
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	f7fd fff7 	bl	800a5b8 <memset>
 800c5ca:	e7f4      	b.n	800c5b6 <_calloc_r+0x16>

0800c5cc <__ascii_mbtowc>:
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	b901      	cbnz	r1, 800c5d2 <__ascii_mbtowc+0x6>
 800c5d0:	a901      	add	r1, sp, #4
 800c5d2:	b142      	cbz	r2, 800c5e6 <__ascii_mbtowc+0x1a>
 800c5d4:	b14b      	cbz	r3, 800c5ea <__ascii_mbtowc+0x1e>
 800c5d6:	7813      	ldrb	r3, [r2, #0]
 800c5d8:	600b      	str	r3, [r1, #0]
 800c5da:	7812      	ldrb	r2, [r2, #0]
 800c5dc:	1e10      	subs	r0, r2, #0
 800c5de:	bf18      	it	ne
 800c5e0:	2001      	movne	r0, #1
 800c5e2:	b002      	add	sp, #8
 800c5e4:	4770      	bx	lr
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	e7fb      	b.n	800c5e2 <__ascii_mbtowc+0x16>
 800c5ea:	f06f 0001 	mvn.w	r0, #1
 800c5ee:	e7f8      	b.n	800c5e2 <__ascii_mbtowc+0x16>

0800c5f0 <_realloc_r>:
 800c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4614      	mov	r4, r2
 800c5f8:	460e      	mov	r6, r1
 800c5fa:	b921      	cbnz	r1, 800c606 <_realloc_r+0x16>
 800c5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	4611      	mov	r1, r2
 800c602:	f7fe bf7b 	b.w	800b4fc <_malloc_r>
 800c606:	b92a      	cbnz	r2, 800c614 <_realloc_r+0x24>
 800c608:	f7fe ff04 	bl	800b414 <_free_r>
 800c60c:	4625      	mov	r5, r4
 800c60e:	4628      	mov	r0, r5
 800c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c614:	f000 f841 	bl	800c69a <_malloc_usable_size_r>
 800c618:	4284      	cmp	r4, r0
 800c61a:	4607      	mov	r7, r0
 800c61c:	d802      	bhi.n	800c624 <_realloc_r+0x34>
 800c61e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c622:	d812      	bhi.n	800c64a <_realloc_r+0x5a>
 800c624:	4621      	mov	r1, r4
 800c626:	4640      	mov	r0, r8
 800c628:	f7fe ff68 	bl	800b4fc <_malloc_r>
 800c62c:	4605      	mov	r5, r0
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0ed      	beq.n	800c60e <_realloc_r+0x1e>
 800c632:	42bc      	cmp	r4, r7
 800c634:	4622      	mov	r2, r4
 800c636:	4631      	mov	r1, r6
 800c638:	bf28      	it	cs
 800c63a:	463a      	movcs	r2, r7
 800c63c:	f7fe f85f 	bl	800a6fe <memcpy>
 800c640:	4631      	mov	r1, r6
 800c642:	4640      	mov	r0, r8
 800c644:	f7fe fee6 	bl	800b414 <_free_r>
 800c648:	e7e1      	b.n	800c60e <_realloc_r+0x1e>
 800c64a:	4635      	mov	r5, r6
 800c64c:	e7df      	b.n	800c60e <_realloc_r+0x1e>

0800c64e <__ascii_wctomb>:
 800c64e:	b149      	cbz	r1, 800c664 <__ascii_wctomb+0x16>
 800c650:	2aff      	cmp	r2, #255	; 0xff
 800c652:	bf85      	ittet	hi
 800c654:	238a      	movhi	r3, #138	; 0x8a
 800c656:	6003      	strhi	r3, [r0, #0]
 800c658:	700a      	strbls	r2, [r1, #0]
 800c65a:	f04f 30ff 	movhi.w	r0, #4294967295
 800c65e:	bf98      	it	ls
 800c660:	2001      	movls	r0, #1
 800c662:	4770      	bx	lr
 800c664:	4608      	mov	r0, r1
 800c666:	4770      	bx	lr

0800c668 <fiprintf>:
 800c668:	b40e      	push	{r1, r2, r3}
 800c66a:	b503      	push	{r0, r1, lr}
 800c66c:	4601      	mov	r1, r0
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	4805      	ldr	r0, [pc, #20]	; (800c688 <fiprintf+0x20>)
 800c672:	f853 2b04 	ldr.w	r2, [r3], #4
 800c676:	6800      	ldr	r0, [r0, #0]
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	f7ff fcc9 	bl	800c010 <_vfiprintf_r>
 800c67e:	b002      	add	sp, #8
 800c680:	f85d eb04 	ldr.w	lr, [sp], #4
 800c684:	b003      	add	sp, #12
 800c686:	4770      	bx	lr
 800c688:	20000090 	.word	0x20000090

0800c68c <abort>:
 800c68c:	b508      	push	{r3, lr}
 800c68e:	2006      	movs	r0, #6
 800c690:	f000 f834 	bl	800c6fc <raise>
 800c694:	2001      	movs	r0, #1
 800c696:	f7f8 fcdb 	bl	8005050 <_exit>

0800c69a <_malloc_usable_size_r>:
 800c69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c69e:	1f18      	subs	r0, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bfbc      	itt	lt
 800c6a4:	580b      	ldrlt	r3, [r1, r0]
 800c6a6:	18c0      	addlt	r0, r0, r3
 800c6a8:	4770      	bx	lr

0800c6aa <_raise_r>:
 800c6aa:	291f      	cmp	r1, #31
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	d904      	bls.n	800c6be <_raise_r+0x14>
 800c6b4:	2316      	movs	r3, #22
 800c6b6:	6003      	str	r3, [r0, #0]
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c6c0:	b112      	cbz	r2, 800c6c8 <_raise_r+0x1e>
 800c6c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6c6:	b94b      	cbnz	r3, 800c6dc <_raise_r+0x32>
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 f831 	bl	800c730 <_getpid_r>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6d8:	f000 b818 	b.w	800c70c <_kill_r>
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d00a      	beq.n	800c6f6 <_raise_r+0x4c>
 800c6e0:	1c59      	adds	r1, r3, #1
 800c6e2:	d103      	bne.n	800c6ec <_raise_r+0x42>
 800c6e4:	2316      	movs	r3, #22
 800c6e6:	6003      	str	r3, [r0, #0]
 800c6e8:	2001      	movs	r0, #1
 800c6ea:	e7e7      	b.n	800c6bc <_raise_r+0x12>
 800c6ec:	2400      	movs	r4, #0
 800c6ee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	4798      	blx	r3
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	e7e0      	b.n	800c6bc <_raise_r+0x12>
	...

0800c6fc <raise>:
 800c6fc:	4b02      	ldr	r3, [pc, #8]	; (800c708 <raise+0xc>)
 800c6fe:	4601      	mov	r1, r0
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	f7ff bfd2 	b.w	800c6aa <_raise_r>
 800c706:	bf00      	nop
 800c708:	20000090 	.word	0x20000090

0800c70c <_kill_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4d07      	ldr	r5, [pc, #28]	; (800c72c <_kill_r+0x20>)
 800c710:	2300      	movs	r3, #0
 800c712:	4604      	mov	r4, r0
 800c714:	4608      	mov	r0, r1
 800c716:	4611      	mov	r1, r2
 800c718:	602b      	str	r3, [r5, #0]
 800c71a:	f7f8 fc89 	bl	8005030 <_kill>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	d102      	bne.n	800c728 <_kill_r+0x1c>
 800c722:	682b      	ldr	r3, [r5, #0]
 800c724:	b103      	cbz	r3, 800c728 <_kill_r+0x1c>
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	bd38      	pop	{r3, r4, r5, pc}
 800c72a:	bf00      	nop
 800c72c:	20000e94 	.word	0x20000e94

0800c730 <_getpid_r>:
 800c730:	f7f8 bc76 	b.w	8005020 <_getpid>

0800c734 <pow>:
 800c734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c736:	ed2d 8b02 	vpush	{d8}
 800c73a:	eeb0 8a40 	vmov.f32	s16, s0
 800c73e:	eef0 8a60 	vmov.f32	s17, s1
 800c742:	ec55 4b11 	vmov	r4, r5, d1
 800c746:	f000 f873 	bl	800c830 <__ieee754_pow>
 800c74a:	4622      	mov	r2, r4
 800c74c:	462b      	mov	r3, r5
 800c74e:	4620      	mov	r0, r4
 800c750:	4629      	mov	r1, r5
 800c752:	ec57 6b10 	vmov	r6, r7, d0
 800c756:	f7f4 f9e9 	bl	8000b2c <__aeabi_dcmpun>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d13b      	bne.n	800c7d6 <pow+0xa2>
 800c75e:	ec51 0b18 	vmov	r0, r1, d8
 800c762:	2200      	movs	r2, #0
 800c764:	2300      	movs	r3, #0
 800c766:	f7f4 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800c76a:	b1b8      	cbz	r0, 800c79c <pow+0x68>
 800c76c:	2200      	movs	r2, #0
 800c76e:	2300      	movs	r3, #0
 800c770:	4620      	mov	r0, r4
 800c772:	4629      	mov	r1, r5
 800c774:	f7f4 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c778:	2800      	cmp	r0, #0
 800c77a:	d146      	bne.n	800c80a <pow+0xd6>
 800c77c:	ec45 4b10 	vmov	d0, r4, r5
 800c780:	f000 f848 	bl	800c814 <finite>
 800c784:	b338      	cbz	r0, 800c7d6 <pow+0xa2>
 800c786:	2200      	movs	r2, #0
 800c788:	2300      	movs	r3, #0
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f4 f9a5 	bl	8000adc <__aeabi_dcmplt>
 800c792:	b300      	cbz	r0, 800c7d6 <pow+0xa2>
 800c794:	f7fd ff86 	bl	800a6a4 <__errno>
 800c798:	2322      	movs	r3, #34	; 0x22
 800c79a:	e01b      	b.n	800c7d4 <pow+0xa0>
 800c79c:	ec47 6b10 	vmov	d0, r6, r7
 800c7a0:	f000 f838 	bl	800c814 <finite>
 800c7a4:	b9e0      	cbnz	r0, 800c7e0 <pow+0xac>
 800c7a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c7aa:	eef0 0a68 	vmov.f32	s1, s17
 800c7ae:	f000 f831 	bl	800c814 <finite>
 800c7b2:	b1a8      	cbz	r0, 800c7e0 <pow+0xac>
 800c7b4:	ec45 4b10 	vmov	d0, r4, r5
 800c7b8:	f000 f82c 	bl	800c814 <finite>
 800c7bc:	b180      	cbz	r0, 800c7e0 <pow+0xac>
 800c7be:	4632      	mov	r2, r6
 800c7c0:	463b      	mov	r3, r7
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	f7f4 f9b1 	bl	8000b2c <__aeabi_dcmpun>
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d0e2      	beq.n	800c794 <pow+0x60>
 800c7ce:	f7fd ff69 	bl	800a6a4 <__errno>
 800c7d2:	2321      	movs	r3, #33	; 0x21
 800c7d4:	6003      	str	r3, [r0, #0]
 800c7d6:	ecbd 8b02 	vpop	{d8}
 800c7da:	ec47 6b10 	vmov	d0, r6, r7
 800c7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	4630      	mov	r0, r6
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	f7f4 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d0f2      	beq.n	800c7d6 <pow+0xa2>
 800c7f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c7f4:	eef0 0a68 	vmov.f32	s1, s17
 800c7f8:	f000 f80c 	bl	800c814 <finite>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d0ea      	beq.n	800c7d6 <pow+0xa2>
 800c800:	ec45 4b10 	vmov	d0, r4, r5
 800c804:	f000 f806 	bl	800c814 <finite>
 800c808:	e7c3      	b.n	800c792 <pow+0x5e>
 800c80a:	4f01      	ldr	r7, [pc, #4]	; (800c810 <pow+0xdc>)
 800c80c:	2600      	movs	r6, #0
 800c80e:	e7e2      	b.n	800c7d6 <pow+0xa2>
 800c810:	3ff00000 	.word	0x3ff00000

0800c814 <finite>:
 800c814:	b082      	sub	sp, #8
 800c816:	ed8d 0b00 	vstr	d0, [sp]
 800c81a:	9801      	ldr	r0, [sp, #4]
 800c81c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c820:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c824:	0fc0      	lsrs	r0, r0, #31
 800c826:	b002      	add	sp, #8
 800c828:	4770      	bx	lr
 800c82a:	0000      	movs	r0, r0
 800c82c:	0000      	movs	r0, r0
	...

0800c830 <__ieee754_pow>:
 800c830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c834:	ed2d 8b06 	vpush	{d8-d10}
 800c838:	b089      	sub	sp, #36	; 0x24
 800c83a:	ed8d 1b00 	vstr	d1, [sp]
 800c83e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c842:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c846:	ea58 0102 	orrs.w	r1, r8, r2
 800c84a:	ec57 6b10 	vmov	r6, r7, d0
 800c84e:	d115      	bne.n	800c87c <__ieee754_pow+0x4c>
 800c850:	19b3      	adds	r3, r6, r6
 800c852:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c856:	4152      	adcs	r2, r2
 800c858:	4299      	cmp	r1, r3
 800c85a:	4b89      	ldr	r3, [pc, #548]	; (800ca80 <__ieee754_pow+0x250>)
 800c85c:	4193      	sbcs	r3, r2
 800c85e:	f080 84d1 	bcs.w	800d204 <__ieee754_pow+0x9d4>
 800c862:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c866:	4630      	mov	r0, r6
 800c868:	4639      	mov	r1, r7
 800c86a:	f7f3 fd0f 	bl	800028c <__adddf3>
 800c86e:	ec41 0b10 	vmov	d0, r0, r1
 800c872:	b009      	add	sp, #36	; 0x24
 800c874:	ecbd 8b06 	vpop	{d8-d10}
 800c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87c:	4b81      	ldr	r3, [pc, #516]	; (800ca84 <__ieee754_pow+0x254>)
 800c87e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c882:	429c      	cmp	r4, r3
 800c884:	ee10 aa10 	vmov	sl, s0
 800c888:	463d      	mov	r5, r7
 800c88a:	dc06      	bgt.n	800c89a <__ieee754_pow+0x6a>
 800c88c:	d101      	bne.n	800c892 <__ieee754_pow+0x62>
 800c88e:	2e00      	cmp	r6, #0
 800c890:	d1e7      	bne.n	800c862 <__ieee754_pow+0x32>
 800c892:	4598      	cmp	r8, r3
 800c894:	dc01      	bgt.n	800c89a <__ieee754_pow+0x6a>
 800c896:	d10f      	bne.n	800c8b8 <__ieee754_pow+0x88>
 800c898:	b172      	cbz	r2, 800c8b8 <__ieee754_pow+0x88>
 800c89a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c89e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c8a2:	ea55 050a 	orrs.w	r5, r5, sl
 800c8a6:	d1dc      	bne.n	800c862 <__ieee754_pow+0x32>
 800c8a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c8ac:	18db      	adds	r3, r3, r3
 800c8ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c8b2:	4152      	adcs	r2, r2
 800c8b4:	429d      	cmp	r5, r3
 800c8b6:	e7d0      	b.n	800c85a <__ieee754_pow+0x2a>
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	da3b      	bge.n	800c934 <__ieee754_pow+0x104>
 800c8bc:	4b72      	ldr	r3, [pc, #456]	; (800ca88 <__ieee754_pow+0x258>)
 800c8be:	4598      	cmp	r8, r3
 800c8c0:	dc51      	bgt.n	800c966 <__ieee754_pow+0x136>
 800c8c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c8c6:	4598      	cmp	r8, r3
 800c8c8:	f340 84ab 	ble.w	800d222 <__ieee754_pow+0x9f2>
 800c8cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c8d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c8d4:	2b14      	cmp	r3, #20
 800c8d6:	dd0f      	ble.n	800c8f8 <__ieee754_pow+0xc8>
 800c8d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c8dc:	fa22 f103 	lsr.w	r1, r2, r3
 800c8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	f040 849c 	bne.w	800d222 <__ieee754_pow+0x9f2>
 800c8ea:	f001 0101 	and.w	r1, r1, #1
 800c8ee:	f1c1 0302 	rsb	r3, r1, #2
 800c8f2:	9304      	str	r3, [sp, #16]
 800c8f4:	b182      	cbz	r2, 800c918 <__ieee754_pow+0xe8>
 800c8f6:	e05f      	b.n	800c9b8 <__ieee754_pow+0x188>
 800c8f8:	2a00      	cmp	r2, #0
 800c8fa:	d15b      	bne.n	800c9b4 <__ieee754_pow+0x184>
 800c8fc:	f1c3 0314 	rsb	r3, r3, #20
 800c900:	fa48 f103 	asr.w	r1, r8, r3
 800c904:	fa01 f303 	lsl.w	r3, r1, r3
 800c908:	4543      	cmp	r3, r8
 800c90a:	f040 8487 	bne.w	800d21c <__ieee754_pow+0x9ec>
 800c90e:	f001 0101 	and.w	r1, r1, #1
 800c912:	f1c1 0302 	rsb	r3, r1, #2
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	4b5c      	ldr	r3, [pc, #368]	; (800ca8c <__ieee754_pow+0x25c>)
 800c91a:	4598      	cmp	r8, r3
 800c91c:	d132      	bne.n	800c984 <__ieee754_pow+0x154>
 800c91e:	f1b9 0f00 	cmp.w	r9, #0
 800c922:	f280 8477 	bge.w	800d214 <__ieee754_pow+0x9e4>
 800c926:	4959      	ldr	r1, [pc, #356]	; (800ca8c <__ieee754_pow+0x25c>)
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	2000      	movs	r0, #0
 800c92e:	f7f3 ff8d 	bl	800084c <__aeabi_ddiv>
 800c932:	e79c      	b.n	800c86e <__ieee754_pow+0x3e>
 800c934:	2300      	movs	r3, #0
 800c936:	9304      	str	r3, [sp, #16]
 800c938:	2a00      	cmp	r2, #0
 800c93a:	d13d      	bne.n	800c9b8 <__ieee754_pow+0x188>
 800c93c:	4b51      	ldr	r3, [pc, #324]	; (800ca84 <__ieee754_pow+0x254>)
 800c93e:	4598      	cmp	r8, r3
 800c940:	d1ea      	bne.n	800c918 <__ieee754_pow+0xe8>
 800c942:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c946:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c94a:	ea53 030a 	orrs.w	r3, r3, sl
 800c94e:	f000 8459 	beq.w	800d204 <__ieee754_pow+0x9d4>
 800c952:	4b4f      	ldr	r3, [pc, #316]	; (800ca90 <__ieee754_pow+0x260>)
 800c954:	429c      	cmp	r4, r3
 800c956:	dd08      	ble.n	800c96a <__ieee754_pow+0x13a>
 800c958:	f1b9 0f00 	cmp.w	r9, #0
 800c95c:	f2c0 8456 	blt.w	800d20c <__ieee754_pow+0x9dc>
 800c960:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c964:	e783      	b.n	800c86e <__ieee754_pow+0x3e>
 800c966:	2302      	movs	r3, #2
 800c968:	e7e5      	b.n	800c936 <__ieee754_pow+0x106>
 800c96a:	f1b9 0f00 	cmp.w	r9, #0
 800c96e:	f04f 0000 	mov.w	r0, #0
 800c972:	f04f 0100 	mov.w	r1, #0
 800c976:	f6bf af7a 	bge.w	800c86e <__ieee754_pow+0x3e>
 800c97a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c97e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c982:	e774      	b.n	800c86e <__ieee754_pow+0x3e>
 800c984:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c988:	d106      	bne.n	800c998 <__ieee754_pow+0x168>
 800c98a:	4632      	mov	r2, r6
 800c98c:	463b      	mov	r3, r7
 800c98e:	4630      	mov	r0, r6
 800c990:	4639      	mov	r1, r7
 800c992:	f7f3 fe31 	bl	80005f8 <__aeabi_dmul>
 800c996:	e76a      	b.n	800c86e <__ieee754_pow+0x3e>
 800c998:	4b3e      	ldr	r3, [pc, #248]	; (800ca94 <__ieee754_pow+0x264>)
 800c99a:	4599      	cmp	r9, r3
 800c99c:	d10c      	bne.n	800c9b8 <__ieee754_pow+0x188>
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	db0a      	blt.n	800c9b8 <__ieee754_pow+0x188>
 800c9a2:	ec47 6b10 	vmov	d0, r6, r7
 800c9a6:	b009      	add	sp, #36	; 0x24
 800c9a8:	ecbd 8b06 	vpop	{d8-d10}
 800c9ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	f000 bd20 	b.w	800d3f4 <__ieee754_sqrt>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	ec47 6b10 	vmov	d0, r6, r7
 800c9bc:	f000 fc62 	bl	800d284 <fabs>
 800c9c0:	ec51 0b10 	vmov	r0, r1, d0
 800c9c4:	f1ba 0f00 	cmp.w	sl, #0
 800c9c8:	d129      	bne.n	800ca1e <__ieee754_pow+0x1ee>
 800c9ca:	b124      	cbz	r4, 800c9d6 <__ieee754_pow+0x1a6>
 800c9cc:	4b2f      	ldr	r3, [pc, #188]	; (800ca8c <__ieee754_pow+0x25c>)
 800c9ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d123      	bne.n	800ca1e <__ieee754_pow+0x1ee>
 800c9d6:	f1b9 0f00 	cmp.w	r9, #0
 800c9da:	da05      	bge.n	800c9e8 <__ieee754_pow+0x1b8>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	492a      	ldr	r1, [pc, #168]	; (800ca8c <__ieee754_pow+0x25c>)
 800c9e4:	f7f3 ff32 	bl	800084c <__aeabi_ddiv>
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	f6bf af40 	bge.w	800c86e <__ieee754_pow+0x3e>
 800c9ee:	9b04      	ldr	r3, [sp, #16]
 800c9f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c9f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c9f8:	431c      	orrs	r4, r3
 800c9fa:	d108      	bne.n	800ca0e <__ieee754_pow+0x1de>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	4610      	mov	r0, r2
 800ca02:	4619      	mov	r1, r3
 800ca04:	f7f3 fc40 	bl	8000288 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	e78f      	b.n	800c92e <__ieee754_pow+0xfe>
 800ca0e:	9b04      	ldr	r3, [sp, #16]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	f47f af2c 	bne.w	800c86e <__ieee754_pow+0x3e>
 800ca16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	e727      	b.n	800c86e <__ieee754_pow+0x3e>
 800ca1e:	0feb      	lsrs	r3, r5, #31
 800ca20:	3b01      	subs	r3, #1
 800ca22:	9306      	str	r3, [sp, #24]
 800ca24:	9a06      	ldr	r2, [sp, #24]
 800ca26:	9b04      	ldr	r3, [sp, #16]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	d102      	bne.n	800ca32 <__ieee754_pow+0x202>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	463b      	mov	r3, r7
 800ca30:	e7e6      	b.n	800ca00 <__ieee754_pow+0x1d0>
 800ca32:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <__ieee754_pow+0x268>)
 800ca34:	4598      	cmp	r8, r3
 800ca36:	f340 80fb 	ble.w	800cc30 <__ieee754_pow+0x400>
 800ca3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ca3e:	4598      	cmp	r8, r3
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <__ieee754_pow+0x260>)
 800ca42:	dd0c      	ble.n	800ca5e <__ieee754_pow+0x22e>
 800ca44:	429c      	cmp	r4, r3
 800ca46:	dc0f      	bgt.n	800ca68 <__ieee754_pow+0x238>
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	da0f      	bge.n	800ca6e <__ieee754_pow+0x23e>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	b009      	add	sp, #36	; 0x24
 800ca52:	ecbd 8b06 	vpop	{d8-d10}
 800ca56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	f000 bcc2 	b.w	800d3e2 <__math_oflow>
 800ca5e:	429c      	cmp	r4, r3
 800ca60:	dbf2      	blt.n	800ca48 <__ieee754_pow+0x218>
 800ca62:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <__ieee754_pow+0x25c>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	dd19      	ble.n	800ca9c <__ieee754_pow+0x26c>
 800ca68:	f1b9 0f00 	cmp.w	r9, #0
 800ca6c:	dcef      	bgt.n	800ca4e <__ieee754_pow+0x21e>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	b009      	add	sp, #36	; 0x24
 800ca72:	ecbd 8b06 	vpop	{d8-d10}
 800ca76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	f000 bca9 	b.w	800d3d0 <__math_uflow>
 800ca7e:	bf00      	nop
 800ca80:	fff00000 	.word	0xfff00000
 800ca84:	7ff00000 	.word	0x7ff00000
 800ca88:	433fffff 	.word	0x433fffff
 800ca8c:	3ff00000 	.word	0x3ff00000
 800ca90:	3fefffff 	.word	0x3fefffff
 800ca94:	3fe00000 	.word	0x3fe00000
 800ca98:	41e00000 	.word	0x41e00000
 800ca9c:	4b60      	ldr	r3, [pc, #384]	; (800cc20 <__ieee754_pow+0x3f0>)
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f7f3 fbf2 	bl	8000288 <__aeabi_dsub>
 800caa4:	a354      	add	r3, pc, #336	; (adr r3, 800cbf8 <__ieee754_pow+0x3c8>)
 800caa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caaa:	4604      	mov	r4, r0
 800caac:	460d      	mov	r5, r1
 800caae:	f7f3 fda3 	bl	80005f8 <__aeabi_dmul>
 800cab2:	a353      	add	r3, pc, #332	; (adr r3, 800cc00 <__ieee754_pow+0x3d0>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	4606      	mov	r6, r0
 800caba:	460f      	mov	r7, r1
 800cabc:	4620      	mov	r0, r4
 800cabe:	4629      	mov	r1, r5
 800cac0:	f7f3 fd9a 	bl	80005f8 <__aeabi_dmul>
 800cac4:	4b57      	ldr	r3, [pc, #348]	; (800cc24 <__ieee754_pow+0x3f4>)
 800cac6:	4682      	mov	sl, r0
 800cac8:	468b      	mov	fp, r1
 800caca:	2200      	movs	r2, #0
 800cacc:	4620      	mov	r0, r4
 800cace:	4629      	mov	r1, r5
 800cad0:	f7f3 fd92 	bl	80005f8 <__aeabi_dmul>
 800cad4:	4602      	mov	r2, r0
 800cad6:	460b      	mov	r3, r1
 800cad8:	a14b      	add	r1, pc, #300	; (adr r1, 800cc08 <__ieee754_pow+0x3d8>)
 800cada:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cade:	f7f3 fbd3 	bl	8000288 <__aeabi_dsub>
 800cae2:	4622      	mov	r2, r4
 800cae4:	462b      	mov	r3, r5
 800cae6:	f7f3 fd87 	bl	80005f8 <__aeabi_dmul>
 800caea:	4602      	mov	r2, r0
 800caec:	460b      	mov	r3, r1
 800caee:	2000      	movs	r0, #0
 800caf0:	494d      	ldr	r1, [pc, #308]	; (800cc28 <__ieee754_pow+0x3f8>)
 800caf2:	f7f3 fbc9 	bl	8000288 <__aeabi_dsub>
 800caf6:	4622      	mov	r2, r4
 800caf8:	4680      	mov	r8, r0
 800cafa:	4689      	mov	r9, r1
 800cafc:	462b      	mov	r3, r5
 800cafe:	4620      	mov	r0, r4
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7f3 fd79 	bl	80005f8 <__aeabi_dmul>
 800cb06:	4602      	mov	r2, r0
 800cb08:	460b      	mov	r3, r1
 800cb0a:	4640      	mov	r0, r8
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	f7f3 fd73 	bl	80005f8 <__aeabi_dmul>
 800cb12:	a33f      	add	r3, pc, #252	; (adr r3, 800cc10 <__ieee754_pow+0x3e0>)
 800cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb18:	f7f3 fd6e 	bl	80005f8 <__aeabi_dmul>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4650      	mov	r0, sl
 800cb22:	4659      	mov	r1, fp
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	4689      	mov	r9, r1
 800cb30:	4630      	mov	r0, r6
 800cb32:	4639      	mov	r1, r7
 800cb34:	f7f3 fbaa 	bl	800028c <__adddf3>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	4632      	mov	r2, r6
 800cb3c:	463b      	mov	r3, r7
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	f7f3 fba1 	bl	8000288 <__aeabi_dsub>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	f7f3 fb9b 	bl	8000288 <__aeabi_dsub>
 800cb52:	9b04      	ldr	r3, [sp, #16]
 800cb54:	9a06      	ldr	r2, [sp, #24]
 800cb56:	3b01      	subs	r3, #1
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	4682      	mov	sl, r0
 800cb5c:	468b      	mov	fp, r1
 800cb5e:	f040 81e7 	bne.w	800cf30 <__ieee754_pow+0x700>
 800cb62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800cc18 <__ieee754_pow+0x3e8>
 800cb66:	eeb0 8a47 	vmov.f32	s16, s14
 800cb6a:	eef0 8a67 	vmov.f32	s17, s15
 800cb6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb72:	2600      	movs	r6, #0
 800cb74:	4632      	mov	r2, r6
 800cb76:	463b      	mov	r3, r7
 800cb78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb7c:	f7f3 fb84 	bl	8000288 <__aeabi_dsub>
 800cb80:	4622      	mov	r2, r4
 800cb82:	462b      	mov	r3, r5
 800cb84:	f7f3 fd38 	bl	80005f8 <__aeabi_dmul>
 800cb88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4689      	mov	r9, r1
 800cb90:	4650      	mov	r0, sl
 800cb92:	4659      	mov	r1, fp
 800cb94:	f7f3 fd30 	bl	80005f8 <__aeabi_dmul>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4649      	mov	r1, r9
 800cba0:	f7f3 fb74 	bl	800028c <__adddf3>
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	4680      	mov	r8, r0
 800cbaa:	4689      	mov	r9, r1
 800cbac:	4620      	mov	r0, r4
 800cbae:	4629      	mov	r1, r5
 800cbb0:	f7f3 fd22 	bl	80005f8 <__aeabi_dmul>
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	460d      	mov	r5, r1
 800cbba:	4602      	mov	r2, r0
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	f7f3 fb64 	bl	800028c <__adddf3>
 800cbc4:	4b19      	ldr	r3, [pc, #100]	; (800cc2c <__ieee754_pow+0x3fc>)
 800cbc6:	4299      	cmp	r1, r3
 800cbc8:	ec45 4b19 	vmov	d9, r4, r5
 800cbcc:	4606      	mov	r6, r0
 800cbce:	460f      	mov	r7, r1
 800cbd0:	468b      	mov	fp, r1
 800cbd2:	f340 82f0 	ble.w	800d1b6 <__ieee754_pow+0x986>
 800cbd6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cbda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cbde:	4303      	orrs	r3, r0
 800cbe0:	f000 81e4 	beq.w	800cfac <__ieee754_pow+0x77c>
 800cbe4:	ec51 0b18 	vmov	r0, r1, d8
 800cbe8:	2200      	movs	r2, #0
 800cbea:	2300      	movs	r3, #0
 800cbec:	f7f3 ff76 	bl	8000adc <__aeabi_dcmplt>
 800cbf0:	3800      	subs	r0, #0
 800cbf2:	bf18      	it	ne
 800cbf4:	2001      	movne	r0, #1
 800cbf6:	e72b      	b.n	800ca50 <__ieee754_pow+0x220>
 800cbf8:	60000000 	.word	0x60000000
 800cbfc:	3ff71547 	.word	0x3ff71547
 800cc00:	f85ddf44 	.word	0xf85ddf44
 800cc04:	3e54ae0b 	.word	0x3e54ae0b
 800cc08:	55555555 	.word	0x55555555
 800cc0c:	3fd55555 	.word	0x3fd55555
 800cc10:	652b82fe 	.word	0x652b82fe
 800cc14:	3ff71547 	.word	0x3ff71547
 800cc18:	00000000 	.word	0x00000000
 800cc1c:	bff00000 	.word	0xbff00000
 800cc20:	3ff00000 	.word	0x3ff00000
 800cc24:	3fd00000 	.word	0x3fd00000
 800cc28:	3fe00000 	.word	0x3fe00000
 800cc2c:	408fffff 	.word	0x408fffff
 800cc30:	4bd5      	ldr	r3, [pc, #852]	; (800cf88 <__ieee754_pow+0x758>)
 800cc32:	402b      	ands	r3, r5
 800cc34:	2200      	movs	r2, #0
 800cc36:	b92b      	cbnz	r3, 800cc44 <__ieee754_pow+0x414>
 800cc38:	4bd4      	ldr	r3, [pc, #848]	; (800cf8c <__ieee754_pow+0x75c>)
 800cc3a:	f7f3 fcdd 	bl	80005f8 <__aeabi_dmul>
 800cc3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cc42:	460c      	mov	r4, r1
 800cc44:	1523      	asrs	r3, r4, #20
 800cc46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cc4a:	4413      	add	r3, r2
 800cc4c:	9305      	str	r3, [sp, #20]
 800cc4e:	4bd0      	ldr	r3, [pc, #832]	; (800cf90 <__ieee754_pow+0x760>)
 800cc50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cc54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cc58:	429c      	cmp	r4, r3
 800cc5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc5e:	dd08      	ble.n	800cc72 <__ieee754_pow+0x442>
 800cc60:	4bcc      	ldr	r3, [pc, #816]	; (800cf94 <__ieee754_pow+0x764>)
 800cc62:	429c      	cmp	r4, r3
 800cc64:	f340 8162 	ble.w	800cf2c <__ieee754_pow+0x6fc>
 800cc68:	9b05      	ldr	r3, [sp, #20]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	9305      	str	r3, [sp, #20]
 800cc6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cc72:	2400      	movs	r4, #0
 800cc74:	00e3      	lsls	r3, r4, #3
 800cc76:	9307      	str	r3, [sp, #28]
 800cc78:	4bc7      	ldr	r3, [pc, #796]	; (800cf98 <__ieee754_pow+0x768>)
 800cc7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc7e:	ed93 7b00 	vldr	d7, [r3]
 800cc82:	4629      	mov	r1, r5
 800cc84:	ec53 2b17 	vmov	r2, r3, d7
 800cc88:	eeb0 9a47 	vmov.f32	s18, s14
 800cc8c:	eef0 9a67 	vmov.f32	s19, s15
 800cc90:	4682      	mov	sl, r0
 800cc92:	f7f3 faf9 	bl	8000288 <__aeabi_dsub>
 800cc96:	4652      	mov	r2, sl
 800cc98:	4606      	mov	r6, r0
 800cc9a:	460f      	mov	r7, r1
 800cc9c:	462b      	mov	r3, r5
 800cc9e:	ec51 0b19 	vmov	r0, r1, d9
 800cca2:	f7f3 faf3 	bl	800028c <__adddf3>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	2000      	movs	r0, #0
 800ccac:	49bb      	ldr	r1, [pc, #748]	; (800cf9c <__ieee754_pow+0x76c>)
 800ccae:	f7f3 fdcd 	bl	800084c <__aeabi_ddiv>
 800ccb2:	ec41 0b1a 	vmov	d10, r0, r1
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccc8:	9302      	str	r3, [sp, #8]
 800ccca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccce:	46ab      	mov	fp, r5
 800ccd0:	106d      	asrs	r5, r5, #1
 800ccd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ccd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ccda:	ec41 0b18 	vmov	d8, r0, r1
 800ccde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cce2:	2200      	movs	r2, #0
 800cce4:	4640      	mov	r0, r8
 800cce6:	4649      	mov	r1, r9
 800cce8:	4614      	mov	r4, r2
 800ccea:	461d      	mov	r5, r3
 800ccec:	f7f3 fc84 	bl	80005f8 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f7f3 fac6 	bl	8000288 <__aeabi_dsub>
 800ccfc:	ec53 2b19 	vmov	r2, r3, d9
 800cd00:	4606      	mov	r6, r0
 800cd02:	460f      	mov	r7, r1
 800cd04:	4620      	mov	r0, r4
 800cd06:	4629      	mov	r1, r5
 800cd08:	f7f3 fabe 	bl	8000288 <__aeabi_dsub>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4650      	mov	r0, sl
 800cd12:	4659      	mov	r1, fp
 800cd14:	f7f3 fab8 	bl	8000288 <__aeabi_dsub>
 800cd18:	4642      	mov	r2, r8
 800cd1a:	464b      	mov	r3, r9
 800cd1c:	f7f3 fc6c 	bl	80005f8 <__aeabi_dmul>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4630      	mov	r0, r6
 800cd26:	4639      	mov	r1, r7
 800cd28:	f7f3 faae 	bl	8000288 <__aeabi_dsub>
 800cd2c:	ec53 2b1a 	vmov	r2, r3, d10
 800cd30:	f7f3 fc62 	bl	80005f8 <__aeabi_dmul>
 800cd34:	ec53 2b18 	vmov	r2, r3, d8
 800cd38:	ec41 0b19 	vmov	d9, r0, r1
 800cd3c:	ec51 0b18 	vmov	r0, r1, d8
 800cd40:	f7f3 fc5a 	bl	80005f8 <__aeabi_dmul>
 800cd44:	a37c      	add	r3, pc, #496	; (adr r3, 800cf38 <__ieee754_pow+0x708>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	f7f3 fc53 	bl	80005f8 <__aeabi_dmul>
 800cd52:	a37b      	add	r3, pc, #492	; (adr r3, 800cf40 <__ieee754_pow+0x710>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	f7f3 fa98 	bl	800028c <__adddf3>
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	462b      	mov	r3, r5
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	a378      	add	r3, pc, #480	; (adr r3, 800cf48 <__ieee754_pow+0x718>)
 800cd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6a:	f7f3 fa8f 	bl	800028c <__adddf3>
 800cd6e:	4622      	mov	r2, r4
 800cd70:	462b      	mov	r3, r5
 800cd72:	f7f3 fc41 	bl	80005f8 <__aeabi_dmul>
 800cd76:	a376      	add	r3, pc, #472	; (adr r3, 800cf50 <__ieee754_pow+0x720>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	f7f3 fa86 	bl	800028c <__adddf3>
 800cd80:	4622      	mov	r2, r4
 800cd82:	462b      	mov	r3, r5
 800cd84:	f7f3 fc38 	bl	80005f8 <__aeabi_dmul>
 800cd88:	a373      	add	r3, pc, #460	; (adr r3, 800cf58 <__ieee754_pow+0x728>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7f3 fa7d 	bl	800028c <__adddf3>
 800cd92:	4622      	mov	r2, r4
 800cd94:	462b      	mov	r3, r5
 800cd96:	f7f3 fc2f 	bl	80005f8 <__aeabi_dmul>
 800cd9a:	a371      	add	r3, pc, #452	; (adr r3, 800cf60 <__ieee754_pow+0x730>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	f7f3 fa74 	bl	800028c <__adddf3>
 800cda4:	4622      	mov	r2, r4
 800cda6:	4606      	mov	r6, r0
 800cda8:	460f      	mov	r7, r1
 800cdaa:	462b      	mov	r3, r5
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	4642      	mov	r2, r8
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	460d      	mov	r5, r1
 800cdc6:	464b      	mov	r3, r9
 800cdc8:	ec51 0b18 	vmov	r0, r1, d8
 800cdcc:	f7f3 fa5e 	bl	800028c <__adddf3>
 800cdd0:	ec53 2b19 	vmov	r2, r3, d9
 800cdd4:	f7f3 fc10 	bl	80005f8 <__aeabi_dmul>
 800cdd8:	4622      	mov	r2, r4
 800cdda:	462b      	mov	r3, r5
 800cddc:	f7f3 fa56 	bl	800028c <__adddf3>
 800cde0:	4642      	mov	r2, r8
 800cde2:	4682      	mov	sl, r0
 800cde4:	468b      	mov	fp, r1
 800cde6:	464b      	mov	r3, r9
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	f7f3 fc04 	bl	80005f8 <__aeabi_dmul>
 800cdf0:	4b6b      	ldr	r3, [pc, #428]	; (800cfa0 <__ieee754_pow+0x770>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	f7f3 fa48 	bl	800028c <__adddf3>
 800cdfc:	4652      	mov	r2, sl
 800cdfe:	465b      	mov	r3, fp
 800ce00:	f7f3 fa44 	bl	800028c <__adddf3>
 800ce04:	2000      	movs	r0, #0
 800ce06:	4604      	mov	r4, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	4640      	mov	r0, r8
 800ce10:	4649      	mov	r1, r9
 800ce12:	f7f3 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ce16:	4b62      	ldr	r3, [pc, #392]	; (800cfa0 <__ieee754_pow+0x770>)
 800ce18:	4680      	mov	r8, r0
 800ce1a:	4689      	mov	r9, r1
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fa31 	bl	8000288 <__aeabi_dsub>
 800ce26:	4632      	mov	r2, r6
 800ce28:	463b      	mov	r3, r7
 800ce2a:	f7f3 fa2d 	bl	8000288 <__aeabi_dsub>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4650      	mov	r0, sl
 800ce34:	4659      	mov	r1, fp
 800ce36:	f7f3 fa27 	bl	8000288 <__aeabi_dsub>
 800ce3a:	ec53 2b18 	vmov	r2, r3, d8
 800ce3e:	f7f3 fbdb 	bl	80005f8 <__aeabi_dmul>
 800ce42:	4622      	mov	r2, r4
 800ce44:	4606      	mov	r6, r0
 800ce46:	460f      	mov	r7, r1
 800ce48:	462b      	mov	r3, r5
 800ce4a:	ec51 0b19 	vmov	r0, r1, d9
 800ce4e:	f7f3 fbd3 	bl	80005f8 <__aeabi_dmul>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4630      	mov	r0, r6
 800ce58:	4639      	mov	r1, r7
 800ce5a:	f7f3 fa17 	bl	800028c <__adddf3>
 800ce5e:	4606      	mov	r6, r0
 800ce60:	460f      	mov	r7, r1
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	4640      	mov	r0, r8
 800ce68:	4649      	mov	r1, r9
 800ce6a:	f7f3 fa0f 	bl	800028c <__adddf3>
 800ce6e:	a33e      	add	r3, pc, #248	; (adr r3, 800cf68 <__ieee754_pow+0x738>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	2000      	movs	r0, #0
 800ce76:	4604      	mov	r4, r0
 800ce78:	460d      	mov	r5, r1
 800ce7a:	f7f3 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ce7e:	4642      	mov	r2, r8
 800ce80:	ec41 0b18 	vmov	d8, r0, r1
 800ce84:	464b      	mov	r3, r9
 800ce86:	4620      	mov	r0, r4
 800ce88:	4629      	mov	r1, r5
 800ce8a:	f7f3 f9fd 	bl	8000288 <__aeabi_dsub>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4630      	mov	r0, r6
 800ce94:	4639      	mov	r1, r7
 800ce96:	f7f3 f9f7 	bl	8000288 <__aeabi_dsub>
 800ce9a:	a335      	add	r3, pc, #212	; (adr r3, 800cf70 <__ieee754_pow+0x740>)
 800ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea0:	f7f3 fbaa 	bl	80005f8 <__aeabi_dmul>
 800cea4:	a334      	add	r3, pc, #208	; (adr r3, 800cf78 <__ieee754_pow+0x748>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460f      	mov	r7, r1
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 fba1 	bl	80005f8 <__aeabi_dmul>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	460b      	mov	r3, r1
 800ceba:	4630      	mov	r0, r6
 800cebc:	4639      	mov	r1, r7
 800cebe:	f7f3 f9e5 	bl	800028c <__adddf3>
 800cec2:	9a07      	ldr	r2, [sp, #28]
 800cec4:	4b37      	ldr	r3, [pc, #220]	; (800cfa4 <__ieee754_pow+0x774>)
 800cec6:	4413      	add	r3, r2
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	f7f3 f9de 	bl	800028c <__adddf3>
 800ced0:	4682      	mov	sl, r0
 800ced2:	9805      	ldr	r0, [sp, #20]
 800ced4:	468b      	mov	fp, r1
 800ced6:	f7f3 fb25 	bl	8000524 <__aeabi_i2d>
 800ceda:	9a07      	ldr	r2, [sp, #28]
 800cedc:	4b32      	ldr	r3, [pc, #200]	; (800cfa8 <__ieee754_pow+0x778>)
 800cede:	4413      	add	r3, r2
 800cee0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	4652      	mov	r2, sl
 800ceea:	465b      	mov	r3, fp
 800ceec:	ec51 0b18 	vmov	r0, r1, d8
 800cef0:	f7f3 f9cc 	bl	800028c <__adddf3>
 800cef4:	4642      	mov	r2, r8
 800cef6:	464b      	mov	r3, r9
 800cef8:	f7f3 f9c8 	bl	800028c <__adddf3>
 800cefc:	4632      	mov	r2, r6
 800cefe:	463b      	mov	r3, r7
 800cf00:	f7f3 f9c4 	bl	800028c <__adddf3>
 800cf04:	2000      	movs	r0, #0
 800cf06:	4632      	mov	r2, r6
 800cf08:	463b      	mov	r3, r7
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	460d      	mov	r5, r1
 800cf0e:	f7f3 f9bb 	bl	8000288 <__aeabi_dsub>
 800cf12:	4642      	mov	r2, r8
 800cf14:	464b      	mov	r3, r9
 800cf16:	f7f3 f9b7 	bl	8000288 <__aeabi_dsub>
 800cf1a:	ec53 2b18 	vmov	r2, r3, d8
 800cf1e:	f7f3 f9b3 	bl	8000288 <__aeabi_dsub>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	4650      	mov	r0, sl
 800cf28:	4659      	mov	r1, fp
 800cf2a:	e610      	b.n	800cb4e <__ieee754_pow+0x31e>
 800cf2c:	2401      	movs	r4, #1
 800cf2e:	e6a1      	b.n	800cc74 <__ieee754_pow+0x444>
 800cf30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cf80 <__ieee754_pow+0x750>
 800cf34:	e617      	b.n	800cb66 <__ieee754_pow+0x336>
 800cf36:	bf00      	nop
 800cf38:	4a454eef 	.word	0x4a454eef
 800cf3c:	3fca7e28 	.word	0x3fca7e28
 800cf40:	93c9db65 	.word	0x93c9db65
 800cf44:	3fcd864a 	.word	0x3fcd864a
 800cf48:	a91d4101 	.word	0xa91d4101
 800cf4c:	3fd17460 	.word	0x3fd17460
 800cf50:	518f264d 	.word	0x518f264d
 800cf54:	3fd55555 	.word	0x3fd55555
 800cf58:	db6fabff 	.word	0xdb6fabff
 800cf5c:	3fdb6db6 	.word	0x3fdb6db6
 800cf60:	33333303 	.word	0x33333303
 800cf64:	3fe33333 	.word	0x3fe33333
 800cf68:	e0000000 	.word	0xe0000000
 800cf6c:	3feec709 	.word	0x3feec709
 800cf70:	dc3a03fd 	.word	0xdc3a03fd
 800cf74:	3feec709 	.word	0x3feec709
 800cf78:	145b01f5 	.word	0x145b01f5
 800cf7c:	be3e2fe0 	.word	0xbe3e2fe0
 800cf80:	00000000 	.word	0x00000000
 800cf84:	3ff00000 	.word	0x3ff00000
 800cf88:	7ff00000 	.word	0x7ff00000
 800cf8c:	43400000 	.word	0x43400000
 800cf90:	0003988e 	.word	0x0003988e
 800cf94:	000bb679 	.word	0x000bb679
 800cf98:	0800e260 	.word	0x0800e260
 800cf9c:	3ff00000 	.word	0x3ff00000
 800cfa0:	40080000 	.word	0x40080000
 800cfa4:	0800e280 	.word	0x0800e280
 800cfa8:	0800e270 	.word	0x0800e270
 800cfac:	a3b3      	add	r3, pc, #716	; (adr r3, 800d27c <__ieee754_pow+0xa4c>)
 800cfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb2:	4640      	mov	r0, r8
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	f7f3 f969 	bl	800028c <__adddf3>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	ec41 0b1a 	vmov	d10, r0, r1
 800cfc0:	462b      	mov	r3, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	f7f3 f95f 	bl	8000288 <__aeabi_dsub>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	460b      	mov	r3, r1
 800cfce:	ec51 0b1a 	vmov	r0, r1, d10
 800cfd2:	f7f3 fda1 	bl	8000b18 <__aeabi_dcmpgt>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	f47f ae04 	bne.w	800cbe4 <__ieee754_pow+0x3b4>
 800cfdc:	4aa2      	ldr	r2, [pc, #648]	; (800d268 <__ieee754_pow+0xa38>)
 800cfde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	f340 8107 	ble.w	800d1f6 <__ieee754_pow+0x9c6>
 800cfe8:	151b      	asrs	r3, r3, #20
 800cfea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cfee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cff2:	fa4a fa03 	asr.w	sl, sl, r3
 800cff6:	44da      	add	sl, fp
 800cff8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cffc:	489b      	ldr	r0, [pc, #620]	; (800d26c <__ieee754_pow+0xa3c>)
 800cffe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d002:	4108      	asrs	r0, r1
 800d004:	ea00 030a 	and.w	r3, r0, sl
 800d008:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d00c:	f1c1 0114 	rsb	r1, r1, #20
 800d010:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d014:	fa4a fa01 	asr.w	sl, sl, r1
 800d018:	f1bb 0f00 	cmp.w	fp, #0
 800d01c:	f04f 0200 	mov.w	r2, #0
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	bfb8      	it	lt
 800d026:	f1ca 0a00 	rsblt	sl, sl, #0
 800d02a:	f7f3 f92d 	bl	8000288 <__aeabi_dsub>
 800d02e:	ec41 0b19 	vmov	d9, r0, r1
 800d032:	4642      	mov	r2, r8
 800d034:	464b      	mov	r3, r9
 800d036:	ec51 0b19 	vmov	r0, r1, d9
 800d03a:	f7f3 f927 	bl	800028c <__adddf3>
 800d03e:	a37a      	add	r3, pc, #488	; (adr r3, 800d228 <__ieee754_pow+0x9f8>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	2000      	movs	r0, #0
 800d046:	4604      	mov	r4, r0
 800d048:	460d      	mov	r5, r1
 800d04a:	f7f3 fad5 	bl	80005f8 <__aeabi_dmul>
 800d04e:	ec53 2b19 	vmov	r2, r3, d9
 800d052:	4606      	mov	r6, r0
 800d054:	460f      	mov	r7, r1
 800d056:	4620      	mov	r0, r4
 800d058:	4629      	mov	r1, r5
 800d05a:	f7f3 f915 	bl	8000288 <__aeabi_dsub>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	4640      	mov	r0, r8
 800d064:	4649      	mov	r1, r9
 800d066:	f7f3 f90f 	bl	8000288 <__aeabi_dsub>
 800d06a:	a371      	add	r3, pc, #452	; (adr r3, 800d230 <__ieee754_pow+0xa00>)
 800d06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d070:	f7f3 fac2 	bl	80005f8 <__aeabi_dmul>
 800d074:	a370      	add	r3, pc, #448	; (adr r3, 800d238 <__ieee754_pow+0xa08>)
 800d076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d07a:	4680      	mov	r8, r0
 800d07c:	4689      	mov	r9, r1
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 fab9 	bl	80005f8 <__aeabi_dmul>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	f7f3 f8fd 	bl	800028c <__adddf3>
 800d092:	4604      	mov	r4, r0
 800d094:	460d      	mov	r5, r1
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4630      	mov	r0, r6
 800d09c:	4639      	mov	r1, r7
 800d09e:	f7f3 f8f5 	bl	800028c <__adddf3>
 800d0a2:	4632      	mov	r2, r6
 800d0a4:	463b      	mov	r3, r7
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4689      	mov	r9, r1
 800d0aa:	f7f3 f8ed 	bl	8000288 <__aeabi_dsub>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7f3 f8e7 	bl	8000288 <__aeabi_dsub>
 800d0ba:	4642      	mov	r2, r8
 800d0bc:	4606      	mov	r6, r0
 800d0be:	460f      	mov	r7, r1
 800d0c0:	464b      	mov	r3, r9
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	4649      	mov	r1, r9
 800d0c6:	f7f3 fa97 	bl	80005f8 <__aeabi_dmul>
 800d0ca:	a35d      	add	r3, pc, #372	; (adr r3, 800d240 <__ieee754_pow+0xa10>)
 800d0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	460d      	mov	r5, r1
 800d0d4:	f7f3 fa90 	bl	80005f8 <__aeabi_dmul>
 800d0d8:	a35b      	add	r3, pc, #364	; (adr r3, 800d248 <__ieee754_pow+0xa18>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 f8d3 	bl	8000288 <__aeabi_dsub>
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	462b      	mov	r3, r5
 800d0e6:	f7f3 fa87 	bl	80005f8 <__aeabi_dmul>
 800d0ea:	a359      	add	r3, pc, #356	; (adr r3, 800d250 <__ieee754_pow+0xa20>)
 800d0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f0:	f7f3 f8cc 	bl	800028c <__adddf3>
 800d0f4:	4622      	mov	r2, r4
 800d0f6:	462b      	mov	r3, r5
 800d0f8:	f7f3 fa7e 	bl	80005f8 <__aeabi_dmul>
 800d0fc:	a356      	add	r3, pc, #344	; (adr r3, 800d258 <__ieee754_pow+0xa28>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8c1 	bl	8000288 <__aeabi_dsub>
 800d106:	4622      	mov	r2, r4
 800d108:	462b      	mov	r3, r5
 800d10a:	f7f3 fa75 	bl	80005f8 <__aeabi_dmul>
 800d10e:	a354      	add	r3, pc, #336	; (adr r3, 800d260 <__ieee754_pow+0xa30>)
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	f7f3 f8ba 	bl	800028c <__adddf3>
 800d118:	4622      	mov	r2, r4
 800d11a:	462b      	mov	r3, r5
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4640      	mov	r0, r8
 800d126:	4649      	mov	r1, r9
 800d128:	f7f3 f8ae 	bl	8000288 <__aeabi_dsub>
 800d12c:	4604      	mov	r4, r0
 800d12e:	460d      	mov	r5, r1
 800d130:	4602      	mov	r2, r0
 800d132:	460b      	mov	r3, r1
 800d134:	4640      	mov	r0, r8
 800d136:	4649      	mov	r1, r9
 800d138:	f7f3 fa5e 	bl	80005f8 <__aeabi_dmul>
 800d13c:	2200      	movs	r2, #0
 800d13e:	ec41 0b19 	vmov	d9, r0, r1
 800d142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	f7f3 f89d 	bl	8000288 <__aeabi_dsub>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	ec51 0b19 	vmov	r0, r1, d9
 800d156:	f7f3 fb79 	bl	800084c <__aeabi_ddiv>
 800d15a:	4632      	mov	r2, r6
 800d15c:	4604      	mov	r4, r0
 800d15e:	460d      	mov	r5, r1
 800d160:	463b      	mov	r3, r7
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	f7f3 fa47 	bl	80005f8 <__aeabi_dmul>
 800d16a:	4632      	mov	r2, r6
 800d16c:	463b      	mov	r3, r7
 800d16e:	f7f3 f88d 	bl	800028c <__adddf3>
 800d172:	4602      	mov	r2, r0
 800d174:	460b      	mov	r3, r1
 800d176:	4620      	mov	r0, r4
 800d178:	4629      	mov	r1, r5
 800d17a:	f7f3 f885 	bl	8000288 <__aeabi_dsub>
 800d17e:	4642      	mov	r2, r8
 800d180:	464b      	mov	r3, r9
 800d182:	f7f3 f881 	bl	8000288 <__aeabi_dsub>
 800d186:	460b      	mov	r3, r1
 800d188:	4602      	mov	r2, r0
 800d18a:	4939      	ldr	r1, [pc, #228]	; (800d270 <__ieee754_pow+0xa40>)
 800d18c:	2000      	movs	r0, #0
 800d18e:	f7f3 f87b 	bl	8000288 <__aeabi_dsub>
 800d192:	ec41 0b10 	vmov	d0, r0, r1
 800d196:	ee10 3a90 	vmov	r3, s1
 800d19a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d19e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1a2:	da2b      	bge.n	800d1fc <__ieee754_pow+0x9cc>
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	f000 f877 	bl	800d298 <scalbn>
 800d1aa:	ec51 0b10 	vmov	r0, r1, d0
 800d1ae:	ec53 2b18 	vmov	r2, r3, d8
 800d1b2:	f7ff bbee 	b.w	800c992 <__ieee754_pow+0x162>
 800d1b6:	4b2f      	ldr	r3, [pc, #188]	; (800d274 <__ieee754_pow+0xa44>)
 800d1b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d1bc:	429e      	cmp	r6, r3
 800d1be:	f77f af0d 	ble.w	800cfdc <__ieee754_pow+0x7ac>
 800d1c2:	4b2d      	ldr	r3, [pc, #180]	; (800d278 <__ieee754_pow+0xa48>)
 800d1c4:	440b      	add	r3, r1
 800d1c6:	4303      	orrs	r3, r0
 800d1c8:	d009      	beq.n	800d1de <__ieee754_pow+0x9ae>
 800d1ca:	ec51 0b18 	vmov	r0, r1, d8
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f7f3 fc83 	bl	8000adc <__aeabi_dcmplt>
 800d1d6:	3800      	subs	r0, #0
 800d1d8:	bf18      	it	ne
 800d1da:	2001      	movne	r0, #1
 800d1dc:	e448      	b.n	800ca70 <__ieee754_pow+0x240>
 800d1de:	4622      	mov	r2, r4
 800d1e0:	462b      	mov	r3, r5
 800d1e2:	f7f3 f851 	bl	8000288 <__aeabi_dsub>
 800d1e6:	4642      	mov	r2, r8
 800d1e8:	464b      	mov	r3, r9
 800d1ea:	f7f3 fc8b 	bl	8000b04 <__aeabi_dcmpge>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f43f aef4 	beq.w	800cfdc <__ieee754_pow+0x7ac>
 800d1f4:	e7e9      	b.n	800d1ca <__ieee754_pow+0x99a>
 800d1f6:	f04f 0a00 	mov.w	sl, #0
 800d1fa:	e71a      	b.n	800d032 <__ieee754_pow+0x802>
 800d1fc:	ec51 0b10 	vmov	r0, r1, d0
 800d200:	4619      	mov	r1, r3
 800d202:	e7d4      	b.n	800d1ae <__ieee754_pow+0x97e>
 800d204:	491a      	ldr	r1, [pc, #104]	; (800d270 <__ieee754_pow+0xa40>)
 800d206:	2000      	movs	r0, #0
 800d208:	f7ff bb31 	b.w	800c86e <__ieee754_pow+0x3e>
 800d20c:	2000      	movs	r0, #0
 800d20e:	2100      	movs	r1, #0
 800d210:	f7ff bb2d 	b.w	800c86e <__ieee754_pow+0x3e>
 800d214:	4630      	mov	r0, r6
 800d216:	4639      	mov	r1, r7
 800d218:	f7ff bb29 	b.w	800c86e <__ieee754_pow+0x3e>
 800d21c:	9204      	str	r2, [sp, #16]
 800d21e:	f7ff bb7b 	b.w	800c918 <__ieee754_pow+0xe8>
 800d222:	2300      	movs	r3, #0
 800d224:	f7ff bb65 	b.w	800c8f2 <__ieee754_pow+0xc2>
 800d228:	00000000 	.word	0x00000000
 800d22c:	3fe62e43 	.word	0x3fe62e43
 800d230:	fefa39ef 	.word	0xfefa39ef
 800d234:	3fe62e42 	.word	0x3fe62e42
 800d238:	0ca86c39 	.word	0x0ca86c39
 800d23c:	be205c61 	.word	0xbe205c61
 800d240:	72bea4d0 	.word	0x72bea4d0
 800d244:	3e663769 	.word	0x3e663769
 800d248:	c5d26bf1 	.word	0xc5d26bf1
 800d24c:	3ebbbd41 	.word	0x3ebbbd41
 800d250:	af25de2c 	.word	0xaf25de2c
 800d254:	3f11566a 	.word	0x3f11566a
 800d258:	16bebd93 	.word	0x16bebd93
 800d25c:	3f66c16c 	.word	0x3f66c16c
 800d260:	5555553e 	.word	0x5555553e
 800d264:	3fc55555 	.word	0x3fc55555
 800d268:	3fe00000 	.word	0x3fe00000
 800d26c:	fff00000 	.word	0xfff00000
 800d270:	3ff00000 	.word	0x3ff00000
 800d274:	4090cbff 	.word	0x4090cbff
 800d278:	3f6f3400 	.word	0x3f6f3400
 800d27c:	652b82fe 	.word	0x652b82fe
 800d280:	3c971547 	.word	0x3c971547

0800d284 <fabs>:
 800d284:	ec51 0b10 	vmov	r0, r1, d0
 800d288:	ee10 2a10 	vmov	r2, s0
 800d28c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d290:	ec43 2b10 	vmov	d0, r2, r3
 800d294:	4770      	bx	lr
	...

0800d298 <scalbn>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	ec55 4b10 	vmov	r4, r5, d0
 800d29e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	462b      	mov	r3, r5
 800d2a6:	b999      	cbnz	r1, 800d2d0 <scalbn+0x38>
 800d2a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d2ac:	4323      	orrs	r3, r4
 800d2ae:	d03f      	beq.n	800d330 <scalbn+0x98>
 800d2b0:	4b35      	ldr	r3, [pc, #212]	; (800d388 <scalbn+0xf0>)
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	ee10 0a10 	vmov	r0, s0
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	f7f3 f99d 	bl	80005f8 <__aeabi_dmul>
 800d2be:	4b33      	ldr	r3, [pc, #204]	; (800d38c <scalbn+0xf4>)
 800d2c0:	429e      	cmp	r6, r3
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	da10      	bge.n	800d2ea <scalbn+0x52>
 800d2c8:	a327      	add	r3, pc, #156	; (adr r3, 800d368 <scalbn+0xd0>)
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	e01f      	b.n	800d310 <scalbn+0x78>
 800d2d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d2d4:	4291      	cmp	r1, r2
 800d2d6:	d10c      	bne.n	800d2f2 <scalbn+0x5a>
 800d2d8:	ee10 2a10 	vmov	r2, s0
 800d2dc:	4620      	mov	r0, r4
 800d2de:	4629      	mov	r1, r5
 800d2e0:	f7f2 ffd4 	bl	800028c <__adddf3>
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	460d      	mov	r5, r1
 800d2e8:	e022      	b.n	800d330 <scalbn+0x98>
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d2f0:	3936      	subs	r1, #54	; 0x36
 800d2f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d2f6:	4296      	cmp	r6, r2
 800d2f8:	dd0d      	ble.n	800d316 <scalbn+0x7e>
 800d2fa:	2d00      	cmp	r5, #0
 800d2fc:	a11c      	add	r1, pc, #112	; (adr r1, 800d370 <scalbn+0xd8>)
 800d2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d302:	da02      	bge.n	800d30a <scalbn+0x72>
 800d304:	a11c      	add	r1, pc, #112	; (adr r1, 800d378 <scalbn+0xe0>)
 800d306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d30a:	a319      	add	r3, pc, #100	; (adr r3, 800d370 <scalbn+0xd8>)
 800d30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d310:	f7f3 f972 	bl	80005f8 <__aeabi_dmul>
 800d314:	e7e6      	b.n	800d2e4 <scalbn+0x4c>
 800d316:	1872      	adds	r2, r6, r1
 800d318:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d31c:	428a      	cmp	r2, r1
 800d31e:	dcec      	bgt.n	800d2fa <scalbn+0x62>
 800d320:	2a00      	cmp	r2, #0
 800d322:	dd08      	ble.n	800d336 <scalbn+0x9e>
 800d324:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d328:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d32c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d330:	ec45 4b10 	vmov	d0, r4, r5
 800d334:	bd70      	pop	{r4, r5, r6, pc}
 800d336:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d33a:	da08      	bge.n	800d34e <scalbn+0xb6>
 800d33c:	2d00      	cmp	r5, #0
 800d33e:	a10a      	add	r1, pc, #40	; (adr r1, 800d368 <scalbn+0xd0>)
 800d340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d344:	dac0      	bge.n	800d2c8 <scalbn+0x30>
 800d346:	a10e      	add	r1, pc, #56	; (adr r1, 800d380 <scalbn+0xe8>)
 800d348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34c:	e7bc      	b.n	800d2c8 <scalbn+0x30>
 800d34e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d352:	3236      	adds	r2, #54	; 0x36
 800d354:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d358:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d35c:	4620      	mov	r0, r4
 800d35e:	4b0c      	ldr	r3, [pc, #48]	; (800d390 <scalbn+0xf8>)
 800d360:	2200      	movs	r2, #0
 800d362:	e7d5      	b.n	800d310 <scalbn+0x78>
 800d364:	f3af 8000 	nop.w
 800d368:	c2f8f359 	.word	0xc2f8f359
 800d36c:	01a56e1f 	.word	0x01a56e1f
 800d370:	8800759c 	.word	0x8800759c
 800d374:	7e37e43c 	.word	0x7e37e43c
 800d378:	8800759c 	.word	0x8800759c
 800d37c:	fe37e43c 	.word	0xfe37e43c
 800d380:	c2f8f359 	.word	0xc2f8f359
 800d384:	81a56e1f 	.word	0x81a56e1f
 800d388:	43500000 	.word	0x43500000
 800d38c:	ffff3cb0 	.word	0xffff3cb0
 800d390:	3c900000 	.word	0x3c900000

0800d394 <with_errno>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	4604      	mov	r4, r0
 800d398:	460d      	mov	r5, r1
 800d39a:	4616      	mov	r6, r2
 800d39c:	f7fd f982 	bl	800a6a4 <__errno>
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	6006      	str	r6, [r0, #0]
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}

0800d3a8 <xflow>:
 800d3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3aa:	4614      	mov	r4, r2
 800d3ac:	461d      	mov	r5, r3
 800d3ae:	b108      	cbz	r0, 800d3b4 <xflow+0xc>
 800d3b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3b4:	e9cd 2300 	strd	r2, r3, [sp]
 800d3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f3 f91a 	bl	80005f8 <__aeabi_dmul>
 800d3c4:	2222      	movs	r2, #34	; 0x22
 800d3c6:	b003      	add	sp, #12
 800d3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3cc:	f7ff bfe2 	b.w	800d394 <with_errno>

0800d3d0 <__math_uflow>:
 800d3d0:	b508      	push	{r3, lr}
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d3d8:	f7ff ffe6 	bl	800d3a8 <xflow>
 800d3dc:	ec41 0b10 	vmov	d0, r0, r1
 800d3e0:	bd08      	pop	{r3, pc}

0800d3e2 <__math_oflow>:
 800d3e2:	b508      	push	{r3, lr}
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d3ea:	f7ff ffdd 	bl	800d3a8 <xflow>
 800d3ee:	ec41 0b10 	vmov	d0, r0, r1
 800d3f2:	bd08      	pop	{r3, pc}

0800d3f4 <__ieee754_sqrt>:
 800d3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f8:	ec55 4b10 	vmov	r4, r5, d0
 800d3fc:	4e67      	ldr	r6, [pc, #412]	; (800d59c <__ieee754_sqrt+0x1a8>)
 800d3fe:	43ae      	bics	r6, r5
 800d400:	ee10 0a10 	vmov	r0, s0
 800d404:	ee10 2a10 	vmov	r2, s0
 800d408:	4629      	mov	r1, r5
 800d40a:	462b      	mov	r3, r5
 800d40c:	d10d      	bne.n	800d42a <__ieee754_sqrt+0x36>
 800d40e:	f7f3 f8f3 	bl	80005f8 <__aeabi_dmul>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	4620      	mov	r0, r4
 800d418:	4629      	mov	r1, r5
 800d41a:	f7f2 ff37 	bl	800028c <__adddf3>
 800d41e:	4604      	mov	r4, r0
 800d420:	460d      	mov	r5, r1
 800d422:	ec45 4b10 	vmov	d0, r4, r5
 800d426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42a:	2d00      	cmp	r5, #0
 800d42c:	dc0b      	bgt.n	800d446 <__ieee754_sqrt+0x52>
 800d42e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d432:	4326      	orrs	r6, r4
 800d434:	d0f5      	beq.n	800d422 <__ieee754_sqrt+0x2e>
 800d436:	b135      	cbz	r5, 800d446 <__ieee754_sqrt+0x52>
 800d438:	f7f2 ff26 	bl	8000288 <__aeabi_dsub>
 800d43c:	4602      	mov	r2, r0
 800d43e:	460b      	mov	r3, r1
 800d440:	f7f3 fa04 	bl	800084c <__aeabi_ddiv>
 800d444:	e7eb      	b.n	800d41e <__ieee754_sqrt+0x2a>
 800d446:	1509      	asrs	r1, r1, #20
 800d448:	f000 808d 	beq.w	800d566 <__ieee754_sqrt+0x172>
 800d44c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d450:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d458:	07c9      	lsls	r1, r1, #31
 800d45a:	bf5c      	itt	pl
 800d45c:	005b      	lslpl	r3, r3, #1
 800d45e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d462:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d466:	bf58      	it	pl
 800d468:	0052      	lslpl	r2, r2, #1
 800d46a:	2500      	movs	r5, #0
 800d46c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d470:	1076      	asrs	r6, r6, #1
 800d472:	0052      	lsls	r2, r2, #1
 800d474:	f04f 0e16 	mov.w	lr, #22
 800d478:	46ac      	mov	ip, r5
 800d47a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d47e:	eb0c 0001 	add.w	r0, ip, r1
 800d482:	4298      	cmp	r0, r3
 800d484:	bfde      	ittt	le
 800d486:	1a1b      	suble	r3, r3, r0
 800d488:	eb00 0c01 	addle.w	ip, r0, r1
 800d48c:	186d      	addle	r5, r5, r1
 800d48e:	005b      	lsls	r3, r3, #1
 800d490:	f1be 0e01 	subs.w	lr, lr, #1
 800d494:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d498:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d49c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d4a0:	d1ed      	bne.n	800d47e <__ieee754_sqrt+0x8a>
 800d4a2:	4674      	mov	r4, lr
 800d4a4:	2720      	movs	r7, #32
 800d4a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d4aa:	4563      	cmp	r3, ip
 800d4ac:	eb01 000e 	add.w	r0, r1, lr
 800d4b0:	dc02      	bgt.n	800d4b8 <__ieee754_sqrt+0xc4>
 800d4b2:	d113      	bne.n	800d4dc <__ieee754_sqrt+0xe8>
 800d4b4:	4290      	cmp	r0, r2
 800d4b6:	d811      	bhi.n	800d4dc <__ieee754_sqrt+0xe8>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	eb00 0e01 	add.w	lr, r0, r1
 800d4be:	da57      	bge.n	800d570 <__ieee754_sqrt+0x17c>
 800d4c0:	f1be 0f00 	cmp.w	lr, #0
 800d4c4:	db54      	blt.n	800d570 <__ieee754_sqrt+0x17c>
 800d4c6:	f10c 0801 	add.w	r8, ip, #1
 800d4ca:	eba3 030c 	sub.w	r3, r3, ip
 800d4ce:	4290      	cmp	r0, r2
 800d4d0:	bf88      	it	hi
 800d4d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d4d6:	1a12      	subs	r2, r2, r0
 800d4d8:	440c      	add	r4, r1
 800d4da:	46c4      	mov	ip, r8
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	3f01      	subs	r7, #1
 800d4e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d4e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d4e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d4ec:	d1dd      	bne.n	800d4aa <__ieee754_sqrt+0xb6>
 800d4ee:	4313      	orrs	r3, r2
 800d4f0:	d01b      	beq.n	800d52a <__ieee754_sqrt+0x136>
 800d4f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d5a0 <__ieee754_sqrt+0x1ac>
 800d4f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d5a4 <__ieee754_sqrt+0x1b0>
 800d4fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800d4fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800d502:	f7f2 fec1 	bl	8000288 <__aeabi_dsub>
 800d506:	e9da 8900 	ldrd	r8, r9, [sl]
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f3 faed 	bl	8000af0 <__aeabi_dcmple>
 800d516:	b140      	cbz	r0, 800d52a <__ieee754_sqrt+0x136>
 800d518:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d51c:	e9da 0100 	ldrd	r0, r1, [sl]
 800d520:	e9db 2300 	ldrd	r2, r3, [fp]
 800d524:	d126      	bne.n	800d574 <__ieee754_sqrt+0x180>
 800d526:	3501      	adds	r5, #1
 800d528:	463c      	mov	r4, r7
 800d52a:	106a      	asrs	r2, r5, #1
 800d52c:	0863      	lsrs	r3, r4, #1
 800d52e:	07e9      	lsls	r1, r5, #31
 800d530:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d534:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d538:	bf48      	it	mi
 800d53a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d53e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d542:	461c      	mov	r4, r3
 800d544:	e76d      	b.n	800d422 <__ieee754_sqrt+0x2e>
 800d546:	0ad3      	lsrs	r3, r2, #11
 800d548:	3815      	subs	r0, #21
 800d54a:	0552      	lsls	r2, r2, #21
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d0fa      	beq.n	800d546 <__ieee754_sqrt+0x152>
 800d550:	02dc      	lsls	r4, r3, #11
 800d552:	d50a      	bpl.n	800d56a <__ieee754_sqrt+0x176>
 800d554:	f1c1 0420 	rsb	r4, r1, #32
 800d558:	fa22 f404 	lsr.w	r4, r2, r4
 800d55c:	1e4d      	subs	r5, r1, #1
 800d55e:	408a      	lsls	r2, r1
 800d560:	4323      	orrs	r3, r4
 800d562:	1b41      	subs	r1, r0, r5
 800d564:	e772      	b.n	800d44c <__ieee754_sqrt+0x58>
 800d566:	4608      	mov	r0, r1
 800d568:	e7f0      	b.n	800d54c <__ieee754_sqrt+0x158>
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	3101      	adds	r1, #1
 800d56e:	e7ef      	b.n	800d550 <__ieee754_sqrt+0x15c>
 800d570:	46e0      	mov	r8, ip
 800d572:	e7aa      	b.n	800d4ca <__ieee754_sqrt+0xd6>
 800d574:	f7f2 fe8a 	bl	800028c <__adddf3>
 800d578:	e9da 8900 	ldrd	r8, r9, [sl]
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4640      	mov	r0, r8
 800d582:	4649      	mov	r1, r9
 800d584:	f7f3 faaa 	bl	8000adc <__aeabi_dcmplt>
 800d588:	b120      	cbz	r0, 800d594 <__ieee754_sqrt+0x1a0>
 800d58a:	1ca0      	adds	r0, r4, #2
 800d58c:	bf08      	it	eq
 800d58e:	3501      	addeq	r5, #1
 800d590:	3402      	adds	r4, #2
 800d592:	e7ca      	b.n	800d52a <__ieee754_sqrt+0x136>
 800d594:	3401      	adds	r4, #1
 800d596:	f024 0401 	bic.w	r4, r4, #1
 800d59a:	e7c6      	b.n	800d52a <__ieee754_sqrt+0x136>
 800d59c:	7ff00000 	.word	0x7ff00000
 800d5a0:	20000200 	.word	0x20000200
 800d5a4:	20000208 	.word	0x20000208

0800d5a8 <_init>:
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5aa:	bf00      	nop
 800d5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ae:	bc08      	pop	{r3}
 800d5b0:	469e      	mov	lr, r3
 800d5b2:	4770      	bx	lr

0800d5b4 <_fini>:
 800d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b6:	bf00      	nop
 800d5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ba:	bc08      	pop	{r3}
 800d5bc:	469e      	mov	lr, r3
 800d5be:	4770      	bx	lr
