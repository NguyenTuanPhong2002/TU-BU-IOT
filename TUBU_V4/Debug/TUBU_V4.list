
TUBU_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aadc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d1c  0800ac70  0800ac70  0001ac70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b98c  0800b98c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b98c  0800b98c  0001b98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b994  0800b994  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b994  0800b994  0001b994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b998  0800b998  0001b998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b99c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000c44  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000e2c  20000e2c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011d66  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f01  00000000  00000000  00031fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e90  00000000  00000000  00034ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b0a  00000000  00000000  00035d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023dc6  00000000  00000000  00036862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013824  00000000  00000000  0005a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce6f4  00000000  00000000  0006de4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e4c  00000000  00000000  0013c540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014138c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac54 	.word	0x0800ac54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800ac54 	.word	0x0800ac54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <Get_size>:
 */

#include "ducati.h"

bool Get_size(ducati_typeDef *me, uint16_t size)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	me->size = size;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	HAL_UARTEx_ReceiveToIdle_DMA(me->huart, (uint8_t *)me->buffer, LEVEL_BUFFER_SIZE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	2263      	movs	r2, #99	; 0x63
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f005 fa3d 	bl	8006342 <HAL_UARTEx_ReceiveToIdle_DMA>
	return true;
 8000ec8:	2301      	movs	r3, #1
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <calculateCRC>:

uint16_t calculateCRC(const uint8_t *data, uint8_t length)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ee4:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < length; i++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e022      	b.n	8000f32 <calculateCRC+0x5e>
	{
		crc ^= data[i];
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	4053      	eors	r3, r2
 8000efa:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	e011      	b.n	8000f26 <calculateCRC+0x52>
		{
			if (crc & 0x0001)
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <calculateCRC+0x46>
			{
				crc = (crc >> 1) ^ 0xA001;
 8000f0c:	8afb      	ldrh	r3, [r7, #22]
 8000f0e:	085b      	lsrs	r3, r3, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <calculateCRC+0x74>)
 8000f14:	4053      	eors	r3, r2
 8000f16:	82fb      	strh	r3, [r7, #22]
 8000f18:	e002      	b.n	8000f20 <calculateCRC+0x4c>
			}
			else
			{
				crc = crc >> 1;
 8000f1a:	8afb      	ldrh	r3, [r7, #22]
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b07      	cmp	r3, #7
 8000f2a:	ddea      	ble.n	8000f02 <calculateCRC+0x2e>
	for (int i = 0; i < length; i++)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbd8      	blt.n	8000eec <calculateCRC+0x18>
			}
		}
	}
	return crc;
 8000f3a:	8afb      	ldrh	r3, [r7, #22]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	ffffa001 	.word	0xffffa001

08000f4c <ducatiSendCommand>:
 * @return The function `RS485SendCommand` returns a boolean value - `true` if the received packet's
 * CRC matches the calculated CRC, and `false` if the timeout is reached or the CRC does not match.
 */
bool ducatiSendCommand(ducati_typeDef *me, uint8_t command[],
					   uint8_t size, uint32_t timeout)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71fb      	strb	r3, [r7, #7]

	HAL_UARTEx_ReceiveToIdle_DMA(me->huart, me->buffer, LEVEL_BUFFER_SIZE);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	2263      	movs	r2, #99	; 0x63
 8000f66:	4619      	mov	r1, r3
 8000f68:	f005 f9eb 	bl	8006342 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(me->dma, DMA_IT_HT);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0208 	bic.w	r2, r2, #8
 8000f7e:	601a      	str	r2, [r3, #0]
	bool answer = false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]

	memset(me->buffer, '\0', LEVEL_BUFFER_SIZE);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3308      	adds	r3, #8
 8000f88:	2263      	movs	r2, #99	; 0x63
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f007 fda3 	bl	8008ad8 <memset>
	HAL_UART_Transmit(me->huart, command, size, timeout);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	f005 f93e 	bl	800621e <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 8000fa2:	f003 f8bb 	bl	800411c <HAL_GetTick>
 8000fa6:	61b8      	str	r0, [r7, #24]
	while (answer == false)
 8000fa8:	e03a      	b.n	8001020 <ducatiSendCommand+0xd4>
	{
		if (HAL_GetTick() - tickStart >= timeout)
 8000faa:	f003 f8b7 	bl	800411c <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	683a      	ldr	r2, [r7, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d801      	bhi.n	8000fbe <ducatiSendCommand+0x72>
		{

			return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e037      	b.n	800102e <ducatiSendCommand+0xe2>
		}
		else
		{
			if (me->DucatiFlag == true)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d027      	beq.n	8001018 <ducatiSendCommand+0xcc>
			{
				uint16_t packetCRC = ((uint16_t)me->buffer[me->size - 1] << 8) | (me->buffer[me->size - 2]);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	7a1b      	ldrb	r3, [r3, #8]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8000fe0:	3b02      	subs	r3, #2
 8000fe2:	68f9      	ldr	r1, [r7, #12]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	7a1b      	ldrb	r3, [r3, #8]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	82fb      	strh	r3, [r7, #22]

				if (calculateCRC((uint8_t *)me->buffer, me->size - 2) == packetCRC)
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f103 0208 	add.w	r2, r3, #8
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b02      	subs	r3, #2
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4619      	mov	r1, r3
 8001004:	4610      	mov	r0, r2
 8001006:	f7ff ff65 	bl	8000ed4 <calculateCRC>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	8afb      	ldrh	r3, [r7, #22]
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <ducatiSendCommand+0xcc>
				{

					return true;
 8001014:	2301      	movs	r3, #1
 8001016:	e00a      	b.n	800102e <ducatiSendCommand+0xe2>
				}
			}
		}
		me->DucatiFlag = false;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	while (answer == false)
 8001020:	7ffb      	ldrb	r3, [r7, #31]
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1be      	bne.n	8000faa <ducatiSendCommand+0x5e>
	}
	return false;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <getVol>:

float getVol(ducati_typeDef *me)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00};
 8001040:	4a16      	ldr	r2, [pc, #88]	; (800109c <getVol+0x64>)
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	e892 0003 	ldmia.w	r2, {r0, r1}
 800104a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2106      	movs	r1, #6
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff3d 	bl	8000ed4 <calculateCRC>
 800105a:	4603      	mov	r3, r0
 800105c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b29b      	uxth	r3, r3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	2208      	movs	r2, #8
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff67 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7adb      	ldrb	r3, [r3, #11]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7b12      	ldrb	r2, [r2, #12]
 8001088:	4313      	orrs	r3, r2
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	0800ac70 	.word	0x0800ac70

080010a0 <getCosF>:

float getCosF(ducati_typeDef *me)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x01, 0x61, 0x00, 0x02, 0x00, 0x00};
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <getCosF+0x64>)
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2106      	movs	r1, #6
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff09 	bl	8000ed4 <calculateCRC>
 80010c2:	4603      	mov	r3, r0
 80010c4:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80010c6:	8afb      	ldrh	r3, [r7, #22]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80010d6:	f107 010c 	add.w	r1, r7, #12
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	2208      	movs	r2, #8
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff33 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7adb      	ldrb	r3, [r3, #11]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	7b12      	ldrb	r2, [r2, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800ac78 	.word	0x0800ac78

08001108 <getCurrent>:

float getCurrent(ducati_typeDef *me)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x11, 0x00, 0x02, 0x00, 0x00};
 8001110:	4a16      	ldr	r2, [pc, #88]	; (800116c <getCurrent+0x64>)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2106      	movs	r1, #6
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fed5 	bl	8000ed4 <calculateCRC>
 800112a:	4603      	mov	r3, r0
 800112c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800112e:	8afb      	ldrh	r3, [r7, #22]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001134:	8afb      	ldrh	r3, [r7, #22]
 8001136:	0a1b      	lsrs	r3, r3, #8
 8001138:	b29b      	uxth	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800113e:	f107 010c 	add.w	r1, r7, #12
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	2208      	movs	r2, #8
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff feff 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	7adb      	ldrb	r3, [r3, #11]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	7b12      	ldrb	r2, [r2, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001162:	eeb0 0a67 	vmov.f32	s0, s15
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800ac80 	.word	0x0800ac80

08001170 <getFrequency>:

float getFrequency(ducati_typeDef *me)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00};
 8001178:	4a16      	ldr	r2, [pc, #88]	; (80011d4 <getFrequency+0x64>)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001182:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	2106      	movs	r1, #6
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fea1 	bl	8000ed4 <calculateCRC>
 8001192:	4603      	mov	r3, r0
 8001194:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001196:	8afb      	ldrh	r3, [r7, #22]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 800119c:	8afb      	ldrh	r3, [r7, #22]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80011a6:	f107 010c 	add.w	r1, r7, #12
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	2208      	movs	r2, #8
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fecb 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7adb      	ldrb	r3, [r3, #11]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	7b12      	ldrb	r2, [r2, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800ac88 	.word	0x0800ac88

080011d8 <getAvQ>:

int16_t getAvQ(ducati_typeDef *me)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x53, 0x00, 0x02, 0x00, 0x00};
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <getAvQ+0x60>)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ea:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2106      	movs	r1, #6
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fe6d 	bl	8000ed4 <calculateCRC>
 80011fa:	4603      	mov	r3, r0
 80011fc:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800120e:	f107 010c 	add.w	r1, r7, #12
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	2208      	movs	r2, #8
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe97 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7adb      	ldrb	r3, [r3, #11]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7b1b      	ldrb	r3, [r3, #12]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21b      	sxth	r3, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0800ac90 	.word	0x0800ac90

0800123c <getAvP>:

int16_t getAvP(ducati_typeDef *me)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x23, 0x00, 0x02, 0x00, 0x00};
 8001244:	4a15      	ldr	r2, [pc, #84]	; (800129c <getAvP+0x60>)
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	2106      	movs	r1, #6
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe3b 	bl	8000ed4 <calculateCRC>
 800125e:	4603      	mov	r3, r0
 8001260:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001262:	8afb      	ldrh	r3, [r7, #22]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001268:	8afb      	ldrh	r3, [r7, #22]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 8001272:	f107 010c 	add.w	r1, r7, #12
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	2208      	movs	r2, #8
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe65 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7adb      	ldrb	r3, [r3, #11]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	b21a      	sxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7b1b      	ldrb	r3, [r3, #12]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0800ac98 	.word	0x0800ac98

080012a0 <getActivePower>:

float getActivePower(ducati_typeDef *me)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00};
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <getActivePower+0x64>)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2106      	movs	r1, #6
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fe09 	bl	8000ed4 <calculateCRC>
 80012c2:	4603      	mov	r3, r0
 80012c4:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 80012c6:	8afb      	ldrh	r3, [r7, #22]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 80012cc:	8afb      	ldrh	r3, [r7, #22]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012de:	2208      	movs	r2, #8
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fe33 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7adb      	ldrb	r3, [r3, #11]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	7b12      	ldrb	r2, [r2, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800aca0 	.word	0x0800aca0

08001308 <getReactivePower>:

float getReactivePower(ducati_typeDef *me)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x51, 0x00, 0x02, 0x00, 0x00};
 8001310:	4a16      	ldr	r2, [pc, #88]	; (800136c <getReactivePower+0x64>)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	e892 0003 	ldmia.w	r2, {r0, r1}
 800131a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2106      	movs	r1, #6
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fdd5 	bl	8000ed4 <calculateCRC>
 800132a:	4603      	mov	r3, r0
 800132c:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 800132e:	8afb      	ldrh	r3, [r7, #22]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8001334:	8afb      	ldrh	r3, [r7, #22]
 8001336:	0a1b      	lsrs	r3, r3, #8
 8001338:	b29b      	uxth	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 800133e:	f107 010c 	add.w	r1, r7, #12
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	2208      	movs	r2, #8
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fdff 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7adb      	ldrb	r3, [r3, #11]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	7b12      	ldrb	r2, [r2, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	0800aca8 	.word	0x0800aca8

08001370 <getCoilStatus>:
//    StatusIn[6] = HAL_GPIO_ReadPin(harware[6]->GPIO_PORT, harware[6]->GPIO_PIN);
//    StatusIn[7] = HAL_GPIO_ReadPin(harware[7]->GPIO_PORT, harware[7]->GPIO_PIN);
//}

uint16_t getCoilStatus(ducati_typeDef *me)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	uint8_t queryFrame[8] = {0x01, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00};
 8001378:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <getCoilStatus+0x64>)
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001382:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2106      	movs	r1, #6
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fda1 	bl	8000ed4 <calculateCRC>
 8001392:	4603      	mov	r3, r0
 8001394:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8001396:	8afb      	ldrh	r3, [r7, #22]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 800139c:	8afb      	ldrh	r3, [r7, #22]
 800139e:	0a1b      	lsrs	r3, r3, #8
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	74fb      	strb	r3, [r7, #19]

	ducatiSendCommand(me, queryFrame, sizeof(queryFrame), 1000);
 80013a6:	f107 010c 	add.w	r1, r7, #12
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	2208      	movs	r2, #8
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fdcb 	bl	8000f4c <ducatiSendCommand>

	return ((uint16_t)me->buffer[3] << 8) | (uint16_t)me->buffer[4];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7adb      	ldrb	r3, [r3, #11]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	b21a      	sxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7b1b      	ldrb	r3, [r3, #12]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	b29b      	uxth	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800acb0 	.word	0x0800acb0

080013d8 <SIM7600_sendATCommand>:
 * @param unexpect [in] The unexpected information string in response buffer.
 * @param timeout [in] The timeout to cancel function if no response or no information is matched.
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_sendATCommand(SIM7600_HandleTypeDef *const me, const char *command, const char *expect, const char *unexpect, uint32_t timeout)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
	if (me == NULL || command == NULL || expect == NULL || unexpect == NULL)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <SIM7600_sendATCommand+0x26>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <SIM7600_sendATCommand+0x26>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <SIM7600_sendATCommand+0x26>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <SIM7600_sendATCommand+0x2a>
	{
		return THT_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e084      	b.n	800150c <SIM7600_sendATCommand+0x134>
	}

	THT_StatusTypeDef answer = THT_BUSY;
 8001402:	2302      	movs	r3, #2
 8001404:	77fb      	strb	r3, [r7, #31]

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3308      	adds	r3, #8
 8001410:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001414:	4619      	mov	r1, r3
 8001416:	f004 ff94 	bl	8006342 <HAL_UARTEx_ReceiveToIdle_DMA>
								 SIM_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0208 	bic.w	r2, r2, #8
 8001430:	601a      	str	r2, [r3, #0]

	/* Clear buffer before receive new data */
	memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3308      	adds	r3, #8
 8001436:	f44f 720c 	mov.w	r2, #560	; 0x230
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f007 fb4b 	bl	8008ad8 <memset>

	/* Sends command to SIM module: command + "\r\n" */
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)command, strlen(command),
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f8d3 42c0 	ldr.w	r4, [r3, #704]	; 0x2c0
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7fe ff11 	bl	8000270 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	4620      	mov	r0, r4
 800145a:	f004 fee0 	bl	800621e <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
	HAL_UART_Transmit((UART_HandleTypeDef *)me->huart, (uint8_t *)"\r\n", 2, 1000);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001468:	2202      	movs	r2, #2
 800146a:	492a      	ldr	r1, [pc, #168]	; (8001514 <SIM7600_sendATCommand+0x13c>)
 800146c:	f004 fed7 	bl	800621e <HAL_UART_Transmit>

	uint32_t tickStart = HAL_GetTick();
 8001470:	f002 fe54 	bl	800411c <HAL_GetTick>
 8001474:	61b8      	str	r0, [r7, #24]

	/* Wait to receive the response - if the response is empty, the timeout is occured */
	while (answer == THT_BUSY)
 8001476:	e03f      	b.n	80014f8 <SIM7600_sendATCommand+0x120>
	{
		const uint32_t timeElapsed = HAL_GetTick() - tickStart;
 8001478:	f002 fe50 	bl	800411c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	617b      	str	r3, [r7, #20]

		if (timeElapsed >= timeout)
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001488:	429a      	cmp	r2, r3
 800148a:	d317      	bcc.n	80014bc <SIM7600_sendATCommand+0xe4>
		{
			answer = THT_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	77fb      	strb	r3, [r7, #31]
			me->parent.timeoutCnt++;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8001496:	3301      	adds	r3, #1
 8001498:	b29a      	uxth	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238

			/* Print the command and timeout counter */
			printf(command);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f007 f977 	bl	8008794 <iprintf>
			printf("\n");
 80014a6:	200a      	movs	r0, #10
 80014a8:	f007 f986 	bl	80087b8 <putchar>
			printf("Timeout: %u\n", me->parent.timeoutCnt);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80014b2:	4619      	mov	r1, r3
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <SIM7600_sendATCommand+0x140>)
 80014b6:	f007 f96d 	bl	8008794 <iprintf>
			break;
 80014ba:	e020      	b.n	80014fe <SIM7600_sendATCommand+0x126>
		}
		else
		{
			if (SIM_GET_FLAG(&me->parent, SIM_FLAG_RX))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d117      	bne.n	80014f8 <SIM7600_sendATCommand+0x120>
			{
				if (strstr(me->parent.buffer, expect) != NULL)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3308      	adds	r3, #8
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f007 fb17 	bl	8008b02 <strstr>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <SIM7600_sendATCommand+0x108>
				{
					answer = THT_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	77fb      	strb	r3, [r7, #31]
					break;
 80014de:	e00e      	b.n	80014fe <SIM7600_sendATCommand+0x126>
				}
				else if (strstr(me->parent.buffer, unexpect) != NULL)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3308      	adds	r3, #8
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 fb0b 	bl	8008b02 <strstr>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <SIM7600_sendATCommand+0x120>
				{
					answer = THT_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	77fb      	strb	r3, [r7, #31]
					break;
 80014f6:	e002      	b.n	80014fe <SIM7600_sendATCommand+0x126>
	while (answer == THT_BUSY)
 80014f8:	7ffb      	ldrb	r3, [r7, #31]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d0bc      	beq.n	8001478 <SIM7600_sendATCommand+0xa0>
				}
			}
		}
	}

	SIM_CLR_FLAG(&me->parent, SIM_FLAG_RX);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0201 	bic.w	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]
	/*	printf(me->parent.buffer); // Fatal Error: Không uncommment dòng này!
		 Khi thực hiện tính năng FOTA, dòng này nhận được dữ liệu từ module và in ra,
		 khi in ra thì nó k dừng lại mà sẽ in toàn bộ dữ liệu trong bộ nhớ của vi điều
		 khiển và treo
	*/
	return answer;
 800150a:	7ffb      	ldrb	r3, [r7, #31]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3724      	adds	r7, #36	; 0x24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	0800acb8 	.word	0x0800acb8
 8001518:	0800acbc 	.word	0x0800acbc

0800151c <SIM7600_wakeup>:
 * @brief  Wake up module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_wakeup(SIM7600_HandleTypeDef *const me)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00d      	beq.n	8001546 <SIM7600_wakeup+0x2a>
	{
		return;
	}
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_RESET); // DTR Low: Wakeup, DTR high: Sleep
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	f003 fce7 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 800153e:	2064      	movs	r0, #100	; 0x64
 8001540:	f002 fdf8 	bl	8004134 <HAL_Delay>
 8001544:	e000      	b.n	8001548 <SIM7600_wakeup+0x2c>
		return;
 8001546:	bf00      	nop
}
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <SIM7600_POWER_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function will return without executing the rest
 * of the code inside the function.
 */
void SIM7600_POWER_ON(SIM7600_HandleTypeDef *const me)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <SIM7600_POWER_ON+0x2a>
	{
		return;
	}
	HAL_GPIO_WritePin(me->powerEnPort, me->powerEnPin, GPIO_PIN_SET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 02bc 	ldr.w	r0, [r3, #700]	; 0x2bc
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f003 fcce 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f002 fddf 	bl	8004134 <HAL_Delay>
 8001576:	e000      	b.n	800157a <SIM7600_POWER_ON+0x2c>
		return;
 8001578:	bf00      	nop
}
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <SIM7600_PWRKEY_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function `SIM7600_PWRKEY_ON` will return without
 * performing any actions.
 */
void SIM7600_PWRKEY_ON(SIM7600_HandleTypeDef *const me)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01c      	beq.n	80015c8 <SIM7600_PWRKEY_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_SET);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	f003 fcb5 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 80015a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a6:	f002 fdc5 	bl	8004134 <HAL_Delay>
	HAL_GPIO_WritePin(me->pwrkeyPort, me->pwrkeyPin, GPIO_PIN_RESET);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 02b8 	ldr.w	r0, [r3, #696]	; 0x2b8
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80015b6:	2200      	movs	r2, #0
 80015b8:	4619      	mov	r1, r3
 80015ba:	f003 fca7 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(10000UL);
 80015be:	f242 7010 	movw	r0, #10000	; 0x2710
 80015c2:	f002 fdb7 	bl	8004134 <HAL_Delay>
 80015c6:	e000      	b.n	80015ca <SIM7600_PWRKEY_ON+0x4a>
		return;
 80015c8:	bf00      	nop
}
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SIM7600_RESET_ON>:
 * 
 * @return If the input parameter `me` is `NULL`, the function will return without performing any
 * actions.
 */
void SIM7600_RESET_ON(SIM7600_HandleTypeDef *const me)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01c      	beq.n	8001618 <SIM7600_RESET_ON+0x48>
	{
		return;
	}
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_SET);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f003 fc8d 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(500UL);
 80015f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f6:	f002 fd9d 	bl	8004134 <HAL_Delay>
	HAL_GPIO_WritePin(me->resetPort, me->resetPin, GPIO_PIN_RESET);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	f003 fc7f 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(1000UL);
 800160e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001612:	f002 fd8f 	bl	8004134 <HAL_Delay>
 8001616:	e000      	b.n	800161a <SIM7600_RESET_ON+0x4a>
		return;
 8001618:	bf00      	nop
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <SIM7600_sleep>:
 * @brief  Put the module to sleep
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_sleep(SIM7600_HandleTypeDef *const me)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af02      	add	r7, sp, #8
 8001626:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <SIM7600_sleep+0x3c>
	{
		return;
	}
	SIM7600_sendATCommand(me, "AT+CSCLK=1", SIM_URC_OK, SIM_URC_ERROR, 3000);
 800162e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <SIM7600_sleep+0x44>)
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <SIM7600_sleep+0x48>)
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <SIM7600_sleep+0x4c>)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fecc 	bl	80013d8 <SIM7600_sendATCommand>
	HAL_GPIO_WritePin(me->sleepPort, me->sleepPin, GPIO_PIN_SET);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 02b4 	ldr.w	r0, [r3, #692]	; 0x2b4
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 800164c:	2201      	movs	r2, #1
 800164e:	4619      	mov	r1, r3
 8001650:	f003 fc5c 	bl	8004f0c <HAL_GPIO_WritePin>
	HAL_Delay(100UL);
 8001654:	2064      	movs	r0, #100	; 0x64
 8001656:	f002 fd6d 	bl	8004134 <HAL_Delay>
 800165a:	e000      	b.n	800165e <SIM7600_sleep+0x3e>
		return;
 800165c:	bf00      	nop
}
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	0800accc 	.word	0x0800accc
 8001668:	0800acd4 	.word	0x0800acd4
 800166c:	0800acd8 	.word	0x0800acd8

08001670 <SIM7600_init>:
 * @brief  Initializes module SIM
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_init(SIM7600_HandleTypeDef *const me)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <SIM7600_init+0x12>
	{
		return THT_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0e0      	b.n	8001844 <SIM7600_init+0x1d4>
	}

	me->huart->Instance = USART2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001688:	4a70      	ldr	r2, [pc, #448]	; (800184c <SIM7600_init+0x1dc>)
 800168a:	601a      	str	r2, [r3, #0]
	me->huart->Init.BaudRate = 115200;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001692:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001696:	605a      	str	r2, [r3, #4]
	me->huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
	me->huart->Init.StopBits = UART_STOPBITS_1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
	me->huart->Init.Parity = UART_PARITY_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
	me->huart->Init.Mode = UART_MODE_TX_RX;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016bc:	220c      	movs	r2, #12
 80016be:	615a      	str	r2, [r3, #20]
	me->huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
	me->huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(me->huart) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80016da:	4618      	mov	r0, r3
 80016dc:	f004 fd52 	bl	8006184 <HAL_UART_Init>
	{
		//	    Error_Handler();
	}

	/* Power on and reset module */
	SIM7600_wakeup(me);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff1b 	bl	800151c <SIM7600_wakeup>
	SIM7600_POWER_ON(me);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff31 	bl	800154e <SIM7600_POWER_ON>
	SIM7600_RESET_ON(me);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff6f 	bl	80015d0 <SIM7600_RESET_ON>

	/* Enable receive data through UART port */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3308      	adds	r3, #8
 80016fc:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001700:	4619      	mov	r1, r3
 8001702:	f004 fe1e 	bl	8006342 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0208 	bic.w	r2, r2, #8
 800171c:	601a      	str	r2, [r3, #0]

	/* Powerkey on */
	SIM7600_PWRKEY_ON(me);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff2e 	bl	8001580 <SIM7600_PWRKEY_ON>

	for (size_t i = 0u; i < 60u; i++)
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	e087      	b.n	800183a <SIM7600_init+0x1ca>
	{
//		SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
		if (THT_OK == SIM7600_sendATCommand(me, "AT", SIM_URC_OK, SIM_URC_ERROR, 250))
 800172a:	23fa      	movs	r3, #250	; 0xfa
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <SIM7600_init+0x1e0>)
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <SIM7600_init+0x1e4>)
 8001732:	4949      	ldr	r1, [pc, #292]	; (8001858 <SIM7600_init+0x1e8>)
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe4f 	bl	80013d8 <SIM7600_sendATCommand>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d179      	bne.n	8001834 <SIM7600_init+0x1c4>
		{
			SIM7600_sendATCommand(me, "ATE0", SIM_URC_OK, SIM_URC_ERROR, 500); /* Must be used this command */
 8001740:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4b42      	ldr	r3, [pc, #264]	; (8001850 <SIM7600_init+0x1e0>)
 8001748:	4a42      	ldr	r2, [pc, #264]	; (8001854 <SIM7600_init+0x1e4>)
 800174a:	4944      	ldr	r1, [pc, #272]	; (800185c <SIM7600_init+0x1ec>)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fe43 	bl	80013d8 <SIM7600_sendATCommand>

			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 4000))
 8001752:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <SIM7600_init+0x1e0>)
 800175a:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <SIM7600_init+0x1e4>)
 800175c:	4940      	ldr	r1, [pc, #256]	; (8001860 <SIM7600_init+0x1f0>)
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe3a 	bl	80013d8 <SIM7600_sendATCommand>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d164      	bne.n	8001834 <SIM7600_init+0x1c4>
			{
				SIM7600_sendATCommand(me, "ATI", SIM_URC_OK, SIM_URC_ERROR, 500);
 800176a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	4b37      	ldr	r3, [pc, #220]	; (8001850 <SIM7600_init+0x1e0>)
 8001772:	4a38      	ldr	r2, [pc, #224]	; (8001854 <SIM7600_init+0x1e4>)
 8001774:	493b      	ldr	r1, [pc, #236]	; (8001864 <SIM7600_init+0x1f4>)
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe2e 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 4000);	//"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 800177c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <SIM7600_init+0x1e0>)
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <SIM7600_init+0x1f8>)
 8001786:	4939      	ldr	r1, [pc, #228]	; (800186c <SIM7600_init+0x1fc>)
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fe25 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CGREG?", "+CGREG: 0,1", SIM_URC_ERROR, 4000); // "\r\n+CGREG: 0,1\r\n\r\nOK\r\n"
 800178e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <SIM7600_init+0x1e0>)
 8001796:	4a36      	ldr	r2, [pc, #216]	; (8001870 <SIM7600_init+0x200>)
 8001798:	4936      	ldr	r1, [pc, #216]	; (8001874 <SIM7600_init+0x204>)
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe1c 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMP=39", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80017a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <SIM7600_init+0x1e0>)
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <SIM7600_init+0x1e4>)
 80017aa:	4933      	ldr	r1, [pc, #204]	; (8001878 <SIM7600_init+0x208>)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe13 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CTZU=0", SIM_URC_OK, SIM_URC_ERROR, 4000);					//"\r\nOK\r\n"
 80017b2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <SIM7600_init+0x1e0>)
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <SIM7600_init+0x1e4>)
 80017bc:	492f      	ldr	r1, [pc, #188]	; (800187c <SIM7600_init+0x20c>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe0a 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);				//"\r\nOK\r\n"
 80017c4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <SIM7600_init+0x1e0>)
 80017cc:	4a21      	ldr	r2, [pc, #132]	; (8001854 <SIM7600_init+0x1e4>)
 80017ce:	492c      	ldr	r1, [pc, #176]	; (8001880 <SIM7600_init+0x210>)
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fe01 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 4000); //"\r\n+CPMS: 0,40,0,40,0,40\r\n\r\nOK\r\n"
 80017d6:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <SIM7600_init+0x1e0>)
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <SIM7600_init+0x1e4>)
 80017e0:	4928      	ldr	r1, [pc, #160]	; (8001884 <SIM7600_init+0x214>)
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fdf8 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGD=,4", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80017e8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	4b18      	ldr	r3, [pc, #96]	; (8001850 <SIM7600_init+0x1e0>)
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <SIM7600_init+0x1e4>)
 80017f2:	4925      	ldr	r1, [pc, #148]	; (8001888 <SIM7600_init+0x218>)
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fdef 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80017fa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <SIM7600_init+0x1e0>)
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <SIM7600_init+0x1e4>)
 8001804:	4921      	ldr	r1, [pc, #132]	; (800188c <SIM7600_init+0x21c>)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fde6 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CNMI=2,1,0,0,0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800180c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <SIM7600_init+0x1e0>)
 8001814:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <SIM7600_init+0x1e4>)
 8001816:	491e      	ldr	r1, [pc, #120]	; (8001890 <SIM7600_init+0x220>)
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fddd 	bl	80013d8 <SIM7600_sendATCommand>
				SIM7600_sendATCommand(me, "AT+CFGRI=0", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800181e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <SIM7600_init+0x1e0>)
 8001826:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <SIM7600_init+0x1e4>)
 8001828:	491a      	ldr	r1, [pc, #104]	; (8001894 <SIM7600_init+0x224>)
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fdd4 	bl	80013d8 <SIM7600_sendATCommand>

				return THT_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e007      	b.n	8001844 <SIM7600_init+0x1d4>
	for (size_t i = 0u; i < 60u; i++)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3301      	adds	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b3b      	cmp	r3, #59	; 0x3b
 800183e:	f67f af74 	bls.w	800172a <SIM7600_init+0xba>
			}
		}
	}

	return THT_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40004400 	.word	0x40004400
 8001850:	0800accc 	.word	0x0800accc
 8001854:	0800acd4 	.word	0x0800acd4
 8001858:	0800ace4 	.word	0x0800ace4
 800185c:	0800ace8 	.word	0x0800ace8
 8001860:	0800acf0 	.word	0x0800acf0
 8001864:	0800acfc 	.word	0x0800acfc
 8001868:	0800ad00 	.word	0x0800ad00
 800186c:	0800ad0c 	.word	0x0800ad0c
 8001870:	0800ad18 	.word	0x0800ad18
 8001874:	0800ad24 	.word	0x0800ad24
 8001878:	0800ad30 	.word	0x0800ad30
 800187c:	0800ad3c 	.word	0x0800ad3c
 8001880:	0800ad48 	.word	0x0800ad48
 8001884:	0800ad58 	.word	0x0800ad58
 8001888:	0800ad70 	.word	0x0800ad70
 800188c:	0800ad7c 	.word	0x0800ad7c
 8001890:	0800ad88 	.word	0x0800ad88
 8001894:	0800ad9c 	.word	0x0800ad9c

08001898 <SIM7600_setFunction>:
 * 				@arg: SIM_MODE_RESET
 * 				@arg: SIM_MODE_OFFLINE
 * @retval THT_StatusTypeDef status
 */
THT_StatusTypeDef SIM7600_setFunction(SIM7600_HandleTypeDef *const me, uint8_t mode)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <SIM7600_setFunction+0x16>
	{
		return THT_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e018      	b.n	80018e0 <SIM7600_setFunction+0x48>
	}

	char command[10] = {0};
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	809a      	strh	r2, [r3, #4]
	snprintf(command, sizeof(command), "AT+CFUN=%d", mode);
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f107 000c 	add.w	r0, r7, #12
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <SIM7600_setFunction+0x50>)
 80018c4:	210a      	movs	r1, #10
 80018c6:	f006 ffdb 	bl	8008880 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 9000);
 80018ca:	f107 010c 	add.w	r1, r7, #12
 80018ce:	f242 3328 	movw	r3, #9000	; 0x2328
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SIM7600_setFunction+0x54>)
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <SIM7600_setFunction+0x58>)
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fd7d 	bl	80013d8 <SIM7600_sendATCommand>
 80018de:	4603      	mov	r3, r0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	0800ada8 	.word	0x0800ada8
 80018ec:	0800accc 	.word	0x0800accc
 80018f0:	0800acd4 	.word	0x0800acd4

080018f4 <SIM7600_process>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_process(SIM7600_HandleTypeDef *const me)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d079      	beq.n	80019f6 <SIM7600_process+0x102>
	{
		return;
	}

	/* If sim card is removed or not fit */
	if (SIM_GET_FLAG(&me->parent, SIM_FLAG_SRMV))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b10      	cmp	r3, #16
 800190c:	d160      	bne.n	80019d0 <SIM7600_process+0xdc>
	{
		printf("Simcard removed. Reconnect Simcard\n");
 800190e:	483c      	ldr	r0, [pc, #240]	; (8001a00 <SIM7600_process+0x10c>)
 8001910:	f006 ffae 	bl	8008870 <puts>
		SIM7600_wakeup(me);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff fe01 	bl	800151c <SIM7600_wakeup>

		/* Minimize function of SIM */
		SIM7600_setFunction(me, SIM_MODE_MINIMUM);
 800191a:	2100      	movs	r1, #0
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffbb 	bl	8001898 <SIM7600_setFunction>
		HAL_Delay(1000UL);
 8001922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001926:	f002 fc05 	bl	8004134 <HAL_Delay>

		/* Enable all functions of module to reconnect sim card if the sim card is plugged */
		if (THT_OK == SIM7600_setFunction(me, SIM_MODE_FULL))
 800192a:	2101      	movs	r1, #1
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffb3 	bl	8001898 <SIM7600_setFunction>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <SIM7600_process+0x50>
		{
			SIM_CLR_FLAG(&me->parent, SIM_FLAG_SRMV);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 0210 	bic.w	r2, r3, #16
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
		}

		uint32_t tickStart = HAL_GetTick();
 8001944:	f002 fbea 	bl	800411c <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24

		char nwType[SIM_NWTYPE_SIZE] = {0};
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]

		while (HAL_GetTick() - tickStart < 15000u)
 800195a:	e02d      	b.n	80019b8 <SIM7600_process+0xc4>
		{
			if (THT_OK == SIM7600_sendATCommand(me, "AT+CPIN?", SIM_URC_OK, SIM_URC_ERROR, 1000) || THT_OK == SIM7600_getNetworkType(me, nwType, SIM_NWTYPE_SIZE))
 800195c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <SIM7600_process+0x110>)
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <SIM7600_process+0x114>)
 8001966:	4929      	ldr	r1, [pc, #164]	; (8001a0c <SIM7600_process+0x118>)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff fd35 	bl	80013d8 <SIM7600_sendATCommand>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d009      	beq.n	8001988 <SIM7600_process+0x94>
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2210      	movs	r2, #16
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fb63 	bl	8002048 <SIM7600_getNetworkType>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d117      	bne.n	80019b8 <SIM7600_process+0xc4>
			{
				char *sPtr1 = strstr(nwType, "NO SERVICE");
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	4920      	ldr	r1, [pc, #128]	; (8001a10 <SIM7600_process+0x11c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f007 f8b7 	bl	8008b02 <strstr>
 8001994:	6238      	str	r0, [r7, #32]
				char *sPtr2 = strstr(nwType, "Unknown");
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	491e      	ldr	r1, [pc, #120]	; (8001a14 <SIM7600_process+0x120>)
 800199c:	4618      	mov	r0, r3
 800199e:	f007 f8b0 	bl	8008b02 <strstr>
 80019a2:	61f8      	str	r0, [r7, #28]

				if (sPtr1 == NULL && sPtr2 == NULL)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <SIM7600_process+0xc4>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d103      	bne.n	80019b8 <SIM7600_process+0xc4>
				{
					printf("Sim is connected\n\n");
 80019b0:	4819      	ldr	r0, [pc, #100]	; (8001a18 <SIM7600_process+0x124>)
 80019b2:	f006 ff5d 	bl	8008870 <puts>
					break; /* Break out of while loop */
 80019b6:	e008      	b.n	80019ca <SIM7600_process+0xd6>
		while (HAL_GetTick() - tickStart < 15000u)
 80019b8:	f002 fbb0 	bl	800411c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f643 2297 	movw	r2, #14999	; 0x3a97
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d9c8      	bls.n	800195c <SIM7600_process+0x68>
				}
			}
		}

		SIM7600_sleep(me);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fe28 	bl	8001620 <SIM7600_sleep>
	}

	/* If error in communition */
	if (me->parent.timeoutCnt >= 10u)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 80019d6:	2b09      	cmp	r3, #9
 80019d8:	d90e      	bls.n	80019f8 <SIM7600_process+0x104>
	{
		printf("Timeout over 10 times. Reset module SIM\n\n");
 80019da:	4810      	ldr	r0, [pc, #64]	; (8001a1c <SIM7600_process+0x128>)
 80019dc:	f006 ff48 	bl	8008870 <puts>
		//		SIM7600_wakeup(me);
		//		SIM7600_RESET_ON(me);
		SIM7600_init(me);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fe45 	bl	8001670 <SIM7600_init>
		SIM7600_sleep(me);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff fe1a 	bl	8001620 <SIM7600_sleep>
		me->parent.timeoutCnt = 0u;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
 80019f4:	e000      	b.n	80019f8 <SIM7600_process+0x104>
		return;
 80019f6:	bf00      	nop
	}
}
 80019f8:	3728      	adds	r7, #40	; 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	0800adb4 	.word	0x0800adb4
 8001a04:	0800accc 	.word	0x0800accc
 8001a08:	0800acd4 	.word	0x0800acd4
 8001a0c:	0800acf0 	.word	0x0800acf0
 8001a10:	0800add8 	.word	0x0800add8
 8001a14:	0800ade4 	.word	0x0800ade4
 8001a18:	0800adec 	.word	0x0800adec
 8001a1c:	0800ae00 	.word	0x0800ae00

08001a20 <SIM7600_checkEvent>:
 * @brief  Handling problems that occur during operation
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @retval None
 */
void SIM7600_checkEvent(SIM7600_HandleTypeDef *const me, uint16_t size)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05d      	beq.n	8001aee <SIM7600_checkEvent+0xce>
	{
		return;
	}

	/* Enable UART receive to IDLE DMA */
	HAL_UARTEx_ReceiveToIdle_DMA((UART_HandleTypeDef *)me->huart, (uint8_t *)me->parent.buffer, SIM_BUFFER_SIZE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001a40:	4619      	mov	r1, r3
 8001a42:	f004 fc7e 	bl	8006342 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)me->hdma, DMA_IT_HT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0208 	bic.w	r2, r2, #8
 8001a5c:	601a      	str	r2, [r3, #0]

	SIM_SET_FLAG(&me->parent, SIM_FLAG_RX);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	601a      	str	r2, [r3, #0]

	if (strstr(me->parent.buffer, SIM_URC_SMS) != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3308      	adds	r3, #8
 8001a6e:	4922      	ldr	r1, [pc, #136]	; (8001af8 <SIM7600_checkEvent+0xd8>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 f846 	bl	8008b02 <strstr>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01d      	beq.n	8001ab8 <SIM7600_checkEvent+0x98>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SMS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	601a      	str	r2, [r3, #0]

		char *sPtr = strstr(me->parent.buffer, "\"SM\",");
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	491b      	ldr	r1, [pc, #108]	; (8001afc <SIM7600_checkEvent+0xdc>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f007 f837 	bl	8008b02 <strstr>
 8001a94:	60f8      	str	r0, [r7, #12]

		if (sPtr != NULL && size >= 5u) // xxx: size?
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d029      	beq.n	8001af0 <SIM7600_checkEvent+0xd0>
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d926      	bls.n	8001af0 <SIM7600_checkEvent+0xd0>
		{
			me->smsPos = atoi(sPtr + 5u);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3305      	adds	r3, #5
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 f8b8 	bl	8007c1c <atoi>
 8001aac:	4603      	mov	r3, r0
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8001ab6:	e01b      	b.n	8001af0 <SIM7600_checkEvent+0xd0>
	}
	// else if (strstr(me->parent.buffer, SIM_URC_AUDIO_STOP) != NULL)
	// {
	// 	SIM_SET_FLAG(&me->parent, SIM_FLAG_AUDIO_STOP);
	// }
	else if (strstr(me->parent.buffer, SIM_URC_SIMCARD_UNPLUGIN) != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3308      	adds	r3, #8
 8001abc:	4910      	ldr	r1, [pc, #64]	; (8001b00 <SIM7600_checkEvent+0xe0>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f007 f81f 	bl	8008b02 <strstr>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <SIM7600_checkEvent+0xd0>
	{
		SIM_SET_FLAG(&me->parent, SIM_FLAG_SRMV);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	601a      	str	r2, [r3, #0]
		memset(me->parent.buffer, '\0', SIM_BUFFER_SIZE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3308      	adds	r3, #8
 8001ada:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f006 fff9 	bl	8008ad8 <memset>
		printf("Sim removed!\n\n");
 8001ae6:	4807      	ldr	r0, [pc, #28]	; (8001b04 <SIM7600_checkEvent+0xe4>)
 8001ae8:	f006 fec2 	bl	8008870 <puts>
 8001aec:	e000      	b.n	8001af0 <SIM7600_checkEvent+0xd0>
		return;
 8001aee:	bf00      	nop
	}
}
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	0800ae2c 	.word	0x0800ae2c
 8001afc:	0800ae3c 	.word	0x0800ae3c
 8001b00:	0800ae44 	.word	0x0800ae44
 8001b04:	0800ae5c 	.word	0x0800ae5c

08001b08 <SIM7600_readSMS>:
 * @param pSMS [out] Pointer to SMS data structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readSMS(SIM7600_HandleTypeDef *const me, const uint8_t order,
								  SIM_SMSTypeDef *pSMS)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	; 0x30
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	460b      	mov	r3, r1
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	72fb      	strb	r3, [r7, #11]
	if (me == NULL || pSMS == NULL)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <SIM7600_readSMS+0x1a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <SIM7600_readSMS+0x1e>
	{
		return THT_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e064      	b.n	8001bf0 <SIM7600_readSMS+0xe8>
	enum Enum
	{
		COMMAND_SIZE = 15
	};

	char command[COMMAND_SIZE] = {0};
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	f8c3 2007 	str.w	r2, [r3, #7]

	/* Clear the buffer */
	memset(pSMS->phone, '\0', SIM_PHONE_SIZE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	220d      	movs	r2, #13
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f006 ffca 	bl	8008ad8 <memset>
	memset(pSMS->time, '\0', SIM_TIME_SIZE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	330d      	adds	r3, #13
 8001b48:	2216      	movs	r2, #22
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 ffc3 	bl	8008ad8 <memset>
	memset(pSMS->content, '\0', SIM_SMS_SIZE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	3323      	adds	r3, #35	; 0x23
 8001b56:	22a0      	movs	r2, #160	; 0xa0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f006 ffbc 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+CMGRD=%u", order);
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f107 0010 	add.w	r0, r7, #16
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <SIM7600_readSMS+0xf0>)
 8001b68:	210f      	movs	r1, #15
 8001b6a:	f006 fe89 	bl	8008880 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8001b6e:	f107 0110 	add.w	r1, r7, #16
 8001b72:	f242 7310 	movw	r3, #10000	; 0x2710
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <SIM7600_readSMS+0xf4>)
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <SIM7600_readSMS+0xf8>)
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff fc2b 	bl	80013d8 <SIM7600_sendATCommand>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (THT_OK == status)
 8001b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d12d      	bne.n	8001bec <SIM7600_readSMS+0xe4>
	{
		/* Copy the phonenumber, time and and content of SMS */
		char *sPtr = strstr(me->parent.buffer, "\",\"");
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3308      	adds	r3, #8
 8001b94:	491b      	ldr	r1, [pc, #108]	; (8001c04 <SIM7600_readSMS+0xfc>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f006 ffb3 	bl	8008b02 <strstr>
 8001b9c:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 4, pSMS->phone, SIM_PHONE_SIZE, "\"");
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
 8001ba0:	1d18      	adds	r0, r3, #4
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <SIM7600_readSMS+0x100>)
 8001ba6:	220d      	movs	r2, #13
 8001ba8:	f005 ffce 	bl	8007b48 <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, ",\"2");
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3308      	adds	r3, #8
 8001bb0:	4916      	ldr	r1, [pc, #88]	; (8001c0c <SIM7600_readSMS+0x104>)
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f006 ffa5 	bl	8008b02 <strstr>
 8001bb8:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 2, pSMS->time, SIM_TIME_SIZE, "\"");
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	1c98      	adds	r0, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f103 010d 	add.w	r1, r3, #13
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <SIM7600_readSMS+0x100>)
 8001bc6:	2216      	movs	r2, #22
 8001bc8:	f005 ffbe 	bl	8007b48 <THT_copyStringUntilToken>
		sPtr = strstr(me->parent.buffer, "\"\r\n");
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3308      	adds	r3, #8
 8001bd0:	490f      	ldr	r1, [pc, #60]	; (8001c10 <SIM7600_readSMS+0x108>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f006 ff95 	bl	8008b02 <strstr>
 8001bd8:	6238      	str	r0, [r7, #32]
		THT_copyStringUntilToken(sPtr + 3, pSMS->content, SIM_SMS_SIZE, "\r");
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	1cd8      	adds	r0, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <SIM7600_readSMS+0x10c>)
 8001be6:	22a0      	movs	r2, #160	; 0xa0
 8001be8:	f005 ffae 	bl	8007b48 <THT_copyStringUntilToken>
	}

	return status;
 8001bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3728      	adds	r7, #40	; 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0800ae6c 	.word	0x0800ae6c
 8001bfc:	0800accc 	.word	0x0800accc
 8001c00:	0800acd4 	.word	0x0800acd4
 8001c04:	0800ae78 	.word	0x0800ae78
 8001c08:	0800ae7c 	.word	0x0800ae7c
 8001c0c:	0800ae80 	.word	0x0800ae80
 8001c10:	0800ae84 	.word	0x0800ae84
 8001c14:	0800ae88 	.word	0x0800ae88

08001c18 <SIM7600_sendSMS>:
 * @param msgSize [in] the length of the SMS content
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendSMS(SIM7600_HandleTypeDef *const me, const char *pPhone, const char *pMsg,
								  uint8_t phoneSize, uint16_t msgSize)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b0c9      	sub	sp, #292	; 0x124
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8001c22:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8001c26:	6020      	str	r0, [r4, #0]
 8001c28:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001c2c:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8001c30:	6001      	str	r1, [r0, #0]
 8001c32:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001c36:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8001c3a:	600a      	str	r2, [r1, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c42:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8001c46:	701a      	strb	r2, [r3, #0]
	if (me == NULL || pPhone == NULL || pMsg == NULL ||
 8001c48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d018      	beq.n	8001c88 <SIM7600_sendSMS+0x70>
 8001c56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c5a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d011      	beq.n	8001c88 <SIM7600_sendSMS+0x70>
 8001c64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c68:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <SIM7600_sendSMS+0x70>
 8001c72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c76:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b0d      	cmp	r3, #13
 8001c7e:	d803      	bhi.n	8001c88 <SIM7600_sendSMS+0x70>
		phoneSize > SIM_PHONE_SIZE || msgSize == 0)
 8001c80:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <SIM7600_sendSMS+0x74>
	{
		return THT_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0ec      	b.n	8001e66 <SIM7600_sendSMS+0x24e>
		MAX_SMS_LENGTH = 160u,
		MAX_SMS_SEGMENT_LENGTH = 146u,
		CTRL_Z_CHARACTER = 0x1A
	};

	char command[COMMAND_SIZE] = {0};
 8001c8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	22f6      	movs	r2, #246	; 0xf6
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f006 ff1a 	bl	8008ad8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CMGF=1", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8001ca4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ca8:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001cac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <SIM7600_sendSMS+0x258>)
 8001cb4:	4a6f      	ldr	r2, [pc, #444]	; (8001e74 <SIM7600_sendSMS+0x25c>)
 8001cb6:	4970      	ldr	r1, [pc, #448]	; (8001e78 <SIM7600_sendSMS+0x260>)
 8001cb8:	6800      	ldr	r0, [r0, #0]
 8001cba:	f7ff fb8d 	bl	80013d8 <SIM7600_sendATCommand>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	/* Send SMS */
	if (msgSize < MAX_SMS_LENGTH)
 8001cc4:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001cc8:	2b9f      	cmp	r3, #159	; 0x9f
 8001cca:	d83f      	bhi.n	8001d4c <SIM7600_sendSMS+0x134>
	{
		snprintf(command, sizeof(command), "AT+CMGS=\"%s\"", pPhone);
 8001ccc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001cd4:	f107 0014 	add.w	r0, r7, #20
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a68      	ldr	r2, [pc, #416]	; (8001e7c <SIM7600_sendSMS+0x264>)
 8001cdc:	21fa      	movs	r1, #250	; 0xfa
 8001cde:	f006 fdcf 	bl	8008880 <sniprintf>

		status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 8001ce2:	f107 0114 	add.w	r1, r7, #20
 8001ce6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cea:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001cee:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <SIM7600_sendSMS+0x258>)
 8001cf6:	4a62      	ldr	r2, [pc, #392]	; (8001e80 <SIM7600_sendSMS+0x268>)
 8001cf8:	6800      	ldr	r0, [r0, #0]
 8001cfa:	f7ff fb6d 	bl	80013d8 <SIM7600_sendATCommand>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		if (THT_OK == status)
 8001d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f040 80aa 	bne.w	8001e62 <SIM7600_sendSMS+0x24a>
		{
			snprintf(command, sizeof(command), "%s%c", pMsg, CTRL_Z_CHARACTER);
 8001d0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d16:	f107 0014 	add.w	r0, r7, #20
 8001d1a:	221a      	movs	r2, #26
 8001d1c:	9200      	str	r2, [sp, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a58      	ldr	r2, [pc, #352]	; (8001e84 <SIM7600_sendSMS+0x26c>)
 8001d22:	21fa      	movs	r1, #250	; 0xfa
 8001d24:	f006 fdac 	bl	8008880 <sniprintf>
			status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8001d28:	f107 0114 	add.w	r1, r7, #20
 8001d2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d30:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001d34:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <SIM7600_sendSMS+0x258>)
 8001d3c:	4a4d      	ldr	r2, [pc, #308]	; (8001e74 <SIM7600_sendSMS+0x25c>)
 8001d3e:	6800      	ldr	r0, [r0, #0]
 8001d40:	f7ff fb4a 	bl	80013d8 <SIM7600_sendATCommand>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001d4a:	e08a      	b.n	8001e62 <SIM7600_sendSMS+0x24a>
		}
	}
	/* Send long SMS */
	else
	{
		uint8_t smsSegmentSize = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		uint8_t totalSms = (msgSize / MAX_SMS_SEGMENT_LENGTH) + 1;
 8001d52:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001d56:	085b      	lsrs	r3, r3, #1
 8001d58:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <SIM7600_sendSMS+0x270>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	099b      	lsrs	r3, r3, #6
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		/* Split and send SMS messages one by one */
		for (size_t seg = 1; seg <= totalSms; seg++)
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001d70:	e071      	b.n	8001e56 <SIM7600_sendSMS+0x23e>
		{
			if (msgSize < MAX_SMS_SEGMENT_LENGTH)
 8001d72:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001d76:	2b91      	cmp	r3, #145	; 0x91
 8001d78:	d804      	bhi.n	8001d84 <SIM7600_sendSMS+0x16c>
			{
				smsSegmentSize = msgSize;
 8001d7a:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 8001d7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001d82:	e002      	b.n	8001d8a <SIM7600_sendSMS+0x172>
			}
			else
			{
				smsSegmentSize = MAX_SMS_SEGMENT_LENGTH;
 8001d84:	2392      	movs	r3, #146	; 0x92
 8001d86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
			}

			snprintf(command, sizeof(command), "AT+CMGSEX=\"%s\",190,%u,%u",
 8001d8a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8001d8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d96:	f107 0014 	add.w	r0, r7, #20
 8001d9a:	9201      	str	r2, [sp, #4]
 8001d9c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a39      	ldr	r2, [pc, #228]	; (8001e8c <SIM7600_sendSMS+0x274>)
 8001da6:	21fa      	movs	r1, #250	; 0xfa
 8001da8:	f006 fd6a 	bl	8008880 <sniprintf>
					 pPhone, seg, totalSms);

			status = SIM7600_sendATCommand(me, command, ">", SIM_URC_ERROR, 15000);
 8001dac:	f107 0114 	add.w	r1, r7, #20
 8001db0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001db4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001db8:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <SIM7600_sendSMS+0x258>)
 8001dc0:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <SIM7600_sendSMS+0x268>)
 8001dc2:	6800      	ldr	r0, [r0, #0]
 8001dc4:	f7ff fb08 	bl	80013d8 <SIM7600_sendATCommand>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

			if (THT_OK == status)
 8001dce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d13a      	bne.n	8001e4c <SIM7600_sendSMS+0x234>
			{
				memset(command, '\0', sizeof(command));
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	22fa      	movs	r2, #250	; 0xfa
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f006 fe7a 	bl	8008ad8 <memset>
				memcpy(command, pMsg + (seg - 1) * MAX_SMS_SEGMENT_LENGTH,
 8001de4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001de8:	2292      	movs	r2, #146	; 0x92
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	3b92      	subs	r3, #146	; 0x92
 8001df0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001df4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	18d1      	adds	r1, r2, r3
 8001dfc:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4618      	mov	r0, r3
 8001e06:	f006 ff0a 	bl	8008c1e <memcpy>
					   smsSegmentSize);
				command[smsSegmentSize] = CTRL_Z_CHARACTER;
 8001e0a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001e0e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001e12:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001e16:	211a      	movs	r1, #26
 8001e18:	54d1      	strb	r1, [r2, r3]
				status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8001e1a:	f107 0114 	add.w	r1, r7, #20
 8001e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e22:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8001e26:	f242 7310 	movw	r3, #10000	; 0x2710
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <SIM7600_sendSMS+0x258>)
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <SIM7600_sendSMS+0x25c>)
 8001e30:	6800      	ldr	r0, [r0, #0]
 8001e32:	f7ff fad1 	bl	80013d8 <SIM7600_sendATCommand>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				msgSize -= smsSegmentSize;
 8001e3c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
		for (size_t seg = 1; seg <= totalSms; seg++)
 8001e4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e50:	3301      	adds	r3, #1
 8001e52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001e56:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001e5a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d987      	bls.n	8001d72 <SIM7600_sendSMS+0x15a>
			}
		}
	}

	return status;
 8001e62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}
 8001e70:	0800accc 	.word	0x0800accc
 8001e74:	0800acd4 	.word	0x0800acd4
 8001e78:	0800ad7c 	.word	0x0800ad7c
 8001e7c:	0800ae8c 	.word	0x0800ae8c
 8001e80:	0800ae9c 	.word	0x0800ae9c
 8001e84:	0800aea0 	.word	0x0800aea0
 8001e88:	e070381d 	.word	0xe070381d
 8001e8c:	0800aea8 	.word	0x0800aea8

08001e90 <SIM7600_getSMSCounter>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getSMSCounter(SIM7600_HandleTypeDef *const me)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <SIM7600_getSMSCounter+0x12>
	{
		return THT_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e032      	b.n	8001f08 <SIM7600_getSMSCounter+0x78>
	}

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMS=\"SM\",\"SM\",\"SM\"", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8001ea2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <SIM7600_getSMSCounter+0x80>)
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <SIM7600_getSMSCounter+0x84>)
 8001eac:	491a      	ldr	r1, [pc, #104]	; (8001f18 <SIM7600_getSMSCounter+0x88>)
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fa92 	bl	80013d8 <SIM7600_sendATCommand>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]

	if (THT_OK == status)
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d123      	bne.n	8001f06 <SIM7600_getSMSCounter+0x76>
	{
		char *sPtr = strstr(me->parent.buffer, ": ");
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	4916      	ldr	r1, [pc, #88]	; (8001f1c <SIM7600_getSMSCounter+0x8c>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f006 fe1c 	bl	8008b02 <strstr>
 8001eca:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <SIM7600_getSMSCounter+0x56>
		{
			me->smsCnt = atoi(sPtr + 2);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f005 fea0 	bl	8007c1c <atoi>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b25a      	sxtb	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
		}

		if (me->smsCnt > me->smsPos)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f993 22c9 	ldrsb.w	r2, [r3, #713]	; 0x2c9
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dd03      	ble.n	8001efe <SIM7600_getSMSCounter+0x6e>
		{
			return me->smsCnt;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f993 32c9 	ldrsb.w	r3, [r3, #713]	; 0x2c9
 8001efc:	e004      	b.n	8001f08 <SIM7600_getSMSCounter+0x78>
		}
		else
		{
			return me->smsPos;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f993 32c8 	ldrsb.w	r3, [r3, #712]	; 0x2c8
 8001f04:	e000      	b.n	8001f08 <SIM7600_getSMSCounter+0x78>
		}
	}

	return 0u;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0800accc 	.word	0x0800accc
 8001f14:	0800acd4 	.word	0x0800acd4
 8001f18:	0800ad58 	.word	0x0800ad58
 8001f1c:	0800aec4 	.word	0x0800aec4

08001f20 <SIM7600_callUSSD>:
 * @param response [out] a buffer to store the response of the USSD request
 * @param size [in]
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_callUSSD(SIM7600_HandleTypeDef *const me, const char *ussd, char response[], const uint16_t size)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b092      	sub	sp, #72	; 0x48
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	807b      	strh	r3, [r7, #2]
	if (me == NULL || ussd == NULL)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <SIM7600_callUSSD+0x1a>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <SIM7600_callUSSD+0x1e>
	{
		return THT_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e039      	b.n	8001fb2 <SIM7600_callUSSD+0x92>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 fdc4 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+CUSD=1,\"%s\",15", ussd);
 8001f50:	f107 0010 	add.w	r0, r7, #16
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <SIM7600_callUSSD+0x9c>)
 8001f58:	2128      	movs	r1, #40	; 0x28
 8001f5a:	f006 fc91 	bl	8008880 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, ",15", SIM_URC_ERROR, 15000);
 8001f5e:	f107 0110 	add.w	r1, r7, #16
 8001f62:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <SIM7600_callUSSD+0xa0>)
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <SIM7600_callUSSD+0xa4>)
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fa33 	bl	80013d8 <SIM7600_sendATCommand>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (THT_OK == status)
 8001f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d116      	bne.n	8001fae <SIM7600_callUSSD+0x8e>
	{
		char *sPtr = strstr(me->parent.buffer, ",\"");
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	4910      	ldr	r1, [pc, #64]	; (8001fc8 <SIM7600_callUSSD+0xa8>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 fdbb 	bl	8008b02 <strstr>
 8001f8c:	63b8      	str	r0, [r7, #56]	; 0x38

		THT_copyStringUntilToken(sPtr + 1, response, size, NULL);
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	1c58      	adds	r0, r3, #1
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	2300      	movs	r3, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f005 fdd6 	bl	8007b48 <THT_copyStringUntilToken>
		SIM7600_sendATCommand(me, "AT+CUSD=2,\"\",15", SIM_URC_OK, SIM_URC_ERROR, 15000);
 8001f9c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <SIM7600_callUSSD+0xa0>)
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <SIM7600_callUSSD+0xac>)
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <SIM7600_callUSSD+0xb0>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff fa15 	bl	80013d8 <SIM7600_sendATCommand>
	}
	return status;
 8001fae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3740      	adds	r7, #64	; 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	0800aec8 	.word	0x0800aec8
 8001fc0:	0800accc 	.word	0x0800accc
 8001fc4:	0800aedc 	.word	0x0800aedc
 8001fc8:	0800aee0 	.word	0x0800aee0
 8001fcc:	0800acd4 	.word	0x0800acd4
 8001fd0:	0800aee4 	.word	0x0800aee4

08001fd4 <SIM7600_getRSSI>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getRSSI(SIM7600_HandleTypeDef *const me)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <SIM7600_getRSSI+0x12>
	{
		return 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e025      	b.n	8002032 <SIM7600_getRSSI+0x5e>
	}

	int8_t rssi = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CSQ", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8001fea:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <SIM7600_getRSSI+0x68>)
 8001ff2:	4a13      	ldr	r2, [pc, #76]	; (8002040 <SIM7600_getRSSI+0x6c>)
 8001ff4:	4913      	ldr	r1, [pc, #76]	; (8002044 <SIM7600_getRSSI+0x70>)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff f9ee 	bl	80013d8 <SIM7600_sendATCommand>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d113      	bne.n	800202e <SIM7600_getRSSI+0x5a>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3308      	adds	r3, #8
 800200a:	2120      	movs	r1, #32
 800200c:	4618      	mov	r0, r3
 800200e:	f006 fd6b 	bl	8008ae8 <strchr>
 8002012:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <SIM7600_getRSSI+0x5a>
		{
			rssi = (2u * atoi(sPtr)) - 113u;
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f005 fdfe 	bl	8007c1c <atoi>
 8002020:	4603      	mov	r3, r0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3b71      	subs	r3, #113	; 0x71
 800202a:	b2db      	uxtb	r3, r3
 800202c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rssi;
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	0800accc 	.word	0x0800accc
 8002040:	0800acd4 	.word	0x0800acd4
 8002044:	0800aef4 	.word	0x0800aef4

08002048 <SIM7600_getNetworkType>:
 * @param pNwtype [out] A buffer to store the string network type
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getNetworkType(SIM7600_HandleTypeDef *const me, char pNwtype[], const uint8_t size)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pNwtype == NULL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <SIM7600_getNetworkType+0x1a>
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <SIM7600_getNetworkType+0x1e>
	{
		return THT_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e061      	b.n	800212a <SIM7600_getNetworkType+0xe2>
	}

	memset(pNwtype, '\0', size);
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	461a      	mov	r2, r3
 800206a:	2100      	movs	r1, #0
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f006 fd33 	bl	8008ad8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002072:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <SIM7600_getNetworkType+0xec>)
 800207a:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <SIM7600_getNetworkType+0xf0>)
 800207c:	492f      	ldr	r1, [pc, #188]	; (800213c <SIM7600_getNetworkType+0xf4>)
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f7ff f9aa 	bl	80013d8 <SIM7600_sendATCommand>
 8002084:	4603      	mov	r3, r0
 8002086:	75fb      	strb	r3, [r7, #23]

	if (THT_OK == status)
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d146      	bne.n	800211c <SIM7600_getNetworkType+0xd4>
	{
		if (strstr(me->parent.buffer, "LTE") != NULL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3308      	adds	r3, #8
 8002092:	492b      	ldr	r1, [pc, #172]	; (8002140 <SIM7600_getNetworkType+0xf8>)
 8002094:	4618      	mov	r0, r3
 8002096:	f006 fd34 	bl	8008b02 <strstr>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <SIM7600_getNetworkType+0x66>
		{
			snprintf(pNwtype, size, "LTE");
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	4a27      	ldr	r2, [pc, #156]	; (8002140 <SIM7600_getNetworkType+0xf8>)
 80020a4:	4619      	mov	r1, r3
 80020a6:	68b8      	ldr	r0, [r7, #8]
 80020a8:	f006 fbea 	bl	8008880 <sniprintf>
 80020ac:	e03c      	b.n	8002128 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "WCDMA") != NULL)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3308      	adds	r3, #8
 80020b2:	4924      	ldr	r1, [pc, #144]	; (8002144 <SIM7600_getNetworkType+0xfc>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f006 fd24 	bl	8008b02 <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <SIM7600_getNetworkType+0x86>
		{
			snprintf(pNwtype, size, "WCDMA");
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	4a20      	ldr	r2, [pc, #128]	; (8002144 <SIM7600_getNetworkType+0xfc>)
 80020c4:	4619      	mov	r1, r3
 80020c6:	68b8      	ldr	r0, [r7, #8]
 80020c8:	f006 fbda 	bl	8008880 <sniprintf>
 80020cc:	e02c      	b.n	8002128 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "GSM") != NULL)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3308      	adds	r3, #8
 80020d2:	491d      	ldr	r1, [pc, #116]	; (8002148 <SIM7600_getNetworkType+0x100>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f006 fd14 	bl	8008b02 <strstr>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <SIM7600_getNetworkType+0xa6>
		{
			snprintf(pNwtype, size, "GSM");
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <SIM7600_getNetworkType+0x100>)
 80020e4:	4619      	mov	r1, r3
 80020e6:	68b8      	ldr	r0, [r7, #8]
 80020e8:	f006 fbca 	bl	8008880 <sniprintf>
 80020ec:	e01c      	b.n	8002128 <SIM7600_getNetworkType+0xe0>
		}
		else if (strstr(me->parent.buffer, "NO SERVICE") != NULL)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3308      	adds	r3, #8
 80020f2:	4916      	ldr	r1, [pc, #88]	; (800214c <SIM7600_getNetworkType+0x104>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fd04 	bl	8008b02 <strstr>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <SIM7600_getNetworkType+0xc6>
		{
			snprintf(pNwtype, size, "NO SERVICE");
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <SIM7600_getNetworkType+0x104>)
 8002104:	4619      	mov	r1, r3
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f006 fbba 	bl	8008880 <sniprintf>
 800210c:	e00c      	b.n	8002128 <SIM7600_getNetworkType+0xe0>
		}
		else
		{
			snprintf(pNwtype, size, "Unknown");
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <SIM7600_getNetworkType+0x108>)
 8002112:	4619      	mov	r1, r3
 8002114:	68b8      	ldr	r0, [r7, #8]
 8002116:	f006 fbb3 	bl	8008880 <sniprintf>
 800211a:	e005      	b.n	8002128 <SIM7600_getNetworkType+0xe0>
		}
	}
	else
	{
		snprintf(pNwtype, size, "Unknown");
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <SIM7600_getNetworkType+0x108>)
 8002120:	4619      	mov	r1, r3
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f006 fbac 	bl	8008880 <sniprintf>
	}

	return status;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	0800accc 	.word	0x0800accc
 8002138:	0800acd4 	.word	0x0800acd4
 800213c:	0800aefc 	.word	0x0800aefc
 8002140:	0800af08 	.word	0x0800af08
 8002144:	0800af0c 	.word	0x0800af0c
 8002148:	0800af14 	.word	0x0800af14
 800214c:	0800add8 	.word	0x0800add8
 8002150:	0800ade4 	.word	0x0800ade4

08002154 <SIM7600_getTemperature>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return int8_t
 */
int8_t SIM7600_getTemperature(SIM7600_HandleTypeDef *const me)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <SIM7600_getTemperature+0x12>
	{
		return THT_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e022      	b.n	80021ac <SIM7600_getTemperature+0x58>
	}

	int8_t temperature = 0.0f;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+CPMUTEMP", SIM_URC_OK, SIM_URC_ERROR, 4000);
 800216a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <SIM7600_getTemperature+0x60>)
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <SIM7600_getTemperature+0x64>)
 8002174:	4911      	ldr	r1, [pc, #68]	; (80021bc <SIM7600_getTemperature+0x68>)
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff f92e 	bl	80013d8 <SIM7600_sendATCommand>
 800217c:	4603      	mov	r3, r0
 800217e:	73bb      	strb	r3, [r7, #14]

	if (THT_OK == status)
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d110      	bne.n	80021a8 <SIM7600_getTemperature+0x54>
	{
		char *sPtr = strstr(me->parent.buffer, " ");
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	2120      	movs	r1, #32
 800218c:	4618      	mov	r0, r3
 800218e:	f006 fcab 	bl	8008ae8 <strchr>
 8002192:	60b8      	str	r0, [r7, #8]

		if (sPtr != NULL)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <SIM7600_getTemperature+0x54>
		{
			temperature = atoi(sPtr + 1);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 fd3c 	bl	8007c1c <atoi>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
		}
	}

	return temperature;
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	0800accc 	.word	0x0800accc
 80021b8:	0800acd4 	.word	0x0800acd4
 80021bc:	0800af18 	.word	0x0800af18

080021c0 <SIM7600_getSimPhone>:
 * @param pPhone [out] A buffer to store the phone number
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getSimPhone(SIM7600_HandleTypeDef *const me, char pPhone[], const uint8_t size)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0b0      	sub	sp, #192	; 0xc0
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	4613      	mov	r3, r2
 80021cc:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pPhone == NULL || size < SIM_PHONE_SIZE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <SIM7600_getSimPhone+0x20>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <SIM7600_getSimPhone+0x20>
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b0c      	cmp	r3, #12
 80021de:	d801      	bhi.n	80021e4 <SIM7600_getSimPhone+0x24>
	{
		return THT_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d1      	b.n	8002388 <SIM7600_getSimPhone+0x1c8>
	enum Enum
	{
		USSD_BUFFER_SIZE = 150
	};

	memset(pPhone, '\0', size);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	461a      	mov	r2, r3
 80021e8:	2100      	movs	r1, #0
 80021ea:	68b8      	ldr	r0, [r7, #8]
 80021ec:	f006 fc74 	bl	8008ad8 <memset>

	uint8_t counter = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	char ussdResponse[USSD_BUFFER_SIZE] = {0};
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	2292      	movs	r2, #146	; 0x92
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f006 fc68 	bl	8008ad8 <memset>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, "AT+COPS?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002208:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4b60      	ldr	r3, [pc, #384]	; (8002390 <SIM7600_getSimPhone+0x1d0>)
 8002210:	4a60      	ldr	r2, [pc, #384]	; (8002394 <SIM7600_getSimPhone+0x1d4>)
 8002212:	4961      	ldr	r1, [pc, #388]	; (8002398 <SIM7600_getSimPhone+0x1d8>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff f8df 	bl	80013d8 <SIM7600_sendATCommand>
 800221a:	4603      	mov	r3, r0
 800221c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

	if (THT_OK == status)
 8002220:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80ad 	bne.w	8002384 <SIM7600_getSimPhone+0x1c4>
	{
		/* "\r\n+COPS: 0,0,\"Viettel Viettel\",7\r\n\r\nOK\r\n" */
		do
		{
			/* Check if sim is Viettel Operator */
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3308      	adds	r3, #8
 800222e:	495b      	ldr	r1, [pc, #364]	; (800239c <SIM7600_getSimPhone+0x1dc>)
 8002230:	4618      	mov	r0, r3
 8002232:	f006 fc66 	bl	8008b02 <strstr>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d108      	bne.n	800224e <SIM7600_getSimPhone+0x8e>
				strstr(me->parent.buffer, "VIETTEL") != NULL)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3308      	adds	r3, #8
 8002240:	4957      	ldr	r1, [pc, #348]	; (80023a0 <SIM7600_getSimPhone+0x1e0>)
 8002242:	4618      	mov	r0, r3
 8002244:	f006 fc5d 	bl	8008b02 <strstr>
 8002248:	4603      	mov	r3, r0
			if (strstr(me->parent.buffer, "Viettel") != NULL ||
 800224a:	2b00      	cmp	r3, #0
 800224c:	d025      	beq.n	800229a <SIM7600_getSimPhone+0xda>
			{
				status = SIM7600_callUSSD(me, "*098#", ussdResponse, sizeof(ussdResponse));
 800224e:	f107 0210 	add.w	r2, r7, #16
 8002252:	2396      	movs	r3, #150	; 0x96
 8002254:	4953      	ldr	r1, [pc, #332]	; (80023a4 <SIM7600_getSimPhone+0x1e4>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fe62 	bl	8001f20 <SIM7600_callUSSD>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 8002262:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002266:	2b00      	cmp	r3, #0
 8002268:	d17e      	bne.n	8002368 <SIM7600_getSimPhone+0x1a8>
				{
					/* "Moi 01699741245 chon: */
					memcpy(pPhone, "84", 2);
 800226a:	2202      	movs	r2, #2
 800226c:	494e      	ldr	r1, [pc, #312]	; (80023a8 <SIM7600_getSimPhone+0x1e8>)
 800226e:	68b8      	ldr	r0, [r7, #8]
 8002270:	f006 fcd5 	bl	8008c1e <memcpy>

					char *sPtr = strstr(ussdResponse, " ");
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2120      	movs	r1, #32
 800227a:	4618      	mov	r0, r3
 800227c:	f006 fc34 	bl	8008ae8 <strchr>
 8002280:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
					THT_copyStringUntilToken(sPtr + 2, pPhone + 2, size, " ");
 8002284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002288:	1c98      	adds	r0, r3, #2
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1c99      	adds	r1, r3, #2
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b46      	ldr	r3, [pc, #280]	; (80023ac <SIM7600_getSimPhone+0x1ec>)
 8002294:	f005 fc58 	bl	8007b48 <THT_copyStringUntilToken>
				if (THT_OK == status)
 8002298:	e066      	b.n	8002368 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Vina Operator */
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3308      	adds	r3, #8
 800229e:	4944      	ldr	r1, [pc, #272]	; (80023b0 <SIM7600_getSimPhone+0x1f0>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f006 fc2e 	bl	8008b02 <strstr>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d108      	bne.n	80022be <SIM7600_getSimPhone+0xfe>
					 strstr(me->parent.buffer, "VINA") != NULL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3308      	adds	r3, #8
 80022b0:	4940      	ldr	r1, [pc, #256]	; (80023b4 <SIM7600_getSimPhone+0x1f4>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f006 fc25 	bl	8008b02 <strstr>
 80022b8:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "Vina") != NULL ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d024      	beq.n	8002308 <SIM7600_getSimPhone+0x148>
			{
				status = SIM7600_callUSSD(me, "*110#", ussdResponse, sizeof(ussdResponse));
 80022be:	f107 0210 	add.w	r2, r7, #16
 80022c2:	2396      	movs	r3, #150	; 0x96
 80022c4:	493c      	ldr	r1, [pc, #240]	; (80023b8 <SIM7600_getSimPhone+0x1f8>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fe2a 	bl	8001f20 <SIM7600_callUSSD>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 80022d2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d146      	bne.n	8002368 <SIM7600_getSimPhone+0x1a8>
				{
					/* "TB (VINACARD):914486786 */
					memcpy(pPhone, "84", 2);
 80022da:	2202      	movs	r2, #2
 80022dc:	4932      	ldr	r1, [pc, #200]	; (80023a8 <SIM7600_getSimPhone+0x1e8>)
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f006 fc9d 	bl	8008c1e <memcpy>
					char *sPtr = strstr(ussdResponse, ":");
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	213a      	movs	r1, #58	; 0x3a
 80022ea:	4618      	mov	r0, r3
 80022ec:	f006 fbfc 	bl	8008ae8 <strchr>
 80022f0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
					THT_copyStringUntilToken(sPtr, pPhone + 2, size, "\r");
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	1c99      	adds	r1, r3, #2
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <SIM7600_getSimPhone+0x1fc>)
 80022fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002302:	f005 fc21 	bl	8007b48 <THT_copyStringUntilToken>
				if (THT_OK == status)
 8002306:	e02f      	b.n	8002368 <SIM7600_getSimPhone+0x1a8>
				}
			}
			/* Check if sim is Mobifone Operator */
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3308      	adds	r3, #8
 800230c:	492c      	ldr	r1, [pc, #176]	; (80023c0 <SIM7600_getSimPhone+0x200>)
 800230e:	4618      	mov	r0, r3
 8002310:	f006 fbf7 	bl	8008b02 <strstr>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d108      	bne.n	800232c <SIM7600_getSimPhone+0x16c>
					 strstr(me->parent.buffer, "Mobiphone") != NULL)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3308      	adds	r3, #8
 800231e:	4929      	ldr	r1, [pc, #164]	; (80023c4 <SIM7600_getSimPhone+0x204>)
 8002320:	4618      	mov	r0, r3
 8002322:	f006 fbee 	bl	8008b02 <strstr>
 8002326:	4603      	mov	r3, r0
			else if (strstr(me->parent.buffer, "MOBI") != NULL ||
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01d      	beq.n	8002368 <SIM7600_getSimPhone+0x1a8>
			{
				status = SIM7600_callUSSD(me, "*0#", ussdResponse, sizeof(ussdResponse));
 800232c:	f107 0210 	add.w	r2, r7, #16
 8002330:	2396      	movs	r3, #150	; 0x96
 8002332:	4925      	ldr	r1, [pc, #148]	; (80023c8 <SIM7600_getSimPhone+0x208>)
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff fdf3 	bl	8001f20 <SIM7600_callUSSD>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6

				if (THT_OK == status)
 8002340:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <SIM7600_getSimPhone+0x1a8>
				{
					/* "84914486786" */
					char *sPtr = strstr(ussdResponse, "84");
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <SIM7600_getSimPhone+0x1e8>)
 800234e:	4618      	mov	r0, r3
 8002350:	f006 fbd7 	bl	8008b02 <strstr>
 8002354:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
					THT_copyStringUntilToken(sPtr, pPhone, size, "\r");
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	b29a      	uxth	r2, r3
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <SIM7600_getSimPhone+0x1fc>)
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002364:	f005 fbf0 	bl	8007b48 <THT_copyStringUntilToken>
				}
			}
			counter++;
 8002368:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800236c:	3301      	adds	r3, #1
 800236e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		} while (counter < 3 && pPhone[0] == 0);
 8002372:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002376:	2b02      	cmp	r3, #2
 8002378:	d804      	bhi.n	8002384 <SIM7600_getSimPhone+0x1c4>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f43f af53 	beq.w	800222a <SIM7600_getSimPhone+0x6a>
	}

	return status;
 8002384:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
}
 8002388:	4618      	mov	r0, r3
 800238a:	37b8      	adds	r7, #184	; 0xb8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	0800accc 	.word	0x0800accc
 8002394:	0800acd4 	.word	0x0800acd4
 8002398:	0800af24 	.word	0x0800af24
 800239c:	0800af30 	.word	0x0800af30
 80023a0:	0800af38 	.word	0x0800af38
 80023a4:	0800af40 	.word	0x0800af40
 80023a8:	0800af48 	.word	0x0800af48
 80023ac:	0800af4c 	.word	0x0800af4c
 80023b0:	0800af50 	.word	0x0800af50
 80023b4:	0800af58 	.word	0x0800af58
 80023b8:	0800af60 	.word	0x0800af60
 80023bc:	0800ae88 	.word	0x0800ae88
 80023c0:	0800af68 	.word	0x0800af68
 80023c4:	0800af70 	.word	0x0800af70
 80023c8:	0800af7c 	.word	0x0800af7c

080023cc <SIM7600_getIMEI>:
 * @param pIMEI [out] A buffer store the SIM IMEI string
 * @param size [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getIMEI(SIM7600_HandleTypeDef *const me, char pIMEI[], const uint8_t size)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pIMEI == NULL || size < SIM_IMEI_SIZE)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <SIM7600_getIMEI+0x20>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <SIM7600_getIMEI+0x20>
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d801      	bhi.n	80023f0 <SIM7600_getIMEI+0x24>
	{
		return THT_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e02f      	b.n	8002450 <SIM7600_getIMEI+0x84>
	}

	memset(pIMEI, '\0', size);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	461a      	mov	r2, r3
 80023f4:	2100      	movs	r1, #0
 80023f6:	68b8      	ldr	r0, [r7, #8]
 80023f8:	f006 fb6e 	bl	8008ad8 <memset>

	uint8_t counter = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	75fb      	strb	r3, [r7, #23]
	THT_StatusTypeDef status;

	do
	{
		status = SIM7600_sendATCommand(me, "AT+SIMEI?", SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002400:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <SIM7600_getIMEI+0x8c>)
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <SIM7600_getIMEI+0x90>)
 800240a:	4915      	ldr	r1, [pc, #84]	; (8002460 <SIM7600_getIMEI+0x94>)
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f7fe ffe3 	bl	80013d8 <SIM7600_sendATCommand>
 8002412:	4603      	mov	r3, r0
 8002414:	75bb      	strb	r3, [r7, #22]

		if (THT_OK == status)
 8002416:	7dbb      	ldrb	r3, [r7, #22]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <SIM7600_getIMEI+0x6e>
		{
			char *sPtr = strstr(me->parent.buffer, " ");
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3308      	adds	r3, #8
 8002420:	2120      	movs	r1, #32
 8002422:	4618      	mov	r0, r3
 8002424:	f006 fb60 	bl	8008ae8 <strchr>
 8002428:	6138      	str	r0, [r7, #16]
			THT_copyStringUntilToken(sPtr + 1, pIMEI, size, "\r");
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1c58      	adds	r0, r3, #1
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	b29a      	uxth	r2, r3
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <SIM7600_getIMEI+0x98>)
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	f005 fb87 	bl	8007b48 <THT_copyStringUntilToken>
		}
		counter++;
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	3301      	adds	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
	} while (pIMEI[0] == 0 && counter < 3);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <SIM7600_getIMEI+0x82>
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d9d8      	bls.n	8002400 <SIM7600_getIMEI+0x34>

	return status;
 800244e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800accc 	.word	0x0800accc
 800245c:	0800acd4 	.word	0x0800acd4
 8002460:	0800af80 	.word	0x0800af80
 8002464:	0800ae88 	.word	0x0800ae88

08002468 <SIM7600_getLocalTime>:
 * @param pTime [out] A buffer store the time string
 * @param size [in] The size of the buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getLocalTime(SIM7600_HandleTypeDef *const me, char pTime[], const uint8_t size)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size < SIM_TIME_SIZE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <SIM7600_getLocalTime+0x20>
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <SIM7600_getLocalTime+0x20>
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b15      	cmp	r3, #21
 8002486:	d801      	bhi.n	800248c <SIM7600_getLocalTime+0x24>
	{
		return THT_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e03e      	b.n	800250a <SIM7600_getLocalTime+0xa2>
	}

	uint8_t counter = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]

	memset(pTime, '\0', size);
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	461a      	mov	r2, r3
 8002494:	2100      	movs	r1, #0
 8002496:	68b8      	ldr	r0, [r7, #8]
 8002498:	f006 fb1e 	bl	8008ad8 <memset>

	THT_StatusTypeDef status;
	do
	{
		status = SIM7600_sendATCommand(me, "AT+CCLK?", "+28", SIM_URC_ERROR, 3000);
 800249c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <SIM7600_getLocalTime+0xac>)
 80024a4:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <SIM7600_getLocalTime+0xb0>)
 80024a6:	491d      	ldr	r1, [pc, #116]	; (800251c <SIM7600_getLocalTime+0xb4>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7fe ff95 	bl	80013d8 <SIM7600_sendATCommand>
 80024ae:	4603      	mov	r3, r0
 80024b0:	75bb      	strb	r3, [r7, #22]

		if (status == THT_OK)
 80024b2:	7dbb      	ldrb	r3, [r7, #22]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d117      	bne.n	80024e8 <SIM7600_getLocalTime+0x80>
		{
			if (strstr(me->parent.buffer, "80/0") == NULL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3308      	adds	r3, #8
 80024bc:	4918      	ldr	r1, [pc, #96]	; (8002520 <SIM7600_getLocalTime+0xb8>)
 80024be:	4618      	mov	r0, r3
 80024c0:	f006 fb1f 	bl	8008b02 <strstr>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10e      	bne.n	80024e8 <SIM7600_getLocalTime+0x80>
			{
				char *sPtr = strstr(me->parent.buffer, "\"");
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3308      	adds	r3, #8
 80024ce:	2122      	movs	r1, #34	; 0x22
 80024d0:	4618      	mov	r0, r3
 80024d2:	f006 fb09 	bl	8008ae8 <strchr>
 80024d6:	6138      	str	r0, [r7, #16]
				THT_copyStringUntilToken(sPtr + 1, pTime, size, "\"");
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1c58      	adds	r0, r3, #1
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	4b10      	ldr	r3, [pc, #64]	; (8002524 <SIM7600_getLocalTime+0xbc>)
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	f005 fb30 	bl	8007b48 <THT_copyStringUntilToken>
			}
		}
		counter++;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	3301      	adds	r3, #1
 80024ec:	75fb      	strb	r3, [r7, #23]
	} while (counter < 3 && pTime[0] == 0);
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d803      	bhi.n	80024fc <SIM7600_getLocalTime+0x94>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0cf      	beq.n	800249c <SIM7600_getLocalTime+0x34>

	if (pTime[0] == 0)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <SIM7600_getLocalTime+0xa0>
		status = THT_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	75bb      	strb	r3, [r7, #22]

	return status;
 8002508:	7dbb      	ldrb	r3, [r7, #22]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	0800accc 	.word	0x0800accc
 8002518:	0800af8c 	.word	0x0800af8c
 800251c:	0800af90 	.word	0x0800af90
 8002520:	0800af9c 	.word	0x0800af9c
 8002524:	0800ae7c 	.word	0x0800ae7c

08002528 <SIM7600_getFileSize>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return uint32_t
 */
uint32_t SIM7600_getFileSize(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0a0      	sub	sp, #128	; 0x80
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <SIM7600_getFileSize+0x16>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <SIM7600_getFileSize+0x1a>
	{
		return 0;
 800253e:	2300      	movs	r3, #0
 8002540:	e042      	b.n	80025c8 <SIM7600_getFileSize+0xa0>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	2260      	movs	r2, #96	; 0x60
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f006 fac2 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+FSATTRI=%s", pFilename);
 8002554:	f107 000c 	add.w	r0, r7, #12
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <SIM7600_getFileSize+0xa8>)
 800255c:	2164      	movs	r1, #100	; 0x64
 800255e:	f006 f98f 	bl	8008880 <sniprintf>

	SIM7600_sendATCommand(me, "AT+FSCD=F:", SIM_URC_OK, SIM_URC_ERROR, 3000);
 8002562:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <SIM7600_getFileSize+0xac>)
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <SIM7600_getFileSize+0xb0>)
 800256c:	491b      	ldr	r1, [pc, #108]	; (80025dc <SIM7600_getFileSize+0xb4>)
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe ff32 	bl	80013d8 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+FSLS=2", SIM_URC_OK, SIM_URC_ERROR, 3000);
 8002574:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <SIM7600_getFileSize+0xac>)
 800257c:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <SIM7600_getFileSize+0xb0>)
 800257e:	4918      	ldr	r1, [pc, #96]	; (80025e0 <SIM7600_getFileSize+0xb8>)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7fe ff29 	bl	80013d8 <SIM7600_sendATCommand>

	if (SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000) == THT_OK)
 8002586:	f107 010c 	add.w	r1, r7, #12
 800258a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <SIM7600_getFileSize+0xac>)
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <SIM7600_getFileSize+0xb0>)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe ff1f 	bl	80013d8 <SIM7600_sendATCommand>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d112      	bne.n	80025c6 <SIM7600_getFileSize+0x9e>
	{
		char *sPtr = strstr(me->parent.buffer, "+FSATTRI: ");
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3308      	adds	r3, #8
 80025a4:	490f      	ldr	r1, [pc, #60]	; (80025e4 <SIM7600_getFileSize+0xbc>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 faab 	bl	8008b02 <strstr>
 80025ac:	6778      	str	r0, [r7, #116]	; 0x74

		if (sPtr != NULL)
 80025ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <SIM7600_getFileSize+0x9e>
		{
			uint32_t filesize = atol(sPtr + 10);
 80025b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b6:	330a      	adds	r3, #10
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fb33 	bl	8007c24 <atol>
 80025be:	4603      	mov	r3, r0
 80025c0:	673b      	str	r3, [r7, #112]	; 0x70
			return filesize;
 80025c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c4:	e000      	b.n	80025c8 <SIM7600_getFileSize+0xa0>
		}
	}

	return 0u;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3778      	adds	r7, #120	; 0x78
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	0800afa4 	.word	0x0800afa4
 80025d4:	0800accc 	.word	0x0800accc
 80025d8:	0800acd4 	.word	0x0800acd4
 80025dc:	0800afb4 	.word	0x0800afb4
 80025e0:	0800afc0 	.word	0x0800afc0
 80025e4:	0800afcc 	.word	0x0800afcc

080025e8 <SIM7600_deleteFile>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pFilename [in] a pointer to filename string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_deleteFile(SIM7600_HandleTypeDef *const me, const char *pFilename)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b09e      	sub	sp, #120	; 0x78
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
	if (me == NULL || pFilename == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <SIM7600_deleteFile+0x16>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <SIM7600_deleteFile+0x1a>
	{
		return 0u;
 80025fe:	2300      	movs	r3, #0
 8002600:	e01a      	b.n	8002638 <SIM7600_deleteFile+0x50>
	enum Enum
	{
		COMMAND_SIZE = 100
	};

	char command[COMMAND_SIZE] = {0};
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	f107 0310 	add.w	r3, r7, #16
 800260a:	2260      	movs	r2, #96	; 0x60
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f006 fa62 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+FSDEL=\"/%s\"", pFilename);
 8002614:	f107 000c 	add.w	r0, r7, #12
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <SIM7600_deleteFile+0x58>)
 800261c:	2164      	movs	r1, #100	; 0x64
 800261e:	f006 f92f 	bl	8008880 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 3000);
 8002622:	f107 010c 	add.w	r1, r7, #12
 8002626:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SIM7600_deleteFile+0x5c>)
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <SIM7600_deleteFile+0x60>)
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe fed1 	bl	80013d8 <SIM7600_sendATCommand>
 8002636:	4603      	mov	r3, r0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3770      	adds	r7, #112	; 0x70
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0800afd8 	.word	0x0800afd8
 8002644:	0800accc 	.word	0x0800accc
 8002648:	0800acd4 	.word	0x0800acd4

0800264c <SIM7600_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeAuto(SIM7600_HandleTypeDef *const me)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af02      	add	r7, sp, #8
 8002652:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <SIM7600_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e05c      	b.n	8002718 <SIM7600_setLocalTimeAuto+0xcc>
	}

	uint8_t counter = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]

	THT_StatusTypeDef status;

	SIM7600_sendATCommand(me, "AT+CREG?", "+CREG: 0,1", SIM_URC_ERROR, 5000); //"\r\n+CREG: 0,1\r\n\r\nOK\r\n"
 8002662:	f241 3388 	movw	r3, #5000	; 0x1388
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 800266a:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <SIM7600_setLocalTimeAuto+0xd8>)
 800266c:	492e      	ldr	r1, [pc, #184]	; (8002728 <SIM7600_setLocalTimeAuto+0xdc>)
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe feb2 	bl	80013d8 <SIM7600_sendATCommand>
	SIM7600_sendATCommand(me, "AT+CPSI?", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002674:	f241 3388 	movw	r3, #5000	; 0x1388
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <SIM7600_setLocalTimeAuto+0xe0>)
 800267e:	492c      	ldr	r1, [pc, #176]	; (8002730 <SIM7600_setLocalTimeAuto+0xe4>)
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe fea9 	bl	80013d8 <SIM7600_sendATCommand>

	do
	{
		switch (counter)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d01e      	beq.n	80026ca <SIM7600_setLocalTimeAuto+0x7e>
 800268c:	2b02      	cmp	r3, #2
 800268e:	dc28      	bgt.n	80026e2 <SIM7600_setLocalTimeAuto+0x96>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <SIM7600_setLocalTimeAuto+0x4e>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d00c      	beq.n	80026b2 <SIM7600_setLocalTimeAuto+0x66>
 8002698:	e023      	b.n	80026e2 <SIM7600_setLocalTimeAuto+0x96>
		{
		case 0:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"time1.google.com\",28", SIM_URC_OK, SIM_URC_ERROR, 5000); //"\r\nOK\r\n"
 800269a:	f241 3388 	movw	r3, #5000	; 0x1388
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4b1f      	ldr	r3, [pc, #124]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 80026a2:	4a22      	ldr	r2, [pc, #136]	; (800272c <SIM7600_setLocalTimeAuto+0xe0>)
 80026a4:	4923      	ldr	r1, [pc, #140]	; (8002734 <SIM7600_setLocalTimeAuto+0xe8>)
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fe96 	bl	80013d8 <SIM7600_sendATCommand>
 80026ac:	4603      	mov	r3, r0
 80026ae:	73bb      	strb	r3, [r7, #14]
			break;
 80026b0:	e01a      	b.n	80026e8 <SIM7600_setLocalTimeAuto+0x9c>
		case 1:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.vn.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 80026b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <SIM7600_setLocalTimeAuto+0xe0>)
 80026bc:	491e      	ldr	r1, [pc, #120]	; (8002738 <SIM7600_setLocalTimeAuto+0xec>)
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fe8a 	bl	80013d8 <SIM7600_sendATCommand>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73bb      	strb	r3, [r7, #14]
			break;
 80026c8:	e00e      	b.n	80026e8 <SIM7600_setLocalTimeAuto+0x9c>
		case 2:
			status = SIM7600_sendATCommand(me, "AT+CNTP=\"0.asia.pool.ntp.org\",28", SIM_URC_OK, SIM_URC_ERROR, 5000);
 80026ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <SIM7600_setLocalTimeAuto+0xe0>)
 80026d4:	4919      	ldr	r1, [pc, #100]	; (800273c <SIM7600_setLocalTimeAuto+0xf0>)
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fe7e 	bl	80013d8 <SIM7600_sendATCommand>
 80026dc:	4603      	mov	r3, r0
 80026de:	73bb      	strb	r3, [r7, #14]
			break;
 80026e0:	e002      	b.n	80026e8 <SIM7600_setLocalTimeAuto+0x9c>
		default:
			status = THT_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73bb      	strb	r3, [r7, #14]
			break;
 80026e6:	bf00      	nop
		}
		counter++;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	3301      	adds	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
	} while (THT_OK != status && counter < 3U);
 80026ee:	7bbb      	ldrb	r3, [r7, #14]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <SIM7600_setLocalTimeAuto+0xae>
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d9c5      	bls.n	8002686 <SIM7600_setLocalTimeAuto+0x3a>

	if (THT_OK == status)
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <SIM7600_setLocalTimeAuto+0xca>
	{
		status = SIM7600_sendATCommand(me, "AT+CNTP", "+CNTP: 0", SIM_URC_ERROR, 4000); //"\r\n+CNTP: 0\r\n"
 8002700:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <SIM7600_setLocalTimeAuto+0xd4>)
 8002708:	4a0d      	ldr	r2, [pc, #52]	; (8002740 <SIM7600_setLocalTimeAuto+0xf4>)
 800270a:	490e      	ldr	r1, [pc, #56]	; (8002744 <SIM7600_setLocalTimeAuto+0xf8>)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7fe fe63 	bl	80013d8 <SIM7600_sendATCommand>
 8002712:	4603      	mov	r3, r0
 8002714:	73bb      	strb	r3, [r7, #14]
	}

	return status;
 8002716:	7bbb      	ldrb	r3, [r7, #14]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	0800accc 	.word	0x0800accc
 8002724:	0800ad00 	.word	0x0800ad00
 8002728:	0800ad0c 	.word	0x0800ad0c
 800272c:	0800acd4 	.word	0x0800acd4
 8002730:	0800aefc 	.word	0x0800aefc
 8002734:	0800afe8 	.word	0x0800afe8
 8002738:	0800b008 	.word	0x0800b008
 800273c:	0800b028 	.word	0x0800b028
 8002740:	0800b04c 	.word	0x0800b04c
 8002744:	0800b058 	.word	0x0800b058

08002748 <SIM7600_setLocalTimeManual>:
 * @param pTime [in] A pointer to the timestring
 * @param size [in] The length of the string
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_setLocalTimeManual(SIM7600_HandleTypeDef *const me, const char *pTime, const uint8_t size)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b090      	sub	sp, #64	; 0x40
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL || size > SIM_TIME_SIZE)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <SIM7600_setLocalTimeManual+0x20>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <SIM7600_setLocalTimeManual+0x20>
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b16      	cmp	r3, #22
 8002766:	d901      	bls.n	800276c <SIM7600_setLocalTimeManual+0x24>
	{
		return THT_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e01a      	b.n	80027a2 <SIM7600_setLocalTimeManual+0x5a>
	enum Enum
	{
		COMMAND_SIZE = 40
	};

	char command[COMMAND_SIZE] = {0};
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2224      	movs	r2, #36	; 0x24
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f006 f9ad 	bl	8008ad8 <memset>
	snprintf(command, sizeof(command), "AT+CCLK=\"%s\"", pTime);
 800277e:	f107 0010 	add.w	r0, r7, #16
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4a09      	ldr	r2, [pc, #36]	; (80027ac <SIM7600_setLocalTimeManual+0x64>)
 8002786:	2128      	movs	r1, #40	; 0x28
 8002788:	f006 f87a 	bl	8008880 <sniprintf>
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800278c:	f107 0110 	add.w	r1, r7, #16
 8002790:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SIM7600_setLocalTimeManual+0x68>)
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <SIM7600_setLocalTimeManual+0x6c>)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7fe fe1c 	bl	80013d8 <SIM7600_sendATCommand>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3738      	adds	r7, #56	; 0x38
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800b060 	.word	0x0800b060
 80027b0:	0800accc 	.word	0x0800accc
 80027b4:	0800acd4 	.word	0x0800acd4

080027b8 <SIM7600_selectPhonebookMem>:
 *
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_selectPhonebookMem(SIM7600_HandleTypeDef *const me)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <SIM7600_selectPhonebookMem+0x12>
	{
		return THT_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e009      	b.n	80027de <SIM7600_selectPhonebookMem+0x26>
	}

	return SIM7600_sendATCommand(me, "AT+CPBS=\"ME\"", SIM_URC_OK, SIM_URC_ERROR, 4000);
 80027ca:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <SIM7600_selectPhonebookMem+0x30>)
 80027d2:	4a06      	ldr	r2, [pc, #24]	; (80027ec <SIM7600_selectPhonebookMem+0x34>)
 80027d4:	4906      	ldr	r1, [pc, #24]	; (80027f0 <SIM7600_selectPhonebookMem+0x38>)
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7fe fdfe 	bl	80013d8 <SIM7600_sendATCommand>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	0800accc 	.word	0x0800accc
 80027ec:	0800acd4 	.word	0x0800acd4
 80027f0:	0800ad48 	.word	0x0800ad48

080027f4 <SIM7600_savePhonebook>:
 * @param pPhone [in] A pointer to the phonenumber string
 * @param phoneSize [in] The length of the phonenumber
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_savePhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, const char *pPhone, const uint8_t phoneSize)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0a0      	sub	sp, #128	; 0x80
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	72fb      	strb	r3, [r7, #11]
 8002804:	4613      	mov	r3, r2
 8002806:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL || phoneSize > SIM_PHONE_SIZE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <SIM7600_savePhonebook+0x26>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <SIM7600_savePhonebook+0x26>
 8002814:	7abb      	ldrb	r3, [r7, #10]
 8002816:	2b0d      	cmp	r3, #13
 8002818:	d901      	bls.n	800281e <SIM7600_savePhonebook+0x2a>
	{
		return THT_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e01f      	b.n	800285e <SIM7600_savePhonebook+0x6a>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	f107 0318 	add.w	r3, r7, #24
 8002826:	2260      	movs	r2, #96	; 0x60
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f954 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+CPBW=%d,\"%s\",129,\"%s\"", order,
 8002830:	7afa      	ldrb	r2, [r7, #11]
 8002832:	f107 0014 	add.w	r0, r7, #20
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	4a09      	ldr	r2, [pc, #36]	; (8002868 <SIM7600_savePhonebook+0x74>)
 8002842:	2164      	movs	r1, #100	; 0x64
 8002844:	f006 f81c 	bl	8008880 <sniprintf>
			 pPhone, pPhone);
	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 8002848:	f107 0114 	add.w	r1, r7, #20
 800284c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <SIM7600_savePhonebook+0x78>)
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <SIM7600_savePhonebook+0x7c>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7fe fdbe 	bl	80013d8 <SIM7600_sendATCommand>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3778      	adds	r7, #120	; 0x78
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	0800b070 	.word	0x0800b070
 800286c:	0800accc 	.word	0x0800accc
 8002870:	0800acd4 	.word	0x0800acd4

08002874 <SIM7600_readPhonebook>:
 * @param pPhone [out] A buffer to store the phonenumber store at order
 * @param phoneSize [in] The size of buffer
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_readPhonebook(SIM7600_HandleTypeDef *const me, const uint8_t order, char pPhone[], const uint8_t phoneSize)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0a2      	sub	sp, #136	; 0x88
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	72fb      	strb	r3, [r7, #11]
 8002884:	4613      	mov	r3, r2
 8002886:	72bb      	strb	r3, [r7, #10]
	if (me == NULL || pPhone == NULL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <SIM7600_readPhonebook+0x20>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <SIM7600_readPhonebook+0x24>
	{
		return THT_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e031      	b.n	80028fc <SIM7600_readPhonebook+0x88>
	}
	enum Enum
	{
		COMMAND_SIZE = 100
	};
	char command[COMMAND_SIZE] = {0};
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	2260      	movs	r2, #96	; 0x60
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f006 f917 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+CPBR=%d", order);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	f107 0014 	add.w	r0, r7, #20
 80028b0:	4a14      	ldr	r2, [pc, #80]	; (8002904 <SIM7600_readPhonebook+0x90>)
 80028b2:	2164      	movs	r1, #100	; 0x64
 80028b4:	f005 ffe4 	bl	8008880 <sniprintf>

	THT_StatusTypeDef status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 80028b8:	f107 0114 	add.w	r1, r7, #20
 80028bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <SIM7600_readPhonebook+0x94>)
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <SIM7600_readPhonebook+0x98>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7fe fd86 	bl	80013d8 <SIM7600_sendATCommand>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (THT_OK == status)
 80028d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <SIM7600_readPhonebook+0x84>
	{
		char *sPtr = strstr(me->parent.buffer, "\"");
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3308      	adds	r3, #8
 80028de:	2122      	movs	r1, #34	; 0x22
 80028e0:	4618      	mov	r0, r3
 80028e2:	f006 f901 	bl	8008ae8 <strchr>
 80028e6:	67b8      	str	r0, [r7, #120]	; 0x78

		THT_copyStringUntilToken(sPtr + 1, pPhone, phoneSize, "\"");
 80028e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ea:	1c58      	adds	r0, r3, #1
 80028ec:	7abb      	ldrb	r3, [r7, #10]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <SIM7600_readPhonebook+0x9c>)
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f005 f928 	bl	8007b48 <THT_copyStringUntilToken>
	}

	return status;
 80028f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3780      	adds	r7, #128	; 0x80
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0800b08c 	.word	0x0800b08c
 8002908:	0800accc 	.word	0x0800accc
 800290c:	0800acd4 	.word	0x0800acd4
 8002910:	0800ae7c 	.word	0x0800ae7c

08002914 <SIM7600_findPhonebook>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pPhone [in] Hint, it is the phonenumber want to find
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_findPhonebook(SIM7600_HandleTypeDef *const me, const char *pPhone)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
	if (me == NULL || pPhone == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <SIM7600_findPhonebook+0x16>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <SIM7600_findPhonebook+0x1a>
	{
		return THT_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e01a      	b.n	8002964 <SIM7600_findPhonebook+0x50>

	enum Enum
	{
		COMMAND_SIZE = 35
	};
	char command[COMMAND_SIZE] = {0};
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	221f      	movs	r2, #31
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f006 f8cc 	bl	8008ad8 <memset>

	snprintf(command, sizeof(command), "AT+CPBF=\"%s\"", pPhone);
 8002940:	f107 000c 	add.w	r0, r7, #12
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	4a09      	ldr	r2, [pc, #36]	; (800296c <SIM7600_findPhonebook+0x58>)
 8002948:	2123      	movs	r1, #35	; 0x23
 800294a:	f005 ff99 	bl	8008880 <sniprintf>

	return SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 4000);
 800294e:	f107 010c 	add.w	r1, r7, #12
 8002952:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SIM7600_findPhonebook+0x5c>)
 800295a:	4a06      	ldr	r2, [pc, #24]	; (8002974 <SIM7600_findPhonebook+0x60>)
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe fd3b 	bl	80013d8 <SIM7600_sendATCommand>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3730      	adds	r7, #48	; 0x30
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	0800b098 	.word	0x0800b098
 8002970:	0800accc 	.word	0x0800accc
 8002974:	0800acd4 	.word	0x0800acd4

08002978 <SIM7600_sendHTTP>:
 * @param me [in] A pointer to SIM7600_HandleTypeDef structure
 * @param pHTTP [in] A pointer to SIM_HTTPTypeDef
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_sendHTTP(SIM7600_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800297e:	af02      	add	r7, sp, #8
 8002980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002984:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002988:	6018      	str	r0, [r3, #0]
 800298a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002992:	6019      	str	r1, [r3, #0]
	if (me == NULL || pHTTP == NULL)
 8002994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002998:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <SIM7600_sendHTTP+0x38>
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <SIM7600_sendHTTP+0x3c>
	{
		return THT_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e210      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
	}

	memset(pHTTP->response, '\0', SIM_HTTP_RESPONSE_SIZE);
 80029b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
 80029c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 f885 	bl	8008ad8 <memset>
	pHTTP->errorcode = 0;
 80029ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d2:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 80029de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	3304      	adds	r3, #4
 80029ec:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f006 f870 	bl	8008ad8 <memset>

	THT_StatusTypeDef status;

	/* Disconnect the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 80029f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fc:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002a00:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4bce      	ldr	r3, [pc, #824]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002a08:	4ace      	ldr	r2, [pc, #824]	; (8002d44 <SIM7600_sendHTTP+0x3cc>)
 8002a0a:	49cf      	ldr	r1, [pc, #828]	; (8002d48 <SIM7600_sendHTTP+0x3d0>)
 8002a0c:	6800      	ldr	r0, [r0, #0]
 8002a0e:	f7fe fce3 	bl	80013d8 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002a1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4bc7      	ldr	r3, [pc, #796]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002a22:	4ac8      	ldr	r2, [pc, #800]	; (8002d44 <SIM7600_sendHTTP+0x3cc>)
 8002a24:	49c9      	ldr	r1, [pc, #804]	; (8002d4c <SIM7600_sendHTTP+0x3d4>)
 8002a26:	6800      	ldr	r0, [r0, #0]
 8002a28:	f7fe fcd6 	bl	80013d8 <SIM7600_sendATCommand>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	if (THT_OK != status)
 8002a32:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <SIM7600_sendHTTP+0xc8>
	{
		return status;
 8002a3a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a3e:	e1ca      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
	}

	/* Insert URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pHTTP->url);
 8002a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a44:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	f107 000c 	add.w	r0, r7, #12
 8002a50:	4abf      	ldr	r2, [pc, #764]	; (8002d50 <SIM7600_sendHTTP+0x3d8>)
 8002a52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002a56:	f005 ff13 	bl	8008880 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002a5a:	f107 010c 	add.w	r1, r7, #12
 8002a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a62:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4bb4      	ldr	r3, [pc, #720]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002a6e:	4ab5      	ldr	r2, [pc, #724]	; (8002d44 <SIM7600_sendHTTP+0x3cc>)
 8002a70:	6800      	ldr	r0, [r0, #0]
 8002a72:	f7fe fcb1 	bl	80013d8 <SIM7600_sendATCommand>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8002a7c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <SIM7600_sendHTTP+0x112>
	{
		return status;
 8002a84:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002a88:	e1a5      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
	}

	/* Check the method is POST ? */
	if (pHTTP->method == SIM_HTTP_POST)
 8002a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d17d      	bne.n	8002b96 <SIM7600_sendHTTP+0x21e>
	{
		/* Insert the content type */
		memset(command, '\0', sizeof(command));
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f006 f817 	bl	8008ad8 <memset>
		snprintf(command, sizeof(command), "AT+HTTPPARA=\"CONTENT\",\"%s\"", pHTTP->type);
 8002aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aae:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	33c9      	adds	r3, #201	; 0xc9
 8002ab6:	f107 000c 	add.w	r0, r7, #12
 8002aba:	4aa6      	ldr	r2, [pc, #664]	; (8002d54 <SIM7600_sendHTTP+0x3dc>)
 8002abc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ac0:	f005 fede 	bl	8008880 <sniprintf>
		status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002ac4:	f107 010c 	add.w	r1, r7, #12
 8002ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002acc:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002ad0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4b9a      	ldr	r3, [pc, #616]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002ad8:	4a9a      	ldr	r2, [pc, #616]	; (8002d44 <SIM7600_sendHTTP+0x3cc>)
 8002ada:	6800      	ldr	r0, [r0, #0]
 8002adc:	f7fe fc7c 	bl	80013d8 <SIM7600_sendATCommand>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8002ae6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <SIM7600_sendHTTP+0x17c>
		{
			return status;
 8002aee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002af2:	e170      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
		}

		/* Insert the data */
		memset(command, '\0', sizeof(command));
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 ffea 	bl	8008ad8 <memset>
		snprintf(command, sizeof(command), "AT+HTTPDATA=%d,%d", strlen(pHTTP->data), 5000);
 8002b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b08:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	33dd      	adds	r3, #221	; 0xdd
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fbad 	bl	8000270 <strlen>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f107 000c 	add.w	r0, r7, #12
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	4a8d      	ldr	r2, [pc, #564]	; (8002d58 <SIM7600_sendHTTP+0x3e0>)
 8002b24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002b28:	f005 feaa 	bl	8008880 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "DOWNLOAD", SIM_URC_ERROR, 5000);
 8002b2c:	f107 010c 	add.w	r1, r7, #12
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002b38:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002b40:	4a86      	ldr	r2, [pc, #536]	; (8002d5c <SIM7600_sendHTTP+0x3e4>)
 8002b42:	6800      	ldr	r0, [r0, #0]
 8002b44:	f7fe fc48 	bl	80013d8 <SIM7600_sendATCommand>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8002b4e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <SIM7600_sendHTTP+0x1e4>
		{
			return status;
 8002b56:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b5a:	e13c      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
		}

		status = SIM7600_sendATCommand(me, pHTTP->data, SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b60:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f103 01dd 	add.w	r1, r3, #221	; 0xdd
 8002b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b6e:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002b72:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	4b71      	ldr	r3, [pc, #452]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002b7a:	4a72      	ldr	r2, [pc, #456]	; (8002d44 <SIM7600_sendHTTP+0x3cc>)
 8002b7c:	6800      	ldr	r0, [r0, #0]
 8002b7e:	f7fe fc2b 	bl	80013d8 <SIM7600_sendATCommand>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK != status)
 8002b88:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <SIM7600_sendHTTP+0x21e>
		{
			return status;
 8002b90:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b94:	e11f      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
		}
	}

	/* Send the request */
	memset(command, '\0', sizeof(command));
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f005 ff99 	bl	8008ad8 <memset>
	snprintf(command, sizeof(command), "AT+HTTPACTION=%d", pHTTP->method);
 8002ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002baa:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	f107 000c 	add.w	r0, r7, #12
 8002bb6:	4a6a      	ldr	r2, [pc, #424]	; (8002d60 <SIM7600_sendHTTP+0x3e8>)
 8002bb8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bbc:	f005 fe60 	bl	8008880 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTPACTION:", SIM_URC_ERROR, 5000);
 8002bc0:	f107 010c 	add.w	r1, r7, #12
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002bcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002bd4:	4a63      	ldr	r2, [pc, #396]	; (8002d64 <SIM7600_sendHTTP+0x3ec>)
 8002bd6:	6800      	ldr	r0, [r0, #0]
 8002bd8:	f7fe fbfe 	bl	80013d8 <SIM7600_sendATCommand>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8002be2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <SIM7600_sendHTTP+0x278>
	{
		return status;
 8002bea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002bee:	e0f2      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
	}
	HAL_Delay(100);
 8002bf0:	2064      	movs	r0, #100	; 0x64
 8002bf2:	f001 fa9f 	bl	8004134 <HAL_Delay>

	/* Get the status of request */
	char *sPtr = strstr(me->parent.buffer, ",");
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3308      	adds	r3, #8
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 ff6f 	bl	8008ae8 <strchr>
 8002c0a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

	if (sPtr != NULL)
 8002c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00e      	beq.n	8002c34 <SIM7600_sendHTTP+0x2bc>
	{
		pHTTP->errorcode = atoi(sPtr + 1);
 8002c16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 fffd 	bl	8007c1c <atoi>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8a3 24c6 	strh.w	r2, [r3, #1222]	; 0x4c6
	}

	sPtr = strstr(sPtr + 1, ",");
 8002c34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c38:	3301      	adds	r3, #1
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f005 ff53 	bl	8008ae8 <strchr>
 8002c42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
	if (sPtr != NULL)
 8002c46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00e      	beq.n	8002c6c <SIM7600_sendHTTP+0x2f4>
	{
		pHTTP->datalen = atol(sPtr + 1);
 8002c4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c52:	3301      	adds	r3, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 ffe5 	bl	8007c24 <atol>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c62:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	}

	if (pHTTP->datalen != 0)
 8002c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c70:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 808e 	beq.w	8002d9c <SIM7600_sendHTTP+0x424>
	{
		memset(command, '\0', sizeof(command));
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 ff24 	bl	8008ad8 <memset>

		/* Read the response */
		snprintf(command, sizeof(command), "AT+HTTPREAD=0,%ld", pHTTP->datalen);
 8002c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c94:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8002c9e:	f107 000c 	add.w	r0, r7, #12
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <SIM7600_sendHTTP+0x3f0>)
 8002ca4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002ca8:	f005 fdea 	bl	8008880 <sniprintf>
		status = SIM7600_sendATCommand(me, command, "\r\n+HTTPREAD:", SIM_URC_ERROR, 5000);
 8002cac:	f107 010c 	add.w	r1, r7, #12
 8002cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb4:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002cb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <SIM7600_sendHTTP+0x3c8>)
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <SIM7600_sendHTTP+0x3f4>)
 8002cc2:	6800      	ldr	r0, [r0, #0]
 8002cc4:	f7fe fb88 	bl	80013d8 <SIM7600_sendATCommand>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		if (THT_OK == status)
 8002cce:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d162      	bne.n	8002d9c <SIM7600_sendHTTP+0x424>
		{
			HAL_Delay(100);
 8002cd6:	2064      	movs	r0, #100	; 0x64
 8002cd8:	f001 fa2c 	bl	8004134 <HAL_Delay>
			sPtr = strstr(me->parent.buffer, "\r\n{");
 8002cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ce0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	4921      	ldr	r1, [pc, #132]	; (8002d70 <SIM7600_sendHTTP+0x3f8>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f005 ff09 	bl	8008b02 <strstr>
 8002cf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

			if (sPtr != NULL)
 8002cf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d04f      	beq.n	8002d9c <SIM7600_sendHTTP+0x424>
			{
				if (pHTTP->datalen > sizeof(pHTTP->response))
 8002cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d00:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8002d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d0e:	d931      	bls.n	8002d74 <SIM7600_sendHTTP+0x3fc>
				{
					memcpy(pHTTP->response, sPtr + 2, sizeof(pHTTP->response));
 8002d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d14:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 8002d1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d22:	3302      	adds	r3, #2
 8002d24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f005 ff78 	bl	8008c1e <memcpy>
					pHTTP->response[SIM_HTTP_RESPONSE_SIZE - 1] = '\0';
 8002d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d32:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 24c4 	strb.w	r2, [r3, #1220]	; 0x4c4
 8002d3e:	e02d      	b.n	8002d9c <SIM7600_sendHTTP+0x424>
 8002d40:	0800accc 	.word	0x0800accc
 8002d44:	0800acd4 	.word	0x0800acd4
 8002d48:	0800b0a8 	.word	0x0800b0a8
 8002d4c:	0800b0b4 	.word	0x0800b0b4
 8002d50:	0800b0c0 	.word	0x0800b0c0
 8002d54:	0800b0d8 	.word	0x0800b0d8
 8002d58:	0800b0f4 	.word	0x0800b0f4
 8002d5c:	0800b108 	.word	0x0800b108
 8002d60:	0800b114 	.word	0x0800b114
 8002d64:	0800b128 	.word	0x0800b128
 8002d68:	0800b138 	.word	0x0800b138
 8002d6c:	0800b14c 	.word	0x0800b14c
 8002d70:	0800b15c 	.word	0x0800b15c
				}
				else
				{
					memcpy(pHTTP->response, sPtr + 2, pHTTP->datalen);
 8002d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d78:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f203 20d1 	addw	r0, r3, #721	; 0x2d1
 8002d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d86:	1c99      	adds	r1, r3, #2
 8002d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8c:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	; 0x4c8
 8002d96:	461a      	mov	r2, r3
 8002d98:	f005 ff41 	bl	8008c1e <memcpy>
			}
		}
	}

	/* Terminal the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 5000);
 8002d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da0:	f5a3 7001 	sub.w	r0, r3, #516	; 0x204
 8002da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <SIM7600_sendHTTP+0x468>)
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <SIM7600_sendHTTP+0x46c>)
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <SIM7600_sendHTTP+0x470>)
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	f7fe fb11 	bl	80013d8 <SIM7600_sendATCommand>

	if (pHTTP->errorcode == 200 || status == THT_OK)
 8002db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dba:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
 8002dc4:	2bc8      	cmp	r3, #200	; 0xc8
 8002dc6:	d003      	beq.n	8002dd0 <SIM7600_sendHTTP+0x458>
 8002dc8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <SIM7600_sendHTTP+0x45c>
	{
		return THT_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e000      	b.n	8002dd6 <SIM7600_sendHTTP+0x45e>
	}
	else
	{
		return THT_ERROR;
 8002dd4:	2301      	movs	r3, #1
	}
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	0800accc 	.word	0x0800accc
 8002de4:	0800acd4 	.word	0x0800acd4
 8002de8:	0800b0a8 	.word	0x0800b0a8

08002dec <SIM7600_getFileHTTP>:
 * @param pUrl [in] A pointer to URL string
 * @param pFilename [in] A pointer to the filename want to be save
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM7600_getFileHTTP(SIM7600_HandleTypeDef *const me, const char *pUrl, const char *pFilename)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8002df2:	af02      	add	r7, sp, #8
 8002df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dfc:	6018      	str	r0, [r3, #0]
 8002dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e02:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002e06:	6019      	str	r1, [r3, #0]
 8002e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e10:	601a      	str	r2, [r3, #0]
	if (me == NULL || pUrl == NULL || pFilename == NULL)
 8002e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <SIM7600_getFileHTTP+0x50>
 8002e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e24:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <SIM7600_getFileHTTP+0x50>
 8002e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <SIM7600_getFileHTTP+0x54>
	{
		return THT_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e09e      	b.n	8002f7e <SIM7600_getFileHTTP+0x192>
	}

	char command[SIM_HTTP_RESPONSE_SIZE] = {0};
 8002e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e44:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 fe3f 	bl	8008ad8 <memset>

	THT_StatusTypeDef status;

	/* Terminate the last session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e5e:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002e62:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002e6a:	4a48      	ldr	r2, [pc, #288]	; (8002f8c <SIM7600_getFileHTTP+0x1a0>)
 8002e6c:	4948      	ldr	r1, [pc, #288]	; (8002f90 <SIM7600_getFileHTTP+0x1a4>)
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	f7fe fab2 	bl	80013d8 <SIM7600_sendATCommand>

	/* Begin a new session */
	status = SIM7600_sendATCommand(me, "AT+HTTPINIT", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e78:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002e7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002e84:	4a41      	ldr	r2, [pc, #260]	; (8002f8c <SIM7600_getFileHTTP+0x1a0>)
 8002e86:	4943      	ldr	r1, [pc, #268]	; (8002f94 <SIM7600_getFileHTTP+0x1a8>)
 8002e88:	6800      	ldr	r0, [r0, #0]
 8002e8a:	f7fe faa5 	bl	80013d8 <SIM7600_sendATCommand>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8002e94:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <SIM7600_getFileHTTP+0xb6>
	{
		return status;
 8002e9c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ea0:	e06d      	b.n	8002f7e <SIM7600_getFileHTTP+0x192>
	}

	/* Insert the URL */
	snprintf(command, sizeof(command), "AT+HTTPPARA=\"URL\",\"%s\"", pUrl);
 8002ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002eaa:	f107 0010 	add.w	r0, r7, #16
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a39      	ldr	r2, [pc, #228]	; (8002f98 <SIM7600_getFileHTTP+0x1ac>)
 8002eb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002eb6:	f005 fce3 	bl	8008880 <sniprintf>
	status = SIM7600_sendATCommand(me, command, SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002eba:	f107 0110 	add.w	r1, r7, #16
 8002ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec2:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002ec6:	f242 7310 	movw	r3, #10000	; 0x2710
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002ece:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <SIM7600_getFileHTTP+0x1a0>)
 8002ed0:	6800      	ldr	r0, [r0, #0]
 8002ed2:	f7fe fa81 	bl	80013d8 <SIM7600_sendATCommand>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8002edc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <SIM7600_getFileHTTP+0xfe>
	{
		return status;
 8002ee4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002ee8:	e049      	b.n	8002f7e <SIM7600_getFileHTTP+0x192>
	}

	/* Use GET method to get file */
	status = SIM7600_sendATCommand(me, "AT+HTTPACTION=0", "+HTTPACTION:", SIM_URC_ERROR, 10000);
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002ef2:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002efa:	4a28      	ldr	r2, [pc, #160]	; (8002f9c <SIM7600_getFileHTTP+0x1b0>)
 8002efc:	4928      	ldr	r1, [pc, #160]	; (8002fa0 <SIM7600_getFileHTTP+0x1b4>)
 8002efe:	6800      	ldr	r0, [r0, #0]
 8002f00:	f7fe fa6a 	bl	80013d8 <SIM7600_sendATCommand>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	if (THT_OK != status)
 8002f0a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <SIM7600_getFileHTTP+0x12c>
	{
		return status;
 8002f12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f16:	e032      	b.n	8002f7e <SIM7600_getFileHTTP+0x192>
	}

	/* Save file */
	memset(command, '\0', sizeof(command));
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fdd8 	bl	8008ad8 <memset>
	snprintf(command, sizeof(command), "AT+HTTPREADFILE=\"%s\"", pFilename);
 8002f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f30:	f107 0010 	add.w	r0, r7, #16
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <SIM7600_getFileHTTP+0x1b8>)
 8002f38:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002f3c:	f005 fca0 	bl	8008880 <sniprintf>
	status = SIM7600_sendATCommand(me, command, "+HTTP_PEER_CLOSED", SIM_URC_ERROR, 20000);
 8002f40:	f107 0110 	add.w	r1, r7, #16
 8002f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f48:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002f4c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <SIM7600_getFileHTTP+0x1bc>)
 8002f56:	6800      	ldr	r0, [r0, #0]
 8002f58:	f7fe fa3e 	bl	80013d8 <SIM7600_sendATCommand>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	/* Terminate the session */
	SIM7600_sendATCommand(me, "AT+HTTPTERM", SIM_URC_OK, SIM_URC_ERROR, 10000);
 8002f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f66:	f5a3 70fe 	sub.w	r0, r3, #508	; 0x1fc
 8002f6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <SIM7600_getFileHTTP+0x19c>)
 8002f72:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <SIM7600_getFileHTTP+0x1a0>)
 8002f74:	4906      	ldr	r1, [pc, #24]	; (8002f90 <SIM7600_getFileHTTP+0x1a4>)
 8002f76:	6800      	ldr	r0, [r0, #0]
 8002f78:	f7fe fa2e 	bl	80013d8 <SIM7600_sendATCommand>

	return THT_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	0800accc 	.word	0x0800accc
 8002f8c:	0800acd4 	.word	0x0800acd4
 8002f90:	0800b0a8 	.word	0x0800b0a8
 8002f94:	0800b0b4 	.word	0x0800b0b4
 8002f98:	0800b0c0 	.word	0x0800b0c0
 8002f9c:	0800b128 	.word	0x0800b128
 8002fa0:	0800b160 	.word	0x0800b160
 8002fa4:	0800b170 	.word	0x0800b170
 8002fa8:	0800b188 	.word	0x0800b188

08002fac <HAL_UARTEx_RxEventCallback>:
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_RTC_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_UARTEx_RxEventCallback+0x48>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d108      	bne.n	8002fd4 <HAL_UARTEx_RxEventCallback+0x28>

		ducati.DucatiFlag = true;
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
		Get_size(&ducati, Size);
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	480a      	ldr	r0, [pc, #40]	; (8002ff8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8002fd0:	f7fd ff68 	bl	8000ea4 <Get_size>

	}
	if (huart->Instance == USART2) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_UARTEx_RxEventCallback+0x50>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d106      	bne.n	8002fec <HAL_UARTEx_RxEventCallback+0x40>
		SIM_checkEvent(simPtr, Size);
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_UARTEx_RxEventCallback+0x54>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fd2a 	bl	8007a40 <SIM_checkEvent>
	}
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	20000460 	.word	0x20000460
 8002ffc:	40004400 	.word	0x40004400
 8003000:	200004d8 	.word	0x200004d8

08003004 <ducati_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ducati_Init(void) {
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
	ducati.dma = &hdma_usart3_rx;
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <ducati_Init+0x1c>)
 800300a:	4a06      	ldr	r2, [pc, #24]	; (8003024 <ducati_Init+0x20>)
 800300c:	605a      	str	r2, [r3, #4]
	ducati.huart = &huart3;
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <ducati_Init+0x1c>)
 8003010:	4a05      	ldr	r2, [pc, #20]	; (8003028 <ducati_Init+0x24>)
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	20000460 	.word	0x20000460
 8003024:	20000400 	.word	0x20000400
 8003028:	2000035c 	.word	0x2000035c

0800302c <CONTACTOR_READ>:

void CONTACTOR_READ()
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  IN[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8003030:	2101      	movs	r1, #1
 8003032:	4818      	ldr	r0, [pc, #96]	; (8003094 <CONTACTOR_READ+0x68>)
 8003034:	f001 ff52 	bl	8004edc <HAL_GPIO_ReadPin>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <CONTACTOR_READ+0x6c>)
 8003046:	701a      	strb	r2, [r3, #0]
  IN[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8003048:	2102      	movs	r1, #2
 800304a:	4812      	ldr	r0, [pc, #72]	; (8003094 <CONTACTOR_READ+0x68>)
 800304c:	f001 ff46 	bl	8004edc <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <CONTACTOR_READ+0x6c>)
 800305e:	705a      	strb	r2, [r3, #1]
  IN[2] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8003060:	2104      	movs	r1, #4
 8003062:	480c      	ldr	r0, [pc, #48]	; (8003094 <CONTACTOR_READ+0x68>)
 8003064:	f001 ff3a 	bl	8004edc <HAL_GPIO_ReadPin>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <CONTACTOR_READ+0x6c>)
 8003076:	709a      	strb	r2, [r3, #2]
  IN[3] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8003078:	2108      	movs	r1, #8
 800307a:	4806      	ldr	r0, [pc, #24]	; (8003094 <CONTACTOR_READ+0x68>)
 800307c:	f001 ff2e 	bl	8004edc <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b02      	ldr	r3, [pc, #8]	; (8003098 <CONTACTOR_READ+0x6c>)
 800308e:	70da      	strb	r2, [r3, #3]
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40020800 	.word	0x40020800
 8003098:	200004d0 	.word	0x200004d0

0800309c <SIM_Init>:

void SIM_Init(void) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b09a      	sub	sp, #104	; 0x68
 80030a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SIM7600_PWRKEY_GPIO_Port, SIM7600_PWRKEY_Pin,
 80030a2:	2201      	movs	r2, #1
 80030a4:	2101      	movs	r1, #1
 80030a6:	4864      	ldr	r0, [pc, #400]	; (8003238 <SIM_Init+0x19c>)
 80030a8:	f001 ff30 	bl	8004f0c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // Bat PWR len

	printf("%s\n", __FUNCTION__);
 80030ac:	4863      	ldr	r0, [pc, #396]	; (800323c <SIM_Init+0x1a0>)
 80030ae:	f005 fbdf 	bl	8008870 <puts>
	/* Khởi tạo biến tĩnh để các giá trị khởi tạo không bị mất đi */
	static SIM7600_HandleTypeDef sim7600 = { 0 };

	/* Khởi tạo giá trị cho con tr�?, biến con tr�? là biến toàn cục */
	simPtr = (SIM_HandleTypeDef*) &sim7600;
 80030b2:	4b63      	ldr	r3, [pc, #396]	; (8003240 <SIM_Init+0x1a4>)
 80030b4:	4a63      	ldr	r2, [pc, #396]	; (8003244 <SIM_Init+0x1a8>)
 80030b6:	601a      	str	r2, [r3, #0]

	/* Khởi tạo giá trị của các member của struct */
	sim7600.hdma = &hdma_usart2_rx;
 80030b8:	4b62      	ldr	r3, [pc, #392]	; (8003244 <SIM_Init+0x1a8>)
 80030ba:	4a63      	ldr	r2, [pc, #396]	; (8003248 <SIM_Init+0x1ac>)
 80030bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
	sim7600.huart = &huart2;
 80030c0:	4b60      	ldr	r3, [pc, #384]	; (8003244 <SIM_Init+0x1a8>)
 80030c2:	4a62      	ldr	r2, [pc, #392]	; (800324c <SIM_Init+0x1b0>)
 80030c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	sim7600.smsCnt = 0;
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <SIM_Init+0x1a8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 22c9 	strb.w	r2, [r3, #713]	; 0x2c9
	sim7600.smsPos = 0;
 80030d0:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <SIM_Init+0x1a8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
//    sim7600.resetPin = SIM7600_RESET_Pin;
//    sim7600.sleepPort = SIM7600_DTR_GPIO_Port;
//    sim7600.sleepPin = SIM7600_DTR_Pin;
//    sim7600.powerEnPort = SIM7600_PWREN_GPIO_Port;
//    sim7600.powerEnPin = SIM7600_PWREN_Pin;
	sim7600.parent.CSR = 0;
 80030d8:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <SIM_Init+0x1a8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

	sim7600.parent.simSendATCommand = (simSendATCommand) &SIM7600_sendATCommand;
 80030de:	4b59      	ldr	r3, [pc, #356]	; (8003244 <SIM_Init+0x1a8>)
 80030e0:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <SIM_Init+0x1b4>)
 80030e2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	sim7600.parent.simWakeup = (simWakeup) &SIM7600_wakeup;
 80030e6:	4b57      	ldr	r3, [pc, #348]	; (8003244 <SIM_Init+0x1a8>)
 80030e8:	4a5a      	ldr	r2, [pc, #360]	; (8003254 <SIM_Init+0x1b8>)
 80030ea:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	sim7600.parent.simSleep = (simSleep) &SIM7600_sleep;
 80030ee:	4b55      	ldr	r3, [pc, #340]	; (8003244 <SIM_Init+0x1a8>)
 80030f0:	4a59      	ldr	r2, [pc, #356]	; (8003258 <SIM_Init+0x1bc>)
 80030f2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	sim7600.parent.simInit = (simInit) &SIM7600_init;
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <SIM_Init+0x1a8>)
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <SIM_Init+0x1c0>)
 80030fa:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
	sim7600.parent.simSetFunction = (simSetFunction) &SIM7600_setFunction;
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <SIM_Init+0x1a8>)
 8003100:	4a57      	ldr	r2, [pc, #348]	; (8003260 <SIM_Init+0x1c4>)
 8003102:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	sim7600.parent.simProcess = (simProcess) &SIM7600_process;
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <SIM_Init+0x1a8>)
 8003108:	4a56      	ldr	r2, [pc, #344]	; (8003264 <SIM_Init+0x1c8>)
 800310a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	sim7600.parent.simCheckEvent = (simCheckEvent) &SIM7600_checkEvent;
 800310e:	4b4d      	ldr	r3, [pc, #308]	; (8003244 <SIM_Init+0x1a8>)
 8003110:	4a55      	ldr	r2, [pc, #340]	; (8003268 <SIM_Init+0x1cc>)
 8003112:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	sim7600.parent.simReadSMS = (simReadSMS) &SIM7600_readSMS;
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <SIM_Init+0x1a8>)
 8003118:	4a54      	ldr	r2, [pc, #336]	; (800326c <SIM_Init+0x1d0>)
 800311a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	sim7600.parent.simSendSMS = (simSendSMS) &SIM7600_sendSMS;
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <SIM_Init+0x1a8>)
 8003120:	4a53      	ldr	r2, [pc, #332]	; (8003270 <SIM_Init+0x1d4>)
 8003122:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	sim7600.parent.simGetSMSCounter = (simGetSMSCounter) &SIM7600_getSMSCounter;
 8003126:	4b47      	ldr	r3, [pc, #284]	; (8003244 <SIM_Init+0x1a8>)
 8003128:	4a52      	ldr	r2, [pc, #328]	; (8003274 <SIM_Init+0x1d8>)
 800312a:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	sim7600.parent.simCallUSSD = (simCallUSSD) &SIM7600_callUSSD;
 800312e:	4b45      	ldr	r3, [pc, #276]	; (8003244 <SIM_Init+0x1a8>)
 8003130:	4a51      	ldr	r2, [pc, #324]	; (8003278 <SIM_Init+0x1dc>)
 8003132:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	sim7600.parent.simGetRSSI = (simGetRSSI) &SIM7600_getRSSI;
 8003136:	4b43      	ldr	r3, [pc, #268]	; (8003244 <SIM_Init+0x1a8>)
 8003138:	4a50      	ldr	r2, [pc, #320]	; (800327c <SIM_Init+0x1e0>)
 800313a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	sim7600.parent.simGetTemperature =
 800313e:	4b41      	ldr	r3, [pc, #260]	; (8003244 <SIM_Init+0x1a8>)
 8003140:	4a4f      	ldr	r2, [pc, #316]	; (8003280 <SIM_Init+0x1e4>)
 8003142:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
			(simGetTemperature) &SIM7600_getTemperature;
	sim7600.parent.simGetNwtype = (simGetNwtype) &SIM7600_getNetworkType;
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <SIM_Init+0x1a8>)
 8003148:	4a4e      	ldr	r2, [pc, #312]	; (8003284 <SIM_Init+0x1e8>)
 800314a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	sim7600.parent.simGetSimPhone = (simGetSimPhone) &SIM7600_getSimPhone;
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <SIM_Init+0x1a8>)
 8003150:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <SIM_Init+0x1ec>)
 8003152:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	sim7600.parent.simGetIMEI = (simGetIMEI) &SIM7600_getIMEI;
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <SIM_Init+0x1a8>)
 8003158:	4a4c      	ldr	r2, [pc, #304]	; (800328c <SIM_Init+0x1f0>)
 800315a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	sim7600.parent.simGetLocalTime = (simGetLocalTime) &SIM7600_getLocalTime;
 800315e:	4b39      	ldr	r3, [pc, #228]	; (8003244 <SIM_Init+0x1a8>)
 8003160:	4a4b      	ldr	r2, [pc, #300]	; (8003290 <SIM_Init+0x1f4>)
 8003162:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
	sim7600.parent.simGetFileSize = (simGetFileSize) &SIM7600_getFileSize;
 8003166:	4b37      	ldr	r3, [pc, #220]	; (8003244 <SIM_Init+0x1a8>)
 8003168:	4a4a      	ldr	r2, [pc, #296]	; (8003294 <SIM_Init+0x1f8>)
 800316a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	sim7600.parent.simDeleteFile = (simDeleteFile) &SIM7600_deleteFile;
 800316e:	4b35      	ldr	r3, [pc, #212]	; (8003244 <SIM_Init+0x1a8>)
 8003170:	4a49      	ldr	r2, [pc, #292]	; (8003298 <SIM_Init+0x1fc>)
 8003172:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	sim7600.parent.simSetLocalTimeAuto =
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <SIM_Init+0x1a8>)
 8003178:	4a48      	ldr	r2, [pc, #288]	; (800329c <SIM_Init+0x200>)
 800317a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
			(simSetLocalTimeAuto) &SIM7600_setLocalTimeAuto;
	sim7600.parent.simSetLocalTimeManual =
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <SIM_Init+0x1a8>)
 8003180:	4a47      	ldr	r2, [pc, #284]	; (80032a0 <SIM_Init+0x204>)
 8003182:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			(simSetLocalTimeManual) &SIM7600_setLocalTimeManual;
	sim7600.parent.simSelectPhonebookMem =
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <SIM_Init+0x1a8>)
 8003188:	4a46      	ldr	r2, [pc, #280]	; (80032a4 <SIM_Init+0x208>)
 800318a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
			(simSelectPhonebookMem) &SIM7600_selectPhonebookMem;
	sim7600.parent.simSavePhonebook = (simSavePhonebook) &SIM7600_savePhonebook;
 800318e:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <SIM_Init+0x1a8>)
 8003190:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <SIM_Init+0x20c>)
 8003192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	sim7600.parent.simReadPhonebook = (simReadPhonebook) &SIM7600_readPhonebook;
 8003196:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <SIM_Init+0x1a8>)
 8003198:	4a44      	ldr	r2, [pc, #272]	; (80032ac <SIM_Init+0x210>)
 800319a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
	sim7600.parent.simFindPhonebook = (simFindPhonebook) &SIM7600_findPhonebook;
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <SIM_Init+0x1a8>)
 80031a0:	4a43      	ldr	r2, [pc, #268]	; (80032b0 <SIM_Init+0x214>)
 80031a2:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	sim7600.parent.simSendHTTP = (simSendHTTP) &SIM7600_sendHTTP;
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <SIM_Init+0x1a8>)
 80031a8:	4a42      	ldr	r2, [pc, #264]	; (80032b4 <SIM_Init+0x218>)
 80031aa:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	sim7600.parent.simGetFileHTTP = (simGetFileHTTP) &SIM7600_getFileHTTP;
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <SIM_Init+0x1a8>)
 80031b0:	4a41      	ldr	r2, [pc, #260]	; (80032b8 <SIM_Init+0x21c>)
 80031b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

	/* Khởi tạo module SIM */
	if (THT_OK != SIM_init(simPtr)) {
 80031b6:	4b22      	ldr	r3, [pc, #136]	; (8003240 <SIM_Init+0x1a4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fc16 	bl	80079ec <SIM_init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <SIM_Init+0x140>
		printf("Sim init fail\n");
 80031c6:	483d      	ldr	r0, [pc, #244]	; (80032bc <SIM_Init+0x220>)
 80031c8:	f005 fb52 	bl	8008870 <puts>
		HAL_UART_Transmit(&huart2, "SIM START ERROR: \n",
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	2213      	movs	r2, #19
 80031d2:	493b      	ldr	r1, [pc, #236]	; (80032c0 <SIM_Init+0x224>)
 80031d4:	481d      	ldr	r0, [pc, #116]	; (800324c <SIM_Init+0x1b0>)
 80031d6:	f003 f822 	bl	800621e <HAL_UART_Transmit>
		SIM_getLocalTime(simPtr, pTime, 22);
		SIM_getData(simPtr,
				SIM_DR_IMEI | SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_SIMPHONE
						| SIM_DR_TEMP, &simData);
	}
}
 80031da:	e028      	b.n	800322e <SIM_Init+0x192>
		HAL_UART_Transmit(&huart2, "SIM START OK: \n",
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	2210      	movs	r2, #16
 80031e2:	4938      	ldr	r1, [pc, #224]	; (80032c4 <SIM_Init+0x228>)
 80031e4:	4819      	ldr	r0, [pc, #100]	; (800324c <SIM_Init+0x1b0>)
 80031e6:	f003 f81a 	bl	800621e <HAL_UART_Transmit>
		char pTime[100] = { };
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	2260      	movs	r2, #96	; 0x60
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f005 fc6e 	bl	8008ad8 <memset>
		SIM_setFunction(simPtr, SIM_MODE_FULL);
 80031fc:	4b10      	ldr	r3, [pc, #64]	; (8003240 <SIM_Init+0x1a4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f004 fc05 	bl	8007a12 <SIM_setFunction>
		SIM_setLocalTimeAuto(simPtr);
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <SIM_Init+0x1a4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fc47 	bl	8007aa0 <SIM_setLocalTimeAuto>
		SIM_getLocalTime(simPtr, pTime, 22);
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <SIM_Init+0x1a4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1d39      	adds	r1, r7, #4
 8003218:	2216      	movs	r2, #22
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fc25 	bl	8007a6a <SIM_getLocalTime>
		SIM_getData(simPtr,
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <SIM_Init+0x1a4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <SIM_Init+0x22c>)
 8003226:	212f      	movs	r1, #47	; 0x2f
 8003228:	4618      	mov	r0, r3
 800322a:	f004 fb7b 	bl	8007924 <SIM_getData>
}
 800322e:	bf00      	nop
 8003230:	3768      	adds	r7, #104	; 0x68
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40020000 	.word	0x40020000
 800323c:	0800b5d8 	.word	0x0800b5d8
 8003240:	200004d8 	.word	0x200004d8
 8003244:	200009f4 	.word	0x200009f4
 8003248:	200003a0 	.word	0x200003a0
 800324c:	20000318 	.word	0x20000318
 8003250:	080013d9 	.word	0x080013d9
 8003254:	0800151d 	.word	0x0800151d
 8003258:	08001621 	.word	0x08001621
 800325c:	08001671 	.word	0x08001671
 8003260:	08001899 	.word	0x08001899
 8003264:	080018f5 	.word	0x080018f5
 8003268:	08001a21 	.word	0x08001a21
 800326c:	08001b09 	.word	0x08001b09
 8003270:	08001c19 	.word	0x08001c19
 8003274:	08001e91 	.word	0x08001e91
 8003278:	08001f21 	.word	0x08001f21
 800327c:	08001fd5 	.word	0x08001fd5
 8003280:	08002155 	.word	0x08002155
 8003284:	08002049 	.word	0x08002049
 8003288:	080021c1 	.word	0x080021c1
 800328c:	080023cd 	.word	0x080023cd
 8003290:	08002469 	.word	0x08002469
 8003294:	08002529 	.word	0x08002529
 8003298:	080025e9 	.word	0x080025e9
 800329c:	0800264d 	.word	0x0800264d
 80032a0:	08002749 	.word	0x08002749
 80032a4:	080027b9 	.word	0x080027b9
 80032a8:	080027f5 	.word	0x080027f5
 80032ac:	08002875 	.word	0x08002875
 80032b0:	08002915 	.word	0x08002915
 80032b4:	08002979 	.word	0x08002979
 80032b8:	08002ded 	.word	0x08002ded
 80032bc:	0800b19c 	.word	0x0800b19c
 80032c0:	0800b1ac 	.word	0x0800b1ac
 80032c4:	0800b1c0 	.word	0x0800b1c0
 80032c8:	200009a8 	.word	0x200009a8

080032cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80032cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d0:	b095      	sub	sp, #84	; 0x54
 80032d2:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80032d4:	f000 febc 	bl	8004050 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80032d8:	f000 f8ac 	bl	8003434 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80032dc:	f000 fab4 	bl	8003848 <MX_GPIO_Init>
	MX_DMA_Init();
 80032e0:	f000 fa8a 	bl	80037f8 <MX_DMA_Init>
	MX_SPI1_Init();
 80032e4:	f000 f99e 	bl	8003624 <MX_SPI1_Init>
	MX_SPI2_Init();
 80032e8:	f000 f9d2 	bl	8003690 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 80032ec:	f000 fa30 	bl	8003750 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80032f0:	f000 fa58 	bl	80037a4 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 80032f4:	f004 f97a 	bl	80075ec <MX_FATFS_Init>
	MX_RTC_Init();
 80032f8:	f000 f908 	bl	800350c <MX_RTC_Init>
	MX_USART1_UART_Init();
 80032fc:	f000 f9fe 	bl	80036fc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	ducati_Init();
 8003300:	f7ff fe80 	bl	8003004 <ducati_Init>
	CONTACTOR_READ();
 8003304:	f7ff fe92 	bl	800302c <CONTACTOR_READ>
	SIM_Init();
 8003308:	f7ff fec8 	bl	800309c <SIM_Init>
	HTTP_init(&http,
 800330c:	2301      	movs	r3, #1
 800330e:	223d      	movs	r2, #61	; 0x3d
 8003310:	4943      	ldr	r1, [pc, #268]	; (8003420 <main+0x154>)
 8003312:	4844      	ldr	r0, [pc, #272]	; (8003424 <main+0x158>)
 8003314:	f004 fa30 	bl	8007778 <HTTP_init>
			"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json",
			strlen(
					"https://capacitor-129e8-default-rtdb.firebaseio.com/citx.json"),
			HTTP_URL_URI_RESULT);
	 sprintf(jsonBuffer->data,
 8003318:	4b43      	ldr	r3, [pc, #268]	; (8003428 <main+0x15c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	33dd      	adds	r3, #221	; 0xdd
 800331e:	61fb      	str	r3, [r7, #28]
		",\"Frequency\":\"%.2f\""
		",\"ActivePowe\":\"%.2f\""
		",\"ReactivePower\":\"%.2f\""
		",\"Three-phase equivalent ActivePower\":\"%d\""
		",\"Three-phase equivalent ReactivePower\":\"%d\"}",
		getCosF(&ducati), getVol(&ducati),
 8003320:	4842      	ldr	r0, [pc, #264]	; (800342c <main+0x160>)
 8003322:	f7fd febd 	bl	80010a0 <getCosF>
 8003326:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f90c 	bl	8000548 <__aeabi_f2d>
 8003330:	e9c7 0104 	strd	r0, r1, [r7, #16]
		getCosF(&ducati), getVol(&ducati),
 8003334:	483d      	ldr	r0, [pc, #244]	; (800342c <main+0x160>)
 8003336:	f7fd fe7f 	bl	8001038 <getVol>
 800333a:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f902 	bl	8000548 <__aeabi_f2d>
 8003344:	4680      	mov	r8, r0
 8003346:	4689      	mov	r9, r1
		getCurrent(&ducati), getFrequency(&ducati), getActivePower(&ducati), getReactivePower(&ducati),
 8003348:	4838      	ldr	r0, [pc, #224]	; (800342c <main+0x160>)
 800334a:	f7fd fedd 	bl	8001108 <getCurrent>
 800334e:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8f8 	bl	8000548 <__aeabi_f2d>
 8003358:	4682      	mov	sl, r0
 800335a:	468b      	mov	fp, r1
		getCurrent(&ducati), getFrequency(&ducati), getActivePower(&ducati), getReactivePower(&ducati),
 800335c:	4833      	ldr	r0, [pc, #204]	; (800342c <main+0x160>)
 800335e:	f7fd ff07 	bl	8001170 <getFrequency>
 8003362:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8ee 	bl	8000548 <__aeabi_f2d>
 800336c:	e9c7 0102 	strd	r0, r1, [r7, #8]
		getCurrent(&ducati), getFrequency(&ducati), getActivePower(&ducati), getReactivePower(&ducati),
 8003370:	482e      	ldr	r0, [pc, #184]	; (800342c <main+0x160>)
 8003372:	f7fd ff95 	bl	80012a0 <getActivePower>
 8003376:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	e9c7 0100 	strd	r0, r1, [r7]
		getCurrent(&ducati), getFrequency(&ducati), getActivePower(&ducati), getReactivePower(&ducati),
 8003384:	4829      	ldr	r0, [pc, #164]	; (800342c <main+0x160>)
 8003386:	f7fd ffbf 	bl	8001308 <getReactivePower>
 800338a:	ee10 3a10 	vmov	r3, s0
	 sprintf(jsonBuffer->data,
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f8da 	bl	8000548 <__aeabi_f2d>
 8003394:	4604      	mov	r4, r0
 8003396:	460d      	mov	r5, r1
		getAvP(&ducati), getAvQ(&ducati));
 8003398:	4824      	ldr	r0, [pc, #144]	; (800342c <main+0x160>)
 800339a:	f7fd ff4f 	bl	800123c <getAvP>
 800339e:	4603      	mov	r3, r0
	 sprintf(jsonBuffer->data,
 80033a0:	461e      	mov	r6, r3
		getAvP(&ducati), getAvQ(&ducati));
 80033a2:	4822      	ldr	r0, [pc, #136]	; (800342c <main+0x160>)
 80033a4:	f7fd ff18 	bl	80011d8 <getAvQ>
 80033a8:	4603      	mov	r3, r0
	 sprintf(jsonBuffer->data,
 80033aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80033ac:	960a      	str	r6, [sp, #40]	; 0x28
 80033ae:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80033b2:	ed97 7b00 	vldr	d7, [r7]
 80033b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80033ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80033be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80033c2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80033c6:	e9cd 8900 	strd	r8, r9, [sp]
 80033ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033ce:	4918      	ldr	r1, [pc, #96]	; (8003430 <main+0x164>)
 80033d0:	69f8      	ldr	r0, [r7, #28]
 80033d2:	f005 fa89 	bl	80088e8 <siprintf>

	 HTTP_sendCurrentData(jsonBuffer);
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <main+0x15c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 fa08 	bl	80077f0 <HTTP_sendCurrentData>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		getVol(&ducati);
 80033e0:	4812      	ldr	r0, [pc, #72]	; (800342c <main+0x160>)
 80033e2:	f7fd fe29 	bl	8001038 <getVol>
		getCosF(&ducati);
 80033e6:	4811      	ldr	r0, [pc, #68]	; (800342c <main+0x160>)
 80033e8:	f7fd fe5a 	bl	80010a0 <getCosF>
		getCurrent(&ducati);
 80033ec:	480f      	ldr	r0, [pc, #60]	; (800342c <main+0x160>)
 80033ee:	f7fd fe8b 	bl	8001108 <getCurrent>
		getFrequency(&ducati);
 80033f2:	480e      	ldr	r0, [pc, #56]	; (800342c <main+0x160>)
 80033f4:	f7fd febc 	bl	8001170 <getFrequency>

		getAvQ(&ducati);
 80033f8:	480c      	ldr	r0, [pc, #48]	; (800342c <main+0x160>)
 80033fa:	f7fd feed 	bl	80011d8 <getAvQ>
		getAvP(&ducati);
 80033fe:	480b      	ldr	r0, [pc, #44]	; (800342c <main+0x160>)
 8003400:	f7fd ff1c 	bl	800123c <getAvP>
		getActivePower(&ducati);
 8003404:	4809      	ldr	r0, [pc, #36]	; (800342c <main+0x160>)
 8003406:	f7fd ff4b 	bl	80012a0 <getActivePower>
		getReactivePower(&ducati);
 800340a:	4808      	ldr	r0, [pc, #32]	; (800342c <main+0x160>)
 800340c:	f7fd ff7c 	bl	8001308 <getReactivePower>
		getCoilStatus(&ducati);
 8003410:	4806      	ldr	r0, [pc, #24]	; (800342c <main+0x160>)
 8003412:	f7fd ffad 	bl	8001370 <getCoilStatus>
		HAL_Delay(1000);
 8003416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800341a:	f000 fe8b 	bl	8004134 <HAL_Delay>
		getVol(&ducati);
 800341e:	e7df      	b.n	80033e0 <main+0x114>
 8003420:	0800b1d0 	.word	0x0800b1d0
 8003424:	200004dc 	.word	0x200004dc
 8003428:	200009f0 	.word	0x200009f0
 800342c:	20000460 	.word	0x20000460
 8003430:	0800b210 	.word	0x0800b210

08003434 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b094      	sub	sp, #80	; 0x50
 8003438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	2230      	movs	r2, #48	; 0x30
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f005 fb48 	bl	8008ad8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	609a      	str	r2, [r3, #8]
 8003454:	60da      	str	r2, [r3, #12]
 8003456:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <SystemClock_Config+0xd0>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <SystemClock_Config+0xd0>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003466:	6413      	str	r3, [r2, #64]	; 0x40
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <SystemClock_Config+0xd0>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003474:	2300      	movs	r3, #0
 8003476:	607b      	str	r3, [r7, #4]
 8003478:	4b23      	ldr	r3, [pc, #140]	; (8003508 <SystemClock_Config+0xd4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <SystemClock_Config+0xd4>)
 800347e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <SystemClock_Config+0xd4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8003490:	2309      	movs	r3, #9
 8003492:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003494:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800349a:	2301      	movs	r3, #1
 800349c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800349e:	2302      	movs	r3, #2
 80034a0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80034a8:	2319      	movs	r3, #25
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80034ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80034b0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034b2:	2302      	movs	r3, #2
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80034b6:	2304      	movs	r3, #4
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80034ba:	f107 0320 	add.w	r3, r7, #32
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fd3e 	bl	8004f40 <HAL_RCC_OscConfig>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <SystemClock_Config+0x9a>
		Error_Handler();
 80034ca:	f000 fa6f 	bl	80039ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80034ce:	230f      	movs	r3, #15
 80034d0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	2105      	movs	r1, #5
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 ff9f 	bl	8005430 <HAL_RCC_ClockConfig>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <SystemClock_Config+0xc8>
		Error_Handler();
 80034f8:	f000 fa58 	bl	80039ac <Error_Handler>
	}
}
 80034fc:	bf00      	nop
 80034fe:	3750      	adds	r7, #80	; 0x50
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	40007000 	.word	0x40007000

0800350c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8003512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	60da      	str	r2, [r3, #12]
 8003520:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 8003526:	463b      	mov	r3, r7
 8003528:	2228      	movs	r2, #40	; 0x28
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f005 fad3 	bl	8008ad8 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <MX_RTC_Init+0x110>)
 8003534:	4a3a      	ldr	r2, [pc, #232]	; (8003620 <MX_RTC_Init+0x114>)
 8003536:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <MX_RTC_Init+0x110>)
 800353a:	2200      	movs	r2, #0
 800353c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <MX_RTC_Init+0x110>)
 8003540:	227f      	movs	r2, #127	; 0x7f
 8003542:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <MX_RTC_Init+0x110>)
 8003546:	22ff      	movs	r2, #255	; 0xff
 8003548:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800354a:	4b34      	ldr	r3, [pc, #208]	; (800361c <MX_RTC_Init+0x110>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <MX_RTC_Init+0x110>)
 8003552:	2200      	movs	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003556:	4b31      	ldr	r3, [pc, #196]	; (800361c <MX_RTC_Init+0x110>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800355c:	482f      	ldr	r0, [pc, #188]	; (800361c <MX_RTC_Init+0x110>)
 800355e:	f002 fa29 	bl	80059b4 <HAL_RTC_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_RTC_Init+0x60>
		Error_Handler();
 8003568:	f000 fa20 	bl	80039ac <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x9;
 800356c:	2309      	movs	r3, #9
 800356e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8003586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800358a:	2201      	movs	r2, #1
 800358c:	4619      	mov	r1, r3
 800358e:	4823      	ldr	r0, [pc, #140]	; (800361c <MX_RTC_Init+0x110>)
 8003590:	f002 fa86 	bl	8005aa0 <HAL_RTC_SetTime>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_RTC_Init+0x92>
		Error_Handler();
 800359a:	f000 fa07 	bl	80039ac <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800359e:	2304      	movs	r3, #4
 80035a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_MARCH;
 80035a4:	2303      	movs	r3, #3
 80035a6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x28;
 80035aa:	2328      	movs	r3, #40	; 0x28
 80035ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 24;
 80035b0:	2318      	movs	r3, #24
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 80035b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ba:	2201      	movs	r2, #1
 80035bc:	4619      	mov	r1, r3
 80035be:	4817      	ldr	r0, [pc, #92]	; (800361c <MX_RTC_Init+0x110>)
 80035c0:	f002 fb08 	bl	8005bd4 <HAL_RTC_SetDate>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_RTC_Init+0xc2>
		Error_Handler();
 80035ca:	f000 f9ef 	bl	80039ac <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x9;
 80035ce:	2309      	movs	r3, #9
 80035d0:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x15;
 80035d2:	2315      	movs	r3, #21
 80035d4:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80035f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80035fe:	463b      	mov	r3, r7
 8003600:	2201      	movs	r2, #1
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <MX_RTC_Init+0x110>)
 8003606:	f002 fb69 	bl	8005cdc <HAL_RTC_SetAlarm>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_RTC_Init+0x108>
		Error_Handler();
 8003610:	f000 f9cc 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	3740      	adds	r7, #64	; 0x40
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000204 	.word	0x20000204
 8003620:	40002800 	.word	0x40002800

08003624 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <MX_SPI1_Init+0x64>)
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <MX_SPI1_Init+0x68>)
 800362c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <MX_SPI1_Init+0x64>)
 8003630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003634:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003636:	4b14      	ldr	r3, [pc, #80]	; (8003688 <MX_SPI1_Init+0x64>)
 8003638:	2200      	movs	r2, #0
 800363a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <MX_SPI1_Init+0x64>)
 800363e:	2200      	movs	r2, #0
 8003640:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_SPI1_Init+0x64>)
 8003644:	2200      	movs	r2, #0
 8003646:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <MX_SPI1_Init+0x64>)
 800364a:	2200      	movs	r2, #0
 800364c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_SPI1_Init+0x64>)
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <MX_SPI1_Init+0x64>)
 8003658:	2210      	movs	r2, #16
 800365a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <MX_SPI1_Init+0x64>)
 800365e:	2200      	movs	r2, #0
 8003660:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <MX_SPI1_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <MX_SPI1_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <MX_SPI1_Init+0x64>)
 8003670:	220a      	movs	r2, #10
 8003672:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <MX_SPI1_Init+0x64>)
 8003676:	f002 fcfc 	bl	8006072 <HAL_SPI_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_SPI1_Init+0x60>
		Error_Handler();
 8003680:	f000 f994 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000224 	.word	0x20000224
 800368c:	40013000 	.word	0x40013000

08003690 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <MX_SPI2_Init+0x64>)
 8003696:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <MX_SPI2_Init+0x68>)
 8003698:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800369a:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <MX_SPI2_Init+0x64>)
 800369c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036a0:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c0:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036ce:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036dc:	220a      	movs	r2, #10
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <MX_SPI2_Init+0x64>)
 80036e2:	f002 fcc6 	bl	8006072 <HAL_SPI_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80036ec:	f000 f95e 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	2000027c 	.word	0x2000027c
 80036f8:	40003800 	.word	0x40003800

080036fc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <MX_USART1_UART_Init+0x50>)
 8003704:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800370c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003714:	4b0c      	ldr	r3, [pc, #48]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003722:	220c      	movs	r2, #12
 8003724:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 800372e:	2200      	movs	r2, #0
 8003730:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003732:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_USART1_UART_Init+0x4c>)
 8003734:	f002 fd26 	bl	8006184 <HAL_UART_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800373e:	f000 f935 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200002d4 	.word	0x200002d4
 800374c:	40011000 	.word	0x40011000

08003750 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <MX_USART2_UART_Init+0x50>)
 8003758:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <MX_USART2_UART_Init+0x4c>)
 800375c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003760:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <MX_USART2_UART_Init+0x4c>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003776:	220c      	movs	r2, #12
 8003778:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <MX_USART2_UART_Init+0x4c>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003780:	4b06      	ldr	r3, [pc, #24]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003782:	2200      	movs	r2, #0
 8003784:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003786:	4805      	ldr	r0, [pc, #20]	; (800379c <MX_USART2_UART_Init+0x4c>)
 8003788:	f002 fcfc 	bl	8006184 <HAL_UART_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003792:	f000 f90b 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000318 	.word	0x20000318
 80037a0:	40004400 	.word	0x40004400

080037a4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037aa:	4a12      	ldr	r2, [pc, #72]	; (80037f4 <MX_USART3_UART_Init+0x50>)
 80037ac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b6:	4b0e      	ldr	r3, [pc, #56]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037ca:	220c      	movs	r2, #12
 80037cc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <MX_USART3_UART_Init+0x4c>)
 80037dc:	f002 fcd2 	bl	8006184 <HAL_UART_Init>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80037e6:	f000 f8e1 	bl	80039ac <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80037ea:	bf00      	nop
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000035c 	.word	0x2000035c
 80037f4:	40004800 	.word	0x40004800

080037f8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <MX_DMA_Init+0x4c>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <MX_DMA_Init+0x4c>)
 8003808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <MX_DMA_Init+0x4c>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2100      	movs	r1, #0
 800381e:	200c      	movs	r0, #12
 8003820:	f000 fd87 	bl	8004332 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003824:	200c      	movs	r0, #12
 8003826:	f000 fda0 	bl	800436a <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	2010      	movs	r0, #16
 8003830:	f000 fd7f 	bl	8004332 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003834:	2010      	movs	r0, #16
 8003836:	f000 fd98 	bl	800436a <HAL_NVIC_EnableIRQ>

}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	; 0x28
 800384c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800384e:	f107 0314 	add.w	r3, r7, #20
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	4b4e      	ldr	r3, [pc, #312]	; (800399c <MX_GPIO_Init+0x154>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a4d      	ldr	r2, [pc, #308]	; (800399c <MX_GPIO_Init+0x154>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b4b      	ldr	r3, [pc, #300]	; (800399c <MX_GPIO_Init+0x154>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <MX_GPIO_Init+0x154>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a46      	ldr	r2, [pc, #280]	; (800399c <MX_GPIO_Init+0x154>)
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <MX_GPIO_Init+0x154>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	4b40      	ldr	r3, [pc, #256]	; (800399c <MX_GPIO_Init+0x154>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <MX_GPIO_Init+0x154>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <MX_GPIO_Init+0x154>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <MX_GPIO_Init+0x154>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <MX_GPIO_Init+0x154>)
 80038bc:	f043 0302 	orr.w	r3, r3, #2
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <MX_GPIO_Init+0x154>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4b32      	ldr	r3, [pc, #200]	; (800399c <MX_GPIO_Init+0x154>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <MX_GPIO_Init+0x154>)
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <MX_GPIO_Init+0x154>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SIM7600_PWRKEY_Pin | SIM_RTS_Pin, GPIO_PIN_RESET);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2111      	movs	r1, #17
 80038ee:	482c      	ldr	r0, [pc, #176]	; (80039a0 <MX_GPIO_Init+0x158>)
 80038f0:	f001 fb0c 	bl	8004f0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 80038f4:	2200      	movs	r2, #0
 80038f6:	21f0      	movs	r1, #240	; 0xf0
 80038f8:	482a      	ldr	r0, [pc, #168]	; (80039a4 <MX_GPIO_Init+0x15c>)
 80038fa:	f001 fb07 	bl	8004f0c <HAL_GPIO_WritePin>
			SD_CS_Pin | RFM95_DIO0_Pin | RFM95_DIO1_Pin | RFM95_DIO2_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80038fe:	2200      	movs	r2, #0
 8003900:	f240 5155 	movw	r1, #1365	; 0x555
 8003904:	4828      	ldr	r0, [pc, #160]	; (80039a8 <MX_GPIO_Init+0x160>)
 8003906:	f001 fb01 	bl	8004f0c <HAL_GPIO_WritePin>
			RFM95_RS_Pin | RFM95_NSS_Pin | LED4_Pin | LED3_Pin | LED2_Pin
					| LED1_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : DETECT1_Pin DETECT2_Pin DETECT3_Pin DETECT4_Pin */
	GPIO_InitStruct.Pin = DETECT1_Pin | DETECT2_Pin | DETECT3_Pin | DETECT4_Pin;
 800390a:	230f      	movs	r3, #15
 800390c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	4821      	ldr	r0, [pc, #132]	; (80039a4 <MX_GPIO_Init+0x15c>)
 800391e:	f001 f941 	bl	8004ba4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIM7600_PWRKEY_Pin */
	GPIO_InitStruct.Pin = SIM7600_PWRKEY_Pin;
 8003922:	2301      	movs	r3, #1
 8003924:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800392a:	2301      	movs	r3, #1
 800392c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800392e:	2300      	movs	r3, #0
 8003930:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SIM7600_PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8003932:	f107 0314 	add.w	r3, r7, #20
 8003936:	4619      	mov	r1, r3
 8003938:	4819      	ldr	r0, [pc, #100]	; (80039a0 <MX_GPIO_Init+0x158>)
 800393a:	f001 f933 	bl	8004ba4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SIM_RTS_Pin */
	GPIO_InitStruct.Pin = SIM_RTS_Pin;
 800393e:	2310      	movs	r3, #16
 8003940:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003942:	2301      	movs	r3, #1
 8003944:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SIM_RTS_GPIO_Port, &GPIO_InitStruct);
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	4619      	mov	r1, r3
 8003954:	4812      	ldr	r0, [pc, #72]	; (80039a0 <MX_GPIO_Init+0x158>)
 8003956:	f001 f925 	bl	8004ba4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_CS_Pin RFM95_DIO0_Pin RFM95_DIO1_Pin RFM95_DIO2_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin | RFM95_DIO0_Pin | RFM95_DIO1_Pin
 800395a:	23f0      	movs	r3, #240	; 0xf0
 800395c:	617b      	str	r3, [r7, #20]
			| RFM95_DIO2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396a:	f107 0314 	add.w	r3, r7, #20
 800396e:	4619      	mov	r1, r3
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <MX_GPIO_Init+0x15c>)
 8003972:	f001 f917 	bl	8004ba4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RFM95_RS_Pin RFM95_NSS_Pin LED4_Pin LED3_Pin
	 LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = RFM95_RS_Pin | RFM95_NSS_Pin | LED4_Pin | LED3_Pin
 8003976:	f240 5355 	movw	r3, #1365	; 0x555
 800397a:	617b      	str	r3, [r7, #20]
			| LED2_Pin | LED1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800397c:	2301      	movs	r3, #1
 800397e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4619      	mov	r1, r3
 800398e:	4806      	ldr	r0, [pc, #24]	; (80039a8 <MX_GPIO_Init+0x160>)
 8003990:	f001 f908 	bl	8004ba4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003994:	bf00      	nop
 8003996:	3728      	adds	r7, #40	; 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020800 	.word	0x40020800
 80039a8:	40020c00 	.word	0x40020c00

080039ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039b0:	b672      	cpsid	i
}
 80039b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80039b4:	e7fe      	b.n	80039b4 <Error_Handler+0x8>
	...

080039b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_MspInit+0x4c>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_MspInit+0x4c>)
 80039c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <HAL_MspInit+0x4c>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_MspInit+0x4c>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_MspInit+0x4c>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_MspInit+0x4c>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800

08003a08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a0c      	ldr	r2, [pc, #48]	; (8003a54 <HAL_RTC_MspInit+0x4c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 feda 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003a42:	f7ff ffb3 	bl	80039ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RTC_MspInit+0x50>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a4c:	bf00      	nop
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40002800 	.word	0x40002800
 8003a58:	42470e3c 	.word	0x42470e3c

08003a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08c      	sub	sp, #48	; 0x30
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <HAL_SPI_MspInit+0xe8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d12c      	bne.n	8003ad8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b2e      	ldr	r3, [pc, #184]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	4b2a      	ldr	r3, [pc, #168]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a29      	ldr	r2, [pc, #164]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b27      	ldr	r3, [pc, #156]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003ab6:	23e0      	movs	r3, #224	; 0xe0
 8003ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f107 031c 	add.w	r3, r7, #28
 8003ace:	4619      	mov	r1, r3
 8003ad0:	481e      	ldr	r0, [pc, #120]	; (8003b4c <HAL_SPI_MspInit+0xf0>)
 8003ad2:	f001 f867 	bl	8004ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003ad6:	e031      	b.n	8003b3c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1c      	ldr	r2, [pc, #112]	; (8003b50 <HAL_SPI_MspInit+0xf4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d12c      	bne.n	8003b3c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003af0:	6413      	str	r3, [r2, #64]	; 0x40
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003b08:	f043 0302 	orr.w	r3, r3, #2
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_SPI_MspInit+0xec>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RFM95_SCK_Pin|RFM95_MISO_Pin|RFM95_MOSI_Pin;
 8003b1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b2c:	2305      	movs	r3, #5
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4807      	ldr	r0, [pc, #28]	; (8003b54 <HAL_SPI_MspInit+0xf8>)
 8003b38:	f001 f834 	bl	8004ba4 <HAL_GPIO_Init>
}
 8003b3c:	bf00      	nop
 8003b3e:	3730      	adds	r7, #48	; 0x30
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40013000 	.word	0x40013000
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40003800 	.word	0x40003800
 8003b54:	40020400 	.word	0x40020400

08003b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a82      	ldr	r2, [pc, #520]	; (8003d80 <HAL_UART_MspInit+0x228>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d12d      	bne.n	8003bd6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	4a80      	ldr	r2, [pc, #512]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8a:	4b7e      	ldr	r3, [pc, #504]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a79      	ldr	r2, [pc, #484]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b77      	ldr	r3, [pc, #476]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bc4:	2307      	movs	r3, #7
 8003bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bcc:	4619      	mov	r1, r3
 8003bce:	486e      	ldr	r0, [pc, #440]	; (8003d88 <HAL_UART_MspInit+0x230>)
 8003bd0:	f000 ffe8 	bl	8004ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003bd4:	e0cf      	b.n	8003d76 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6c      	ldr	r2, [pc, #432]	; (8003d8c <HAL_UART_MspInit+0x234>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d162      	bne.n	8003ca6 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	4b67      	ldr	r3, [pc, #412]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	4a66      	ldr	r2, [pc, #408]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bee:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	4a5f      	ldr	r2, [pc, #380]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0c:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SIM_TX_Pin|SIM_RX_Pin;
 8003c18:	230c      	movs	r3, #12
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c24:	2303      	movs	r3, #3
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c28:	2307      	movs	r3, #7
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c30:	4619      	mov	r1, r3
 8003c32:	4855      	ldr	r0, [pc, #340]	; (8003d88 <HAL_UART_MspInit+0x230>)
 8003c34:	f000 ffb6 	bl	8004ba4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c38:	4b55      	ldr	r3, [pc, #340]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c3a:	4a56      	ldr	r2, [pc, #344]	; (8003d94 <HAL_UART_MspInit+0x23c>)
 8003c3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c44:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c46:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c52:	4b4f      	ldr	r3, [pc, #316]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c5a:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003c66:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003c78:	4845      	ldr	r0, [pc, #276]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c7a:	f000 fb91 	bl	80043a0 <HAL_DMA_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003c84:	f7ff fe92 	bl	80039ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_UART_MspInit+0x238>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2100      	movs	r1, #0
 8003c98:	2026      	movs	r0, #38	; 0x26
 8003c9a:	f000 fb4a 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c9e:	2026      	movs	r0, #38	; 0x26
 8003ca0:	f000 fb63 	bl	800436a <HAL_NVIC_EnableIRQ>
}
 8003ca4:	e067      	b.n	8003d76 <HAL_UART_MspInit+0x21e>
  else if(huart->Instance==USART3)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <HAL_UART_MspInit+0x240>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d162      	bne.n	8003d76 <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4a2b      	ldr	r2, [pc, #172]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	6313      	str	r3, [r2, #48]	; 0x30
 8003cdc:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <HAL_UART_MspInit+0x22c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8003ce8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cfa:	2307      	movs	r3, #7
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d02:	4619      	mov	r1, r3
 8003d04:	4825      	ldr	r0, [pc, #148]	; (8003d9c <HAL_UART_MspInit+0x244>)
 8003d06:	f000 ff4d 	bl	8004ba4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003d0a:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d0c:	4a25      	ldr	r2, [pc, #148]	; (8003da4 <HAL_UART_MspInit+0x24c>)
 8003d0e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d16:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d18:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d2a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003d38:	4b19      	ldr	r3, [pc, #100]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003d4a:	4815      	ldr	r0, [pc, #84]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d4c:	f000 fb28 	bl	80043a0 <HAL_DMA_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_UART_MspInit+0x202>
      Error_Handler();
 8003d56:	f7ff fe29 	bl	80039ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
 8003d60:	4a0f      	ldr	r2, [pc, #60]	; (8003da0 <HAL_UART_MspInit+0x248>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2027      	movs	r0, #39	; 0x27
 8003d6c:	f000 fae1 	bl	8004332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d70:	2027      	movs	r0, #39	; 0x27
 8003d72:	f000 fafa 	bl	800436a <HAL_NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3738      	adds	r7, #56	; 0x38
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40011000 	.word	0x40011000
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	40004400 	.word	0x40004400
 8003d90:	200003a0 	.word	0x200003a0
 8003d94:	40026088 	.word	0x40026088
 8003d98:	40004800 	.word	0x40004800
 8003d9c:	40020400 	.word	0x40020400
 8003da0:	20000400 	.word	0x20000400
 8003da4:	40026028 	.word	0x40026028

08003da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <NMI_Handler+0x4>

08003dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <HardFault_Handler+0x4>

08003db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <MemManage_Handler+0x4>

08003dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <BusFault_Handler+0x4>

08003dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <UsageFault_Handler+0x4>

08003dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df4:	f000 f97e 	bl	80040f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <DMA1_Stream1_IRQHandler+0x10>)
 8003e02:	f000 fc65 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000400 	.word	0x20000400

08003e10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e14:	4802      	ldr	r0, [pc, #8]	; (8003e20 <DMA1_Stream5_IRQHandler+0x10>)
 8003e16:	f000 fc5b 	bl	80046d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200003a0 	.word	0x200003a0

08003e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e28:	4802      	ldr	r0, [pc, #8]	; (8003e34 <USART2_IRQHandler+0x10>)
 8003e2a:	f002 faef 	bl	800640c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000318 	.word	0x20000318

08003e38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <USART3_IRQHandler+0x10>)
 8003e3e:	f002 fae5 	bl	800640c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e42:	bf00      	nop
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	2000035c 	.word	0x2000035c

08003e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return 1;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_kill>:

int _kill(int pid, int sig)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e66:	f004 fead 	bl	8008bc4 <__errno>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2216      	movs	r2, #22
 8003e6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_exit>:

void _exit (int status)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffe7 	bl	8003e5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e8e:	e7fe      	b.n	8003e8e <_exit+0x12>

08003e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e00a      	b.n	8003eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60ba      	str	r2, [r7, #8]
 8003eae:	b2ca      	uxtb	r2, r1
 8003eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	dbf0      	blt.n	8003ea2 <_read+0x12>
  }

  return len;
 8003ec0:	687b      	ldr	r3, [r7, #4]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e009      	b.n	8003ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	60ba      	str	r2, [r7, #8]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	3301      	adds	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	dbf1      	blt.n	8003edc <_write+0x12>
  }
  return len;
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_close>:

int _close(int file)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <_isatty>:

int _isatty(int file)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f42:	2301      	movs	r3, #1
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <_sbrk+0x5c>)
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <_sbrk+0x60>)
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <_sbrk+0x64>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <_sbrk+0x64>)
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <_sbrk+0x68>)
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <_sbrk+0x64>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d207      	bcs.n	8003fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f9c:	f004 fe12 	bl	8008bc4 <__errno>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	220c      	movs	r2, #12
 8003fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e009      	b.n	8003fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a05      	ldr	r2, [pc, #20]	; (8003fd0 <_sbrk+0x64>)
 8003fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20020000 	.word	0x20020000
 8003fcc:	00000400 	.word	0x00000400
 8003fd0:	20000cc0 	.word	0x20000cc0
 8003fd4:	20000e30 	.word	0x20000e30

08003fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <SystemInit+0x20>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <SystemInit+0x20>)
 8003fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004000:	480d      	ldr	r0, [pc, #52]	; (8004038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004002:	490e      	ldr	r1, [pc, #56]	; (800403c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004004:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004008:	e002      	b.n	8004010 <LoopCopyDataInit>

0800400a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800400c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400e:	3304      	adds	r3, #4

08004010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004014:	d3f9      	bcc.n	800400a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004016:	4a0b      	ldr	r2, [pc, #44]	; (8004044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004018:	4c0b      	ldr	r4, [pc, #44]	; (8004048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800401a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800401c:	e001      	b.n	8004022 <LoopFillZerobss>

0800401e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004020:	3204      	adds	r2, #4

08004022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004024:	d3fb      	bcc.n	800401e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004026:	f7ff ffd7 	bl	8003fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800402a:	f004 fdd1 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800402e:	f7ff f94d 	bl	80032cc <main>
  bx  lr    
 8004032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800403c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004040:	0800b99c 	.word	0x0800b99c
  ldr r2, =_sbss
 8004044:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004048:	20000e2c 	.word	0x20000e2c

0800404c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800404c:	e7fe      	b.n	800404c <ADC_IRQHandler>
	...

08004050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_Init+0x40>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_Init+0x40>)
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_Init+0x40>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_Init+0x40>)
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_Init+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <HAL_Init+0x40>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004078:	2003      	movs	r0, #3
 800407a:	f000 f94f 	bl	800431c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800407e:	200f      	movs	r0, #15
 8004080:	f000 f808 	bl	8004094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004084:	f7ff fc98 	bl	80039b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00

08004094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800409c:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_InitTick+0x54>)
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_InitTick+0x58>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f967 	bl	8004386 <HAL_SYSTICK_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00e      	b.n	80040e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b0f      	cmp	r3, #15
 80040c6:	d80a      	bhi.n	80040de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c8:	2200      	movs	r2, #0
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	f000 f92f 	bl	8004332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d4:	4a06      	ldr	r2, [pc, #24]	; (80040f0 <HAL_InitTick+0x5c>)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e000      	b.n	80040e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000008 	.word	0x20000008
 80040f0:	20000004 	.word	0x20000004

080040f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_IncTick+0x20>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_IncTick+0x24>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4413      	add	r3, r2
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <HAL_IncTick+0x24>)
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000008 	.word	0x20000008
 8004118:	20000cc4 	.word	0x20000cc4

0800411c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return uwTick;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <HAL_GetTick+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000cc4 	.word	0x20000cc4

08004134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7ff ffee 	bl	800411c <HAL_GetTick>
 8004140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d005      	beq.n	800415a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <HAL_Delay+0x44>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800415a:	bf00      	nop
 800415c:	f7ff ffde 	bl	800411c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	429a      	cmp	r2, r3
 800416a:	d8f7      	bhi.n	800415c <HAL_Delay+0x28>
  {
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000008 	.word	0x20000008

0800417c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004198:	4013      	ands	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ae:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <__NVIC_SetPriorityGrouping+0x44>)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <__NVIC_GetPriorityGrouping+0x18>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	0a1b      	lsrs	r3, r3, #8
 80041ce:	f003 0307 	and.w	r3, r3, #7
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	e000ed00 	.word	0xe000ed00

080041e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	db0b      	blt.n	800420a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <__NVIC_EnableIRQ+0x38>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2001      	movs	r0, #1
 8004202:	fa00 f202 	lsl.w	r2, r0, r2
 8004206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e100 	.word	0xe000e100

0800421c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	6039      	str	r1, [r7, #0]
 8004226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db0a      	blt.n	8004246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	490c      	ldr	r1, [pc, #48]	; (8004268 <__NVIC_SetPriority+0x4c>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	0112      	lsls	r2, r2, #4
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	440b      	add	r3, r1
 8004240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004244:	e00a      	b.n	800425c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	4908      	ldr	r1, [pc, #32]	; (800426c <__NVIC_SetPriority+0x50>)
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	3b04      	subs	r3, #4
 8004254:	0112      	lsls	r2, r2, #4
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	440b      	add	r3, r1
 800425a:	761a      	strb	r2, [r3, #24]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	; 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f1c3 0307 	rsb	r3, r3, #7
 800428a:	2b04      	cmp	r3, #4
 800428c:	bf28      	it	cs
 800428e:	2304      	movcs	r3, #4
 8004290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3304      	adds	r3, #4
 8004296:	2b06      	cmp	r3, #6
 8004298:	d902      	bls.n	80042a0 <NVIC_EncodePriority+0x30>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	3b03      	subs	r3, #3
 800429e:	e000      	b.n	80042a2 <NVIC_EncodePriority+0x32>
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a4:	f04f 32ff 	mov.w	r2, #4294967295
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	43da      	mvns	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	401a      	ands	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042b8:	f04f 31ff 	mov.w	r1, #4294967295
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43d9      	mvns	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c8:	4313      	orrs	r3, r2
         );
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d301      	bcc.n	80042ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <SysTick_Config+0x40>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	210f      	movs	r1, #15
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	f7ff ff8e 	bl	800421c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Config+0x40>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SysTick_Config+0x40>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff29 	bl	800417c <__NVIC_SetPriorityGrouping>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004344:	f7ff ff3e 	bl	80041c4 <__NVIC_GetPriorityGrouping>
 8004348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff8e 	bl	8004270 <NVIC_EncodePriority>
 8004354:	4602      	mov	r2, r0
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff5d 	bl	800421c <__NVIC_SetPriority>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff31 	bl	80041e0 <__NVIC_EnableIRQ>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ffa2 	bl	80042d8 <SysTick_Config>
 8004394:	4603      	mov	r3, r0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7ff feb6 	bl	800411c <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e099      	b.n	80044f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2202      	movs	r2, #2
 80043c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043dc:	e00f      	b.n	80043fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043de:	f7ff fe9d 	bl	800411c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d908      	bls.n	80043fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2203      	movs	r2, #3
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e078      	b.n	80044f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e8      	bne.n	80043de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <HAL_DMA_Init+0x158>)
 8004418:	4013      	ands	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800442a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	2b04      	cmp	r3, #4
 8004456:	d107      	bne.n	8004468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4313      	orrs	r3, r2
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b04      	cmp	r3, #4
 8004490:	d117      	bne.n	80044c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00e      	beq.n	80044c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb01 	bl	8004aac <DMA_CheckFifoParam>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2240      	movs	r2, #64	; 0x40
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044be:	2301      	movs	r3, #1
 80044c0:	e016      	b.n	80044f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fab8 	bl	8004a40 <DMA_CalcBaseAndBitshift>
 80044d0:	4603      	mov	r3, r0
 80044d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d8:	223f      	movs	r2, #63	; 0x3f
 80044da:	409a      	lsls	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	f010803f 	.word	0xf010803f

080044fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_DMA_Start_IT+0x26>
 800451e:	2302      	movs	r3, #2
 8004520:	e040      	b.n	80045a4 <HAL_DMA_Start_IT+0xa8>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b01      	cmp	r3, #1
 8004534:	d12f      	bne.n	8004596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fa4a 	bl	80049e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	223f      	movs	r2, #63	; 0x3f
 8004556:	409a      	lsls	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0216 	orr.w	r2, r2, #22
 800456a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d007      	beq.n	8004584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0208 	orr.w	r2, r2, #8
 8004582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e005      	b.n	80045a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800459e:	2302      	movs	r3, #2
 80045a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ba:	f7ff fdaf 	bl	800411c <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d008      	beq.n	80045de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2280      	movs	r2, #128	; 0x80
 80045d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e052      	b.n	8004684 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0216 	bic.w	r2, r2, #22
 80045ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <HAL_DMA_Abort+0x62>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460a:	2b00      	cmp	r3, #0
 800460c:	d007      	beq.n	800461e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0208 	bic.w	r2, r2, #8
 800461c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0201 	bic.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800462e:	e013      	b.n	8004658 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004630:	f7ff fd74 	bl	800411c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b05      	cmp	r3, #5
 800463c:	d90c      	bls.n	8004658 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e015      	b.n	8004684 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1e4      	bne.n	8004630 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	223f      	movs	r2, #63	; 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e00c      	b.n	80046c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2205      	movs	r2, #5
 80046ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0201 	bic.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046dc:	4b8e      	ldr	r3, [pc, #568]	; (8004918 <HAL_DMA_IRQHandler+0x248>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a8e      	ldr	r2, [pc, #568]	; (800491c <HAL_DMA_IRQHandler+0x24c>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	0a9b      	lsrs	r3, r3, #10
 80046e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	2208      	movs	r2, #8
 80046fc:	409a      	lsls	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d013      	beq.n	800473c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	2208      	movs	r2, #8
 800472a:	409a      	lsls	r2, r3
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	f043 0201 	orr.w	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004740:	2201      	movs	r2, #1
 8004742:	409a      	lsls	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d012      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00b      	beq.n	8004772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475e:	2201      	movs	r2, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	f043 0202 	orr.w	r2, r3, #2
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	2204      	movs	r2, #4
 8004778:	409a      	lsls	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a0:	f043 0204 	orr.w	r2, r3, #4
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ac:	2210      	movs	r2, #16
 80047ae:	409a      	lsls	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d043      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d03c      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	2210      	movs	r2, #16
 80047cc:	409a      	lsls	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d018      	beq.n	8004812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d108      	bne.n	8004800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d024      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
 80047fe:	e01f      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	4798      	blx	r3
 8004810:	e016      	b.n	8004840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d107      	bne.n	8004830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0208 	bic.w	r2, r2, #8
 800482e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2220      	movs	r2, #32
 8004846:	409a      	lsls	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 808f 	beq.w	8004970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8087 	beq.w	8004970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004866:	2220      	movs	r2, #32
 8004868:	409a      	lsls	r2, r3
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b05      	cmp	r3, #5
 8004878:	d136      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0216 	bic.w	r2, r2, #22
 8004888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_DMA_IRQHandler+0x1da>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048be:	223f      	movs	r2, #63	; 0x3f
 80048c0:	409a      	lsls	r2, r3
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d07e      	beq.n	80049dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
        }
        return;
 80048e6:	e079      	b.n	80049dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01d      	beq.n	8004932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10d      	bne.n	8004920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	2b00      	cmp	r3, #0
 800490a:	d031      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
 8004914:	e02c      	b.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
 8004916:	bf00      	nop
 8004918:	20000000 	.word	0x20000000
 800491c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d023      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
 8004930:	e01e      	b.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10f      	bne.n	8004960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	2b00      	cmp	r3, #0
 8004976:	d032      	beq.n	80049de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2205      	movs	r2, #5
 8004988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	3301      	adds	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d307      	bcc.n	80049b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f2      	bne.n	800499c <HAL_DMA_IRQHandler+0x2cc>
 80049b6:	e000      	b.n	80049ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	4798      	blx	r3
 80049da:	e000      	b.n	80049de <HAL_DMA_IRQHandler+0x30e>
        return;
 80049dc:	bf00      	nop
    }
  }
}
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d108      	bne.n	8004a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a22:	e007      	b.n	8004a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	60da      	str	r2, [r3, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	3b10      	subs	r3, #16
 8004a50:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d909      	bls.n	8004a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a76:	f023 0303 	bic.w	r3, r3, #3
 8004a7a:	1d1a      	adds	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a80:	e007      	b.n	8004a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	aaaaaaab 	.word	0xaaaaaaab
 8004aa8:	0800b5fc 	.word	0x0800b5fc

08004aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d11f      	bne.n	8004b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d856      	bhi.n	8004b7a <DMA_CheckFifoParam+0xce>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <DMA_CheckFifoParam+0x28>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ae5 	.word	0x08004ae5
 8004ad8:	08004af7 	.word	0x08004af7
 8004adc:	08004ae5 	.word	0x08004ae5
 8004ae0:	08004b7b 	.word	0x08004b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d046      	beq.n	8004b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e043      	b.n	8004b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afe:	d140      	bne.n	8004b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e03d      	b.n	8004b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0e:	d121      	bne.n	8004b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d837      	bhi.n	8004b86 <DMA_CheckFifoParam+0xda>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <DMA_CheckFifoParam+0x70>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b33 	.word	0x08004b33
 8004b24:	08004b2d 	.word	0x08004b2d
 8004b28:	08004b45 	.word	0x08004b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e030      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e022      	b.n	8004b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b4c:	d11f      	bne.n	8004b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b52:	e01c      	b.n	8004b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d903      	bls.n	8004b62 <DMA_CheckFifoParam+0xb6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b60:	e018      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
      break;
 8004b66:	e015      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e00b      	b.n	8004b92 <DMA_CheckFifoParam+0xe6>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e00a      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e008      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e006      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e004      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e002      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b8e:	bf00      	nop
 8004b90:	e000      	b.n	8004b94 <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
    }
  } 
  
  return status; 
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e16b      	b.n	8004e98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f040 815a 	bne.w	8004e92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d005      	beq.n	8004bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d130      	bne.n	8004c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 0201 	and.w	r2, r3, #1
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d017      	beq.n	8004c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d123      	bne.n	8004ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80b4 	beq.w	8004e92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b60      	ldr	r3, [pc, #384]	; (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4a5f      	ldr	r2, [pc, #380]	; (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	; (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d46:	4a5b      	ldr	r2, [pc, #364]	; (8004eb4 <HAL_GPIO_Init+0x310>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_GPIO_Init+0x314>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <HAL_GPIO_Init+0x226>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a51      	ldr	r2, [pc, #324]	; (8004ebc <HAL_GPIO_Init+0x318>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d025      	beq.n	8004dc6 <HAL_GPIO_Init+0x222>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a50      	ldr	r2, [pc, #320]	; (8004ec0 <HAL_GPIO_Init+0x31c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <HAL_GPIO_Init+0x21e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4f      	ldr	r2, [pc, #316]	; (8004ec4 <HAL_GPIO_Init+0x320>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x21a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4e      	ldr	r2, [pc, #312]	; (8004ec8 <HAL_GPIO_Init+0x324>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x216>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_GPIO_Init+0x328>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x212>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a4c      	ldr	r2, [pc, #304]	; (8004ed0 <HAL_GPIO_Init+0x32c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x20e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4b      	ldr	r2, [pc, #300]	; (8004ed4 <HAL_GPIO_Init+0x330>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x20a>
 8004daa:	2307      	movs	r3, #7
 8004dac:	e00e      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e00c      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004db2:	2306      	movs	r3, #6
 8004db4:	e00a      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004db6:	2305      	movs	r3, #5
 8004db8:	e008      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	e006      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e004      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e002      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	f002 0203 	and.w	r2, r2, #3
 8004dd2:	0092      	lsls	r2, r2, #2
 8004dd4:	4093      	lsls	r3, r2
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ddc:	4935      	ldr	r1, [pc, #212]	; (8004eb4 <HAL_GPIO_Init+0x310>)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	3302      	adds	r3, #2
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dea:	4b3b      	ldr	r3, [pc, #236]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e0e:	4a32      	ldr	r2, [pc, #200]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e14:	4b30      	ldr	r3, [pc, #192]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e3e:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e62:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e8c:	4a12      	ldr	r2, [pc, #72]	; (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3301      	adds	r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b0f      	cmp	r3, #15
 8004e9c:	f67f ae90 	bls.w	8004bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	3724      	adds	r7, #36	; 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	40020000 	.word	0x40020000
 8004ebc:	40020400 	.word	0x40020400
 8004ec0:	40020800 	.word	0x40020800
 8004ec4:	40020c00 	.word	0x40020c00
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40021400 	.word	0x40021400
 8004ed0:	40021800 	.word	0x40021800
 8004ed4:	40021c00 	.word	0x40021c00
 8004ed8:	40013c00 	.word	0x40013c00

08004edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e001      	b.n	8004efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f1c:	787b      	ldrb	r3, [r7, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f28:	e003      	b.n	8004f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	041a      	lsls	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
	...

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e267      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d075      	beq.n	800504a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5e:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d00c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b85      	ldr	r3, [pc, #532]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d112      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f82:	d10b      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05b      	beq.n	8005048 <HAL_RCC_OscConfig+0x108>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d157      	bne.n	8005048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e242      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x74>
 8004fa6:	4b76      	ldr	r3, [pc, #472]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a75      	ldr	r2, [pc, #468]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e01d      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x98>
 8004fbe:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6c      	ldr	r2, [pc, #432]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a68      	ldr	r2, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a65      	ldr	r2, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7ff f890 	bl	800411c <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005000:	f7ff f88c 	bl	800411c <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e207      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0xc0>
 800501e:	e014      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7ff f87c 	bl	800411c <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7ff f878 	bl	800411c <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1f3      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0xe8>
 8005046:	e000      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b44      	ldr	r3, [pc, #272]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1c7      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4937      	ldr	r1, [pc, #220]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	e03a      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7ff f831 	bl	800411c <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7ff f82d 	bl	800411c <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e1a8      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4925      	ldr	r1, [pc, #148]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	e015      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7ff f810 	bl	800411c <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005100:	f7ff f80c 	bl	800411c <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e187      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d036      	beq.n	8005198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fe fff0 	bl	800411c <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fe ffec 	bl	800411c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e167      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x200>
 800515e:	e01b      	b.n	8005198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fe ffd9 	bl	800411c <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	e00e      	b.n	800518c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516e:	f7fe ffd5 	bl	800411c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d907      	bls.n	800518c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e150      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 8005180:	40023800 	.word	0x40023800
 8005184:	42470000 	.word	0x42470000
 8005188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ea      	bne.n	800516e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8097 	beq.w	80052d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b81      	ldr	r3, [pc, #516]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b7d      	ldr	r3, [pc, #500]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d118      	bne.n	8005214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b74      	ldr	r3, [pc, #464]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a73      	ldr	r2, [pc, #460]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fe ff95 	bl	800411c <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fe ff91 	bl	800411c <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x2ea>
 800521c:	4b64      	ldr	r3, [pc, #400]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a63      	ldr	r2, [pc, #396]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	e01c      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x30c>
 8005232:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5e      	ldr	r2, [pc, #376]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	4b5c      	ldr	r3, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800524c:	4b58      	ldr	r3, [pc, #352]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a54      	ldr	r2, [pc, #336]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fe ff56 	bl	800411c <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fe ff52 	bl	800411c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0cb      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	4b49      	ldr	r3, [pc, #292]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ee      	beq.n	8005274 <HAL_RCC_OscConfig+0x334>
 8005296:	e014      	b.n	80052c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fe ff40 	bl	800411c <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fe ff3c 	bl	800411c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0b5      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b6:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ee      	bne.n	80052a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a1 	beq.w	8005420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052de:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d05c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d141      	bne.n	8005376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe ff10 	bl	800411c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fe ff0c 	bl	800411c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e087      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	491b      	ldr	r1, [pc, #108]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fe fee5 	bl	800411c <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fe fee1 	bl	800411c <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e05c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005368:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x416>
 8005374:	e054      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fe fece 	bl	800411c <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fe feca 	bl	800411c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e045      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x444>
 80053a2:	e03d      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e038      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40007000 	.word	0x40007000
 80053b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x4ec>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d028      	beq.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d121      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0cc      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90c      	bls.n	800546c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b8      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	494d      	ldr	r1, [pc, #308]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d044      	beq.n	8005550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b47      	ldr	r3, [pc, #284]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d119      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d003      	beq.n	80054ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e067      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4934      	ldr	r1, [pc, #208]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005520:	f7fe fdfc 	bl	800411c <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	e00a      	b.n	800553e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005528:	f7fe fdf8 	bl	800411c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e04f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 020c 	and.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	429a      	cmp	r2, r3
 800554e:	d1eb      	bne.n	8005528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20c      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e032      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b6:	f000 f821 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fd5c 	bl	8004094 <HAL_InitTick>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023c00 	.word	0x40023c00
 80055ec:	40023800 	.word	0x40023800
 80055f0:	0800b5e4 	.word	0x0800b5e4
 80055f4:	20000000 	.word	0x20000000
 80055f8:	20000004 	.word	0x20000004

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005600:	b090      	sub	sp, #64	; 0x40
 8005602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	637b      	str	r3, [r7, #52]	; 0x34
 8005608:	2300      	movs	r3, #0
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560c:	2300      	movs	r3, #0
 800560e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005614:	4b59      	ldr	r3, [pc, #356]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b08      	cmp	r3, #8
 800561e:	d00d      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x40>
 8005620:	2b08      	cmp	r3, #8
 8005622:	f200 80a1 	bhi.w	8005768 <HAL_RCC_GetSysClockFreq+0x16c>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x34>
 800562a:	2b04      	cmp	r3, #4
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x3a>
 800562e:	e09b      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005630:	4b53      	ldr	r3, [pc, #332]	; (8005780 <HAL_RCC_GetSysClockFreq+0x184>)
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005634:	e09b      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005636:	4b53      	ldr	r3, [pc, #332]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800563a:	e098      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563c:	4b4f      	ldr	r3, [pc, #316]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005646:	4b4d      	ldr	r3, [pc, #308]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d028      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	2200      	movs	r2, #0
 800565a:	623b      	str	r3, [r7, #32]
 800565c:	627a      	str	r2, [r7, #36]	; 0x24
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005664:	2100      	movs	r1, #0
 8005666:	4b47      	ldr	r3, [pc, #284]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005668:	fb03 f201 	mul.w	r2, r3, r1
 800566c:	2300      	movs	r3, #0
 800566e:	fb00 f303 	mul.w	r3, r0, r3
 8005672:	4413      	add	r3, r2
 8005674:	4a43      	ldr	r2, [pc, #268]	; (8005784 <HAL_RCC_GetSysClockFreq+0x188>)
 8005676:	fba0 1202 	umull	r1, r2, r0, r2
 800567a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800567c:	460a      	mov	r2, r1
 800567e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005682:	4413      	add	r3, r2
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2200      	movs	r2, #0
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005696:	f7fb fa87 	bl	8000ba8 <__aeabi_uldivmod>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4613      	mov	r3, r2
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a2:	e053      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a4:	4b35      	ldr	r3, [pc, #212]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	2200      	movs	r2, #0
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	617a      	str	r2, [r7, #20]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056b6:	f04f 0b00 	mov.w	fp, #0
 80056ba:	4652      	mov	r2, sl
 80056bc:	465b      	mov	r3, fp
 80056be:	f04f 0000 	mov.w	r0, #0
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	0159      	lsls	r1, r3, #5
 80056c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056cc:	0150      	lsls	r0, r2, #5
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	ebb2 080a 	subs.w	r8, r2, sl
 80056d6:	eb63 090b 	sbc.w	r9, r3, fp
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056ee:	ebb2 0408 	subs.w	r4, r2, r8
 80056f2:	eb63 0509 	sbc.w	r5, r3, r9
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	00eb      	lsls	r3, r5, #3
 8005700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005704:	00e2      	lsls	r2, r4, #3
 8005706:	4614      	mov	r4, r2
 8005708:	461d      	mov	r5, r3
 800570a:	eb14 030a 	adds.w	r3, r4, sl
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	eb45 030b 	adc.w	r3, r5, fp
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005722:	4629      	mov	r1, r5
 8005724:	028b      	lsls	r3, r1, #10
 8005726:	4621      	mov	r1, r4
 8005728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800572c:	4621      	mov	r1, r4
 800572e:	028a      	lsls	r2, r1, #10
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	2200      	movs	r2, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	60fa      	str	r2, [r7, #12]
 800573c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005740:	f7fb fa32 	bl	8000ba8 <__aeabi_uldivmod>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4613      	mov	r3, r2
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <HAL_RCC_GetSysClockFreq+0x180>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	3301      	adds	r3, #1
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800575c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005766:	e002      	b.n	800576e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetSysClockFreq+0x184>)
 800576a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800576c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005770:	4618      	mov	r0, r3
 8005772:	3740      	adds	r7, #64	; 0x40
 8005774:	46bd      	mov	sp, r7
 8005776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800577a:	bf00      	nop
 800577c:	40023800 	.word	0x40023800
 8005780:	00f42400 	.word	0x00f42400
 8005784:	017d7840 	.word	0x017d7840

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCC_GetHCLKFreq+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000000 	.word	0x20000000

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057a4:	f7ff fff0 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a8:	4602      	mov	r2, r0
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	0a9b      	lsrs	r3, r3, #10
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	4903      	ldr	r1, [pc, #12]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b6:	5ccb      	ldrb	r3, [r1, r3]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	0800b5f4 	.word	0x0800b5f4

080057c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057cc:	f7ff ffdc 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0b5b      	lsrs	r3, r3, #13
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4903      	ldr	r1, [pc, #12]	; (80057ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80057de:	5ccb      	ldrb	r3, [r1, r3]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	0800b5f4 	.word	0x0800b5f4

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d035      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005818:	4b62      	ldr	r3, [pc, #392]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800581e:	f7fe fc7d 	bl	800411c <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005824:	e008      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005826:	f7fe fc79 	bl	800411c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e0b0      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005838:	4b5b      	ldr	r3, [pc, #364]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1f0      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	019a      	lsls	r2, r3, #6
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	071b      	lsls	r3, r3, #28
 8005850:	4955      	ldr	r1, [pc, #340]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005858:	4b52      	ldr	r3, [pc, #328]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800585a:	2201      	movs	r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585e:	f7fe fc5d 	bl	800411c <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005866:	f7fe fc59 	bl	800411c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e090      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005878:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8083 	beq.w	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800589c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6413      	str	r3, [r2, #64]	; 0x40
 80058a2:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058ae:	4b3f      	ldr	r3, [pc, #252]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3e      	ldr	r2, [pc, #248]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ba:	f7fe fc2f 	bl	800411c <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058c2:	f7fe fc2b 	bl	800411c <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e062      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d4:	4b35      	ldr	r3, [pc, #212]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058e0:	4b31      	ldr	r3, [pc, #196]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d02f      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d028      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fe:	4b2a      	ldr	r3, [pc, #168]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005906:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005908:	4b29      	ldr	r3, [pc, #164]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b28      	ldr	r3, [pc, #160]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800591a:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d114      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005926:	f7fe fbf9 	bl	800411c <HAL_GetTick>
 800592a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fe fbf5 	bl	800411c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e02a      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ee      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800595c:	d10d      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	490d      	ldr	r1, [pc, #52]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	4313      	orrs	r3, r2
 8005976:	608b      	str	r3, [r1, #8]
 8005978:	e005      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800597a:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005980:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005984:	6093      	str	r3, [r2, #8]
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	4905      	ldr	r1, [pc, #20]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005994:	4313      	orrs	r3, r2
 8005996:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	42470068 	.word	0x42470068
 80059a8:	40023800 	.word	0x40023800
 80059ac:	40007000 	.word	0x40007000
 80059b0:	42470e40 	.word	0x42470e40

080059b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e066      	b.n	8005a98 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7f5b      	ldrb	r3, [r3, #29]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe f814 	bl	8003a08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	22ca      	movs	r2, #202	; 0xca
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2253      	movs	r2, #83	; 0x53
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fac2 	bl	8005f80 <RTC_EnterInitMode>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d12c      	bne.n	8005a60 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	68d2      	ldr	r2, [r2, #12]
 8005a40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6919      	ldr	r1, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	041a      	lsls	r2, r3, #16
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fac9 	bl	8005fee <RTC_ExitInitMode>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d113      	bne.n	8005a8e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	7f1b      	ldrb	r3, [r3, #28]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_RTC_SetTime+0x1c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e087      	b.n	8005bcc <HAL_RTC_SetTime+0x12c>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d126      	bne.n	8005b1c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d102      	bne.n	8005ae2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 faa6 	bl	8006038 <RTC_ByteToBcd2>
 8005aec:	4603      	mov	r3, r0
 8005aee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fa9f 	bl	8006038 <RTC_ByteToBcd2>
 8005afa:	4603      	mov	r3, r0
 8005afc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005afe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fa97 	bl	8006038 <RTC_ByteToBcd2>
 8005b0a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e018      	b.n	8005b4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b3c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	78db      	ldrb	r3, [r3, #3]
 8005b48:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	22ca      	movs	r2, #202	; 0xca
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2253      	movs	r2, #83	; 0x53
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 fa0e 	bl	8005f80 <RTC_EnterInitMode>
 8005b64:	4603      	mov	r3, r0
 8005b66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d120      	bne.n	8005bb0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b78:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fa21 	bl	8005fee <RTC_ExitInitMode>
 8005bac:	4603      	mov	r3, r0
 8005bae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	771a      	strb	r2, [r3, #28]

  return status;
 8005bca:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd90      	pop	{r4, r7, pc}

08005bd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	7f1b      	ldrb	r3, [r3, #28]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_RTC_SetDate+0x1c>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e071      	b.n	8005cd4 <HAL_RTC_SetDate+0x100>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10e      	bne.n	8005c20 <HAL_RTC_SetDate+0x4c>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	f023 0310 	bic.w	r3, r3, #16
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	330a      	adds	r3, #10
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11c      	bne.n	8005c60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	78db      	ldrb	r3, [r3, #3]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa04 	bl	8006038 <RTC_ByteToBcd2>
 8005c30:	4603      	mov	r3, r0
 8005c32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 f9fd 	bl	8006038 <RTC_ByteToBcd2>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	789b      	ldrb	r3, [r3, #2]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f9f5 	bl	8006038 <RTC_ByteToBcd2>
 8005c4e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c50:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e00e      	b.n	8005c7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	78db      	ldrb	r3, [r3, #3]
 8005c64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005c72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	22ca      	movs	r2, #202	; 0xca
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2253      	movs	r2, #83	; 0x53
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 f976 	bl	8005f80 <RTC_EnterInitMode>
 8005c94:	4603      	mov	r3, r0
 8005c96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 f99d 	bl	8005fee <RTC_ExitInitMode>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005cb8:	7cfb      	ldrb	r3, [r7, #19]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	771a      	strb	r2, [r3, #28]

  return status;
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	7f1b      	ldrb	r3, [r3, #28]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_RTC_SetAlarm+0x24>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e113      	b.n	8005f28 <HAL_RTC_SetAlarm+0x24c>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d137      	bne.n	8005d82 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2200      	movs	r2, #0
 8005d24:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 f984 	bl	8006038 <RTC_ByteToBcd2>
 8005d30:	4603      	mov	r3, r0
 8005d32:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f97d 	bl	8006038 <RTC_ByteToBcd2>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005d42:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	789b      	ldrb	r3, [r3, #2]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f975 	bl	8006038 <RTC_ByteToBcd2>
 8005d4e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005d5a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f967 	bl	8006038 <RTC_ByteToBcd2>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005d6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005d76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e023      	b.n	8005dca <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005da2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005da8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	78db      	ldrb	r3, [r3, #3]
 8005dae:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005db0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005db8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005dba:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005dc0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	22ca      	movs	r2, #202	; 0xca
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2253      	movs	r2, #83	; 0x53
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dee:	d148      	bne.n	8005e82 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dfe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e0e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005e20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e22:	f7fe f97b 	bl	800411c <HAL_GetTick>
 8005e26:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e28:	e013      	b.n	8005e52 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e2a:	f7fe f977 	bl	800411c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e38:	d90b      	bls.n	8005e52 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2203      	movs	r2, #3
 8005e46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e06a      	b.n	8005f28 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0e4      	beq.n	8005e2a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	e047      	b.n	8005f12 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e90:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005eb2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb4:	f7fe f932 	bl	800411c <HAL_GetTick>
 8005eb8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005eba:	e013      	b.n	8005ee4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebc:	f7fe f92e 	bl	800411c <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eca:	d90b      	bls.n	8005ee4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	22ff      	movs	r2, #255	; 0xff
 8005ed2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e021      	b.n	8005f28 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0e4      	beq.n	8005ebc <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f10:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	22ff      	movs	r2, #255	; 0xff
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3724      	adds	r7, #36	; 0x24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd90      	pop	{r4, r7, pc}

08005f30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f4c:	f7fe f8e6 	bl	800411c <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f52:	e009      	b.n	8005f68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f54:	f7fe f8e2 	bl	800411c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f62:	d901      	bls.n	8005f68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e007      	b.n	8005f78 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ee      	beq.n	8005f54 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d122      	bne.n	8005fe4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68da      	ldr	r2, [r3, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fae:	f7fe f8b5 	bl	800411c <HAL_GetTick>
 8005fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fb4:	e00c      	b.n	8005fd0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fb6:	f7fe f8b1 	bl	800411c <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc4:	d904      	bls.n	8005fd0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <RTC_EnterInitMode+0x64>
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d1e8      	bne.n	8005fb6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006008:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff89 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2204      	movs	r2, #4
 8006028:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800602e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006046:	e005      	b.n	8006054 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	3301      	adds	r3, #1
 800604c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	3b0a      	subs	r3, #10
 8006052:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	2b09      	cmp	r3, #9
 8006058:	d8f6      	bhi.n	8006048 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	b2da      	uxtb	r2, r3
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	4313      	orrs	r3, r2
 8006064:	b2db      	uxtb	r3, r3
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e07b      	b.n	800617c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d108      	bne.n	800609e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006094:	d009      	beq.n	80060aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	61da      	str	r2, [r3, #28]
 800609c:	e005      	b.n	80060aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7fd fcc9 	bl	8003a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	ea42 0103 	orr.w	r1, r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	f003 0104 	and.w	r1, r3, #4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	f003 0210 	and.w	r2, r3, #16
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800616a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e03f      	b.n	8006216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fd fcd4 	bl	8003b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	; 0x24
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ff9b 	bl	8007104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b08a      	sub	sp, #40	; 0x28
 8006222:	af02      	add	r7, sp, #8
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b20      	cmp	r3, #32
 800623c:	d17c      	bne.n	8006338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_UART_Transmit+0x2c>
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e075      	b.n	800633a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_UART_Transmit+0x3e>
 8006258:	2302      	movs	r3, #2
 800625a:	e06e      	b.n	800633a <HAL_UART_Transmit+0x11c>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006272:	f7fd ff53 	bl	800411c <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	88fa      	ldrh	r2, [r7, #6]
 8006282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628c:	d108      	bne.n	80062a0 <HAL_UART_Transmit+0x82>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	e003      	b.n	80062a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80062b0:	e02a      	b.n	8006308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	2200      	movs	r2, #0
 80062ba:	2180      	movs	r1, #128	; 0x80
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 fc53 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e036      	b.n	800633a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	3302      	adds	r3, #2
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	e007      	b.n	80062fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	3301      	adds	r3, #1
 80062f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1cf      	bne.n	80062b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2200      	movs	r2, #0
 800631a:	2140      	movs	r1, #64	; 0x40
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fc23 	bl	8006b68 <UART_WaitOnFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e006      	b.n	800633a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	e000      	b.n	800633a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006338:	2302      	movs	r3, #2
  }
}
 800633a:	4618      	mov	r0, r3
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b08c      	sub	sp, #48	; 0x30
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	4613      	mov	r3, r2
 800634e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b20      	cmp	r3, #32
 800635a:	d152      	bne.n	8006402 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e04b      	b.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006376:	2302      	movs	r3, #2
 8006378:	e044      	b.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	461a      	mov	r2, r3
 800638c:	68b9      	ldr	r1, [r7, #8]
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 fc58 	bl	8006c44 <UART_Start_Receive_DMA>
 8006394:	4603      	mov	r3, r0
 8006396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800639a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d12c      	bne.n	80063fc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d125      	bne.n	80063f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	617b      	str	r3, [r7, #20]
   return(result);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f043 0310 	orr.w	r3, r3, #16
 80063d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e0:	627a      	str	r2, [r7, #36]	; 0x24
 80063e2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6a39      	ldr	r1, [r7, #32]
 80063e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80063f4:	e002      	b.n	80063fc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80063fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006400:	e000      	b.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
  }
}
 8006404:	4618      	mov	r0, r3
 8006406:	3730      	adds	r7, #48	; 0x30
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b0ba      	sub	sp, #232	; 0xe8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006432:	2300      	movs	r3, #0
 8006434:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800643e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800644a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_UART_IRQHandler+0x66>
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fd8f 	bl	8006f8e <UART_Receive_IT>
      return;
 8006470:	e256      	b.n	8006920 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 80de 	beq.w	8006638 <HAL_UART_IRQHandler+0x22c>
 800647c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80d1 	beq.w	8006638 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00b      	beq.n	80064ba <HAL_UART_IRQHandler+0xae>
 80064a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f043 0201 	orr.w	r2, r3, #1
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <HAL_UART_IRQHandler+0xd2>
 80064c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f043 0202 	orr.w	r2, r3, #2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00b      	beq.n	8006502 <HAL_UART_IRQHandler+0xf6>
 80064ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d005      	beq.n	8006502 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f043 0204 	orr.w	r2, r3, #4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <HAL_UART_IRQHandler+0x126>
 800650e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d105      	bne.n	8006526 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800651a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f043 0208 	orr.w	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 81ed 	beq.w	8006916 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_UART_IRQHandler+0x14e>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fd1a 	bl	8006f8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b40      	cmp	r3, #64	; 0x40
 8006566:	bf0c      	ite	eq
 8006568:	2301      	moveq	r3, #1
 800656a:	2300      	movne	r3, #0
 800656c:	b2db      	uxtb	r3, r3
 800656e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <HAL_UART_IRQHandler+0x17a>
 800657e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006582:	2b00      	cmp	r3, #0
 8006584:	d04f      	beq.n	8006626 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fc22 	bl	8006dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d141      	bne.n	800661e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3314      	adds	r3, #20
 80065c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1d9      	bne.n	800659a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d013      	beq.n	8006616 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	4a7d      	ldr	r2, [pc, #500]	; (80067e8 <HAL_UART_IRQHandler+0x3dc>)
 80065f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f846 	bl	800468c <HAL_DMA_Abort_IT>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d016      	beq.n	8006634 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	e00e      	b.n	8006634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f9a4 	bl	8006964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661c:	e00a      	b.n	8006634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f9a0 	bl	8006964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	e006      	b.n	8006634 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f99c 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006632:	e170      	b.n	8006916 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006634:	bf00      	nop
    return;
 8006636:	e16e      	b.n	8006916 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	2b01      	cmp	r3, #1
 800663e:	f040 814a 	bne.w	80068d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8143 	beq.w	80068d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 813c 	beq.w	80068d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	f040 80b4 	bne.w	80067ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006690:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8140 	beq.w	800691a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800669e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066a2:	429a      	cmp	r2, r3
 80066a4:	f080 8139 	bcs.w	800691a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	f000 8088 	beq.w	80067ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	330c      	adds	r3, #12
 80066c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1d9      	bne.n	80066be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800671a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3314      	adds	r3, #20
 800672a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800672e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e1      	bne.n	800670a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3314      	adds	r3, #20
 800674c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006750:	e853 3f00 	ldrex	r3, [r3]
 8006754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800675c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800676a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800676c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006772:	e841 2300 	strex	r3, r2, [r1]
 8006776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e3      	bne.n	8006746 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800679c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800679e:	f023 0310 	bic.w	r3, r3, #16
 80067a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80067b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067b8:	e841 2300 	strex	r3, r2, [r1]
 80067bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1e3      	bne.n	800678c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fd feef 	bl	80045ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	b29b      	uxth	r3, r3
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fc fbe4 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e4:	e099      	b.n	800691a <HAL_UART_IRQHandler+0x50e>
 80067e6:	bf00      	nop
 80067e8:	08006e97 	.word	0x08006e97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 808b 	beq.w	800691e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006808:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8086 	beq.w	800691e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006828:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006836:	647a      	str	r2, [r7, #68]	; 0x44
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800683c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e3      	bne.n	8006812 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	623b      	str	r3, [r7, #32]
   return(result);
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3314      	adds	r3, #20
 800686a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800686e:	633a      	str	r2, [r7, #48]	; 0x30
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e3      	bne.n	800684a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f023 0310 	bic.w	r3, r3, #16
 80068a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	330c      	adds	r3, #12
 80068b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068b4:	61fa      	str	r2, [r7, #28]
 80068b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	69b9      	ldr	r1, [r7, #24]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	617b      	str	r3, [r7, #20]
   return(result);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e3      	bne.n	8006890 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068cc:	4619      	mov	r1, r3
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fc fb6c 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d4:	e023      	b.n	800691e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_UART_IRQHandler+0x4ea>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fae5 	bl	8006ebe <UART_Transmit_IT>
    return;
 80068f4:	e014      	b.n	8006920 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00e      	beq.n	8006920 <HAL_UART_IRQHandler+0x514>
 8006902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb25 	bl	8006f5e <UART_EndTransmit_IT>
    return;
 8006914:	e004      	b.n	8006920 <HAL_UART_IRQHandler+0x514>
    return;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <HAL_UART_IRQHandler+0x514>
      return;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_UART_IRQHandler+0x514>
      return;
 800691e:	bf00      	nop
  }
}
 8006920:	37e8      	adds	r7, #232	; 0xe8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop

08006928 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b09c      	sub	sp, #112	; 0x70
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d172      	bne.n	8006a7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	2200      	movs	r2, #0
 8006998:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800699a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	330c      	adds	r3, #12
 80069b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80069bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e5      	bne.n	800699a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3314      	adds	r3, #20
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	f023 0301 	bic.w	r3, r3, #1
 80069e4:	667b      	str	r3, [r7, #100]	; 0x64
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3314      	adds	r3, #20
 80069ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069ee:	647a      	str	r2, [r7, #68]	; 0x44
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f6:	e841 2300 	strex	r3, r2, [r1]
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1e5      	bne.n	80069ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3314      	adds	r3, #20
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	e853 3f00 	ldrex	r3, [r3]
 8006a10:	623b      	str	r3, [r7, #32]
   return(result);
 8006a12:	6a3b      	ldr	r3, [r7, #32]
 8006a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a18:	663b      	str	r3, [r7, #96]	; 0x60
 8006a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a22:	633a      	str	r2, [r7, #48]	; 0x30
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e5      	bne.n	8006a02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d119      	bne.n	8006a7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f023 0310 	bic.w	r3, r3, #16
 8006a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	330c      	adds	r3, #12
 8006a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a66:	61fa      	str	r2, [r7, #28]
 8006a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	69b9      	ldr	r1, [r7, #24]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	617b      	str	r3, [r7, #20]
   return(result);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d106      	bne.n	8006a90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a86:	4619      	mov	r1, r3
 8006a88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a8a:	f7fc fa8f 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a8e:	e002      	b.n	8006a96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006a90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a92:	f7ff ff53 	bl	800693c <HAL_UART_RxCpltCallback>
}
 8006a96:	bf00      	nop
 8006a98:	3770      	adds	r7, #112	; 0x70
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d108      	bne.n	8006ac6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	4619      	mov	r1, r3
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f7fc fa74 	bl	8002fac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ac4:	e002      	b.n	8006acc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff ff42 	bl	8006950 <HAL_UART_RxHalfCpltCallback>
}
 8006acc:	bf00      	nop
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af0:	2b80      	cmp	r3, #128	; 0x80
 8006af2:	bf0c      	ite	eq
 8006af4:	2301      	moveq	r3, #1
 8006af6:	2300      	movne	r3, #0
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b21      	cmp	r3, #33	; 0x21
 8006b06:	d108      	bne.n	8006b1a <UART_DMAError+0x46>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2200      	movs	r2, #0
 8006b12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006b14:	68b8      	ldr	r0, [r7, #8]
 8006b16:	f000 f933 	bl	8006d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b22      	cmp	r3, #34	; 0x22
 8006b3a:	d108      	bne.n	8006b4e <UART_DMAError+0x7a>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006b48:	68b8      	ldr	r0, [r7, #8]
 8006b4a:	f000 f941 	bl	8006dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	f043 0210 	orr.w	r2, r3, #16
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b5a:	68b8      	ldr	r0, [r7, #8]
 8006b5c:	f7ff ff02 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b60:	bf00      	nop
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b090      	sub	sp, #64	; 0x40
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b78:	e050      	b.n	8006c1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d04c      	beq.n	8006c1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b88:	f7fd fac8 	bl	800411c <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d241      	bcs.n	8006c1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8006bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	613b      	str	r3, [r7, #16]
   return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bec:	623a      	str	r2, [r7, #32]
 8006bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69f9      	ldr	r1, [r7, #28]
 8006bf2:	6a3a      	ldr	r2, [r7, #32]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e5      	bne.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e00f      	b.n	8006c3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4013      	ands	r3, r2
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2301      	moveq	r3, #1
 8006c2e:	2300      	movne	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d09f      	beq.n	8006b7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3740      	adds	r7, #64	; 0x40
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b098      	sub	sp, #96	; 0x60
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2222      	movs	r2, #34	; 0x22
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <UART_Start_Receive_DMA+0x130>)
 8006c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <UART_Start_Receive_DMA+0x134>)
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	4a3e      	ldr	r2, [pc, #248]	; (8006d7c <UART_Start_Receive_DMA+0x138>)
 8006c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	2200      	movs	r2, #0
 8006c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c8c:	f107 0308 	add.w	r3, r7, #8
 8006c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	f7fd fc2a 	bl	80044fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	613b      	str	r3, [r7, #16]
 8006cbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d019      	beq.n	8006d02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e5      	bne.n	8006cce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	657b      	str	r3, [r7, #84]	; 0x54
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3314      	adds	r3, #20
 8006d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d22:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1e5      	bne.n	8006d02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3314      	adds	r3, #20
 8006d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	e853 3f00 	ldrex	r3, [r3]
 8006d44:	617b      	str	r3, [r7, #20]
   return(result);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3314      	adds	r3, #20
 8006d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d56:	627a      	str	r2, [r7, #36]	; 0x24
 8006d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5a:	6a39      	ldr	r1, [r7, #32]
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1e5      	bne.n	8006d36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3760      	adds	r7, #96	; 0x60
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	08006979 	.word	0x08006979
 8006d78:	08006a9f 	.word	0x08006a9f
 8006d7c:	08006ad5 	.word	0x08006ad5

08006d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	; 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	330c      	adds	r3, #12
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	61ba      	str	r2, [r7, #24]
 8006daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6979      	ldr	r1, [r7, #20]
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	613b      	str	r3, [r7, #16]
   return(result);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006dc4:	bf00      	nop
 8006dc6:	3724      	adds	r7, #36	; 0x24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b095      	sub	sp, #84	; 0x54
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df8:	643a      	str	r2, [r7, #64]	; 0x40
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3314      	adds	r3, #20
 8006e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3314      	adds	r3, #20
 8006e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e5      	bne.n	8006e0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d119      	bne.n	8006e7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0310 	bic.w	r3, r3, #16
 8006e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	330c      	adds	r3, #12
 8006e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e68:	61ba      	str	r2, [r7, #24]
 8006e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6979      	ldr	r1, [r7, #20]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	613b      	str	r3, [r7, #16]
   return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e5      	bne.n	8006e48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e8a:	bf00      	nop
 8006e8c:	3754      	adds	r7, #84	; 0x54
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fd57 	bl	8006964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b21      	cmp	r3, #33	; 0x21
 8006ed0:	d13e      	bne.n	8006f50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eda:	d114      	bne.n	8006f06 <UART_Transmit_IT+0x48>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d110      	bne.n	8006f06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	621a      	str	r2, [r3, #32]
 8006f04:	e008      	b.n	8006f18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	6211      	str	r1, [r2, #32]
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10f      	bne.n	8006f4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e000      	b.n	8006f52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f50:	2302      	movs	r3, #2
  }
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff fcd2 	bl	8006928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b08c      	sub	sp, #48	; 0x30
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b22      	cmp	r3, #34	; 0x22
 8006fa0:	f040 80ab 	bne.w	80070fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fac:	d117      	bne.n	8006fde <UART_Receive_IT+0x50>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d113      	bne.n	8006fde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28
 8006fdc:	e026      	b.n	800702c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff0:	d007      	beq.n	8007002 <UART_Receive_IT+0x74>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <UART_Receive_IT+0x82>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e008      	b.n	8007022 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800701c:	b2da      	uxtb	r2, r3
 800701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007020:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29b      	uxth	r3, r3
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	4619      	mov	r1, r3
 800703a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800703c:	2b00      	cmp	r3, #0
 800703e:	d15a      	bne.n	80070f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0220 	bic.w	r2, r2, #32
 800704e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695a      	ldr	r2, [r3, #20]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	2b01      	cmp	r3, #1
 800707e:	d135      	bne.n	80070ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	613b      	str	r3, [r7, #16]
   return(result);
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f023 0310 	bic.w	r3, r3, #16
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	623a      	str	r2, [r7, #32]
 80070a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	69f9      	ldr	r1, [r7, #28]
 80070ac:	6a3a      	ldr	r2, [r7, #32]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d10a      	bne.n	80070de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7fb ff61 	bl	8002fac <HAL_UARTEx_RxEventCallback>
 80070ea:	e002      	b.n	80070f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fc25 	bl	800693c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e002      	b.n	80070fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3730      	adds	r7, #48	; 0x30
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007108:	b0c0      	sub	sp, #256	; 0x100
 800710a:	af00      	add	r7, sp, #0
 800710c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800711c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007120:	68d9      	ldr	r1, [r3, #12]
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	ea40 0301 	orr.w	r3, r0, r1
 800712c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	431a      	orrs	r2, r3
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	431a      	orrs	r2, r3
 8007144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800715c:	f021 010c 	bic.w	r1, r1, #12
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800716a:	430b      	orrs	r3, r1
 800716c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717e:	6999      	ldr	r1, [r3, #24]
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	ea40 0301 	orr.w	r3, r0, r1
 800718a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800718c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b8f      	ldr	r3, [pc, #572]	; (80073d0 <UART_SetConfig+0x2cc>)
 8007194:	429a      	cmp	r2, r3
 8007196:	d005      	beq.n	80071a4 <UART_SetConfig+0xa0>
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	4b8d      	ldr	r3, [pc, #564]	; (80073d4 <UART_SetConfig+0x2d0>)
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d104      	bne.n	80071ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a4:	f7fe fb10 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
 80071a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071ac:	e003      	b.n	80071b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ae:	f7fe faf7 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 80071b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c0:	f040 810c 	bne.w	80073dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	1891      	adds	r1, r2, r2
 80071dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071de:	415b      	adcs	r3, r3
 80071e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e6:	4621      	mov	r1, r4
 80071e8:	eb12 0801 	adds.w	r8, r2, r1
 80071ec:	4629      	mov	r1, r5
 80071ee:	eb43 0901 	adc.w	r9, r3, r1
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007206:	4690      	mov	r8, r2
 8007208:	4699      	mov	r9, r3
 800720a:	4623      	mov	r3, r4
 800720c:	eb18 0303 	adds.w	r3, r8, r3
 8007210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007214:	462b      	mov	r3, r5
 8007216:	eb49 0303 	adc.w	r3, r9, r3
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800722a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007232:	460b      	mov	r3, r1
 8007234:	18db      	adds	r3, r3, r3
 8007236:	653b      	str	r3, [r7, #80]	; 0x50
 8007238:	4613      	mov	r3, r2
 800723a:	eb42 0303 	adc.w	r3, r2, r3
 800723e:	657b      	str	r3, [r7, #84]	; 0x54
 8007240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007248:	f7f9 fcae 	bl	8000ba8 <__aeabi_uldivmod>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4b61      	ldr	r3, [pc, #388]	; (80073d8 <UART_SetConfig+0x2d4>)
 8007252:	fba3 2302 	umull	r2, r3, r3, r2
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	011c      	lsls	r4, r3, #4
 800725a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800726c:	4642      	mov	r2, r8
 800726e:	464b      	mov	r3, r9
 8007270:	1891      	adds	r1, r2, r2
 8007272:	64b9      	str	r1, [r7, #72]	; 0x48
 8007274:	415b      	adcs	r3, r3
 8007276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800727c:	4641      	mov	r1, r8
 800727e:	eb12 0a01 	adds.w	sl, r2, r1
 8007282:	4649      	mov	r1, r9
 8007284:	eb43 0b01 	adc.w	fp, r3, r1
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800729c:	4692      	mov	sl, r2
 800729e:	469b      	mov	fp, r3
 80072a0:	4643      	mov	r3, r8
 80072a2:	eb1a 0303 	adds.w	r3, sl, r3
 80072a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072aa:	464b      	mov	r3, r9
 80072ac:	eb4b 0303 	adc.w	r3, fp, r3
 80072b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c8:	460b      	mov	r3, r1
 80072ca:	18db      	adds	r3, r3, r3
 80072cc:	643b      	str	r3, [r7, #64]	; 0x40
 80072ce:	4613      	mov	r3, r2
 80072d0:	eb42 0303 	adc.w	r3, r2, r3
 80072d4:	647b      	str	r3, [r7, #68]	; 0x44
 80072d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072de:	f7f9 fc63 	bl	8000ba8 <__aeabi_uldivmod>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	4b3b      	ldr	r3, [pc, #236]	; (80073d8 <UART_SetConfig+0x2d4>)
 80072ea:	fba3 2301 	umull	r2, r3, r3, r1
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	2264      	movs	r2, #100	; 0x64
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	1acb      	subs	r3, r1, r3
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fe:	4b36      	ldr	r3, [pc, #216]	; (80073d8 <UART_SetConfig+0x2d4>)
 8007300:	fba3 2302 	umull	r2, r3, r3, r2
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800730c:	441c      	add	r4, r3
 800730e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007312:	2200      	movs	r2, #0
 8007314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800731c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007320:	4642      	mov	r2, r8
 8007322:	464b      	mov	r3, r9
 8007324:	1891      	adds	r1, r2, r2
 8007326:	63b9      	str	r1, [r7, #56]	; 0x38
 8007328:	415b      	adcs	r3, r3
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007330:	4641      	mov	r1, r8
 8007332:	1851      	adds	r1, r2, r1
 8007334:	6339      	str	r1, [r7, #48]	; 0x30
 8007336:	4649      	mov	r1, r9
 8007338:	414b      	adcs	r3, r1
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007348:	4659      	mov	r1, fp
 800734a:	00cb      	lsls	r3, r1, #3
 800734c:	4651      	mov	r1, sl
 800734e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007352:	4651      	mov	r1, sl
 8007354:	00ca      	lsls	r2, r1, #3
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	4603      	mov	r3, r0
 800735c:	4642      	mov	r2, r8
 800735e:	189b      	adds	r3, r3, r2
 8007360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007364:	464b      	mov	r3, r9
 8007366:	460a      	mov	r2, r1
 8007368:	eb42 0303 	adc.w	r3, r2, r3
 800736c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800737c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007384:	460b      	mov	r3, r1
 8007386:	18db      	adds	r3, r3, r3
 8007388:	62bb      	str	r3, [r7, #40]	; 0x28
 800738a:	4613      	mov	r3, r2
 800738c:	eb42 0303 	adc.w	r3, r2, r3
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800739a:	f7f9 fc05 	bl	8000ba8 <__aeabi_uldivmod>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <UART_SetConfig+0x2d4>)
 80073a4:	fba3 1302 	umull	r1, r3, r3, r2
 80073a8:	095b      	lsrs	r3, r3, #5
 80073aa:	2164      	movs	r1, #100	; 0x64
 80073ac:	fb01 f303 	mul.w	r3, r1, r3
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	3332      	adds	r3, #50	; 0x32
 80073b6:	4a08      	ldr	r2, [pc, #32]	; (80073d8 <UART_SetConfig+0x2d4>)
 80073b8:	fba2 2303 	umull	r2, r3, r2, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	f003 0207 	and.w	r2, r3, #7
 80073c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4422      	add	r2, r4
 80073ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073cc:	e106      	b.n	80075dc <UART_SetConfig+0x4d8>
 80073ce:	bf00      	nop
 80073d0:	40011000 	.word	0x40011000
 80073d4:	40011400 	.word	0x40011400
 80073d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ee:	4642      	mov	r2, r8
 80073f0:	464b      	mov	r3, r9
 80073f2:	1891      	adds	r1, r2, r2
 80073f4:	6239      	str	r1, [r7, #32]
 80073f6:	415b      	adcs	r3, r3
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
 80073fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fe:	4641      	mov	r1, r8
 8007400:	1854      	adds	r4, r2, r1
 8007402:	4649      	mov	r1, r9
 8007404:	eb43 0501 	adc.w	r5, r3, r1
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	00eb      	lsls	r3, r5, #3
 8007412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007416:	00e2      	lsls	r2, r4, #3
 8007418:	4614      	mov	r4, r2
 800741a:	461d      	mov	r5, r3
 800741c:	4643      	mov	r3, r8
 800741e:	18e3      	adds	r3, r4, r3
 8007420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007424:	464b      	mov	r3, r9
 8007426:	eb45 0303 	adc.w	r3, r5, r3
 800742a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800743a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800744a:	4629      	mov	r1, r5
 800744c:	008b      	lsls	r3, r1, #2
 800744e:	4621      	mov	r1, r4
 8007450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007454:	4621      	mov	r1, r4
 8007456:	008a      	lsls	r2, r1, #2
 8007458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800745c:	f7f9 fba4 	bl	8000ba8 <__aeabi_uldivmod>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4b60      	ldr	r3, [pc, #384]	; (80075e8 <UART_SetConfig+0x4e4>)
 8007466:	fba3 2302 	umull	r2, r3, r3, r2
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	011c      	lsls	r4, r3, #4
 800746e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007472:	2200      	movs	r2, #0
 8007474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800747c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	1891      	adds	r1, r2, r2
 8007486:	61b9      	str	r1, [r7, #24]
 8007488:	415b      	adcs	r3, r3
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007490:	4641      	mov	r1, r8
 8007492:	1851      	adds	r1, r2, r1
 8007494:	6139      	str	r1, [r7, #16]
 8007496:	4649      	mov	r1, r9
 8007498:	414b      	adcs	r3, r1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a8:	4659      	mov	r1, fp
 80074aa:	00cb      	lsls	r3, r1, #3
 80074ac:	4651      	mov	r1, sl
 80074ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b2:	4651      	mov	r1, sl
 80074b4:	00ca      	lsls	r2, r1, #3
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	4642      	mov	r2, r8
 80074be:	189b      	adds	r3, r3, r2
 80074c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c4:	464b      	mov	r3, r9
 80074c6:	460a      	mov	r2, r1
 80074c8:	eb42 0303 	adc.w	r3, r2, r3
 80074cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e8:	4649      	mov	r1, r9
 80074ea:	008b      	lsls	r3, r1, #2
 80074ec:	4641      	mov	r1, r8
 80074ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f2:	4641      	mov	r1, r8
 80074f4:	008a      	lsls	r2, r1, #2
 80074f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074fa:	f7f9 fb55 	bl	8000ba8 <__aeabi_uldivmod>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	4611      	mov	r1, r2
 8007504:	4b38      	ldr	r3, [pc, #224]	; (80075e8 <UART_SetConfig+0x4e4>)
 8007506:	fba3 2301 	umull	r2, r3, r3, r1
 800750a:	095b      	lsrs	r3, r3, #5
 800750c:	2264      	movs	r2, #100	; 0x64
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	1acb      	subs	r3, r1, r3
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	3332      	adds	r3, #50	; 0x32
 8007518:	4a33      	ldr	r2, [pc, #204]	; (80075e8 <UART_SetConfig+0x4e4>)
 800751a:	fba2 2303 	umull	r2, r3, r2, r3
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007524:	441c      	add	r4, r3
 8007526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800752a:	2200      	movs	r2, #0
 800752c:	673b      	str	r3, [r7, #112]	; 0x70
 800752e:	677a      	str	r2, [r7, #116]	; 0x74
 8007530:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007534:	4642      	mov	r2, r8
 8007536:	464b      	mov	r3, r9
 8007538:	1891      	adds	r1, r2, r2
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	415b      	adcs	r3, r3
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007544:	4641      	mov	r1, r8
 8007546:	1851      	adds	r1, r2, r1
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	4649      	mov	r1, r9
 800754c:	414b      	adcs	r3, r1
 800754e:	607b      	str	r3, [r7, #4]
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800755c:	4659      	mov	r1, fp
 800755e:	00cb      	lsls	r3, r1, #3
 8007560:	4651      	mov	r1, sl
 8007562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007566:	4651      	mov	r1, sl
 8007568:	00ca      	lsls	r2, r1, #3
 800756a:	4610      	mov	r0, r2
 800756c:	4619      	mov	r1, r3
 800756e:	4603      	mov	r3, r0
 8007570:	4642      	mov	r2, r8
 8007572:	189b      	adds	r3, r3, r2
 8007574:	66bb      	str	r3, [r7, #104]	; 0x68
 8007576:	464b      	mov	r3, r9
 8007578:	460a      	mov	r2, r1
 800757a:	eb42 0303 	adc.w	r3, r2, r3
 800757e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	663b      	str	r3, [r7, #96]	; 0x60
 800758a:	667a      	str	r2, [r7, #100]	; 0x64
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007598:	4649      	mov	r1, r9
 800759a:	008b      	lsls	r3, r1, #2
 800759c:	4641      	mov	r1, r8
 800759e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a2:	4641      	mov	r1, r8
 80075a4:	008a      	lsls	r2, r1, #2
 80075a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075aa:	f7f9 fafd 	bl	8000ba8 <__aeabi_uldivmod>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <UART_SetConfig+0x4e4>)
 80075b4:	fba3 1302 	umull	r1, r3, r3, r2
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	2164      	movs	r1, #100	; 0x64
 80075bc:	fb01 f303 	mul.w	r3, r1, r3
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	3332      	adds	r3, #50	; 0x32
 80075c6:	4a08      	ldr	r2, [pc, #32]	; (80075e8 <UART_SetConfig+0x4e4>)
 80075c8:	fba2 2303 	umull	r2, r3, r2, r3
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f003 020f 	and.w	r2, r3, #15
 80075d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4422      	add	r2, r4
 80075da:	609a      	str	r2, [r3, #8]
}
 80075dc:	bf00      	nop
 80075de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075e2:	46bd      	mov	sp, r7
 80075e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e8:	51eb851f 	.word	0x51eb851f

080075ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80075f0:	4904      	ldr	r1, [pc, #16]	; (8007604 <MX_FATFS_Init+0x18>)
 80075f2:	4805      	ldr	r0, [pc, #20]	; (8007608 <MX_FATFS_Init+0x1c>)
 80075f4:	f000 f8b0 	bl	8007758 <FATFS_LinkDriver>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	4b03      	ldr	r3, [pc, #12]	; (800760c <MX_FATFS_Init+0x20>)
 80075fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007600:	bf00      	nop
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000ccc 	.word	0x20000ccc
 8007608:	2000000c 	.word	0x2000000c
 800760c:	20000cc8 	.word	0x20000cc8

08007610 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <USER_initialize+0x24>)
 800761c:	2201      	movs	r2, #1
 800761e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007620:	4b04      	ldr	r3, [pc, #16]	; (8007634 <USER_initialize+0x24>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000009 	.word	0x20000009

08007638 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <USER_status+0x24>)
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <USER_status+0x24>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000009 	.word	0x20000009

08007660 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007670:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800767e:	b480      	push	{r7}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800768e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	603a      	str	r2, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
 80076a8:	460b      	mov	r3, r1
 80076aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	73fb      	strb	r3, [r7, #15]
    return res;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80076d6:	4b1f      	ldr	r3, [pc, #124]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 80076d8:	7a5b      	ldrb	r3, [r3, #9]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d131      	bne.n	8007744 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80076e0:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 80076e2:	7a5b      	ldrb	r3, [r3, #9]
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	461a      	mov	r2, r3
 80076e8:	4b1a      	ldr	r3, [pc, #104]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 80076ea:	2100      	movs	r1, #0
 80076ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80076ee:	4b19      	ldr	r3, [pc, #100]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 80076f0:	7a5b      	ldrb	r3, [r3, #9]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	4a17      	ldr	r2, [pc, #92]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80076fe:	4b15      	ldr	r3, [pc, #84]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 8007700:	7a5b      	ldrb	r3, [r3, #9]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 8007708:	4413      	add	r3, r2
 800770a:	79fa      	ldrb	r2, [r7, #7]
 800770c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 8007710:	7a5b      	ldrb	r3, [r3, #9]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	b2d1      	uxtb	r1, r2
 8007718:	4a0e      	ldr	r2, [pc, #56]	; (8007754 <FATFS_LinkDriverEx+0x94>)
 800771a:	7251      	strb	r1, [r2, #9]
 800771c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800771e:	7dbb      	ldrb	r3, [r7, #22]
 8007720:	3330      	adds	r3, #48	; 0x30
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3301      	adds	r3, #1
 800772c:	223a      	movs	r2, #58	; 0x3a
 800772e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3302      	adds	r3, #2
 8007734:	222f      	movs	r2, #47	; 0x2f
 8007736:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	3303      	adds	r3, #3
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007744:	7dfb      	ldrb	r3, [r7, #23]
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20000cd0 	.word	0x20000cd0

08007758 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007762:	2200      	movs	r2, #0
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ffaa 	bl	80076c0 <FATFS_LinkDriverEx>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <HTTP_init>:
 * @param URIType [out] URI
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef HTTP_init(SIM_HTTPTypeDef *const me, const char *pURL,
		uint8_t URLSize, uint8_t URIType)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	460b      	mov	r3, r1
 8007788:	71fb      	strb	r3, [r7, #7]
 800778a:	4613      	mov	r3, r2
 800778c:	71bb      	strb	r3, [r7, #6]
	if (me == NULL || pURL == NULL)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HTTP_init+0x22>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HTTP_init+0x26>
	{
		return THT_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e01f      	b.n	80077de <HTTP_init+0x66>
	}
	(void) URIType;

	memset(me->url, '\0', sizeof(me->url));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	22c8      	movs	r2, #200	; 0xc8
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 f996 	bl	8008ad8 <memset>
	memset(me->type, '\0', sizeof(me->type));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	33c9      	adds	r3, #201	; 0xc9
 80077b0:	2214      	movs	r2, #20
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 f98f 	bl	8008ad8 <memset>
	snprintf(me->url, sizeof(me->url), "%s", pURL);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1c58      	adds	r0, r3, #1
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4a09      	ldr	r2, [pc, #36]	; (80077e8 <HTTP_init+0x70>)
 80077c2:	21c8      	movs	r1, #200	; 0xc8
 80077c4:	f001 f85c 	bl	8008880 <sniprintf>
	memcpy(me->type, HTTP_CONTENT_TYPE, strlen(HTTP_CONTENT_TYPE));
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	33c9      	adds	r3, #201	; 0xc9
 80077cc:	2210      	movs	r2, #16
 80077ce:	4907      	ldr	r1, [pc, #28]	; (80077ec <HTTP_init+0x74>)
 80077d0:	4618      	mov	r0, r3
 80077d2:	f001 fa24 	bl	8008c1e <memcpy>
	me->method = SIM_HTTP_POST;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]

	return THT_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	0800b308 	.word	0x0800b308
 80077ec:	0800b30c 	.word	0x0800b30c

080077f0 <HTTP_sendCurrentData>:


THT_StatusTypeDef HTTP_sendCurrentData(SIM_HTTPTypeDef *const me)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b0c2      	sub	sp, #264	; 0x108
 80077f4:	af04      	add	r7, sp, #16
 80077f6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HTTP_sendCurrentData+0x12>
	{
		return THT_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e07b      	b.n	80078fa <HTTP_sendCurrentData+0x10a>
	}
	printf("%s\n", __FUNCTION__);
 8007802:	4840      	ldr	r0, [pc, #256]	; (8007904 <HTTP_sendCurrentData+0x114>)
 8007804:	f001 f834 	bl	8008870 <puts>
	//char valuestring[60] = { 0 };



	/* Get sim data and enable send HTTP immediately */
	SIM_DataTypeDef simData = { 0 };
 8007808:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800780c:	2248      	movs	r2, #72	; 0x48
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f961 	bl	8008ad8 <memset>

	SIM_getData(simPtr, SIM_DR_RSSI | SIM_DR_NWTYPE | SIM_DR_IMEI, &simData);
 8007816:	4b3c      	ldr	r3, [pc, #240]	; (8007908 <HTTP_sendCurrentData+0x118>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800781e:	210b      	movs	r1, #11
 8007820:	4618      	mov	r0, r3
 8007822:	f000 f87f 	bl	8007924 <SIM_getData>

	/* Get time period string */
	const char *pURL ;
	HTTP_init(me, pURL, strlen(pURL), HTTP_URL_URI_RESULT);
 8007826:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800782a:	f7f8 fd21 	bl	8000270 <strlen>
 800782e:	4603      	mov	r3, r0
 8007830:	b2da      	uxtb	r2, r3
 8007832:	2301      	movs	r3, #1
 8007834:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff ff9d 	bl	8007778 <HTTP_init>

	/*-------------Send HTTP--------------*/
	memset(me->data, '\0', SIM_HTTP_DATA_SIZE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	33dd      	adds	r3, #221	; 0xdd
 8007842:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f001 f945 	bl	8008ad8 <memset>
	snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f103 00dd 	add.w	r0, r3, #221	; 0xdd
			"\"%s\":%d,"
			"\"%s\":%d,"
			"\"%s\":\"%s\""
			"}}\n",

	HTTP_JSON_KEY_SIGS, simData.rssi,
 8007854:	f9b7 30f0 	ldrsh.w	r3, [r7, #240]	; 0xf0
	snprintf(me->data, SIM_HTTP_DATA_SIZE, "{\"%s\":{"
 8007858:	461a      	mov	r2, r3
 800785a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800785e:	3333      	adds	r3, #51	; 0x33
 8007860:	9302      	str	r3, [sp, #8]
 8007862:	4b2a      	ldr	r3, [pc, #168]	; (800790c <HTTP_sendCurrentData+0x11c>)
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	9200      	str	r2, [sp, #0]
 8007868:	4b29      	ldr	r3, [pc, #164]	; (8007910 <HTTP_sendCurrentData+0x120>)
 800786a:	4a2a      	ldr	r2, [pc, #168]	; (8007914 <HTTP_sendCurrentData+0x124>)
 800786c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007870:	f001 f806 	bl	8008880 <sniprintf>

	//SDCARD_logData(sdcardPtr, sdcardPtr->currentFile, me->data,
			//strlen(me->data));

	/* Hạn chế gửi fail thì cho gửi thêm 1 lần nữa */
	if (THT_OK != SIM_sendHTTP(simPtr, me))
 8007874:	4b24      	ldr	r3, [pc, #144]	; (8007908 <HTTP_sendCurrentData+0x118>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f924 	bl	8007ac8 <SIM_sendHTTP>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d038      	beq.n	80078f8 <HTTP_sendCurrentData+0x108>
	{
		if (strlen(me->data) > 160)    //Dữ liệu dài hơn 160 ký tự mới lưu lại, để phòng dữ liệu sai
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	33dd      	adds	r3, #221	; 0xdd
 800788a:	4618      	mov	r0, r3
 800788c:	f7f8 fcf0 	bl	8000270 <strlen>
					//strlen(me->data));
		}

		static uint16_t sendFailedPacketCounter = 0;

		sendFailedPacketCounter++;
 8007890:	4b21      	ldr	r3, [pc, #132]	; (8007918 <HTTP_sendCurrentData+0x128>)
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <HTTP_sendCurrentData+0x128>)
 800789a:	801a      	strh	r2, [r3, #0]

		char reply[SIM_SMS_SIZE] = { 0 };
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	f107 0310 	add.w	r3, r7, #16
 80078a4:	229c      	movs	r2, #156	; 0x9c
 80078a6:	2100      	movs	r1, #0
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f915 	bl	8008ad8 <memset>

		snprintf(reply, sizeof(reply), "%s:%s:%s,%s:%s,%s:%s,%s:%s");
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	4a1a      	ldr	r2, [pc, #104]	; (800791c <HTTP_sendCurrentData+0x12c>)
 80078b4:	21a0      	movs	r1, #160	; 0xa0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 ffe2 	bl	8008880 <sniprintf>

		/* Send message to telegram */
		if (sendFailedPacketCounter >= 2u)
 80078bc:	4b16      	ldr	r3, [pc, #88]	; (8007918 <HTTP_sendCurrentData+0x128>)
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d919      	bls.n	80078f8 <HTTP_sendCurrentData+0x108>
		{
			printf("Reset module SIM: send packet fail!\n");
 80078c4:	4816      	ldr	r0, [pc, #88]	; (8007920 <HTTP_sendCurrentData+0x130>)
 80078c6:	f000 ffd3 	bl	8008870 <puts>
			SIM_init(simPtr);
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <HTTP_sendCurrentData+0x118>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f88c 	bl	80079ec <SIM_init>
			SIM_setFunction(simPtr, SIM_MODE_FULL);
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <HTTP_sendCurrentData+0x118>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f899 	bl	8007a12 <SIM_setFunction>
			SIM_setLocalTimeAuto(simPtr);
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HTTP_sendCurrentData+0x118>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f8db 	bl	8007aa0 <SIM_setLocalTimeAuto>
			memset(reply, '\0', SIM_SMS_SIZE);
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	22a0      	movs	r2, #160	; 0xa0
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 f8f0 	bl	8008ad8 <memset>
		}
	}


	return THT_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	37f8      	adds	r7, #248	; 0xf8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	0800b604 	.word	0x0800b604
 8007908:	200004d8 	.word	0x200004d8
 800790c:	0800b388 	.word	0x0800b388
 8007910:	0800b320 	.word	0x0800b320
 8007914:	0800b328 	.word	0x0800b328
 8007918:	20000cdc 	.word	0x20000cdc
 800791c:	0800b390 	.word	0x0800b390
 8007920:	0800b3ac 	.word	0x0800b3ac

08007924 <SIM_getData>:
 * 				@arg SIM_DR_IMEI
 * 				@arg SIM_DR_TIME
 * @param [out] pData a pointer to SIM data structure
 */
THT_StatusTypeDef SIM_getData(SIM_HandleTypeDef *const me, uint32_t data, SIM_DataTypeDef *pData)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
	if (me == NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <SIM_getData+0x16>
	{
		return THT_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e054      	b.n	80079e4 <SIM_getData+0xc0>
	}

	if ((data & SIM_DR_RSSI) == SIM_DR_RSSI)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <SIM_getData+0x34>
	{
		pData->rssi = (*me->simGetRSSI)(me);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	4798      	blx	r3
 800794e:	4603      	mov	r3, r0
 8007950:	b21a      	sxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	}
	if ((data & SIM_DR_NWTYPE) == SIM_DR_NWTYPE)
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <SIM_getData+0x50>
	{
		(*me->simGetNwtype)(me, pData->network, sizeof(pData->network));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	f102 0133 	add.w	r1, r2, #51	; 0x33
 800796e:	2210      	movs	r2, #16
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
	}
	if ((data & SIM_DR_SIMPHONE) == SIM_DR_SIMPHONE)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d006      	beq.n	800798c <SIM_getData+0x68>
	{
		(*me->simGetSimPhone)(me, pData->simPhone, sizeof(pData->simPhone));
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8007984:	6879      	ldr	r1, [r7, #4]
 8007986:	220d      	movs	r2, #13
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	4798      	blx	r3
	}
	if ((data & SIM_DR_IMEI) == SIM_DR_IMEI)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d008      	beq.n	80079a8 <SIM_getData+0x84>
	{
		(*me->simGetIMEI)(me, pData->imei, sizeof(pData->imei));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	f102 0123 	add.w	r1, r2, #35	; 0x23
 80079a2:	2210      	movs	r2, #16
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	4798      	blx	r3
	}
	if ((data & SIM_DR_TIME) == SIM_DR_TIME)
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	f003 0310 	and.w	r3, r3, #16
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d008      	beq.n	80079c4 <SIM_getData+0xa0>
	{
		(*me->simGetLocalTime)(me, pData->timezone, sizeof(pData->timezone));
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	f102 010d 	add.w	r1, r2, #13
 80079be:	2216      	movs	r2, #22
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
	}
	if ((data & SIM_DR_TEMP) == SIM_DR_TEMP)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <SIM_getData+0xbe>
	{
		pData->temp = (*me->simGetTemperature)(me);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	4798      	blx	r3
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	}
	return THT_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <SIM_init>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_init(SIM_HandleTypeDef *const me)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <SIM_init+0x12>
	{
		return THT_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e005      	b.n	8007a0a <SIM_init+0x1e>
	}

	return (*me->simInit)(me);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	4798      	blx	r3
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <SIM_setFunction>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param mode
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setFunction(SIM_HandleTypeDef *const me, uint8_t mode)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
	if (me == NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <SIM_setFunction+0x16>
	{
		return THT_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e007      	b.n	8007a38 <SIM_setFunction+0x26>
	}

	return (*me->simSetFunction)(me, mode);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	4798      	blx	r3
 8007a36:	4603      	mov	r3, r0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <SIM_checkEvent>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param size
 */
void SIM_checkEvent(SIM_HandleTypeDef *const me, uint16_t size)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
	if (me == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d007      	beq.n	8007a62 <SIM_checkEvent+0x22>
	{
		return;
	}

	(*me->simCheckEvent)(me, size);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8007a58:	887a      	ldrh	r2, [r7, #2]
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	4798      	blx	r3
 8007a60:	e000      	b.n	8007a64 <SIM_checkEvent+0x24>
		return;
 8007a62:	bf00      	nop
}
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <SIM_getLocalTime>:
 * @param pTime
 * @param size
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_getLocalTime(SIM_HandleTypeDef *const me, char pTime[], uint8_t size)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	4613      	mov	r3, r2
 8007a76:	71fb      	strb	r3, [r7, #7]
	if (me == NULL || pTime == NULL)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <SIM_getLocalTime+0x1a>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <SIM_getLocalTime+0x1e>
	{
		return THT_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e007      	b.n	8007a98 <SIM_getLocalTime+0x2e>
	}

	return (*me->simGetLocalTime)(me, pTime, size);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007a8e:	79fa      	ldrb	r2, [r7, #7]
 8007a90:	68b9      	ldr	r1, [r7, #8]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SIM_setLocalTimeAuto>:
 *
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_setLocalTimeAuto(SIM_HandleTypeDef *const me)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	if (me == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <SIM_setLocalTimeAuto+0x12>
	{
		return THT_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e005      	b.n	8007abe <SIM_setLocalTimeAuto+0x1e>
	}

	return (*me->simSetLocalTimeAuto)(me);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <SIM_sendHTTP>:
 * @param me [in] A pointer to SIM_HandleTypeDef structure
 * @param pHTTP
 * @return THT_StatusTypeDef
 */
THT_StatusTypeDef SIM_sendHTTP(SIM_HandleTypeDef *const me, SIM_HTTPTypeDef *pHTTP)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af02      	add	r7, sp, #8
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	if (me == NULL || pHTTP == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <SIM_sendHTTP+0x16>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <SIM_sendHTTP+0x1a>
	{
		return THT_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e029      	b.n	8007b36 <SIM_sendHTTP+0x6e>

	printf("HTTP request information:\n"
			"URL: %s\n"
			"Content Type: %s\n"
			"Method: %u\n"
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	1c59      	adds	r1, r3, #1
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	f103 02c9 	add.w	r2, r3, #201	; 0xc9
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
	printf("HTTP request information:\n"
 8007af0:	4618      	mov	r0, r3
			"Data: %s\n\n", pHTTP->url, pHTTP->type, pHTTP->method, pHTTP->data);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	33dd      	adds	r3, #221	; 0xdd
	printf("HTTP request information:\n"
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4603      	mov	r3, r0
 8007afa:	4811      	ldr	r0, [pc, #68]	; (8007b40 <SIM_sendHTTP+0x78>)
 8007afc:	f000 fe4a 	bl	8008794 <iprintf>

	THT_StatusTypeDef res = (*me->simSendHTTP)(me, pHTTP);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	73fb      	strb	r3, [r7, #15]

	printf("HTTP response information \n"
			"ErrorCode: %d\n"
			"Length: %lu\n"
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f8b3 34c6 	ldrh.w	r3, [r3, #1222]	; 0x4c6
	printf("HTTP response information \n"
 8007b16:	4619      	mov	r1, r3
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f8d3 24c8 	ldr.w	r2, [r3, #1224]	; 0x4c8
			"Response: %s\n\n", pHTTP->errorcode, pHTTP->datalen, pHTTP->response);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f203 23d1 	addw	r3, r3, #721	; 0x2d1
	printf("HTTP response information \n"
 8007b24:	4807      	ldr	r0, [pc, #28]	; (8007b44 <SIM_sendHTTP+0x7c>)
 8007b26:	f000 fe35 	bl	8008794 <iprintf>

	if (THT_OK != res)
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <SIM_sendHTTP+0x6c>
	{
		return THT_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <SIM_sendHTTP+0x6e>
	}
	else
	{
		return THT_OK;
 8007b34:	2300      	movs	r3, #0
	}
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	0800b514 	.word	0x0800b514
 8007b44:	0800b560 	.word	0x0800b560

08007b48 <THT_copyStringUntilToken>:
 * 			@Note: if substring length is less than size, it's copy
 * 			substring length bytes, else it's copy size bytes.
 * @retval None
 */
void THT_copyStringUntilToken(const char *src, char des[], uint16_t size, const char *token)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
	if (src == NULL || des == NULL || size == 0)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <THT_copyStringUntilToken+0x22>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <THT_copyStringUntilToken+0x22>
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <THT_copyStringUntilToken+0x28>
	{
		des = NULL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60bb      	str	r3, [r7, #8]
		return;
 8007b6e:	e052      	b.n	8007c16 <THT_copyStringUntilToken+0xce>
	}

	if (token == NULL)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d121      	bne.n	8007bba <THT_copyStringUntilToken+0x72>
	{
		uint16_t srcSize = strlen(src);
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7f8 fb7a 	bl	8000270 <strlen>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	827b      	strh	r3, [r7, #18]
		if (srcSize < size)
 8007b80:	8a7a      	ldrh	r2, [r7, #18]
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d20b      	bcs.n	8007ba0 <THT_copyStringUntilToken+0x58>
		{
			memcpy(des, src, srcSize);
 8007b88:	8a7b      	ldrh	r3, [r7, #18]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68f9      	ldr	r1, [r7, #12]
 8007b8e:	68b8      	ldr	r0, [r7, #8]
 8007b90:	f001 f845 	bl	8008c1e <memcpy>
			des[srcSize] = '\0';
 8007b94:	8a7b      	ldrh	r3, [r7, #18]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	4413      	add	r3, r2
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
 8007b9e:	e03a      	b.n	8007c16 <THT_copyStringUntilToken+0xce>
		}
		else
		{
			memcpy(des, src, size);
 8007ba0:	88fb      	ldrh	r3, [r7, #6]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	68b8      	ldr	r0, [r7, #8]
 8007ba8:	f001 f839 	bl	8008c1e <memcpy>
			des[size - 1] = '\0';
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
 8007bb8:	e02d      	b.n	8007c16 <THT_copyStringUntilToken+0xce>
		}
	}
	else
	{
		char *sPtr = strstr(src, token);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 ffa0 	bl	8008b02 <strstr>
 8007bc2:	6178      	str	r0, [r7, #20]

		if (sPtr != NULL)
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d023      	beq.n	8007c12 <THT_copyStringUntilToken+0xca>
		{
			if (sPtr - src < size)
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	da10      	bge.n	8007bf8 <THT_copyStringUntilToken+0xb0>
			{
				memcpy(des, src, sPtr - src);
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f001 f81c 	bl	8008c1e <memcpy>
				des[sPtr - src] = '\0';
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e00e      	b.n	8007c16 <THT_copyStringUntilToken+0xce>
			}
			else
			{
				memcpy(des, src, size);
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68f9      	ldr	r1, [r7, #12]
 8007bfe:	68b8      	ldr	r0, [r7, #8]
 8007c00:	f001 f80d 	bl	8008c1e <memcpy>
				des[size - 1] = '\0';
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e001      	b.n	8007c16 <THT_copyStringUntilToken+0xce>
			}
		}
		else
		{
			des = NULL;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]
		}
	}
}
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <atoi>:
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f000 b886 	b.w	8007d30 <strtol>

08007c24 <atol>:
 8007c24:	220a      	movs	r2, #10
 8007c26:	2100      	movs	r1, #0
 8007c28:	f000 b882 	b.w	8007d30 <strtol>

08007c2c <_strtol_l.constprop.0>:
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c32:	d001      	beq.n	8007c38 <_strtol_l.constprop.0+0xc>
 8007c34:	2b24      	cmp	r3, #36	; 0x24
 8007c36:	d906      	bls.n	8007c46 <_strtol_l.constprop.0+0x1a>
 8007c38:	f000 ffc4 	bl	8008bc4 <__errno>
 8007c3c:	2316      	movs	r3, #22
 8007c3e:	6003      	str	r3, [r0, #0]
 8007c40:	2000      	movs	r0, #0
 8007c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c46:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d2c <_strtol_l.constprop.0+0x100>
 8007c4a:	460d      	mov	r5, r1
 8007c4c:	462e      	mov	r6, r5
 8007c4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c52:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007c56:	f017 0708 	ands.w	r7, r7, #8
 8007c5a:	d1f7      	bne.n	8007c4c <_strtol_l.constprop.0+0x20>
 8007c5c:	2c2d      	cmp	r4, #45	; 0x2d
 8007c5e:	d132      	bne.n	8007cc6 <_strtol_l.constprop.0+0x9a>
 8007c60:	782c      	ldrb	r4, [r5, #0]
 8007c62:	2701      	movs	r7, #1
 8007c64:	1cb5      	adds	r5, r6, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d05b      	beq.n	8007d22 <_strtol_l.constprop.0+0xf6>
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d109      	bne.n	8007c82 <_strtol_l.constprop.0+0x56>
 8007c6e:	2c30      	cmp	r4, #48	; 0x30
 8007c70:	d107      	bne.n	8007c82 <_strtol_l.constprop.0+0x56>
 8007c72:	782c      	ldrb	r4, [r5, #0]
 8007c74:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c78:	2c58      	cmp	r4, #88	; 0x58
 8007c7a:	d14d      	bne.n	8007d18 <_strtol_l.constprop.0+0xec>
 8007c7c:	786c      	ldrb	r4, [r5, #1]
 8007c7e:	2310      	movs	r3, #16
 8007c80:	3502      	adds	r5, #2
 8007c82:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c86:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c8a:	f04f 0e00 	mov.w	lr, #0
 8007c8e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c92:	4676      	mov	r6, lr
 8007c94:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c98:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c9c:	f1bc 0f09 	cmp.w	ip, #9
 8007ca0:	d816      	bhi.n	8007cd0 <_strtol_l.constprop.0+0xa4>
 8007ca2:	4664      	mov	r4, ip
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	dd24      	ble.n	8007cf2 <_strtol_l.constprop.0+0xc6>
 8007ca8:	f1be 3fff 	cmp.w	lr, #4294967295
 8007cac:	d008      	beq.n	8007cc0 <_strtol_l.constprop.0+0x94>
 8007cae:	45b1      	cmp	r9, r6
 8007cb0:	d31c      	bcc.n	8007cec <_strtol_l.constprop.0+0xc0>
 8007cb2:	d101      	bne.n	8007cb8 <_strtol_l.constprop.0+0x8c>
 8007cb4:	45a2      	cmp	sl, r4
 8007cb6:	db19      	blt.n	8007cec <_strtol_l.constprop.0+0xc0>
 8007cb8:	fb06 4603 	mla	r6, r6, r3, r4
 8007cbc:	f04f 0e01 	mov.w	lr, #1
 8007cc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cc4:	e7e8      	b.n	8007c98 <_strtol_l.constprop.0+0x6c>
 8007cc6:	2c2b      	cmp	r4, #43	; 0x2b
 8007cc8:	bf04      	itt	eq
 8007cca:	782c      	ldrbeq	r4, [r5, #0]
 8007ccc:	1cb5      	addeq	r5, r6, #2
 8007cce:	e7ca      	b.n	8007c66 <_strtol_l.constprop.0+0x3a>
 8007cd0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007cd4:	f1bc 0f19 	cmp.w	ip, #25
 8007cd8:	d801      	bhi.n	8007cde <_strtol_l.constprop.0+0xb2>
 8007cda:	3c37      	subs	r4, #55	; 0x37
 8007cdc:	e7e2      	b.n	8007ca4 <_strtol_l.constprop.0+0x78>
 8007cde:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007ce2:	f1bc 0f19 	cmp.w	ip, #25
 8007ce6:	d804      	bhi.n	8007cf2 <_strtol_l.constprop.0+0xc6>
 8007ce8:	3c57      	subs	r4, #87	; 0x57
 8007cea:	e7db      	b.n	8007ca4 <_strtol_l.constprop.0+0x78>
 8007cec:	f04f 3eff 	mov.w	lr, #4294967295
 8007cf0:	e7e6      	b.n	8007cc0 <_strtol_l.constprop.0+0x94>
 8007cf2:	f1be 3fff 	cmp.w	lr, #4294967295
 8007cf6:	d105      	bne.n	8007d04 <_strtol_l.constprop.0+0xd8>
 8007cf8:	2322      	movs	r3, #34	; 0x22
 8007cfa:	6003      	str	r3, [r0, #0]
 8007cfc:	4646      	mov	r6, r8
 8007cfe:	b942      	cbnz	r2, 8007d12 <_strtol_l.constprop.0+0xe6>
 8007d00:	4630      	mov	r0, r6
 8007d02:	e79e      	b.n	8007c42 <_strtol_l.constprop.0+0x16>
 8007d04:	b107      	cbz	r7, 8007d08 <_strtol_l.constprop.0+0xdc>
 8007d06:	4276      	negs	r6, r6
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	d0f9      	beq.n	8007d00 <_strtol_l.constprop.0+0xd4>
 8007d0c:	f1be 0f00 	cmp.w	lr, #0
 8007d10:	d000      	beq.n	8007d14 <_strtol_l.constprop.0+0xe8>
 8007d12:	1e69      	subs	r1, r5, #1
 8007d14:	6011      	str	r1, [r2, #0]
 8007d16:	e7f3      	b.n	8007d00 <_strtol_l.constprop.0+0xd4>
 8007d18:	2430      	movs	r4, #48	; 0x30
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1b1      	bne.n	8007c82 <_strtol_l.constprop.0+0x56>
 8007d1e:	2308      	movs	r3, #8
 8007d20:	e7af      	b.n	8007c82 <_strtol_l.constprop.0+0x56>
 8007d22:	2c30      	cmp	r4, #48	; 0x30
 8007d24:	d0a5      	beq.n	8007c72 <_strtol_l.constprop.0+0x46>
 8007d26:	230a      	movs	r3, #10
 8007d28:	e7ab      	b.n	8007c82 <_strtol_l.constprop.0+0x56>
 8007d2a:	bf00      	nop
 8007d2c:	0800b61a 	.word	0x0800b61a

08007d30 <strtol>:
 8007d30:	4613      	mov	r3, r2
 8007d32:	460a      	mov	r2, r1
 8007d34:	4601      	mov	r1, r0
 8007d36:	4802      	ldr	r0, [pc, #8]	; (8007d40 <strtol+0x10>)
 8007d38:	6800      	ldr	r0, [r0, #0]
 8007d3a:	f7ff bf77 	b.w	8007c2c <_strtol_l.constprop.0>
 8007d3e:	bf00      	nop
 8007d40:	20000078 	.word	0x20000078

08007d44 <__cvt>:
 8007d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d48:	ec55 4b10 	vmov	r4, r5, d0
 8007d4c:	2d00      	cmp	r5, #0
 8007d4e:	460e      	mov	r6, r1
 8007d50:	4619      	mov	r1, r3
 8007d52:	462b      	mov	r3, r5
 8007d54:	bfbb      	ittet	lt
 8007d56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d5a:	461d      	movlt	r5, r3
 8007d5c:	2300      	movge	r3, #0
 8007d5e:	232d      	movlt	r3, #45	; 0x2d
 8007d60:	700b      	strb	r3, [r1, #0]
 8007d62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d68:	4691      	mov	r9, r2
 8007d6a:	f023 0820 	bic.w	r8, r3, #32
 8007d6e:	bfbc      	itt	lt
 8007d70:	4622      	movlt	r2, r4
 8007d72:	4614      	movlt	r4, r2
 8007d74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d78:	d005      	beq.n	8007d86 <__cvt+0x42>
 8007d7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d7e:	d100      	bne.n	8007d82 <__cvt+0x3e>
 8007d80:	3601      	adds	r6, #1
 8007d82:	2102      	movs	r1, #2
 8007d84:	e000      	b.n	8007d88 <__cvt+0x44>
 8007d86:	2103      	movs	r1, #3
 8007d88:	ab03      	add	r3, sp, #12
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	ab02      	add	r3, sp, #8
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	ec45 4b10 	vmov	d0, r4, r5
 8007d94:	4653      	mov	r3, sl
 8007d96:	4632      	mov	r2, r6
 8007d98:	f000 ffda 	bl	8008d50 <_dtoa_r>
 8007d9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007da0:	4607      	mov	r7, r0
 8007da2:	d102      	bne.n	8007daa <__cvt+0x66>
 8007da4:	f019 0f01 	tst.w	r9, #1
 8007da8:	d022      	beq.n	8007df0 <__cvt+0xac>
 8007daa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dae:	eb07 0906 	add.w	r9, r7, r6
 8007db2:	d110      	bne.n	8007dd6 <__cvt+0x92>
 8007db4:	783b      	ldrb	r3, [r7, #0]
 8007db6:	2b30      	cmp	r3, #48	; 0x30
 8007db8:	d10a      	bne.n	8007dd0 <__cvt+0x8c>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dc6:	b918      	cbnz	r0, 8007dd0 <__cvt+0x8c>
 8007dc8:	f1c6 0601 	rsb	r6, r6, #1
 8007dcc:	f8ca 6000 	str.w	r6, [sl]
 8007dd0:	f8da 3000 	ldr.w	r3, [sl]
 8007dd4:	4499      	add	r9, r3
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f7f8 fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8007de2:	b108      	cbz	r0, 8007de8 <__cvt+0xa4>
 8007de4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007de8:	2230      	movs	r2, #48	; 0x30
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	454b      	cmp	r3, r9
 8007dee:	d307      	bcc.n	8007e00 <__cvt+0xbc>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007df4:	1bdb      	subs	r3, r3, r7
 8007df6:	4638      	mov	r0, r7
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	b004      	add	sp, #16
 8007dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e00:	1c59      	adds	r1, r3, #1
 8007e02:	9103      	str	r1, [sp, #12]
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e7f0      	b.n	8007dea <__cvt+0xa6>

08007e08 <__exponent>:
 8007e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	bfb8      	it	lt
 8007e10:	4249      	neglt	r1, r1
 8007e12:	f803 2b02 	strb.w	r2, [r3], #2
 8007e16:	bfb4      	ite	lt
 8007e18:	222d      	movlt	r2, #45	; 0x2d
 8007e1a:	222b      	movge	r2, #43	; 0x2b
 8007e1c:	2909      	cmp	r1, #9
 8007e1e:	7042      	strb	r2, [r0, #1]
 8007e20:	dd2a      	ble.n	8007e78 <__exponent+0x70>
 8007e22:	f10d 0207 	add.w	r2, sp, #7
 8007e26:	4617      	mov	r7, r2
 8007e28:	260a      	movs	r6, #10
 8007e2a:	4694      	mov	ip, r2
 8007e2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e30:	fb06 1415 	mls	r4, r6, r5, r1
 8007e34:	3430      	adds	r4, #48	; 0x30
 8007e36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	2c63      	cmp	r4, #99	; 0x63
 8007e3e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e42:	4629      	mov	r1, r5
 8007e44:	dcf1      	bgt.n	8007e2a <__exponent+0x22>
 8007e46:	3130      	adds	r1, #48	; 0x30
 8007e48:	f1ac 0402 	sub.w	r4, ip, #2
 8007e4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007e50:	1c41      	adds	r1, r0, #1
 8007e52:	4622      	mov	r2, r4
 8007e54:	42ba      	cmp	r2, r7
 8007e56:	d30a      	bcc.n	8007e6e <__exponent+0x66>
 8007e58:	f10d 0209 	add.w	r2, sp, #9
 8007e5c:	eba2 020c 	sub.w	r2, r2, ip
 8007e60:	42bc      	cmp	r4, r7
 8007e62:	bf88      	it	hi
 8007e64:	2200      	movhi	r2, #0
 8007e66:	4413      	add	r3, r2
 8007e68:	1a18      	subs	r0, r3, r0
 8007e6a:	b003      	add	sp, #12
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007e72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007e76:	e7ed      	b.n	8007e54 <__exponent+0x4c>
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	3130      	adds	r1, #48	; 0x30
 8007e7c:	7083      	strb	r3, [r0, #2]
 8007e7e:	70c1      	strb	r1, [r0, #3]
 8007e80:	1d03      	adds	r3, r0, #4
 8007e82:	e7f1      	b.n	8007e68 <__exponent+0x60>

08007e84 <_printf_float>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	ed2d 8b02 	vpush	{d8}
 8007e8c:	b08d      	sub	sp, #52	; 0x34
 8007e8e:	460c      	mov	r4, r1
 8007e90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e94:	4616      	mov	r6, r2
 8007e96:	461f      	mov	r7, r3
 8007e98:	4605      	mov	r5, r0
 8007e9a:	f000 fe49 	bl	8008b30 <_localeconv_r>
 8007e9e:	f8d0 a000 	ldr.w	sl, [r0]
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	f7f8 f9e4 	bl	8000270 <strlen>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	9305      	str	r3, [sp, #20]
 8007eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007eb8:	3307      	adds	r3, #7
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	f103 0208 	add.w	r2, r3, #8
 8007ec2:	f8c8 2000 	str.w	r2, [r8]
 8007ec6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007eca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ed4:	ee08 0a10 	vmov	s16, r0
 8007ed8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ee0:	4b9e      	ldr	r3, [pc, #632]	; (800815c <_printf_float+0x2d8>)
 8007ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee6:	f7f8 fe21 	bl	8000b2c <__aeabi_dcmpun>
 8007eea:	bb88      	cbnz	r0, 8007f50 <_printf_float+0xcc>
 8007eec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ef0:	4b9a      	ldr	r3, [pc, #616]	; (800815c <_printf_float+0x2d8>)
 8007ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef6:	f7f8 fdfb 	bl	8000af0 <__aeabi_dcmple>
 8007efa:	bb48      	cbnz	r0, 8007f50 <_printf_float+0xcc>
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	f7f8 fdea 	bl	8000adc <__aeabi_dcmplt>
 8007f08:	b110      	cbz	r0, 8007f10 <_printf_float+0x8c>
 8007f0a:	232d      	movs	r3, #45	; 0x2d
 8007f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f10:	4a93      	ldr	r2, [pc, #588]	; (8008160 <_printf_float+0x2dc>)
 8007f12:	4b94      	ldr	r3, [pc, #592]	; (8008164 <_printf_float+0x2e0>)
 8007f14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f18:	bf94      	ite	ls
 8007f1a:	4690      	movls	r8, r2
 8007f1c:	4698      	movhi	r8, r3
 8007f1e:	2303      	movs	r3, #3
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	9b05      	ldr	r3, [sp, #20]
 8007f24:	f023 0304 	bic.w	r3, r3, #4
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	f04f 0900 	mov.w	r9, #0
 8007f2e:	9700      	str	r7, [sp, #0]
 8007f30:	4633      	mov	r3, r6
 8007f32:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f34:	4621      	mov	r1, r4
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 f9da 	bl	80082f0 <_printf_common>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f040 8090 	bne.w	8008062 <_printf_float+0x1de>
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295
 8007f46:	b00d      	add	sp, #52	; 0x34
 8007f48:	ecbd 8b02 	vpop	{d8}
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fde8 	bl	8000b2c <__aeabi_dcmpun>
 8007f5c:	b140      	cbz	r0, 8007f70 <_printf_float+0xec>
 8007f5e:	464b      	mov	r3, r9
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bfbc      	itt	lt
 8007f64:	232d      	movlt	r3, #45	; 0x2d
 8007f66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f6a:	4a7f      	ldr	r2, [pc, #508]	; (8008168 <_printf_float+0x2e4>)
 8007f6c:	4b7f      	ldr	r3, [pc, #508]	; (800816c <_printf_float+0x2e8>)
 8007f6e:	e7d1      	b.n	8007f14 <_printf_float+0x90>
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f76:	9206      	str	r2, [sp, #24]
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	d13f      	bne.n	8007ffc <_printf_float+0x178>
 8007f7c:	2306      	movs	r3, #6
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	9b05      	ldr	r3, [sp, #20]
 8007f82:	6861      	ldr	r1, [r4, #4]
 8007f84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9303      	str	r3, [sp, #12]
 8007f8c:	ab0a      	add	r3, sp, #40	; 0x28
 8007f8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f92:	ab09      	add	r3, sp, #36	; 0x24
 8007f94:	ec49 8b10 	vmov	d0, r8, r9
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	6022      	str	r2, [r4, #0]
 8007f9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f7ff fecf 	bl	8007d44 <__cvt>
 8007fa6:	9b06      	ldr	r3, [sp, #24]
 8007fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007faa:	2b47      	cmp	r3, #71	; 0x47
 8007fac:	4680      	mov	r8, r0
 8007fae:	d108      	bne.n	8007fc2 <_printf_float+0x13e>
 8007fb0:	1cc8      	adds	r0, r1, #3
 8007fb2:	db02      	blt.n	8007fba <_printf_float+0x136>
 8007fb4:	6863      	ldr	r3, [r4, #4]
 8007fb6:	4299      	cmp	r1, r3
 8007fb8:	dd41      	ble.n	800803e <_printf_float+0x1ba>
 8007fba:	f1ab 0302 	sub.w	r3, fp, #2
 8007fbe:	fa5f fb83 	uxtb.w	fp, r3
 8007fc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007fc6:	d820      	bhi.n	800800a <_printf_float+0x186>
 8007fc8:	3901      	subs	r1, #1
 8007fca:	465a      	mov	r2, fp
 8007fcc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fd0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fd2:	f7ff ff19 	bl	8007e08 <__exponent>
 8007fd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fd8:	1813      	adds	r3, r2, r0
 8007fda:	2a01      	cmp	r2, #1
 8007fdc:	4681      	mov	r9, r0
 8007fde:	6123      	str	r3, [r4, #16]
 8007fe0:	dc02      	bgt.n	8007fe8 <_printf_float+0x164>
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	07d2      	lsls	r2, r2, #31
 8007fe6:	d501      	bpl.n	8007fec <_printf_float+0x168>
 8007fe8:	3301      	adds	r3, #1
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d09c      	beq.n	8007f2e <_printf_float+0xaa>
 8007ff4:	232d      	movs	r3, #45	; 0x2d
 8007ff6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffa:	e798      	b.n	8007f2e <_printf_float+0xaa>
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	2a47      	cmp	r2, #71	; 0x47
 8008000:	d1be      	bne.n	8007f80 <_printf_float+0xfc>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1bc      	bne.n	8007f80 <_printf_float+0xfc>
 8008006:	2301      	movs	r3, #1
 8008008:	e7b9      	b.n	8007f7e <_printf_float+0xfa>
 800800a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800800e:	d118      	bne.n	8008042 <_printf_float+0x1be>
 8008010:	2900      	cmp	r1, #0
 8008012:	6863      	ldr	r3, [r4, #4]
 8008014:	dd0b      	ble.n	800802e <_printf_float+0x1aa>
 8008016:	6121      	str	r1, [r4, #16]
 8008018:	b913      	cbnz	r3, 8008020 <_printf_float+0x19c>
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	07d0      	lsls	r0, r2, #31
 800801e:	d502      	bpl.n	8008026 <_printf_float+0x1a2>
 8008020:	3301      	adds	r3, #1
 8008022:	440b      	add	r3, r1
 8008024:	6123      	str	r3, [r4, #16]
 8008026:	65a1      	str	r1, [r4, #88]	; 0x58
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	e7de      	b.n	8007fec <_printf_float+0x168>
 800802e:	b913      	cbnz	r3, 8008036 <_printf_float+0x1b2>
 8008030:	6822      	ldr	r2, [r4, #0]
 8008032:	07d2      	lsls	r2, r2, #31
 8008034:	d501      	bpl.n	800803a <_printf_float+0x1b6>
 8008036:	3302      	adds	r3, #2
 8008038:	e7f4      	b.n	8008024 <_printf_float+0x1a0>
 800803a:	2301      	movs	r3, #1
 800803c:	e7f2      	b.n	8008024 <_printf_float+0x1a0>
 800803e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008044:	4299      	cmp	r1, r3
 8008046:	db05      	blt.n	8008054 <_printf_float+0x1d0>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	6121      	str	r1, [r4, #16]
 800804c:	07d8      	lsls	r0, r3, #31
 800804e:	d5ea      	bpl.n	8008026 <_printf_float+0x1a2>
 8008050:	1c4b      	adds	r3, r1, #1
 8008052:	e7e7      	b.n	8008024 <_printf_float+0x1a0>
 8008054:	2900      	cmp	r1, #0
 8008056:	bfd4      	ite	le
 8008058:	f1c1 0202 	rsble	r2, r1, #2
 800805c:	2201      	movgt	r2, #1
 800805e:	4413      	add	r3, r2
 8008060:	e7e0      	b.n	8008024 <_printf_float+0x1a0>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	055a      	lsls	r2, r3, #21
 8008066:	d407      	bmi.n	8008078 <_printf_float+0x1f4>
 8008068:	6923      	ldr	r3, [r4, #16]
 800806a:	4642      	mov	r2, r8
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	d12c      	bne.n	80080d0 <_printf_float+0x24c>
 8008076:	e764      	b.n	8007f42 <_printf_float+0xbe>
 8008078:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800807c:	f240 80e0 	bls.w	8008240 <_printf_float+0x3bc>
 8008080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008084:	2200      	movs	r2, #0
 8008086:	2300      	movs	r3, #0
 8008088:	f7f8 fd1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800808c:	2800      	cmp	r0, #0
 800808e:	d034      	beq.n	80080fa <_printf_float+0x276>
 8008090:	4a37      	ldr	r2, [pc, #220]	; (8008170 <_printf_float+0x2ec>)
 8008092:	2301      	movs	r3, #1
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	47b8      	blx	r7
 800809a:	3001      	adds	r0, #1
 800809c:	f43f af51 	beq.w	8007f42 <_printf_float+0xbe>
 80080a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a4:	429a      	cmp	r2, r3
 80080a6:	db02      	blt.n	80080ae <_printf_float+0x22a>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	07d8      	lsls	r0, r3, #31
 80080ac:	d510      	bpl.n	80080d0 <_printf_float+0x24c>
 80080ae:	ee18 3a10 	vmov	r3, s16
 80080b2:	4652      	mov	r2, sl
 80080b4:	4631      	mov	r1, r6
 80080b6:	4628      	mov	r0, r5
 80080b8:	47b8      	blx	r7
 80080ba:	3001      	adds	r0, #1
 80080bc:	f43f af41 	beq.w	8007f42 <_printf_float+0xbe>
 80080c0:	f04f 0800 	mov.w	r8, #0
 80080c4:	f104 091a 	add.w	r9, r4, #26
 80080c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ca:	3b01      	subs	r3, #1
 80080cc:	4543      	cmp	r3, r8
 80080ce:	dc09      	bgt.n	80080e4 <_printf_float+0x260>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	079b      	lsls	r3, r3, #30
 80080d4:	f100 8107 	bmi.w	80082e6 <_printf_float+0x462>
 80080d8:	68e0      	ldr	r0, [r4, #12]
 80080da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080dc:	4298      	cmp	r0, r3
 80080de:	bfb8      	it	lt
 80080e0:	4618      	movlt	r0, r3
 80080e2:	e730      	b.n	8007f46 <_printf_float+0xc2>
 80080e4:	2301      	movs	r3, #1
 80080e6:	464a      	mov	r2, r9
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f af27 	beq.w	8007f42 <_printf_float+0xbe>
 80080f4:	f108 0801 	add.w	r8, r8, #1
 80080f8:	e7e6      	b.n	80080c8 <_printf_float+0x244>
 80080fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	dc39      	bgt.n	8008174 <_printf_float+0x2f0>
 8008100:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <_printf_float+0x2ec>)
 8008102:	2301      	movs	r3, #1
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f af19 	beq.w	8007f42 <_printf_float+0xbe>
 8008110:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008114:	4313      	orrs	r3, r2
 8008116:	d102      	bne.n	800811e <_printf_float+0x29a>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	07d9      	lsls	r1, r3, #31
 800811c:	d5d8      	bpl.n	80080d0 <_printf_float+0x24c>
 800811e:	ee18 3a10 	vmov	r3, s16
 8008122:	4652      	mov	r2, sl
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f af09 	beq.w	8007f42 <_printf_float+0xbe>
 8008130:	f04f 0900 	mov.w	r9, #0
 8008134:	f104 0a1a 	add.w	sl, r4, #26
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	425b      	negs	r3, r3
 800813c:	454b      	cmp	r3, r9
 800813e:	dc01      	bgt.n	8008144 <_printf_float+0x2c0>
 8008140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008142:	e792      	b.n	800806a <_printf_float+0x1e6>
 8008144:	2301      	movs	r3, #1
 8008146:	4652      	mov	r2, sl
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f aef7 	beq.w	8007f42 <_printf_float+0xbe>
 8008154:	f109 0901 	add.w	r9, r9, #1
 8008158:	e7ee      	b.n	8008138 <_printf_float+0x2b4>
 800815a:	bf00      	nop
 800815c:	7fefffff 	.word	0x7fefffff
 8008160:	0800b71a 	.word	0x0800b71a
 8008164:	0800b71e 	.word	0x0800b71e
 8008168:	0800b722 	.word	0x0800b722
 800816c:	0800b726 	.word	0x0800b726
 8008170:	0800b72a 	.word	0x0800b72a
 8008174:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008176:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008178:	429a      	cmp	r2, r3
 800817a:	bfa8      	it	ge
 800817c:	461a      	movge	r2, r3
 800817e:	2a00      	cmp	r2, #0
 8008180:	4691      	mov	r9, r2
 8008182:	dc37      	bgt.n	80081f4 <_printf_float+0x370>
 8008184:	f04f 0b00 	mov.w	fp, #0
 8008188:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800818c:	f104 021a 	add.w	r2, r4, #26
 8008190:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	eba3 0309 	sub.w	r3, r3, r9
 8008198:	455b      	cmp	r3, fp
 800819a:	dc33      	bgt.n	8008204 <_printf_float+0x380>
 800819c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081a0:	429a      	cmp	r2, r3
 80081a2:	db3b      	blt.n	800821c <_printf_float+0x398>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	07da      	lsls	r2, r3, #31
 80081a8:	d438      	bmi.n	800821c <_printf_float+0x398>
 80081aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081ae:	eba2 0903 	sub.w	r9, r2, r3
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	1ad2      	subs	r2, r2, r3
 80081b6:	4591      	cmp	r9, r2
 80081b8:	bfa8      	it	ge
 80081ba:	4691      	movge	r9, r2
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	dc35      	bgt.n	800822e <_printf_float+0x3aa>
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081ca:	f104 0a1a 	add.w	sl, r4, #26
 80081ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	eba3 0309 	sub.w	r3, r3, r9
 80081d8:	4543      	cmp	r3, r8
 80081da:	f77f af79 	ble.w	80080d0 <_printf_float+0x24c>
 80081de:	2301      	movs	r3, #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b8      	blx	r7
 80081e8:	3001      	adds	r0, #1
 80081ea:	f43f aeaa 	beq.w	8007f42 <_printf_float+0xbe>
 80081ee:	f108 0801 	add.w	r8, r8, #1
 80081f2:	e7ec      	b.n	80081ce <_printf_float+0x34a>
 80081f4:	4613      	mov	r3, r2
 80081f6:	4631      	mov	r1, r6
 80081f8:	4642      	mov	r2, r8
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	d1c0      	bne.n	8008184 <_printf_float+0x300>
 8008202:	e69e      	b.n	8007f42 <_printf_float+0xbe>
 8008204:	2301      	movs	r3, #1
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	9205      	str	r2, [sp, #20]
 800820c:	47b8      	blx	r7
 800820e:	3001      	adds	r0, #1
 8008210:	f43f ae97 	beq.w	8007f42 <_printf_float+0xbe>
 8008214:	9a05      	ldr	r2, [sp, #20]
 8008216:	f10b 0b01 	add.w	fp, fp, #1
 800821a:	e7b9      	b.n	8008190 <_printf_float+0x30c>
 800821c:	ee18 3a10 	vmov	r3, s16
 8008220:	4652      	mov	r2, sl
 8008222:	4631      	mov	r1, r6
 8008224:	4628      	mov	r0, r5
 8008226:	47b8      	blx	r7
 8008228:	3001      	adds	r0, #1
 800822a:	d1be      	bne.n	80081aa <_printf_float+0x326>
 800822c:	e689      	b.n	8007f42 <_printf_float+0xbe>
 800822e:	9a05      	ldr	r2, [sp, #20]
 8008230:	464b      	mov	r3, r9
 8008232:	4442      	add	r2, r8
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	d1c1      	bne.n	80081c2 <_printf_float+0x33e>
 800823e:	e680      	b.n	8007f42 <_printf_float+0xbe>
 8008240:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008242:	2a01      	cmp	r2, #1
 8008244:	dc01      	bgt.n	800824a <_printf_float+0x3c6>
 8008246:	07db      	lsls	r3, r3, #31
 8008248:	d53a      	bpl.n	80082c0 <_printf_float+0x43c>
 800824a:	2301      	movs	r3, #1
 800824c:	4642      	mov	r2, r8
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae74 	beq.w	8007f42 <_printf_float+0xbe>
 800825a:	ee18 3a10 	vmov	r3, s16
 800825e:	4652      	mov	r2, sl
 8008260:	4631      	mov	r1, r6
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	f43f ae6b 	beq.w	8007f42 <_printf_float+0xbe>
 800826c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008278:	f7f8 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800827c:	b9d8      	cbnz	r0, 80082b6 <_printf_float+0x432>
 800827e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008282:	f108 0201 	add.w	r2, r8, #1
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d10e      	bne.n	80082ae <_printf_float+0x42a>
 8008290:	e657      	b.n	8007f42 <_printf_float+0xbe>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4631      	mov	r1, r6
 8008298:	4628      	mov	r0, r5
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae50 	beq.w	8007f42 <_printf_float+0xbe>
 80082a2:	f108 0801 	add.w	r8, r8, #1
 80082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a8:	3b01      	subs	r3, #1
 80082aa:	4543      	cmp	r3, r8
 80082ac:	dcf1      	bgt.n	8008292 <_printf_float+0x40e>
 80082ae:	464b      	mov	r3, r9
 80082b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082b4:	e6da      	b.n	800806c <_printf_float+0x1e8>
 80082b6:	f04f 0800 	mov.w	r8, #0
 80082ba:	f104 0a1a 	add.w	sl, r4, #26
 80082be:	e7f2      	b.n	80082a6 <_printf_float+0x422>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4642      	mov	r2, r8
 80082c4:	e7df      	b.n	8008286 <_printf_float+0x402>
 80082c6:	2301      	movs	r3, #1
 80082c8:	464a      	mov	r2, r9
 80082ca:	4631      	mov	r1, r6
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b8      	blx	r7
 80082d0:	3001      	adds	r0, #1
 80082d2:	f43f ae36 	beq.w	8007f42 <_printf_float+0xbe>
 80082d6:	f108 0801 	add.w	r8, r8, #1
 80082da:	68e3      	ldr	r3, [r4, #12]
 80082dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082de:	1a5b      	subs	r3, r3, r1
 80082e0:	4543      	cmp	r3, r8
 80082e2:	dcf0      	bgt.n	80082c6 <_printf_float+0x442>
 80082e4:	e6f8      	b.n	80080d8 <_printf_float+0x254>
 80082e6:	f04f 0800 	mov.w	r8, #0
 80082ea:	f104 0919 	add.w	r9, r4, #25
 80082ee:	e7f4      	b.n	80082da <_printf_float+0x456>

080082f0 <_printf_common>:
 80082f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	4616      	mov	r6, r2
 80082f6:	4699      	mov	r9, r3
 80082f8:	688a      	ldr	r2, [r1, #8]
 80082fa:	690b      	ldr	r3, [r1, #16]
 80082fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008300:	4293      	cmp	r3, r2
 8008302:	bfb8      	it	lt
 8008304:	4613      	movlt	r3, r2
 8008306:	6033      	str	r3, [r6, #0]
 8008308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800830c:	4607      	mov	r7, r0
 800830e:	460c      	mov	r4, r1
 8008310:	b10a      	cbz	r2, 8008316 <_printf_common+0x26>
 8008312:	3301      	adds	r3, #1
 8008314:	6033      	str	r3, [r6, #0]
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	0699      	lsls	r1, r3, #26
 800831a:	bf42      	ittt	mi
 800831c:	6833      	ldrmi	r3, [r6, #0]
 800831e:	3302      	addmi	r3, #2
 8008320:	6033      	strmi	r3, [r6, #0]
 8008322:	6825      	ldr	r5, [r4, #0]
 8008324:	f015 0506 	ands.w	r5, r5, #6
 8008328:	d106      	bne.n	8008338 <_printf_common+0x48>
 800832a:	f104 0a19 	add.w	sl, r4, #25
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	6832      	ldr	r2, [r6, #0]
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc26      	bgt.n	8008386 <_printf_common+0x96>
 8008338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800833c:	1e13      	subs	r3, r2, #0
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	bf18      	it	ne
 8008342:	2301      	movne	r3, #1
 8008344:	0692      	lsls	r2, r2, #26
 8008346:	d42b      	bmi.n	80083a0 <_printf_common+0xb0>
 8008348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834c:	4649      	mov	r1, r9
 800834e:	4638      	mov	r0, r7
 8008350:	47c0      	blx	r8
 8008352:	3001      	adds	r0, #1
 8008354:	d01e      	beq.n	8008394 <_printf_common+0xa4>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	6922      	ldr	r2, [r4, #16]
 800835a:	f003 0306 	and.w	r3, r3, #6
 800835e:	2b04      	cmp	r3, #4
 8008360:	bf02      	ittt	eq
 8008362:	68e5      	ldreq	r5, [r4, #12]
 8008364:	6833      	ldreq	r3, [r6, #0]
 8008366:	1aed      	subeq	r5, r5, r3
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	bf0c      	ite	eq
 800836c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008370:	2500      	movne	r5, #0
 8008372:	4293      	cmp	r3, r2
 8008374:	bfc4      	itt	gt
 8008376:	1a9b      	subgt	r3, r3, r2
 8008378:	18ed      	addgt	r5, r5, r3
 800837a:	2600      	movs	r6, #0
 800837c:	341a      	adds	r4, #26
 800837e:	42b5      	cmp	r5, r6
 8008380:	d11a      	bne.n	80083b8 <_printf_common+0xc8>
 8008382:	2000      	movs	r0, #0
 8008384:	e008      	b.n	8008398 <_printf_common+0xa8>
 8008386:	2301      	movs	r3, #1
 8008388:	4652      	mov	r2, sl
 800838a:	4649      	mov	r1, r9
 800838c:	4638      	mov	r0, r7
 800838e:	47c0      	blx	r8
 8008390:	3001      	adds	r0, #1
 8008392:	d103      	bne.n	800839c <_printf_common+0xac>
 8008394:	f04f 30ff 	mov.w	r0, #4294967295
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	3501      	adds	r5, #1
 800839e:	e7c6      	b.n	800832e <_printf_common+0x3e>
 80083a0:	18e1      	adds	r1, r4, r3
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	2030      	movs	r0, #48	; 0x30
 80083a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083aa:	4422      	add	r2, r4
 80083ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083b4:	3302      	adds	r3, #2
 80083b6:	e7c7      	b.n	8008348 <_printf_common+0x58>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4622      	mov	r2, r4
 80083bc:	4649      	mov	r1, r9
 80083be:	4638      	mov	r0, r7
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d0e6      	beq.n	8008394 <_printf_common+0xa4>
 80083c6:	3601      	adds	r6, #1
 80083c8:	e7d9      	b.n	800837e <_printf_common+0x8e>
	...

080083cc <_printf_i>:
 80083cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d0:	7e0f      	ldrb	r7, [r1, #24]
 80083d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083d4:	2f78      	cmp	r7, #120	; 0x78
 80083d6:	4691      	mov	r9, r2
 80083d8:	4680      	mov	r8, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	469a      	mov	sl, r3
 80083de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083e2:	d807      	bhi.n	80083f4 <_printf_i+0x28>
 80083e4:	2f62      	cmp	r7, #98	; 0x62
 80083e6:	d80a      	bhi.n	80083fe <_printf_i+0x32>
 80083e8:	2f00      	cmp	r7, #0
 80083ea:	f000 80d4 	beq.w	8008596 <_printf_i+0x1ca>
 80083ee:	2f58      	cmp	r7, #88	; 0x58
 80083f0:	f000 80c0 	beq.w	8008574 <_printf_i+0x1a8>
 80083f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083fc:	e03a      	b.n	8008474 <_printf_i+0xa8>
 80083fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008402:	2b15      	cmp	r3, #21
 8008404:	d8f6      	bhi.n	80083f4 <_printf_i+0x28>
 8008406:	a101      	add	r1, pc, #4	; (adr r1, 800840c <_printf_i+0x40>)
 8008408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800840c:	08008465 	.word	0x08008465
 8008410:	08008479 	.word	0x08008479
 8008414:	080083f5 	.word	0x080083f5
 8008418:	080083f5 	.word	0x080083f5
 800841c:	080083f5 	.word	0x080083f5
 8008420:	080083f5 	.word	0x080083f5
 8008424:	08008479 	.word	0x08008479
 8008428:	080083f5 	.word	0x080083f5
 800842c:	080083f5 	.word	0x080083f5
 8008430:	080083f5 	.word	0x080083f5
 8008434:	080083f5 	.word	0x080083f5
 8008438:	0800857d 	.word	0x0800857d
 800843c:	080084a5 	.word	0x080084a5
 8008440:	08008537 	.word	0x08008537
 8008444:	080083f5 	.word	0x080083f5
 8008448:	080083f5 	.word	0x080083f5
 800844c:	0800859f 	.word	0x0800859f
 8008450:	080083f5 	.word	0x080083f5
 8008454:	080084a5 	.word	0x080084a5
 8008458:	080083f5 	.word	0x080083f5
 800845c:	080083f5 	.word	0x080083f5
 8008460:	0800853f 	.word	0x0800853f
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	1d1a      	adds	r2, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	602a      	str	r2, [r5, #0]
 800846c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008474:	2301      	movs	r3, #1
 8008476:	e09f      	b.n	80085b8 <_printf_i+0x1ec>
 8008478:	6820      	ldr	r0, [r4, #0]
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	0607      	lsls	r7, r0, #24
 800847e:	f103 0104 	add.w	r1, r3, #4
 8008482:	6029      	str	r1, [r5, #0]
 8008484:	d501      	bpl.n	800848a <_printf_i+0xbe>
 8008486:	681e      	ldr	r6, [r3, #0]
 8008488:	e003      	b.n	8008492 <_printf_i+0xc6>
 800848a:	0646      	lsls	r6, r0, #25
 800848c:	d5fb      	bpl.n	8008486 <_printf_i+0xba>
 800848e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008492:	2e00      	cmp	r6, #0
 8008494:	da03      	bge.n	800849e <_printf_i+0xd2>
 8008496:	232d      	movs	r3, #45	; 0x2d
 8008498:	4276      	negs	r6, r6
 800849a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849e:	485a      	ldr	r0, [pc, #360]	; (8008608 <_printf_i+0x23c>)
 80084a0:	230a      	movs	r3, #10
 80084a2:	e012      	b.n	80084ca <_printf_i+0xfe>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	6820      	ldr	r0, [r4, #0]
 80084a8:	1d19      	adds	r1, r3, #4
 80084aa:	6029      	str	r1, [r5, #0]
 80084ac:	0605      	lsls	r5, r0, #24
 80084ae:	d501      	bpl.n	80084b4 <_printf_i+0xe8>
 80084b0:	681e      	ldr	r6, [r3, #0]
 80084b2:	e002      	b.n	80084ba <_printf_i+0xee>
 80084b4:	0641      	lsls	r1, r0, #25
 80084b6:	d5fb      	bpl.n	80084b0 <_printf_i+0xe4>
 80084b8:	881e      	ldrh	r6, [r3, #0]
 80084ba:	4853      	ldr	r0, [pc, #332]	; (8008608 <_printf_i+0x23c>)
 80084bc:	2f6f      	cmp	r7, #111	; 0x6f
 80084be:	bf0c      	ite	eq
 80084c0:	2308      	moveq	r3, #8
 80084c2:	230a      	movne	r3, #10
 80084c4:	2100      	movs	r1, #0
 80084c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ca:	6865      	ldr	r5, [r4, #4]
 80084cc:	60a5      	str	r5, [r4, #8]
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	bfa2      	ittt	ge
 80084d2:	6821      	ldrge	r1, [r4, #0]
 80084d4:	f021 0104 	bicge.w	r1, r1, #4
 80084d8:	6021      	strge	r1, [r4, #0]
 80084da:	b90e      	cbnz	r6, 80084e0 <_printf_i+0x114>
 80084dc:	2d00      	cmp	r5, #0
 80084de:	d04b      	beq.n	8008578 <_printf_i+0x1ac>
 80084e0:	4615      	mov	r5, r2
 80084e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084e6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ea:	5dc7      	ldrb	r7, [r0, r7]
 80084ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084f0:	4637      	mov	r7, r6
 80084f2:	42bb      	cmp	r3, r7
 80084f4:	460e      	mov	r6, r1
 80084f6:	d9f4      	bls.n	80084e2 <_printf_i+0x116>
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d10b      	bne.n	8008514 <_printf_i+0x148>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	07de      	lsls	r6, r3, #31
 8008500:	d508      	bpl.n	8008514 <_printf_i+0x148>
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	6861      	ldr	r1, [r4, #4]
 8008506:	4299      	cmp	r1, r3
 8008508:	bfde      	ittt	le
 800850a:	2330      	movle	r3, #48	; 0x30
 800850c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008510:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008514:	1b52      	subs	r2, r2, r5
 8008516:	6122      	str	r2, [r4, #16]
 8008518:	f8cd a000 	str.w	sl, [sp]
 800851c:	464b      	mov	r3, r9
 800851e:	aa03      	add	r2, sp, #12
 8008520:	4621      	mov	r1, r4
 8008522:	4640      	mov	r0, r8
 8008524:	f7ff fee4 	bl	80082f0 <_printf_common>
 8008528:	3001      	adds	r0, #1
 800852a:	d14a      	bne.n	80085c2 <_printf_i+0x1f6>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295
 8008530:	b004      	add	sp, #16
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f043 0320 	orr.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	4833      	ldr	r0, [pc, #204]	; (800860c <_printf_i+0x240>)
 8008540:	2778      	movs	r7, #120	; 0x78
 8008542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6829      	ldr	r1, [r5, #0]
 800854a:	061f      	lsls	r7, r3, #24
 800854c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008550:	d402      	bmi.n	8008558 <_printf_i+0x18c>
 8008552:	065f      	lsls	r7, r3, #25
 8008554:	bf48      	it	mi
 8008556:	b2b6      	uxthmi	r6, r6
 8008558:	07df      	lsls	r7, r3, #31
 800855a:	bf48      	it	mi
 800855c:	f043 0320 	orrmi.w	r3, r3, #32
 8008560:	6029      	str	r1, [r5, #0]
 8008562:	bf48      	it	mi
 8008564:	6023      	strmi	r3, [r4, #0]
 8008566:	b91e      	cbnz	r6, 8008570 <_printf_i+0x1a4>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	f023 0320 	bic.w	r3, r3, #32
 800856e:	6023      	str	r3, [r4, #0]
 8008570:	2310      	movs	r3, #16
 8008572:	e7a7      	b.n	80084c4 <_printf_i+0xf8>
 8008574:	4824      	ldr	r0, [pc, #144]	; (8008608 <_printf_i+0x23c>)
 8008576:	e7e4      	b.n	8008542 <_printf_i+0x176>
 8008578:	4615      	mov	r5, r2
 800857a:	e7bd      	b.n	80084f8 <_printf_i+0x12c>
 800857c:	682b      	ldr	r3, [r5, #0]
 800857e:	6826      	ldr	r6, [r4, #0]
 8008580:	6961      	ldr	r1, [r4, #20]
 8008582:	1d18      	adds	r0, r3, #4
 8008584:	6028      	str	r0, [r5, #0]
 8008586:	0635      	lsls	r5, r6, #24
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	d501      	bpl.n	8008590 <_printf_i+0x1c4>
 800858c:	6019      	str	r1, [r3, #0]
 800858e:	e002      	b.n	8008596 <_printf_i+0x1ca>
 8008590:	0670      	lsls	r0, r6, #25
 8008592:	d5fb      	bpl.n	800858c <_printf_i+0x1c0>
 8008594:	8019      	strh	r1, [r3, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	6123      	str	r3, [r4, #16]
 800859a:	4615      	mov	r5, r2
 800859c:	e7bc      	b.n	8008518 <_printf_i+0x14c>
 800859e:	682b      	ldr	r3, [r5, #0]
 80085a0:	1d1a      	adds	r2, r3, #4
 80085a2:	602a      	str	r2, [r5, #0]
 80085a4:	681d      	ldr	r5, [r3, #0]
 80085a6:	6862      	ldr	r2, [r4, #4]
 80085a8:	2100      	movs	r1, #0
 80085aa:	4628      	mov	r0, r5
 80085ac:	f7f7 fe10 	bl	80001d0 <memchr>
 80085b0:	b108      	cbz	r0, 80085b6 <_printf_i+0x1ea>
 80085b2:	1b40      	subs	r0, r0, r5
 80085b4:	6060      	str	r0, [r4, #4]
 80085b6:	6863      	ldr	r3, [r4, #4]
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	2300      	movs	r3, #0
 80085bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c0:	e7aa      	b.n	8008518 <_printf_i+0x14c>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	462a      	mov	r2, r5
 80085c6:	4649      	mov	r1, r9
 80085c8:	4640      	mov	r0, r8
 80085ca:	47d0      	blx	sl
 80085cc:	3001      	adds	r0, #1
 80085ce:	d0ad      	beq.n	800852c <_printf_i+0x160>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	079b      	lsls	r3, r3, #30
 80085d4:	d413      	bmi.n	80085fe <_printf_i+0x232>
 80085d6:	68e0      	ldr	r0, [r4, #12]
 80085d8:	9b03      	ldr	r3, [sp, #12]
 80085da:	4298      	cmp	r0, r3
 80085dc:	bfb8      	it	lt
 80085de:	4618      	movlt	r0, r3
 80085e0:	e7a6      	b.n	8008530 <_printf_i+0x164>
 80085e2:	2301      	movs	r3, #1
 80085e4:	4632      	mov	r2, r6
 80085e6:	4649      	mov	r1, r9
 80085e8:	4640      	mov	r0, r8
 80085ea:	47d0      	blx	sl
 80085ec:	3001      	adds	r0, #1
 80085ee:	d09d      	beq.n	800852c <_printf_i+0x160>
 80085f0:	3501      	adds	r5, #1
 80085f2:	68e3      	ldr	r3, [r4, #12]
 80085f4:	9903      	ldr	r1, [sp, #12]
 80085f6:	1a5b      	subs	r3, r3, r1
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	dcf2      	bgt.n	80085e2 <_printf_i+0x216>
 80085fc:	e7eb      	b.n	80085d6 <_printf_i+0x20a>
 80085fe:	2500      	movs	r5, #0
 8008600:	f104 0619 	add.w	r6, r4, #25
 8008604:	e7f5      	b.n	80085f2 <_printf_i+0x226>
 8008606:	bf00      	nop
 8008608:	0800b72c 	.word	0x0800b72c
 800860c:	0800b73d 	.word	0x0800b73d

08008610 <std>:
 8008610:	2300      	movs	r3, #0
 8008612:	b510      	push	{r4, lr}
 8008614:	4604      	mov	r4, r0
 8008616:	e9c0 3300 	strd	r3, r3, [r0]
 800861a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800861e:	6083      	str	r3, [r0, #8]
 8008620:	8181      	strh	r1, [r0, #12]
 8008622:	6643      	str	r3, [r0, #100]	; 0x64
 8008624:	81c2      	strh	r2, [r0, #14]
 8008626:	6183      	str	r3, [r0, #24]
 8008628:	4619      	mov	r1, r3
 800862a:	2208      	movs	r2, #8
 800862c:	305c      	adds	r0, #92	; 0x5c
 800862e:	f000 fa53 	bl	8008ad8 <memset>
 8008632:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <std+0x58>)
 8008634:	6263      	str	r3, [r4, #36]	; 0x24
 8008636:	4b0d      	ldr	r3, [pc, #52]	; (800866c <std+0x5c>)
 8008638:	62a3      	str	r3, [r4, #40]	; 0x28
 800863a:	4b0d      	ldr	r3, [pc, #52]	; (8008670 <std+0x60>)
 800863c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800863e:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <std+0x64>)
 8008640:	6323      	str	r3, [r4, #48]	; 0x30
 8008642:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <std+0x68>)
 8008644:	6224      	str	r4, [r4, #32]
 8008646:	429c      	cmp	r4, r3
 8008648:	d006      	beq.n	8008658 <std+0x48>
 800864a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800864e:	4294      	cmp	r4, r2
 8008650:	d002      	beq.n	8008658 <std+0x48>
 8008652:	33d0      	adds	r3, #208	; 0xd0
 8008654:	429c      	cmp	r4, r3
 8008656:	d105      	bne.n	8008664 <std+0x54>
 8008658:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800865c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008660:	f000 bada 	b.w	8008c18 <__retarget_lock_init_recursive>
 8008664:	bd10      	pop	{r4, pc}
 8008666:	bf00      	nop
 8008668:	08008929 	.word	0x08008929
 800866c:	0800894b 	.word	0x0800894b
 8008670:	08008983 	.word	0x08008983
 8008674:	080089a7 	.word	0x080089a7
 8008678:	20000ce0 	.word	0x20000ce0

0800867c <stdio_exit_handler>:
 800867c:	4a02      	ldr	r2, [pc, #8]	; (8008688 <stdio_exit_handler+0xc>)
 800867e:	4903      	ldr	r1, [pc, #12]	; (800868c <stdio_exit_handler+0x10>)
 8008680:	4803      	ldr	r0, [pc, #12]	; (8008690 <stdio_exit_handler+0x14>)
 8008682:	f000 b869 	b.w	8008758 <_fwalk_sglue>
 8008686:	bf00      	nop
 8008688:	20000020 	.word	0x20000020
 800868c:	0800a871 	.word	0x0800a871
 8008690:	2000002c 	.word	0x2000002c

08008694 <cleanup_stdio>:
 8008694:	6841      	ldr	r1, [r0, #4]
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <cleanup_stdio+0x34>)
 8008698:	4299      	cmp	r1, r3
 800869a:	b510      	push	{r4, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	d001      	beq.n	80086a4 <cleanup_stdio+0x10>
 80086a0:	f002 f8e6 	bl	800a870 <_fflush_r>
 80086a4:	68a1      	ldr	r1, [r4, #8]
 80086a6:	4b09      	ldr	r3, [pc, #36]	; (80086cc <cleanup_stdio+0x38>)
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d002      	beq.n	80086b2 <cleanup_stdio+0x1e>
 80086ac:	4620      	mov	r0, r4
 80086ae:	f002 f8df 	bl	800a870 <_fflush_r>
 80086b2:	68e1      	ldr	r1, [r4, #12]
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <cleanup_stdio+0x3c>)
 80086b6:	4299      	cmp	r1, r3
 80086b8:	d004      	beq.n	80086c4 <cleanup_stdio+0x30>
 80086ba:	4620      	mov	r0, r4
 80086bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c0:	f002 b8d6 	b.w	800a870 <_fflush_r>
 80086c4:	bd10      	pop	{r4, pc}
 80086c6:	bf00      	nop
 80086c8:	20000ce0 	.word	0x20000ce0
 80086cc:	20000d48 	.word	0x20000d48
 80086d0:	20000db0 	.word	0x20000db0

080086d4 <global_stdio_init.part.0>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <global_stdio_init.part.0+0x30>)
 80086d8:	4c0b      	ldr	r4, [pc, #44]	; (8008708 <global_stdio_init.part.0+0x34>)
 80086da:	4a0c      	ldr	r2, [pc, #48]	; (800870c <global_stdio_init.part.0+0x38>)
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	4620      	mov	r0, r4
 80086e0:	2200      	movs	r2, #0
 80086e2:	2104      	movs	r1, #4
 80086e4:	f7ff ff94 	bl	8008610 <std>
 80086e8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80086ec:	2201      	movs	r2, #1
 80086ee:	2109      	movs	r1, #9
 80086f0:	f7ff ff8e 	bl	8008610 <std>
 80086f4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80086f8:	2202      	movs	r2, #2
 80086fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086fe:	2112      	movs	r1, #18
 8008700:	f7ff bf86 	b.w	8008610 <std>
 8008704:	20000e18 	.word	0x20000e18
 8008708:	20000ce0 	.word	0x20000ce0
 800870c:	0800867d 	.word	0x0800867d

08008710 <__sfp_lock_acquire>:
 8008710:	4801      	ldr	r0, [pc, #4]	; (8008718 <__sfp_lock_acquire+0x8>)
 8008712:	f000 ba82 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 8008716:	bf00      	nop
 8008718:	20000e21 	.word	0x20000e21

0800871c <__sfp_lock_release>:
 800871c:	4801      	ldr	r0, [pc, #4]	; (8008724 <__sfp_lock_release+0x8>)
 800871e:	f000 ba7d 	b.w	8008c1c <__retarget_lock_release_recursive>
 8008722:	bf00      	nop
 8008724:	20000e21 	.word	0x20000e21

08008728 <__sinit>:
 8008728:	b510      	push	{r4, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	f7ff fff0 	bl	8008710 <__sfp_lock_acquire>
 8008730:	6a23      	ldr	r3, [r4, #32]
 8008732:	b11b      	cbz	r3, 800873c <__sinit+0x14>
 8008734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008738:	f7ff bff0 	b.w	800871c <__sfp_lock_release>
 800873c:	4b04      	ldr	r3, [pc, #16]	; (8008750 <__sinit+0x28>)
 800873e:	6223      	str	r3, [r4, #32]
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <__sinit+0x2c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f5      	bne.n	8008734 <__sinit+0xc>
 8008748:	f7ff ffc4 	bl	80086d4 <global_stdio_init.part.0>
 800874c:	e7f2      	b.n	8008734 <__sinit+0xc>
 800874e:	bf00      	nop
 8008750:	08008695 	.word	0x08008695
 8008754:	20000e18 	.word	0x20000e18

08008758 <_fwalk_sglue>:
 8008758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800875c:	4607      	mov	r7, r0
 800875e:	4688      	mov	r8, r1
 8008760:	4614      	mov	r4, r2
 8008762:	2600      	movs	r6, #0
 8008764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008768:	f1b9 0901 	subs.w	r9, r9, #1
 800876c:	d505      	bpl.n	800877a <_fwalk_sglue+0x22>
 800876e:	6824      	ldr	r4, [r4, #0]
 8008770:	2c00      	cmp	r4, #0
 8008772:	d1f7      	bne.n	8008764 <_fwalk_sglue+0xc>
 8008774:	4630      	mov	r0, r6
 8008776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800877a:	89ab      	ldrh	r3, [r5, #12]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d907      	bls.n	8008790 <_fwalk_sglue+0x38>
 8008780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008784:	3301      	adds	r3, #1
 8008786:	d003      	beq.n	8008790 <_fwalk_sglue+0x38>
 8008788:	4629      	mov	r1, r5
 800878a:	4638      	mov	r0, r7
 800878c:	47c0      	blx	r8
 800878e:	4306      	orrs	r6, r0
 8008790:	3568      	adds	r5, #104	; 0x68
 8008792:	e7e9      	b.n	8008768 <_fwalk_sglue+0x10>

08008794 <iprintf>:
 8008794:	b40f      	push	{r0, r1, r2, r3}
 8008796:	b507      	push	{r0, r1, r2, lr}
 8008798:	4906      	ldr	r1, [pc, #24]	; (80087b4 <iprintf+0x20>)
 800879a:	ab04      	add	r3, sp, #16
 800879c:	6808      	ldr	r0, [r1, #0]
 800879e:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a2:	6881      	ldr	r1, [r0, #8]
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	f001 fec3 	bl	800a530 <_vfiprintf_r>
 80087aa:	b003      	add	sp, #12
 80087ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b0:	b004      	add	sp, #16
 80087b2:	4770      	bx	lr
 80087b4:	20000078 	.word	0x20000078

080087b8 <putchar>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <putchar+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	6882      	ldr	r2, [r0, #8]
 80087c0:	f002 b8e0 	b.w	800a984 <_putc_r>
 80087c4:	20000078 	.word	0x20000078

080087c8 <_puts_r>:
 80087c8:	6a03      	ldr	r3, [r0, #32]
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	6884      	ldr	r4, [r0, #8]
 80087ce:	4605      	mov	r5, r0
 80087d0:	460e      	mov	r6, r1
 80087d2:	b90b      	cbnz	r3, 80087d8 <_puts_r+0x10>
 80087d4:	f7ff ffa8 	bl	8008728 <__sinit>
 80087d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d405      	bmi.n	80087ea <_puts_r+0x22>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	0598      	lsls	r0, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_puts_r+0x22>
 80087e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087e6:	f000 fa18 	bl	8008c1a <__retarget_lock_acquire_recursive>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	0719      	lsls	r1, r3, #28
 80087ee:	d513      	bpl.n	8008818 <_puts_r+0x50>
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	b18b      	cbz	r3, 8008818 <_puts_r+0x50>
 80087f4:	3e01      	subs	r6, #1
 80087f6:	68a3      	ldr	r3, [r4, #8]
 80087f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087fc:	3b01      	subs	r3, #1
 80087fe:	60a3      	str	r3, [r4, #8]
 8008800:	b9e9      	cbnz	r1, 800883e <_puts_r+0x76>
 8008802:	2b00      	cmp	r3, #0
 8008804:	da2e      	bge.n	8008864 <_puts_r+0x9c>
 8008806:	4622      	mov	r2, r4
 8008808:	210a      	movs	r1, #10
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f8cf 	bl	80089ae <__swbuf_r>
 8008810:	3001      	adds	r0, #1
 8008812:	d007      	beq.n	8008824 <_puts_r+0x5c>
 8008814:	250a      	movs	r5, #10
 8008816:	e007      	b.n	8008828 <_puts_r+0x60>
 8008818:	4621      	mov	r1, r4
 800881a:	4628      	mov	r0, r5
 800881c:	f000 f904 	bl	8008a28 <__swsetup_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	d0e7      	beq.n	80087f4 <_puts_r+0x2c>
 8008824:	f04f 35ff 	mov.w	r5, #4294967295
 8008828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800882a:	07da      	lsls	r2, r3, #31
 800882c:	d405      	bmi.n	800883a <_puts_r+0x72>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	059b      	lsls	r3, r3, #22
 8008832:	d402      	bmi.n	800883a <_puts_r+0x72>
 8008834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008836:	f000 f9f1 	bl	8008c1c <__retarget_lock_release_recursive>
 800883a:	4628      	mov	r0, r5
 800883c:	bd70      	pop	{r4, r5, r6, pc}
 800883e:	2b00      	cmp	r3, #0
 8008840:	da04      	bge.n	800884c <_puts_r+0x84>
 8008842:	69a2      	ldr	r2, [r4, #24]
 8008844:	429a      	cmp	r2, r3
 8008846:	dc06      	bgt.n	8008856 <_puts_r+0x8e>
 8008848:	290a      	cmp	r1, #10
 800884a:	d004      	beq.n	8008856 <_puts_r+0x8e>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	6022      	str	r2, [r4, #0]
 8008852:	7019      	strb	r1, [r3, #0]
 8008854:	e7cf      	b.n	80087f6 <_puts_r+0x2e>
 8008856:	4622      	mov	r2, r4
 8008858:	4628      	mov	r0, r5
 800885a:	f000 f8a8 	bl	80089ae <__swbuf_r>
 800885e:	3001      	adds	r0, #1
 8008860:	d1c9      	bne.n	80087f6 <_puts_r+0x2e>
 8008862:	e7df      	b.n	8008824 <_puts_r+0x5c>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	250a      	movs	r5, #10
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	701d      	strb	r5, [r3, #0]
 800886e:	e7db      	b.n	8008828 <_puts_r+0x60>

08008870 <puts>:
 8008870:	4b02      	ldr	r3, [pc, #8]	; (800887c <puts+0xc>)
 8008872:	4601      	mov	r1, r0
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	f7ff bfa7 	b.w	80087c8 <_puts_r>
 800887a:	bf00      	nop
 800887c:	20000078 	.word	0x20000078

08008880 <sniprintf>:
 8008880:	b40c      	push	{r2, r3}
 8008882:	b530      	push	{r4, r5, lr}
 8008884:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <sniprintf+0x64>)
 8008886:	1e0c      	subs	r4, r1, #0
 8008888:	681d      	ldr	r5, [r3, #0]
 800888a:	b09d      	sub	sp, #116	; 0x74
 800888c:	da08      	bge.n	80088a0 <sniprintf+0x20>
 800888e:	238b      	movs	r3, #139	; 0x8b
 8008890:	602b      	str	r3, [r5, #0]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	b01d      	add	sp, #116	; 0x74
 8008898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800889c:	b002      	add	sp, #8
 800889e:	4770      	bx	lr
 80088a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088a8:	bf14      	ite	ne
 80088aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088ae:	4623      	moveq	r3, r4
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	9307      	str	r3, [sp, #28]
 80088b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088b8:	9002      	str	r0, [sp, #8]
 80088ba:	9006      	str	r0, [sp, #24]
 80088bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088c2:	ab21      	add	r3, sp, #132	; 0x84
 80088c4:	a902      	add	r1, sp, #8
 80088c6:	4628      	mov	r0, r5
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	f001 fd09 	bl	800a2e0 <_svfiprintf_r>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	bfbc      	itt	lt
 80088d2:	238b      	movlt	r3, #139	; 0x8b
 80088d4:	602b      	strlt	r3, [r5, #0]
 80088d6:	2c00      	cmp	r4, #0
 80088d8:	d0dd      	beq.n	8008896 <sniprintf+0x16>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e7d9      	b.n	8008896 <sniprintf+0x16>
 80088e2:	bf00      	nop
 80088e4:	20000078 	.word	0x20000078

080088e8 <siprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b500      	push	{lr}
 80088ec:	b09c      	sub	sp, #112	; 0x70
 80088ee:	ab1d      	add	r3, sp, #116	; 0x74
 80088f0:	9002      	str	r0, [sp, #8]
 80088f2:	9006      	str	r0, [sp, #24]
 80088f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f8:	4809      	ldr	r0, [pc, #36]	; (8008920 <siprintf+0x38>)
 80088fa:	9107      	str	r1, [sp, #28]
 80088fc:	9104      	str	r1, [sp, #16]
 80088fe:	4909      	ldr	r1, [pc, #36]	; (8008924 <siprintf+0x3c>)
 8008900:	f853 2b04 	ldr.w	r2, [r3], #4
 8008904:	9105      	str	r1, [sp, #20]
 8008906:	6800      	ldr	r0, [r0, #0]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	a902      	add	r1, sp, #8
 800890c:	f001 fce8 	bl	800a2e0 <_svfiprintf_r>
 8008910:	9b02      	ldr	r3, [sp, #8]
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
 8008916:	b01c      	add	sp, #112	; 0x70
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	20000078 	.word	0x20000078
 8008924:	ffff0208 	.word	0xffff0208

08008928 <__sread>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008930:	f000 f924 	bl	8008b7c <_read_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	bfab      	itete	ge
 8008938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800893a:	89a3      	ldrhlt	r3, [r4, #12]
 800893c:	181b      	addge	r3, r3, r0
 800893e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008942:	bfac      	ite	ge
 8008944:	6563      	strge	r3, [r4, #84]	; 0x54
 8008946:	81a3      	strhlt	r3, [r4, #12]
 8008948:	bd10      	pop	{r4, pc}

0800894a <__swrite>:
 800894a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800894e:	461f      	mov	r7, r3
 8008950:	898b      	ldrh	r3, [r1, #12]
 8008952:	05db      	lsls	r3, r3, #23
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	4616      	mov	r6, r2
 800895a:	d505      	bpl.n	8008968 <__swrite+0x1e>
 800895c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008960:	2302      	movs	r3, #2
 8008962:	2200      	movs	r2, #0
 8008964:	f000 f8f8 	bl	8008b58 <_lseek_r>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008972:	81a3      	strh	r3, [r4, #12]
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	4628      	mov	r0, r5
 800897a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	f000 b90f 	b.w	8008ba0 <_write_r>

08008982 <__sseek>:
 8008982:	b510      	push	{r4, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898a:	f000 f8e5 	bl	8008b58 <_lseek_r>
 800898e:	1c43      	adds	r3, r0, #1
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	bf15      	itete	ne
 8008994:	6560      	strne	r0, [r4, #84]	; 0x54
 8008996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800899a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800899e:	81a3      	strheq	r3, [r4, #12]
 80089a0:	bf18      	it	ne
 80089a2:	81a3      	strhne	r3, [r4, #12]
 80089a4:	bd10      	pop	{r4, pc}

080089a6 <__sclose>:
 80089a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089aa:	f000 b8c5 	b.w	8008b38 <_close_r>

080089ae <__swbuf_r>:
 80089ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b0:	460e      	mov	r6, r1
 80089b2:	4614      	mov	r4, r2
 80089b4:	4605      	mov	r5, r0
 80089b6:	b118      	cbz	r0, 80089c0 <__swbuf_r+0x12>
 80089b8:	6a03      	ldr	r3, [r0, #32]
 80089ba:	b90b      	cbnz	r3, 80089c0 <__swbuf_r+0x12>
 80089bc:	f7ff feb4 	bl	8008728 <__sinit>
 80089c0:	69a3      	ldr	r3, [r4, #24]
 80089c2:	60a3      	str	r3, [r4, #8]
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	071a      	lsls	r2, r3, #28
 80089c8:	d525      	bpl.n	8008a16 <__swbuf_r+0x68>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	b31b      	cbz	r3, 8008a16 <__swbuf_r+0x68>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	1a98      	subs	r0, r3, r2
 80089d4:	6963      	ldr	r3, [r4, #20]
 80089d6:	b2f6      	uxtb	r6, r6
 80089d8:	4283      	cmp	r3, r0
 80089da:	4637      	mov	r7, r6
 80089dc:	dc04      	bgt.n	80089e8 <__swbuf_r+0x3a>
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f001 ff45 	bl	800a870 <_fflush_r>
 80089e6:	b9e0      	cbnz	r0, 8008a22 <__swbuf_r+0x74>
 80089e8:	68a3      	ldr	r3, [r4, #8]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	60a3      	str	r3, [r4, #8]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	701e      	strb	r6, [r3, #0]
 80089f6:	6962      	ldr	r2, [r4, #20]
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d004      	beq.n	8008a08 <__swbuf_r+0x5a>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d506      	bpl.n	8008a12 <__swbuf_r+0x64>
 8008a04:	2e0a      	cmp	r6, #10
 8008a06:	d104      	bne.n	8008a12 <__swbuf_r+0x64>
 8008a08:	4621      	mov	r1, r4
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f001 ff30 	bl	800a870 <_fflush_r>
 8008a10:	b938      	cbnz	r0, 8008a22 <__swbuf_r+0x74>
 8008a12:	4638      	mov	r0, r7
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f805 	bl	8008a28 <__swsetup_r>
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	d0d5      	beq.n	80089ce <__swbuf_r+0x20>
 8008a22:	f04f 37ff 	mov.w	r7, #4294967295
 8008a26:	e7f4      	b.n	8008a12 <__swbuf_r+0x64>

08008a28 <__swsetup_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ad4 <__swsetup_r+0xac>)
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	460c      	mov	r4, r1
 8008a32:	b118      	cbz	r0, 8008a3c <__swsetup_r+0x14>
 8008a34:	6a03      	ldr	r3, [r0, #32]
 8008a36:	b90b      	cbnz	r3, 8008a3c <__swsetup_r+0x14>
 8008a38:	f7ff fe76 	bl	8008728 <__sinit>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a42:	0718      	lsls	r0, r3, #28
 8008a44:	d422      	bmi.n	8008a8c <__swsetup_r+0x64>
 8008a46:	06d9      	lsls	r1, r3, #27
 8008a48:	d407      	bmi.n	8008a5a <__swsetup_r+0x32>
 8008a4a:	2309      	movs	r3, #9
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e034      	b.n	8008ac4 <__swsetup_r+0x9c>
 8008a5a:	0758      	lsls	r0, r3, #29
 8008a5c:	d512      	bpl.n	8008a84 <__swsetup_r+0x5c>
 8008a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a60:	b141      	cbz	r1, 8008a74 <__swsetup_r+0x4c>
 8008a62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a66:	4299      	cmp	r1, r3
 8008a68:	d002      	beq.n	8008a70 <__swsetup_r+0x48>
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 ff62 	bl	8009934 <_free_r>
 8008a70:	2300      	movs	r3, #0
 8008a72:	6363      	str	r3, [r4, #52]	; 0x34
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a7a:	81a3      	strh	r3, [r4, #12]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6063      	str	r3, [r4, #4]
 8008a80:	6923      	ldr	r3, [r4, #16]
 8008a82:	6023      	str	r3, [r4, #0]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f043 0308 	orr.w	r3, r3, #8
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	6923      	ldr	r3, [r4, #16]
 8008a8e:	b94b      	cbnz	r3, 8008aa4 <__swsetup_r+0x7c>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a9a:	d003      	beq.n	8008aa4 <__swsetup_r+0x7c>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f001 ff34 	bl	800a90c <__smakebuf_r>
 8008aa4:	89a0      	ldrh	r0, [r4, #12]
 8008aa6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008aaa:	f010 0301 	ands.w	r3, r0, #1
 8008aae:	d00a      	beq.n	8008ac6 <__swsetup_r+0x9e>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	60a3      	str	r3, [r4, #8]
 8008ab4:	6963      	ldr	r3, [r4, #20]
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	61a3      	str	r3, [r4, #24]
 8008aba:	6923      	ldr	r3, [r4, #16]
 8008abc:	b943      	cbnz	r3, 8008ad0 <__swsetup_r+0xa8>
 8008abe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ac2:	d1c4      	bne.n	8008a4e <__swsetup_r+0x26>
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	0781      	lsls	r1, r0, #30
 8008ac8:	bf58      	it	pl
 8008aca:	6963      	ldrpl	r3, [r4, #20]
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	e7f4      	b.n	8008aba <__swsetup_r+0x92>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e7f7      	b.n	8008ac4 <__swsetup_r+0x9c>
 8008ad4:	20000078 	.word	0x20000078

08008ad8 <memset>:
 8008ad8:	4402      	add	r2, r0
 8008ada:	4603      	mov	r3, r0
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d100      	bne.n	8008ae2 <memset+0xa>
 8008ae0:	4770      	bx	lr
 8008ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae6:	e7f9      	b.n	8008adc <memset+0x4>

08008ae8 <strchr>:
 8008ae8:	b2c9      	uxtb	r1, r1
 8008aea:	4603      	mov	r3, r0
 8008aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008af0:	b11a      	cbz	r2, 8008afa <strchr+0x12>
 8008af2:	428a      	cmp	r2, r1
 8008af4:	d1f9      	bne.n	8008aea <strchr+0x2>
 8008af6:	4618      	mov	r0, r3
 8008af8:	4770      	bx	lr
 8008afa:	2900      	cmp	r1, #0
 8008afc:	bf18      	it	ne
 8008afe:	2300      	movne	r3, #0
 8008b00:	e7f9      	b.n	8008af6 <strchr+0xe>

08008b02 <strstr>:
 8008b02:	780a      	ldrb	r2, [r1, #0]
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	b96a      	cbnz	r2, 8008b24 <strstr+0x22>
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d109      	bne.n	8008b22 <strstr+0x20>
 8008b0e:	460c      	mov	r4, r1
 8008b10:	4605      	mov	r5, r0
 8008b12:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f6      	beq.n	8008b08 <strstr+0x6>
 8008b1a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008b1e:	429e      	cmp	r6, r3
 8008b20:	d0f7      	beq.n	8008b12 <strstr+0x10>
 8008b22:	3001      	adds	r0, #1
 8008b24:	7803      	ldrb	r3, [r0, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ef      	bne.n	8008b0a <strstr+0x8>
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	e7ec      	b.n	8008b08 <strstr+0x6>
	...

08008b30 <_localeconv_r>:
 8008b30:	4800      	ldr	r0, [pc, #0]	; (8008b34 <_localeconv_r+0x4>)
 8008b32:	4770      	bx	lr
 8008b34:	2000016c 	.word	0x2000016c

08008b38 <_close_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d06      	ldr	r5, [pc, #24]	; (8008b54 <_close_r+0x1c>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f7fb f9dd 	bl	8003f02 <_close>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_close_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_close_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20000e1c 	.word	0x20000e1c

08008b58 <_lseek_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_lseek_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7fb f9f2 	bl	8003f50 <_lseek>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_lseek_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_lseek_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000e1c 	.word	0x20000e1c

08008b7c <_read_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d07      	ldr	r5, [pc, #28]	; (8008b9c <_read_r+0x20>)
 8008b80:	4604      	mov	r4, r0
 8008b82:	4608      	mov	r0, r1
 8008b84:	4611      	mov	r1, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	602a      	str	r2, [r5, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f7fb f980 	bl	8003e90 <_read>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_read_r+0x1e>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_read_r+0x1e>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20000e1c 	.word	0x20000e1c

08008ba0 <_write_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d07      	ldr	r5, [pc, #28]	; (8008bc0 <_write_r+0x20>)
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f7fb f98b 	bl	8003eca <_write>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_write_r+0x1e>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_write_r+0x1e>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	20000e1c 	.word	0x20000e1c

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	20000078 	.word	0x20000078

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	; (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	; (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	; (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	; (8008c14 <__libc_init_array+0x44>)
 8008be4:	f002 f836 	bl	800ac54 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800b994 	.word	0x0800b994
 8008c0c:	0800b994 	.word	0x0800b994
 8008c10:	0800b994 	.word	0x0800b994
 8008c14:	0800b998 	.word	0x0800b998

08008c18 <__retarget_lock_init_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_acquire_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <__retarget_lock_release_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <memcpy>:
 8008c1e:	440a      	add	r2, r1
 8008c20:	4291      	cmp	r1, r2
 8008c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c26:	d100      	bne.n	8008c2a <memcpy+0xc>
 8008c28:	4770      	bx	lr
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c34:	4291      	cmp	r1, r2
 8008c36:	d1f9      	bne.n	8008c2c <memcpy+0xe>
 8008c38:	bd10      	pop	{r4, pc}

08008c3a <quorem>:
 8008c3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3e:	6903      	ldr	r3, [r0, #16]
 8008c40:	690c      	ldr	r4, [r1, #16]
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	4607      	mov	r7, r0
 8008c46:	db7e      	blt.n	8008d46 <quorem+0x10c>
 8008c48:	3c01      	subs	r4, #1
 8008c4a:	f101 0814 	add.w	r8, r1, #20
 8008c4e:	f100 0514 	add.w	r5, r0, #20
 8008c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c60:	3301      	adds	r3, #1
 8008c62:	429a      	cmp	r2, r3
 8008c64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c70:	d331      	bcc.n	8008cd6 <quorem+0x9c>
 8008c72:	f04f 0e00 	mov.w	lr, #0
 8008c76:	4640      	mov	r0, r8
 8008c78:	46ac      	mov	ip, r5
 8008c7a:	46f2      	mov	sl, lr
 8008c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c80:	b293      	uxth	r3, r2
 8008c82:	fb06 e303 	mla	r3, r6, r3, lr
 8008c86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c8a:	0c1a      	lsrs	r2, r3, #16
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ebaa 0303 	sub.w	r3, sl, r3
 8008c92:	f8dc a000 	ldr.w	sl, [ip]
 8008c96:	fa13 f38a 	uxtah	r3, r3, sl
 8008c9a:	fb06 220e 	mla	r2, r6, lr, r2
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	9b00      	ldr	r3, [sp, #0]
 8008ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cb0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cb4:	4581      	cmp	r9, r0
 8008cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cba:	f84c 3b04 	str.w	r3, [ip], #4
 8008cbe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008cc2:	d2db      	bcs.n	8008c7c <quorem+0x42>
 8008cc4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cc8:	b92b      	cbnz	r3, 8008cd6 <quorem+0x9c>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	3b04      	subs	r3, #4
 8008cce:	429d      	cmp	r5, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	d32c      	bcc.n	8008d2e <quorem+0xf4>
 8008cd4:	613c      	str	r4, [r7, #16]
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f001 f9a8 	bl	800a02c <__mcmp>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	db22      	blt.n	8008d26 <quorem+0xec>
 8008ce0:	3601      	adds	r6, #1
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cea:	f8d1 c000 	ldr.w	ip, [r1]
 8008cee:	b293      	uxth	r3, r2
 8008cf0:	1ac3      	subs	r3, r0, r3
 8008cf2:	0c12      	lsrs	r2, r2, #16
 8008cf4:	fa13 f38c 	uxtah	r3, r3, ip
 8008cf8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008cfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d06:	45c1      	cmp	r9, r8
 8008d08:	f841 3b04 	str.w	r3, [r1], #4
 8008d0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d10:	d2e9      	bcs.n	8008ce6 <quorem+0xac>
 8008d12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d1a:	b922      	cbnz	r2, 8008d26 <quorem+0xec>
 8008d1c:	3b04      	subs	r3, #4
 8008d1e:	429d      	cmp	r5, r3
 8008d20:	461a      	mov	r2, r3
 8008d22:	d30a      	bcc.n	8008d3a <quorem+0x100>
 8008d24:	613c      	str	r4, [r7, #16]
 8008d26:	4630      	mov	r0, r6
 8008d28:	b003      	add	sp, #12
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	3b04      	subs	r3, #4
 8008d32:	2a00      	cmp	r2, #0
 8008d34:	d1ce      	bne.n	8008cd4 <quorem+0x9a>
 8008d36:	3c01      	subs	r4, #1
 8008d38:	e7c9      	b.n	8008cce <quorem+0x94>
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d1f0      	bne.n	8008d24 <quorem+0xea>
 8008d42:	3c01      	subs	r4, #1
 8008d44:	e7eb      	b.n	8008d1e <quorem+0xe4>
 8008d46:	2000      	movs	r0, #0
 8008d48:	e7ee      	b.n	8008d28 <quorem+0xee>
 8008d4a:	0000      	movs	r0, r0
 8008d4c:	0000      	movs	r0, r0
	...

08008d50 <_dtoa_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	ed2d 8b04 	vpush	{d8-d9}
 8008d58:	69c5      	ldr	r5, [r0, #28]
 8008d5a:	b093      	sub	sp, #76	; 0x4c
 8008d5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d60:	ec57 6b10 	vmov	r6, r7, d0
 8008d64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d68:	9107      	str	r1, [sp, #28]
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	920a      	str	r2, [sp, #40]	; 0x28
 8008d6e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d70:	b975      	cbnz	r5, 8008d90 <_dtoa_r+0x40>
 8008d72:	2010      	movs	r0, #16
 8008d74:	f000 fe2a 	bl	80099cc <malloc>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	61e0      	str	r0, [r4, #28]
 8008d7c:	b920      	cbnz	r0, 8008d88 <_dtoa_r+0x38>
 8008d7e:	4bae      	ldr	r3, [pc, #696]	; (8009038 <_dtoa_r+0x2e8>)
 8008d80:	21ef      	movs	r1, #239	; 0xef
 8008d82:	48ae      	ldr	r0, [pc, #696]	; (800903c <_dtoa_r+0x2ec>)
 8008d84:	f001 fe7e 	bl	800aa84 <__assert_func>
 8008d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d8c:	6005      	str	r5, [r0, #0]
 8008d8e:	60c5      	str	r5, [r0, #12]
 8008d90:	69e3      	ldr	r3, [r4, #28]
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	b151      	cbz	r1, 8008dac <_dtoa_r+0x5c>
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	604a      	str	r2, [r1, #4]
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	4093      	lsls	r3, r2
 8008d9e:	608b      	str	r3, [r1, #8]
 8008da0:	4620      	mov	r0, r4
 8008da2:	f000 ff07 	bl	8009bb4 <_Bfree>
 8008da6:	69e3      	ldr	r3, [r4, #28]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	1e3b      	subs	r3, r7, #0
 8008dae:	bfbb      	ittet	lt
 8008db0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008db4:	9303      	strlt	r3, [sp, #12]
 8008db6:	2300      	movge	r3, #0
 8008db8:	2201      	movlt	r2, #1
 8008dba:	bfac      	ite	ge
 8008dbc:	f8c8 3000 	strge.w	r3, [r8]
 8008dc0:	f8c8 2000 	strlt.w	r2, [r8]
 8008dc4:	4b9e      	ldr	r3, [pc, #632]	; (8009040 <_dtoa_r+0x2f0>)
 8008dc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008dca:	ea33 0308 	bics.w	r3, r3, r8
 8008dce:	d11b      	bne.n	8008e08 <_dtoa_r+0xb8>
 8008dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008ddc:	4333      	orrs	r3, r6
 8008dde:	f000 8593 	beq.w	8009908 <_dtoa_r+0xbb8>
 8008de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de4:	b963      	cbnz	r3, 8008e00 <_dtoa_r+0xb0>
 8008de6:	4b97      	ldr	r3, [pc, #604]	; (8009044 <_dtoa_r+0x2f4>)
 8008de8:	e027      	b.n	8008e3a <_dtoa_r+0xea>
 8008dea:	4b97      	ldr	r3, [pc, #604]	; (8009048 <_dtoa_r+0x2f8>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	9800      	ldr	r0, [sp, #0]
 8008df6:	b013      	add	sp, #76	; 0x4c
 8008df8:	ecbd 8b04 	vpop	{d8-d9}
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	4b90      	ldr	r3, [pc, #576]	; (8009044 <_dtoa_r+0x2f4>)
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	3303      	adds	r3, #3
 8008e06:	e7f3      	b.n	8008df0 <_dtoa_r+0xa0>
 8008e08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	ec51 0b17 	vmov	r0, r1, d7
 8008e12:	eeb0 8a47 	vmov.f32	s16, s14
 8008e16:	eef0 8a67 	vmov.f32	s17, s15
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f7f7 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e20:	4681      	mov	r9, r0
 8008e22:	b160      	cbz	r0, 8008e3e <_dtoa_r+0xee>
 8008e24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e26:	2301      	movs	r3, #1
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 8568 	beq.w	8009902 <_dtoa_r+0xbb2>
 8008e32:	4b86      	ldr	r3, [pc, #536]	; (800904c <_dtoa_r+0x2fc>)
 8008e34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	e7da      	b.n	8008df4 <_dtoa_r+0xa4>
 8008e3e:	aa10      	add	r2, sp, #64	; 0x40
 8008e40:	a911      	add	r1, sp, #68	; 0x44
 8008e42:	4620      	mov	r0, r4
 8008e44:	eeb0 0a48 	vmov.f32	s0, s16
 8008e48:	eef0 0a68 	vmov.f32	s1, s17
 8008e4c:	f001 f994 	bl	800a178 <__d2b>
 8008e50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008e54:	4682      	mov	sl, r0
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	d07f      	beq.n	8008f5a <_dtoa_r+0x20a>
 8008e5a:	ee18 3a90 	vmov	r3, s17
 8008e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e66:	ec51 0b18 	vmov	r0, r1, d8
 8008e6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008e76:	4619      	mov	r1, r3
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4b75      	ldr	r3, [pc, #468]	; (8009050 <_dtoa_r+0x300>)
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	a367      	add	r3, pc, #412	; (adr r3, 8009020 <_dtoa_r+0x2d0>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	f7f7 fbb7 	bl	80005f8 <__aeabi_dmul>
 8008e8a:	a367      	add	r3, pc, #412	; (adr r3, 8009028 <_dtoa_r+0x2d8>)
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f7f7 f9fc 	bl	800028c <__adddf3>
 8008e94:	4606      	mov	r6, r0
 8008e96:	4628      	mov	r0, r5
 8008e98:	460f      	mov	r7, r1
 8008e9a:	f7f7 fb43 	bl	8000524 <__aeabi_i2d>
 8008e9e:	a364      	add	r3, pc, #400	; (adr r3, 8009030 <_dtoa_r+0x2e0>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4630      	mov	r0, r6
 8008eae:	4639      	mov	r1, r7
 8008eb0:	f7f7 f9ec 	bl	800028c <__adddf3>
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	460f      	mov	r7, r1
 8008eb8:	f7f7 fe4e 	bl	8000b58 <__aeabi_d2iz>
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4683      	mov	fp, r0
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	f7f7 fe09 	bl	8000adc <__aeabi_dcmplt>
 8008eca:	b148      	cbz	r0, 8008ee0 <_dtoa_r+0x190>
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f7f7 fb29 	bl	8000524 <__aeabi_i2d>
 8008ed2:	4632      	mov	r2, r6
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	f7f7 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eda:	b908      	cbnz	r0, 8008ee0 <_dtoa_r+0x190>
 8008edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ee0:	f1bb 0f16 	cmp.w	fp, #22
 8008ee4:	d857      	bhi.n	8008f96 <_dtoa_r+0x246>
 8008ee6:	4b5b      	ldr	r3, [pc, #364]	; (8009054 <_dtoa_r+0x304>)
 8008ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	ec51 0b18 	vmov	r0, r1, d8
 8008ef4:	f7f7 fdf2 	bl	8000adc <__aeabi_dcmplt>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d04e      	beq.n	8008f9a <_dtoa_r+0x24a>
 8008efc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f00:	2300      	movs	r3, #0
 8008f02:	930c      	str	r3, [sp, #48]	; 0x30
 8008f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f06:	1b5b      	subs	r3, r3, r5
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	bf45      	ittet	mi
 8008f0c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f10:	9305      	strmi	r3, [sp, #20]
 8008f12:	2300      	movpl	r3, #0
 8008f14:	2300      	movmi	r3, #0
 8008f16:	9206      	str	r2, [sp, #24]
 8008f18:	bf54      	ite	pl
 8008f1a:	9305      	strpl	r3, [sp, #20]
 8008f1c:	9306      	strmi	r3, [sp, #24]
 8008f1e:	f1bb 0f00 	cmp.w	fp, #0
 8008f22:	db3c      	blt.n	8008f9e <_dtoa_r+0x24e>
 8008f24:	9b06      	ldr	r3, [sp, #24]
 8008f26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008f2a:	445b      	add	r3, fp
 8008f2c:	9306      	str	r3, [sp, #24]
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	9b07      	ldr	r3, [sp, #28]
 8008f34:	2b09      	cmp	r3, #9
 8008f36:	d868      	bhi.n	800900a <_dtoa_r+0x2ba>
 8008f38:	2b05      	cmp	r3, #5
 8008f3a:	bfc4      	itt	gt
 8008f3c:	3b04      	subgt	r3, #4
 8008f3e:	9307      	strgt	r3, [sp, #28]
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	f1a3 0302 	sub.w	r3, r3, #2
 8008f46:	bfcc      	ite	gt
 8008f48:	2500      	movgt	r5, #0
 8008f4a:	2501      	movle	r5, #1
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	f200 8085 	bhi.w	800905c <_dtoa_r+0x30c>
 8008f52:	e8df f003 	tbb	[pc, r3]
 8008f56:	3b2e      	.short	0x3b2e
 8008f58:	5839      	.short	0x5839
 8008f5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f5e:	441d      	add	r5, r3
 8008f60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	bfc1      	itttt	gt
 8008f68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008f70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008f74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f78:	bfd6      	itet	le
 8008f7a:	f1c3 0320 	rsble	r3, r3, #32
 8008f7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008f82:	fa06 f003 	lslle.w	r0, r6, r3
 8008f86:	f7f7 fabd 	bl	8000504 <__aeabi_ui2d>
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f90:	3d01      	subs	r5, #1
 8008f92:	920e      	str	r2, [sp, #56]	; 0x38
 8008f94:	e76f      	b.n	8008e76 <_dtoa_r+0x126>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e7b3      	b.n	8008f02 <_dtoa_r+0x1b2>
 8008f9a:	900c      	str	r0, [sp, #48]	; 0x30
 8008f9c:	e7b2      	b.n	8008f04 <_dtoa_r+0x1b4>
 8008f9e:	9b05      	ldr	r3, [sp, #20]
 8008fa0:	eba3 030b 	sub.w	r3, r3, fp
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	f1cb 0300 	rsb	r3, fp, #0
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	2300      	movs	r3, #0
 8008fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fb0:	e7bf      	b.n	8008f32 <_dtoa_r+0x1e2>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	dc52      	bgt.n	8009062 <_dtoa_r+0x312>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	9301      	str	r3, [sp, #4]
 8008fc0:	9304      	str	r3, [sp, #16]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	920a      	str	r2, [sp, #40]	; 0x28
 8008fc6:	e00b      	b.n	8008fe0 <_dtoa_r+0x290>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e7f3      	b.n	8008fb4 <_dtoa_r+0x264>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd2:	445b      	add	r3, fp
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	bfb8      	it	lt
 8008fde:	2301      	movlt	r3, #1
 8008fe0:	69e0      	ldr	r0, [r4, #28]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	f102 0614 	add.w	r6, r2, #20
 8008fea:	429e      	cmp	r6, r3
 8008fec:	d93d      	bls.n	800906a <_dtoa_r+0x31a>
 8008fee:	6041      	str	r1, [r0, #4]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fd9f 	bl	8009b34 <_Balloc>
 8008ff6:	9000      	str	r0, [sp, #0]
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d139      	bne.n	8009070 <_dtoa_r+0x320>
 8008ffc:	4b16      	ldr	r3, [pc, #88]	; (8009058 <_dtoa_r+0x308>)
 8008ffe:	4602      	mov	r2, r0
 8009000:	f240 11af 	movw	r1, #431	; 0x1af
 8009004:	e6bd      	b.n	8008d82 <_dtoa_r+0x32>
 8009006:	2301      	movs	r3, #1
 8009008:	e7e1      	b.n	8008fce <_dtoa_r+0x27e>
 800900a:	2501      	movs	r5, #1
 800900c:	2300      	movs	r3, #0
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	9509      	str	r5, [sp, #36]	; 0x24
 8009012:	f04f 33ff 	mov.w	r3, #4294967295
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	2200      	movs	r2, #0
 800901c:	2312      	movs	r3, #18
 800901e:	e7d1      	b.n	8008fc4 <_dtoa_r+0x274>
 8009020:	636f4361 	.word	0x636f4361
 8009024:	3fd287a7 	.word	0x3fd287a7
 8009028:	8b60c8b3 	.word	0x8b60c8b3
 800902c:	3fc68a28 	.word	0x3fc68a28
 8009030:	509f79fb 	.word	0x509f79fb
 8009034:	3fd34413 	.word	0x3fd34413
 8009038:	0800b75b 	.word	0x0800b75b
 800903c:	0800b772 	.word	0x0800b772
 8009040:	7ff00000 	.word	0x7ff00000
 8009044:	0800b757 	.word	0x0800b757
 8009048:	0800b74e 	.word	0x0800b74e
 800904c:	0800b72b 	.word	0x0800b72b
 8009050:	3ff80000 	.word	0x3ff80000
 8009054:	0800b860 	.word	0x0800b860
 8009058:	0800b7ca 	.word	0x0800b7ca
 800905c:	2301      	movs	r3, #1
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	e7d7      	b.n	8009012 <_dtoa_r+0x2c2>
 8009062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	9304      	str	r3, [sp, #16]
 8009068:	e7ba      	b.n	8008fe0 <_dtoa_r+0x290>
 800906a:	3101      	adds	r1, #1
 800906c:	0052      	lsls	r2, r2, #1
 800906e:	e7ba      	b.n	8008fe6 <_dtoa_r+0x296>
 8009070:	69e3      	ldr	r3, [r4, #28]
 8009072:	9a00      	ldr	r2, [sp, #0]
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	2b0e      	cmp	r3, #14
 800907a:	f200 80a8 	bhi.w	80091ce <_dtoa_r+0x47e>
 800907e:	2d00      	cmp	r5, #0
 8009080:	f000 80a5 	beq.w	80091ce <_dtoa_r+0x47e>
 8009084:	f1bb 0f00 	cmp.w	fp, #0
 8009088:	dd38      	ble.n	80090fc <_dtoa_r+0x3ac>
 800908a:	4bc0      	ldr	r3, [pc, #768]	; (800938c <_dtoa_r+0x63c>)
 800908c:	f00b 020f 	and.w	r2, fp, #15
 8009090:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009094:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009098:	e9d3 6700 	ldrd	r6, r7, [r3]
 800909c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80090a0:	d019      	beq.n	80090d6 <_dtoa_r+0x386>
 80090a2:	4bbb      	ldr	r3, [pc, #748]	; (8009390 <_dtoa_r+0x640>)
 80090a4:	ec51 0b18 	vmov	r0, r1, d8
 80090a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090ac:	f7f7 fbce 	bl	800084c <__aeabi_ddiv>
 80090b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b4:	f008 080f 	and.w	r8, r8, #15
 80090b8:	2503      	movs	r5, #3
 80090ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009390 <_dtoa_r+0x640>
 80090be:	f1b8 0f00 	cmp.w	r8, #0
 80090c2:	d10a      	bne.n	80090da <_dtoa_r+0x38a>
 80090c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c8:	4632      	mov	r2, r6
 80090ca:	463b      	mov	r3, r7
 80090cc:	f7f7 fbbe 	bl	800084c <__aeabi_ddiv>
 80090d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d4:	e02b      	b.n	800912e <_dtoa_r+0x3de>
 80090d6:	2502      	movs	r5, #2
 80090d8:	e7ef      	b.n	80090ba <_dtoa_r+0x36a>
 80090da:	f018 0f01 	tst.w	r8, #1
 80090de:	d008      	beq.n	80090f2 <_dtoa_r+0x3a2>
 80090e0:	4630      	mov	r0, r6
 80090e2:	4639      	mov	r1, r7
 80090e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80090e8:	f7f7 fa86 	bl	80005f8 <__aeabi_dmul>
 80090ec:	3501      	adds	r5, #1
 80090ee:	4606      	mov	r6, r0
 80090f0:	460f      	mov	r7, r1
 80090f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80090f6:	f109 0908 	add.w	r9, r9, #8
 80090fa:	e7e0      	b.n	80090be <_dtoa_r+0x36e>
 80090fc:	f000 809f 	beq.w	800923e <_dtoa_r+0x4ee>
 8009100:	f1cb 0600 	rsb	r6, fp, #0
 8009104:	4ba1      	ldr	r3, [pc, #644]	; (800938c <_dtoa_r+0x63c>)
 8009106:	4fa2      	ldr	r7, [pc, #648]	; (8009390 <_dtoa_r+0x640>)
 8009108:	f006 020f 	and.w	r2, r6, #15
 800910c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	ec51 0b18 	vmov	r0, r1, d8
 8009118:	f7f7 fa6e 	bl	80005f8 <__aeabi_dmul>
 800911c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009120:	1136      	asrs	r6, r6, #4
 8009122:	2300      	movs	r3, #0
 8009124:	2502      	movs	r5, #2
 8009126:	2e00      	cmp	r6, #0
 8009128:	d17e      	bne.n	8009228 <_dtoa_r+0x4d8>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d1d0      	bne.n	80090d0 <_dtoa_r+0x380>
 800912e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009130:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 8084 	beq.w	8009242 <_dtoa_r+0x4f2>
 800913a:	4b96      	ldr	r3, [pc, #600]	; (8009394 <_dtoa_r+0x644>)
 800913c:	2200      	movs	r2, #0
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	f7f7 fccb 	bl	8000adc <__aeabi_dcmplt>
 8009146:	2800      	cmp	r0, #0
 8009148:	d07b      	beq.n	8009242 <_dtoa_r+0x4f2>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d078      	beq.n	8009242 <_dtoa_r+0x4f2>
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dd39      	ble.n	80091ca <_dtoa_r+0x47a>
 8009156:	4b90      	ldr	r3, [pc, #576]	; (8009398 <_dtoa_r+0x648>)
 8009158:	2200      	movs	r2, #0
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009166:	9e01      	ldr	r6, [sp, #4]
 8009168:	f10b 37ff 	add.w	r7, fp, #4294967295
 800916c:	3501      	adds	r5, #1
 800916e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009172:	4628      	mov	r0, r5
 8009174:	f7f7 f9d6 	bl	8000524 <__aeabi_i2d>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	f7f7 fa3c 	bl	80005f8 <__aeabi_dmul>
 8009180:	4b86      	ldr	r3, [pc, #536]	; (800939c <_dtoa_r+0x64c>)
 8009182:	2200      	movs	r2, #0
 8009184:	f7f7 f882 	bl	800028c <__adddf3>
 8009188:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800918c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009190:	9303      	str	r3, [sp, #12]
 8009192:	2e00      	cmp	r6, #0
 8009194:	d158      	bne.n	8009248 <_dtoa_r+0x4f8>
 8009196:	4b82      	ldr	r3, [pc, #520]	; (80093a0 <_dtoa_r+0x650>)
 8009198:	2200      	movs	r2, #0
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f7f7 f873 	bl	8000288 <__aeabi_dsub>
 80091a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a6:	4680      	mov	r8, r0
 80091a8:	4689      	mov	r9, r1
 80091aa:	f7f7 fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f040 8296 	bne.w	80096e0 <_dtoa_r+0x990>
 80091b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80091b8:	4640      	mov	r0, r8
 80091ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f040 8289 	bne.w	80096dc <_dtoa_r+0x98c>
 80091ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f2c0 814e 	blt.w	8009472 <_dtoa_r+0x722>
 80091d6:	f1bb 0f0e 	cmp.w	fp, #14
 80091da:	f300 814a 	bgt.w	8009472 <_dtoa_r+0x722>
 80091de:	4b6b      	ldr	r3, [pc, #428]	; (800938c <_dtoa_r+0x63c>)
 80091e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f280 80dc 	bge.w	80093a8 <_dtoa_r+0x658>
 80091f0:	9b04      	ldr	r3, [sp, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f300 80d8 	bgt.w	80093a8 <_dtoa_r+0x658>
 80091f8:	f040 826f 	bne.w	80096da <_dtoa_r+0x98a>
 80091fc:	4b68      	ldr	r3, [pc, #416]	; (80093a0 <_dtoa_r+0x650>)
 80091fe:	2200      	movs	r2, #0
 8009200:	4640      	mov	r0, r8
 8009202:	4649      	mov	r1, r9
 8009204:	f7f7 f9f8 	bl	80005f8 <__aeabi_dmul>
 8009208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920c:	f7f7 fc7a 	bl	8000b04 <__aeabi_dcmpge>
 8009210:	9e04      	ldr	r6, [sp, #16]
 8009212:	4637      	mov	r7, r6
 8009214:	2800      	cmp	r0, #0
 8009216:	f040 8245 	bne.w	80096a4 <_dtoa_r+0x954>
 800921a:	9d00      	ldr	r5, [sp, #0]
 800921c:	2331      	movs	r3, #49	; 0x31
 800921e:	f805 3b01 	strb.w	r3, [r5], #1
 8009222:	f10b 0b01 	add.w	fp, fp, #1
 8009226:	e241      	b.n	80096ac <_dtoa_r+0x95c>
 8009228:	07f2      	lsls	r2, r6, #31
 800922a:	d505      	bpl.n	8009238 <_dtoa_r+0x4e8>
 800922c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	3501      	adds	r5, #1
 8009236:	2301      	movs	r3, #1
 8009238:	1076      	asrs	r6, r6, #1
 800923a:	3708      	adds	r7, #8
 800923c:	e773      	b.n	8009126 <_dtoa_r+0x3d6>
 800923e:	2502      	movs	r5, #2
 8009240:	e775      	b.n	800912e <_dtoa_r+0x3de>
 8009242:	9e04      	ldr	r6, [sp, #16]
 8009244:	465f      	mov	r7, fp
 8009246:	e792      	b.n	800916e <_dtoa_r+0x41e>
 8009248:	9900      	ldr	r1, [sp, #0]
 800924a:	4b50      	ldr	r3, [pc, #320]	; (800938c <_dtoa_r+0x63c>)
 800924c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009250:	4431      	add	r1, r6
 8009252:	9102      	str	r1, [sp, #8]
 8009254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009256:	eeb0 9a47 	vmov.f32	s18, s14
 800925a:	eef0 9a67 	vmov.f32	s19, s15
 800925e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009262:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009266:	2900      	cmp	r1, #0
 8009268:	d044      	beq.n	80092f4 <_dtoa_r+0x5a4>
 800926a:	494e      	ldr	r1, [pc, #312]	; (80093a4 <_dtoa_r+0x654>)
 800926c:	2000      	movs	r0, #0
 800926e:	f7f7 faed 	bl	800084c <__aeabi_ddiv>
 8009272:	ec53 2b19 	vmov	r2, r3, d9
 8009276:	f7f7 f807 	bl	8000288 <__aeabi_dsub>
 800927a:	9d00      	ldr	r5, [sp, #0]
 800927c:	ec41 0b19 	vmov	d9, r0, r1
 8009280:	4649      	mov	r1, r9
 8009282:	4640      	mov	r0, r8
 8009284:	f7f7 fc68 	bl	8000b58 <__aeabi_d2iz>
 8009288:	4606      	mov	r6, r0
 800928a:	f7f7 f94b 	bl	8000524 <__aeabi_i2d>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4640      	mov	r0, r8
 8009294:	4649      	mov	r1, r9
 8009296:	f7f6 fff7 	bl	8000288 <__aeabi_dsub>
 800929a:	3630      	adds	r6, #48	; 0x30
 800929c:	f805 6b01 	strb.w	r6, [r5], #1
 80092a0:	ec53 2b19 	vmov	r2, r3, d9
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	f7f7 fc18 	bl	8000adc <__aeabi_dcmplt>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d164      	bne.n	800937a <_dtoa_r+0x62a>
 80092b0:	4642      	mov	r2, r8
 80092b2:	464b      	mov	r3, r9
 80092b4:	4937      	ldr	r1, [pc, #220]	; (8009394 <_dtoa_r+0x644>)
 80092b6:	2000      	movs	r0, #0
 80092b8:	f7f6 ffe6 	bl	8000288 <__aeabi_dsub>
 80092bc:	ec53 2b19 	vmov	r2, r3, d9
 80092c0:	f7f7 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	f040 80b6 	bne.w	8009436 <_dtoa_r+0x6e6>
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	429d      	cmp	r5, r3
 80092ce:	f43f af7c 	beq.w	80091ca <_dtoa_r+0x47a>
 80092d2:	4b31      	ldr	r3, [pc, #196]	; (8009398 <_dtoa_r+0x648>)
 80092d4:	ec51 0b19 	vmov	r0, r1, d9
 80092d8:	2200      	movs	r2, #0
 80092da:	f7f7 f98d 	bl	80005f8 <__aeabi_dmul>
 80092de:	4b2e      	ldr	r3, [pc, #184]	; (8009398 <_dtoa_r+0x648>)
 80092e0:	ec41 0b19 	vmov	d9, r0, r1
 80092e4:	2200      	movs	r2, #0
 80092e6:	4640      	mov	r0, r8
 80092e8:	4649      	mov	r1, r9
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	4680      	mov	r8, r0
 80092f0:	4689      	mov	r9, r1
 80092f2:	e7c5      	b.n	8009280 <_dtoa_r+0x530>
 80092f4:	ec51 0b17 	vmov	r0, r1, d7
 80092f8:	f7f7 f97e 	bl	80005f8 <__aeabi_dmul>
 80092fc:	9b02      	ldr	r3, [sp, #8]
 80092fe:	9d00      	ldr	r5, [sp, #0]
 8009300:	930f      	str	r3, [sp, #60]	; 0x3c
 8009302:	ec41 0b19 	vmov	d9, r0, r1
 8009306:	4649      	mov	r1, r9
 8009308:	4640      	mov	r0, r8
 800930a:	f7f7 fc25 	bl	8000b58 <__aeabi_d2iz>
 800930e:	4606      	mov	r6, r0
 8009310:	f7f7 f908 	bl	8000524 <__aeabi_i2d>
 8009314:	3630      	adds	r6, #48	; 0x30
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	f805 6b01 	strb.w	r6, [r5], #1
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	429d      	cmp	r5, r3
 800932a:	4680      	mov	r8, r0
 800932c:	4689      	mov	r9, r1
 800932e:	f04f 0200 	mov.w	r2, #0
 8009332:	d124      	bne.n	800937e <_dtoa_r+0x62e>
 8009334:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <_dtoa_r+0x654>)
 8009336:	ec51 0b19 	vmov	r0, r1, d9
 800933a:	f7f6 ffa7 	bl	800028c <__adddf3>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4640      	mov	r0, r8
 8009344:	4649      	mov	r1, r9
 8009346:	f7f7 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	d173      	bne.n	8009436 <_dtoa_r+0x6e6>
 800934e:	ec53 2b19 	vmov	r2, r3, d9
 8009352:	4914      	ldr	r1, [pc, #80]	; (80093a4 <_dtoa_r+0x654>)
 8009354:	2000      	movs	r0, #0
 8009356:	f7f6 ff97 	bl	8000288 <__aeabi_dsub>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4640      	mov	r0, r8
 8009360:	4649      	mov	r1, r9
 8009362:	f7f7 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8009366:	2800      	cmp	r0, #0
 8009368:	f43f af2f 	beq.w	80091ca <_dtoa_r+0x47a>
 800936c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800936e:	1e6b      	subs	r3, r5, #1
 8009370:	930f      	str	r3, [sp, #60]	; 0x3c
 8009372:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009376:	2b30      	cmp	r3, #48	; 0x30
 8009378:	d0f8      	beq.n	800936c <_dtoa_r+0x61c>
 800937a:	46bb      	mov	fp, r7
 800937c:	e04a      	b.n	8009414 <_dtoa_r+0x6c4>
 800937e:	4b06      	ldr	r3, [pc, #24]	; (8009398 <_dtoa_r+0x648>)
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	4680      	mov	r8, r0
 8009386:	4689      	mov	r9, r1
 8009388:	e7bd      	b.n	8009306 <_dtoa_r+0x5b6>
 800938a:	bf00      	nop
 800938c:	0800b860 	.word	0x0800b860
 8009390:	0800b838 	.word	0x0800b838
 8009394:	3ff00000 	.word	0x3ff00000
 8009398:	40240000 	.word	0x40240000
 800939c:	401c0000 	.word	0x401c0000
 80093a0:	40140000 	.word	0x40140000
 80093a4:	3fe00000 	.word	0x3fe00000
 80093a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ac:	9d00      	ldr	r5, [sp, #0]
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	4630      	mov	r0, r6
 80093b4:	4639      	mov	r1, r7
 80093b6:	f7f7 fa49 	bl	800084c <__aeabi_ddiv>
 80093ba:	f7f7 fbcd 	bl	8000b58 <__aeabi_d2iz>
 80093be:	9001      	str	r0, [sp, #4]
 80093c0:	f7f7 f8b0 	bl	8000524 <__aeabi_i2d>
 80093c4:	4642      	mov	r2, r8
 80093c6:	464b      	mov	r3, r9
 80093c8:	f7f7 f916 	bl	80005f8 <__aeabi_dmul>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	f7f6 ff58 	bl	8000288 <__aeabi_dsub>
 80093d8:	9e01      	ldr	r6, [sp, #4]
 80093da:	9f04      	ldr	r7, [sp, #16]
 80093dc:	3630      	adds	r6, #48	; 0x30
 80093de:	f805 6b01 	strb.w	r6, [r5], #1
 80093e2:	9e00      	ldr	r6, [sp, #0]
 80093e4:	1bae      	subs	r6, r5, r6
 80093e6:	42b7      	cmp	r7, r6
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	d134      	bne.n	8009458 <_dtoa_r+0x708>
 80093ee:	f7f6 ff4d 	bl	800028c <__adddf3>
 80093f2:	4642      	mov	r2, r8
 80093f4:	464b      	mov	r3, r9
 80093f6:	4606      	mov	r6, r0
 80093f8:	460f      	mov	r7, r1
 80093fa:	f7f7 fb8d 	bl	8000b18 <__aeabi_dcmpgt>
 80093fe:	b9c8      	cbnz	r0, 8009434 <_dtoa_r+0x6e4>
 8009400:	4642      	mov	r2, r8
 8009402:	464b      	mov	r3, r9
 8009404:	4630      	mov	r0, r6
 8009406:	4639      	mov	r1, r7
 8009408:	f7f7 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800940c:	b110      	cbz	r0, 8009414 <_dtoa_r+0x6c4>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	07db      	lsls	r3, r3, #31
 8009412:	d40f      	bmi.n	8009434 <_dtoa_r+0x6e4>
 8009414:	4651      	mov	r1, sl
 8009416:	4620      	mov	r0, r4
 8009418:	f000 fbcc 	bl	8009bb4 <_Bfree>
 800941c:	2300      	movs	r3, #0
 800941e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009420:	702b      	strb	r3, [r5, #0]
 8009422:	f10b 0301 	add.w	r3, fp, #1
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800942a:	2b00      	cmp	r3, #0
 800942c:	f43f ace2 	beq.w	8008df4 <_dtoa_r+0xa4>
 8009430:	601d      	str	r5, [r3, #0]
 8009432:	e4df      	b.n	8008df4 <_dtoa_r+0xa4>
 8009434:	465f      	mov	r7, fp
 8009436:	462b      	mov	r3, r5
 8009438:	461d      	mov	r5, r3
 800943a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800943e:	2a39      	cmp	r2, #57	; 0x39
 8009440:	d106      	bne.n	8009450 <_dtoa_r+0x700>
 8009442:	9a00      	ldr	r2, [sp, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d1f7      	bne.n	8009438 <_dtoa_r+0x6e8>
 8009448:	9900      	ldr	r1, [sp, #0]
 800944a:	2230      	movs	r2, #48	; 0x30
 800944c:	3701      	adds	r7, #1
 800944e:	700a      	strb	r2, [r1, #0]
 8009450:	781a      	ldrb	r2, [r3, #0]
 8009452:	3201      	adds	r2, #1
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	e790      	b.n	800937a <_dtoa_r+0x62a>
 8009458:	4ba3      	ldr	r3, [pc, #652]	; (80096e8 <_dtoa_r+0x998>)
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f8cc 	bl	80005f8 <__aeabi_dmul>
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	4606      	mov	r6, r0
 8009466:	460f      	mov	r7, r1
 8009468:	f7f7 fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800946c:	2800      	cmp	r0, #0
 800946e:	d09e      	beq.n	80093ae <_dtoa_r+0x65e>
 8009470:	e7d0      	b.n	8009414 <_dtoa_r+0x6c4>
 8009472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009474:	2a00      	cmp	r2, #0
 8009476:	f000 80ca 	beq.w	800960e <_dtoa_r+0x8be>
 800947a:	9a07      	ldr	r2, [sp, #28]
 800947c:	2a01      	cmp	r2, #1
 800947e:	f300 80ad 	bgt.w	80095dc <_dtoa_r+0x88c>
 8009482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009484:	2a00      	cmp	r2, #0
 8009486:	f000 80a5 	beq.w	80095d4 <_dtoa_r+0x884>
 800948a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800948e:	9e08      	ldr	r6, [sp, #32]
 8009490:	9d05      	ldr	r5, [sp, #20]
 8009492:	9a05      	ldr	r2, [sp, #20]
 8009494:	441a      	add	r2, r3
 8009496:	9205      	str	r2, [sp, #20]
 8009498:	9a06      	ldr	r2, [sp, #24]
 800949a:	2101      	movs	r1, #1
 800949c:	441a      	add	r2, r3
 800949e:	4620      	mov	r0, r4
 80094a0:	9206      	str	r2, [sp, #24]
 80094a2:	f000 fc3d 	bl	8009d20 <__i2b>
 80094a6:	4607      	mov	r7, r0
 80094a8:	b165      	cbz	r5, 80094c4 <_dtoa_r+0x774>
 80094aa:	9b06      	ldr	r3, [sp, #24]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dd09      	ble.n	80094c4 <_dtoa_r+0x774>
 80094b0:	42ab      	cmp	r3, r5
 80094b2:	9a05      	ldr	r2, [sp, #20]
 80094b4:	bfa8      	it	ge
 80094b6:	462b      	movge	r3, r5
 80094b8:	1ad2      	subs	r2, r2, r3
 80094ba:	9205      	str	r2, [sp, #20]
 80094bc:	9a06      	ldr	r2, [sp, #24]
 80094be:	1aed      	subs	r5, r5, r3
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	9306      	str	r3, [sp, #24]
 80094c4:	9b08      	ldr	r3, [sp, #32]
 80094c6:	b1f3      	cbz	r3, 8009506 <_dtoa_r+0x7b6>
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 80a3 	beq.w	8009616 <_dtoa_r+0x8c6>
 80094d0:	2e00      	cmp	r6, #0
 80094d2:	dd10      	ble.n	80094f6 <_dtoa_r+0x7a6>
 80094d4:	4639      	mov	r1, r7
 80094d6:	4632      	mov	r2, r6
 80094d8:	4620      	mov	r0, r4
 80094da:	f000 fce1 	bl	8009ea0 <__pow5mult>
 80094de:	4652      	mov	r2, sl
 80094e0:	4601      	mov	r1, r0
 80094e2:	4607      	mov	r7, r0
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fc31 	bl	8009d4c <__multiply>
 80094ea:	4651      	mov	r1, sl
 80094ec:	4680      	mov	r8, r0
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fb60 	bl	8009bb4 <_Bfree>
 80094f4:	46c2      	mov	sl, r8
 80094f6:	9b08      	ldr	r3, [sp, #32]
 80094f8:	1b9a      	subs	r2, r3, r6
 80094fa:	d004      	beq.n	8009506 <_dtoa_r+0x7b6>
 80094fc:	4651      	mov	r1, sl
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fcce 	bl	8009ea0 <__pow5mult>
 8009504:	4682      	mov	sl, r0
 8009506:	2101      	movs	r1, #1
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fc09 	bl	8009d20 <__i2b>
 800950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009510:	2b00      	cmp	r3, #0
 8009512:	4606      	mov	r6, r0
 8009514:	f340 8081 	ble.w	800961a <_dtoa_r+0x8ca>
 8009518:	461a      	mov	r2, r3
 800951a:	4601      	mov	r1, r0
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fcbf 	bl	8009ea0 <__pow5mult>
 8009522:	9b07      	ldr	r3, [sp, #28]
 8009524:	2b01      	cmp	r3, #1
 8009526:	4606      	mov	r6, r0
 8009528:	dd7a      	ble.n	8009620 <_dtoa_r+0x8d0>
 800952a:	f04f 0800 	mov.w	r8, #0
 800952e:	6933      	ldr	r3, [r6, #16]
 8009530:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009534:	6918      	ldr	r0, [r3, #16]
 8009536:	f000 fba5 	bl	8009c84 <__hi0bits>
 800953a:	f1c0 0020 	rsb	r0, r0, #32
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	4418      	add	r0, r3
 8009542:	f010 001f 	ands.w	r0, r0, #31
 8009546:	f000 8094 	beq.w	8009672 <_dtoa_r+0x922>
 800954a:	f1c0 0320 	rsb	r3, r0, #32
 800954e:	2b04      	cmp	r3, #4
 8009550:	f340 8085 	ble.w	800965e <_dtoa_r+0x90e>
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	f1c0 001c 	rsb	r0, r0, #28
 800955a:	4403      	add	r3, r0
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	9b06      	ldr	r3, [sp, #24]
 8009560:	4403      	add	r3, r0
 8009562:	4405      	add	r5, r0
 8009564:	9306      	str	r3, [sp, #24]
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dd05      	ble.n	8009578 <_dtoa_r+0x828>
 800956c:	4651      	mov	r1, sl
 800956e:	461a      	mov	r2, r3
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fcef 	bl	8009f54 <__lshift>
 8009576:	4682      	mov	sl, r0
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	2b00      	cmp	r3, #0
 800957c:	dd05      	ble.n	800958a <_dtoa_r+0x83a>
 800957e:	4631      	mov	r1, r6
 8009580:	461a      	mov	r2, r3
 8009582:	4620      	mov	r0, r4
 8009584:	f000 fce6 	bl	8009f54 <__lshift>
 8009588:	4606      	mov	r6, r0
 800958a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800958c:	2b00      	cmp	r3, #0
 800958e:	d072      	beq.n	8009676 <_dtoa_r+0x926>
 8009590:	4631      	mov	r1, r6
 8009592:	4650      	mov	r0, sl
 8009594:	f000 fd4a 	bl	800a02c <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	da6c      	bge.n	8009676 <_dtoa_r+0x926>
 800959c:	2300      	movs	r3, #0
 800959e:	4651      	mov	r1, sl
 80095a0:	220a      	movs	r2, #10
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 fb28 	bl	8009bf8 <__multadd>
 80095a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095ae:	4682      	mov	sl, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 81b0 	beq.w	8009916 <_dtoa_r+0xbc6>
 80095b6:	2300      	movs	r3, #0
 80095b8:	4639      	mov	r1, r7
 80095ba:	220a      	movs	r2, #10
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fb1b 	bl	8009bf8 <__multadd>
 80095c2:	9b01      	ldr	r3, [sp, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	4607      	mov	r7, r0
 80095c8:	f300 8096 	bgt.w	80096f8 <_dtoa_r+0x9a8>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	dc59      	bgt.n	8009686 <_dtoa_r+0x936>
 80095d2:	e091      	b.n	80096f8 <_dtoa_r+0x9a8>
 80095d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095da:	e758      	b.n	800948e <_dtoa_r+0x73e>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	1e5e      	subs	r6, r3, #1
 80095e0:	9b08      	ldr	r3, [sp, #32]
 80095e2:	42b3      	cmp	r3, r6
 80095e4:	bfbf      	itttt	lt
 80095e6:	9b08      	ldrlt	r3, [sp, #32]
 80095e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80095ea:	9608      	strlt	r6, [sp, #32]
 80095ec:	1af3      	sublt	r3, r6, r3
 80095ee:	bfb4      	ite	lt
 80095f0:	18d2      	addlt	r2, r2, r3
 80095f2:	1b9e      	subge	r6, r3, r6
 80095f4:	9b04      	ldr	r3, [sp, #16]
 80095f6:	bfbc      	itt	lt
 80095f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80095fa:	2600      	movlt	r6, #0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	bfb7      	itett	lt
 8009600:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009604:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009608:	1a9d      	sublt	r5, r3, r2
 800960a:	2300      	movlt	r3, #0
 800960c:	e741      	b.n	8009492 <_dtoa_r+0x742>
 800960e:	9e08      	ldr	r6, [sp, #32]
 8009610:	9d05      	ldr	r5, [sp, #20]
 8009612:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009614:	e748      	b.n	80094a8 <_dtoa_r+0x758>
 8009616:	9a08      	ldr	r2, [sp, #32]
 8009618:	e770      	b.n	80094fc <_dtoa_r+0x7ac>
 800961a:	9b07      	ldr	r3, [sp, #28]
 800961c:	2b01      	cmp	r3, #1
 800961e:	dc19      	bgt.n	8009654 <_dtoa_r+0x904>
 8009620:	9b02      	ldr	r3, [sp, #8]
 8009622:	b9bb      	cbnz	r3, 8009654 <_dtoa_r+0x904>
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800962a:	b99b      	cbnz	r3, 8009654 <_dtoa_r+0x904>
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009632:	0d1b      	lsrs	r3, r3, #20
 8009634:	051b      	lsls	r3, r3, #20
 8009636:	b183      	cbz	r3, 800965a <_dtoa_r+0x90a>
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	9b06      	ldr	r3, [sp, #24]
 8009640:	3301      	adds	r3, #1
 8009642:	9306      	str	r3, [sp, #24]
 8009644:	f04f 0801 	mov.w	r8, #1
 8009648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af6f 	bne.w	800952e <_dtoa_r+0x7de>
 8009650:	2001      	movs	r0, #1
 8009652:	e774      	b.n	800953e <_dtoa_r+0x7ee>
 8009654:	f04f 0800 	mov.w	r8, #0
 8009658:	e7f6      	b.n	8009648 <_dtoa_r+0x8f8>
 800965a:	4698      	mov	r8, r3
 800965c:	e7f4      	b.n	8009648 <_dtoa_r+0x8f8>
 800965e:	d082      	beq.n	8009566 <_dtoa_r+0x816>
 8009660:	9a05      	ldr	r2, [sp, #20]
 8009662:	331c      	adds	r3, #28
 8009664:	441a      	add	r2, r3
 8009666:	9205      	str	r2, [sp, #20]
 8009668:	9a06      	ldr	r2, [sp, #24]
 800966a:	441a      	add	r2, r3
 800966c:	441d      	add	r5, r3
 800966e:	9206      	str	r2, [sp, #24]
 8009670:	e779      	b.n	8009566 <_dtoa_r+0x816>
 8009672:	4603      	mov	r3, r0
 8009674:	e7f4      	b.n	8009660 <_dtoa_r+0x910>
 8009676:	9b04      	ldr	r3, [sp, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dc37      	bgt.n	80096ec <_dtoa_r+0x99c>
 800967c:	9b07      	ldr	r3, [sp, #28]
 800967e:	2b02      	cmp	r3, #2
 8009680:	dd34      	ble.n	80096ec <_dtoa_r+0x99c>
 8009682:	9b04      	ldr	r3, [sp, #16]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	b963      	cbnz	r3, 80096a4 <_dtoa_r+0x954>
 800968a:	4631      	mov	r1, r6
 800968c:	2205      	movs	r2, #5
 800968e:	4620      	mov	r0, r4
 8009690:	f000 fab2 	bl	8009bf8 <__multadd>
 8009694:	4601      	mov	r1, r0
 8009696:	4606      	mov	r6, r0
 8009698:	4650      	mov	r0, sl
 800969a:	f000 fcc7 	bl	800a02c <__mcmp>
 800969e:	2800      	cmp	r0, #0
 80096a0:	f73f adbb 	bgt.w	800921a <_dtoa_r+0x4ca>
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	9d00      	ldr	r5, [sp, #0]
 80096a8:	ea6f 0b03 	mvn.w	fp, r3
 80096ac:	f04f 0800 	mov.w	r8, #0
 80096b0:	4631      	mov	r1, r6
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fa7e 	bl	8009bb4 <_Bfree>
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	f43f aeab 	beq.w	8009414 <_dtoa_r+0x6c4>
 80096be:	f1b8 0f00 	cmp.w	r8, #0
 80096c2:	d005      	beq.n	80096d0 <_dtoa_r+0x980>
 80096c4:	45b8      	cmp	r8, r7
 80096c6:	d003      	beq.n	80096d0 <_dtoa_r+0x980>
 80096c8:	4641      	mov	r1, r8
 80096ca:	4620      	mov	r0, r4
 80096cc:	f000 fa72 	bl	8009bb4 <_Bfree>
 80096d0:	4639      	mov	r1, r7
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 fa6e 	bl	8009bb4 <_Bfree>
 80096d8:	e69c      	b.n	8009414 <_dtoa_r+0x6c4>
 80096da:	2600      	movs	r6, #0
 80096dc:	4637      	mov	r7, r6
 80096de:	e7e1      	b.n	80096a4 <_dtoa_r+0x954>
 80096e0:	46bb      	mov	fp, r7
 80096e2:	4637      	mov	r7, r6
 80096e4:	e599      	b.n	800921a <_dtoa_r+0x4ca>
 80096e6:	bf00      	nop
 80096e8:	40240000 	.word	0x40240000
 80096ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 80c8 	beq.w	8009884 <_dtoa_r+0xb34>
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	dd05      	ble.n	8009708 <_dtoa_r+0x9b8>
 80096fc:	4639      	mov	r1, r7
 80096fe:	462a      	mov	r2, r5
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fc27 	bl	8009f54 <__lshift>
 8009706:	4607      	mov	r7, r0
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	d05b      	beq.n	80097c6 <_dtoa_r+0xa76>
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4620      	mov	r0, r4
 8009712:	f000 fa0f 	bl	8009b34 <_Balloc>
 8009716:	4605      	mov	r5, r0
 8009718:	b928      	cbnz	r0, 8009726 <_dtoa_r+0x9d6>
 800971a:	4b83      	ldr	r3, [pc, #524]	; (8009928 <_dtoa_r+0xbd8>)
 800971c:	4602      	mov	r2, r0
 800971e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009722:	f7ff bb2e 	b.w	8008d82 <_dtoa_r+0x32>
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	3202      	adds	r2, #2
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	f107 010c 	add.w	r1, r7, #12
 8009730:	300c      	adds	r0, #12
 8009732:	f7ff fa74 	bl	8008c1e <memcpy>
 8009736:	2201      	movs	r2, #1
 8009738:	4629      	mov	r1, r5
 800973a:	4620      	mov	r0, r4
 800973c:	f000 fc0a 	bl	8009f54 <__lshift>
 8009740:	9b00      	ldr	r3, [sp, #0]
 8009742:	3301      	adds	r3, #1
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800974a:	4413      	add	r3, r2
 800974c:	9308      	str	r3, [sp, #32]
 800974e:	9b02      	ldr	r3, [sp, #8]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	46b8      	mov	r8, r7
 8009756:	9306      	str	r3, [sp, #24]
 8009758:	4607      	mov	r7, r0
 800975a:	9b04      	ldr	r3, [sp, #16]
 800975c:	4631      	mov	r1, r6
 800975e:	3b01      	subs	r3, #1
 8009760:	4650      	mov	r0, sl
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f7ff fa69 	bl	8008c3a <quorem>
 8009768:	4641      	mov	r1, r8
 800976a:	9002      	str	r0, [sp, #8]
 800976c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009770:	4650      	mov	r0, sl
 8009772:	f000 fc5b 	bl	800a02c <__mcmp>
 8009776:	463a      	mov	r2, r7
 8009778:	9005      	str	r0, [sp, #20]
 800977a:	4631      	mov	r1, r6
 800977c:	4620      	mov	r0, r4
 800977e:	f000 fc71 	bl	800a064 <__mdiff>
 8009782:	68c2      	ldr	r2, [r0, #12]
 8009784:	4605      	mov	r5, r0
 8009786:	bb02      	cbnz	r2, 80097ca <_dtoa_r+0xa7a>
 8009788:	4601      	mov	r1, r0
 800978a:	4650      	mov	r0, sl
 800978c:	f000 fc4e 	bl	800a02c <__mcmp>
 8009790:	4602      	mov	r2, r0
 8009792:	4629      	mov	r1, r5
 8009794:	4620      	mov	r0, r4
 8009796:	9209      	str	r2, [sp, #36]	; 0x24
 8009798:	f000 fa0c 	bl	8009bb4 <_Bfree>
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097a0:	9d04      	ldr	r5, [sp, #16]
 80097a2:	ea43 0102 	orr.w	r1, r3, r2
 80097a6:	9b06      	ldr	r3, [sp, #24]
 80097a8:	4319      	orrs	r1, r3
 80097aa:	d110      	bne.n	80097ce <_dtoa_r+0xa7e>
 80097ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097b0:	d029      	beq.n	8009806 <_dtoa_r+0xab6>
 80097b2:	9b05      	ldr	r3, [sp, #20]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	dd02      	ble.n	80097be <_dtoa_r+0xa6e>
 80097b8:	9b02      	ldr	r3, [sp, #8]
 80097ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	f883 9000 	strb.w	r9, [r3]
 80097c4:	e774      	b.n	80096b0 <_dtoa_r+0x960>
 80097c6:	4638      	mov	r0, r7
 80097c8:	e7ba      	b.n	8009740 <_dtoa_r+0x9f0>
 80097ca:	2201      	movs	r2, #1
 80097cc:	e7e1      	b.n	8009792 <_dtoa_r+0xa42>
 80097ce:	9b05      	ldr	r3, [sp, #20]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db04      	blt.n	80097de <_dtoa_r+0xa8e>
 80097d4:	9907      	ldr	r1, [sp, #28]
 80097d6:	430b      	orrs	r3, r1
 80097d8:	9906      	ldr	r1, [sp, #24]
 80097da:	430b      	orrs	r3, r1
 80097dc:	d120      	bne.n	8009820 <_dtoa_r+0xad0>
 80097de:	2a00      	cmp	r2, #0
 80097e0:	dded      	ble.n	80097be <_dtoa_r+0xa6e>
 80097e2:	4651      	mov	r1, sl
 80097e4:	2201      	movs	r2, #1
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 fbb4 	bl	8009f54 <__lshift>
 80097ec:	4631      	mov	r1, r6
 80097ee:	4682      	mov	sl, r0
 80097f0:	f000 fc1c 	bl	800a02c <__mcmp>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	dc03      	bgt.n	8009800 <_dtoa_r+0xab0>
 80097f8:	d1e1      	bne.n	80097be <_dtoa_r+0xa6e>
 80097fa:	f019 0f01 	tst.w	r9, #1
 80097fe:	d0de      	beq.n	80097be <_dtoa_r+0xa6e>
 8009800:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009804:	d1d8      	bne.n	80097b8 <_dtoa_r+0xa68>
 8009806:	9a01      	ldr	r2, [sp, #4]
 8009808:	2339      	movs	r3, #57	; 0x39
 800980a:	7013      	strb	r3, [r2, #0]
 800980c:	462b      	mov	r3, r5
 800980e:	461d      	mov	r5, r3
 8009810:	3b01      	subs	r3, #1
 8009812:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009816:	2a39      	cmp	r2, #57	; 0x39
 8009818:	d06c      	beq.n	80098f4 <_dtoa_r+0xba4>
 800981a:	3201      	adds	r2, #1
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e747      	b.n	80096b0 <_dtoa_r+0x960>
 8009820:	2a00      	cmp	r2, #0
 8009822:	dd07      	ble.n	8009834 <_dtoa_r+0xae4>
 8009824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009828:	d0ed      	beq.n	8009806 <_dtoa_r+0xab6>
 800982a:	9a01      	ldr	r2, [sp, #4]
 800982c:	f109 0301 	add.w	r3, r9, #1
 8009830:	7013      	strb	r3, [r2, #0]
 8009832:	e73d      	b.n	80096b0 <_dtoa_r+0x960>
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	9a08      	ldr	r2, [sp, #32]
 8009838:	f803 9c01 	strb.w	r9, [r3, #-1]
 800983c:	4293      	cmp	r3, r2
 800983e:	d043      	beq.n	80098c8 <_dtoa_r+0xb78>
 8009840:	4651      	mov	r1, sl
 8009842:	2300      	movs	r3, #0
 8009844:	220a      	movs	r2, #10
 8009846:	4620      	mov	r0, r4
 8009848:	f000 f9d6 	bl	8009bf8 <__multadd>
 800984c:	45b8      	cmp	r8, r7
 800984e:	4682      	mov	sl, r0
 8009850:	f04f 0300 	mov.w	r3, #0
 8009854:	f04f 020a 	mov.w	r2, #10
 8009858:	4641      	mov	r1, r8
 800985a:	4620      	mov	r0, r4
 800985c:	d107      	bne.n	800986e <_dtoa_r+0xb1e>
 800985e:	f000 f9cb 	bl	8009bf8 <__multadd>
 8009862:	4680      	mov	r8, r0
 8009864:	4607      	mov	r7, r0
 8009866:	9b04      	ldr	r3, [sp, #16]
 8009868:	3301      	adds	r3, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	e775      	b.n	800975a <_dtoa_r+0xa0a>
 800986e:	f000 f9c3 	bl	8009bf8 <__multadd>
 8009872:	4639      	mov	r1, r7
 8009874:	4680      	mov	r8, r0
 8009876:	2300      	movs	r3, #0
 8009878:	220a      	movs	r2, #10
 800987a:	4620      	mov	r0, r4
 800987c:	f000 f9bc 	bl	8009bf8 <__multadd>
 8009880:	4607      	mov	r7, r0
 8009882:	e7f0      	b.n	8009866 <_dtoa_r+0xb16>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	9d00      	ldr	r5, [sp, #0]
 800988a:	4631      	mov	r1, r6
 800988c:	4650      	mov	r0, sl
 800988e:	f7ff f9d4 	bl	8008c3a <quorem>
 8009892:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009896:	9b00      	ldr	r3, [sp, #0]
 8009898:	f805 9b01 	strb.w	r9, [r5], #1
 800989c:	1aea      	subs	r2, r5, r3
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	4293      	cmp	r3, r2
 80098a2:	dd07      	ble.n	80098b4 <_dtoa_r+0xb64>
 80098a4:	4651      	mov	r1, sl
 80098a6:	2300      	movs	r3, #0
 80098a8:	220a      	movs	r2, #10
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 f9a4 	bl	8009bf8 <__multadd>
 80098b0:	4682      	mov	sl, r0
 80098b2:	e7ea      	b.n	800988a <_dtoa_r+0xb3a>
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bfc8      	it	gt
 80098ba:	461d      	movgt	r5, r3
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	bfd8      	it	le
 80098c0:	2501      	movle	r5, #1
 80098c2:	441d      	add	r5, r3
 80098c4:	f04f 0800 	mov.w	r8, #0
 80098c8:	4651      	mov	r1, sl
 80098ca:	2201      	movs	r2, #1
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fb41 	bl	8009f54 <__lshift>
 80098d2:	4631      	mov	r1, r6
 80098d4:	4682      	mov	sl, r0
 80098d6:	f000 fba9 	bl	800a02c <__mcmp>
 80098da:	2800      	cmp	r0, #0
 80098dc:	dc96      	bgt.n	800980c <_dtoa_r+0xabc>
 80098de:	d102      	bne.n	80098e6 <_dtoa_r+0xb96>
 80098e0:	f019 0f01 	tst.w	r9, #1
 80098e4:	d192      	bne.n	800980c <_dtoa_r+0xabc>
 80098e6:	462b      	mov	r3, r5
 80098e8:	461d      	mov	r5, r3
 80098ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098ee:	2a30      	cmp	r2, #48	; 0x30
 80098f0:	d0fa      	beq.n	80098e8 <_dtoa_r+0xb98>
 80098f2:	e6dd      	b.n	80096b0 <_dtoa_r+0x960>
 80098f4:	9a00      	ldr	r2, [sp, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d189      	bne.n	800980e <_dtoa_r+0xabe>
 80098fa:	f10b 0b01 	add.w	fp, fp, #1
 80098fe:	2331      	movs	r3, #49	; 0x31
 8009900:	e796      	b.n	8009830 <_dtoa_r+0xae0>
 8009902:	4b0a      	ldr	r3, [pc, #40]	; (800992c <_dtoa_r+0xbdc>)
 8009904:	f7ff ba99 	b.w	8008e3a <_dtoa_r+0xea>
 8009908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800990a:	2b00      	cmp	r3, #0
 800990c:	f47f aa6d 	bne.w	8008dea <_dtoa_r+0x9a>
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <_dtoa_r+0xbe0>)
 8009912:	f7ff ba92 	b.w	8008e3a <_dtoa_r+0xea>
 8009916:	9b01      	ldr	r3, [sp, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	dcb5      	bgt.n	8009888 <_dtoa_r+0xb38>
 800991c:	9b07      	ldr	r3, [sp, #28]
 800991e:	2b02      	cmp	r3, #2
 8009920:	f73f aeb1 	bgt.w	8009686 <_dtoa_r+0x936>
 8009924:	e7b0      	b.n	8009888 <_dtoa_r+0xb38>
 8009926:	bf00      	nop
 8009928:	0800b7ca 	.word	0x0800b7ca
 800992c:	0800b72a 	.word	0x0800b72a
 8009930:	0800b74e 	.word	0x0800b74e

08009934 <_free_r>:
 8009934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009936:	2900      	cmp	r1, #0
 8009938:	d044      	beq.n	80099c4 <_free_r+0x90>
 800993a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800993e:	9001      	str	r0, [sp, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f1a1 0404 	sub.w	r4, r1, #4
 8009946:	bfb8      	it	lt
 8009948:	18e4      	addlt	r4, r4, r3
 800994a:	f000 f8e7 	bl	8009b1c <__malloc_lock>
 800994e:	4a1e      	ldr	r2, [pc, #120]	; (80099c8 <_free_r+0x94>)
 8009950:	9801      	ldr	r0, [sp, #4]
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	b933      	cbnz	r3, 8009964 <_free_r+0x30>
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	6014      	str	r4, [r2, #0]
 800995a:	b003      	add	sp, #12
 800995c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009960:	f000 b8e2 	b.w	8009b28 <__malloc_unlock>
 8009964:	42a3      	cmp	r3, r4
 8009966:	d908      	bls.n	800997a <_free_r+0x46>
 8009968:	6825      	ldr	r5, [r4, #0]
 800996a:	1961      	adds	r1, r4, r5
 800996c:	428b      	cmp	r3, r1
 800996e:	bf01      	itttt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	1949      	addeq	r1, r1, r5
 8009976:	6021      	streq	r1, [r4, #0]
 8009978:	e7ed      	b.n	8009956 <_free_r+0x22>
 800997a:	461a      	mov	r2, r3
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	b10b      	cbz	r3, 8009984 <_free_r+0x50>
 8009980:	42a3      	cmp	r3, r4
 8009982:	d9fa      	bls.n	800997a <_free_r+0x46>
 8009984:	6811      	ldr	r1, [r2, #0]
 8009986:	1855      	adds	r5, r2, r1
 8009988:	42a5      	cmp	r5, r4
 800998a:	d10b      	bne.n	80099a4 <_free_r+0x70>
 800998c:	6824      	ldr	r4, [r4, #0]
 800998e:	4421      	add	r1, r4
 8009990:	1854      	adds	r4, r2, r1
 8009992:	42a3      	cmp	r3, r4
 8009994:	6011      	str	r1, [r2, #0]
 8009996:	d1e0      	bne.n	800995a <_free_r+0x26>
 8009998:	681c      	ldr	r4, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	6053      	str	r3, [r2, #4]
 800999e:	440c      	add	r4, r1
 80099a0:	6014      	str	r4, [r2, #0]
 80099a2:	e7da      	b.n	800995a <_free_r+0x26>
 80099a4:	d902      	bls.n	80099ac <_free_r+0x78>
 80099a6:	230c      	movs	r3, #12
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	e7d6      	b.n	800995a <_free_r+0x26>
 80099ac:	6825      	ldr	r5, [r4, #0]
 80099ae:	1961      	adds	r1, r4, r5
 80099b0:	428b      	cmp	r3, r1
 80099b2:	bf04      	itt	eq
 80099b4:	6819      	ldreq	r1, [r3, #0]
 80099b6:	685b      	ldreq	r3, [r3, #4]
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	bf04      	itt	eq
 80099bc:	1949      	addeq	r1, r1, r5
 80099be:	6021      	streq	r1, [r4, #0]
 80099c0:	6054      	str	r4, [r2, #4]
 80099c2:	e7ca      	b.n	800995a <_free_r+0x26>
 80099c4:	b003      	add	sp, #12
 80099c6:	bd30      	pop	{r4, r5, pc}
 80099c8:	20000e24 	.word	0x20000e24

080099cc <malloc>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <malloc+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f000 b823 	b.w	8009a1c <_malloc_r>
 80099d6:	bf00      	nop
 80099d8:	20000078 	.word	0x20000078

080099dc <sbrk_aligned>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	4e0e      	ldr	r6, [pc, #56]	; (8009a18 <sbrk_aligned+0x3c>)
 80099e0:	460c      	mov	r4, r1
 80099e2:	6831      	ldr	r1, [r6, #0]
 80099e4:	4605      	mov	r5, r0
 80099e6:	b911      	cbnz	r1, 80099ee <sbrk_aligned+0x12>
 80099e8:	f001 f83c 	bl	800aa64 <_sbrk_r>
 80099ec:	6030      	str	r0, [r6, #0]
 80099ee:	4621      	mov	r1, r4
 80099f0:	4628      	mov	r0, r5
 80099f2:	f001 f837 	bl	800aa64 <_sbrk_r>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d00a      	beq.n	8009a10 <sbrk_aligned+0x34>
 80099fa:	1cc4      	adds	r4, r0, #3
 80099fc:	f024 0403 	bic.w	r4, r4, #3
 8009a00:	42a0      	cmp	r0, r4
 8009a02:	d007      	beq.n	8009a14 <sbrk_aligned+0x38>
 8009a04:	1a21      	subs	r1, r4, r0
 8009a06:	4628      	mov	r0, r5
 8009a08:	f001 f82c 	bl	800aa64 <_sbrk_r>
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d101      	bne.n	8009a14 <sbrk_aligned+0x38>
 8009a10:	f04f 34ff 	mov.w	r4, #4294967295
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	20000e28 	.word	0x20000e28

08009a1c <_malloc_r>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	1ccd      	adds	r5, r1, #3
 8009a22:	f025 0503 	bic.w	r5, r5, #3
 8009a26:	3508      	adds	r5, #8
 8009a28:	2d0c      	cmp	r5, #12
 8009a2a:	bf38      	it	cc
 8009a2c:	250c      	movcc	r5, #12
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	4607      	mov	r7, r0
 8009a32:	db01      	blt.n	8009a38 <_malloc_r+0x1c>
 8009a34:	42a9      	cmp	r1, r5
 8009a36:	d905      	bls.n	8009a44 <_malloc_r+0x28>
 8009a38:	230c      	movs	r3, #12
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	2600      	movs	r6, #0
 8009a3e:	4630      	mov	r0, r6
 8009a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b18 <_malloc_r+0xfc>
 8009a48:	f000 f868 	bl	8009b1c <__malloc_lock>
 8009a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a50:	461c      	mov	r4, r3
 8009a52:	bb5c      	cbnz	r4, 8009aac <_malloc_r+0x90>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4638      	mov	r0, r7
 8009a58:	f7ff ffc0 	bl	80099dc <sbrk_aligned>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	4604      	mov	r4, r0
 8009a60:	d155      	bne.n	8009b0e <_malloc_r+0xf2>
 8009a62:	f8d8 4000 	ldr.w	r4, [r8]
 8009a66:	4626      	mov	r6, r4
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d145      	bne.n	8009af8 <_malloc_r+0xdc>
 8009a6c:	2c00      	cmp	r4, #0
 8009a6e:	d048      	beq.n	8009b02 <_malloc_r+0xe6>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	4631      	mov	r1, r6
 8009a74:	4638      	mov	r0, r7
 8009a76:	eb04 0903 	add.w	r9, r4, r3
 8009a7a:	f000 fff3 	bl	800aa64 <_sbrk_r>
 8009a7e:	4581      	cmp	r9, r0
 8009a80:	d13f      	bne.n	8009b02 <_malloc_r+0xe6>
 8009a82:	6821      	ldr	r1, [r4, #0]
 8009a84:	1a6d      	subs	r5, r5, r1
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ffa7 	bl	80099dc <sbrk_aligned>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	d037      	beq.n	8009b02 <_malloc_r+0xe6>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	442b      	add	r3, r5
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	f8d8 3000 	ldr.w	r3, [r8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d038      	beq.n	8009b12 <_malloc_r+0xf6>
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	42a2      	cmp	r2, r4
 8009aa4:	d12b      	bne.n	8009afe <_malloc_r+0xe2>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	e00f      	b.n	8009acc <_malloc_r+0xb0>
 8009aac:	6822      	ldr	r2, [r4, #0]
 8009aae:	1b52      	subs	r2, r2, r5
 8009ab0:	d41f      	bmi.n	8009af2 <_malloc_r+0xd6>
 8009ab2:	2a0b      	cmp	r2, #11
 8009ab4:	d917      	bls.n	8009ae6 <_malloc_r+0xca>
 8009ab6:	1961      	adds	r1, r4, r5
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	6025      	str	r5, [r4, #0]
 8009abc:	bf18      	it	ne
 8009abe:	6059      	strne	r1, [r3, #4]
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	bf08      	it	eq
 8009ac4:	f8c8 1000 	streq.w	r1, [r8]
 8009ac8:	5162      	str	r2, [r4, r5]
 8009aca:	604b      	str	r3, [r1, #4]
 8009acc:	4638      	mov	r0, r7
 8009ace:	f104 060b 	add.w	r6, r4, #11
 8009ad2:	f000 f829 	bl	8009b28 <__malloc_unlock>
 8009ad6:	f026 0607 	bic.w	r6, r6, #7
 8009ada:	1d23      	adds	r3, r4, #4
 8009adc:	1af2      	subs	r2, r6, r3
 8009ade:	d0ae      	beq.n	8009a3e <_malloc_r+0x22>
 8009ae0:	1b9b      	subs	r3, r3, r6
 8009ae2:	50a3      	str	r3, [r4, r2]
 8009ae4:	e7ab      	b.n	8009a3e <_malloc_r+0x22>
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	6862      	ldr	r2, [r4, #4]
 8009aea:	d1dd      	bne.n	8009aa8 <_malloc_r+0x8c>
 8009aec:	f8c8 2000 	str.w	r2, [r8]
 8009af0:	e7ec      	b.n	8009acc <_malloc_r+0xb0>
 8009af2:	4623      	mov	r3, r4
 8009af4:	6864      	ldr	r4, [r4, #4]
 8009af6:	e7ac      	b.n	8009a52 <_malloc_r+0x36>
 8009af8:	4634      	mov	r4, r6
 8009afa:	6876      	ldr	r6, [r6, #4]
 8009afc:	e7b4      	b.n	8009a68 <_malloc_r+0x4c>
 8009afe:	4613      	mov	r3, r2
 8009b00:	e7cc      	b.n	8009a9c <_malloc_r+0x80>
 8009b02:	230c      	movs	r3, #12
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4638      	mov	r0, r7
 8009b08:	f000 f80e 	bl	8009b28 <__malloc_unlock>
 8009b0c:	e797      	b.n	8009a3e <_malloc_r+0x22>
 8009b0e:	6025      	str	r5, [r4, #0]
 8009b10:	e7dc      	b.n	8009acc <_malloc_r+0xb0>
 8009b12:	605b      	str	r3, [r3, #4]
 8009b14:	deff      	udf	#255	; 0xff
 8009b16:	bf00      	nop
 8009b18:	20000e24 	.word	0x20000e24

08009b1c <__malloc_lock>:
 8009b1c:	4801      	ldr	r0, [pc, #4]	; (8009b24 <__malloc_lock+0x8>)
 8009b1e:	f7ff b87c 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 8009b22:	bf00      	nop
 8009b24:	20000e20 	.word	0x20000e20

08009b28 <__malloc_unlock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	; (8009b30 <__malloc_unlock+0x8>)
 8009b2a:	f7ff b877 	b.w	8008c1c <__retarget_lock_release_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20000e20 	.word	0x20000e20

08009b34 <_Balloc>:
 8009b34:	b570      	push	{r4, r5, r6, lr}
 8009b36:	69c6      	ldr	r6, [r0, #28]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	b976      	cbnz	r6, 8009b5c <_Balloc+0x28>
 8009b3e:	2010      	movs	r0, #16
 8009b40:	f7ff ff44 	bl	80099cc <malloc>
 8009b44:	4602      	mov	r2, r0
 8009b46:	61e0      	str	r0, [r4, #28]
 8009b48:	b920      	cbnz	r0, 8009b54 <_Balloc+0x20>
 8009b4a:	4b18      	ldr	r3, [pc, #96]	; (8009bac <_Balloc+0x78>)
 8009b4c:	4818      	ldr	r0, [pc, #96]	; (8009bb0 <_Balloc+0x7c>)
 8009b4e:	216b      	movs	r1, #107	; 0x6b
 8009b50:	f000 ff98 	bl	800aa84 <__assert_func>
 8009b54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b58:	6006      	str	r6, [r0, #0]
 8009b5a:	60c6      	str	r6, [r0, #12]
 8009b5c:	69e6      	ldr	r6, [r4, #28]
 8009b5e:	68f3      	ldr	r3, [r6, #12]
 8009b60:	b183      	cbz	r3, 8009b84 <_Balloc+0x50>
 8009b62:	69e3      	ldr	r3, [r4, #28]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b6a:	b9b8      	cbnz	r0, 8009b9c <_Balloc+0x68>
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b72:	1d72      	adds	r2, r6, #5
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	4620      	mov	r0, r4
 8009b78:	f000 ffa2 	bl	800aac0 <_calloc_r>
 8009b7c:	b160      	cbz	r0, 8009b98 <_Balloc+0x64>
 8009b7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b82:	e00e      	b.n	8009ba2 <_Balloc+0x6e>
 8009b84:	2221      	movs	r2, #33	; 0x21
 8009b86:	2104      	movs	r1, #4
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 ff99 	bl	800aac0 <_calloc_r>
 8009b8e:	69e3      	ldr	r3, [r4, #28]
 8009b90:	60f0      	str	r0, [r6, #12]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e4      	bne.n	8009b62 <_Balloc+0x2e>
 8009b98:	2000      	movs	r0, #0
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	6802      	ldr	r2, [r0, #0]
 8009b9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ba8:	e7f7      	b.n	8009b9a <_Balloc+0x66>
 8009baa:	bf00      	nop
 8009bac:	0800b75b 	.word	0x0800b75b
 8009bb0:	0800b7db 	.word	0x0800b7db

08009bb4 <_Bfree>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	69c6      	ldr	r6, [r0, #28]
 8009bb8:	4605      	mov	r5, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	b976      	cbnz	r6, 8009bdc <_Bfree+0x28>
 8009bbe:	2010      	movs	r0, #16
 8009bc0:	f7ff ff04 	bl	80099cc <malloc>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	61e8      	str	r0, [r5, #28]
 8009bc8:	b920      	cbnz	r0, 8009bd4 <_Bfree+0x20>
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <_Bfree+0x3c>)
 8009bcc:	4809      	ldr	r0, [pc, #36]	; (8009bf4 <_Bfree+0x40>)
 8009bce:	218f      	movs	r1, #143	; 0x8f
 8009bd0:	f000 ff58 	bl	800aa84 <__assert_func>
 8009bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bd8:	6006      	str	r6, [r0, #0]
 8009bda:	60c6      	str	r6, [r0, #12]
 8009bdc:	b13c      	cbz	r4, 8009bee <_Bfree+0x3a>
 8009bde:	69eb      	ldr	r3, [r5, #28]
 8009be0:	6862      	ldr	r2, [r4, #4]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009be8:	6021      	str	r1, [r4, #0]
 8009bea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	0800b75b 	.word	0x0800b75b
 8009bf4:	0800b7db 	.word	0x0800b7db

08009bf8 <__multadd>:
 8009bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bfc:	690d      	ldr	r5, [r1, #16]
 8009bfe:	4607      	mov	r7, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	461e      	mov	r6, r3
 8009c04:	f101 0c14 	add.w	ip, r1, #20
 8009c08:	2000      	movs	r0, #0
 8009c0a:	f8dc 3000 	ldr.w	r3, [ip]
 8009c0e:	b299      	uxth	r1, r3
 8009c10:	fb02 6101 	mla	r1, r2, r1, r6
 8009c14:	0c1e      	lsrs	r6, r3, #16
 8009c16:	0c0b      	lsrs	r3, r1, #16
 8009c18:	fb02 3306 	mla	r3, r2, r6, r3
 8009c1c:	b289      	uxth	r1, r1
 8009c1e:	3001      	adds	r0, #1
 8009c20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c24:	4285      	cmp	r5, r0
 8009c26:	f84c 1b04 	str.w	r1, [ip], #4
 8009c2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c2e:	dcec      	bgt.n	8009c0a <__multadd+0x12>
 8009c30:	b30e      	cbz	r6, 8009c76 <__multadd+0x7e>
 8009c32:	68a3      	ldr	r3, [r4, #8]
 8009c34:	42ab      	cmp	r3, r5
 8009c36:	dc19      	bgt.n	8009c6c <__multadd+0x74>
 8009c38:	6861      	ldr	r1, [r4, #4]
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	3101      	adds	r1, #1
 8009c3e:	f7ff ff79 	bl	8009b34 <_Balloc>
 8009c42:	4680      	mov	r8, r0
 8009c44:	b928      	cbnz	r0, 8009c52 <__multadd+0x5a>
 8009c46:	4602      	mov	r2, r0
 8009c48:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <__multadd+0x84>)
 8009c4a:	480d      	ldr	r0, [pc, #52]	; (8009c80 <__multadd+0x88>)
 8009c4c:	21ba      	movs	r1, #186	; 0xba
 8009c4e:	f000 ff19 	bl	800aa84 <__assert_func>
 8009c52:	6922      	ldr	r2, [r4, #16]
 8009c54:	3202      	adds	r2, #2
 8009c56:	f104 010c 	add.w	r1, r4, #12
 8009c5a:	0092      	lsls	r2, r2, #2
 8009c5c:	300c      	adds	r0, #12
 8009c5e:	f7fe ffde 	bl	8008c1e <memcpy>
 8009c62:	4621      	mov	r1, r4
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff ffa5 	bl	8009bb4 <_Bfree>
 8009c6a:	4644      	mov	r4, r8
 8009c6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c70:	3501      	adds	r5, #1
 8009c72:	615e      	str	r6, [r3, #20]
 8009c74:	6125      	str	r5, [r4, #16]
 8009c76:	4620      	mov	r0, r4
 8009c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c7c:	0800b7ca 	.word	0x0800b7ca
 8009c80:	0800b7db 	.word	0x0800b7db

08009c84 <__hi0bits>:
 8009c84:	0c03      	lsrs	r3, r0, #16
 8009c86:	041b      	lsls	r3, r3, #16
 8009c88:	b9d3      	cbnz	r3, 8009cc0 <__hi0bits+0x3c>
 8009c8a:	0400      	lsls	r0, r0, #16
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c92:	bf04      	itt	eq
 8009c94:	0200      	lsleq	r0, r0, #8
 8009c96:	3308      	addeq	r3, #8
 8009c98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c9c:	bf04      	itt	eq
 8009c9e:	0100      	lsleq	r0, r0, #4
 8009ca0:	3304      	addeq	r3, #4
 8009ca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ca6:	bf04      	itt	eq
 8009ca8:	0080      	lsleq	r0, r0, #2
 8009caa:	3302      	addeq	r3, #2
 8009cac:	2800      	cmp	r0, #0
 8009cae:	db05      	blt.n	8009cbc <__hi0bits+0x38>
 8009cb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cb4:	f103 0301 	add.w	r3, r3, #1
 8009cb8:	bf08      	it	eq
 8009cba:	2320      	moveq	r3, #32
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	4770      	bx	lr
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e7e4      	b.n	8009c8e <__hi0bits+0xa>

08009cc4 <__lo0bits>:
 8009cc4:	6803      	ldr	r3, [r0, #0]
 8009cc6:	f013 0207 	ands.w	r2, r3, #7
 8009cca:	d00c      	beq.n	8009ce6 <__lo0bits+0x22>
 8009ccc:	07d9      	lsls	r1, r3, #31
 8009cce:	d422      	bmi.n	8009d16 <__lo0bits+0x52>
 8009cd0:	079a      	lsls	r2, r3, #30
 8009cd2:	bf49      	itett	mi
 8009cd4:	085b      	lsrmi	r3, r3, #1
 8009cd6:	089b      	lsrpl	r3, r3, #2
 8009cd8:	6003      	strmi	r3, [r0, #0]
 8009cda:	2201      	movmi	r2, #1
 8009cdc:	bf5c      	itt	pl
 8009cde:	6003      	strpl	r3, [r0, #0]
 8009ce0:	2202      	movpl	r2, #2
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	4770      	bx	lr
 8009ce6:	b299      	uxth	r1, r3
 8009ce8:	b909      	cbnz	r1, 8009cee <__lo0bits+0x2a>
 8009cea:	0c1b      	lsrs	r3, r3, #16
 8009cec:	2210      	movs	r2, #16
 8009cee:	b2d9      	uxtb	r1, r3
 8009cf0:	b909      	cbnz	r1, 8009cf6 <__lo0bits+0x32>
 8009cf2:	3208      	adds	r2, #8
 8009cf4:	0a1b      	lsrs	r3, r3, #8
 8009cf6:	0719      	lsls	r1, r3, #28
 8009cf8:	bf04      	itt	eq
 8009cfa:	091b      	lsreq	r3, r3, #4
 8009cfc:	3204      	addeq	r2, #4
 8009cfe:	0799      	lsls	r1, r3, #30
 8009d00:	bf04      	itt	eq
 8009d02:	089b      	lsreq	r3, r3, #2
 8009d04:	3202      	addeq	r2, #2
 8009d06:	07d9      	lsls	r1, r3, #31
 8009d08:	d403      	bmi.n	8009d12 <__lo0bits+0x4e>
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	f102 0201 	add.w	r2, r2, #1
 8009d10:	d003      	beq.n	8009d1a <__lo0bits+0x56>
 8009d12:	6003      	str	r3, [r0, #0]
 8009d14:	e7e5      	b.n	8009ce2 <__lo0bits+0x1e>
 8009d16:	2200      	movs	r2, #0
 8009d18:	e7e3      	b.n	8009ce2 <__lo0bits+0x1e>
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	e7e1      	b.n	8009ce2 <__lo0bits+0x1e>
	...

08009d20 <__i2b>:
 8009d20:	b510      	push	{r4, lr}
 8009d22:	460c      	mov	r4, r1
 8009d24:	2101      	movs	r1, #1
 8009d26:	f7ff ff05 	bl	8009b34 <_Balloc>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	b928      	cbnz	r0, 8009d3a <__i2b+0x1a>
 8009d2e:	4b05      	ldr	r3, [pc, #20]	; (8009d44 <__i2b+0x24>)
 8009d30:	4805      	ldr	r0, [pc, #20]	; (8009d48 <__i2b+0x28>)
 8009d32:	f240 1145 	movw	r1, #325	; 0x145
 8009d36:	f000 fea5 	bl	800aa84 <__assert_func>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	6144      	str	r4, [r0, #20]
 8009d3e:	6103      	str	r3, [r0, #16]
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	bf00      	nop
 8009d44:	0800b7ca 	.word	0x0800b7ca
 8009d48:	0800b7db 	.word	0x0800b7db

08009d4c <__multiply>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	4691      	mov	r9, r2
 8009d52:	690a      	ldr	r2, [r1, #16]
 8009d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bfb8      	it	lt
 8009d5c:	460b      	movlt	r3, r1
 8009d5e:	460c      	mov	r4, r1
 8009d60:	bfbc      	itt	lt
 8009d62:	464c      	movlt	r4, r9
 8009d64:	4699      	movlt	r9, r3
 8009d66:	6927      	ldr	r7, [r4, #16]
 8009d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d6c:	68a3      	ldr	r3, [r4, #8]
 8009d6e:	6861      	ldr	r1, [r4, #4]
 8009d70:	eb07 060a 	add.w	r6, r7, sl
 8009d74:	42b3      	cmp	r3, r6
 8009d76:	b085      	sub	sp, #20
 8009d78:	bfb8      	it	lt
 8009d7a:	3101      	addlt	r1, #1
 8009d7c:	f7ff feda 	bl	8009b34 <_Balloc>
 8009d80:	b930      	cbnz	r0, 8009d90 <__multiply+0x44>
 8009d82:	4602      	mov	r2, r0
 8009d84:	4b44      	ldr	r3, [pc, #272]	; (8009e98 <__multiply+0x14c>)
 8009d86:	4845      	ldr	r0, [pc, #276]	; (8009e9c <__multiply+0x150>)
 8009d88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d8c:	f000 fe7a 	bl	800aa84 <__assert_func>
 8009d90:	f100 0514 	add.w	r5, r0, #20
 8009d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d98:	462b      	mov	r3, r5
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4543      	cmp	r3, r8
 8009d9e:	d321      	bcc.n	8009de4 <__multiply+0x98>
 8009da0:	f104 0314 	add.w	r3, r4, #20
 8009da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009da8:	f109 0314 	add.w	r3, r9, #20
 8009dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009db0:	9202      	str	r2, [sp, #8]
 8009db2:	1b3a      	subs	r2, r7, r4
 8009db4:	3a15      	subs	r2, #21
 8009db6:	f022 0203 	bic.w	r2, r2, #3
 8009dba:	3204      	adds	r2, #4
 8009dbc:	f104 0115 	add.w	r1, r4, #21
 8009dc0:	428f      	cmp	r7, r1
 8009dc2:	bf38      	it	cc
 8009dc4:	2204      	movcc	r2, #4
 8009dc6:	9201      	str	r2, [sp, #4]
 8009dc8:	9a02      	ldr	r2, [sp, #8]
 8009dca:	9303      	str	r3, [sp, #12]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d80c      	bhi.n	8009dea <__multiply+0x9e>
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	dd03      	ble.n	8009ddc <__multiply+0x90>
 8009dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d05b      	beq.n	8009e94 <__multiply+0x148>
 8009ddc:	6106      	str	r6, [r0, #16]
 8009dde:	b005      	add	sp, #20
 8009de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de4:	f843 2b04 	str.w	r2, [r3], #4
 8009de8:	e7d8      	b.n	8009d9c <__multiply+0x50>
 8009dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dee:	f1ba 0f00 	cmp.w	sl, #0
 8009df2:	d024      	beq.n	8009e3e <__multiply+0xf2>
 8009df4:	f104 0e14 	add.w	lr, r4, #20
 8009df8:	46a9      	mov	r9, r5
 8009dfa:	f04f 0c00 	mov.w	ip, #0
 8009dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e02:	f8d9 1000 	ldr.w	r1, [r9]
 8009e06:	fa1f fb82 	uxth.w	fp, r2
 8009e0a:	b289      	uxth	r1, r1
 8009e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e14:	f8d9 2000 	ldr.w	r2, [r9]
 8009e18:	4461      	add	r1, ip
 8009e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e26:	b289      	uxth	r1, r1
 8009e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e2c:	4577      	cmp	r7, lr
 8009e2e:	f849 1b04 	str.w	r1, [r9], #4
 8009e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e36:	d8e2      	bhi.n	8009dfe <__multiply+0xb2>
 8009e38:	9a01      	ldr	r2, [sp, #4]
 8009e3a:	f845 c002 	str.w	ip, [r5, r2]
 8009e3e:	9a03      	ldr	r2, [sp, #12]
 8009e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e44:	3304      	adds	r3, #4
 8009e46:	f1b9 0f00 	cmp.w	r9, #0
 8009e4a:	d021      	beq.n	8009e90 <__multiply+0x144>
 8009e4c:	6829      	ldr	r1, [r5, #0]
 8009e4e:	f104 0c14 	add.w	ip, r4, #20
 8009e52:	46ae      	mov	lr, r5
 8009e54:	f04f 0a00 	mov.w	sl, #0
 8009e58:	f8bc b000 	ldrh.w	fp, [ip]
 8009e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e60:	fb09 220b 	mla	r2, r9, fp, r2
 8009e64:	4452      	add	r2, sl
 8009e66:	b289      	uxth	r1, r1
 8009e68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8009e70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e78:	f8be 1000 	ldrh.w	r1, [lr]
 8009e7c:	fb09 110a 	mla	r1, r9, sl, r1
 8009e80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e84:	4567      	cmp	r7, ip
 8009e86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e8a:	d8e5      	bhi.n	8009e58 <__multiply+0x10c>
 8009e8c:	9a01      	ldr	r2, [sp, #4]
 8009e8e:	50a9      	str	r1, [r5, r2]
 8009e90:	3504      	adds	r5, #4
 8009e92:	e799      	b.n	8009dc8 <__multiply+0x7c>
 8009e94:	3e01      	subs	r6, #1
 8009e96:	e79b      	b.n	8009dd0 <__multiply+0x84>
 8009e98:	0800b7ca 	.word	0x0800b7ca
 8009e9c:	0800b7db 	.word	0x0800b7db

08009ea0 <__pow5mult>:
 8009ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	f012 0203 	ands.w	r2, r2, #3
 8009eaa:	4606      	mov	r6, r0
 8009eac:	460f      	mov	r7, r1
 8009eae:	d007      	beq.n	8009ec0 <__pow5mult+0x20>
 8009eb0:	4c25      	ldr	r4, [pc, #148]	; (8009f48 <__pow5mult+0xa8>)
 8009eb2:	3a01      	subs	r2, #1
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eba:	f7ff fe9d 	bl	8009bf8 <__multadd>
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	10ad      	asrs	r5, r5, #2
 8009ec2:	d03d      	beq.n	8009f40 <__pow5mult+0xa0>
 8009ec4:	69f4      	ldr	r4, [r6, #28]
 8009ec6:	b97c      	cbnz	r4, 8009ee8 <__pow5mult+0x48>
 8009ec8:	2010      	movs	r0, #16
 8009eca:	f7ff fd7f 	bl	80099cc <malloc>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	61f0      	str	r0, [r6, #28]
 8009ed2:	b928      	cbnz	r0, 8009ee0 <__pow5mult+0x40>
 8009ed4:	4b1d      	ldr	r3, [pc, #116]	; (8009f4c <__pow5mult+0xac>)
 8009ed6:	481e      	ldr	r0, [pc, #120]	; (8009f50 <__pow5mult+0xb0>)
 8009ed8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009edc:	f000 fdd2 	bl	800aa84 <__assert_func>
 8009ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ee4:	6004      	str	r4, [r0, #0]
 8009ee6:	60c4      	str	r4, [r0, #12]
 8009ee8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ef0:	b94c      	cbnz	r4, 8009f06 <__pow5mult+0x66>
 8009ef2:	f240 2171 	movw	r1, #625	; 0x271
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7ff ff12 	bl	8009d20 <__i2b>
 8009efc:	2300      	movs	r3, #0
 8009efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f02:	4604      	mov	r4, r0
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	f04f 0900 	mov.w	r9, #0
 8009f0a:	07eb      	lsls	r3, r5, #31
 8009f0c:	d50a      	bpl.n	8009f24 <__pow5mult+0x84>
 8009f0e:	4639      	mov	r1, r7
 8009f10:	4622      	mov	r2, r4
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ff1a 	bl	8009d4c <__multiply>
 8009f18:	4639      	mov	r1, r7
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff fe49 	bl	8009bb4 <_Bfree>
 8009f22:	4647      	mov	r7, r8
 8009f24:	106d      	asrs	r5, r5, #1
 8009f26:	d00b      	beq.n	8009f40 <__pow5mult+0xa0>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	b938      	cbnz	r0, 8009f3c <__pow5mult+0x9c>
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7ff ff0b 	bl	8009d4c <__multiply>
 8009f36:	6020      	str	r0, [r4, #0]
 8009f38:	f8c0 9000 	str.w	r9, [r0]
 8009f3c:	4604      	mov	r4, r0
 8009f3e:	e7e4      	b.n	8009f0a <__pow5mult+0x6a>
 8009f40:	4638      	mov	r0, r7
 8009f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f46:	bf00      	nop
 8009f48:	0800b928 	.word	0x0800b928
 8009f4c:	0800b75b 	.word	0x0800b75b
 8009f50:	0800b7db 	.word	0x0800b7db

08009f54 <__lshift>:
 8009f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	460c      	mov	r4, r1
 8009f5a:	6849      	ldr	r1, [r1, #4]
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	4607      	mov	r7, r0
 8009f66:	4691      	mov	r9, r2
 8009f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f6c:	f108 0601 	add.w	r6, r8, #1
 8009f70:	42b3      	cmp	r3, r6
 8009f72:	db0b      	blt.n	8009f8c <__lshift+0x38>
 8009f74:	4638      	mov	r0, r7
 8009f76:	f7ff fddd 	bl	8009b34 <_Balloc>
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	b948      	cbnz	r0, 8009f92 <__lshift+0x3e>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	4b28      	ldr	r3, [pc, #160]	; (800a024 <__lshift+0xd0>)
 8009f82:	4829      	ldr	r0, [pc, #164]	; (800a028 <__lshift+0xd4>)
 8009f84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f88:	f000 fd7c 	bl	800aa84 <__assert_func>
 8009f8c:	3101      	adds	r1, #1
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	e7ee      	b.n	8009f70 <__lshift+0x1c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	f100 0114 	add.w	r1, r0, #20
 8009f98:	f100 0210 	add.w	r2, r0, #16
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	4553      	cmp	r3, sl
 8009fa0:	db33      	blt.n	800a00a <__lshift+0xb6>
 8009fa2:	6920      	ldr	r0, [r4, #16]
 8009fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fa8:	f104 0314 	add.w	r3, r4, #20
 8009fac:	f019 091f 	ands.w	r9, r9, #31
 8009fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fb8:	d02b      	beq.n	800a012 <__lshift+0xbe>
 8009fba:	f1c9 0e20 	rsb	lr, r9, #32
 8009fbe:	468a      	mov	sl, r1
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	fa00 f009 	lsl.w	r0, r0, r9
 8009fc8:	4310      	orrs	r0, r2
 8009fca:	f84a 0b04 	str.w	r0, [sl], #4
 8009fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd2:	459c      	cmp	ip, r3
 8009fd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fd8:	d8f3      	bhi.n	8009fc2 <__lshift+0x6e>
 8009fda:	ebac 0304 	sub.w	r3, ip, r4
 8009fde:	3b15      	subs	r3, #21
 8009fe0:	f023 0303 	bic.w	r3, r3, #3
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	f104 0015 	add.w	r0, r4, #21
 8009fea:	4584      	cmp	ip, r0
 8009fec:	bf38      	it	cc
 8009fee:	2304      	movcc	r3, #4
 8009ff0:	50ca      	str	r2, [r1, r3]
 8009ff2:	b10a      	cbz	r2, 8009ff8 <__lshift+0xa4>
 8009ff4:	f108 0602 	add.w	r6, r8, #2
 8009ff8:	3e01      	subs	r6, #1
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	612e      	str	r6, [r5, #16]
 8009ffe:	4621      	mov	r1, r4
 800a000:	f7ff fdd8 	bl	8009bb4 <_Bfree>
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a00e:	3301      	adds	r3, #1
 800a010:	e7c5      	b.n	8009f9e <__lshift+0x4a>
 800a012:	3904      	subs	r1, #4
 800a014:	f853 2b04 	ldr.w	r2, [r3], #4
 800a018:	f841 2f04 	str.w	r2, [r1, #4]!
 800a01c:	459c      	cmp	ip, r3
 800a01e:	d8f9      	bhi.n	800a014 <__lshift+0xc0>
 800a020:	e7ea      	b.n	8009ff8 <__lshift+0xa4>
 800a022:	bf00      	nop
 800a024:	0800b7ca 	.word	0x0800b7ca
 800a028:	0800b7db 	.word	0x0800b7db

0800a02c <__mcmp>:
 800a02c:	b530      	push	{r4, r5, lr}
 800a02e:	6902      	ldr	r2, [r0, #16]
 800a030:	690c      	ldr	r4, [r1, #16]
 800a032:	1b12      	subs	r2, r2, r4
 800a034:	d10e      	bne.n	800a054 <__mcmp+0x28>
 800a036:	f100 0314 	add.w	r3, r0, #20
 800a03a:	3114      	adds	r1, #20
 800a03c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a04c:	42a5      	cmp	r5, r4
 800a04e:	d003      	beq.n	800a058 <__mcmp+0x2c>
 800a050:	d305      	bcc.n	800a05e <__mcmp+0x32>
 800a052:	2201      	movs	r2, #1
 800a054:	4610      	mov	r0, r2
 800a056:	bd30      	pop	{r4, r5, pc}
 800a058:	4283      	cmp	r3, r0
 800a05a:	d3f3      	bcc.n	800a044 <__mcmp+0x18>
 800a05c:	e7fa      	b.n	800a054 <__mcmp+0x28>
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	e7f7      	b.n	800a054 <__mcmp+0x28>

0800a064 <__mdiff>:
 800a064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	460c      	mov	r4, r1
 800a06a:	4606      	mov	r6, r0
 800a06c:	4611      	mov	r1, r2
 800a06e:	4620      	mov	r0, r4
 800a070:	4690      	mov	r8, r2
 800a072:	f7ff ffdb 	bl	800a02c <__mcmp>
 800a076:	1e05      	subs	r5, r0, #0
 800a078:	d110      	bne.n	800a09c <__mdiff+0x38>
 800a07a:	4629      	mov	r1, r5
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff fd59 	bl	8009b34 <_Balloc>
 800a082:	b930      	cbnz	r0, 800a092 <__mdiff+0x2e>
 800a084:	4b3a      	ldr	r3, [pc, #232]	; (800a170 <__mdiff+0x10c>)
 800a086:	4602      	mov	r2, r0
 800a088:	f240 2137 	movw	r1, #567	; 0x237
 800a08c:	4839      	ldr	r0, [pc, #228]	; (800a174 <__mdiff+0x110>)
 800a08e:	f000 fcf9 	bl	800aa84 <__assert_func>
 800a092:	2301      	movs	r3, #1
 800a094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a09c:	bfa4      	itt	ge
 800a09e:	4643      	movge	r3, r8
 800a0a0:	46a0      	movge	r8, r4
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0a8:	bfa6      	itte	ge
 800a0aa:	461c      	movge	r4, r3
 800a0ac:	2500      	movge	r5, #0
 800a0ae:	2501      	movlt	r5, #1
 800a0b0:	f7ff fd40 	bl	8009b34 <_Balloc>
 800a0b4:	b920      	cbnz	r0, 800a0c0 <__mdiff+0x5c>
 800a0b6:	4b2e      	ldr	r3, [pc, #184]	; (800a170 <__mdiff+0x10c>)
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	f240 2145 	movw	r1, #581	; 0x245
 800a0be:	e7e5      	b.n	800a08c <__mdiff+0x28>
 800a0c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0c4:	6926      	ldr	r6, [r4, #16]
 800a0c6:	60c5      	str	r5, [r0, #12]
 800a0c8:	f104 0914 	add.w	r9, r4, #20
 800a0cc:	f108 0514 	add.w	r5, r8, #20
 800a0d0:	f100 0e14 	add.w	lr, r0, #20
 800a0d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0dc:	f108 0210 	add.w	r2, r8, #16
 800a0e0:	46f2      	mov	sl, lr
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0ec:	fa11 f88b 	uxtah	r8, r1, fp
 800a0f0:	b299      	uxth	r1, r3
 800a0f2:	0c1b      	lsrs	r3, r3, #16
 800a0f4:	eba8 0801 	sub.w	r8, r8, r1
 800a0f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a100:	fa1f f888 	uxth.w	r8, r8
 800a104:	1419      	asrs	r1, r3, #16
 800a106:	454e      	cmp	r6, r9
 800a108:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a10c:	f84a 3b04 	str.w	r3, [sl], #4
 800a110:	d8e8      	bhi.n	800a0e4 <__mdiff+0x80>
 800a112:	1b33      	subs	r3, r6, r4
 800a114:	3b15      	subs	r3, #21
 800a116:	f023 0303 	bic.w	r3, r3, #3
 800a11a:	3304      	adds	r3, #4
 800a11c:	3415      	adds	r4, #21
 800a11e:	42a6      	cmp	r6, r4
 800a120:	bf38      	it	cc
 800a122:	2304      	movcc	r3, #4
 800a124:	441d      	add	r5, r3
 800a126:	4473      	add	r3, lr
 800a128:	469e      	mov	lr, r3
 800a12a:	462e      	mov	r6, r5
 800a12c:	4566      	cmp	r6, ip
 800a12e:	d30e      	bcc.n	800a14e <__mdiff+0xea>
 800a130:	f10c 0203 	add.w	r2, ip, #3
 800a134:	1b52      	subs	r2, r2, r5
 800a136:	f022 0203 	bic.w	r2, r2, #3
 800a13a:	3d03      	subs	r5, #3
 800a13c:	45ac      	cmp	ip, r5
 800a13e:	bf38      	it	cc
 800a140:	2200      	movcc	r2, #0
 800a142:	4413      	add	r3, r2
 800a144:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a148:	b17a      	cbz	r2, 800a16a <__mdiff+0x106>
 800a14a:	6107      	str	r7, [r0, #16]
 800a14c:	e7a4      	b.n	800a098 <__mdiff+0x34>
 800a14e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a152:	fa11 f288 	uxtah	r2, r1, r8
 800a156:	1414      	asrs	r4, r2, #16
 800a158:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a15c:	b292      	uxth	r2, r2
 800a15e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a162:	f84e 2b04 	str.w	r2, [lr], #4
 800a166:	1421      	asrs	r1, r4, #16
 800a168:	e7e0      	b.n	800a12c <__mdiff+0xc8>
 800a16a:	3f01      	subs	r7, #1
 800a16c:	e7ea      	b.n	800a144 <__mdiff+0xe0>
 800a16e:	bf00      	nop
 800a170:	0800b7ca 	.word	0x0800b7ca
 800a174:	0800b7db 	.word	0x0800b7db

0800a178 <__d2b>:
 800a178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	460f      	mov	r7, r1
 800a17e:	2101      	movs	r1, #1
 800a180:	ec59 8b10 	vmov	r8, r9, d0
 800a184:	4616      	mov	r6, r2
 800a186:	f7ff fcd5 	bl	8009b34 <_Balloc>
 800a18a:	4604      	mov	r4, r0
 800a18c:	b930      	cbnz	r0, 800a19c <__d2b+0x24>
 800a18e:	4602      	mov	r2, r0
 800a190:	4b24      	ldr	r3, [pc, #144]	; (800a224 <__d2b+0xac>)
 800a192:	4825      	ldr	r0, [pc, #148]	; (800a228 <__d2b+0xb0>)
 800a194:	f240 310f 	movw	r1, #783	; 0x30f
 800a198:	f000 fc74 	bl	800aa84 <__assert_func>
 800a19c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a4:	bb2d      	cbnz	r5, 800a1f2 <__d2b+0x7a>
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a1ac:	d026      	beq.n	800a1fc <__d2b+0x84>
 800a1ae:	4668      	mov	r0, sp
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	f7ff fd87 	bl	8009cc4 <__lo0bits>
 800a1b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1ba:	b1e8      	cbz	r0, 800a1f8 <__d2b+0x80>
 800a1bc:	f1c0 0320 	rsb	r3, r0, #32
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	40c2      	lsrs	r2, r0
 800a1c8:	6163      	str	r3, [r4, #20]
 800a1ca:	9201      	str	r2, [sp, #4]
 800a1cc:	9b01      	ldr	r3, [sp, #4]
 800a1ce:	61a3      	str	r3, [r4, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	bf14      	ite	ne
 800a1d4:	2202      	movne	r2, #2
 800a1d6:	2201      	moveq	r2, #1
 800a1d8:	6122      	str	r2, [r4, #16]
 800a1da:	b1bd      	cbz	r5, 800a20c <__d2b+0x94>
 800a1dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1e0:	4405      	add	r5, r0
 800a1e2:	603d      	str	r5, [r7, #0]
 800a1e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1e8:	6030      	str	r0, [r6, #0]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	b003      	add	sp, #12
 800a1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1f6:	e7d6      	b.n	800a1a6 <__d2b+0x2e>
 800a1f8:	6161      	str	r1, [r4, #20]
 800a1fa:	e7e7      	b.n	800a1cc <__d2b+0x54>
 800a1fc:	a801      	add	r0, sp, #4
 800a1fe:	f7ff fd61 	bl	8009cc4 <__lo0bits>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	6163      	str	r3, [r4, #20]
 800a206:	3020      	adds	r0, #32
 800a208:	2201      	movs	r2, #1
 800a20a:	e7e5      	b.n	800a1d8 <__d2b+0x60>
 800a20c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a210:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a214:	6038      	str	r0, [r7, #0]
 800a216:	6918      	ldr	r0, [r3, #16]
 800a218:	f7ff fd34 	bl	8009c84 <__hi0bits>
 800a21c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a220:	e7e2      	b.n	800a1e8 <__d2b+0x70>
 800a222:	bf00      	nop
 800a224:	0800b7ca 	.word	0x0800b7ca
 800a228:	0800b7db 	.word	0x0800b7db

0800a22c <__ssputs_r>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	688e      	ldr	r6, [r1, #8]
 800a232:	461f      	mov	r7, r3
 800a234:	42be      	cmp	r6, r7
 800a236:	680b      	ldr	r3, [r1, #0]
 800a238:	4682      	mov	sl, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	4690      	mov	r8, r2
 800a23e:	d82c      	bhi.n	800a29a <__ssputs_r+0x6e>
 800a240:	898a      	ldrh	r2, [r1, #12]
 800a242:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a246:	d026      	beq.n	800a296 <__ssputs_r+0x6a>
 800a248:	6965      	ldr	r5, [r4, #20]
 800a24a:	6909      	ldr	r1, [r1, #16]
 800a24c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a250:	eba3 0901 	sub.w	r9, r3, r1
 800a254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a258:	1c7b      	adds	r3, r7, #1
 800a25a:	444b      	add	r3, r9
 800a25c:	106d      	asrs	r5, r5, #1
 800a25e:	429d      	cmp	r5, r3
 800a260:	bf38      	it	cc
 800a262:	461d      	movcc	r5, r3
 800a264:	0553      	lsls	r3, r2, #21
 800a266:	d527      	bpl.n	800a2b8 <__ssputs_r+0x8c>
 800a268:	4629      	mov	r1, r5
 800a26a:	f7ff fbd7 	bl	8009a1c <_malloc_r>
 800a26e:	4606      	mov	r6, r0
 800a270:	b360      	cbz	r0, 800a2cc <__ssputs_r+0xa0>
 800a272:	6921      	ldr	r1, [r4, #16]
 800a274:	464a      	mov	r2, r9
 800a276:	f7fe fcd2 	bl	8008c1e <memcpy>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a284:	81a3      	strh	r3, [r4, #12]
 800a286:	6126      	str	r6, [r4, #16]
 800a288:	6165      	str	r5, [r4, #20]
 800a28a:	444e      	add	r6, r9
 800a28c:	eba5 0509 	sub.w	r5, r5, r9
 800a290:	6026      	str	r6, [r4, #0]
 800a292:	60a5      	str	r5, [r4, #8]
 800a294:	463e      	mov	r6, r7
 800a296:	42be      	cmp	r6, r7
 800a298:	d900      	bls.n	800a29c <__ssputs_r+0x70>
 800a29a:	463e      	mov	r6, r7
 800a29c:	6820      	ldr	r0, [r4, #0]
 800a29e:	4632      	mov	r2, r6
 800a2a0:	4641      	mov	r1, r8
 800a2a2:	f000 fba3 	bl	800a9ec <memmove>
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	1b9b      	subs	r3, r3, r6
 800a2aa:	60a3      	str	r3, [r4, #8]
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	4433      	add	r3, r6
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	f000 fc29 	bl	800ab10 <_realloc_r>
 800a2be:	4606      	mov	r6, r0
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d1e0      	bne.n	800a286 <__ssputs_r+0x5a>
 800a2c4:	6921      	ldr	r1, [r4, #16]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	f7ff fb34 	bl	8009934 <_free_r>
 800a2cc:	230c      	movs	r3, #12
 800a2ce:	f8ca 3000 	str.w	r3, [sl]
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295
 800a2de:	e7e9      	b.n	800a2b4 <__ssputs_r+0x88>

0800a2e0 <_svfiprintf_r>:
 800a2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e4:	4698      	mov	r8, r3
 800a2e6:	898b      	ldrh	r3, [r1, #12]
 800a2e8:	061b      	lsls	r3, r3, #24
 800a2ea:	b09d      	sub	sp, #116	; 0x74
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	4614      	mov	r4, r2
 800a2f2:	d50e      	bpl.n	800a312 <_svfiprintf_r+0x32>
 800a2f4:	690b      	ldr	r3, [r1, #16]
 800a2f6:	b963      	cbnz	r3, 800a312 <_svfiprintf_r+0x32>
 800a2f8:	2140      	movs	r1, #64	; 0x40
 800a2fa:	f7ff fb8f 	bl	8009a1c <_malloc_r>
 800a2fe:	6028      	str	r0, [r5, #0]
 800a300:	6128      	str	r0, [r5, #16]
 800a302:	b920      	cbnz	r0, 800a30e <_svfiprintf_r+0x2e>
 800a304:	230c      	movs	r3, #12
 800a306:	603b      	str	r3, [r7, #0]
 800a308:	f04f 30ff 	mov.w	r0, #4294967295
 800a30c:	e0d0      	b.n	800a4b0 <_svfiprintf_r+0x1d0>
 800a30e:	2340      	movs	r3, #64	; 0x40
 800a310:	616b      	str	r3, [r5, #20]
 800a312:	2300      	movs	r3, #0
 800a314:	9309      	str	r3, [sp, #36]	; 0x24
 800a316:	2320      	movs	r3, #32
 800a318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a320:	2330      	movs	r3, #48	; 0x30
 800a322:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4c8 <_svfiprintf_r+0x1e8>
 800a326:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a32a:	f04f 0901 	mov.w	r9, #1
 800a32e:	4623      	mov	r3, r4
 800a330:	469a      	mov	sl, r3
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	b10a      	cbz	r2, 800a33c <_svfiprintf_r+0x5c>
 800a338:	2a25      	cmp	r2, #37	; 0x25
 800a33a:	d1f9      	bne.n	800a330 <_svfiprintf_r+0x50>
 800a33c:	ebba 0b04 	subs.w	fp, sl, r4
 800a340:	d00b      	beq.n	800a35a <_svfiprintf_r+0x7a>
 800a342:	465b      	mov	r3, fp
 800a344:	4622      	mov	r2, r4
 800a346:	4629      	mov	r1, r5
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff ff6f 	bl	800a22c <__ssputs_r>
 800a34e:	3001      	adds	r0, #1
 800a350:	f000 80a9 	beq.w	800a4a6 <_svfiprintf_r+0x1c6>
 800a354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a356:	445a      	add	r2, fp
 800a358:	9209      	str	r2, [sp, #36]	; 0x24
 800a35a:	f89a 3000 	ldrb.w	r3, [sl]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 80a1 	beq.w	800a4a6 <_svfiprintf_r+0x1c6>
 800a364:	2300      	movs	r3, #0
 800a366:	f04f 32ff 	mov.w	r2, #4294967295
 800a36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36e:	f10a 0a01 	add.w	sl, sl, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a37a:	931a      	str	r3, [sp, #104]	; 0x68
 800a37c:	4654      	mov	r4, sl
 800a37e:	2205      	movs	r2, #5
 800a380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a384:	4850      	ldr	r0, [pc, #320]	; (800a4c8 <_svfiprintf_r+0x1e8>)
 800a386:	f7f5 ff23 	bl	80001d0 <memchr>
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	b9d8      	cbnz	r0, 800a3c6 <_svfiprintf_r+0xe6>
 800a38e:	06d0      	lsls	r0, r2, #27
 800a390:	bf44      	itt	mi
 800a392:	2320      	movmi	r3, #32
 800a394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a398:	0711      	lsls	r1, r2, #28
 800a39a:	bf44      	itt	mi
 800a39c:	232b      	movmi	r3, #43	; 0x2b
 800a39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a8:	d015      	beq.n	800a3d6 <_svfiprintf_r+0xf6>
 800a3aa:	9a07      	ldr	r2, [sp, #28]
 800a3ac:	4654      	mov	r4, sl
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ba:	3b30      	subs	r3, #48	; 0x30
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	d94d      	bls.n	800a45c <_svfiprintf_r+0x17c>
 800a3c0:	b1b0      	cbz	r0, 800a3f0 <_svfiprintf_r+0x110>
 800a3c2:	9207      	str	r2, [sp, #28]
 800a3c4:	e014      	b.n	800a3f0 <_svfiprintf_r+0x110>
 800a3c6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	46a2      	mov	sl, r4
 800a3d4:	e7d2      	b.n	800a37c <_svfiprintf_r+0x9c>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	1d19      	adds	r1, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9103      	str	r1, [sp, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bfbb      	ittet	lt
 800a3e2:	425b      	neglt	r3, r3
 800a3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e8:	9307      	strge	r3, [sp, #28]
 800a3ea:	9307      	strlt	r3, [sp, #28]
 800a3ec:	bfb8      	it	lt
 800a3ee:	9204      	strlt	r2, [sp, #16]
 800a3f0:	7823      	ldrb	r3, [r4, #0]
 800a3f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f4:	d10c      	bne.n	800a410 <_svfiprintf_r+0x130>
 800a3f6:	7863      	ldrb	r3, [r4, #1]
 800a3f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fa:	d134      	bne.n	800a466 <_svfiprintf_r+0x186>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	bfb8      	it	lt
 800a408:	f04f 33ff 	movlt.w	r3, #4294967295
 800a40c:	3402      	adds	r4, #2
 800a40e:	9305      	str	r3, [sp, #20]
 800a410:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a4d8 <_svfiprintf_r+0x1f8>
 800a414:	7821      	ldrb	r1, [r4, #0]
 800a416:	2203      	movs	r2, #3
 800a418:	4650      	mov	r0, sl
 800a41a:	f7f5 fed9 	bl	80001d0 <memchr>
 800a41e:	b138      	cbz	r0, 800a430 <_svfiprintf_r+0x150>
 800a420:	9b04      	ldr	r3, [sp, #16]
 800a422:	eba0 000a 	sub.w	r0, r0, sl
 800a426:	2240      	movs	r2, #64	; 0x40
 800a428:	4082      	lsls	r2, r0
 800a42a:	4313      	orrs	r3, r2
 800a42c:	3401      	adds	r4, #1
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a434:	4825      	ldr	r0, [pc, #148]	; (800a4cc <_svfiprintf_r+0x1ec>)
 800a436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a43a:	2206      	movs	r2, #6
 800a43c:	f7f5 fec8 	bl	80001d0 <memchr>
 800a440:	2800      	cmp	r0, #0
 800a442:	d038      	beq.n	800a4b6 <_svfiprintf_r+0x1d6>
 800a444:	4b22      	ldr	r3, [pc, #136]	; (800a4d0 <_svfiprintf_r+0x1f0>)
 800a446:	bb1b      	cbnz	r3, 800a490 <_svfiprintf_r+0x1b0>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	3307      	adds	r3, #7
 800a44c:	f023 0307 	bic.w	r3, r3, #7
 800a450:	3308      	adds	r3, #8
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a456:	4433      	add	r3, r6
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	e768      	b.n	800a32e <_svfiprintf_r+0x4e>
 800a45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a460:	460c      	mov	r4, r1
 800a462:	2001      	movs	r0, #1
 800a464:	e7a6      	b.n	800a3b4 <_svfiprintf_r+0xd4>
 800a466:	2300      	movs	r3, #0
 800a468:	3401      	adds	r4, #1
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	4619      	mov	r1, r3
 800a46e:	f04f 0c0a 	mov.w	ip, #10
 800a472:	4620      	mov	r0, r4
 800a474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a478:	3a30      	subs	r2, #48	; 0x30
 800a47a:	2a09      	cmp	r2, #9
 800a47c:	d903      	bls.n	800a486 <_svfiprintf_r+0x1a6>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0c6      	beq.n	800a410 <_svfiprintf_r+0x130>
 800a482:	9105      	str	r1, [sp, #20]
 800a484:	e7c4      	b.n	800a410 <_svfiprintf_r+0x130>
 800a486:	fb0c 2101 	mla	r1, ip, r1, r2
 800a48a:	4604      	mov	r4, r0
 800a48c:	2301      	movs	r3, #1
 800a48e:	e7f0      	b.n	800a472 <_svfiprintf_r+0x192>
 800a490:	ab03      	add	r3, sp, #12
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	462a      	mov	r2, r5
 800a496:	4b0f      	ldr	r3, [pc, #60]	; (800a4d4 <_svfiprintf_r+0x1f4>)
 800a498:	a904      	add	r1, sp, #16
 800a49a:	4638      	mov	r0, r7
 800a49c:	f7fd fcf2 	bl	8007e84 <_printf_float>
 800a4a0:	1c42      	adds	r2, r0, #1
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	d1d6      	bne.n	800a454 <_svfiprintf_r+0x174>
 800a4a6:	89ab      	ldrh	r3, [r5, #12]
 800a4a8:	065b      	lsls	r3, r3, #25
 800a4aa:	f53f af2d 	bmi.w	800a308 <_svfiprintf_r+0x28>
 800a4ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b0:	b01d      	add	sp, #116	; 0x74
 800a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	4b05      	ldr	r3, [pc, #20]	; (800a4d4 <_svfiprintf_r+0x1f4>)
 800a4be:	a904      	add	r1, sp, #16
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	f7fd ff83 	bl	80083cc <_printf_i>
 800a4c6:	e7eb      	b.n	800a4a0 <_svfiprintf_r+0x1c0>
 800a4c8:	0800b934 	.word	0x0800b934
 800a4cc:	0800b93e 	.word	0x0800b93e
 800a4d0:	08007e85 	.word	0x08007e85
 800a4d4:	0800a22d 	.word	0x0800a22d
 800a4d8:	0800b93a 	.word	0x0800b93a

0800a4dc <__sfputc_r>:
 800a4dc:	6893      	ldr	r3, [r2, #8]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	b410      	push	{r4}
 800a4e4:	6093      	str	r3, [r2, #8]
 800a4e6:	da08      	bge.n	800a4fa <__sfputc_r+0x1e>
 800a4e8:	6994      	ldr	r4, [r2, #24]
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	db01      	blt.n	800a4f2 <__sfputc_r+0x16>
 800a4ee:	290a      	cmp	r1, #10
 800a4f0:	d103      	bne.n	800a4fa <__sfputc_r+0x1e>
 800a4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f6:	f7fe ba5a 	b.w	80089ae <__swbuf_r>
 800a4fa:	6813      	ldr	r3, [r2, #0]
 800a4fc:	1c58      	adds	r0, r3, #1
 800a4fe:	6010      	str	r0, [r2, #0]
 800a500:	7019      	strb	r1, [r3, #0]
 800a502:	4608      	mov	r0, r1
 800a504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <__sfputs_r>:
 800a50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50c:	4606      	mov	r6, r0
 800a50e:	460f      	mov	r7, r1
 800a510:	4614      	mov	r4, r2
 800a512:	18d5      	adds	r5, r2, r3
 800a514:	42ac      	cmp	r4, r5
 800a516:	d101      	bne.n	800a51c <__sfputs_r+0x12>
 800a518:	2000      	movs	r0, #0
 800a51a:	e007      	b.n	800a52c <__sfputs_r+0x22>
 800a51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a520:	463a      	mov	r2, r7
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff ffda 	bl	800a4dc <__sfputc_r>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	d1f3      	bne.n	800a514 <__sfputs_r+0xa>
 800a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a530 <_vfiprintf_r>:
 800a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a534:	460d      	mov	r5, r1
 800a536:	b09d      	sub	sp, #116	; 0x74
 800a538:	4614      	mov	r4, r2
 800a53a:	4698      	mov	r8, r3
 800a53c:	4606      	mov	r6, r0
 800a53e:	b118      	cbz	r0, 800a548 <_vfiprintf_r+0x18>
 800a540:	6a03      	ldr	r3, [r0, #32]
 800a542:	b90b      	cbnz	r3, 800a548 <_vfiprintf_r+0x18>
 800a544:	f7fe f8f0 	bl	8008728 <__sinit>
 800a548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54a:	07d9      	lsls	r1, r3, #31
 800a54c:	d405      	bmi.n	800a55a <_vfiprintf_r+0x2a>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	059a      	lsls	r2, r3, #22
 800a552:	d402      	bmi.n	800a55a <_vfiprintf_r+0x2a>
 800a554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a556:	f7fe fb60 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	071b      	lsls	r3, r3, #28
 800a55e:	d501      	bpl.n	800a564 <_vfiprintf_r+0x34>
 800a560:	692b      	ldr	r3, [r5, #16]
 800a562:	b99b      	cbnz	r3, 800a58c <_vfiprintf_r+0x5c>
 800a564:	4629      	mov	r1, r5
 800a566:	4630      	mov	r0, r6
 800a568:	f7fe fa5e 	bl	8008a28 <__swsetup_r>
 800a56c:	b170      	cbz	r0, 800a58c <_vfiprintf_r+0x5c>
 800a56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a570:	07dc      	lsls	r4, r3, #31
 800a572:	d504      	bpl.n	800a57e <_vfiprintf_r+0x4e>
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	b01d      	add	sp, #116	; 0x74
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	89ab      	ldrh	r3, [r5, #12]
 800a580:	0598      	lsls	r0, r3, #22
 800a582:	d4f7      	bmi.n	800a574 <_vfiprintf_r+0x44>
 800a584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a586:	f7fe fb49 	bl	8008c1c <__retarget_lock_release_recursive>
 800a58a:	e7f3      	b.n	800a574 <_vfiprintf_r+0x44>
 800a58c:	2300      	movs	r3, #0
 800a58e:	9309      	str	r3, [sp, #36]	; 0x24
 800a590:	2320      	movs	r3, #32
 800a592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a596:	f8cd 800c 	str.w	r8, [sp, #12]
 800a59a:	2330      	movs	r3, #48	; 0x30
 800a59c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a750 <_vfiprintf_r+0x220>
 800a5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5a4:	f04f 0901 	mov.w	r9, #1
 800a5a8:	4623      	mov	r3, r4
 800a5aa:	469a      	mov	sl, r3
 800a5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b0:	b10a      	cbz	r2, 800a5b6 <_vfiprintf_r+0x86>
 800a5b2:	2a25      	cmp	r2, #37	; 0x25
 800a5b4:	d1f9      	bne.n	800a5aa <_vfiprintf_r+0x7a>
 800a5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ba:	d00b      	beq.n	800a5d4 <_vfiprintf_r+0xa4>
 800a5bc:	465b      	mov	r3, fp
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ffa1 	bl	800a50a <__sfputs_r>
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	f000 80a9 	beq.w	800a720 <_vfiprintf_r+0x1f0>
 800a5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d0:	445a      	add	r2, fp
 800a5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 80a1 	beq.w	800a720 <_vfiprintf_r+0x1f0>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5e8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	9307      	str	r3, [sp, #28]
 800a5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5f6:	4654      	mov	r4, sl
 800a5f8:	2205      	movs	r2, #5
 800a5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fe:	4854      	ldr	r0, [pc, #336]	; (800a750 <_vfiprintf_r+0x220>)
 800a600:	f7f5 fde6 	bl	80001d0 <memchr>
 800a604:	9a04      	ldr	r2, [sp, #16]
 800a606:	b9d8      	cbnz	r0, 800a640 <_vfiprintf_r+0x110>
 800a608:	06d1      	lsls	r1, r2, #27
 800a60a:	bf44      	itt	mi
 800a60c:	2320      	movmi	r3, #32
 800a60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a612:	0713      	lsls	r3, r2, #28
 800a614:	bf44      	itt	mi
 800a616:	232b      	movmi	r3, #43	; 0x2b
 800a618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a61c:	f89a 3000 	ldrb.w	r3, [sl]
 800a620:	2b2a      	cmp	r3, #42	; 0x2a
 800a622:	d015      	beq.n	800a650 <_vfiprintf_r+0x120>
 800a624:	9a07      	ldr	r2, [sp, #28]
 800a626:	4654      	mov	r4, sl
 800a628:	2000      	movs	r0, #0
 800a62a:	f04f 0c0a 	mov.w	ip, #10
 800a62e:	4621      	mov	r1, r4
 800a630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a634:	3b30      	subs	r3, #48	; 0x30
 800a636:	2b09      	cmp	r3, #9
 800a638:	d94d      	bls.n	800a6d6 <_vfiprintf_r+0x1a6>
 800a63a:	b1b0      	cbz	r0, 800a66a <_vfiprintf_r+0x13a>
 800a63c:	9207      	str	r2, [sp, #28]
 800a63e:	e014      	b.n	800a66a <_vfiprintf_r+0x13a>
 800a640:	eba0 0308 	sub.w	r3, r0, r8
 800a644:	fa09 f303 	lsl.w	r3, r9, r3
 800a648:	4313      	orrs	r3, r2
 800a64a:	9304      	str	r3, [sp, #16]
 800a64c:	46a2      	mov	sl, r4
 800a64e:	e7d2      	b.n	800a5f6 <_vfiprintf_r+0xc6>
 800a650:	9b03      	ldr	r3, [sp, #12]
 800a652:	1d19      	adds	r1, r3, #4
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	9103      	str	r1, [sp, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bfbb      	ittet	lt
 800a65c:	425b      	neglt	r3, r3
 800a65e:	f042 0202 	orrlt.w	r2, r2, #2
 800a662:	9307      	strge	r3, [sp, #28]
 800a664:	9307      	strlt	r3, [sp, #28]
 800a666:	bfb8      	it	lt
 800a668:	9204      	strlt	r2, [sp, #16]
 800a66a:	7823      	ldrb	r3, [r4, #0]
 800a66c:	2b2e      	cmp	r3, #46	; 0x2e
 800a66e:	d10c      	bne.n	800a68a <_vfiprintf_r+0x15a>
 800a670:	7863      	ldrb	r3, [r4, #1]
 800a672:	2b2a      	cmp	r3, #42	; 0x2a
 800a674:	d134      	bne.n	800a6e0 <_vfiprintf_r+0x1b0>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d1a      	adds	r2, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9203      	str	r2, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfb8      	it	lt
 800a682:	f04f 33ff 	movlt.w	r3, #4294967295
 800a686:	3402      	adds	r4, #2
 800a688:	9305      	str	r3, [sp, #20]
 800a68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a760 <_vfiprintf_r+0x230>
 800a68e:	7821      	ldrb	r1, [r4, #0]
 800a690:	2203      	movs	r2, #3
 800a692:	4650      	mov	r0, sl
 800a694:	f7f5 fd9c 	bl	80001d0 <memchr>
 800a698:	b138      	cbz	r0, 800a6aa <_vfiprintf_r+0x17a>
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	eba0 000a 	sub.w	r0, r0, sl
 800a6a0:	2240      	movs	r2, #64	; 0x40
 800a6a2:	4082      	lsls	r2, r0
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	3401      	adds	r4, #1
 800a6a8:	9304      	str	r3, [sp, #16]
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4829      	ldr	r0, [pc, #164]	; (800a754 <_vfiprintf_r+0x224>)
 800a6b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6b4:	2206      	movs	r2, #6
 800a6b6:	f7f5 fd8b 	bl	80001d0 <memchr>
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d03f      	beq.n	800a73e <_vfiprintf_r+0x20e>
 800a6be:	4b26      	ldr	r3, [pc, #152]	; (800a758 <_vfiprintf_r+0x228>)
 800a6c0:	bb1b      	cbnz	r3, 800a70a <_vfiprintf_r+0x1da>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	3307      	adds	r3, #7
 800a6c6:	f023 0307 	bic.w	r3, r3, #7
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	443b      	add	r3, r7
 800a6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d4:	e768      	b.n	800a5a8 <_vfiprintf_r+0x78>
 800a6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6da:	460c      	mov	r4, r1
 800a6dc:	2001      	movs	r0, #1
 800a6de:	e7a6      	b.n	800a62e <_vfiprintf_r+0xfe>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	3401      	adds	r4, #1
 800a6e4:	9305      	str	r3, [sp, #20]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	f04f 0c0a 	mov.w	ip, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6f2:	3a30      	subs	r2, #48	; 0x30
 800a6f4:	2a09      	cmp	r2, #9
 800a6f6:	d903      	bls.n	800a700 <_vfiprintf_r+0x1d0>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0c6      	beq.n	800a68a <_vfiprintf_r+0x15a>
 800a6fc:	9105      	str	r1, [sp, #20]
 800a6fe:	e7c4      	b.n	800a68a <_vfiprintf_r+0x15a>
 800a700:	fb0c 2101 	mla	r1, ip, r1, r2
 800a704:	4604      	mov	r4, r0
 800a706:	2301      	movs	r3, #1
 800a708:	e7f0      	b.n	800a6ec <_vfiprintf_r+0x1bc>
 800a70a:	ab03      	add	r3, sp, #12
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	462a      	mov	r2, r5
 800a710:	4b12      	ldr	r3, [pc, #72]	; (800a75c <_vfiprintf_r+0x22c>)
 800a712:	a904      	add	r1, sp, #16
 800a714:	4630      	mov	r0, r6
 800a716:	f7fd fbb5 	bl	8007e84 <_printf_float>
 800a71a:	4607      	mov	r7, r0
 800a71c:	1c78      	adds	r0, r7, #1
 800a71e:	d1d6      	bne.n	800a6ce <_vfiprintf_r+0x19e>
 800a720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a722:	07d9      	lsls	r1, r3, #31
 800a724:	d405      	bmi.n	800a732 <_vfiprintf_r+0x202>
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	059a      	lsls	r2, r3, #22
 800a72a:	d402      	bmi.n	800a732 <_vfiprintf_r+0x202>
 800a72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72e:	f7fe fa75 	bl	8008c1c <__retarget_lock_release_recursive>
 800a732:	89ab      	ldrh	r3, [r5, #12]
 800a734:	065b      	lsls	r3, r3, #25
 800a736:	f53f af1d 	bmi.w	800a574 <_vfiprintf_r+0x44>
 800a73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a73c:	e71c      	b.n	800a578 <_vfiprintf_r+0x48>
 800a73e:	ab03      	add	r3, sp, #12
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	462a      	mov	r2, r5
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <_vfiprintf_r+0x22c>)
 800a746:	a904      	add	r1, sp, #16
 800a748:	4630      	mov	r0, r6
 800a74a:	f7fd fe3f 	bl	80083cc <_printf_i>
 800a74e:	e7e4      	b.n	800a71a <_vfiprintf_r+0x1ea>
 800a750:	0800b934 	.word	0x0800b934
 800a754:	0800b93e 	.word	0x0800b93e
 800a758:	08007e85 	.word	0x08007e85
 800a75c:	0800a50b 	.word	0x0800a50b
 800a760:	0800b93a 	.word	0x0800b93a

0800a764 <__sflush_r>:
 800a764:	898a      	ldrh	r2, [r1, #12]
 800a766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76a:	4605      	mov	r5, r0
 800a76c:	0710      	lsls	r0, r2, #28
 800a76e:	460c      	mov	r4, r1
 800a770:	d458      	bmi.n	800a824 <__sflush_r+0xc0>
 800a772:	684b      	ldr	r3, [r1, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dc05      	bgt.n	800a784 <__sflush_r+0x20>
 800a778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc02      	bgt.n	800a784 <__sflush_r+0x20>
 800a77e:	2000      	movs	r0, #0
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a786:	2e00      	cmp	r6, #0
 800a788:	d0f9      	beq.n	800a77e <__sflush_r+0x1a>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a790:	682f      	ldr	r7, [r5, #0]
 800a792:	6a21      	ldr	r1, [r4, #32]
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	d032      	beq.n	800a7fe <__sflush_r+0x9a>
 800a798:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	075a      	lsls	r2, r3, #29
 800a79e:	d505      	bpl.n	800a7ac <__sflush_r+0x48>
 800a7a0:	6863      	ldr	r3, [r4, #4]
 800a7a2:	1ac0      	subs	r0, r0, r3
 800a7a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a6:	b10b      	cbz	r3, 800a7ac <__sflush_r+0x48>
 800a7a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7aa:	1ac0      	subs	r0, r0, r3
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b2:	6a21      	ldr	r1, [r4, #32]
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	47b0      	blx	r6
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	d106      	bne.n	800a7cc <__sflush_r+0x68>
 800a7be:	6829      	ldr	r1, [r5, #0]
 800a7c0:	291d      	cmp	r1, #29
 800a7c2:	d82b      	bhi.n	800a81c <__sflush_r+0xb8>
 800a7c4:	4a29      	ldr	r2, [pc, #164]	; (800a86c <__sflush_r+0x108>)
 800a7c6:	410a      	asrs	r2, r1
 800a7c8:	07d6      	lsls	r6, r2, #31
 800a7ca:	d427      	bmi.n	800a81c <__sflush_r+0xb8>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	6062      	str	r2, [r4, #4]
 800a7d0:	04d9      	lsls	r1, r3, #19
 800a7d2:	6922      	ldr	r2, [r4, #16]
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	d504      	bpl.n	800a7e2 <__sflush_r+0x7e>
 800a7d8:	1c42      	adds	r2, r0, #1
 800a7da:	d101      	bne.n	800a7e0 <__sflush_r+0x7c>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b903      	cbnz	r3, 800a7e2 <__sflush_r+0x7e>
 800a7e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a7e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7e4:	602f      	str	r7, [r5, #0]
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	d0c9      	beq.n	800a77e <__sflush_r+0x1a>
 800a7ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	d002      	beq.n	800a7f8 <__sflush_r+0x94>
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f7ff f89e 	bl	8009934 <_free_r>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a7fc:	e7c0      	b.n	800a780 <__sflush_r+0x1c>
 800a7fe:	2301      	movs	r3, #1
 800a800:	4628      	mov	r0, r5
 800a802:	47b0      	blx	r6
 800a804:	1c41      	adds	r1, r0, #1
 800a806:	d1c8      	bne.n	800a79a <__sflush_r+0x36>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c5      	beq.n	800a79a <__sflush_r+0x36>
 800a80e:	2b1d      	cmp	r3, #29
 800a810:	d001      	beq.n	800a816 <__sflush_r+0xb2>
 800a812:	2b16      	cmp	r3, #22
 800a814:	d101      	bne.n	800a81a <__sflush_r+0xb6>
 800a816:	602f      	str	r7, [r5, #0]
 800a818:	e7b1      	b.n	800a77e <__sflush_r+0x1a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7ad      	b.n	800a780 <__sflush_r+0x1c>
 800a824:	690f      	ldr	r7, [r1, #16]
 800a826:	2f00      	cmp	r7, #0
 800a828:	d0a9      	beq.n	800a77e <__sflush_r+0x1a>
 800a82a:	0793      	lsls	r3, r2, #30
 800a82c:	680e      	ldr	r6, [r1, #0]
 800a82e:	bf08      	it	eq
 800a830:	694b      	ldreq	r3, [r1, #20]
 800a832:	600f      	str	r7, [r1, #0]
 800a834:	bf18      	it	ne
 800a836:	2300      	movne	r3, #0
 800a838:	eba6 0807 	sub.w	r8, r6, r7
 800a83c:	608b      	str	r3, [r1, #8]
 800a83e:	f1b8 0f00 	cmp.w	r8, #0
 800a842:	dd9c      	ble.n	800a77e <__sflush_r+0x1a>
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a848:	4643      	mov	r3, r8
 800a84a:	463a      	mov	r2, r7
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b0      	blx	r6
 800a850:	2800      	cmp	r0, #0
 800a852:	dc06      	bgt.n	800a862 <__sflush_r+0xfe>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	e78e      	b.n	800a780 <__sflush_r+0x1c>
 800a862:	4407      	add	r7, r0
 800a864:	eba8 0800 	sub.w	r8, r8, r0
 800a868:	e7e9      	b.n	800a83e <__sflush_r+0xda>
 800a86a:	bf00      	nop
 800a86c:	dfbffffe 	.word	0xdfbffffe

0800a870 <_fflush_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	690b      	ldr	r3, [r1, #16]
 800a874:	4605      	mov	r5, r0
 800a876:	460c      	mov	r4, r1
 800a878:	b913      	cbnz	r3, 800a880 <_fflush_r+0x10>
 800a87a:	2500      	movs	r5, #0
 800a87c:	4628      	mov	r0, r5
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	b118      	cbz	r0, 800a88a <_fflush_r+0x1a>
 800a882:	6a03      	ldr	r3, [r0, #32]
 800a884:	b90b      	cbnz	r3, 800a88a <_fflush_r+0x1a>
 800a886:	f7fd ff4f 	bl	8008728 <__sinit>
 800a88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0f3      	beq.n	800a87a <_fflush_r+0xa>
 800a892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a894:	07d0      	lsls	r0, r2, #31
 800a896:	d404      	bmi.n	800a8a2 <_fflush_r+0x32>
 800a898:	0599      	lsls	r1, r3, #22
 800a89a:	d402      	bmi.n	800a8a2 <_fflush_r+0x32>
 800a89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89e:	f7fe f9bc 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f7ff ff5d 	bl	800a764 <__sflush_r>
 800a8aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ac:	07da      	lsls	r2, r3, #31
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	d4e4      	bmi.n	800a87c <_fflush_r+0xc>
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	059b      	lsls	r3, r3, #22
 800a8b6:	d4e1      	bmi.n	800a87c <_fflush_r+0xc>
 800a8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ba:	f7fe f9af 	bl	8008c1c <__retarget_lock_release_recursive>
 800a8be:	e7dd      	b.n	800a87c <_fflush_r+0xc>

0800a8c0 <__swhatbuf_r>:
 800a8c0:	b570      	push	{r4, r5, r6, lr}
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	b096      	sub	sp, #88	; 0x58
 800a8cc:	4615      	mov	r5, r2
 800a8ce:	461e      	mov	r6, r3
 800a8d0:	da0d      	bge.n	800a8ee <__swhatbuf_r+0x2e>
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8d8:	f04f 0100 	mov.w	r1, #0
 800a8dc:	bf0c      	ite	eq
 800a8de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a8e2:	2340      	movne	r3, #64	; 0x40
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	6031      	str	r1, [r6, #0]
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	b016      	add	sp, #88	; 0x58
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	466a      	mov	r2, sp
 800a8f0:	f000 f896 	bl	800aa20 <_fstat_r>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	dbec      	blt.n	800a8d2 <__swhatbuf_r+0x12>
 800a8f8:	9901      	ldr	r1, [sp, #4]
 800a8fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a8fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a902:	4259      	negs	r1, r3
 800a904:	4159      	adcs	r1, r3
 800a906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a90a:	e7eb      	b.n	800a8e4 <__swhatbuf_r+0x24>

0800a90c <__smakebuf_r>:
 800a90c:	898b      	ldrh	r3, [r1, #12]
 800a90e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a910:	079d      	lsls	r5, r3, #30
 800a912:	4606      	mov	r6, r0
 800a914:	460c      	mov	r4, r1
 800a916:	d507      	bpl.n	800a928 <__smakebuf_r+0x1c>
 800a918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	6123      	str	r3, [r4, #16]
 800a920:	2301      	movs	r3, #1
 800a922:	6163      	str	r3, [r4, #20]
 800a924:	b002      	add	sp, #8
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	ab01      	add	r3, sp, #4
 800a92a:	466a      	mov	r2, sp
 800a92c:	f7ff ffc8 	bl	800a8c0 <__swhatbuf_r>
 800a930:	9900      	ldr	r1, [sp, #0]
 800a932:	4605      	mov	r5, r0
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff f871 	bl	8009a1c <_malloc_r>
 800a93a:	b948      	cbnz	r0, 800a950 <__smakebuf_r+0x44>
 800a93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a940:	059a      	lsls	r2, r3, #22
 800a942:	d4ef      	bmi.n	800a924 <__smakebuf_r+0x18>
 800a944:	f023 0303 	bic.w	r3, r3, #3
 800a948:	f043 0302 	orr.w	r3, r3, #2
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	e7e3      	b.n	800a918 <__smakebuf_r+0xc>
 800a950:	89a3      	ldrh	r3, [r4, #12]
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	9b00      	ldr	r3, [sp, #0]
 800a95c:	6163      	str	r3, [r4, #20]
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	6120      	str	r0, [r4, #16]
 800a962:	b15b      	cbz	r3, 800a97c <__smakebuf_r+0x70>
 800a964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 f86b 	bl	800aa44 <_isatty_r>
 800a96e:	b128      	cbz	r0, 800a97c <__smakebuf_r+0x70>
 800a970:	89a3      	ldrh	r3, [r4, #12]
 800a972:	f023 0303 	bic.w	r3, r3, #3
 800a976:	f043 0301 	orr.w	r3, r3, #1
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	431d      	orrs	r5, r3
 800a980:	81a5      	strh	r5, [r4, #12]
 800a982:	e7cf      	b.n	800a924 <__smakebuf_r+0x18>

0800a984 <_putc_r>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	460d      	mov	r5, r1
 800a988:	4614      	mov	r4, r2
 800a98a:	4606      	mov	r6, r0
 800a98c:	b118      	cbz	r0, 800a996 <_putc_r+0x12>
 800a98e:	6a03      	ldr	r3, [r0, #32]
 800a990:	b90b      	cbnz	r3, 800a996 <_putc_r+0x12>
 800a992:	f7fd fec9 	bl	8008728 <__sinit>
 800a996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a998:	07d8      	lsls	r0, r3, #31
 800a99a:	d405      	bmi.n	800a9a8 <_putc_r+0x24>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	0599      	lsls	r1, r3, #22
 800a9a0:	d402      	bmi.n	800a9a8 <_putc_r+0x24>
 800a9a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9a4:	f7fe f939 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800a9a8:	68a3      	ldr	r3, [r4, #8]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	60a3      	str	r3, [r4, #8]
 800a9b0:	da05      	bge.n	800a9be <_putc_r+0x3a>
 800a9b2:	69a2      	ldr	r2, [r4, #24]
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	db12      	blt.n	800a9de <_putc_r+0x5a>
 800a9b8:	b2eb      	uxtb	r3, r5
 800a9ba:	2b0a      	cmp	r3, #10
 800a9bc:	d00f      	beq.n	800a9de <_putc_r+0x5a>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	6022      	str	r2, [r4, #0]
 800a9c4:	701d      	strb	r5, [r3, #0]
 800a9c6:	b2ed      	uxtb	r5, r5
 800a9c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9ca:	07da      	lsls	r2, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_putc_r+0x56>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	059b      	lsls	r3, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_putc_r+0x56>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9d6:	f7fe f921 	bl	8008c1c <__retarget_lock_release_recursive>
 800a9da:	4628      	mov	r0, r5
 800a9dc:	bd70      	pop	{r4, r5, r6, pc}
 800a9de:	4629      	mov	r1, r5
 800a9e0:	4622      	mov	r2, r4
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7fd ffe3 	bl	80089ae <__swbuf_r>
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	e7ed      	b.n	800a9c8 <_putc_r+0x44>

0800a9ec <memmove>:
 800a9ec:	4288      	cmp	r0, r1
 800a9ee:	b510      	push	{r4, lr}
 800a9f0:	eb01 0402 	add.w	r4, r1, r2
 800a9f4:	d902      	bls.n	800a9fc <memmove+0x10>
 800a9f6:	4284      	cmp	r4, r0
 800a9f8:	4623      	mov	r3, r4
 800a9fa:	d807      	bhi.n	800aa0c <memmove+0x20>
 800a9fc:	1e43      	subs	r3, r0, #1
 800a9fe:	42a1      	cmp	r1, r4
 800aa00:	d008      	beq.n	800aa14 <memmove+0x28>
 800aa02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa0a:	e7f8      	b.n	800a9fe <memmove+0x12>
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4601      	mov	r1, r0
 800aa10:	428a      	cmp	r2, r1
 800aa12:	d100      	bne.n	800aa16 <memmove+0x2a>
 800aa14:	bd10      	pop	{r4, pc}
 800aa16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa1e:	e7f7      	b.n	800aa10 <memmove+0x24>

0800aa20 <_fstat_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4d07      	ldr	r5, [pc, #28]	; (800aa40 <_fstat_r+0x20>)
 800aa24:	2300      	movs	r3, #0
 800aa26:	4604      	mov	r4, r0
 800aa28:	4608      	mov	r0, r1
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	602b      	str	r3, [r5, #0]
 800aa2e:	f7f9 fa74 	bl	8003f1a <_fstat>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d102      	bne.n	800aa3c <_fstat_r+0x1c>
 800aa36:	682b      	ldr	r3, [r5, #0]
 800aa38:	b103      	cbz	r3, 800aa3c <_fstat_r+0x1c>
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	bd38      	pop	{r3, r4, r5, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000e1c 	.word	0x20000e1c

0800aa44 <_isatty_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d06      	ldr	r5, [pc, #24]	; (800aa60 <_isatty_r+0x1c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f9 fa73 	bl	8003f3a <_isatty>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_isatty_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_isatty_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	20000e1c 	.word	0x20000e1c

0800aa64 <_sbrk_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d06      	ldr	r5, [pc, #24]	; (800aa80 <_sbrk_r+0x1c>)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	f7f9 fa7c 	bl	8003f6c <_sbrk>
 800aa74:	1c43      	adds	r3, r0, #1
 800aa76:	d102      	bne.n	800aa7e <_sbrk_r+0x1a>
 800aa78:	682b      	ldr	r3, [r5, #0]
 800aa7a:	b103      	cbz	r3, 800aa7e <_sbrk_r+0x1a>
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	bd38      	pop	{r3, r4, r5, pc}
 800aa80:	20000e1c 	.word	0x20000e1c

0800aa84 <__assert_func>:
 800aa84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa86:	4614      	mov	r4, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <__assert_func+0x2c>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4605      	mov	r5, r0
 800aa90:	68d8      	ldr	r0, [r3, #12]
 800aa92:	b14c      	cbz	r4, 800aaa8 <__assert_func+0x24>
 800aa94:	4b07      	ldr	r3, [pc, #28]	; (800aab4 <__assert_func+0x30>)
 800aa96:	9100      	str	r1, [sp, #0]
 800aa98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa9c:	4906      	ldr	r1, [pc, #24]	; (800aab8 <__assert_func+0x34>)
 800aa9e:	462b      	mov	r3, r5
 800aaa0:	f000 f872 	bl	800ab88 <fiprintf>
 800aaa4:	f000 f882 	bl	800abac <abort>
 800aaa8:	4b04      	ldr	r3, [pc, #16]	; (800aabc <__assert_func+0x38>)
 800aaaa:	461c      	mov	r4, r3
 800aaac:	e7f3      	b.n	800aa96 <__assert_func+0x12>
 800aaae:	bf00      	nop
 800aab0:	20000078 	.word	0x20000078
 800aab4:	0800b94f 	.word	0x0800b94f
 800aab8:	0800b95c 	.word	0x0800b95c
 800aabc:	0800b98a 	.word	0x0800b98a

0800aac0 <_calloc_r>:
 800aac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aac2:	fba1 2402 	umull	r2, r4, r1, r2
 800aac6:	b94c      	cbnz	r4, 800aadc <_calloc_r+0x1c>
 800aac8:	4611      	mov	r1, r2
 800aaca:	9201      	str	r2, [sp, #4]
 800aacc:	f7fe ffa6 	bl	8009a1c <_malloc_r>
 800aad0:	9a01      	ldr	r2, [sp, #4]
 800aad2:	4605      	mov	r5, r0
 800aad4:	b930      	cbnz	r0, 800aae4 <_calloc_r+0x24>
 800aad6:	4628      	mov	r0, r5
 800aad8:	b003      	add	sp, #12
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	220c      	movs	r2, #12
 800aade:	6002      	str	r2, [r0, #0]
 800aae0:	2500      	movs	r5, #0
 800aae2:	e7f8      	b.n	800aad6 <_calloc_r+0x16>
 800aae4:	4621      	mov	r1, r4
 800aae6:	f7fd fff7 	bl	8008ad8 <memset>
 800aaea:	e7f4      	b.n	800aad6 <_calloc_r+0x16>

0800aaec <__ascii_mbtowc>:
 800aaec:	b082      	sub	sp, #8
 800aaee:	b901      	cbnz	r1, 800aaf2 <__ascii_mbtowc+0x6>
 800aaf0:	a901      	add	r1, sp, #4
 800aaf2:	b142      	cbz	r2, 800ab06 <__ascii_mbtowc+0x1a>
 800aaf4:	b14b      	cbz	r3, 800ab0a <__ascii_mbtowc+0x1e>
 800aaf6:	7813      	ldrb	r3, [r2, #0]
 800aaf8:	600b      	str	r3, [r1, #0]
 800aafa:	7812      	ldrb	r2, [r2, #0]
 800aafc:	1e10      	subs	r0, r2, #0
 800aafe:	bf18      	it	ne
 800ab00:	2001      	movne	r0, #1
 800ab02:	b002      	add	sp, #8
 800ab04:	4770      	bx	lr
 800ab06:	4610      	mov	r0, r2
 800ab08:	e7fb      	b.n	800ab02 <__ascii_mbtowc+0x16>
 800ab0a:	f06f 0001 	mvn.w	r0, #1
 800ab0e:	e7f8      	b.n	800ab02 <__ascii_mbtowc+0x16>

0800ab10 <_realloc_r>:
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	4680      	mov	r8, r0
 800ab16:	4614      	mov	r4, r2
 800ab18:	460e      	mov	r6, r1
 800ab1a:	b921      	cbnz	r1, 800ab26 <_realloc_r+0x16>
 800ab1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	4611      	mov	r1, r2
 800ab22:	f7fe bf7b 	b.w	8009a1c <_malloc_r>
 800ab26:	b92a      	cbnz	r2, 800ab34 <_realloc_r+0x24>
 800ab28:	f7fe ff04 	bl	8009934 <_free_r>
 800ab2c:	4625      	mov	r5, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab34:	f000 f841 	bl	800abba <_malloc_usable_size_r>
 800ab38:	4284      	cmp	r4, r0
 800ab3a:	4607      	mov	r7, r0
 800ab3c:	d802      	bhi.n	800ab44 <_realloc_r+0x34>
 800ab3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab42:	d812      	bhi.n	800ab6a <_realloc_r+0x5a>
 800ab44:	4621      	mov	r1, r4
 800ab46:	4640      	mov	r0, r8
 800ab48:	f7fe ff68 	bl	8009a1c <_malloc_r>
 800ab4c:	4605      	mov	r5, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d0ed      	beq.n	800ab2e <_realloc_r+0x1e>
 800ab52:	42bc      	cmp	r4, r7
 800ab54:	4622      	mov	r2, r4
 800ab56:	4631      	mov	r1, r6
 800ab58:	bf28      	it	cs
 800ab5a:	463a      	movcs	r2, r7
 800ab5c:	f7fe f85f 	bl	8008c1e <memcpy>
 800ab60:	4631      	mov	r1, r6
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7fe fee6 	bl	8009934 <_free_r>
 800ab68:	e7e1      	b.n	800ab2e <_realloc_r+0x1e>
 800ab6a:	4635      	mov	r5, r6
 800ab6c:	e7df      	b.n	800ab2e <_realloc_r+0x1e>

0800ab6e <__ascii_wctomb>:
 800ab6e:	b149      	cbz	r1, 800ab84 <__ascii_wctomb+0x16>
 800ab70:	2aff      	cmp	r2, #255	; 0xff
 800ab72:	bf85      	ittet	hi
 800ab74:	238a      	movhi	r3, #138	; 0x8a
 800ab76:	6003      	strhi	r3, [r0, #0]
 800ab78:	700a      	strbls	r2, [r1, #0]
 800ab7a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab7e:	bf98      	it	ls
 800ab80:	2001      	movls	r0, #1
 800ab82:	4770      	bx	lr
 800ab84:	4608      	mov	r0, r1
 800ab86:	4770      	bx	lr

0800ab88 <fiprintf>:
 800ab88:	b40e      	push	{r1, r2, r3}
 800ab8a:	b503      	push	{r0, r1, lr}
 800ab8c:	4601      	mov	r1, r0
 800ab8e:	ab03      	add	r3, sp, #12
 800ab90:	4805      	ldr	r0, [pc, #20]	; (800aba8 <fiprintf+0x20>)
 800ab92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab96:	6800      	ldr	r0, [r0, #0]
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	f7ff fcc9 	bl	800a530 <_vfiprintf_r>
 800ab9e:	b002      	add	sp, #8
 800aba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aba4:	b003      	add	sp, #12
 800aba6:	4770      	bx	lr
 800aba8:	20000078 	.word	0x20000078

0800abac <abort>:
 800abac:	b508      	push	{r3, lr}
 800abae:	2006      	movs	r0, #6
 800abb0:	f000 f834 	bl	800ac1c <raise>
 800abb4:	2001      	movs	r0, #1
 800abb6:	f7f9 f961 	bl	8003e7c <_exit>

0800abba <_malloc_usable_size_r>:
 800abba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abbe:	1f18      	subs	r0, r3, #4
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfbc      	itt	lt
 800abc4:	580b      	ldrlt	r3, [r1, r0]
 800abc6:	18c0      	addlt	r0, r0, r3
 800abc8:	4770      	bx	lr

0800abca <_raise_r>:
 800abca:	291f      	cmp	r1, #31
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4604      	mov	r4, r0
 800abd0:	460d      	mov	r5, r1
 800abd2:	d904      	bls.n	800abde <_raise_r+0x14>
 800abd4:	2316      	movs	r3, #22
 800abd6:	6003      	str	r3, [r0, #0]
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295
 800abdc:	bd38      	pop	{r3, r4, r5, pc}
 800abde:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800abe0:	b112      	cbz	r2, 800abe8 <_raise_r+0x1e>
 800abe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abe6:	b94b      	cbnz	r3, 800abfc <_raise_r+0x32>
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 f831 	bl	800ac50 <_getpid_r>
 800abee:	462a      	mov	r2, r5
 800abf0:	4601      	mov	r1, r0
 800abf2:	4620      	mov	r0, r4
 800abf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf8:	f000 b818 	b.w	800ac2c <_kill_r>
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d00a      	beq.n	800ac16 <_raise_r+0x4c>
 800ac00:	1c59      	adds	r1, r3, #1
 800ac02:	d103      	bne.n	800ac0c <_raise_r+0x42>
 800ac04:	2316      	movs	r3, #22
 800ac06:	6003      	str	r3, [r0, #0]
 800ac08:	2001      	movs	r0, #1
 800ac0a:	e7e7      	b.n	800abdc <_raise_r+0x12>
 800ac0c:	2400      	movs	r4, #0
 800ac0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac12:	4628      	mov	r0, r5
 800ac14:	4798      	blx	r3
 800ac16:	2000      	movs	r0, #0
 800ac18:	e7e0      	b.n	800abdc <_raise_r+0x12>
	...

0800ac1c <raise>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	; (800ac28 <raise+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f7ff bfd2 	b.w	800abca <_raise_r>
 800ac26:	bf00      	nop
 800ac28:	20000078 	.word	0x20000078

0800ac2c <_kill_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	; (800ac4c <_kill_r+0x20>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f9 f90f 	bl	8003e5c <_kill>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d102      	bne.n	800ac48 <_kill_r+0x1c>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b103      	cbz	r3, 800ac48 <_kill_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd38      	pop	{r3, r4, r5, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000e1c 	.word	0x20000e1c

0800ac50 <_getpid_r>:
 800ac50:	f7f9 b8fc 	b.w	8003e4c <_getpid>

0800ac54 <_init>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	bf00      	nop
 800ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5a:	bc08      	pop	{r3}
 800ac5c:	469e      	mov	lr, r3
 800ac5e:	4770      	bx	lr

0800ac60 <_fini>:
 800ac60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac62:	bf00      	nop
 800ac64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac66:	bc08      	pop	{r3}
 800ac68:	469e      	mov	lr, r3
 800ac6a:	4770      	bx	lr
