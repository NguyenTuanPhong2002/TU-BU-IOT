
DUCATICPP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000368  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b819  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000247f  00000000  00000000  0002b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000908  00000000  00000000  0002dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006cf  00000000  00000000  0002e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002420b  00000000  00000000  0002ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c352  00000000  00000000  00052f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c6e3f  00000000  00000000  0005f29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002aa8  00000000  00000000  001260dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00128b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047dc 	.word	0x080047dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080047dc 	.word	0x080047dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <_ZN6pulsar11getInstanceEv>:

	uint16_t calculateCRC(const uint8_t *data, uint8_t length);
	bool pulsarSendCommand(uint8_t *command, uint8_t size, uint32_t timeout);

public:
	static pulsar *getInstance()
 800057c:	b598      	push	{r3, r4, r7, lr}
 800057e:	af00      	add	r7, sp, #0
	{
		if (instancePtr == nullptr)
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <_ZN6pulsar11getInstanceEv+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d109      	bne.n	800059c <_ZN6pulsar11getInstanceEv+0x20>
		{
			instancePtr = new pulsar;
 8000588:	2088      	movs	r0, #136	; 0x88
 800058a:	f003 fbf5 	bl	8003d78 <_Znwj>
 800058e:	4603      	mov	r3, r0
 8000590:	461c      	mov	r4, r3
 8000592:	4620      	mov	r0, r4
 8000594:	f003 fa24 	bl	80039e0 <_ZN6pulsarC1Ev>
 8000598:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <_ZN6pulsar11getInstanceEv+0x28>)
 800059a:	601c      	str	r4, [r3, #0]
		}
		return instancePtr;
 800059c:	4b01      	ldr	r3, [pc, #4]	; (80005a4 <_ZN6pulsar11getInstanceEv+0x28>)
 800059e:	681b      	ldr	r3, [r3, #0]
	}
 80005a0:	4618      	mov	r0, r3
 80005a2:	bd98      	pop	{r3, r4, r7, pc}
 80005a4:	20000274 	.word	0x20000274

080005a8 <_ZN9interface11getInstanceEv>:

    interface(/* args */);
    ~interface();

public:
    static interface *getInstance()
 80005a8:	b598      	push	{r3, r4, r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    {
        if (instancePtr == nullptr)
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <_ZN9interface11getInstanceEv+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d109      	bne.n	80005c8 <_ZN9interface11getInstanceEv+0x20>
        {
            instancePtr = new interface();
 80005b4:	2001      	movs	r0, #1
 80005b6:	f003 fbdf 	bl	8003d78 <_Znwj>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461c      	mov	r4, r3
 80005be:	4620      	mov	r0, r4
 80005c0:	f003 f85a 	bl	8003678 <_ZN9interfaceC1Ev>
 80005c4:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <_ZN9interface11getInstanceEv+0x28>)
 80005c6:	601c      	str	r4, [r3, #0]
        }
        return instancePtr;
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <_ZN9interface11getInstanceEv+0x28>)
 80005ca:	681b      	ldr	r3, [r3, #0]
    }
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd98      	pop	{r3, r4, r7, pc}
 80005d0:	2000026c 	.word	0x2000026c

080005d4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_UARTEx_RxEventCallback+0x3c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10d      	bne.n	8000606 <HAL_UARTEx_RxEventCallback+0x32>
		pulsar::getInstance()->SET_FLAG();
 80005ea:	f7ff ffc7 	bl	800057c <_ZN6pulsar11getInstanceEv>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 faa5 	bl	8003b40 <_ZN6pulsar8SET_FLAGEv>
		pulsar::getInstance()->Get_size(Size);
 80005f6:	f7ff ffc1 	bl	800057c <_ZN6pulsar11getInstanceEv>
 80005fa:	4602      	mov	r2, r0
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	4619      	mov	r1, r3
 8000600:	4610      	mov	r0, r2
 8000602:	f003 fac6 	bl	8003b92 <_ZN6pulsar8Get_sizeEt>
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40011000 	.word	0x40011000

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fc3c 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f81e 	bl	800065c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f94c 	bl	80008bc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000624:	f000 f90c 	bl	8000840 <_ZL11MX_DMA_Initv>
  MX_USART1_UART_Init();
 8000628:	f000 f880 	bl	800072c <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 800062c:	f000 f8da 	bl	80007e4 <_ZL19MX_USART6_UART_Initv>
  MX_USART3_UART_Init();
 8000630:	f000 f8aa 	bl	8000788 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
	pulsar::getInstance()->modbusOnPower();
 8000634:	f7ff ffa2 	bl	800057c <_ZN6pulsar11getInstanceEv>
 8000638:	4603      	mov	r3, r0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f9e6 	bl	8003a0c <_ZN6pulsar13modbusOnPowerEv>
	interface::getInstance()->initMain();
 8000640:	f7ff ffb2 	bl	80005a8 <_ZN9interface11getInstanceEv>
 8000644:	4603      	mov	r3, r0
 8000646:	4618      	mov	r0, r3
 8000648:	f003 f822 	bl	8003690 <_ZN9interface8initMainEv>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		pulsar::getInstance()->getFirmwareID();
 800064c:	f7ff ff96 	bl	800057c <_ZN6pulsar11getInstanceEv>
 8000650:	4603      	mov	r3, r0
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fb52 	bl	8003cfc <_ZN6pulsar13getFirmwareIDEv>
 8000658:	e7f8      	b.n	800064c <main+0x38>
	...

0800065c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fc9a 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <_Z18SystemClock_Configv+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <_Z18SystemClock_Configv+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <_Z18SystemClock_Configv+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <_Z18SystemClock_Configv+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <_Z18SystemClock_Configv+0xcc>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <_Z18SystemClock_Configv+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fabb 	bl	8001c48 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80006e2:	f000 f94b 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fd18 	bl	8002138 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	bf14      	ite	ne
 800070e:	2301      	movne	r3, #1
 8000710:	2300      	moveq	r3, #0
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000718:	f000 f930 	bl	800097c <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000764:	f001 fec8 	bl	80024f8 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	bf14      	ite	ne
 800076e:	2301      	movne	r3, #1
 8000770:	2300      	moveq	r3, #0
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000778:	f000 f900 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000078 	.word	0x20000078
 8000784:	40011000 	.word	0x40011000

08000788 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <_ZL19MX_USART3_UART_Initv+0x54>)
 80007c0:	f001 fe9a 	bl	80024f8 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bf14      	ite	ne
 80007ca:	2301      	movne	r3, #1
 80007cc:	2300      	moveq	r3, #0
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80007d4:	f000 f8d2 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000bc 	.word	0x200000bc
 80007e0:	40004800 	.word	0x40004800

080007e4 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <_ZL19MX_USART6_UART_Initv+0x58>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <_ZL19MX_USART6_UART_Initv+0x54>)
 800081c:	f001 fe6c 	bl	80024f8 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	bf14      	ite	ne
 8000826:	2301      	movne	r3, #1
 8000828:	2300      	moveq	r3, #0
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8000830:	f000 f8a4 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000100 	.word	0x20000100
 800083c:	40011400 	.word	0x40011400

08000840 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <_ZL11MX_DMA_Initv+0x78>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200c      	movs	r0, #12
 8000884:	f000 fc77 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000888:	200c      	movs	r0, #12
 800088a:	f000 fc90 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2039      	movs	r0, #57	; 0x39
 8000894:	f000 fc6f 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000898:	2039      	movs	r0, #57	; 0x39
 800089a:	f000 fc88 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	203a      	movs	r0, #58	; 0x3a
 80008a4:	f000 fc67 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008a8:	203a      	movs	r0, #58	; 0x3a
 80008aa:	f000 fc80 	bl	80011ae <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a26      	ldr	r2, [pc, #152]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 80008f8:	f043 0308 	orr.w	r3, r3, #8
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a11      	ldr	r2, [pc, #68]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <_ZL12MX_GPIO_Initv+0xb8>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RS485_RE_Pin|RS485_DE_Pin|RS485_PWON_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000948:	480b      	ldr	r0, [pc, #44]	; (8000978 <_ZL12MX_GPIO_Initv+0xbc>)
 800094a:	f001 f963 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS485_RE_Pin RS485_DE_Pin RS485_PWON_Pin */
  GPIO_InitStruct.Pin = RS485_RE_Pin|RS485_DE_Pin|RS485_PWON_Pin;
 800094e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	; (8000978 <_ZL12MX_GPIO_Initv+0xbc>)
 8000968:	f000 ffb8 	bl	80018dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020c00 	.word	0x40020c00

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	; 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a9d      	ldr	r2, [pc, #628]	; (8000c6c <HAL_UART_MspInit+0x294>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d163      	bne.n	8000ac2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
 80009fe:	4b9c      	ldr	r3, [pc, #624]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a9b      	ldr	r2, [pc, #620]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b99      	ldr	r3, [pc, #612]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
 8000a1a:	4b95      	ldr	r3, [pc, #596]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b92      	ldr	r3, [pc, #584]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a44:	2307      	movs	r3, #7
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4889      	ldr	r0, [pc, #548]	; (8000c74 <HAL_UART_MspInit+0x29c>)
 8000a50:	f000 ff44 	bl	80018dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a54:	4b88      	ldr	r3, [pc, #544]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a56:	4a89      	ldr	r2, [pc, #548]	; (8000c7c <HAL_UART_MspInit+0x2a4>)
 8000a58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a5a:	4b87      	ldr	r3, [pc, #540]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a62:	4b85      	ldr	r3, [pc, #532]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a68:	4b83      	ldr	r3, [pc, #524]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6e:	4b82      	ldr	r3, [pc, #520]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b80      	ldr	r3, [pc, #512]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b7e      	ldr	r3, [pc, #504]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a82:	4b7d      	ldr	r3, [pc, #500]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a8e:	4b7a      	ldr	r3, [pc, #488]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a94:	4878      	ldr	r0, [pc, #480]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000a96:	f000 fba5 	bl	80011e4 <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000aa0:	f7ff ff6c 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a74      	ldr	r2, [pc, #464]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000aaa:	4a73      	ldr	r2, [pc, #460]	; (8000c78 <HAL_UART_MspInit+0x2a0>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2025      	movs	r0, #37	; 0x25
 8000ab6:	f000 fb5e 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aba:	2025      	movs	r0, #37	; 0x25
 8000abc:	f000 fb77 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000ac0:	e0cf      	b.n	8000c62 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART3)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a6e      	ldr	r2, [pc, #440]	; (8000c80 <HAL_UART_MspInit+0x2a8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d163      	bne.n	8000b94 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
 8000ad0:	4b67      	ldr	r3, [pc, #412]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a66      	ldr	r2, [pc, #408]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	4b60      	ldr	r3, [pc, #384]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a5f      	ldr	r2, [pc, #380]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b5d      	ldr	r3, [pc, #372]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b16:	2307      	movs	r3, #7
 8000b18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4858      	ldr	r0, [pc, #352]	; (8000c84 <HAL_UART_MspInit+0x2ac>)
 8000b22:	f000 fedb 	bl	80018dc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000b26:	4b58      	ldr	r3, [pc, #352]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b28:	4a58      	ldr	r2, [pc, #352]	; (8000c8c <HAL_UART_MspInit+0x2b4>)
 8000b2a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000b2c:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b32:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b34:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b40:	4b51      	ldr	r3, [pc, #324]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b46:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b48:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b4e:	4b4e      	ldr	r3, [pc, #312]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b5a:	4b4b      	ldr	r3, [pc, #300]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b60:	4b49      	ldr	r3, [pc, #292]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b66:	4848      	ldr	r0, [pc, #288]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b68:	f000 fb3c 	bl	80011e4 <HAL_DMA_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8000b72:	f7ff ff03 	bl	800097c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b7c:	4a42      	ldr	r2, [pc, #264]	; (8000c88 <HAL_UART_MspInit+0x2b0>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2027      	movs	r0, #39	; 0x27
 8000b88:	f000 faf5 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b8c:	2027      	movs	r0, #39	; 0x27
 8000b8e:	f000 fb0e 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000b92:	e066      	b.n	8000c62 <HAL_UART_MspInit+0x28a>
  else if(huart->Instance==USART6)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <HAL_UART_MspInit+0x2b8>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d161      	bne.n	8000c62 <HAL_UART_MspInit+0x28a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a32      	ldr	r2, [pc, #200]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000ba8:	f043 0320 	orr.w	r3, r3, #32
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b30      	ldr	r3, [pc, #192]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f003 0320 	and.w	r3, r3, #32
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_UART_MspInit+0x298>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23c0      	movs	r3, #192	; 0xc0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000be6:	2308      	movs	r3, #8
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4828      	ldr	r0, [pc, #160]	; (8000c94 <HAL_UART_MspInit+0x2bc>)
 8000bf2:	f000 fe73 	bl	80018dc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000bf6:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000bf8:	4a28      	ldr	r2, [pc, #160]	; (8000c9c <HAL_UART_MspInit+0x2c4>)
 8000bfa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000bfe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000c02:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c16:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c38:	f000 fad4 	bl	80011e4 <HAL_DMA_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8000c42:	f7ff fe9b 	bl	800097c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4c:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0x2c0>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2047      	movs	r0, #71	; 0x47
 8000c58:	f000 fa8d 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000c5c:	2047      	movs	r0, #71	; 0x47
 8000c5e:	f000 faa6 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000c62:	bf00      	nop
 8000c64:	3738      	adds	r7, #56	; 0x38
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40011000 	.word	0x40011000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	20000144 	.word	0x20000144
 8000c7c:	40026440 	.word	0x40026440
 8000c80:	40004800 	.word	0x40004800
 8000c84:	40020400 	.word	0x40020400
 8000c88:	200001a4 	.word	0x200001a4
 8000c8c:	40026028 	.word	0x40026028
 8000c90:	40011400 	.word	0x40011400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	20000204 	.word	0x20000204
 8000c9c:	40026428 	.word	0x40026428

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f924 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DMA1_Stream1_IRQHandler+0x10>)
 8000cfa:	f000 fbb3 	bl	8001464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001a4 	.word	0x200001a4

08000d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART1_IRQHandler+0x10>)
 8000d0e:	f001 fd37 	bl	8002780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000078 	.word	0x20000078

08000d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <USART3_IRQHandler+0x10>)
 8000d22:	f001 fd2d 	bl	8002780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200000bc 	.word	0x200000bc

08000d30 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <DMA2_Stream1_IRQHandler+0x10>)
 8000d36:	f000 fb95 	bl	8001464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000204 	.word	0x20000204

08000d44 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <DMA2_Stream2_IRQHandler+0x10>)
 8000d4a:	f000 fb8b 	bl	8001464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000144 	.word	0x20000144

08000d58 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART6_IRQHandler+0x10>)
 8000d5e:	f001 fd0f 	bl	8002780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000100 	.word	0x20000100

08000d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <_kill>:

int _kill(int pid, int sig)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d86:	f003 f969 	bl	800405c <__errno>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2216      	movs	r2, #22
 8000d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_exit>:

void _exit (int status)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ffe7 	bl	8000d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dae:	e7fe      	b.n	8000dae <_exit+0x12>

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	; (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f003 f93c 	bl	800405c <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20020000 	.word	0x20020000
 8000e10:	00000400 	.word	0x00000400
 8000e14:	20000264 	.word	0x20000264
 8000e18:	200003c8 	.word	0x200003c8

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f003 f8fb 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fbcf 	bl	8000614 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e84:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8000e88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e8c:	200003c4 	.word	0x200003c4

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fd5e 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000268 	.word	0x20000268

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000268 	.word	0x20000268

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff feb6 	bl	8000f60 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e099      	b.n	8001334 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0201 	bic.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001220:	e00f      	b.n	8001242 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001222:	f7ff fe9d 	bl	8000f60 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b05      	cmp	r3, #5
 800122e:	d908      	bls.n	8001242 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e078      	b.n	8001334 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e8      	bne.n	8001222 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <HAL_DMA_Init+0x158>)
 800125c:	4013      	ands	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4313      	orrs	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	2b04      	cmp	r3, #4
 800129a:	d107      	bne.n	80012ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4313      	orrs	r3, r2
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f023 0307 	bic.w	r3, r3, #7
 80012c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d117      	bne.n	8001306 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	4313      	orrs	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00e      	beq.n	8001306 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fa7b 	bl	80017e4 <DMA_CheckFifoParam>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001302:	2301      	movs	r3, #1
 8001304:	e016      	b.n	8001334 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fa32 	bl	8001778 <DMA_CalcBaseAndBitshift>
 8001314:	4603      	mov	r3, r0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	223f      	movs	r2, #63	; 0x3f
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	f010803f 	.word	0xf010803f

08001340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800134e:	f7ff fe07 	bl	8000f60 <HAL_GetTick>
 8001352:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d008      	beq.n	8001372 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e052      	b.n	8001418 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0216 	bic.w	r2, r2, #22
 8001380:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001390:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	2b00      	cmp	r3, #0
 8001398:	d103      	bne.n	80013a2 <HAL_DMA_Abort+0x62>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c2:	e013      	b.n	80013ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c4:	f7ff fdcc 	bl	8000f60 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d90c      	bls.n	80013ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2220      	movs	r2, #32
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e015      	b.n	8001418 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1e4      	bne.n	80013c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	223f      	movs	r2, #63	; 0x3f
 8001400:	409a      	lsls	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d004      	beq.n	800143e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00c      	b.n	8001458 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2205      	movs	r2, #5
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001470:	4b8e      	ldr	r3, [pc, #568]	; (80016ac <HAL_DMA_IRQHandler+0x248>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a8e      	ldr	r2, [pc, #568]	; (80016b0 <HAL_DMA_IRQHandler+0x24c>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	0a9b      	lsrs	r3, r3, #10
 800147c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148e:	2208      	movs	r2, #8
 8001490:	409a      	lsls	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d01a      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	2208      	movs	r2, #8
 80014be:	409a      	lsls	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c8:	f043 0201 	orr.w	r2, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	2201      	movs	r2, #1
 80014d6:	409a      	lsls	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d012      	beq.n	8001506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2201      	movs	r2, #1
 80014f4:	409a      	lsls	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fe:	f043 0202 	orr.w	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	2204      	movs	r2, #4
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d012      	beq.n	800153c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	2204      	movs	r2, #4
 800152a:	409a      	lsls	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	f043 0204 	orr.w	r2, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001540:	2210      	movs	r2, #16
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d043      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d03c      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155e:	2210      	movs	r2, #16
 8001560:	409a      	lsls	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d018      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d024      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
 8001592:	e01f      	b.n	80015d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	2b00      	cmp	r3, #0
 800159a:	d01b      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
 80015a4:	e016      	b.n	80015d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0208 	bic.w	r2, r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2220      	movs	r2, #32
 80015da:	409a      	lsls	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f000 808f 	beq.w	8001704 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8087 	beq.w	8001704 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fa:	2220      	movs	r2, #32
 80015fc:	409a      	lsls	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b05      	cmp	r3, #5
 800160c:	d136      	bne.n	800167c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0216 	bic.w	r2, r2, #22
 800161c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800162c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	d103      	bne.n	800163e <HAL_DMA_IRQHandler+0x1da>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	223f      	movs	r2, #63	; 0x3f
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166e:	2b00      	cmp	r3, #0
 8001670:	d07e      	beq.n	8001770 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	4798      	blx	r3
        }
        return;
 800167a:	e079      	b.n	8001770 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d01d      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10d      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	2b00      	cmp	r3, #0
 800169e:	d031      	beq.n	8001704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
 80016a8:	e02c      	b.n	8001704 <HAL_DMA_IRQHandler+0x2a0>
 80016aa:	bf00      	nop
 80016ac:	20000000 	.word	0x20000000
 80016b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d023      	beq.n	8001704 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
 80016c4:	e01e      	b.n	8001704 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10f      	bne.n	80016f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0210 	bic.w	r2, r2, #16
 80016e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	2b00      	cmp	r3, #0
 800170a:	d032      	beq.n	8001772 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d022      	beq.n	800175e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2205      	movs	r2, #5
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	3301      	adds	r3, #1
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	d307      	bcc.n	800174c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f2      	bne.n	8001730 <HAL_DMA_IRQHandler+0x2cc>
 800174a:	e000      	b.n	800174e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800174c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	2b00      	cmp	r3, #0
 8001764:	d005      	beq.n	8001772 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
 800176e:	e000      	b.n	8001772 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001770:	bf00      	nop
    }
  }
}
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	3b10      	subs	r3, #16
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <DMA_CalcBaseAndBitshift+0x64>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001792:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <DMA_CalcBaseAndBitshift+0x68>)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d909      	bls.n	80017ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	1d1a      	adds	r2, r3, #4
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58
 80017b8:	e007      	b.n	80017ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	aaaaaaab 	.word	0xaaaaaaab
 80017e0:	08004974 	.word	0x08004974

080017e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d11f      	bne.n	800183e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d856      	bhi.n	80018b2 <DMA_CheckFifoParam+0xce>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <DMA_CheckFifoParam+0x28>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	0800181d 	.word	0x0800181d
 8001810:	0800182f 	.word	0x0800182f
 8001814:	0800181d 	.word	0x0800181d
 8001818:	080018b3 	.word	0x080018b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d046      	beq.n	80018b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800182c:	e043      	b.n	80018b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001836:	d140      	bne.n	80018ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800183c:	e03d      	b.n	80018ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001846:	d121      	bne.n	800188c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d837      	bhi.n	80018be <DMA_CheckFifoParam+0xda>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <DMA_CheckFifoParam+0x70>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	08001865 	.word	0x08001865
 8001858:	0800186b 	.word	0x0800186b
 800185c:	08001865 	.word	0x08001865
 8001860:	0800187d 	.word	0x0800187d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	73fb      	strb	r3, [r7, #15]
      break;
 8001868:	e030      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d025      	beq.n	80018c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800187a:	e022      	b.n	80018c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001884:	d11f      	bne.n	80018c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800188a:	e01c      	b.n	80018c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d903      	bls.n	800189a <DMA_CheckFifoParam+0xb6>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d003      	beq.n	80018a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001898:	e018      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
      break;
 800189e:	e015      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00e      	beq.n	80018ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      break;
 80018b0:	e00b      	b.n	80018ca <DMA_CheckFifoParam+0xe6>
      break;
 80018b2:	bf00      	nop
 80018b4:	e00a      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e008      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;
 80018ba:	bf00      	nop
 80018bc:	e006      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;
 80018be:	bf00      	nop
 80018c0:	e004      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;
 80018c2:	bf00      	nop
 80018c4:	e002      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;   
 80018c6:	bf00      	nop
 80018c8:	e000      	b.n	80018cc <DMA_CheckFifoParam+0xe8>
      break;
 80018ca:	bf00      	nop
    }
  } 
  
  return status; 
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e16b      	b.n	8001bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 815a 	bne.w	8001bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b4 	beq.w	8001bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d02b      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae90 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021c00 	.word	0x40021c00
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e267      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b7e      	ldr	r3, [pc, #504]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e242      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a75      	ldr	r2, [pc, #468]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6f      	ldr	r2, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6c      	ldr	r2, [pc, #432]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b69      	ldr	r3, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a68      	ldr	r2, [pc, #416]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b66      	ldr	r3, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a65      	ldr	r2, [pc, #404]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff f92e 	bl	8000f60 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff f92a 	bl	8000f60 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e207      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f91a 	bl	8000f60 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff f916 	bl	8000f60 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f3      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c7      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff f8cf 	bl	8000f60 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f8cb 	bl	8000f60 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a8      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4925      	ldr	r1, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x244>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8ae 	bl	8000f60 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff f8aa 	bl	8000f60 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e187      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d036      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff f88e 	bl	8000f60 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff f88a 	bl	8000f60 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e167      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e01b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_OscConfig+0x248>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f877 	bl	8000f60 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f873 	bl	8000f60 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e150      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	42470000 	.word	0x42470000
 8001e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b88      	ldr	r3, [pc, #544]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8097 	beq.w	8001fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b7d      	ldr	r3, [pc, #500]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a7c      	ldr	r2, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b7a      	ldr	r3, [pc, #488]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b77      	ldr	r3, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b74      	ldr	r3, [pc, #464]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a73      	ldr	r2, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f833 	bl	8000f60 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff f82f 	bl	8000f60 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e10c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x474>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2ea>
 8001f24:	4b64      	ldr	r3, [pc, #400]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f28:	4a63      	ldr	r2, [pc, #396]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x30c>
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	6713      	str	r3, [r2, #112]	; 0x70
 8001f46:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a5b      	ldr	r2, [pc, #364]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x324>
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a57      	ldr	r2, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0304 	bic.w	r3, r3, #4
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7fe fff4 	bl	8000f60 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fff0 	bl	8000f60 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0cb      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0ee      	beq.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f9e:	e014      	b.n	8001fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe ffde 	bl	8000f60 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7fe ffda 	bl	8000f60 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0b5      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ee      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b39      	ldr	r3, [pc, #228]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80a1 	beq.w	8002128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe6:	4b34      	ldr	r3, [pc, #208]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d05c      	beq.n	80020ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d141      	bne.n	800207e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe ffae 	bl	8000f60 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe ffaa 	bl	8000f60 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e087      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	019b      	lsls	r3, r3, #6
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	041b      	lsls	r3, r3, #16
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	061b      	lsls	r3, r3, #24
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe ff83 	bl	8000f60 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe ff7f 	bl	8000f60 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e05c      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x416>
 800207c:	e054      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x478>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff6c 	bl	8000f60 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ff68 	bl	8000f60 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e045      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x470>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
 80020aa:	e03d      	b.n	8002128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e038      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d121      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11a      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d111      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d107      	bne.n	8002124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7fe fe9a 	bl	8000f60 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe fe96 	bl	8000f60 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fdfa 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	0800495c 	.word	0x0800495c
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b090      	sub	sp, #64	; 0x40
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002314:	2300      	movs	r3, #0
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80a1 	bhi.w	8002470 <HAL_RCC_GetSysClockFreq+0x16c>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e09b      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b53      	ldr	r3, [pc, #332]	; (8002488 <HAL_RCC_GetSysClockFreq+0x184>)
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800233c:	e09b      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 8002340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002342:	e098      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d028      	beq.n	80023ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	2200      	movs	r2, #0
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	627a      	str	r2, [r7, #36]	; 0x24
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800236c:	2100      	movs	r1, #0
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 8002370:	fb03 f201 	mul.w	r2, r3, r1
 8002374:	2300      	movs	r3, #0
 8002376:	fb00 f303 	mul.w	r3, r0, r3
 800237a:	4413      	add	r3, r2
 800237c:	4a43      	ldr	r2, [pc, #268]	; (800248c <HAL_RCC_GetSysClockFreq+0x188>)
 800237e:	fba0 1202 	umull	r1, r2, r0, r2
 8002382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002384:	460a      	mov	r2, r1
 8002386:	62ba      	str	r2, [r7, #40]	; 0x28
 8002388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238a:	4413      	add	r3, r2
 800238c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800238e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002390:	2200      	movs	r2, #0
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	61fa      	str	r2, [r7, #28]
 8002396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800239e:	f7fd ff6f 	bl	8000280 <__aeabi_uldivmod>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4613      	mov	r3, r2
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023aa:	e053      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	2200      	movs	r2, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	617a      	str	r2, [r7, #20]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80023be:	f04f 0b00 	mov.w	fp, #0
 80023c2:	4652      	mov	r2, sl
 80023c4:	465b      	mov	r3, fp
 80023c6:	f04f 0000 	mov.w	r0, #0
 80023ca:	f04f 0100 	mov.w	r1, #0
 80023ce:	0159      	lsls	r1, r3, #5
 80023d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d4:	0150      	lsls	r0, r2, #5
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	ebb2 080a 	subs.w	r8, r2, sl
 80023de:	eb63 090b 	sbc.w	r9, r3, fp
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023f6:	ebb2 0408 	subs.w	r4, r2, r8
 80023fa:	eb63 0509 	sbc.w	r5, r3, r9
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	00eb      	lsls	r3, r5, #3
 8002408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240c:	00e2      	lsls	r2, r4, #3
 800240e:	4614      	mov	r4, r2
 8002410:	461d      	mov	r5, r3
 8002412:	eb14 030a 	adds.w	r3, r4, sl
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	eb45 030b 	adc.w	r3, r5, fp
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242a:	4629      	mov	r1, r5
 800242c:	028b      	lsls	r3, r1, #10
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002434:	4621      	mov	r1, r4
 8002436:	028a      	lsls	r2, r1, #10
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	2200      	movs	r2, #0
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	60fa      	str	r2, [r7, #12]
 8002444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002448:	f7fd ff1a 	bl	8000280 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetSysClockFreq+0x184>)
 8002472:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002478:	4618      	mov	r0, r3
 800247a:	3740      	adds	r7, #64	; 0x40
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	00f42400 	.word	0x00f42400
 800248c:	017d7840 	.word	0x017d7840

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000000 	.word	0x20000000

080024a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024ac:	f7ff fff0 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4903      	ldr	r1, [pc, #12]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800
 80024cc:	0800496c 	.word	0x0800496c

080024d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d4:	f7ff ffdc 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0b5b      	lsrs	r3, r3, #13
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	0800496c 	.word	0x0800496c

080024f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e03f      	b.n	800258a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fa5a 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800253a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 fe11 	bl	8003164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b08a      	sub	sp, #40	; 0x28
 8002596:	af02      	add	r7, sp, #8
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d17c      	bne.n	80026ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_UART_Transmit+0x2c>
 80025b8:	88fb      	ldrh	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e075      	b.n	80026ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_UART_Transmit+0x3e>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e06e      	b.n	80026ae <HAL_UART_Transmit+0x11c>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025e6:	f7fe fcbb 	bl	8000f60 <HAL_GetTick>
 80025ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	88fa      	ldrh	r2, [r7, #6]
 80025f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	88fa      	ldrh	r2, [r7, #6]
 80025f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d108      	bne.n	8002614 <HAL_UART_Transmit+0x82>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e003      	b.n	800261c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002624:	e02a      	b.n	800267c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fb51 	bl	8002cd8 <UART_WaitOnFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e036      	b.n	80026ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3302      	adds	r3, #2
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e007      	b.n	800266e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	3301      	adds	r3, #1
 800266c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1cf      	bne.n	8002626 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2140      	movs	r1, #64	; 0x40
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb21 	bl	8002cd8 <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e006      	b.n	80026ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08c      	sub	sp, #48	; 0x30
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	4613      	mov	r3, r2
 80026c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d152      	bne.n	8002776 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04b      	b.n	8002778 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80026ea:	2302      	movs	r3, #2
 80026ec:	e044      	b.n	8002778 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	461a      	mov	r2, r3
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fb56 	bl	8002db4 <UART_Start_Receive_IT>
 8002708:	4603      	mov	r3, r0
 800270a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800270e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002712:	2b00      	cmp	r3, #0
 8002714:	d12c      	bne.n	8002770 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	2b01      	cmp	r3, #1
 800271c:	d125      	bne.n	800276a <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	617b      	str	r3, [r7, #20]
   return(result);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002754:	627a      	str	r2, [r7, #36]	; 0x24
 8002756:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	61fb      	str	r3, [r7, #28]
   return(result);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8002768:	e002      	b.n	8002770 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002774:	e000      	b.n	8002778 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002776:	2302      	movs	r3, #2
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	3730      	adds	r7, #48	; 0x30
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0ba      	sub	sp, #232	; 0xe8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_UART_IRQHandler+0x66>
 80027d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d6:	f003 0320 	and.w	r3, r3, #32
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fc05 	bl	8002fee <UART_Receive_IT>
      return;
 80027e4:	e256      	b.n	8002c94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80de 	beq.w	80029ac <HAL_UART_IRQHandler+0x22c>
 80027f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002800:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80d1 	beq.w	80029ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <HAL_UART_IRQHandler+0xae>
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_UART_IRQHandler+0xd2>
 800283a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f043 0202 	orr.w	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_UART_IRQHandler+0xf6>
 800285e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d011      	beq.n	80028a6 <HAL_UART_IRQHandler+0x126>
 8002882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800288e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f043 0208 	orr.w	r2, r3, #8
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 81ed 	beq.w	8002c8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_UART_IRQHandler+0x14e>
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fb90 	bl	8002fee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_UART_IRQHandler+0x17a>
 80028f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d04f      	beq.n	800299a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa98 	bl	8002e30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d141      	bne.n	8002992 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3314      	adds	r3, #20
 8002914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800291c:	e853 3f00 	ldrex	r3, [r3]
 8002920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800292c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3314      	adds	r3, #20
 8002936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800293a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800293e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1d9      	bne.n	800290e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	2b00      	cmp	r3, #0
 8002960:	d013      	beq.n	800298a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	4a7d      	ldr	r2, [pc, #500]	; (8002b5c <HAL_UART_IRQHandler+0x3dc>)
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fd56 	bl	8001420 <HAL_DMA_Abort_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002988:	e00e      	b.n	80029a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f99a 	bl	8002cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	e00a      	b.n	80029a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f996 	bl	8002cc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	e006      	b.n	80029a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f992 	bl	8002cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029a6:	e170      	b.n	8002c8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a8:	bf00      	nop
    return;
 80029aa:	e16e      	b.n	8002c8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	f040 814a 	bne.w	8002c4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8143 	beq.w	8002c4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 813c 	beq.w	8002c4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f2:	2b40      	cmp	r3, #64	; 0x40
 80029f4:	f040 80b4 	bne.w	8002b60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8140 	beq.w	8002c8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a16:	429a      	cmp	r2, r3
 8002a18:	f080 8139 	bcs.w	8002c8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	f000 8088 	beq.w	8002b42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1d9      	bne.n	8002a32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3314      	adds	r3, #20
 8002a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a88:	e853 3f00 	ldrex	r3, [r3]
 8002a8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3314      	adds	r3, #20
 8002a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e1      	bne.n	8002a7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3314      	adds	r3, #20
 8002ac0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3314      	adds	r3, #20
 8002ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ae4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	330c      	adds	r3, #12
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0a:	e853 3f00 	ldrex	r3, [r3]
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b12:	f023 0310 	bic.w	r3, r3, #16
 8002b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b24:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e3      	bne.n	8002b00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fbff 	bl	8001340 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fd3e 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b58:	e099      	b.n	8002c8e <HAL_UART_IRQHandler+0x50e>
 8002b5a:	bf00      	nop
 8002b5c:	08002ef7 	.word	0x08002ef7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 808b 	beq.w	8002c92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8086 	beq.w	8002c92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002baa:	647a      	str	r2, [r7, #68]	; 0x44
 8002bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e3      	bne.n	8002b86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3314      	adds	r3, #20
 8002bde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002be2:	633a      	str	r2, [r7, #48]	; 0x30
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bea:	e841 2300 	strex	r3, r2, [r1]
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e3      	bne.n	8002bbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	e853 3f00 	ldrex	r3, [r3]
 8002c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0310 	bic.w	r3, r3, #16
 8002c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	330c      	adds	r3, #12
 8002c24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c28:	61fa      	str	r2, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	617b      	str	r3, [r7, #20]
   return(result);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e3      	bne.n	8002c04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fcc6 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c48:	e023      	b.n	8002c92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_UART_IRQHandler+0x4ea>
 8002c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f95b 	bl	8002f1e <UART_Transmit_IT>
    return;
 8002c68:	e014      	b.n	8002c94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <HAL_UART_IRQHandler+0x514>
 8002c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f99b 	bl	8002fbe <UART_EndTransmit_IT>
    return;
 8002c88:	e004      	b.n	8002c94 <HAL_UART_IRQHandler+0x514>
    return;
 8002c8a:	bf00      	nop
 8002c8c:	e002      	b.n	8002c94 <HAL_UART_IRQHandler+0x514>
      return;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_UART_IRQHandler+0x514>
      return;
 8002c92:	bf00      	nop
  }
}
 8002c94:	37e8      	adds	r7, #232	; 0xe8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b090      	sub	sp, #64	; 0x40
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ce8:	e050      	b.n	8002d8c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d04c      	beq.n	8002d8c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf8:	f7fe f932 	bl	8000f60 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d241      	bcs.n	8002d8c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d28:	637a      	str	r2, [r7, #52]	; 0x34
 8002d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3314      	adds	r3, #20
 8002d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d5c:	623a      	str	r2, [r7, #32]
 8002d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	69f9      	ldr	r1, [r7, #28]
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e5      	bne.n	8002d3c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e00f      	b.n	8002dac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4013      	ands	r3, r2
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d09f      	beq.n	8002cea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3740      	adds	r7, #64	; 0x40
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2222      	movs	r2, #34	; 0x22
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e00:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0220 	orr.w	r2, r2, #32
 8002e20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b095      	sub	sp, #84	; 0x54
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	330c      	adds	r3, #12
 8002e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e58:	643a      	str	r2, [r7, #64]	; 0x40
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002e5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f023 0301 	bic.w	r3, r3, #1
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e5      	bne.n	8002e6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d119      	bne.n	8002edc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f023 0310 	bic.w	r3, r3, #16
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec8:	61ba      	str	r2, [r7, #24]
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002eea:	bf00      	nop
 8002eec:	3754      	adds	r7, #84	; 0x54
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff fed7 	bl	8002cc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b21      	cmp	r3, #33	; 0x21
 8002f30:	d13e      	bne.n	8002fb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3a:	d114      	bne.n	8002f66 <UART_Transmit_IT+0x48>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d110      	bne.n	8002f66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	621a      	str	r2, [r3, #32]
 8002f64:	e008      	b.n	8002f78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	1c59      	adds	r1, r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6211      	str	r1, [r2, #32]
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	4619      	mov	r1, r3
 8002f86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002faa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fe5c 	bl	8002c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08c      	sub	sp, #48	; 0x30
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b22      	cmp	r3, #34	; 0x22
 8003000:	f040 80ab 	bne.w	800315a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d117      	bne.n	800303e <UART_Receive_IT+0x50>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	b29a      	uxth	r2, r3
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	e026      	b.n	800308c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003050:	d007      	beq.n	8003062 <UART_Receive_IT+0x74>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <UART_Receive_IT+0x82>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e008      	b.n	8003082 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800307c:	b2da      	uxtb	r2, r3
 800307e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003080:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4619      	mov	r1, r3
 800309a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800309c:	2b00      	cmp	r3, #0
 800309e:	d15a      	bne.n	8003156 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0220 	bic.w	r2, r2, #32
 80030ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d135      	bne.n	800314c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	613b      	str	r3, [r7, #16]
   return(result);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f023 0310 	bic.w	r3, r3, #16
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003106:	623a      	str	r2, [r7, #32]
 8003108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	69f9      	ldr	r1, [r7, #28]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	61bb      	str	r3, [r7, #24]
   return(result);
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b10      	cmp	r3, #16
 8003126:	d10a      	bne.n	800313e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7fd fa45 	bl	80005d4 <HAL_UARTEx_RxEventCallback>
 800314a:	e002      	b.n	8003152 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fdaf 	bl	8002cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e002      	b.n	800315c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3730      	adds	r7, #48	; 0x30
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003168:	b0c0      	sub	sp, #256	; 0x100
 800316a:	af00      	add	r7, sp, #0
 800316c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003180:	68d9      	ldr	r1, [r3, #12]
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	ea40 0301 	orr.w	r3, r0, r1
 800318c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	431a      	orrs	r2, r3
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031bc:	f021 010c 	bic.w	r1, r1, #12
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80031ca:	430b      	orrs	r3, r1
 80031cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	ea40 0301 	orr.w	r3, r0, r1
 80031ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b8f      	ldr	r3, [pc, #572]	; (8003430 <UART_SetConfig+0x2cc>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <UART_SetConfig+0xa0>
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <UART_SetConfig+0x2d0>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d104      	bne.n	800320e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7ff f964 	bl	80024d0 <HAL_RCC_GetPCLK2Freq>
 8003208:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800320c:	e003      	b.n	8003216 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320e:	f7ff f94b 	bl	80024a8 <HAL_RCC_GetPCLK1Freq>
 8003212:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003220:	f040 810c 	bne.w	800343c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800322e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003232:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003236:	4622      	mov	r2, r4
 8003238:	462b      	mov	r3, r5
 800323a:	1891      	adds	r1, r2, r2
 800323c:	65b9      	str	r1, [r7, #88]	; 0x58
 800323e:	415b      	adcs	r3, r3
 8003240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003242:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003246:	4621      	mov	r1, r4
 8003248:	eb12 0801 	adds.w	r8, r2, r1
 800324c:	4629      	mov	r1, r5
 800324e:	eb43 0901 	adc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003274:	462b      	mov	r3, r5
 8003276:	eb49 0303 	adc.w	r3, r9, r3
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800328a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800328e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003292:	460b      	mov	r3, r1
 8003294:	18db      	adds	r3, r3, r3
 8003296:	653b      	str	r3, [r7, #80]	; 0x50
 8003298:	4613      	mov	r3, r2
 800329a:	eb42 0303 	adc.w	r3, r2, r3
 800329e:	657b      	str	r3, [r7, #84]	; 0x54
 80032a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80032a8:	f7fc ffea 	bl	8000280 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4b61      	ldr	r3, [pc, #388]	; (8003438 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2302 	umull	r2, r3, r3, r2
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	011c      	lsls	r4, r3, #4
 80032ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80032c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	1891      	adds	r1, r2, r2
 80032d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80032d4:	415b      	adcs	r3, r3
 80032d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032dc:	4641      	mov	r1, r8
 80032de:	eb12 0a01 	adds.w	sl, r2, r1
 80032e2:	4649      	mov	r1, r9
 80032e4:	eb43 0b01 	adc.w	fp, r3, r1
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032fc:	4692      	mov	sl, r2
 80032fe:	469b      	mov	fp, r3
 8003300:	4643      	mov	r3, r8
 8003302:	eb1a 0303 	adds.w	r3, sl, r3
 8003306:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800330a:	464b      	mov	r3, r9
 800330c:	eb4b 0303 	adc.w	r3, fp, r3
 8003310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003320:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003324:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	643b      	str	r3, [r7, #64]	; 0x40
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	647b      	str	r3, [r7, #68]	; 0x44
 8003336:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800333a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800333e:	f7fc ff9f 	bl	8000280 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4611      	mov	r1, r2
 8003348:	4b3b      	ldr	r3, [pc, #236]	; (8003438 <UART_SetConfig+0x2d4>)
 800334a:	fba3 2301 	umull	r2, r3, r3, r1
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	2264      	movs	r2, #100	; 0x64
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800335e:	4b36      	ldr	r3, [pc, #216]	; (8003438 <UART_SetConfig+0x2d4>)
 8003360:	fba3 2302 	umull	r2, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800336c:	441c      	add	r4, r3
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003378:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800337c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	1891      	adds	r1, r2, r2
 8003386:	63b9      	str	r1, [r7, #56]	; 0x38
 8003388:	415b      	adcs	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003390:	4641      	mov	r1, r8
 8003392:	1851      	adds	r1, r2, r1
 8003394:	6339      	str	r1, [r7, #48]	; 0x30
 8003396:	4649      	mov	r1, r9
 8003398:	414b      	adcs	r3, r1
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80033a8:	4659      	mov	r1, fp
 80033aa:	00cb      	lsls	r3, r1, #3
 80033ac:	4651      	mov	r1, sl
 80033ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033b2:	4651      	mov	r1, sl
 80033b4:	00ca      	lsls	r2, r1, #3
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	4642      	mov	r2, r8
 80033be:	189b      	adds	r3, r3, r2
 80033c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c4:	464b      	mov	r3, r9
 80033c6:	460a      	mov	r2, r1
 80033c8:	eb42 0303 	adc.w	r3, r2, r3
 80033cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80033dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80033e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80033e4:	460b      	mov	r3, r1
 80033e6:	18db      	adds	r3, r3, r3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ea:	4613      	mov	r3, r2
 80033ec:	eb42 0303 	adc.w	r3, r2, r3
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033fa:	f7fc ff41 	bl	8000280 <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <UART_SetConfig+0x2d4>)
 8003404:	fba3 1302 	umull	r1, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	2164      	movs	r1, #100	; 0x64
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3332      	adds	r3, #50	; 0x32
 8003416:	4a08      	ldr	r2, [pc, #32]	; (8003438 <UART_SetConfig+0x2d4>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4422      	add	r2, r4
 800342a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800342c:	e106      	b.n	800363c <UART_SetConfig+0x4d8>
 800342e:	bf00      	nop
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800343c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003446:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800344a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800344e:	4642      	mov	r2, r8
 8003450:	464b      	mov	r3, r9
 8003452:	1891      	adds	r1, r2, r2
 8003454:	6239      	str	r1, [r7, #32]
 8003456:	415b      	adcs	r3, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800345e:	4641      	mov	r1, r8
 8003460:	1854      	adds	r4, r2, r1
 8003462:	4649      	mov	r1, r9
 8003464:	eb43 0501 	adc.w	r5, r3, r1
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	00eb      	lsls	r3, r5, #3
 8003472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003476:	00e2      	lsls	r2, r4, #3
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	4643      	mov	r3, r8
 800347e:	18e3      	adds	r3, r4, r3
 8003480:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003484:	464b      	mov	r3, r9
 8003486:	eb45 0303 	adc.w	r3, r5, r3
 800348a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800349a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80034aa:	4629      	mov	r1, r5
 80034ac:	008b      	lsls	r3, r1, #2
 80034ae:	4621      	mov	r1, r4
 80034b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034b4:	4621      	mov	r1, r4
 80034b6:	008a      	lsls	r2, r1, #2
 80034b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80034bc:	f7fc fee0 	bl	8000280 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b60      	ldr	r3, [pc, #384]	; (8003648 <UART_SetConfig+0x4e4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80034dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	61b9      	str	r1, [r7, #24]
 80034e8:	415b      	adcs	r3, r3
 80034ea:	61fb      	str	r3, [r7, #28]
 80034ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f0:	4641      	mov	r1, r8
 80034f2:	1851      	adds	r1, r2, r1
 80034f4:	6139      	str	r1, [r7, #16]
 80034f6:	4649      	mov	r1, r9
 80034f8:	414b      	adcs	r3, r1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003508:	4659      	mov	r1, fp
 800350a:	00cb      	lsls	r3, r1, #3
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003512:	4651      	mov	r1, sl
 8003514:	00ca      	lsls	r2, r1, #3
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	4603      	mov	r3, r0
 800351c:	4642      	mov	r2, r8
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003524:	464b      	mov	r3, r9
 8003526:	460a      	mov	r2, r1
 8003528:	eb42 0303 	adc.w	r3, r2, r3
 800352c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	67bb      	str	r3, [r7, #120]	; 0x78
 800353a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003548:	4649      	mov	r1, r9
 800354a:	008b      	lsls	r3, r1, #2
 800354c:	4641      	mov	r1, r8
 800354e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003552:	4641      	mov	r1, r8
 8003554:	008a      	lsls	r2, r1, #2
 8003556:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800355a:	f7fc fe91 	bl	8000280 <__aeabi_uldivmod>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4611      	mov	r1, r2
 8003564:	4b38      	ldr	r3, [pc, #224]	; (8003648 <UART_SetConfig+0x4e4>)
 8003566:	fba3 2301 	umull	r2, r3, r3, r1
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2264      	movs	r2, #100	; 0x64
 800356e:	fb02 f303 	mul.w	r3, r2, r3
 8003572:	1acb      	subs	r3, r1, r3
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a33      	ldr	r2, [pc, #204]	; (8003648 <UART_SetConfig+0x4e4>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003584:	441c      	add	r4, r3
 8003586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358a:	2200      	movs	r2, #0
 800358c:	673b      	str	r3, [r7, #112]	; 0x70
 800358e:	677a      	str	r2, [r7, #116]	; 0x74
 8003590:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	415b      	adcs	r3, r3
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80035d6:	464b      	mov	r3, r9
 80035d8:	460a      	mov	r2, r1
 80035da:	eb42 0303 	adc.w	r3, r2, r3
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ea:	667a      	str	r2, [r7, #100]	; 0x64
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035f8:	4649      	mov	r1, r9
 80035fa:	008b      	lsls	r3, r1, #2
 80035fc:	4641      	mov	r1, r8
 80035fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003602:	4641      	mov	r1, r8
 8003604:	008a      	lsls	r2, r1, #2
 8003606:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800360a:	f7fc fe39 	bl	8000280 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <UART_SetConfig+0x4e4>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <UART_SetConfig+0x4e4>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	f003 020f 	and.w	r2, r3, #15
 8003632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4422      	add	r2, r4
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003642:	46bd      	mov	sp, r7
 8003644:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003648:	51eb851f 	.word	0x51eb851f

0800364c <_ZN7logData11getInstanceEv>:

    logData(/* args */);
    ~logData();

public:
    static logData *getInstance(void)
 800364c:	b598      	push	{r3, r4, r7, lr}
 800364e:	af00      	add	r7, sp, #0
    {
        if (instancePtr == nullptr)
 8003650:	4b08      	ldr	r3, [pc, #32]	; (8003674 <_ZN7logData11getInstanceEv+0x28>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <_ZN7logData11getInstanceEv+0x20>
        {
            instancePtr = new logData;
 8003658:	2004      	movs	r0, #4
 800365a:	f000 fb8d 	bl	8003d78 <_Znwj>
 800365e:	4603      	mov	r3, r0
 8003660:	461c      	mov	r4, r3
 8003662:	4620      	mov	r0, r4
 8003664:	f000 f838 	bl	80036d8 <_ZN7logDataC1Ev>
 8003668:	4b02      	ldr	r3, [pc, #8]	; (8003674 <_ZN7logData11getInstanceEv+0x28>)
 800366a:	601c      	str	r4, [r3, #0]
        }
        return instancePtr;
 800366c:	4b01      	ldr	r3, [pc, #4]	; (8003674 <_ZN7logData11getInstanceEv+0x28>)
 800366e:	681b      	ldr	r3, [r3, #0]
    }
 8003670:	4618      	mov	r0, r3
 8003672:	bd98      	pop	{r3, r4, r7, pc}
 8003674:	20000270 	.word	0x20000270

08003678 <_ZN9interfaceC1Ev>:

#include "interface.h"

interface *interface::instancePtr = nullptr;

interface::interface(/* args */)
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
{
}
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <_ZN9interface8initMainEv>:

interface::~interface()
{
}

void interface::initMain(void){
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	LOGI("MCU %s","start");
 8003698:	f7ff ffd8 	bl	800364c <_ZN7logData11getInstanceEv>
 800369c:	4603      	mov	r3, r0
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <_ZN9interface8initMainEv+0x20>)
 80036a0:	4904      	ldr	r1, [pc, #16]	; (80036b4 <_ZN9interface8initMainEv+0x24>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f826 	bl	80036f4 <_ZN7logData8LogInforEPKcz>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	080047f4 	.word	0x080047f4
 80036b4:	080047fc 	.word	0x080047fc

080036b8 <_ZN7logData13logDataConfigC1Ev>:
    struct logDataConfig
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <_ZN7logData13logDataConfigC1Ev+0x1c>)
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4618      	mov	r0, r3
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	20000100 	.word	0x20000100

080036d8 <_ZN7logDataC1Ev>:

#include "logData.h"

logData *logData::instancePtr = nullptr;

logData::logData(/* args */)
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ffe8 	bl	80036b8 <_ZN7logData13logDataConfigC1Ev>
{
}
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <_ZN7logData8LogInforEPKcz>:
logData::~logData()
{
}

void logData::LogInfor(const char *format, ...)
{
 80036f4:	b40e      	push	{r1, r2, r3}
 80036f6:	b590      	push	{r4, r7, lr}
 80036f8:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	6018      	str	r0, [r3, #0]
    char data[500] = {};
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	3304      	adds	r3, #4
 8003716:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fc41 	bl	8003fa4 <memset>

    //sprintf(data, "[INFOR] %s  %s\r\n", format, args);

    va_list args;
    va_start(args, format);
 8003722:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8003726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800372e:	601a      	str	r2, [r3, #0]
    sprintf(data, "[INFOR] ");
 8003730:	f107 030c 	add.w	r3, r7, #12
 8003734:	4920      	ldr	r1, [pc, #128]	; (80037b8 <_ZN7logData8LogInforEPKcz+0xc4>)
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fbf4 	bl	8003f24 <siprintf>
    vsprintf(data + strlen(data), format, args);
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	4618      	mov	r0, r3
 8003742:	f7fc fd45 	bl	80001d0 <strlen>
 8003746:	4602      	mov	r2, r0
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	1898      	adds	r0, r3, r2
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800375c:	f000 fc18 	bl	8003f90 <vsiprintf>
    va_end(args);

    strcat(data, "\r\n");
 8003760:	f107 030c 	add.w	r3, r7, #12
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc fd33 	bl	80001d0 <strlen>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	4413      	add	r3, r2
 8003774:	4a11      	ldr	r2, [pc, #68]	; (80037bc <_ZN7logData8LogInforEPKcz+0xc8>)
 8003776:	8811      	ldrh	r1, [r2, #0]
 8003778:	7892      	ldrb	r2, [r2, #2]
 800377a:	8019      	strh	r1, [r3, #0]
 800377c:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(logData::logConfig.uart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 800377e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	f107 030c 	add.w	r3, r7, #12
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc fd1e 	bl	80001d0 <strlen>
 8003794:	4603      	mov	r3, r0
 8003796:	b29a      	uxth	r2, r3
 8003798:	f107 010c 	add.w	r1, r7, #12
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7fe fef6 	bl	8002592 <HAL_UART_Transmit>
}
 80037a6:	bf00      	nop
 80037a8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80037b2:	b003      	add	sp, #12
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	08004804 	.word	0x08004804
 80037bc:	08004810 	.word	0x08004810

080037c0 <_ZN7logData8LogErrorEPKcz>:

void logData::LogError(const char *format, ...)
{
 80037c0:	b40e      	push	{r1, r2, r3}
 80037c2:	b590      	push	{r4, r7, lr}
 80037c4:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d2:	6018      	str	r0, [r3, #0]
    char data[500] = {};
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	3304      	adds	r3, #4
 80037e2:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fbdb 	bl	8003fa4 <memset>

    va_list args;
    va_start(args, format);
 80037ee:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80037fa:	601a      	str	r2, [r3, #0]
    sprintf(data, "[ERROR] ");
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	4920      	ldr	r1, [pc, #128]	; (8003884 <_ZN7logData8LogErrorEPKcz+0xc4>)
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fb8e 	bl	8003f24 <siprintf>
    vsprintf(data + strlen(data), format, args);
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fcdf 	bl	80001d0 <strlen>
 8003812:	4602      	mov	r2, r0
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	1898      	adds	r0, r3, r2
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003828:	f000 fbb2 	bl	8003f90 <vsiprintf>
    va_end(args);

    strcat(data, "\r\n");
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4618      	mov	r0, r3
 8003832:	f7fc fccd 	bl	80001d0 <strlen>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	f107 030c 	add.w	r3, r7, #12
 800383e:	4413      	add	r3, r2
 8003840:	4a11      	ldr	r2, [pc, #68]	; (8003888 <_ZN7logData8LogErrorEPKcz+0xc8>)
 8003842:	8811      	ldrh	r1, [r2, #0]
 8003844:	7892      	ldrb	r2, [r2, #2]
 8003846:	8019      	strh	r1, [r3, #0]
 8003848:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(logData::logConfig.uart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681c      	ldr	r4, [r3, #0]
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcb8 	bl	80001d0 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	f107 010c 	add.w	r1, r7, #12
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	4620      	mov	r0, r4
 800386e:	f7fe fe90 	bl	8002592 <HAL_UART_Transmit>
}
 8003872:	bf00      	nop
 8003874:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003878:	46bd      	mov	sp, r7
 800387a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800387e:	b003      	add	sp, #12
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	08004814 	.word	0x08004814
 8003888:	08004810 	.word	0x08004810

0800388c <_ZN7logData10LogWarningEPKcz>:

void logData::LogWarning(const char *format, ...)
{
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	b590      	push	{r4, r7, lr}
 8003890:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003894:	af00      	add	r7, sp, #0
 8003896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800389e:	6018      	str	r0, [r3, #0]
    char data[500] = {};
 80038a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	3304      	adds	r3, #4
 80038ae:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fb75 	bl	8003fa4 <memset>

    // sprintf(data, "[INFOR] %s  %s\r\n", format, args);

    va_list args;
    va_start(args, format);
 80038ba:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038c6:	601a      	str	r2, [r3, #0]
    sprintf(data, "[WARNING] ");
 80038c8:	f107 030c 	add.w	r3, r7, #12
 80038cc:	4920      	ldr	r1, [pc, #128]	; (8003950 <_ZN7logData10LogWarningEPKcz+0xc4>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fb28 	bl	8003f24 <siprintf>
    vsprintf(data + strlen(data), format, args);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fc fc79 	bl	80001d0 <strlen>
 80038de:	4602      	mov	r2, r0
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	1898      	adds	r0, r3, r2
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 80038f4:	f000 fb4c 	bl	8003f90 <vsiprintf>
    va_end(args);

    strcat(data, "\r\n");
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fc67 	bl	80001d0 <strlen>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	4413      	add	r3, r2
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <_ZN7logData10LogWarningEPKcz+0xc8>)
 800390e:	8811      	ldrh	r1, [r2, #0]
 8003910:	7892      	ldrb	r2, [r2, #2]
 8003912:	8019      	strh	r1, [r3, #0]
 8003914:	709a      	strb	r2, [r3, #2]

    HAL_UART_Transmit(logData::logConfig.uart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681c      	ldr	r4, [r3, #0]
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fc52 	bl	80001d0 <strlen>
 800392c:	4603      	mov	r3, r0
 800392e:	b29a      	uxth	r2, r3
 8003930:	f107 010c 	add.w	r1, r7, #12
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	4620      	mov	r0, r4
 800393a:	f7fe fe2a 	bl	8002592 <HAL_UART_Transmit>
}
 800393e:	bf00      	nop
 8003940:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800394a:	b003      	add	sp, #12
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	08004820 	.word	0x08004820
 8003954:	08004810 	.word	0x08004810

08003958 <_ZN6pulsar12pulsarConfigC1Ev>:
	{
		GPIO_TypeDef *Port;
		uint16_t pin;
	};

	struct pulsarConfig
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <_ZN6pulsar12pulsarConfigC1Ev+0x4c>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <_ZN6pulsar12pulsarConfigC1Ev+0x50>)
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <_ZN6pulsar12pulsarConfigC1Ev+0x54>)
 8003970:	3308      	adds	r3, #8
 8003972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003976:	e883 0003 	stmia.w	r3, {r0, r1}
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <_ZN6pulsar12pulsarConfigC1Ev+0x58>)
 800397e:	3310      	adds	r3, #16
 8003980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003984:	e883 0003 	stmia.w	r3, {r0, r1}
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <_ZN6pulsar12pulsarConfigC1Ev+0x5c>)
 800398c:	3318      	adds	r3, #24
 800398e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003992:	e883 0003 	stmia.w	r3, {r0, r1}
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20000078 	.word	0x20000078
 80039a8:	20000144 	.word	0x20000144
 80039ac:	08004834 	.word	0x08004834
 80039b0:	0800483c 	.word	0x0800483c
 80039b4:	08004844 	.word	0x08004844

080039b8 <_ZN6pulsar10parentDataC1Ev>:
			.Port = RS485_RE_GPIO_Port,
			.pin = RS485_RE_Pin};
	};
	pulsarConfig config;

	struct parentData
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	2363      	movs	r3, #99	; 0x63
 80039c6:	461a      	mov	r2, r3
 80039c8:	2100      	movs	r1, #0
 80039ca:	f000 faeb 	bl	8003fa4 <memset>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <_ZN6pulsarC1Ev>:

#include "pulsar.h"

pulsar *pulsar::instancePtr = nullptr;

pulsar::pulsar(/* args */)
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ffb4 	bl	8003958 <_ZN6pulsar12pulsarConfigC1Ev>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3320      	adds	r3, #32
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ffdf 	bl	80039b8 <_ZN6pulsar10parentDataC1Ev>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
{
}
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZN6pulsar13modbusOnPowerEv>:
pulsar::~pulsar()
{
}

void pulsar::modbusOnPower()
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config.powerPin.Port, config.powerPin.pin, GPIO_PIN_SET);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6898      	ldr	r0, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	899b      	ldrh	r3, [r3, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7fe f8f8 	bl	8001c14 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8003a24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003a28:	f7fd faa6 	bl	8000f78 <HAL_Delay>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN6pulsar14modbusTransmitEv>:

/**
 * The function modbusTransmit sets the DE and RE pins to high.
 */
void pulsar::modbusTransmit()
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	// modbusOnPower();
	HAL_GPIO_WritePin(config.DEPin.Port, config.DEPin.pin, GPIO_PIN_SET);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6918      	ldr	r0, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8a9b      	ldrh	r3, [r3, #20]
 8003a44:	2201      	movs	r2, #1
 8003a46:	4619      	mov	r1, r3
 8003a48:	f7fe f8e4 	bl	8001c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.REPin.Port, config.REPin.pin, GPIO_PIN_SET);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6998      	ldr	r0, [r3, #24]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8b9b      	ldrh	r3, [r3, #28]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7fe f8dc 	bl	8001c14 <HAL_GPIO_WritePin>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <_ZN6pulsar13modbusReceiveEv>:

/**
 * The function modbusReceive() sets the DE and RE pins to low.
 */
void pulsar::modbusReceive()
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	// modbusOnPower();
	HAL_GPIO_WritePin(config.DEPin.Port, config.DEPin.pin, GPIO_PIN_RESET);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6918      	ldr	r0, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8a9b      	ldrh	r3, [r3, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	4619      	mov	r1, r3
 8003a78:	f7fe f8cc 	bl	8001c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.REPin.Port, config.REPin.pin, GPIO_PIN_RESET);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6998      	ldr	r0, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8b9b      	ldrh	r3, [r3, #28]
 8003a84:	2200      	movs	r2, #0
 8003a86:	4619      	mov	r1, r3
 8003a88:	f7fe f8c4 	bl	8001c14 <HAL_GPIO_WritePin>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN6pulsar9modbusOffEv>:

/**
 * The function turns off the Modbus communication by resetting the DE pin and setting the RE pin.
 */
void pulsar::modbusOff()
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(config.DEPin.Port, config.DEPin.pin, GPIO_PIN_RESET);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6918      	ldr	r0, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8a9b      	ldrh	r3, [r3, #20]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f7fe f8b4 	bl	8001c14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(config.REPin.Port, config.REPin.pin, GPIO_PIN_SET);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6998      	ldr	r0, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8b9b      	ldrh	r3, [r3, #28]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7fe f8ac 	bl	8001c14 <HAL_GPIO_WritePin>
	// modbusOffPower();
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <_ZN6pulsar12calculateCRCEPKhh>:
 * want to calculate the CRC for.
 *
 * @return a uint16_t value, which is an unsigned 16-bit integer.
 */
uint16_t pulsar::calculateCRC(const uint8_t *data, uint8_t length)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	71fb      	strb	r3, [r7, #7]
	uint16_t crc = 0xFFFF;
 8003ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad6:	83fb      	strh	r3, [r7, #30]
	for (int i = 0; i < length; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e022      	b.n	8003b24 <_ZN6pulsar12calculateCRCEPKhh+0x60>
	{
		crc ^= data[i];
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	8bfb      	ldrh	r3, [r7, #30]
 8003aea:	4053      	eors	r3, r2
 8003aec:	83fb      	strh	r3, [r7, #30]
		for (int j = 0; j < 8; j++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e011      	b.n	8003b18 <_ZN6pulsar12calculateCRCEPKhh+0x54>
		{
			if (crc & 0x0001)
 8003af4:	8bfb      	ldrh	r3, [r7, #30]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d006      	beq.n	8003b0c <_ZN6pulsar12calculateCRCEPKhh+0x48>
			{
				crc = (crc >> 1) ^ 0xA001;
 8003afe:	8bfb      	ldrh	r3, [r7, #30]
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <_ZN6pulsar12calculateCRCEPKhh+0x78>)
 8003b06:	4053      	eors	r3, r2
 8003b08:	83fb      	strh	r3, [r7, #30]
 8003b0a:	e002      	b.n	8003b12 <_ZN6pulsar12calculateCRCEPKhh+0x4e>
			}
			else
			{
				crc = crc >> 1;
 8003b0c:	8bfb      	ldrh	r3, [r7, #30]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	83fb      	strh	r3, [r7, #30]
		for (int j = 0; j < 8; j++)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b07      	cmp	r3, #7
 8003b1c:	ddea      	ble.n	8003af4 <_ZN6pulsar12calculateCRCEPKhh+0x30>
	for (int i = 0; i < length; i++)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	dbd8      	blt.n	8003ade <_ZN6pulsar12calculateCRCEPKhh+0x1a>
			}
		}
	}
	return crc;
 8003b2c:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	ffffa001 	.word	0xffffa001

08003b40 <_ZN6pulsar8SET_FLAGEv>:

/**
 * The SET_FLAG function sets the pulsarFlag variable to true.
 */
void pulsar::SET_FLAG()
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	pulsarFlag = true;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_ZN6pulsar10RESET_FLAGEv>:

/**
 * The function "RESET_FLAG" sets the value of the variable "pulsarFlag" to false.
 */
void pulsar::RESET_FLAG()
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
	pulsarFlag = false;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <_ZN6pulsar8GET_FLAGEv>:
 * The function GET_FLAG returns the value of the pulsarFlag variable.
 *
 * @return the value of the variable "pulsarFlag".
 */
bool pulsar::GET_FLAG()
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	return pulsarFlag;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_ZN6pulsar8Get_sizeEt>:
 * values from 0 to 65535.
 *
 * @return a boolean value, specifically `true`.
 */
bool pulsar::Get_size(uint16_t size)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	807b      	strh	r3, [r7, #2]
	parent.size = size;
 8003b9e:	887b      	ldrh	r3, [r7, #2]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	HAL_UARTEx_ReceiveToIdle_IT(config.uart, (uint8_t *)parent.buffer, LEVEL_BUFFER_SIZE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3320      	adds	r3, #32
 8003bb0:	2263      	movs	r2, #99	; 0x63
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f7fe fd7f 	bl	80026b6 <HAL_UARTEx_ReceiveToIdle_IT>
	return true;
 8003bb8:	2301      	movs	r3, #1
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <_ZN6pulsar17pulsarSendCommandEPhhm>:
 * for a response from the Pulsar device before considering it a failure.
 *
 * @return a boolean value.
 */
bool pulsar::pulsarSendCommand(uint8_t *command, uint8_t size, uint32_t timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	71fb      	strb	r3, [r7, #7]
	HAL_UARTEx_ReceiveToIdle_IT(config.uart, (uint8_t *)parent.buffer, LEVEL_BUFFER_SIZE);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	3320      	adds	r3, #32
 8003bdc:	2263      	movs	r2, #99	; 0x63
 8003bde:	4619      	mov	r1, r3
 8003be0:	f7fe fd69 	bl	80026b6 <HAL_UARTEx_ReceiveToIdle_IT>
	modbusTransmit();
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff ff25 	bl	8003a34 <_ZN6pulsar14modbusTransmitEv>
	bool answer = false;
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]
	memset(parent.buffer, '\0', LEVEL_BUFFER_SIZE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3320      	adds	r3, #32
 8003bf2:	2263      	movs	r2, #99	; 0x63
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f9d4 	bl	8003fa4 <memset>
	HAL_UART_Transmit(config.uart, command, size, timeout);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68b9      	ldr	r1, [r7, #8]
 8003c08:	f7fe fcc3 	bl	8002592 <HAL_UART_Transmit>
	modbusReceive();
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff ff29 	bl	8003a64 <_ZN6pulsar13modbusReceiveEv>
	uint32_t tickStart = HAL_GetTick();
 8003c12:	f7fd f9a5 	bl	8000f60 <HAL_GetTick>
 8003c16:	61b8      	str	r0, [r7, #24]

	while (answer == false)
 8003c18:	e052      	b.n	8003cc0 <_ZN6pulsar17pulsarSendCommandEPhhm+0xfc>
	{
		if (HAL_GetTick() - tickStart >= timeout)
 8003c1a:	f7fd f9a1 	bl	8000f60 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf94      	ite	ls
 8003c2a:	2301      	movls	r3, #1
 8003c2c:	2300      	movhi	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <_ZN6pulsar17pulsarSendCommandEPhhm+0x84>
		{
			LOGE("FALSE GET DATA FROM PULSAR", "");
 8003c34:	f7ff fd0a 	bl	800364c <_ZN7logData11getInstanceEv>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <_ZN6pulsar17pulsarSendCommandEPhhm+0x128>)
 8003c3c:	492c      	ldr	r1, [pc, #176]	; (8003cf0 <_ZN6pulsar17pulsarSendCommandEPhhm+0x12c>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7ff fdbe 	bl	80037c0 <_ZN7logData8LogErrorEPKcz>
			return false;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e04d      	b.n	8003ce4 <_ZN6pulsar17pulsarSendCommandEPhhm+0x120>
		}
		else
		{
			if (GET_FLAG())
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7ff ff95 	bl	8003b78 <_ZN6pulsar8GET_FLAGEv>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d035      	beq.n	8003cc0 <_ZN6pulsar17pulsarSendCommandEPhhm+0xfc>
			{
				uint16_t packetCRC = ((uint16_t)parent.buffer[parent.size - 1] << 8) |
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	b21a      	sxth	r2, r3
									 (parent.buffer[parent.size - 2]);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003c6e:	3b02      	subs	r3, #2
 8003c70:	68f9      	ldr	r1, [r7, #12]
 8003c72:	440b      	add	r3, r1
 8003c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c78:	b21b      	sxth	r3, r3
				uint16_t packetCRC = ((uint16_t)parent.buffer[parent.size - 1] << 8) |
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	b21b      	sxth	r3, r3
 8003c7e:	82fb      	strh	r3, [r7, #22]

				if (calculateCRC((uint8_t *)parent.buffer, parent.size - 2) == packetCRC)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f103 0120 	add.w	r1, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8003c8c:	3b02      	subs	r3, #2
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff ff16 	bl	8003ac4 <_ZN6pulsar12calculateCRCEPKhh>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	8afb      	ldrh	r3, [r7, #22]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d009      	beq.n	8003cc0 <_ZN6pulsar17pulsarSendCommandEPhhm+0xfc>
				{
					LOGI("GET DATA FROM PULSAR", "");
 8003cac:	f7ff fcce 	bl	800364c <_ZN7logData11getInstanceEv>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	4a0e      	ldr	r2, [pc, #56]	; (8003cec <_ZN6pulsar17pulsarSendCommandEPhhm+0x128>)
 8003cb4:	490f      	ldr	r1, [pc, #60]	; (8003cf4 <_ZN6pulsar17pulsarSendCommandEPhhm+0x130>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fd1c 	bl	80036f4 <_ZN7logData8LogInforEPKcz>
					return true;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e011      	b.n	8003ce4 <_ZN6pulsar17pulsarSendCommandEPhhm+0x120>
	while (answer == false)
 8003cc0:	7ffb      	ldrb	r3, [r7, #31]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0a9      	beq.n	8003c1a <_ZN6pulsar17pulsarSendCommandEPhhm+0x56>
				}
			}
		}
	}

	modbusOff();
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff fee4 	bl	8003a94 <_ZN6pulsar9modbusOffEv>
	RESET_FLAG();
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff ff45 	bl	8003b5c <_ZN6pulsar10RESET_FLAGEv>
	LOGW("ERROR GET DATA FROM PULSAR", "");
 8003cd2:	f7ff fcbb 	bl	800364c <_ZN7logData11getInstanceEv>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <_ZN6pulsar17pulsarSendCommandEPhhm+0x128>)
 8003cda:	4907      	ldr	r1, [pc, #28]	; (8003cf8 <_ZN6pulsar17pulsarSendCommandEPhhm+0x134>)
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fdd5 	bl	800388c <_ZN7logData10LogWarningEPKcz>
	return false;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	0800484c 	.word	0x0800484c
 8003cf0:	08004850 	.word	0x08004850
 8003cf4:	0800486c 	.word	0x0800486c
 8003cf8:	08004884 	.word	0x08004884

08003cfc <_ZN6pulsar13getFirmwareIDEv>:

bool pulsar::getFirmwareID()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	LOGI("GET FIRMWARE ID FROM PULSAR", "");
 8003d04:	f7ff fca2 	bl	800364c <_ZN7logData11getInstanceEv>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <_ZN6pulsar13getFirmwareIDEv+0x70>)
 8003d0c:	4918      	ldr	r1, [pc, #96]	; (8003d70 <_ZN6pulsar13getFirmwareIDEv+0x74>)
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fcf0 	bl	80036f4 <_ZN7logData8LogInforEPKcz>
	uint8_t queryFrame[8] = {0x01, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00};
 8003d14:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <_ZN6pulsar13getFirmwareIDEv+0x78>)
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d1e:	e883 0003 	stmia.w	r3, {r0, r1}
	modbusReceive();
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fe9e 	bl	8003a64 <_ZN6pulsar13modbusReceiveEv>

	uint16_t reponseCRC = calculateCRC(queryFrame, sizeof(queryFrame) - 2u);
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2206      	movs	r2, #6
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fec7 	bl	8003ac4 <_ZN6pulsar12calculateCRCEPKhh>
 8003d36:	4603      	mov	r3, r0
 8003d38:	82fb      	strh	r3, [r7, #22]
	queryFrame[6] = (uint8_t)(reponseCRC & 0xFF);
 8003d3a:	8afb      	ldrh	r3, [r7, #22]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	74bb      	strb	r3, [r7, #18]
	queryFrame[7] = (uint8_t)((reponseCRC >> 8) & 0xFF);
 8003d40:	8afb      	ldrh	r3, [r7, #22]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	74fb      	strb	r3, [r7, #19]

	pulsarSendCommand(queryFrame, sizeof(queryFrame), 1000);
 8003d4a:	f107 010c 	add.w	r1, r7, #12
 8003d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d52:	2208      	movs	r2, #8
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff35 	bl	8003bc4 <_ZN6pulsar17pulsarSendCommandEPhhm>
	modbusOff();
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fe9a 	bl	8003a94 <_ZN6pulsar9modbusOffEv>

	return true;
 8003d60:	2301      	movs	r3, #1
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	0800484c 	.word	0x0800484c
 8003d70:	080048a0 	.word	0x080048a0
 8003d74:	080048bc 	.word	0x080048bc

08003d78 <_Znwj>:
 8003d78:	2801      	cmp	r0, #1
 8003d7a:	bf38      	it	cc
 8003d7c:	2001      	movcc	r0, #1
 8003d7e:	b510      	push	{r4, lr}
 8003d80:	4604      	mov	r4, r0
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 f81a 	bl	8003dbc <malloc>
 8003d88:	b100      	cbz	r0, 8003d8c <_Znwj+0x14>
 8003d8a:	bd10      	pop	{r4, pc}
 8003d8c:	f000 f806 	bl	8003d9c <_ZSt15get_new_handlerv>
 8003d90:	b908      	cbnz	r0, 8003d96 <_Znwj+0x1e>
 8003d92:	f000 f80b 	bl	8003dac <abort>
 8003d96:	4780      	blx	r0
 8003d98:	e7f3      	b.n	8003d82 <_Znwj+0xa>
	...

08003d9c <_ZSt15get_new_handlerv>:
 8003d9c:	4b02      	ldr	r3, [pc, #8]	; (8003da8 <_ZSt15get_new_handlerv+0xc>)
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	f3bf 8f5b 	dmb	ish
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000278 	.word	0x20000278

08003dac <abort>:
 8003dac:	b508      	push	{r3, lr}
 8003dae:	2006      	movs	r0, #6
 8003db0:	f000 f928 	bl	8004004 <raise>
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7fc fff1 	bl	8000d9c <_exit>
	...

08003dbc <malloc>:
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <malloc+0xc>)
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f000 b823 	b.w	8003e0c <_malloc_r>
 8003dc6:	bf00      	nop
 8003dc8:	20000058 	.word	0x20000058

08003dcc <sbrk_aligned>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	4e0e      	ldr	r6, [pc, #56]	; (8003e08 <sbrk_aligned+0x3c>)
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	6831      	ldr	r1, [r6, #0]
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	b911      	cbnz	r1, 8003dde <sbrk_aligned+0x12>
 8003dd8:	f000 f930 	bl	800403c <_sbrk_r>
 8003ddc:	6030      	str	r0, [r6, #0]
 8003dde:	4621      	mov	r1, r4
 8003de0:	4628      	mov	r0, r5
 8003de2:	f000 f92b 	bl	800403c <_sbrk_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	d00a      	beq.n	8003e00 <sbrk_aligned+0x34>
 8003dea:	1cc4      	adds	r4, r0, #3
 8003dec:	f024 0403 	bic.w	r4, r4, #3
 8003df0:	42a0      	cmp	r0, r4
 8003df2:	d007      	beq.n	8003e04 <sbrk_aligned+0x38>
 8003df4:	1a21      	subs	r1, r4, r0
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f920 	bl	800403c <_sbrk_r>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	d101      	bne.n	8003e04 <sbrk_aligned+0x38>
 8003e00:	f04f 34ff 	mov.w	r4, #4294967295
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	20000280 	.word	0x20000280

08003e0c <_malloc_r>:
 8003e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e10:	1ccd      	adds	r5, r1, #3
 8003e12:	f025 0503 	bic.w	r5, r5, #3
 8003e16:	3508      	adds	r5, #8
 8003e18:	2d0c      	cmp	r5, #12
 8003e1a:	bf38      	it	cc
 8003e1c:	250c      	movcc	r5, #12
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	4607      	mov	r7, r0
 8003e22:	db01      	blt.n	8003e28 <_malloc_r+0x1c>
 8003e24:	42a9      	cmp	r1, r5
 8003e26:	d905      	bls.n	8003e34 <_malloc_r+0x28>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	4630      	mov	r0, r6
 8003e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003f08 <_malloc_r+0xfc>
 8003e38:	f000 f868 	bl	8003f0c <__malloc_lock>
 8003e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e40:	461c      	mov	r4, r3
 8003e42:	bb5c      	cbnz	r4, 8003e9c <_malloc_r+0x90>
 8003e44:	4629      	mov	r1, r5
 8003e46:	4638      	mov	r0, r7
 8003e48:	f7ff ffc0 	bl	8003dcc <sbrk_aligned>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	4604      	mov	r4, r0
 8003e50:	d155      	bne.n	8003efe <_malloc_r+0xf2>
 8003e52:	f8d8 4000 	ldr.w	r4, [r8]
 8003e56:	4626      	mov	r6, r4
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	d145      	bne.n	8003ee8 <_malloc_r+0xdc>
 8003e5c:	2c00      	cmp	r4, #0
 8003e5e:	d048      	beq.n	8003ef2 <_malloc_r+0xe6>
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	4631      	mov	r1, r6
 8003e64:	4638      	mov	r0, r7
 8003e66:	eb04 0903 	add.w	r9, r4, r3
 8003e6a:	f000 f8e7 	bl	800403c <_sbrk_r>
 8003e6e:	4581      	cmp	r9, r0
 8003e70:	d13f      	bne.n	8003ef2 <_malloc_r+0xe6>
 8003e72:	6821      	ldr	r1, [r4, #0]
 8003e74:	1a6d      	subs	r5, r5, r1
 8003e76:	4629      	mov	r1, r5
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f7ff ffa7 	bl	8003dcc <sbrk_aligned>
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d037      	beq.n	8003ef2 <_malloc_r+0xe6>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	442b      	add	r3, r5
 8003e86:	6023      	str	r3, [r4, #0]
 8003e88:	f8d8 3000 	ldr.w	r3, [r8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d038      	beq.n	8003f02 <_malloc_r+0xf6>
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	42a2      	cmp	r2, r4
 8003e94:	d12b      	bne.n	8003eee <_malloc_r+0xe2>
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e00f      	b.n	8003ebc <_malloc_r+0xb0>
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	1b52      	subs	r2, r2, r5
 8003ea0:	d41f      	bmi.n	8003ee2 <_malloc_r+0xd6>
 8003ea2:	2a0b      	cmp	r2, #11
 8003ea4:	d917      	bls.n	8003ed6 <_malloc_r+0xca>
 8003ea6:	1961      	adds	r1, r4, r5
 8003ea8:	42a3      	cmp	r3, r4
 8003eaa:	6025      	str	r5, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	6059      	strne	r1, [r3, #4]
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	bf08      	it	eq
 8003eb4:	f8c8 1000 	streq.w	r1, [r8]
 8003eb8:	5162      	str	r2, [r4, r5]
 8003eba:	604b      	str	r3, [r1, #4]
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f104 060b 	add.w	r6, r4, #11
 8003ec2:	f000 f829 	bl	8003f18 <__malloc_unlock>
 8003ec6:	f026 0607 	bic.w	r6, r6, #7
 8003eca:	1d23      	adds	r3, r4, #4
 8003ecc:	1af2      	subs	r2, r6, r3
 8003ece:	d0ae      	beq.n	8003e2e <_malloc_r+0x22>
 8003ed0:	1b9b      	subs	r3, r3, r6
 8003ed2:	50a3      	str	r3, [r4, r2]
 8003ed4:	e7ab      	b.n	8003e2e <_malloc_r+0x22>
 8003ed6:	42a3      	cmp	r3, r4
 8003ed8:	6862      	ldr	r2, [r4, #4]
 8003eda:	d1dd      	bne.n	8003e98 <_malloc_r+0x8c>
 8003edc:	f8c8 2000 	str.w	r2, [r8]
 8003ee0:	e7ec      	b.n	8003ebc <_malloc_r+0xb0>
 8003ee2:	4623      	mov	r3, r4
 8003ee4:	6864      	ldr	r4, [r4, #4]
 8003ee6:	e7ac      	b.n	8003e42 <_malloc_r+0x36>
 8003ee8:	4634      	mov	r4, r6
 8003eea:	6876      	ldr	r6, [r6, #4]
 8003eec:	e7b4      	b.n	8003e58 <_malloc_r+0x4c>
 8003eee:	4613      	mov	r3, r2
 8003ef0:	e7cc      	b.n	8003e8c <_malloc_r+0x80>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	f000 f80e 	bl	8003f18 <__malloc_unlock>
 8003efc:	e797      	b.n	8003e2e <_malloc_r+0x22>
 8003efe:	6025      	str	r5, [r4, #0]
 8003f00:	e7dc      	b.n	8003ebc <_malloc_r+0xb0>
 8003f02:	605b      	str	r3, [r3, #4]
 8003f04:	deff      	udf	#255	; 0xff
 8003f06:	bf00      	nop
 8003f08:	2000027c 	.word	0x2000027c

08003f0c <__malloc_lock>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__malloc_lock+0x8>)
 8003f0e:	f000 b8cf 	b.w	80040b0 <__retarget_lock_acquire_recursive>
 8003f12:	bf00      	nop
 8003f14:	200003c0 	.word	0x200003c0

08003f18 <__malloc_unlock>:
 8003f18:	4801      	ldr	r0, [pc, #4]	; (8003f20 <__malloc_unlock+0x8>)
 8003f1a:	f000 b8ca 	b.w	80040b2 <__retarget_lock_release_recursive>
 8003f1e:	bf00      	nop
 8003f20:	200003c0 	.word	0x200003c0

08003f24 <siprintf>:
 8003f24:	b40e      	push	{r1, r2, r3}
 8003f26:	b500      	push	{lr}
 8003f28:	b09c      	sub	sp, #112	; 0x70
 8003f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f2c:	9002      	str	r0, [sp, #8]
 8003f2e:	9006      	str	r0, [sp, #24]
 8003f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f34:	4809      	ldr	r0, [pc, #36]	; (8003f5c <siprintf+0x38>)
 8003f36:	9107      	str	r1, [sp, #28]
 8003f38:	9104      	str	r1, [sp, #16]
 8003f3a:	4909      	ldr	r1, [pc, #36]	; (8003f60 <siprintf+0x3c>)
 8003f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f40:	9105      	str	r1, [sp, #20]
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	a902      	add	r1, sp, #8
 8003f48:	f000 f95a 	bl	8004200 <_svfiprintf_r>
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	b01c      	add	sp, #112	; 0x70
 8003f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f58:	b003      	add	sp, #12
 8003f5a:	4770      	bx	lr
 8003f5c:	20000058 	.word	0x20000058
 8003f60:	ffff0208 	.word	0xffff0208

08003f64 <_vsiprintf_r>:
 8003f64:	b500      	push	{lr}
 8003f66:	b09b      	sub	sp, #108	; 0x6c
 8003f68:	9100      	str	r1, [sp, #0]
 8003f6a:	9104      	str	r1, [sp, #16]
 8003f6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f70:	9105      	str	r1, [sp, #20]
 8003f72:	9102      	str	r1, [sp, #8]
 8003f74:	4905      	ldr	r1, [pc, #20]	; (8003f8c <_vsiprintf_r+0x28>)
 8003f76:	9103      	str	r1, [sp, #12]
 8003f78:	4669      	mov	r1, sp
 8003f7a:	f000 f941 	bl	8004200 <_svfiprintf_r>
 8003f7e:	9b00      	ldr	r3, [sp, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	b01b      	add	sp, #108	; 0x6c
 8003f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f8a:	bf00      	nop
 8003f8c:	ffff0208 	.word	0xffff0208

08003f90 <vsiprintf>:
 8003f90:	4613      	mov	r3, r2
 8003f92:	460a      	mov	r2, r1
 8003f94:	4601      	mov	r1, r0
 8003f96:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <vsiprintf+0x10>)
 8003f98:	6800      	ldr	r0, [r0, #0]
 8003f9a:	f7ff bfe3 	b.w	8003f64 <_vsiprintf_r>
 8003f9e:	bf00      	nop
 8003fa0:	20000058 	.word	0x20000058

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <_raise_r>:
 8003fb4:	291f      	cmp	r1, #31
 8003fb6:	b538      	push	{r3, r4, r5, lr}
 8003fb8:	4604      	mov	r4, r0
 8003fba:	460d      	mov	r5, r1
 8003fbc:	d904      	bls.n	8003fc8 <_raise_r+0x14>
 8003fbe:	2316      	movs	r3, #22
 8003fc0:	6003      	str	r3, [r0, #0]
 8003fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
 8003fc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003fca:	b112      	cbz	r2, 8003fd2 <_raise_r+0x1e>
 8003fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fd0:	b94b      	cbnz	r3, 8003fe6 <_raise_r+0x32>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f830 	bl	8004038 <_getpid_r>
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4601      	mov	r1, r0
 8003fdc:	4620      	mov	r0, r4
 8003fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fe2:	f000 b817 	b.w	8004014 <_kill_r>
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d00a      	beq.n	8004000 <_raise_r+0x4c>
 8003fea:	1c59      	adds	r1, r3, #1
 8003fec:	d103      	bne.n	8003ff6 <_raise_r+0x42>
 8003fee:	2316      	movs	r3, #22
 8003ff0:	6003      	str	r3, [r0, #0]
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	e7e7      	b.n	8003fc6 <_raise_r+0x12>
 8003ff6:	2400      	movs	r4, #0
 8003ff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	4798      	blx	r3
 8004000:	2000      	movs	r0, #0
 8004002:	e7e0      	b.n	8003fc6 <_raise_r+0x12>

08004004 <raise>:
 8004004:	4b02      	ldr	r3, [pc, #8]	; (8004010 <raise+0xc>)
 8004006:	4601      	mov	r1, r0
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f7ff bfd3 	b.w	8003fb4 <_raise_r>
 800400e:	bf00      	nop
 8004010:	20000058 	.word	0x20000058

08004014 <_kill_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d07      	ldr	r5, [pc, #28]	; (8004034 <_kill_r+0x20>)
 8004018:	2300      	movs	r3, #0
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	602b      	str	r3, [r5, #0]
 8004022:	f7fc feab 	bl	8000d7c <_kill>
 8004026:	1c43      	adds	r3, r0, #1
 8004028:	d102      	bne.n	8004030 <_kill_r+0x1c>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	b103      	cbz	r3, 8004030 <_kill_r+0x1c>
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	bd38      	pop	{r3, r4, r5, pc}
 8004032:	bf00      	nop
 8004034:	200003bc 	.word	0x200003bc

08004038 <_getpid_r>:
 8004038:	f7fc be98 	b.w	8000d6c <_getpid>

0800403c <_sbrk_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4d06      	ldr	r5, [pc, #24]	; (8004058 <_sbrk_r+0x1c>)
 8004040:	2300      	movs	r3, #0
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc feb2 	bl	8000db0 <_sbrk>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d102      	bne.n	8004056 <_sbrk_r+0x1a>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	b103      	cbz	r3, 8004056 <_sbrk_r+0x1a>
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	200003bc 	.word	0x200003bc

0800405c <__errno>:
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <__errno+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000058 	.word	0x20000058

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4d0d      	ldr	r5, [pc, #52]	; (80040a0 <__libc_init_array+0x38>)
 800406c:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	2600      	movs	r6, #0
 8004074:	42a6      	cmp	r6, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	4d0b      	ldr	r5, [pc, #44]	; (80040a8 <__libc_init_array+0x40>)
 800407a:	4c0c      	ldr	r4, [pc, #48]	; (80040ac <__libc_init_array+0x44>)
 800407c:	f000 fbae 	bl	80047dc <_init>
 8004080:	1b64      	subs	r4, r4, r5
 8004082:	10a4      	asrs	r4, r4, #2
 8004084:	2600      	movs	r6, #0
 8004086:	42a6      	cmp	r6, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004090:	4798      	blx	r3
 8004092:	3601      	adds	r6, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f855 3b04 	ldr.w	r3, [r5], #4
 800409a:	4798      	blx	r3
 800409c:	3601      	adds	r6, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	080049b8 	.word	0x080049b8
 80040a4:	080049b8 	.word	0x080049b8
 80040a8:	080049b8 	.word	0x080049b8
 80040ac:	080049bc 	.word	0x080049bc

080040b0 <__retarget_lock_acquire_recursive>:
 80040b0:	4770      	bx	lr

080040b2 <__retarget_lock_release_recursive>:
 80040b2:	4770      	bx	lr

080040b4 <_free_r>:
 80040b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b6:	2900      	cmp	r1, #0
 80040b8:	d044      	beq.n	8004144 <_free_r+0x90>
 80040ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040be:	9001      	str	r0, [sp, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f1a1 0404 	sub.w	r4, r1, #4
 80040c6:	bfb8      	it	lt
 80040c8:	18e4      	addlt	r4, r4, r3
 80040ca:	f7ff ff1f 	bl	8003f0c <__malloc_lock>
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <_free_r+0x94>)
 80040d0:	9801      	ldr	r0, [sp, #4]
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	b933      	cbnz	r3, 80040e4 <_free_r+0x30>
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6014      	str	r4, [r2, #0]
 80040da:	b003      	add	sp, #12
 80040dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040e0:	f7ff bf1a 	b.w	8003f18 <__malloc_unlock>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d908      	bls.n	80040fa <_free_r+0x46>
 80040e8:	6825      	ldr	r5, [r4, #0]
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1949      	addeq	r1, r1, r5
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	e7ed      	b.n	80040d6 <_free_r+0x22>
 80040fa:	461a      	mov	r2, r3
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b10b      	cbz	r3, 8004104 <_free_r+0x50>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d9fa      	bls.n	80040fa <_free_r+0x46>
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	1855      	adds	r5, r2, r1
 8004108:	42a5      	cmp	r5, r4
 800410a:	d10b      	bne.n	8004124 <_free_r+0x70>
 800410c:	6824      	ldr	r4, [r4, #0]
 800410e:	4421      	add	r1, r4
 8004110:	1854      	adds	r4, r2, r1
 8004112:	42a3      	cmp	r3, r4
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	d1e0      	bne.n	80040da <_free_r+0x26>
 8004118:	681c      	ldr	r4, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	440c      	add	r4, r1
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	e7da      	b.n	80040da <_free_r+0x26>
 8004124:	d902      	bls.n	800412c <_free_r+0x78>
 8004126:	230c      	movs	r3, #12
 8004128:	6003      	str	r3, [r0, #0]
 800412a:	e7d6      	b.n	80040da <_free_r+0x26>
 800412c:	6825      	ldr	r5, [r4, #0]
 800412e:	1961      	adds	r1, r4, r5
 8004130:	428b      	cmp	r3, r1
 8004132:	bf04      	itt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	6063      	str	r3, [r4, #4]
 800413a:	bf04      	itt	eq
 800413c:	1949      	addeq	r1, r1, r5
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	6054      	str	r4, [r2, #4]
 8004142:	e7ca      	b.n	80040da <_free_r+0x26>
 8004144:	b003      	add	sp, #12
 8004146:	bd30      	pop	{r4, r5, pc}
 8004148:	2000027c 	.word	0x2000027c

0800414c <__ssputs_r>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	688e      	ldr	r6, [r1, #8]
 8004152:	461f      	mov	r7, r3
 8004154:	42be      	cmp	r6, r7
 8004156:	680b      	ldr	r3, [r1, #0]
 8004158:	4682      	mov	sl, r0
 800415a:	460c      	mov	r4, r1
 800415c:	4690      	mov	r8, r2
 800415e:	d82c      	bhi.n	80041ba <__ssputs_r+0x6e>
 8004160:	898a      	ldrh	r2, [r1, #12]
 8004162:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004166:	d026      	beq.n	80041b6 <__ssputs_r+0x6a>
 8004168:	6965      	ldr	r5, [r4, #20]
 800416a:	6909      	ldr	r1, [r1, #16]
 800416c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004170:	eba3 0901 	sub.w	r9, r3, r1
 8004174:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004178:	1c7b      	adds	r3, r7, #1
 800417a:	444b      	add	r3, r9
 800417c:	106d      	asrs	r5, r5, #1
 800417e:	429d      	cmp	r5, r3
 8004180:	bf38      	it	cc
 8004182:	461d      	movcc	r5, r3
 8004184:	0553      	lsls	r3, r2, #21
 8004186:	d527      	bpl.n	80041d8 <__ssputs_r+0x8c>
 8004188:	4629      	mov	r1, r5
 800418a:	f7ff fe3f 	bl	8003e0c <_malloc_r>
 800418e:	4606      	mov	r6, r0
 8004190:	b360      	cbz	r0, 80041ec <__ssputs_r+0xa0>
 8004192:	6921      	ldr	r1, [r4, #16]
 8004194:	464a      	mov	r2, r9
 8004196:	f000 fadb 	bl	8004750 <memcpy>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	81a3      	strh	r3, [r4, #12]
 80041a6:	6126      	str	r6, [r4, #16]
 80041a8:	6165      	str	r5, [r4, #20]
 80041aa:	444e      	add	r6, r9
 80041ac:	eba5 0509 	sub.w	r5, r5, r9
 80041b0:	6026      	str	r6, [r4, #0]
 80041b2:	60a5      	str	r5, [r4, #8]
 80041b4:	463e      	mov	r6, r7
 80041b6:	42be      	cmp	r6, r7
 80041b8:	d900      	bls.n	80041bc <__ssputs_r+0x70>
 80041ba:	463e      	mov	r6, r7
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	4632      	mov	r2, r6
 80041c0:	4641      	mov	r1, r8
 80041c2:	f000 faab 	bl	800471c <memmove>
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	1b9b      	subs	r3, r3, r6
 80041ca:	60a3      	str	r3, [r4, #8]
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	4433      	add	r3, r6
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	2000      	movs	r0, #0
 80041d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041d8:	462a      	mov	r2, r5
 80041da:	f000 fac7 	bl	800476c <_realloc_r>
 80041de:	4606      	mov	r6, r0
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d1e0      	bne.n	80041a6 <__ssputs_r+0x5a>
 80041e4:	6921      	ldr	r1, [r4, #16]
 80041e6:	4650      	mov	r0, sl
 80041e8:	f7ff ff64 	bl	80040b4 <_free_r>
 80041ec:	230c      	movs	r3, #12
 80041ee:	f8ca 3000 	str.w	r3, [sl]
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	f04f 30ff 	mov.w	r0, #4294967295
 80041fe:	e7e9      	b.n	80041d4 <__ssputs_r+0x88>

08004200 <_svfiprintf_r>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	4698      	mov	r8, r3
 8004206:	898b      	ldrh	r3, [r1, #12]
 8004208:	061b      	lsls	r3, r3, #24
 800420a:	b09d      	sub	sp, #116	; 0x74
 800420c:	4607      	mov	r7, r0
 800420e:	460d      	mov	r5, r1
 8004210:	4614      	mov	r4, r2
 8004212:	d50e      	bpl.n	8004232 <_svfiprintf_r+0x32>
 8004214:	690b      	ldr	r3, [r1, #16]
 8004216:	b963      	cbnz	r3, 8004232 <_svfiprintf_r+0x32>
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	f7ff fdf7 	bl	8003e0c <_malloc_r>
 800421e:	6028      	str	r0, [r5, #0]
 8004220:	6128      	str	r0, [r5, #16]
 8004222:	b920      	cbnz	r0, 800422e <_svfiprintf_r+0x2e>
 8004224:	230c      	movs	r3, #12
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	e0d0      	b.n	80043d0 <_svfiprintf_r+0x1d0>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	616b      	str	r3, [r5, #20]
 8004232:	2300      	movs	r3, #0
 8004234:	9309      	str	r3, [sp, #36]	; 0x24
 8004236:	2320      	movs	r3, #32
 8004238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800423c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043e8 <_svfiprintf_r+0x1e8>
 8004246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800424a:	f04f 0901 	mov.w	r9, #1
 800424e:	4623      	mov	r3, r4
 8004250:	469a      	mov	sl, r3
 8004252:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004256:	b10a      	cbz	r2, 800425c <_svfiprintf_r+0x5c>
 8004258:	2a25      	cmp	r2, #37	; 0x25
 800425a:	d1f9      	bne.n	8004250 <_svfiprintf_r+0x50>
 800425c:	ebba 0b04 	subs.w	fp, sl, r4
 8004260:	d00b      	beq.n	800427a <_svfiprintf_r+0x7a>
 8004262:	465b      	mov	r3, fp
 8004264:	4622      	mov	r2, r4
 8004266:	4629      	mov	r1, r5
 8004268:	4638      	mov	r0, r7
 800426a:	f7ff ff6f 	bl	800414c <__ssputs_r>
 800426e:	3001      	adds	r0, #1
 8004270:	f000 80a9 	beq.w	80043c6 <_svfiprintf_r+0x1c6>
 8004274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004276:	445a      	add	r2, fp
 8004278:	9209      	str	r2, [sp, #36]	; 0x24
 800427a:	f89a 3000 	ldrb.w	r3, [sl]
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80a1 	beq.w	80043c6 <_svfiprintf_r+0x1c6>
 8004284:	2300      	movs	r3, #0
 8004286:	f04f 32ff 	mov.w	r2, #4294967295
 800428a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800428e:	f10a 0a01 	add.w	sl, sl, #1
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800429a:	931a      	str	r3, [sp, #104]	; 0x68
 800429c:	4654      	mov	r4, sl
 800429e:	2205      	movs	r2, #5
 80042a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a4:	4850      	ldr	r0, [pc, #320]	; (80043e8 <_svfiprintf_r+0x1e8>)
 80042a6:	f7fb ff9b 	bl	80001e0 <memchr>
 80042aa:	9a04      	ldr	r2, [sp, #16]
 80042ac:	b9d8      	cbnz	r0, 80042e6 <_svfiprintf_r+0xe6>
 80042ae:	06d0      	lsls	r0, r2, #27
 80042b0:	bf44      	itt	mi
 80042b2:	2320      	movmi	r3, #32
 80042b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b8:	0711      	lsls	r1, r2, #28
 80042ba:	bf44      	itt	mi
 80042bc:	232b      	movmi	r3, #43	; 0x2b
 80042be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042c2:	f89a 3000 	ldrb.w	r3, [sl]
 80042c6:	2b2a      	cmp	r3, #42	; 0x2a
 80042c8:	d015      	beq.n	80042f6 <_svfiprintf_r+0xf6>
 80042ca:	9a07      	ldr	r2, [sp, #28]
 80042cc:	4654      	mov	r4, sl
 80042ce:	2000      	movs	r0, #0
 80042d0:	f04f 0c0a 	mov.w	ip, #10
 80042d4:	4621      	mov	r1, r4
 80042d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042da:	3b30      	subs	r3, #48	; 0x30
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d94d      	bls.n	800437c <_svfiprintf_r+0x17c>
 80042e0:	b1b0      	cbz	r0, 8004310 <_svfiprintf_r+0x110>
 80042e2:	9207      	str	r2, [sp, #28]
 80042e4:	e014      	b.n	8004310 <_svfiprintf_r+0x110>
 80042e6:	eba0 0308 	sub.w	r3, r0, r8
 80042ea:	fa09 f303 	lsl.w	r3, r9, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	46a2      	mov	sl, r4
 80042f4:	e7d2      	b.n	800429c <_svfiprintf_r+0x9c>
 80042f6:	9b03      	ldr	r3, [sp, #12]
 80042f8:	1d19      	adds	r1, r3, #4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	9103      	str	r1, [sp, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfbb      	ittet	lt
 8004302:	425b      	neglt	r3, r3
 8004304:	f042 0202 	orrlt.w	r2, r2, #2
 8004308:	9307      	strge	r3, [sp, #28]
 800430a:	9307      	strlt	r3, [sp, #28]
 800430c:	bfb8      	it	lt
 800430e:	9204      	strlt	r2, [sp, #16]
 8004310:	7823      	ldrb	r3, [r4, #0]
 8004312:	2b2e      	cmp	r3, #46	; 0x2e
 8004314:	d10c      	bne.n	8004330 <_svfiprintf_r+0x130>
 8004316:	7863      	ldrb	r3, [r4, #1]
 8004318:	2b2a      	cmp	r3, #42	; 0x2a
 800431a:	d134      	bne.n	8004386 <_svfiprintf_r+0x186>
 800431c:	9b03      	ldr	r3, [sp, #12]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	9203      	str	r2, [sp, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	bfb8      	it	lt
 8004328:	f04f 33ff 	movlt.w	r3, #4294967295
 800432c:	3402      	adds	r4, #2
 800432e:	9305      	str	r3, [sp, #20]
 8004330:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80043f8 <_svfiprintf_r+0x1f8>
 8004334:	7821      	ldrb	r1, [r4, #0]
 8004336:	2203      	movs	r2, #3
 8004338:	4650      	mov	r0, sl
 800433a:	f7fb ff51 	bl	80001e0 <memchr>
 800433e:	b138      	cbz	r0, 8004350 <_svfiprintf_r+0x150>
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	eba0 000a 	sub.w	r0, r0, sl
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	4082      	lsls	r2, r0
 800434a:	4313      	orrs	r3, r2
 800434c:	3401      	adds	r4, #1
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	4825      	ldr	r0, [pc, #148]	; (80043ec <_svfiprintf_r+0x1ec>)
 8004356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800435a:	2206      	movs	r2, #6
 800435c:	f7fb ff40 	bl	80001e0 <memchr>
 8004360:	2800      	cmp	r0, #0
 8004362:	d038      	beq.n	80043d6 <_svfiprintf_r+0x1d6>
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <_svfiprintf_r+0x1f0>)
 8004366:	bb1b      	cbnz	r3, 80043b0 <_svfiprintf_r+0x1b0>
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	3307      	adds	r3, #7
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	9303      	str	r3, [sp, #12]
 8004374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004376:	4433      	add	r3, r6
 8004378:	9309      	str	r3, [sp, #36]	; 0x24
 800437a:	e768      	b.n	800424e <_svfiprintf_r+0x4e>
 800437c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004380:	460c      	mov	r4, r1
 8004382:	2001      	movs	r0, #1
 8004384:	e7a6      	b.n	80042d4 <_svfiprintf_r+0xd4>
 8004386:	2300      	movs	r3, #0
 8004388:	3401      	adds	r4, #1
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	4619      	mov	r1, r3
 800438e:	f04f 0c0a 	mov.w	ip, #10
 8004392:	4620      	mov	r0, r4
 8004394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004398:	3a30      	subs	r2, #48	; 0x30
 800439a:	2a09      	cmp	r2, #9
 800439c:	d903      	bls.n	80043a6 <_svfiprintf_r+0x1a6>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0c6      	beq.n	8004330 <_svfiprintf_r+0x130>
 80043a2:	9105      	str	r1, [sp, #20]
 80043a4:	e7c4      	b.n	8004330 <_svfiprintf_r+0x130>
 80043a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043aa:	4604      	mov	r4, r0
 80043ac:	2301      	movs	r3, #1
 80043ae:	e7f0      	b.n	8004392 <_svfiprintf_r+0x192>
 80043b0:	ab03      	add	r3, sp, #12
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	462a      	mov	r2, r5
 80043b6:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <_svfiprintf_r+0x1f4>)
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	4638      	mov	r0, r7
 80043bc:	f3af 8000 	nop.w
 80043c0:	1c42      	adds	r2, r0, #1
 80043c2:	4606      	mov	r6, r0
 80043c4:	d1d6      	bne.n	8004374 <_svfiprintf_r+0x174>
 80043c6:	89ab      	ldrh	r3, [r5, #12]
 80043c8:	065b      	lsls	r3, r3, #25
 80043ca:	f53f af2d 	bmi.w	8004228 <_svfiprintf_r+0x28>
 80043ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043d0:	b01d      	add	sp, #116	; 0x74
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	ab03      	add	r3, sp, #12
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	462a      	mov	r2, r5
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <_svfiprintf_r+0x1f4>)
 80043de:	a904      	add	r1, sp, #16
 80043e0:	4638      	mov	r0, r7
 80043e2:	f000 f879 	bl	80044d8 <_printf_i>
 80043e6:	e7eb      	b.n	80043c0 <_svfiprintf_r+0x1c0>
 80043e8:	0800497c 	.word	0x0800497c
 80043ec:	08004986 	.word	0x08004986
 80043f0:	00000000 	.word	0x00000000
 80043f4:	0800414d 	.word	0x0800414d
 80043f8:	08004982 	.word	0x08004982

080043fc <_printf_common>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	4616      	mov	r6, r2
 8004402:	4699      	mov	r9, r3
 8004404:	688a      	ldr	r2, [r1, #8]
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800440c:	4293      	cmp	r3, r2
 800440e:	bfb8      	it	lt
 8004410:	4613      	movlt	r3, r2
 8004412:	6033      	str	r3, [r6, #0]
 8004414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004418:	4607      	mov	r7, r0
 800441a:	460c      	mov	r4, r1
 800441c:	b10a      	cbz	r2, 8004422 <_printf_common+0x26>
 800441e:	3301      	adds	r3, #1
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	0699      	lsls	r1, r3, #26
 8004426:	bf42      	ittt	mi
 8004428:	6833      	ldrmi	r3, [r6, #0]
 800442a:	3302      	addmi	r3, #2
 800442c:	6033      	strmi	r3, [r6, #0]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d106      	bne.n	8004444 <_printf_common+0x48>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	6832      	ldr	r2, [r6, #0]
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	42ab      	cmp	r3, r5
 8004442:	dc26      	bgt.n	8004492 <_printf_common+0x96>
 8004444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004448:	1e13      	subs	r3, r2, #0
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	bf18      	it	ne
 800444e:	2301      	movne	r3, #1
 8004450:	0692      	lsls	r2, r2, #26
 8004452:	d42b      	bmi.n	80044ac <_printf_common+0xb0>
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	4649      	mov	r1, r9
 800445a:	4638      	mov	r0, r7
 800445c:	47c0      	blx	r8
 800445e:	3001      	adds	r0, #1
 8004460:	d01e      	beq.n	80044a0 <_printf_common+0xa4>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	6922      	ldr	r2, [r4, #16]
 8004466:	f003 0306 	and.w	r3, r3, #6
 800446a:	2b04      	cmp	r3, #4
 800446c:	bf02      	ittt	eq
 800446e:	68e5      	ldreq	r5, [r4, #12]
 8004470:	6833      	ldreq	r3, [r6, #0]
 8004472:	1aed      	subeq	r5, r5, r3
 8004474:	68a3      	ldr	r3, [r4, #8]
 8004476:	bf0c      	ite	eq
 8004478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800447c:	2500      	movne	r5, #0
 800447e:	4293      	cmp	r3, r2
 8004480:	bfc4      	itt	gt
 8004482:	1a9b      	subgt	r3, r3, r2
 8004484:	18ed      	addgt	r5, r5, r3
 8004486:	2600      	movs	r6, #0
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xc8>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xa8>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xac>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c6      	b.n	800443a <_printf_common+0x3e>
 80044ac:	18e1      	adds	r1, r4, r3
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	2030      	movs	r0, #48	; 0x30
 80044b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b6:	4422      	add	r2, r4
 80044b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c0:	3302      	adds	r3, #2
 80044c2:	e7c7      	b.n	8004454 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa4>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x8e>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	7e0f      	ldrb	r7, [r1, #24]
 80044de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044e0:	2f78      	cmp	r7, #120	; 0x78
 80044e2:	4691      	mov	r9, r2
 80044e4:	4680      	mov	r8, r0
 80044e6:	460c      	mov	r4, r1
 80044e8:	469a      	mov	sl, r3
 80044ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d4 	beq.w	80046a2 <_printf_i+0x1ca>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80c0 	beq.w	8004680 <_printf_i+0x1a8>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a101      	add	r1, pc, #4	; (adr r1, 8004518 <_printf_i+0x40>)
 8004514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004689 	.word	0x08004689
 8004548:	080045b1 	.word	0x080045b1
 800454c:	08004643 	.word	0x08004643
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046ab 	.word	0x080046ab
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b1 	.word	0x080045b1
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800464b 	.word	0x0800464b
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	602a      	str	r2, [r5, #0]
 8004578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e09f      	b.n	80046c4 <_printf_i+0x1ec>
 8004584:	6820      	ldr	r0, [r4, #0]
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	0607      	lsls	r7, r0, #24
 800458a:	f103 0104 	add.w	r1, r3, #4
 800458e:	6029      	str	r1, [r5, #0]
 8004590:	d501      	bpl.n	8004596 <_printf_i+0xbe>
 8004592:	681e      	ldr	r6, [r3, #0]
 8004594:	e003      	b.n	800459e <_printf_i+0xc6>
 8004596:	0646      	lsls	r6, r0, #25
 8004598:	d5fb      	bpl.n	8004592 <_printf_i+0xba>
 800459a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800459e:	2e00      	cmp	r6, #0
 80045a0:	da03      	bge.n	80045aa <_printf_i+0xd2>
 80045a2:	232d      	movs	r3, #45	; 0x2d
 80045a4:	4276      	negs	r6, r6
 80045a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045aa:	485a      	ldr	r0, [pc, #360]	; (8004714 <_printf_i+0x23c>)
 80045ac:	230a      	movs	r3, #10
 80045ae:	e012      	b.n	80045d6 <_printf_i+0xfe>
 80045b0:	682b      	ldr	r3, [r5, #0]
 80045b2:	6820      	ldr	r0, [r4, #0]
 80045b4:	1d19      	adds	r1, r3, #4
 80045b6:	6029      	str	r1, [r5, #0]
 80045b8:	0605      	lsls	r5, r0, #24
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0xe8>
 80045bc:	681e      	ldr	r6, [r3, #0]
 80045be:	e002      	b.n	80045c6 <_printf_i+0xee>
 80045c0:	0641      	lsls	r1, r0, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0xe4>
 80045c4:	881e      	ldrh	r6, [r3, #0]
 80045c6:	4853      	ldr	r0, [pc, #332]	; (8004714 <_printf_i+0x23c>)
 80045c8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ca:	bf0c      	ite	eq
 80045cc:	2308      	moveq	r3, #8
 80045ce:	230a      	movne	r3, #10
 80045d0:	2100      	movs	r1, #0
 80045d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045d6:	6865      	ldr	r5, [r4, #4]
 80045d8:	60a5      	str	r5, [r4, #8]
 80045da:	2d00      	cmp	r5, #0
 80045dc:	bfa2      	ittt	ge
 80045de:	6821      	ldrge	r1, [r4, #0]
 80045e0:	f021 0104 	bicge.w	r1, r1, #4
 80045e4:	6021      	strge	r1, [r4, #0]
 80045e6:	b90e      	cbnz	r6, 80045ec <_printf_i+0x114>
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	d04b      	beq.n	8004684 <_printf_i+0x1ac>
 80045ec:	4615      	mov	r5, r2
 80045ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80045f2:	fb03 6711 	mls	r7, r3, r1, r6
 80045f6:	5dc7      	ldrb	r7, [r0, r7]
 80045f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045fc:	4637      	mov	r7, r6
 80045fe:	42bb      	cmp	r3, r7
 8004600:	460e      	mov	r6, r1
 8004602:	d9f4      	bls.n	80045ee <_printf_i+0x116>
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10b      	bne.n	8004620 <_printf_i+0x148>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	07de      	lsls	r6, r3, #31
 800460c:	d508      	bpl.n	8004620 <_printf_i+0x148>
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	6861      	ldr	r1, [r4, #4]
 8004612:	4299      	cmp	r1, r3
 8004614:	bfde      	ittt	le
 8004616:	2330      	movle	r3, #48	; 0x30
 8004618:	f805 3c01 	strble.w	r3, [r5, #-1]
 800461c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004620:	1b52      	subs	r2, r2, r5
 8004622:	6122      	str	r2, [r4, #16]
 8004624:	f8cd a000 	str.w	sl, [sp]
 8004628:	464b      	mov	r3, r9
 800462a:	aa03      	add	r2, sp, #12
 800462c:	4621      	mov	r1, r4
 800462e:	4640      	mov	r0, r8
 8004630:	f7ff fee4 	bl	80043fc <_printf_common>
 8004634:	3001      	adds	r0, #1
 8004636:	d14a      	bne.n	80046ce <_printf_i+0x1f6>
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	b004      	add	sp, #16
 800463e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f043 0320 	orr.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	4833      	ldr	r0, [pc, #204]	; (8004718 <_printf_i+0x240>)
 800464c:	2778      	movs	r7, #120	; 0x78
 800464e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	6829      	ldr	r1, [r5, #0]
 8004656:	061f      	lsls	r7, r3, #24
 8004658:	f851 6b04 	ldr.w	r6, [r1], #4
 800465c:	d402      	bmi.n	8004664 <_printf_i+0x18c>
 800465e:	065f      	lsls	r7, r3, #25
 8004660:	bf48      	it	mi
 8004662:	b2b6      	uxthmi	r6, r6
 8004664:	07df      	lsls	r7, r3, #31
 8004666:	bf48      	it	mi
 8004668:	f043 0320 	orrmi.w	r3, r3, #32
 800466c:	6029      	str	r1, [r5, #0]
 800466e:	bf48      	it	mi
 8004670:	6023      	strmi	r3, [r4, #0]
 8004672:	b91e      	cbnz	r6, 800467c <_printf_i+0x1a4>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	f023 0320 	bic.w	r3, r3, #32
 800467a:	6023      	str	r3, [r4, #0]
 800467c:	2310      	movs	r3, #16
 800467e:	e7a7      	b.n	80045d0 <_printf_i+0xf8>
 8004680:	4824      	ldr	r0, [pc, #144]	; (8004714 <_printf_i+0x23c>)
 8004682:	e7e4      	b.n	800464e <_printf_i+0x176>
 8004684:	4615      	mov	r5, r2
 8004686:	e7bd      	b.n	8004604 <_printf_i+0x12c>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	6826      	ldr	r6, [r4, #0]
 800468c:	6961      	ldr	r1, [r4, #20]
 800468e:	1d18      	adds	r0, r3, #4
 8004690:	6028      	str	r0, [r5, #0]
 8004692:	0635      	lsls	r5, r6, #24
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	d501      	bpl.n	800469c <_printf_i+0x1c4>
 8004698:	6019      	str	r1, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0x1ca>
 800469c:	0670      	lsls	r0, r6, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0x1c0>
 80046a0:	8019      	strh	r1, [r3, #0]
 80046a2:	2300      	movs	r3, #0
 80046a4:	6123      	str	r3, [r4, #16]
 80046a6:	4615      	mov	r5, r2
 80046a8:	e7bc      	b.n	8004624 <_printf_i+0x14c>
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	681d      	ldr	r5, [r3, #0]
 80046b2:	6862      	ldr	r2, [r4, #4]
 80046b4:	2100      	movs	r1, #0
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7fb fd92 	bl	80001e0 <memchr>
 80046bc:	b108      	cbz	r0, 80046c2 <_printf_i+0x1ea>
 80046be:	1b40      	subs	r0, r0, r5
 80046c0:	6060      	str	r0, [r4, #4]
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	2300      	movs	r3, #0
 80046c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046cc:	e7aa      	b.n	8004624 <_printf_i+0x14c>
 80046ce:	6923      	ldr	r3, [r4, #16]
 80046d0:	462a      	mov	r2, r5
 80046d2:	4649      	mov	r1, r9
 80046d4:	4640      	mov	r0, r8
 80046d6:	47d0      	blx	sl
 80046d8:	3001      	adds	r0, #1
 80046da:	d0ad      	beq.n	8004638 <_printf_i+0x160>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	079b      	lsls	r3, r3, #30
 80046e0:	d413      	bmi.n	800470a <_printf_i+0x232>
 80046e2:	68e0      	ldr	r0, [r4, #12]
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	4298      	cmp	r0, r3
 80046e8:	bfb8      	it	lt
 80046ea:	4618      	movlt	r0, r3
 80046ec:	e7a6      	b.n	800463c <_printf_i+0x164>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4632      	mov	r2, r6
 80046f2:	4649      	mov	r1, r9
 80046f4:	4640      	mov	r0, r8
 80046f6:	47d0      	blx	sl
 80046f8:	3001      	adds	r0, #1
 80046fa:	d09d      	beq.n	8004638 <_printf_i+0x160>
 80046fc:	3501      	adds	r5, #1
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	9903      	ldr	r1, [sp, #12]
 8004702:	1a5b      	subs	r3, r3, r1
 8004704:	42ab      	cmp	r3, r5
 8004706:	dcf2      	bgt.n	80046ee <_printf_i+0x216>
 8004708:	e7eb      	b.n	80046e2 <_printf_i+0x20a>
 800470a:	2500      	movs	r5, #0
 800470c:	f104 0619 	add.w	r6, r4, #25
 8004710:	e7f5      	b.n	80046fe <_printf_i+0x226>
 8004712:	bf00      	nop
 8004714:	0800498d 	.word	0x0800498d
 8004718:	0800499e 	.word	0x0800499e

0800471c <memmove>:
 800471c:	4288      	cmp	r0, r1
 800471e:	b510      	push	{r4, lr}
 8004720:	eb01 0402 	add.w	r4, r1, r2
 8004724:	d902      	bls.n	800472c <memmove+0x10>
 8004726:	4284      	cmp	r4, r0
 8004728:	4623      	mov	r3, r4
 800472a:	d807      	bhi.n	800473c <memmove+0x20>
 800472c:	1e43      	subs	r3, r0, #1
 800472e:	42a1      	cmp	r1, r4
 8004730:	d008      	beq.n	8004744 <memmove+0x28>
 8004732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800473a:	e7f8      	b.n	800472e <memmove+0x12>
 800473c:	4402      	add	r2, r0
 800473e:	4601      	mov	r1, r0
 8004740:	428a      	cmp	r2, r1
 8004742:	d100      	bne.n	8004746 <memmove+0x2a>
 8004744:	bd10      	pop	{r4, pc}
 8004746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800474a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800474e:	e7f7      	b.n	8004740 <memmove+0x24>

08004750 <memcpy>:
 8004750:	440a      	add	r2, r1
 8004752:	4291      	cmp	r1, r2
 8004754:	f100 33ff 	add.w	r3, r0, #4294967295
 8004758:	d100      	bne.n	800475c <memcpy+0xc>
 800475a:	4770      	bx	lr
 800475c:	b510      	push	{r4, lr}
 800475e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004766:	4291      	cmp	r1, r2
 8004768:	d1f9      	bne.n	800475e <memcpy+0xe>
 800476a:	bd10      	pop	{r4, pc}

0800476c <_realloc_r>:
 800476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004770:	4680      	mov	r8, r0
 8004772:	4614      	mov	r4, r2
 8004774:	460e      	mov	r6, r1
 8004776:	b921      	cbnz	r1, 8004782 <_realloc_r+0x16>
 8004778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	4611      	mov	r1, r2
 800477e:	f7ff bb45 	b.w	8003e0c <_malloc_r>
 8004782:	b92a      	cbnz	r2, 8004790 <_realloc_r+0x24>
 8004784:	f7ff fc96 	bl	80040b4 <_free_r>
 8004788:	4625      	mov	r5, r4
 800478a:	4628      	mov	r0, r5
 800478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004790:	f000 f81b 	bl	80047ca <_malloc_usable_size_r>
 8004794:	4284      	cmp	r4, r0
 8004796:	4607      	mov	r7, r0
 8004798:	d802      	bhi.n	80047a0 <_realloc_r+0x34>
 800479a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800479e:	d812      	bhi.n	80047c6 <_realloc_r+0x5a>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f7ff fb32 	bl	8003e0c <_malloc_r>
 80047a8:	4605      	mov	r5, r0
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0ed      	beq.n	800478a <_realloc_r+0x1e>
 80047ae:	42bc      	cmp	r4, r7
 80047b0:	4622      	mov	r2, r4
 80047b2:	4631      	mov	r1, r6
 80047b4:	bf28      	it	cs
 80047b6:	463a      	movcs	r2, r7
 80047b8:	f7ff ffca 	bl	8004750 <memcpy>
 80047bc:	4631      	mov	r1, r6
 80047be:	4640      	mov	r0, r8
 80047c0:	f7ff fc78 	bl	80040b4 <_free_r>
 80047c4:	e7e1      	b.n	800478a <_realloc_r+0x1e>
 80047c6:	4635      	mov	r5, r6
 80047c8:	e7df      	b.n	800478a <_realloc_r+0x1e>

080047ca <_malloc_usable_size_r>:
 80047ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ce:	1f18      	subs	r0, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bfbc      	itt	lt
 80047d4:	580b      	ldrlt	r3, [r1, r0]
 80047d6:	18c0      	addlt	r0, r0, r3
 80047d8:	4770      	bx	lr
	...

080047dc <_init>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr

080047e8 <_fini>:
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ea:	bf00      	nop
 80047ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ee:	bc08      	pop	{r3}
 80047f0:	469e      	mov	lr, r3
 80047f2:	4770      	bx	lr
